id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/psi4/psi4/issues/190#issuecomment-157840562:814,Testability,TEST,TEST,814,"Hi Lori,. I have just checked your output file for dfomp2p5-grad1. However, your input file is wrong. Please compare it with the following, which is the one in the public repo:. #! DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. ref_vals = [ #TEST; [ 0.000000000000, 0.00000000000000, 0.01227994599573], #TEST; [ 0.000000000000, 0.00200475312336, -0.00613997299786], #TEST; [ 0.000000000000, -0.00200475312336, -0.00613997299786] #TEST; ] #TEST; ref = psi4.Matrix(3, 3) #TEST; ref.set(ref_vals). memory 256 mb. molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776; }. set {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad; freeze_core true; }; gradient('df-omp2.5'). grad = psi4.wavefunction().gradient() #TEST; compare_matrices(ref, grad, 5, ""Analytic gradients"") #TEST",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157840562
https://github.com/psi4/psi4/issues/190#issuecomment-157844332:43,Testability,test,tests,43,"Hi Lori,. dfomp2p5-grad2 and df-omp3-grad2 tests were failing due to wrong scf solutions. Both are fixed now. . Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157844332
https://github.com/psi4/psi4/issues/190#issuecomment-158097011:27,Testability,test,testboard,27,"Last two pass now (https://testboard.org/cdash/viewTest.php?onlydelta&buildid=44436), so item complete.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-158097011
https://github.com/psi4/psi4/pull/192#issuecomment-157589425:55,Testability,test,tests,55,Neat! `reap.py` looks general– can it be moved up into tests/ so that pywrap-db2 and pywrap-opt-sowreap can use it?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/192#issuecomment-157589425
https://github.com/psi4/psi4/pull/192#issuecomment-157603667:142,Deployability,update,update,142,"That is a much better idea, I am re-working the regex the script uses to get the list of intermediate input files script right now and I will update the branch when I have this in place. . The new script would only require that you add the label in the CMakeLists.txt file to a test and reap.py would live in tests, does that sound good?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/192#issuecomment-157603667
https://github.com/psi4/psi4/pull/192#issuecomment-157603667:278,Testability,test,test,278,"That is a much better idea, I am re-working the regex the script uses to get the list of intermediate input files script right now and I will update the branch when I have this in place. . The new script would only require that you add the label in the CMakeLists.txt file to a test and reap.py would live in tests, does that sound good?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/192#issuecomment-157603667
https://github.com/psi4/psi4/pull/192#issuecomment-157603667:309,Testability,test,tests,309,"That is a much better idea, I am re-working the regex the script uses to get the list of intermediate input files script right now and I will update the branch when I have this in place. . The new script would only require that you add the label in the CMakeLists.txt file to a test and reap.py would live in tests, does that sound good?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/192#issuecomment-157603667
https://github.com/psi4/psi4/pull/192#issuecomment-157864804:166,Availability,error,error,166,"I have reap.py in tests/ now, and pywrap-db2 is working in addition to pywrap-freq-e-sowreap, but pywrap-opt-sowreap is still failing. That appears to be a bug or an error in the input file since I can't even run that one ""by-hand"". ; Error shown below:. ```; Traceback (most recent call last):; File ""<string>"", line 24, in <module>; File ""/home/ajay/psi4/source/lib/python/driver.py"", line 1191, in optimize; thisenergy = gradient(name, **kwargs); File ""/home/ajay/psi4/source/lib/python/driver.py"", line 824, in gradient; fmaster.write(p4util.format_options_for_input().encode('utf-8')); TypeError: format_options_for_input() takes exactly 1 argument (0 given); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/192#issuecomment-157864804
https://github.com/psi4/psi4/pull/192#issuecomment-157864804:235,Availability,Error,Error,235,"I have reap.py in tests/ now, and pywrap-db2 is working in addition to pywrap-freq-e-sowreap, but pywrap-opt-sowreap is still failing. That appears to be a bug or an error in the input file since I can't even run that one ""by-hand"". ; Error shown below:. ```; Traceback (most recent call last):; File ""<string>"", line 24, in <module>; File ""/home/ajay/psi4/source/lib/python/driver.py"", line 1191, in optimize; thisenergy = gradient(name, **kwargs); File ""/home/ajay/psi4/source/lib/python/driver.py"", line 824, in gradient; fmaster.write(p4util.format_options_for_input().encode('utf-8')); TypeError: format_options_for_input() takes exactly 1 argument (0 given); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/192#issuecomment-157864804
https://github.com/psi4/psi4/pull/192#issuecomment-157864804:401,Performance,optimiz,optimize,401,"I have reap.py in tests/ now, and pywrap-db2 is working in addition to pywrap-freq-e-sowreap, but pywrap-opt-sowreap is still failing. That appears to be a bug or an error in the input file since I can't even run that one ""by-hand"". ; Error shown below:. ```; Traceback (most recent call last):; File ""<string>"", line 24, in <module>; File ""/home/ajay/psi4/source/lib/python/driver.py"", line 1191, in optimize; thisenergy = gradient(name, **kwargs); File ""/home/ajay/psi4/source/lib/python/driver.py"", line 824, in gradient; fmaster.write(p4util.format_options_for_input().encode('utf-8')); TypeError: format_options_for_input() takes exactly 1 argument (0 given); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/192#issuecomment-157864804
https://github.com/psi4/psi4/pull/192#issuecomment-157864804:18,Testability,test,tests,18,"I have reap.py in tests/ now, and pywrap-db2 is working in addition to pywrap-freq-e-sowreap, but pywrap-opt-sowreap is still failing. That appears to be a bug or an error in the input file since I can't even run that one ""by-hand"". ; Error shown below:. ```; Traceback (most recent call last):; File ""<string>"", line 24, in <module>; File ""/home/ajay/psi4/source/lib/python/driver.py"", line 1191, in optimize; thisenergy = gradient(name, **kwargs); File ""/home/ajay/psi4/source/lib/python/driver.py"", line 824, in gradient; fmaster.write(p4util.format_options_for_input().encode('utf-8')); TypeError: format_options_for_input() takes exactly 1 argument (0 given); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/192#issuecomment-157864804
https://github.com/psi4/psi4/pull/192#issuecomment-157884587:289,Performance,optimiz,optimizations,289,"Initial testing looks good– db2 and freq-e-sowreap pass for me, too. I just checked in minor tweaks (de024f86f0f978029cb2acaae5469636a3ecf6ab) for printing and so that `reap.py` can catch OPT file names, too. The problem with opt-sowreap that you quoted above is now fixed. Unfortunately, optimizations need multiple sow/reap passes (https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-opt-sowreap/Makefile.in). If you hardwire `first_out = 'OPT-master.in'` in `reap.py` (otherwise it's looking for instructions in the wrong file), the job makes it through the first optimization cycle, so that's an improvement, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/192#issuecomment-157884587
https://github.com/psi4/psi4/pull/192#issuecomment-157884587:568,Performance,optimiz,optimization,568,"Initial testing looks good– db2 and freq-e-sowreap pass for me, too. I just checked in minor tweaks (de024f86f0f978029cb2acaae5469636a3ecf6ab) for printing and so that `reap.py` can catch OPT file names, too. The problem with opt-sowreap that you quoted above is now fixed. Unfortunately, optimizations need multiple sow/reap passes (https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-opt-sowreap/Makefile.in). If you hardwire `first_out = 'OPT-master.in'` in `reap.py` (otherwise it's looking for instructions in the wrong file), the job makes it through the first optimization cycle, so that's an improvement, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/192#issuecomment-157884587
https://github.com/psi4/psi4/pull/192#issuecomment-157884587:8,Testability,test,testing,8,"Initial testing looks good– db2 and freq-e-sowreap pass for me, too. I just checked in minor tweaks (de024f86f0f978029cb2acaae5469636a3ecf6ab) for printing and so that `reap.py` can catch OPT file names, too. The problem with opt-sowreap that you quoted above is now fixed. Unfortunately, optimizations need multiple sow/reap passes (https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-opt-sowreap/Makefile.in). If you hardwire `first_out = 'OPT-master.in'` in `reap.py` (otherwise it's looking for instructions in the wrong file), the job makes it through the first optimization cycle, so that's an improvement, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/192#issuecomment-157884587
https://github.com/psi4/psi4/pull/192#issuecomment-157884587:374,Testability,test,tests,374,"Initial testing looks good– db2 and freq-e-sowreap pass for me, too. I just checked in minor tweaks (de024f86f0f978029cb2acaae5469636a3ecf6ab) for printing and so that `reap.py` can catch OPT file names, too. The problem with opt-sowreap that you quoted above is now fixed. Unfortunately, optimizations need multiple sow/reap passes (https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-opt-sowreap/Makefile.in). If you hardwire `first_out = 'OPT-master.in'` in `reap.py` (otherwise it's looking for instructions in the wrong file), the job makes it through the first optimization cycle, so that's an improvement, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/192#issuecomment-157884587
https://github.com/psi4/psi4/issues/194#issuecomment-159447131:38,Energy Efficiency,adapt,adapted,38,"Yes, most likely the DMRG code is not adapted to use density fitting, so it; has to go off and compute all the usual 2-electron integrals before it; starts up. On Tue, Nov 24, 2015 at 6:58 PM, Lori A. Burns notifications@github.com; wrote:. > I can't say exactly, but we usually put in that flag if the scf has been; > done DF, but the subsequent post-SCF needs for 2e- integrals.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/194#issuecomment-159443070.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/194#issuecomment-159447131
https://github.com/psi4/psi4/issues/194#issuecomment-159447131:38,Modifiability,adapt,adapted,38,"Yes, most likely the DMRG code is not adapted to use density fitting, so it; has to go off and compute all the usual 2-electron integrals before it; starts up. On Tue, Nov 24, 2015 at 6:58 PM, Lori A. Burns notifications@github.com; wrote:. > I can't say exactly, but we usually put in that flag if the scf has been; > done DF, but the subsequent post-SCF needs for 2e- integrals.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/194#issuecomment-159443070.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/194#issuecomment-159447131
https://github.com/psi4/psi4/issues/195#issuecomment-189336384:64,Availability,toler,tolerance,64,@jturney @andysim @psi-rking Does anyone object to reducing the tolerance here? Alternatively we can make a special case for ghost atoms. Although two centers so close will increase linear dependency issues.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/195#issuecomment-189336384
https://github.com/psi4/psi4/issues/195#issuecomment-189336384:189,Integrability,depend,dependency,189,@jturney @andysim @psi-rking Does anyone object to reducing the tolerance here? Alternatively we can make a special case for ghost atoms. Although two centers so close will increase linear dependency issues.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/195#issuecomment-189336384
https://github.com/psi4/psi4/issues/195#issuecomment-189390629:125,Availability,toler,tolerance,125,"My only concern was that symmetrize uses atom_map, and optking uses symmetrize to remove numerical noise. However, since the tolerance is passed through as an optional argument, I have no objection.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/195#issuecomment-189390629
https://github.com/psi4/psi4/issues/195#issuecomment-189456212:201,Availability,toler,tolerance,201,"Granted. I was vaguely remembering that I also use 'valid_atom_map' to test whether RFO eigenvectors are symmetric - and they can be large and asymmetric. But for valid_atom_map it looks like I pass a tolerance in from optking, so I don't forsee any problems. Give it a shot.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/195#issuecomment-189456212
https://github.com/psi4/psi4/issues/195#issuecomment-189456212:71,Testability,test,test,71,"Granted. I was vaguely remembering that I also use 'valid_atom_map' to test whether RFO eigenvectors are symmetric - and they can be large and asymmetric. But for valid_atom_map it looks like I pass a tolerance in from optking, so I don't forsee any problems. Give it a shot.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/195#issuecomment-189456212
https://github.com/psi4/psi4/issues/196#issuecomment-162564022:56,Modifiability,config,config,56,@jgonthier use another name instead of `linux` in `user-config.jam` Like this:. ```; using intel : linux-cray : /opt/cray/craype/2.2.1/bin/CC ; using mpi : : mpich ;; ```. or whatever else. Be also sure that the MPI settings are passed correctly: http://www.boost.org/doc/libs/1_59_0/doc/html/mpi/getting_started.html#mpi.config; Let me know how it goes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/196#issuecomment-162564022
https://github.com/psi4/psi4/issues/196#issuecomment-162564022:322,Modifiability,config,config,322,@jgonthier use another name instead of `linux` in `user-config.jam` Like this:. ```; using intel : linux-cray : /opt/cray/craype/2.2.1/bin/CC ; using mpi : : mpich ;; ```. or whatever else. Be also sure that the MPI settings are passed correctly: http://www.boost.org/doc/libs/1_59_0/doc/html/mpi/getting_started.html#mpi.config; Let me know how it goes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/196#issuecomment-162564022
https://github.com/psi4/psi4/issues/196#issuecomment-163044282:200,Availability,error,error,200,"@robertodr I used the line you suggested. I guess that I should then specify; --toolset=intel-linux-cray as argument for the bootstrap script ?. The bootstrap script does not like that, it issues the error:. Unknown toolset: intel-linux-cray. You can specify the toolset as the argument, i.e.:; ./build.sh gcc. Toolsets supported by this script are:; acc, como, darwin, gcc, intel-darwin, intel-linux, kcc, kylix,; mipspro, mingw(msys), pathscale, pgi, qcc, sun, sunpro, tru64cxx, vacpp. and I believe that if I specify --toolset=intel-linux, it then just uses icc instead of the proper CC wrapper on the Cray.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/196#issuecomment-163044282
https://github.com/psi4/psi4/issues/196#issuecomment-163044282:590,Integrability,wrap,wrapper,590,"@robertodr I used the line you suggested. I guess that I should then specify; --toolset=intel-linux-cray as argument for the bootstrap script ?. The bootstrap script does not like that, it issues the error:. Unknown toolset: intel-linux-cray. You can specify the toolset as the argument, i.e.:; ./build.sh gcc. Toolsets supported by this script are:; acc, como, darwin, gcc, intel-darwin, intel-linux, kcc, kylix,; mipspro, mingw(msys), pathscale, pgi, qcc, sun, sunpro, tru64cxx, vacpp. and I believe that if I specify --toolset=intel-linux, it then just uses icc instead of the proper CC wrapper on the Cray.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/196#issuecomment-163044282
https://github.com/psi4/psi4/issues/196#issuecomment-163389379:234,Deployability,install,installed,234,"Boost compilation is really a royal pain... Can you try this:. ```; using intel-linux : : /opt/cray/craype/2.2.1/bin/CC ; using mpi : : mpich ;; ```. it is supposed to work, but I tried on my laptop with two different versions of GCC installed and it's always the default version that gets picked.; You might want to give a shot also to the suggestion in the third post in this forum thread:; http://boost.2283326.n4.nabble.com/MPI-how-to-compile-Boost-MPI-on-Cray-Linux-td4634179.html",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/196#issuecomment-163389379
https://github.com/psi4/psi4/issues/196#issuecomment-170054358:94,Modifiability,config,config,94,"I tried this, but then it is back to complaining about intel-linux being redefined in project-config.jam. This is really weird since project-config.jam has a conditional that is apparently supposed to avoid this, but it does not work for some reason. So, I solved that by adding a command to boost/CMakeLists.txt that modifies project-config.jam with sed to eliminate the redefinition of intel-linux. So I am closing this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/196#issuecomment-170054358
https://github.com/psi4/psi4/issues/196#issuecomment-170054358:141,Modifiability,config,config,141,"I tried this, but then it is back to complaining about intel-linux being redefined in project-config.jam. This is really weird since project-config.jam has a conditional that is apparently supposed to avoid this, but it does not work for some reason. So, I solved that by adding a command to boost/CMakeLists.txt that modifies project-config.jam with sed to eliminate the redefinition of intel-linux. So I am closing this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/196#issuecomment-170054358
https://github.com/psi4/psi4/issues/196#issuecomment-170054358:335,Modifiability,config,config,335,"I tried this, but then it is back to complaining about intel-linux being redefined in project-config.jam. This is really weird since project-config.jam has a conditional that is apparently supposed to avoid this, but it does not work for some reason. So, I solved that by adding a command to boost/CMakeLists.txt that modifies project-config.jam with sed to eliminate the redefinition of intel-linux. So I am closing this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/196#issuecomment-170054358
https://github.com/psi4/psi4/issues/196#issuecomment-170054358:201,Safety,avoid,avoid,201,"I tried this, but then it is back to complaining about intel-linux being redefined in project-config.jam. This is really weird since project-config.jam has a conditional that is apparently supposed to avoid this, but it does not work for some reason. So, I solved that by adding a command to boost/CMakeLists.txt that modifies project-config.jam with sed to eliminate the redefinition of intel-linux. So I am closing this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/196#issuecomment-170054358
https://github.com/psi4/psi4/issues/198#issuecomment-172765174:86,Availability,failure,failures,86,"@vymetal commit df548db seems to fix both the problems you reported, i.e. convergence failures for PCM-UHF and the discrepancies in calculated first-order properties _wrt_ finite difference calculations.; The input file you provided is now a test case for first-order properties with PCM (it's in `tests/pcm_dipole`) In case your problems persist, don't hesitate to open a new issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/198#issuecomment-172765174
https://github.com/psi4/psi4/issues/198#issuecomment-172765174:242,Testability,test,test,242,"@vymetal commit df548db seems to fix both the problems you reported, i.e. convergence failures for PCM-UHF and the discrepancies in calculated first-order properties _wrt_ finite difference calculations.; The input file you provided is now a test case for first-order properties with PCM (it's in `tests/pcm_dipole`) In case your problems persist, don't hesitate to open a new issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/198#issuecomment-172765174
https://github.com/psi4/psi4/issues/198#issuecomment-172765174:298,Testability,test,tests,298,"@vymetal commit df548db seems to fix both the problems you reported, i.e. convergence failures for PCM-UHF and the discrepancies in calculated first-order properties _wrt_ finite difference calculations.; The input file you provided is now a test case for first-order properties with PCM (it's in `tests/pcm_dipole`) In case your problems persist, don't hesitate to open a new issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/198#issuecomment-172765174
https://github.com/psi4/psi4/issues/199#issuecomment-169077006:213,Deployability,update,update,213,"@ChayaSt As explained [here](https://github.com/psi4/psi4public/wiki/1_Obtaining#clonepsi4public) you should be cloning using the `--recursive` flag. If you cloned without that flag, you should run `git submodule update --init --recursive` **prior** to running the `setup` script.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/199#issuecomment-169077006
https://github.com/psi4/psi4/issues/199#issuecomment-169139808:33,Availability,error,error,33,"Thanks.; Now I get the following error:. ```; [100%] Linking CXX executable ../../../bin/psi4; Undefined symbols for architecture x86_64:; ""__ZNKSt11logic_error4whatEv"", referenced from:; __ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorISt11logic_errorEEEE in create_new_plugin.cc.o; __ZTVN5boost16exception_detail19error_info_injectorISt11logic_errorEE in create_new_plugin.cc.o; __ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorISt16invalid_argumentEEEE in create_new_plugin.cc.o; __ZTVN5boost16exception_detail19error_info_injectorISt16invalid_argumentEE in create_new_plugin.cc.o; __ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorISt11logic_errorEEEE in libmints.a(basisset_parser.cc.o); __ZTVN5boost16exception_detail19error_info_injectorISt11logic_errorEE in libmints.a(basisset_parser.cc.o); __ZTVN5boost16exception_detail10clone_implINS0_19error_info_injectorISt16invalid_argumentEEEE in libmints.a(basisset_parser.cc.o); ...; ""__ZNKSt13bad_exception4whatEv"", referenced from:; __ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE in libpsio.a(filemanager.cc.o); __ZTVN5boost16exception_detail14bad_exception_E in libpsio.a(filemanager.cc.o); __ZTVN5boost16exception_detail10clone_implINS0_14bad_exception_EEE in libboost_thread-1_57.a(thread.o); __ZTVN5boost16exception_detail14bad_exception_E in libboost_thread-1_57.a(thread.o); ""__ZNKSt13runtime_error4whatEv"", referenced from:; __ZTVN5boost9xpressive11regex_errorE in create_new_plugin.cc.o; __ZTVN5boost16exception_detail10clone_implINS_9xpressive11regex_errorEEE in create_new_plugin.cc.o; __ZTVN5boost9xpressive11regex_errorE in libplugin.a(load_plugin.cc.o); __ZTVN5boost16exception_detail10clone_implINS_9xpressive11regex_errorEEE in libplugin.a(load_plugin.cc.o); __ZTVN5boost9xpressive11regex_errorE in libmints.a(basisset.cc.o); __ZTVN5boost16exception_detail10clone_implINS_9xpressive11regex_errorEEE in libmints.a(basisset.cc.o); __ZNK5boost6system12system",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/199#issuecomment-169139808
https://github.com/psi4/psi4/issues/199#issuecomment-169139808:73927,Availability,error,errors,73927,"n lib3index.a(denominator.cc.o); __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv in libefp_solver.a(efp_solver.cc.o); __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv in libmints.a(oeprop.cc.o); ...; ""__ZTISt13bad_exception"", referenced from:; __ZTIN5boost16exception_detail14bad_exception_E in libpsio.a(filemanager.cc.o); __ZTIN5boost16exception_detail14bad_exception_E in libboost_thread-1_57.a(thread.o); ""__ZTISt13runtime_error"", referenced from:; __ZTIN5boost9xpressive11regex_errorE in create_new_plugin.cc.o; __ZTIN5boost9xpressive11regex_errorE in libplugin.a(load_plugin.cc.o); __ZTIN3psi12PsiExceptionE in libpsi4util.a(exception.cc.o); __ZTIN5boost9xpressive11regex_errorE in libmints.a(basisset.cc.o); __ZTIN5boost6system12system_errorE in libboost_filesystem-1_57.a(operations.o); __ZTIN5boost16exception_detail19error_info_injectorISt13runtime_errorEE in libboost_regex-1_57.a(instances.o); __ZTIN5boost17bad_function_callE in libboost_python-1_57.a(errors.o); ...; ""__ZTISt14overflow_error"", referenced from:; __ZTIN5boost16exception_detail19error_info_injectorISt14overflow_errorEE in libmints.a(sieve.cc.o); __ZN5boost7numeric6odeint24bulirsch_stoer_dense_outINSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEE7do_stepIN10interfaces19LnTransformedRadialEEENS3_4pairIddEET_ in libpcm.a(Meddle.cpp.o); __ZTIN5boost16exception_detail19error_info_injectorISt14overflow_errorEE in libpcm.a(Meddle.cpp.o); __ZTIN5boost16exception_detail19error_info_injectorISt14overflow_errorEE in libpcm.a(CPCMSolver.cpp.o); __ZTIN5boost16exception_detail19error_info_injectorISt14overflow_errorEE in libpcm.a(IEFSolver.cpp.o); ""__ZTISt16invalid_argument"", referenced from:; __ZTIN5boost16exception_detail19error_info_injectorISt16invalid_argumentEE in create_new_plugin.cc.o; __ZTIN5boost16exception_detail19error_info_injectorISt16invalid_argumentEE in libmints.a(basisset_parser.cc.o); __ZTIN5boost16excepti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/199#issuecomment-169139808
https://github.com/psi4/psi4/issues/199#issuecomment-169139808:76455,Availability,error,errors,76455,".cc.o); ...; ""__ZTISt8bad_cast"", referenced from:; __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj in liboptking.a(optking.cc.o); __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv in liboptking.a(optking.cc.o); __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv in liboptking.a(optking.cc.o); __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi in liboptking.a(optking.cc.o); __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj in libmints.a(basisset_parser.cc.o); __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv in libmints.a(basisset_parser.cc.o); __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv in libmints.a(basisset_parser.cc.o); ...; ""__ZTISt9bad_alloc"", referenced from:; __ZTIN5boost16exception_detail10bad_alloc_E in libpsio.a(filemanager.cc.o); __ZN5boost6python15instance_holder8allocateEP7_objectmm in libboost_python-1_57.a(class.o); GCC_except_table3 in libboost_python-1_57.a(errors.o); __ZN5boost6python6detail12gcc_demangleEPKc in libboost_python-1_57.a(type_id.o); GCC_except_table3 in libmints.a(eribase.cc.o); GCC_except_table3 in libmints.a(3coverlap.cc.o); __ZN5Eigen8internal19throw_std_bad_allocEv in libpcm.a(Meddle.cpp.o); ...; ""__ZTISt9exception"", referenced from:; __ZTIN5boost2io12format_errorE in libmints.a(molecule.cc.o); GCC_except_table3 in libboost_python-1_57.a(errors.o); __ZTIN6PsiAPI13PsiException2E in libpsiapi.a(BasisSet.cc.o); __ZTIN3psi13PsiException2E in libmolecule.a(FragmentedSys.cc.o); __ZTIN3psi13PsiException2E in libparallel2.a(TaskMap.cc.o); __ZTIN3psi13PsiException2E in libparallel2.a(TaskStatistics.cc.o); __ZTIN3psi13PsiException2E in libPsiUtil.a(Exception2.cc.o); ...; ""__ZTIa"", referenced from:; __ZN5boost6python9converter29initialize_builtin_convertersEv in libboost_python-1_57.a(builtin_converters.o); ""__ZTIb"", referenced from:; __ZN5boost6python6detail15signature_arityILj3EE4implINS_3mpl7vector4IvRN3psi11PSIOManagerEibEEE8elem",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/199#issuecomment-169139808
https://github.com/psi4/psi4/issues/199#issuecomment-169139808:76862,Availability,error,errors,76862,"boptking.a(optking.cc.o); __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj in libmints.a(basisset_parser.cc.o); __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv in libmints.a(basisset_parser.cc.o); __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv in libmints.a(basisset_parser.cc.o); ...; ""__ZTISt9bad_alloc"", referenced from:; __ZTIN5boost16exception_detail10bad_alloc_E in libpsio.a(filemanager.cc.o); __ZN5boost6python15instance_holder8allocateEP7_objectmm in libboost_python-1_57.a(class.o); GCC_except_table3 in libboost_python-1_57.a(errors.o); __ZN5boost6python6detail12gcc_demangleEPKc in libboost_python-1_57.a(type_id.o); GCC_except_table3 in libmints.a(eribase.cc.o); GCC_except_table3 in libmints.a(3coverlap.cc.o); __ZN5Eigen8internal19throw_std_bad_allocEv in libpcm.a(Meddle.cpp.o); ...; ""__ZTISt9exception"", referenced from:; __ZTIN5boost2io12format_errorE in libmints.a(molecule.cc.o); GCC_except_table3 in libboost_python-1_57.a(errors.o); __ZTIN6PsiAPI13PsiException2E in libpsiapi.a(BasisSet.cc.o); __ZTIN3psi13PsiException2E in libmolecule.a(FragmentedSys.cc.o); __ZTIN3psi13PsiException2E in libparallel2.a(TaskMap.cc.o); __ZTIN3psi13PsiException2E in libparallel2.a(TaskStatistics.cc.o); __ZTIN3psi13PsiException2E in libPsiUtil.a(Exception2.cc.o); ...; ""__ZTIa"", referenced from:; __ZN5boost6python9converter29initialize_builtin_convertersEv in libboost_python-1_57.a(builtin_converters.o); ""__ZTIb"", referenced from:; __ZN5boost6python6detail15signature_arityILj3EE4implINS_3mpl7vector4IvRN3psi11PSIOManagerEibEEE8elementsEv in export_psio.cc.o; __ZN5boost6python9converter23expected_pytype_for_argIbE10get_pytypeEv in export_psio.cc.o; __ZN5boost6python6detail15signature_arityILj3EE4implINS_3mpl7vector4IvRN3psi11PSIOManagerERKNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEbEEE8elementsEv in export_psio.cc.o; ___cxx_global_var_init57 in export_psio.cc.o; __ZN5boost6python6detail12caller_arityILj1EE4impl",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/199#issuecomment-169139808
https://github.com/psi4/psi4/issues/199#issuecomment-169139808:114717,Availability,error,error,114717,"alizerEE7executeEPv in export_mints.cc.o; __ZN5boost6python7objects22dynamic_cast_generatorIN3psi9LocalizerENS3_13BoysLocalizerEE7executeEPv in export_mints.cc.o; __ZN5boost6python7objects22dynamic_cast_generatorIN3psi12WavefunctionENS3_3scf3RHFEE7executeEPv in export_mints.cc.o; __ZN5boost6python7objects22dynamic_cast_generatorIN3psi3scf2HFENS4_3RHFEE7executeEPv in export_mints.cc.o; __ZN5boost6python7objects22dynamic_cast_generatorIN3psi12WavefunctionENS3_3scf2HFEE7executeEPv in export_mints.cc.o; __ZN5boost6python7objects22dynamic_cast_generatorIN3psi14BasisSetParserENS3_24Gaussian94BasisSetParserEE7executeEPv in export_mints.cc.o; ...; ""___gxx_personality_v0"", referenced from:; __Z11export_psiov in export_psio.cc.o; __ZN5boost6python3api9slice_nilD1Ev in export_psio.cc.o; __ZN3psi11PSIOManager9print_outEv in export_psio.cc.o; __ZN5boost6python6class_IN3psi11PSIOManagerENS_10shared_ptrIS3_EENS0_6detail13not_specifiedES7_E8def_implIS3_MS3_FNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEvENS6_10def_helperIA10_cS7_S7_S7_EEEEvPT_PKcT0_RKT1_z in export_psio.cc.o; __ZN5boost6python6detail12caller_arityILj1EE4implIMN3psi11PSIOManagerEFNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvENS0_21default_call_policiesENS_3mpl7vector2ISD_RS6_EEE9signatureEv in export_psio.cc.o; __ZN5boost6python6detail12caller_arityILj1EE4implIMN3psi11PSIOManagerEFNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvENS0_21default_call_policiesENS_3mpl7vector2ISD_RS6_EEEclEP7_objectSN_ in export_psio.cc.o; __ZN5boost6python6class_IN3psi11PSIOManagerENS_10shared_ptrIS3_EENS0_6detail13not_specifiedES7_E8def_implIS3_MS3_FvibENS6_10def_helperIA10_cS7_S7_S7_EEEEvPT_PKcT0_RKT1_z in export_psio.cc.o; ...; ld: symbol(s) not found for architecture x86_64; clang-3.5: error: linker command failed with exit code 1 (use -v to see invocation); make[2]: *** [bin/psi4] Error 1; make[1]: *** [src/bin/psi4/CMakeFiles/psi4.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/199#issuecomment-169139808
https://github.com/psi4/psi4/issues/199#issuecomment-169139808:114815,Availability,Error,Error,114815,"alizerEE7executeEPv in export_mints.cc.o; __ZN5boost6python7objects22dynamic_cast_generatorIN3psi9LocalizerENS3_13BoysLocalizerEE7executeEPv in export_mints.cc.o; __ZN5boost6python7objects22dynamic_cast_generatorIN3psi12WavefunctionENS3_3scf3RHFEE7executeEPv in export_mints.cc.o; __ZN5boost6python7objects22dynamic_cast_generatorIN3psi3scf2HFENS4_3RHFEE7executeEPv in export_mints.cc.o; __ZN5boost6python7objects22dynamic_cast_generatorIN3psi12WavefunctionENS3_3scf2HFEE7executeEPv in export_mints.cc.o; __ZN5boost6python7objects22dynamic_cast_generatorIN3psi14BasisSetParserENS3_24Gaussian94BasisSetParserEE7executeEPv in export_mints.cc.o; ...; ""___gxx_personality_v0"", referenced from:; __Z11export_psiov in export_psio.cc.o; __ZN5boost6python3api9slice_nilD1Ev in export_psio.cc.o; __ZN3psi11PSIOManager9print_outEv in export_psio.cc.o; __ZN5boost6python6class_IN3psi11PSIOManagerENS_10shared_ptrIS3_EENS0_6detail13not_specifiedES7_E8def_implIS3_MS3_FNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEvENS6_10def_helperIA10_cS7_S7_S7_EEEEvPT_PKcT0_RKT1_z in export_psio.cc.o; __ZN5boost6python6detail12caller_arityILj1EE4implIMN3psi11PSIOManagerEFNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvENS0_21default_call_policiesENS_3mpl7vector2ISD_RS6_EEE9signatureEv in export_psio.cc.o; __ZN5boost6python6detail12caller_arityILj1EE4implIMN3psi11PSIOManagerEFNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvENS0_21default_call_policiesENS_3mpl7vector2ISD_RS6_EEEclEP7_objectSN_ in export_psio.cc.o; __ZN5boost6python6class_IN3psi11PSIOManagerENS_10shared_ptrIS3_EENS0_6detail13not_specifiedES7_E8def_implIS3_MS3_FvibENS6_10def_helperIA10_cS7_S7_S7_EEEEvPT_PKcT0_RKT1_z in export_psio.cc.o; ...; ld: symbol(s) not found for architecture x86_64; clang-3.5: error: linker command failed with exit code 1 (use -v to see invocation); make[2]: *** [bin/psi4] Error 1; make[1]: *** [src/bin/psi4/CMakeFiles/psi4.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/199#issuecomment-169139808
https://github.com/psi4/psi4/issues/199#issuecomment-169139808:114876,Availability,Error,Error,114876,"alizerEE7executeEPv in export_mints.cc.o; __ZN5boost6python7objects22dynamic_cast_generatorIN3psi9LocalizerENS3_13BoysLocalizerEE7executeEPv in export_mints.cc.o; __ZN5boost6python7objects22dynamic_cast_generatorIN3psi12WavefunctionENS3_3scf3RHFEE7executeEPv in export_mints.cc.o; __ZN5boost6python7objects22dynamic_cast_generatorIN3psi3scf2HFENS4_3RHFEE7executeEPv in export_mints.cc.o; __ZN5boost6python7objects22dynamic_cast_generatorIN3psi12WavefunctionENS3_3scf2HFEE7executeEPv in export_mints.cc.o; __ZN5boost6python7objects22dynamic_cast_generatorIN3psi14BasisSetParserENS3_24Gaussian94BasisSetParserEE7executeEPv in export_mints.cc.o; ...; ""___gxx_personality_v0"", referenced from:; __Z11export_psiov in export_psio.cc.o; __ZN5boost6python3api9slice_nilD1Ev in export_psio.cc.o; __ZN3psi11PSIOManager9print_outEv in export_psio.cc.o; __ZN5boost6python6class_IN3psi11PSIOManagerENS_10shared_ptrIS3_EENS0_6detail13not_specifiedES7_E8def_implIS3_MS3_FNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEvENS6_10def_helperIA10_cS7_S7_S7_EEEEvPT_PKcT0_RKT1_z in export_psio.cc.o; __ZN5boost6python6detail12caller_arityILj1EE4implIMN3psi11PSIOManagerEFNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvENS0_21default_call_policiesENS_3mpl7vector2ISD_RS6_EEE9signatureEv in export_psio.cc.o; __ZN5boost6python6detail12caller_arityILj1EE4implIMN3psi11PSIOManagerEFNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvENS0_21default_call_policiesENS_3mpl7vector2ISD_RS6_EEEclEP7_objectSN_ in export_psio.cc.o; __ZN5boost6python6class_IN3psi11PSIOManagerENS_10shared_ptrIS3_EENS0_6detail13not_specifiedES7_E8def_implIS3_MS3_FvibENS6_10def_helperIA10_cS7_S7_S7_EEEEvPT_PKcT0_RKT1_z in export_psio.cc.o; ...; ld: symbol(s) not found for architecture x86_64; clang-3.5: error: linker command failed with exit code 1 (use -v to see invocation); make[2]: *** [bin/psi4] Error 1; make[1]: *** [src/bin/psi4/CMakeFiles/psi4.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/199#issuecomment-169139808
https://github.com/psi4/psi4/issues/199#issuecomment-169139808:114901,Availability,Error,Error,114901,"alizerEE7executeEPv in export_mints.cc.o; __ZN5boost6python7objects22dynamic_cast_generatorIN3psi9LocalizerENS3_13BoysLocalizerEE7executeEPv in export_mints.cc.o; __ZN5boost6python7objects22dynamic_cast_generatorIN3psi12WavefunctionENS3_3scf3RHFEE7executeEPv in export_mints.cc.o; __ZN5boost6python7objects22dynamic_cast_generatorIN3psi3scf2HFENS4_3RHFEE7executeEPv in export_mints.cc.o; __ZN5boost6python7objects22dynamic_cast_generatorIN3psi12WavefunctionENS3_3scf2HFEE7executeEPv in export_mints.cc.o; __ZN5boost6python7objects22dynamic_cast_generatorIN3psi14BasisSetParserENS3_24Gaussian94BasisSetParserEE7executeEPv in export_mints.cc.o; ...; ""___gxx_personality_v0"", referenced from:; __Z11export_psiov in export_psio.cc.o; __ZN5boost6python3api9slice_nilD1Ev in export_psio.cc.o; __ZN3psi11PSIOManager9print_outEv in export_psio.cc.o; __ZN5boost6python6class_IN3psi11PSIOManagerENS_10shared_ptrIS3_EENS0_6detail13not_specifiedES7_E8def_implIS3_MS3_FNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEvENS6_10def_helperIA10_cS7_S7_S7_EEEEvPT_PKcT0_RKT1_z in export_psio.cc.o; __ZN5boost6python6detail12caller_arityILj1EE4implIMN3psi11PSIOManagerEFNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvENS0_21default_call_policiesENS_3mpl7vector2ISD_RS6_EEE9signatureEv in export_psio.cc.o; __ZN5boost6python6detail12caller_arityILj1EE4implIMN3psi11PSIOManagerEFNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvENS0_21default_call_policiesENS_3mpl7vector2ISD_RS6_EEEclEP7_objectSN_ in export_psio.cc.o; __ZN5boost6python6class_IN3psi11PSIOManagerENS_10shared_ptrIS3_EENS0_6detail13not_specifiedES7_E8def_implIS3_MS3_FvibENS6_10def_helperIA10_cS7_S7_S7_EEEEvPT_PKcT0_RKT1_z in export_psio.cc.o; ...; ld: symbol(s) not found for architecture x86_64; clang-3.5: error: linker command failed with exit code 1 (use -v to see invocation); make[2]: *** [bin/psi4] Error 1; make[1]: *** [src/bin/psi4/CMakeFiles/psi4.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/199#issuecomment-169139808
https://github.com/psi4/psi4/issues/199#issuecomment-169146307:192,Modifiability,config,configured,192,Are you on OS X? I think you have a version of boost that has a different ABI or is linked against a different libstdc++/libc++ than your (non-standard) compiler `/usr/local/bin/clang-omp` is configured to target.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/199#issuecomment-169146307
https://github.com/psi4/psi4/issues/201#issuecomment-169689686:50,Integrability,rout,routines,50,"At the moment there is no publicly accessible MPI routines in Psi4 (they are coming soon) so using MPI is superfluous. Boost MPI will be a requirement in the future when MPI is selected. That being said, it should have automatically compiled for you when the remainder of Boost was compiled. I would simply recommend removing the `--mpi` flag and recompiling (I strongly suggest blowing away your build directory).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/201#issuecomment-169689686
https://github.com/psi4/psi4/issues/201#issuecomment-169689686:35,Security,access,accessible,35,"At the moment there is no publicly accessible MPI routines in Psi4 (they are coming soon) so using MPI is superfluous. Boost MPI will be a requirement in the future when MPI is selected. That being said, it should have automatically compiled for you when the remainder of Boost was compiled. I would simply recommend removing the `--mpi` flag and recompiling (I strongly suggest blowing away your build directory).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/201#issuecomment-169689686
https://github.com/psi4/psi4/issues/201#issuecomment-169689686:300,Usability,simpl,simply,300,"At the moment there is no publicly accessible MPI routines in Psi4 (they are coming soon) so using MPI is superfluous. Boost MPI will be a requirement in the future when MPI is selected. That being said, it should have automatically compiled for you when the remainder of Boost was compiled. I would simply recommend removing the `--mpi` flag and recompiling (I strongly suggest blowing away your build directory).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/201#issuecomment-169689686
https://github.com/psi4/psi4/issues/201#issuecomment-169849927:165,Testability,test,test,165,"Dear Ryan Richard,. Thank you very much for your quick and helpful answer! I have successfully compiled psi4, version 0.3 without mpi. It works well for the easiest test case of water SCF. Best regards,; Michael Medvedev",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/201#issuecomment-169849927
https://github.com/psi4/psi4/issues/204#issuecomment-170138644:87,Usability,learn,learn,87,"If you really want to get FCI results for a system of this size - I would recommend to learn about the method called density matrix renormalization group (DMRG). F-/aug-cc-pvtz is within its capabilities. A reference to start with could be:; (1) Olivares-Amaya, R.; Hu, W.; Nakatani, N.; Sharma, S.; Yang, J.; Chan, G. K.-L. The Journal of chemical physics. 142, 034102 (2015).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170138644
https://github.com/psi4/psi4/issues/204#issuecomment-170140825:84,Availability,error,error,84,"It is also worth noting that the SCF is wrong. Although, I cannot reproduce the SCF error on my machine. Can anyone else?. > On Jan 8, 2016, at 4:54 PM, ssh2 notifications@github.com wrote:; > ; > If really want to get FCI results for a system of this size - I would recommend to learn about the method called density matrix renormalization group (DMRG). F-/aug-cc-pvtz is within its capabilities. A reference to start with could be:; > (1) Olivares-Amaya, R.; Hu, W.; Nakatani, N.; Sharma, S.; Yang, J.; Chan, G. K.-L. The Journal of chemical physics. 142, 034102 (2015).; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/204#issuecomment-170138644.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170140825
https://github.com/psi4/psi4/issues/204#issuecomment-170140825:280,Usability,learn,learn,280,"It is also worth noting that the SCF is wrong. Although, I cannot reproduce the SCF error on my machine. Can anyone else?. > On Jan 8, 2016, at 4:54 PM, ssh2 notifications@github.com wrote:; > ; > If really want to get FCI results for a system of this size - I would recommend to learn about the method called density matrix renormalization group (DMRG). F-/aug-cc-pvtz is within its capabilities. A reference to start with could be:; > (1) Olivares-Amaya, R.; Hu, W.; Nakatani, N.; Sharma, S.; Yang, J.; Chan, G. K.-L. The Journal of chemical physics. 142, 034102 (2015).; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/204#issuecomment-170138644.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170140825
https://github.com/psi4/psi4/issues/204#issuecomment-170141043:237,Availability,error,error,237,"Ah, I see it now. Just the decimals were not copied correctly in the email. > On Jan 8, 2016, at 5:04 PM, Daniel Smith dgasmith@icloud.com wrote:; > ; > It is also worth noting that the SCF is wrong. Although, I cannot reproduce the SCF error on my machine. Can anyone else?; > ; > > On Jan 8, 2016, at 4:54 PM, ssh2 <notifications@github.com <mailto:notifications@github.com>> wrote:; > > ; > > If really want to get FCI results for a system of this size - I would recommend to learn about the method called density matrix renormalization group (DMRG). F-/aug-cc-pvtz is within its capabilities. A reference to start with could be:; > > (1) Olivares-Amaya, R.; Hu, W.; Nakatani, N.; Sharma, S.; Yang, J.; Chan, G. K.-L. The Journal of chemical physics. 142, 034102 (2015).; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/204#issuecomment-170138644.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170141043
https://github.com/psi4/psi4/issues/204#issuecomment-170141043:479,Usability,learn,learn,479,"Ah, I see it now. Just the decimals were not copied correctly in the email. > On Jan 8, 2016, at 5:04 PM, Daniel Smith dgasmith@icloud.com wrote:; > ; > It is also worth noting that the SCF is wrong. Although, I cannot reproduce the SCF error on my machine. Can anyone else?; > ; > > On Jan 8, 2016, at 4:54 PM, ssh2 <notifications@github.com <mailto:notifications@github.com>> wrote:; > > ; > > If really want to get FCI results for a system of this size - I would recommend to learn about the method called density matrix renormalization group (DMRG). F-/aug-cc-pvtz is within its capabilities. A reference to start with could be:; > > (1) Olivares-Amaya, R.; Hu, W.; Nakatani, N.; Sharma, S.; Yang, J.; Chan, G. K.-L. The Journal of chemical physics. 142, 034102 (2015).; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/204#issuecomment-170138644.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170141043
https://github.com/psi4/psi4/issues/204#issuecomment-170145076:9,Usability,clear,clear,9,It's not clear why the memory issue is arising. If you can find a smaller computation that still exhibits this behavior feel free to reopen the issue.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170145076
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:232,Availability,error,error,232,"@ssh2, thank you very much, I will read this article and try to use the DMRG method. . @ryanmrichard, the same calculation of Li+ at FCI/aug-cc-pVTZ was successfull. However, B+ at FCI/aug-cc-pVTZ failed suddenly with the following error:. PSIO_ERROR: unit = 51, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""<string>"", line 26, in <module>; File ""./lib/python/driver.py"", line 617, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""./lib/python/proc.py"", line 2300, in run_detci; psi4.detci(); RuntimeError: PSIO Error. Input file was:. memory 48000 mb; molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }; set globals {; basis aug-cc-pVTZ; icore 0; }; thisenergy = energy('fci'). The output file is:. ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (no tag) Driver. Git: Rev {(no tag)}. J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012); (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Sat Jan 9 01:41:42 2016. Process ID: 17178; PSI4DATADIR: ./lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---. #! 6-31G H2O Test FCI Energy Point. memory 48000 mb. molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }. set globals {; basis aug-cc-pVTZ; icore 0; }. thisenergy = energy('fci'). ---. Input file to run:; from psi4 import *; from p4const import *; from p4util import *; from molutil import *; from aliases import *; psi4_io = psi4.IOMan",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:292,Availability,error,error,292,"@ssh2, thank you very much, I will read this article and try to use the DMRG method. . @ryanmrichard, the same calculation of Li+ at FCI/aug-cc-pVTZ was successfull. However, B+ at FCI/aug-cc-pVTZ failed suddenly with the following error:. PSIO_ERROR: unit = 51, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""<string>"", line 26, in <module>; File ""./lib/python/driver.py"", line 617, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""./lib/python/proc.py"", line 2300, in run_detci; psi4.detci(); RuntimeError: PSIO Error. Input file was:. memory 48000 mb; molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }; set globals {; basis aug-cc-pVTZ; icore 0; }; thisenergy = energy('fci'). The output file is:. ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (no tag) Driver. Git: Rev {(no tag)}. J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012); (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Sat Jan 9 01:41:42 2016. Process ID: 17178; PSI4DATADIR: ./lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---. #! 6-31G H2O Test FCI Energy Point. memory 48000 mb. molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }. set globals {; basis aug-cc-pVTZ; icore 0; }. thisenergy = energy('fci'). ---. Input file to run:; from psi4 import *; from p4const import *; from p4util import *; from molutil import *; from aliases import *; psi4_io = psi4.IOMan",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:584,Availability,Error,Error,584,"@ssh2, thank you very much, I will read this article and try to use the DMRG method. . @ryanmrichard, the same calculation of Li+ at FCI/aug-cc-pVTZ was successfull. However, B+ at FCI/aug-cc-pVTZ failed suddenly with the following error:. PSIO_ERROR: unit = 51, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""<string>"", line 26, in <module>; File ""./lib/python/driver.py"", line 617, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""./lib/python/proc.py"", line 2300, in run_detci; psi4.detci(); RuntimeError: PSIO Error. Input file was:. memory 48000 mb; molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }; set globals {; basis aug-cc-pVTZ; icore 0; }; thisenergy = energy('fci'). The output file is:. ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (no tag) Driver. Git: Rev {(no tag)}. J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012); (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Sat Jan 9 01:41:42 2016. Process ID: 17178; PSI4DATADIR: ./lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---. #! 6-31G H2O Test FCI Energy Point. memory 48000 mb. molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }. set globals {; basis aug-cc-pVTZ; icore 0; }. thisenergy = energy('fci'). ---. Input file to run:; from psi4 import *; from p4const import *; from p4util import *; from molutil import *; from aliases import *; psi4_io = psi4.IOMan",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:10774,Deployability,UPDATE,UPDATE,10774,ls.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 1.33 seconds = 0.02 minutes; system time = 0.09 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 15.73 seconds = 0.26 minutes; system time = 0.42 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:54 2016. ---. ```; D E T C I. C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. Note: Calculation requested is a full CI.; Resetting EX_LEVEL to 4 and turning on all excitations. DETCI PARAMETERS:; EX LEVEL = 4 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS SIZE= 400; H0COUPLINGSIZE= 0 H0 COUPLING = no; MAXITER = 12 NUM PRINT = 20; NUM ROOTS = 1 ICORE = 0; PRINT = 1 FCI = yes; R CONV = 1.00e-04 MIXED = yes; E CONV = 1.00e-06 MIXED4 = yes; OEI FILE = 35 R4S = no; REPL OTF = no; TEI FILE = 72 DIAG METHOD = SEM; PRECONDITIONER= DAVIDSON UPDATE = DAVIDSON; S = 0.0000 Ms0 = yes; MAX NUM VECS = 13; RESTART = no; GUESS VECTOR = H0BLOCK OPENTYPE = NONE; REF SYM = auto; COLLAPSE SIZE = 1 HD AVG = EVANGELISTI; LSE = no LSE ITER = 0; HD OTF = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 12; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = no TRANS DENSITY= no. FILES = 50 51 52 53. EX ALLOW = 1 1 1 1; STATE AVERAGE = 1(1.00); STATE AVERAGE = 1(1.00). ORBITALS:; NMO = 46; FROZEN CORE = 0 RESTR CORE = 0; FROZEN VIRT = 0 RESTR VIRT = 0; DROPPED CORE = 0 DROPPED VIRT = 0; EXPLICIT CORE= 0 ORBS IN CI = 46; NUM ALP = 2 NUM BET = 2; NUM ALP EXPL = 2 NUM BET EXPL = 2; IOPEN = no; RAS1 LVL = 1 A RAS3 MAX = 2; RAS1 MIN = 0 B RAS3 MAX = 2; A RAS1 LVL = 1 RAS4 LVL = 46; A RAS1 MIN = 0 A RAS4 MAX = 0; A RAS1 MAX = 2 B RAS4 MAX = 0; B RAS1 LVL = 1 RAS4 MAX = 0; B RAS1 MIN = 0 A RAS34 MAX = 2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:435,Energy Efficiency,energy,energy,435,"@ssh2, thank you very much, I will read this article and try to use the DMRG method. . @ryanmrichard, the same calculation of Li+ at FCI/aug-cc-pVTZ was successfull. However, B+ at FCI/aug-cc-pVTZ failed suddenly with the following error:. PSIO_ERROR: unit = 51, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""<string>"", line 26, in <module>; File ""./lib/python/driver.py"", line 617, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""./lib/python/proc.py"", line 2300, in run_detci; psi4.detci(); RuntimeError: PSIO Error. Input file was:. memory 48000 mb; molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }; set globals {; basis aug-cc-pVTZ; icore 0; }; thisenergy = energy('fci'). The output file is:. ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (no tag) Driver. Git: Rev {(no tag)}. J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012); (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Sat Jan 9 01:41:42 2016. Process ID: 17178; PSI4DATADIR: ./lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---. #! 6-31G H2O Test FCI Energy Point. memory 48000 mb. molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }. set globals {; basis aug-cc-pVTZ; icore 0; }. thisenergy = energy('fci'). ---. Input file to run:; from psi4 import *; from p4const import *; from p4util import *; from molutil import *; from aliases import *; psi4_io = psi4.IOMan",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:455,Energy Efficiency,energy,energy,455,"@ssh2, thank you very much, I will read this article and try to use the DMRG method. . @ryanmrichard, the same calculation of Li+ at FCI/aug-cc-pVTZ was successfull. However, B+ at FCI/aug-cc-pVTZ failed suddenly with the following error:. PSIO_ERROR: unit = 51, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""<string>"", line 26, in <module>; File ""./lib/python/driver.py"", line 617, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""./lib/python/proc.py"", line 2300, in run_detci; psi4.detci(); RuntimeError: PSIO Error. Input file was:. memory 48000 mb; molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }; set globals {; basis aug-cc-pVTZ; icore 0; }; thisenergy = energy('fci'). The output file is:. ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (no tag) Driver. Git: Rev {(no tag)}. J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012); (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Sat Jan 9 01:41:42 2016. Process ID: 17178; PSI4DATADIR: ./lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---. #! 6-31G H2O Test FCI Energy Point. memory 48000 mb. molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }. set globals {; basis aug-cc-pVTZ; icore 0; }. thisenergy = energy('fci'). ---. Input file to run:; from psi4 import *; from p4const import *; from p4util import *; from molutil import *; from aliases import *; psi4_io = psi4.IOMan",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:757,Energy Efficiency,energy,energy,757,"@ssh2, thank you very much, I will read this article and try to use the DMRG method. . @ryanmrichard, the same calculation of Li+ at FCI/aug-cc-pVTZ was successfull. However, B+ at FCI/aug-cc-pVTZ failed suddenly with the following error:. PSIO_ERROR: unit = 51, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""<string>"", line 26, in <module>; File ""./lib/python/driver.py"", line 617, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""./lib/python/proc.py"", line 2300, in run_detci; psi4.detci(); RuntimeError: PSIO Error. Input file was:. memory 48000 mb; molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }; set globals {; basis aug-cc-pVTZ; icore 0; }; thisenergy = energy('fci'). The output file is:. ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (no tag) Driver. Git: Rev {(no tag)}. J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012); (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Sat Jan 9 01:41:42 2016. Process ID: 17178; PSI4DATADIR: ./lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---. #! 6-31G H2O Test FCI Energy Point. memory 48000 mb. molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }. set globals {; basis aug-cc-pVTZ; icore 0; }. thisenergy = energy('fci'). ---. Input file to run:; from psi4 import *; from p4const import *; from p4util import *; from molutil import *; from aliases import *; psi4_io = psi4.IOMan",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:1667,Energy Efficiency,Energy,Energy,1667,"0000000 -.000000000; units bohr; }; set globals {; basis aug-cc-pVTZ; icore 0; }; thisenergy = energy('fci'). The output file is:. ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (no tag) Driver. Git: Rev {(no tag)}. J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012); (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Sat Jan 9 01:41:42 2016. Process ID: 17178; PSI4DATADIR: ./lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---. #! 6-31G H2O Test FCI Energy Point. memory 48000 mb. molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }. set globals {; basis aug-cc-pVTZ; icore 0; }. thisenergy = energy('fci'). ---. Input file to run:; from psi4 import *; from p4const import *; from p4util import *; from molutil import *; from aliases import *; psi4_io = psi4.IOManager.shared_object(); psi4.efp_init(); psi4_io.set_default_path(""/tmp""); geometry(""""""; 0 1; H; H 1 0.74; """""",""blank_molecule_psi4_yo""). psi4.set_memory(48000000000). psi4.efp_init(); B = geometry(""""""; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; """""",""B""); psi4.IO.set_default_namespace(""B""); psi4.set_global_option(""BASIS"", ""aug-cc-pVTZ""); psi4.set_global_option(""ICORE"", 0); thisenergy = energy('fci'). Memory set to 48.000 GiB by Python script. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:51 2016. ```; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Referenc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:1830,Energy Efficiency,energy,energy,1830,"---------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (no tag) Driver. Git: Rev {(no tag)}. J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012); (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Sat Jan 9 01:41:42 2016. Process ID: 17178; PSI4DATADIR: ./lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---. #! 6-31G H2O Test FCI Energy Point. memory 48000 mb. molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }. set globals {; basis aug-cc-pVTZ; icore 0; }. thisenergy = energy('fci'). ---. Input file to run:; from psi4 import *; from p4const import *; from p4util import *; from molutil import *; from aliases import *; psi4_io = psi4.IOManager.shared_object(); psi4.efp_init(); psi4_io.set_default_path(""/tmp""); geometry(""""""; 0 1; H; H 1 0.74; """""",""blank_molecule_psi4_yo""). psi4.set_memory(48000000000). psi4.efp_init(); B = geometry(""""""; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; """""",""B""); psi4.IO.set_default_namespace(""B""); psi4.set_global_option(""BASIS"", ""aug-cc-pVTZ""); psi4.set_global_option(""ICORE"", 0); thisenergy = energy('fci'). Memory set to 48.000 GiB by Python script. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:51 2016. ```; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 12 Threads, 48000 MiB Core; ---------------------------------------------------------; ```. ==> Geometry <==. ```; Molecular point group: d2h; Geometry (in Bohr), ch",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:2401,Energy Efficiency,energy,energy,2401,"ce, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Sat Jan 9 01:41:42 2016. Process ID: 17178; PSI4DATADIR: ./lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---. #! 6-31G H2O Test FCI Energy Point. memory 48000 mb. molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }. set globals {; basis aug-cc-pVTZ; icore 0; }. thisenergy = energy('fci'). ---. Input file to run:; from psi4 import *; from p4const import *; from p4util import *; from molutil import *; from aliases import *; psi4_io = psi4.IOManager.shared_object(); psi4.efp_init(); psi4_io.set_default_path(""/tmp""); geometry(""""""; 0 1; H; H 1 0.74; """""",""blank_molecule_psi4_yo""). psi4.set_memory(48000000000). psi4.efp_init(); B = geometry(""""""; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; """""",""B""); psi4.IO.set_default_namespace(""B""); psi4.set_global_option(""BASIS"", ""aug-cc-pVTZ""); psi4.set_global_option(""ICORE"", 0); thisenergy = energy('fci'). Memory set to 48.000 GiB by Python script. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:51 2016. ```; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 12 Threads, 48000 MiB Core; ---------------------------------------------------------; ```. ==> Geometry <==. ```; Molecular point group: d2h; Geometry (in Bohr), charge = 1, multiplicity = 1:. Center X Y Z; ------------ ----------------- ----------------- -----------------; B 0.000000000000 0.000000000000 0.000000000000; ```. Running in d2h symmetry. Rotational constants: A = ***********\* B = ***********\* C = ***********\* [cm^-1]; Rotational constants: A = ***********\* B = ***********\* C = ***********\* [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 1; Multiplicity = 1; Electrons = 4; Nalpha = 2; Nbeta = 2. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occup",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:2828,Energy Efficiency,charge,charge,2828," thisenergy = energy('fci'). ---. Input file to run:; from psi4 import *; from p4const import *; from p4util import *; from molutil import *; from aliases import *; psi4_io = psi4.IOManager.shared_object(); psi4.efp_init(); psi4_io.set_default_path(""/tmp""); geometry(""""""; 0 1; H; H 1 0.74; """""",""blank_molecule_psi4_yo""). psi4.set_memory(48000000000). psi4.efp_init(); B = geometry(""""""; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; """""",""B""); psi4.IO.set_default_namespace(""B""); psi4.set_global_option(""BASIS"", ""aug-cc-pVTZ""); psi4.set_global_option(""ICORE"", 0); thisenergy = energy('fci'). Memory set to 48.000 GiB by Python script. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:51 2016. ```; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 12 Threads, 48000 MiB Core; ---------------------------------------------------------; ```. ==> Geometry <==. ```; Molecular point group: d2h; Geometry (in Bohr), charge = 1, multiplicity = 1:. Center X Y Z; ------------ ----------------- ----------------- -----------------; B 0.000000000000 0.000000000000 0.000000000000; ```. Running in d2h symmetry. Rotational constants: A = ***********\* B = ***********\* C = ***********\* [cm^-1]; Rotational constants: A = ***********\* B = ***********\* C = ***********\* [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 1; Multiplicity = 1; Electrons = 4; Nalpha = 2; Nbeta = 2. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-CC-PVTZ; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 55; Spherical Harmonics?: true; Max angular momentum: 3. ==> Pre-Iterations <==. ---. ```; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; ```. ---. ```; Ag 11 11 0 0 0 0; B1g 3 3 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:3226,Energy Efficiency,Charge,Charge,3226,""""",""B""); psi4.IO.set_default_namespace(""B""); psi4.set_global_option(""BASIS"", ""aug-cc-pVTZ""); psi4.set_global_option(""ICORE"", 0); thisenergy = energy('fci'). Memory set to 48.000 GiB by Python script. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:51 2016. ```; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 12 Threads, 48000 MiB Core; ---------------------------------------------------------; ```. ==> Geometry <==. ```; Molecular point group: d2h; Geometry (in Bohr), charge = 1, multiplicity = 1:. Center X Y Z; ------------ ----------------- ----------------- -----------------; B 0.000000000000 0.000000000000 0.000000000000; ```. Running in d2h symmetry. Rotational constants: A = ***********\* B = ***********\* C = ***********\* [cm^-1]; Rotational constants: A = ***********\* B = ***********\* C = ***********\* [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 1; Multiplicity = 1; Electrons = 4; Nalpha = 2; Nbeta = 2. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-CC-PVTZ; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 55; Spherical Harmonics?: true; Max angular momentum: 3. ==> Pre-Iterations <==. ---. ```; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; ```. ---. ```; Ag 11 11 0 0 0 0; B1g 3 3 0 0 0 0; B2g 3 3 0 0 0 0; B3g 3 3 0 0 0 0; Au 2 2 0 0 0 0; B1u 8 8 0 0 0 0; B2u 8 8 0 0 0 0; B3u 8 8 0 0 0 0; ```. ---. ```; Total 46 46 2 2 2 0; ```. ---. Starting with a DF guess... OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 12; Integrals threads: 12; Memory (M",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:3424,Energy Efficiency,Energy,Energy,3424,"000 GiB by Python script. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:51 2016. ```; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 12 Threads, 48000 MiB Core; ---------------------------------------------------------; ```. ==> Geometry <==. ```; Molecular point group: d2h; Geometry (in Bohr), charge = 1, multiplicity = 1:. Center X Y Z; ------------ ----------------- ----------------- -----------------; B 0.000000000000 0.000000000000 0.000000000000; ```. Running in d2h symmetry. Rotational constants: A = ***********\* B = ***********\* C = ***********\* [cm^-1]; Rotational constants: A = ***********\* B = ***********\* C = ***********\* [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 1; Multiplicity = 1; Electrons = 4; Nalpha = 2; Nbeta = 2. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-CC-PVTZ; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 55; Spherical Harmonics?: true; Max angular momentum: 3. ==> Pre-Iterations <==. ---. ```; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; ```. ---. ```; Ag 11 11 0 0 0 0; B1g 3 3 0 0 0 0; B2g 3 3 0 0 0 0; B3g 3 3 0 0 0 0; Au 2 2 0 0 0 0; B1u 8 8 0 0 0 0; B2u 8 8 0 0 0 0; B3u 8 8 0 0 0 0; ```. ---. ```; Total 46 46 2 2 2 0; ```. ---. Starting with a DF guess... OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 12; Integrals threads: 12; Memory (MB): 34332; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12; ```. => Auxiliary Basis Set <=. Basis Set:; Number of shells: 30; Number of ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:4718,Energy Efficiency,Energy,Energy,4718,". ```; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; ```. ---. ```; Ag 11 11 0 0 0 0; B1g 3 3 0 0 0 0; B2g 3 3 0 0 0 0; B3g 3 3 0 0 0 0; Au 2 2 0 0 0 0; B1u 8 8 0 0 0 0; B2u 8 8 0 0 0 0; B3u 8 8 0 0 0 0; ```. ---. ```; Total 46 46 2 2 2 0; ```. ---. Starting with a DF guess... OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 12; Integrals threads: 12; Memory (MB): 34332; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12; ```. => Auxiliary Basis Set <=. Basis Set:; Number of shells: 30; Number of basis function: 104; Number of Cartesian functions: 131; Spherical Harmonics?: true; Max angular momentum: 4. Minimum eigenvalue in the overlap matrix is 2.5053959051E-02.; Using Symmetric Orthogonalization.; SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. ```; Total Energy Delta E RMS |[F,P]|; ```. @DF-RHF iter 1: -23.49398571874617 -2.34940e+01 7.47577e-02; @DF-RHF iter 2: -24.22630554723446 -7.32320e-01 7.13952e-03 DIIS; @DF-RHF iter 3: -24.23662538410707 -1.03198e-02 7.21912e-04 DIIS; @DF-RHF iter 4: -24.23681435257776 -1.88968e-04 6.97945e-05 DIIS; @DF-RHF iter 5: -24.23681649173431 -2.13916e-06 2.93127e-06 DIIS; @DF-RHF iter 6: -24.23681649645996 -4.72565e-09 1.53123e-07 DIIS; @DF-RHF iter 7: -24.23681649646912 -9.16245e-12 1.38238e-09 DIIS. DF guess converged. ==> Integral Setup <==. MINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of atoms: 1; Number of AO shells: 14; Number of SO shells: 14; Number of primitives: 30; Number of atomic orbitals: 55; Number of basis functions: 46. ```; Number of irreps: 8; Integral cutoff 0.00e+00; Number of functions per irrep: [ 11 3 3 3 2 8 8 8 ]; ```. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ```; Computing two-electron integrals...done;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:6977,Energy Efficiency,Energy,Energy,6977,"RHF iter 8: -24.23681570008684 7.96382e-07 6.89584e-08 DIIS; @RHF iter 9: -24.23681570008748 -6.39488e-13 7.72849e-09 DIIS. ==> Post-Iterations <==. ```; Orbital Energies (a.u.); -----------------------. Doubly Occupied:. 1Ag -8.185320 2Ag -0.873753. Virtual:. 1B3u -0.275716 1B1u -0.275716 1B2u -0.275716; 3Ag -0.110068 2B1u -0.075684 2B2u -0.075684; 2B3u -0.075684 1B3g -0.003943 1B1g -0.003943; 4Ag -0.003943 1B2g -0.003943 5Ag -0.003943; 3B1u 0.121472 3B3u 0.121472 3B2u 0.121472; 6Ag 0.225602 7Ag 0.375520 8Ag 0.375520; 2B3g 0.375520 2B2g 0.375520 2B1g 0.375520; 4B2u 0.414098 1Au 0.414098 4B3u 0.414098; 5B3u 0.414098 4B1u 0.414098 5B2u 0.414098; 5B1u 0.414098 6B1u 1.165651 6B2u 1.165651; 6B3u 1.165651 9Ag 1.739906 10Ag 1.739906; 3B3g 1.739906 3B1g 1.739906 3B2g 1.739906; 7B1u 1.850114 8B1u 1.850114 7B3u 1.850114; 8B3u 1.850114 7B2u 1.850114 2Au 1.850114; 8B2u 1.850114 11Ag 2.783091. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @RHF Final Energy: -24.23681570008748. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -30.3554852212569273; Two-Electron Energy = 6.1186695211694495; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -24.2368157000874760. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:7006,Energy Efficiency,Energy,Energy,7006,"570008684 7.96382e-07 6.89584e-08 DIIS; @RHF iter 9: -24.23681570008748 -6.39488e-13 7.72849e-09 DIIS. ==> Post-Iterations <==. ```; Orbital Energies (a.u.); -----------------------. Doubly Occupied:. 1Ag -8.185320 2Ag -0.873753. Virtual:. 1B3u -0.275716 1B1u -0.275716 1B2u -0.275716; 3Ag -0.110068 2B1u -0.075684 2B2u -0.075684; 2B3u -0.075684 1B3g -0.003943 1B1g -0.003943; 4Ag -0.003943 1B2g -0.003943 5Ag -0.003943; 3B1u 0.121472 3B3u 0.121472 3B2u 0.121472; 6Ag 0.225602 7Ag 0.375520 8Ag 0.375520; 2B3g 0.375520 2B2g 0.375520 2B1g 0.375520; 4B2u 0.414098 1Au 0.414098 4B3u 0.414098; 5B3u 0.414098 4B1u 0.414098 5B2u 0.414098; 5B1u 0.414098 6B1u 1.165651 6B2u 1.165651; 6B3u 1.165651 9Ag 1.739906 10Ag 1.739906; 3B3g 1.739906 3B1g 1.739906 3B2g 1.739906; 7B1u 1.850114 8B1u 1.850114 7B3u 1.850114; 8B3u 1.850114 7B2u 1.850114 2Au 1.850114; 8B2u 1.850114 11Ag 2.783091. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @RHF Final Energy: -24.23681570008748. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -30.3554852212569273; Two-Electron Energy = 6.1186695211694495; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -24.2368157000874760. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:7075,Energy Efficiency,Energy,Energy,7075,"570008748 -6.39488e-13 7.72849e-09 DIIS. ==> Post-Iterations <==. ```; Orbital Energies (a.u.); -----------------------. Doubly Occupied:. 1Ag -8.185320 2Ag -0.873753. Virtual:. 1B3u -0.275716 1B1u -0.275716 1B2u -0.275716; 3Ag -0.110068 2B1u -0.075684 2B2u -0.075684; 2B3u -0.075684 1B3g -0.003943 1B1g -0.003943; 4Ag -0.003943 1B2g -0.003943 5Ag -0.003943; 3B1u 0.121472 3B3u 0.121472 3B2u 0.121472; 6Ag 0.225602 7Ag 0.375520 8Ag 0.375520; 2B3g 0.375520 2B2g 0.375520 2B1g 0.375520; 4B2u 0.414098 1Au 0.414098 4B3u 0.414098; 5B3u 0.414098 4B1u 0.414098 5B2u 0.414098; 5B1u 0.414098 6B1u 1.165651 6B2u 1.165651; 6B3u 1.165651 9Ag 1.739906 10Ag 1.739906; 3B3g 1.739906 3B1g 1.739906 3B2g 1.739906; 7B1u 1.850114 8B1u 1.850114 7B3u 1.850114; 8B3u 1.850114 7B2u 1.850114 2Au 1.850114; 8B2u 1.850114 11Ag 2.783091. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @RHF Final Energy: -24.23681570008748. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -30.3554852212569273; Two-Electron Energy = 6.1186695211694495; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -24.2368157000874760. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:7117,Energy Efficiency,Energy,Energy,7117," ==> Post-Iterations <==. ```; Orbital Energies (a.u.); -----------------------. Doubly Occupied:. 1Ag -8.185320 2Ag -0.873753. Virtual:. 1B3u -0.275716 1B1u -0.275716 1B2u -0.275716; 3Ag -0.110068 2B1u -0.075684 2B2u -0.075684; 2B3u -0.075684 1B3g -0.003943 1B1g -0.003943; 4Ag -0.003943 1B2g -0.003943 5Ag -0.003943; 3B1u 0.121472 3B3u 0.121472 3B2u 0.121472; 6Ag 0.225602 7Ag 0.375520 8Ag 0.375520; 2B3g 0.375520 2B2g 0.375520 2B1g 0.375520; 4B2u 0.414098 1Au 0.414098 4B3u 0.414098; 5B3u 0.414098 4B1u 0.414098 5B2u 0.414098; 5B1u 0.414098 6B1u 1.165651 6B2u 1.165651; 6B3u 1.165651 9Ag 1.739906 10Ag 1.739906; 3B3g 1.739906 3B1g 1.739906 3B2g 1.739906; 7B1u 1.850114 8B1u 1.850114 7B3u 1.850114; 8B3u 1.850114 7B2u 1.850114 2Au 1.850114; 8B2u 1.850114 11Ag 2.783091. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @RHF Final Energy: -24.23681570008748. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -30.3554852212569273; Two-Electron Energy = 6.1186695211694495; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -24.2368157000874760. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:7161,Energy Efficiency,Energy,Energy,7161,"gies (a.u.); -----------------------. Doubly Occupied:. 1Ag -8.185320 2Ag -0.873753. Virtual:. 1B3u -0.275716 1B1u -0.275716 1B2u -0.275716; 3Ag -0.110068 2B1u -0.075684 2B2u -0.075684; 2B3u -0.075684 1B3g -0.003943 1B1g -0.003943; 4Ag -0.003943 1B2g -0.003943 5Ag -0.003943; 3B1u 0.121472 3B3u 0.121472 3B2u 0.121472; 6Ag 0.225602 7Ag 0.375520 8Ag 0.375520; 2B3g 0.375520 2B2g 0.375520 2B1g 0.375520; 4B2u 0.414098 1Au 0.414098 4B3u 0.414098; 5B3u 0.414098 4B1u 0.414098 5B2u 0.414098; 5B1u 0.414098 6B1u 1.165651 6B2u 1.165651; 6B3u 1.165651 9Ag 1.739906 10Ag 1.739906; 3B3g 1.739906 3B1g 1.739906 3B2g 1.739906; 7B1u 1.850114 8B1u 1.850114 7B3u 1.850114; 8B3u 1.850114 7B2u 1.850114 2Au 1.850114; 8B2u 1.850114 11Ag 2.783091. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @RHF Final Energy: -24.23681570008748. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -30.3554852212569273; Two-Electron Energy = 6.1186695211694495; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -24.2368157000874760. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes; Total time:; user t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:7215,Energy Efficiency,Energy,Energy,7215,"upied:. 1Ag -8.185320 2Ag -0.873753. Virtual:. 1B3u -0.275716 1B1u -0.275716 1B2u -0.275716; 3Ag -0.110068 2B1u -0.075684 2B2u -0.075684; 2B3u -0.075684 1B3g -0.003943 1B1g -0.003943; 4Ag -0.003943 1B2g -0.003943 5Ag -0.003943; 3B1u 0.121472 3B3u 0.121472 3B2u 0.121472; 6Ag 0.225602 7Ag 0.375520 8Ag 0.375520; 2B3g 0.375520 2B2g 0.375520 2B1g 0.375520; 4B2u 0.414098 1Au 0.414098 4B3u 0.414098; 5B3u 0.414098 4B1u 0.414098 5B2u 0.414098; 5B1u 0.414098 6B1u 1.165651 6B2u 1.165651; 6B3u 1.165651 9Ag 1.739906 10Ag 1.739906; 3B3g 1.739906 3B1g 1.739906 3B2g 1.739906; 7B1u 1.850114 8B1u 1.850114 7B3u 1.850114; 8B3u 1.850114 7B2u 1.850114 2Au 1.850114; 8B2u 1.850114 11Ag 2.783091. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @RHF Final Energy: -24.23681570008748. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -30.3554852212569273; Two-Electron Energy = 6.1186695211694495; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -24.2368157000874760. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes; Total time:; user time = 14.36 seconds = 0.24 minutes; system time ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:7265,Energy Efficiency,Energy,Energy,7265,"-0.275716 1B1u -0.275716 1B2u -0.275716; 3Ag -0.110068 2B1u -0.075684 2B2u -0.075684; 2B3u -0.075684 1B3g -0.003943 1B1g -0.003943; 4Ag -0.003943 1B2g -0.003943 5Ag -0.003943; 3B1u 0.121472 3B3u 0.121472 3B2u 0.121472; 6Ag 0.225602 7Ag 0.375520 8Ag 0.375520; 2B3g 0.375520 2B2g 0.375520 2B1g 0.375520; 4B2u 0.414098 1Au 0.414098 4B3u 0.414098; 5B3u 0.414098 4B1u 0.414098 5B2u 0.414098; 5B1u 0.414098 6B1u 1.165651 6B2u 1.165651; 6B3u 1.165651 9Ag 1.739906 10Ag 1.739906; 3B3g 1.739906 3B1g 1.739906 3B2g 1.739906; 7B1u 1.850114 8B1u 1.850114 7B3u 1.850114; 8B3u 1.850114 7B2u 1.850114 2Au 1.850114; 8B2u 1.850114 11Ag 2.783091. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @RHF Final Energy: -24.23681570008748. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -30.3554852212569273; Two-Electron Energy = 6.1186695211694495; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -24.2368157000874760. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes; Total time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 second",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:7311,Energy Efficiency,Energy,Energy,7311,"110068 2B1u -0.075684 2B2u -0.075684; 2B3u -0.075684 1B3g -0.003943 1B1g -0.003943; 4Ag -0.003943 1B2g -0.003943 5Ag -0.003943; 3B1u 0.121472 3B3u 0.121472 3B2u 0.121472; 6Ag 0.225602 7Ag 0.375520 8Ag 0.375520; 2B3g 0.375520 2B2g 0.375520 2B1g 0.375520; 4B2u 0.414098 1Au 0.414098 4B3u 0.414098; 5B3u 0.414098 4B1u 0.414098 5B2u 0.414098; 5B1u 0.414098 6B1u 1.165651 6B2u 1.165651; 6B3u 1.165651 9Ag 1.739906 10Ag 1.739906; 3B3g 1.739906 3B1g 1.739906 3B2g 1.739906; 7B1u 1.850114 8B1u 1.850114 7B3u 1.850114; 8B3u 1.850114 7B2u 1.850114 2Au 1.850114; 8B2u 1.850114 11Ag 2.783091. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @RHF Final Energy: -24.23681570008748. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -30.3554852212569273; Two-Electron Energy = 6.1186695211694495; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -24.2368157000874760. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes; Total time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes. **\* tstart() called on node5-",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:7344,Energy Efficiency,Energy,Energy,7344,"B3u -0.075684 1B3g -0.003943 1B1g -0.003943; 4Ag -0.003943 1B2g -0.003943 5Ag -0.003943; 3B1u 0.121472 3B3u 0.121472 3B2u 0.121472; 6Ag 0.225602 7Ag 0.375520 8Ag 0.375520; 2B3g 0.375520 2B2g 0.375520 2B1g 0.375520; 4B2u 0.414098 1Au 0.414098 4B3u 0.414098; 5B3u 0.414098 4B1u 0.414098 5B2u 0.414098; 5B1u 0.414098 6B1u 1.165651 6B2u 1.165651; 6B3u 1.165651 9Ag 1.739906 10Ag 1.739906; 3B3g 1.739906 3B1g 1.739906 3B2g 1.739906; 7B1u 1.850114 8B1u 1.850114 7B3u 1.850114; 8B3u 1.850114 7B2u 1.850114 2Au 1.850114; 8B2u 1.850114 11Ag 2.783091. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @RHF Final Energy: -24.23681570008748. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -30.3554852212569273; Two-Electron Energy = 6.1186695211694495; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -24.2368157000874760. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes; Total time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:54 2016.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:7379,Energy Efficiency,Energy,Energy,7379,"0.003943; 4Ag -0.003943 1B2g -0.003943 5Ag -0.003943; 3B1u 0.121472 3B3u 0.121472 3B2u 0.121472; 6Ag 0.225602 7Ag 0.375520 8Ag 0.375520; 2B3g 0.375520 2B2g 0.375520 2B1g 0.375520; 4B2u 0.414098 1Au 0.414098 4B3u 0.414098; 5B3u 0.414098 4B1u 0.414098 5B2u 0.414098; 5B1u 0.414098 6B1u 1.165651 6B2u 1.165651; 6B3u 1.165651 9Ag 1.739906 10Ag 1.739906; 3B3g 1.739906 3B1g 1.739906 3B2g 1.739906; 7B1u 1.850114 8B1u 1.850114 7B3u 1.850114; 8B3u 1.850114 7B2u 1.850114 2Au 1.850114; 8B2u 1.850114 11Ag 2.783091. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @RHF Final Energy: -24.23681570008748. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -30.3554852212569273; Two-Electron Energy = 6.1186695211694495; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -24.2368157000874760. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes; Total time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:54 2016. ```; *****************************",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:9453,Energy Efficiency,energy,energy,9453," to the MO basis. *; * *; * Daniel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = DETCI; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 48000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 8; Number of SOs = 46; Number of MOs = 46; Number of active MOs = 46. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; Ag 11 0 2 0 9 0; B1g 3 0 0 0 3 0; B2g 3 0 0 0 3 0; B3g 3 0 0 0 3 0; Au 2 0 0 0 2 0; B1u 8 0 0 0 8 0; B2u 8 0 0 0 8 0; B3u 8 0 0 0 8 0. DOCC = 2 0 0 0 0 0 0 0; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTR DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 0 0 0; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 8 8 8; RAS 4 = 0 0 0 0 0 0 0 0; RESTR UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. Nuclear Rep. energy (chkpt) = 0.00000000000000; SCF energy (chkpt) = -24.23681570008748. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 1; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 1.33 seconds = 0.02 minutes; system time = 0.09 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 15.73 seconds = 0.26 minutes; system time = 0.42 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:54 2016. ---. ```; D E T C I. C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. Note: Calculation requested is a full CI.; Resetting EX_LEVEL to 4 and turning on all excitations. DETCI PARAMETERS:; EX LEVEL = 4 H0 BLOCKSIZE = 4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:9492,Energy Efficiency,energy,energy,9492,"niel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = DETCI; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 48000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 8; Number of SOs = 46; Number of MOs = 46; Number of active MOs = 46. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; Ag 11 0 2 0 9 0; B1g 3 0 0 0 3 0; B2g 3 0 0 0 3 0; B3g 3 0 0 0 3 0; Au 2 0 0 0 2 0; B1u 8 0 0 0 8 0; B2u 8 0 0 0 8 0; B3u 8 0 0 0 8 0. DOCC = 2 0 0 0 0 0 0 0; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTR DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 0 0 0; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 8 8 8; RAS 4 = 0 0 0 0 0 0 0 0; RESTR UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. Nuclear Rep. energy (chkpt) = 0.00000000000000; SCF energy (chkpt) = -24.23681570008748. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 1; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 1.33 seconds = 0.02 minutes; system time = 0.09 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 15.73 seconds = 0.26 minutes; system time = 0.42 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:54 2016. ---. ```; D E T C I. C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. Note: Calculation requested is a full CI.; Resetting EX_LEVEL to 4 and turning on all excitations. DETCI PARAMETERS:; EX LEVEL = 4 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:9630,Energy Efficiency,energy,energy,9630," Wave function = DETCI; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 48000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 8; Number of SOs = 46; Number of MOs = 46; Number of active MOs = 46. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; Ag 11 0 2 0 9 0; B1g 3 0 0 0 3 0; B2g 3 0 0 0 3 0; B3g 3 0 0 0 3 0; Au 2 0 0 0 2 0; B1u 8 0 0 0 8 0; B2u 8 0 0 0 8 0; B3u 8 0 0 0 8 0. DOCC = 2 0 0 0 0 0 0 0; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTR DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 0 0 0; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 8 8 8; RAS 4 = 0 0 0 0 0 0 0 0; RESTR UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. Nuclear Rep. energy (chkpt) = 0.00000000000000; SCF energy (chkpt) = -24.23681570008748. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 1; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 1.33 seconds = 0.02 minutes; system time = 0.09 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 15.73 seconds = 0.26 minutes; system time = 0.42 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:54 2016. ---. ```; D E T C I. C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. Note: Calculation requested is a full CI.; Resetting EX_LEVEL to 4 and turning on all excitations. DETCI PARAMETERS:; EX LEVEL = 4 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS SIZE= 400; H0COUPLINGSIZE= 0 H0 COUPLING = no; MAXITER = 12 NUM PRINT = 20; NUM ROOTS = 1 ICORE = 0; PRINT = 1 FCI ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:12225,Energy Efficiency,Energy,Energy,12225,F = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 12; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = no TRANS DENSITY= no. FILES = 50 51 52 53. EX ALLOW = 1 1 1 1; STATE AVERAGE = 1(1.00); STATE AVERAGE = 1(1.00). ORBITALS:; NMO = 46; FROZEN CORE = 0 RESTR CORE = 0; FROZEN VIRT = 0 RESTR VIRT = 0; DROPPED CORE = 0 DROPPED VIRT = 0; EXPLICIT CORE= 0 ORBS IN CI = 46; NUM ALP = 2 NUM BET = 2; NUM ALP EXPL = 2 NUM BET EXPL = 2; IOPEN = no; RAS1 LVL = 1 A RAS3 MAX = 2; RAS1 MIN = 0 B RAS3 MAX = 2; A RAS1 LVL = 1 RAS4 LVL = 46; A RAS1 MIN = 0 A RAS4 MAX = 0; A RAS1 MAX = 2 B RAS4 MAX = 0; B RAS1 LVL = 1 RAS4 MAX = 0; B RAS1 MIN = 0 A RAS34 MAX = 2; B RAS1 MAX = 2 B RAS34 MAX = 2; RAS3 LVL = 2 RAS34 MAX = 4; RAS3 MAX = 4. DOCC = 2 0 0 0 0 0 0 0; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTRICTED DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 0 0 0; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 8 8 8; RAS 4 = 0 0 0 0 0 0 0 0; RESTRICTED UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. ---. There are 1035 alpha strings; There are 1035 beta strings; CI space contains 8 blocks. CI space requires 136181 determinants. Check SCF Energy from 1- and 2-electron integrals. SCF Energy (ref): -24.2368157001; Nuclear repulsion energy: 0.0000000000; One-electron energy: -30.3554851372; Two-electron energy: 6.1186694371; Dropped core energy: 0.0000000000; Total electronic energy: -24.2368157001; Total SCF energy: -24.2368157001. CI vector/subblock length = 22201. **\* H0 Block Eigenvalue = -24.29689697. Find the roots by the Simultaneous Expansion Method (Block Davidson Method); Energy convergence = 1e-06; RMS CI vector convergence = 0.0001. Using 1 initial trial vectors; Iter 0 Root 1 = -24.296896966 Delta_E -2.430E+01 Delta_C 3.387E-01; Iter 1 Root 1 = -24.303610361 Delta_E -6.713E-03 Delta_C 2.586E-02; Iter 2 Root 1 = -24.303663850 Delta_E -5.349E-05 Delta_C 2.296E-03,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:12270,Energy Efficiency,Energy,Energy,12270,F = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 12; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = no TRANS DENSITY= no. FILES = 50 51 52 53. EX ALLOW = 1 1 1 1; STATE AVERAGE = 1(1.00); STATE AVERAGE = 1(1.00). ORBITALS:; NMO = 46; FROZEN CORE = 0 RESTR CORE = 0; FROZEN VIRT = 0 RESTR VIRT = 0; DROPPED CORE = 0 DROPPED VIRT = 0; EXPLICIT CORE= 0 ORBS IN CI = 46; NUM ALP = 2 NUM BET = 2; NUM ALP EXPL = 2 NUM BET EXPL = 2; IOPEN = no; RAS1 LVL = 1 A RAS3 MAX = 2; RAS1 MIN = 0 B RAS3 MAX = 2; A RAS1 LVL = 1 RAS4 LVL = 46; A RAS1 MIN = 0 A RAS4 MAX = 0; A RAS1 MAX = 2 B RAS4 MAX = 0; B RAS1 LVL = 1 RAS4 MAX = 0; B RAS1 MIN = 0 A RAS34 MAX = 2; B RAS1 MAX = 2 B RAS34 MAX = 2; RAS3 LVL = 2 RAS34 MAX = 4; RAS3 MAX = 4. DOCC = 2 0 0 0 0 0 0 0; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTRICTED DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 0 0 0; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 8 8 8; RAS 4 = 0 0 0 0 0 0 0 0; RESTRICTED UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. ---. There are 1035 alpha strings; There are 1035 beta strings; CI space contains 8 blocks. CI space requires 136181 determinants. Check SCF Energy from 1- and 2-electron integrals. SCF Energy (ref): -24.2368157001; Nuclear repulsion energy: 0.0000000000; One-electron energy: -30.3554851372; Two-electron energy: 6.1186694371; Dropped core energy: 0.0000000000; Total electronic energy: -24.2368157001; Total SCF energy: -24.2368157001. CI vector/subblock length = 22201. **\* H0 Block Eigenvalue = -24.29689697. Find the roots by the Simultaneous Expansion Method (Block Davidson Method); Energy convergence = 1e-06; RMS CI vector convergence = 0.0001. Using 1 initial trial vectors; Iter 0 Root 1 = -24.296896966 Delta_E -2.430E+01 Delta_C 3.387E-01; Iter 1 Root 1 = -24.303610361 Delta_E -6.713E-03 Delta_C 2.586E-02; Iter 2 Root 1 = -24.303663850 Delta_E -5.349E-05 Delta_C 2.296E-03,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:12318,Energy Efficiency,energy,energy,12318,F = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 12; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = no TRANS DENSITY= no. FILES = 50 51 52 53. EX ALLOW = 1 1 1 1; STATE AVERAGE = 1(1.00); STATE AVERAGE = 1(1.00). ORBITALS:; NMO = 46; FROZEN CORE = 0 RESTR CORE = 0; FROZEN VIRT = 0 RESTR VIRT = 0; DROPPED CORE = 0 DROPPED VIRT = 0; EXPLICIT CORE= 0 ORBS IN CI = 46; NUM ALP = 2 NUM BET = 2; NUM ALP EXPL = 2 NUM BET EXPL = 2; IOPEN = no; RAS1 LVL = 1 A RAS3 MAX = 2; RAS1 MIN = 0 B RAS3 MAX = 2; A RAS1 LVL = 1 RAS4 LVL = 46; A RAS1 MIN = 0 A RAS4 MAX = 0; A RAS1 MAX = 2 B RAS4 MAX = 0; B RAS1 LVL = 1 RAS4 MAX = 0; B RAS1 MIN = 0 A RAS34 MAX = 2; B RAS1 MAX = 2 B RAS34 MAX = 2; RAS3 LVL = 2 RAS34 MAX = 4; RAS3 MAX = 4. DOCC = 2 0 0 0 0 0 0 0; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTRICTED DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 0 0 0; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 8 8 8; RAS 4 = 0 0 0 0 0 0 0 0; RESTRICTED UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. ---. There are 1035 alpha strings; There are 1035 beta strings; CI space contains 8 blocks. CI space requires 136181 determinants. Check SCF Energy from 1- and 2-electron integrals. SCF Energy (ref): -24.2368157001; Nuclear repulsion energy: 0.0000000000; One-electron energy: -30.3554851372; Two-electron energy: 6.1186694371; Dropped core energy: 0.0000000000; Total electronic energy: -24.2368157001; Total SCF energy: -24.2368157001. CI vector/subblock length = 22201. **\* H0 Block Eigenvalue = -24.29689697. Find the roots by the Simultaneous Expansion Method (Block Davidson Method); Energy convergence = 1e-06; RMS CI vector convergence = 0.0001. Using 1 initial trial vectors; Iter 0 Root 1 = -24.296896966 Delta_E -2.430E+01 Delta_C 3.387E-01; Iter 1 Root 1 = -24.303610361 Delta_E -6.713E-03 Delta_C 2.586E-02; Iter 2 Root 1 = -24.303663850 Delta_E -5.349E-05 Delta_C 2.296E-03,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:12353,Energy Efficiency,energy,energy,12353,F = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 12; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = no TRANS DENSITY= no. FILES = 50 51 52 53. EX ALLOW = 1 1 1 1; STATE AVERAGE = 1(1.00); STATE AVERAGE = 1(1.00). ORBITALS:; NMO = 46; FROZEN CORE = 0 RESTR CORE = 0; FROZEN VIRT = 0 RESTR VIRT = 0; DROPPED CORE = 0 DROPPED VIRT = 0; EXPLICIT CORE= 0 ORBS IN CI = 46; NUM ALP = 2 NUM BET = 2; NUM ALP EXPL = 2 NUM BET EXPL = 2; IOPEN = no; RAS1 LVL = 1 A RAS3 MAX = 2; RAS1 MIN = 0 B RAS3 MAX = 2; A RAS1 LVL = 1 RAS4 LVL = 46; A RAS1 MIN = 0 A RAS4 MAX = 0; A RAS1 MAX = 2 B RAS4 MAX = 0; B RAS1 LVL = 1 RAS4 MAX = 0; B RAS1 MIN = 0 A RAS34 MAX = 2; B RAS1 MAX = 2 B RAS34 MAX = 2; RAS3 LVL = 2 RAS34 MAX = 4; RAS3 MAX = 4. DOCC = 2 0 0 0 0 0 0 0; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTRICTED DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 0 0 0; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 8 8 8; RAS 4 = 0 0 0 0 0 0 0 0; RESTRICTED UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. ---. There are 1035 alpha strings; There are 1035 beta strings; CI space contains 8 blocks. CI space requires 136181 determinants. Check SCF Energy from 1- and 2-electron integrals. SCF Energy (ref): -24.2368157001; Nuclear repulsion energy: 0.0000000000; One-electron energy: -30.3554851372; Two-electron energy: 6.1186694371; Dropped core energy: 0.0000000000; Total electronic energy: -24.2368157001; Total SCF energy: -24.2368157001. CI vector/subblock length = 22201. **\* H0 Block Eigenvalue = -24.29689697. Find the roots by the Simultaneous Expansion Method (Block Davidson Method); Energy convergence = 1e-06; RMS CI vector convergence = 0.0001. Using 1 initial trial vectors; Iter 0 Root 1 = -24.296896966 Delta_E -2.430E+01 Delta_C 3.387E-01; Iter 1 Root 1 = -24.303610361 Delta_E -6.713E-03 Delta_C 2.586E-02; Iter 2 Root 1 = -24.303663850 Delta_E -5.349E-05 Delta_C 2.296E-03,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:12390,Energy Efficiency,energy,energy,12390,F = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 12; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = no TRANS DENSITY= no. FILES = 50 51 52 53. EX ALLOW = 1 1 1 1; STATE AVERAGE = 1(1.00); STATE AVERAGE = 1(1.00). ORBITALS:; NMO = 46; FROZEN CORE = 0 RESTR CORE = 0; FROZEN VIRT = 0 RESTR VIRT = 0; DROPPED CORE = 0 DROPPED VIRT = 0; EXPLICIT CORE= 0 ORBS IN CI = 46; NUM ALP = 2 NUM BET = 2; NUM ALP EXPL = 2 NUM BET EXPL = 2; IOPEN = no; RAS1 LVL = 1 A RAS3 MAX = 2; RAS1 MIN = 0 B RAS3 MAX = 2; A RAS1 LVL = 1 RAS4 LVL = 46; A RAS1 MIN = 0 A RAS4 MAX = 0; A RAS1 MAX = 2 B RAS4 MAX = 0; B RAS1 LVL = 1 RAS4 MAX = 0; B RAS1 MIN = 0 A RAS34 MAX = 2; B RAS1 MAX = 2 B RAS34 MAX = 2; RAS3 LVL = 2 RAS34 MAX = 4; RAS3 MAX = 4. DOCC = 2 0 0 0 0 0 0 0; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTRICTED DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 0 0 0; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 8 8 8; RAS 4 = 0 0 0 0 0 0 0 0; RESTRICTED UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. ---. There are 1035 alpha strings; There are 1035 beta strings; CI space contains 8 blocks. CI space requires 136181 determinants. Check SCF Energy from 1- and 2-electron integrals. SCF Energy (ref): -24.2368157001; Nuclear repulsion energy: 0.0000000000; One-electron energy: -30.3554851372; Two-electron energy: 6.1186694371; Dropped core energy: 0.0000000000; Total electronic energy: -24.2368157001; Total SCF energy: -24.2368157001. CI vector/subblock length = 22201. **\* H0 Block Eigenvalue = -24.29689697. Find the roots by the Simultaneous Expansion Method (Block Davidson Method); Energy convergence = 1e-06; RMS CI vector convergence = 0.0001. Using 1 initial trial vectors; Iter 0 Root 1 = -24.296896966 Delta_E -2.430E+01 Delta_C 3.387E-01; Iter 1 Root 1 = -24.303610361 Delta_E -6.713E-03 Delta_C 2.586E-02; Iter 2 Root 1 = -24.303663850 Delta_E -5.349E-05 Delta_C 2.296E-03,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:12425,Energy Efficiency,energy,energy,12425,F = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 12; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = no TRANS DENSITY= no. FILES = 50 51 52 53. EX ALLOW = 1 1 1 1; STATE AVERAGE = 1(1.00); STATE AVERAGE = 1(1.00). ORBITALS:; NMO = 46; FROZEN CORE = 0 RESTR CORE = 0; FROZEN VIRT = 0 RESTR VIRT = 0; DROPPED CORE = 0 DROPPED VIRT = 0; EXPLICIT CORE= 0 ORBS IN CI = 46; NUM ALP = 2 NUM BET = 2; NUM ALP EXPL = 2 NUM BET EXPL = 2; IOPEN = no; RAS1 LVL = 1 A RAS3 MAX = 2; RAS1 MIN = 0 B RAS3 MAX = 2; A RAS1 LVL = 1 RAS4 LVL = 46; A RAS1 MIN = 0 A RAS4 MAX = 0; A RAS1 MAX = 2 B RAS4 MAX = 0; B RAS1 LVL = 1 RAS4 MAX = 0; B RAS1 MIN = 0 A RAS34 MAX = 2; B RAS1 MAX = 2 B RAS34 MAX = 2; RAS3 LVL = 2 RAS34 MAX = 4; RAS3 MAX = 4. DOCC = 2 0 0 0 0 0 0 0; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTRICTED DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 0 0 0; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 8 8 8; RAS 4 = 0 0 0 0 0 0 0 0; RESTRICTED UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. ---. There are 1035 alpha strings; There are 1035 beta strings; CI space contains 8 blocks. CI space requires 136181 determinants. Check SCF Energy from 1- and 2-electron integrals. SCF Energy (ref): -24.2368157001; Nuclear repulsion energy: 0.0000000000; One-electron energy: -30.3554851372; Two-electron energy: 6.1186694371; Dropped core energy: 0.0000000000; Total electronic energy: -24.2368157001; Total SCF energy: -24.2368157001. CI vector/subblock length = 22201. **\* H0 Block Eigenvalue = -24.29689697. Find the roots by the Simultaneous Expansion Method (Block Davidson Method); Energy convergence = 1e-06; RMS CI vector convergence = 0.0001. Using 1 initial trial vectors; Iter 0 Root 1 = -24.296896966 Delta_E -2.430E+01 Delta_C 3.387E-01; Iter 1 Root 1 = -24.303610361 Delta_E -6.713E-03 Delta_C 2.586E-02; Iter 2 Root 1 = -24.303663850 Delta_E -5.349E-05 Delta_C 2.296E-03,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:12464,Energy Efficiency,energy,energy,12464,F = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 12; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = no TRANS DENSITY= no. FILES = 50 51 52 53. EX ALLOW = 1 1 1 1; STATE AVERAGE = 1(1.00); STATE AVERAGE = 1(1.00). ORBITALS:; NMO = 46; FROZEN CORE = 0 RESTR CORE = 0; FROZEN VIRT = 0 RESTR VIRT = 0; DROPPED CORE = 0 DROPPED VIRT = 0; EXPLICIT CORE= 0 ORBS IN CI = 46; NUM ALP = 2 NUM BET = 2; NUM ALP EXPL = 2 NUM BET EXPL = 2; IOPEN = no; RAS1 LVL = 1 A RAS3 MAX = 2; RAS1 MIN = 0 B RAS3 MAX = 2; A RAS1 LVL = 1 RAS4 LVL = 46; A RAS1 MIN = 0 A RAS4 MAX = 0; A RAS1 MAX = 2 B RAS4 MAX = 0; B RAS1 LVL = 1 RAS4 MAX = 0; B RAS1 MIN = 0 A RAS34 MAX = 2; B RAS1 MAX = 2 B RAS34 MAX = 2; RAS3 LVL = 2 RAS34 MAX = 4; RAS3 MAX = 4. DOCC = 2 0 0 0 0 0 0 0; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTRICTED DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 0 0 0; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 8 8 8; RAS 4 = 0 0 0 0 0 0 0 0; RESTRICTED UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. ---. There are 1035 alpha strings; There are 1035 beta strings; CI space contains 8 blocks. CI space requires 136181 determinants. Check SCF Energy from 1- and 2-electron integrals. SCF Energy (ref): -24.2368157001; Nuclear repulsion energy: 0.0000000000; One-electron energy: -30.3554851372; Two-electron energy: 6.1186694371; Dropped core energy: 0.0000000000; Total electronic energy: -24.2368157001; Total SCF energy: -24.2368157001. CI vector/subblock length = 22201. **\* H0 Block Eigenvalue = -24.29689697. Find the roots by the Simultaneous Expansion Method (Block Davidson Method); Energy convergence = 1e-06; RMS CI vector convergence = 0.0001. Using 1 initial trial vectors; Iter 0 Root 1 = -24.296896966 Delta_E -2.430E+01 Delta_C 3.387E-01; Iter 1 Root 1 = -24.303610361 Delta_E -6.713E-03 Delta_C 2.586E-02; Iter 2 Root 1 = -24.303663850 Delta_E -5.349E-05 Delta_C 2.296E-03,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:12498,Energy Efficiency,energy,energy,12498,F = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 12; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = no TRANS DENSITY= no. FILES = 50 51 52 53. EX ALLOW = 1 1 1 1; STATE AVERAGE = 1(1.00); STATE AVERAGE = 1(1.00). ORBITALS:; NMO = 46; FROZEN CORE = 0 RESTR CORE = 0; FROZEN VIRT = 0 RESTR VIRT = 0; DROPPED CORE = 0 DROPPED VIRT = 0; EXPLICIT CORE= 0 ORBS IN CI = 46; NUM ALP = 2 NUM BET = 2; NUM ALP EXPL = 2 NUM BET EXPL = 2; IOPEN = no; RAS1 LVL = 1 A RAS3 MAX = 2; RAS1 MIN = 0 B RAS3 MAX = 2; A RAS1 LVL = 1 RAS4 LVL = 46; A RAS1 MIN = 0 A RAS4 MAX = 0; A RAS1 MAX = 2 B RAS4 MAX = 0; B RAS1 LVL = 1 RAS4 MAX = 0; B RAS1 MIN = 0 A RAS34 MAX = 2; B RAS1 MAX = 2 B RAS34 MAX = 2; RAS3 LVL = 2 RAS34 MAX = 4; RAS3 MAX = 4. DOCC = 2 0 0 0 0 0 0 0; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTRICTED DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 0 0 0; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 8 8 8; RAS 4 = 0 0 0 0 0 0 0 0; RESTRICTED UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. ---. There are 1035 alpha strings; There are 1035 beta strings; CI space contains 8 blocks. CI space requires 136181 determinants. Check SCF Energy from 1- and 2-electron integrals. SCF Energy (ref): -24.2368157001; Nuclear repulsion energy: 0.0000000000; One-electron energy: -30.3554851372; Two-electron energy: 6.1186694371; Dropped core energy: 0.0000000000; Total electronic energy: -24.2368157001; Total SCF energy: -24.2368157001. CI vector/subblock length = 22201. **\* H0 Block Eigenvalue = -24.29689697. Find the roots by the Simultaneous Expansion Method (Block Davidson Method); Energy convergence = 1e-06; RMS CI vector convergence = 0.0001. Using 1 initial trial vectors; Iter 0 Root 1 = -24.296896966 Delta_E -2.430E+01 Delta_C 3.387E-01; Iter 1 Root 1 = -24.303610361 Delta_E -6.713E-03 Delta_C 2.586E-02; Iter 2 Root 1 = -24.303663850 Delta_E -5.349E-05 Delta_C 2.296E-03,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:12675,Energy Efficiency,Energy,Energy,12675,F = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 12; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = no TRANS DENSITY= no. FILES = 50 51 52 53. EX ALLOW = 1 1 1 1; STATE AVERAGE = 1(1.00); STATE AVERAGE = 1(1.00). ORBITALS:; NMO = 46; FROZEN CORE = 0 RESTR CORE = 0; FROZEN VIRT = 0 RESTR VIRT = 0; DROPPED CORE = 0 DROPPED VIRT = 0; EXPLICIT CORE= 0 ORBS IN CI = 46; NUM ALP = 2 NUM BET = 2; NUM ALP EXPL = 2 NUM BET EXPL = 2; IOPEN = no; RAS1 LVL = 1 A RAS3 MAX = 2; RAS1 MIN = 0 B RAS3 MAX = 2; A RAS1 LVL = 1 RAS4 LVL = 46; A RAS1 MIN = 0 A RAS4 MAX = 0; A RAS1 MAX = 2 B RAS4 MAX = 0; B RAS1 LVL = 1 RAS4 MAX = 0; B RAS1 MIN = 0 A RAS34 MAX = 2; B RAS1 MAX = 2 B RAS34 MAX = 2; RAS3 LVL = 2 RAS34 MAX = 4; RAS3 MAX = 4. DOCC = 2 0 0 0 0 0 0 0; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTRICTED DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 0 0 0; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 8 8 8; RAS 4 = 0 0 0 0 0 0 0 0; RESTRICTED UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. ---. There are 1035 alpha strings; There are 1035 beta strings; CI space contains 8 blocks. CI space requires 136181 determinants. Check SCF Energy from 1- and 2-electron integrals. SCF Energy (ref): -24.2368157001; Nuclear repulsion energy: 0.0000000000; One-electron energy: -30.3554851372; Two-electron energy: 6.1186694371; Dropped core energy: 0.0000000000; Total electronic energy: -24.2368157001; Total SCF energy: -24.2368157001. CI vector/subblock length = 22201. **\* H0 Block Eigenvalue = -24.29689697. Find the roots by the Simultaneous Expansion Method (Block Davidson Method); Energy convergence = 1e-06; RMS CI vector convergence = 0.0001. Using 1 initial trial vectors; Iter 0 Root 1 = -24.296896966 Delta_E -2.430E+01 Delta_C 3.387E-01; Iter 1 Root 1 = -24.303610361 Delta_E -6.713E-03 Delta_C 2.586E-02; Iter 2 Root 1 = -24.303663850 Delta_E -5.349E-05 Delta_C 2.296E-03,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:5259,Integrability,Wrap,Wrapper,5259,"332; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12; ```. => Auxiliary Basis Set <=. Basis Set:; Number of shells: 30; Number of basis function: 104; Number of Cartesian functions: 131; Spherical Harmonics?: true; Max angular momentum: 4. Minimum eigenvalue in the overlap matrix is 2.5053959051E-02.; Using Symmetric Orthogonalization.; SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. ```; Total Energy Delta E RMS |[F,P]|; ```. @DF-RHF iter 1: -23.49398571874617 -2.34940e+01 7.47577e-02; @DF-RHF iter 2: -24.22630554723446 -7.32320e-01 7.13952e-03 DIIS; @DF-RHF iter 3: -24.23662538410707 -1.03198e-02 7.21912e-04 DIIS; @DF-RHF iter 4: -24.23681435257776 -1.88968e-04 6.97945e-05 DIIS; @DF-RHF iter 5: -24.23681649173431 -2.13916e-06 2.93127e-06 DIIS; @DF-RHF iter 6: -24.23681649645996 -4.72565e-09 1.53123e-07 DIIS; @DF-RHF iter 7: -24.23681649646912 -9.16245e-12 1.38238e-09 DIIS. DF guess converged. ==> Integral Setup <==. MINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of atoms: 1; Number of AO shells: 14; Number of SO shells: 14; Number of primitives: 30; Number of atomic orbitals: 55; Number of basis functions: 46. ```; Number of irreps: 8; Integral cutoff 0.00e+00; Number of functions per irrep: [ 11 3 3 3 2 8 8 8 ]; ```. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ```; Computing two-electron integrals...done; Computed 68847 non-zero two-electron integrals.; Stored in file 33. Batch 1 pq = [ 0, 195] index = [ 0,19110]; ```. ==> DiskJK: Disk-Based J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 34332; Schwarz Cutoff: 1E-12; ```. @RHF iter 8: -24.23681570008684 7.96382e-07 6.89584e-08 DIIS; @RHF iter 9: -24.23681570008748 -6.39488e-13 7.72849e-09 DIIS. ==> Post-Iterations <==. ```; Orbital Energies (a.u.); -----------------------. Doubly Occupied:. 1Ag -8.185320 2Ag -0.873753. Virtual:. 1B3u -0.275716 1B1u",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:10524,Modifiability,COUPLING,COUPLING,10524,"70008748. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 1; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 1.33 seconds = 0.02 minutes; system time = 0.09 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 15.73 seconds = 0.26 minutes; system time = 0.42 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:54 2016. ---. ```; D E T C I. C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. Note: Calculation requested is a full CI.; Resetting EX_LEVEL to 4 and turning on all excitations. DETCI PARAMETERS:; EX LEVEL = 4 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS SIZE= 400; H0COUPLINGSIZE= 0 H0 COUPLING = no; MAXITER = 12 NUM PRINT = 20; NUM ROOTS = 1 ICORE = 0; PRINT = 1 FCI = yes; R CONV = 1.00e-04 MIXED = yes; E CONV = 1.00e-06 MIXED4 = yes; OEI FILE = 35 R4S = no; REPL OTF = no; TEI FILE = 72 DIAG METHOD = SEM; PRECONDITIONER= DAVIDSON UPDATE = DAVIDSON; S = 0.0000 Ms0 = yes; MAX NUM VECS = 13; RESTART = no; GUESS VECTOR = H0BLOCK OPENTYPE = NONE; REF SYM = auto; COLLAPSE SIZE = 1 HD AVG = EVANGELISTI; LSE = no LSE ITER = 0; HD OTF = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 12; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = no TRANS DENSITY= no. FILES = 50 51 52 53. EX ALLOW = 1 1 1 1; STATE AVERAGE = 1(1.00); STATE AVERAGE = 1(1.00). ORBITALS:; NMO = 46; FROZEN CORE = 0 RESTR CORE = 0; FROZEN VIRT = 0 RESTR VIRT = 0; DROPPED CORE = 0 DROPPED VIRT = 0; EXPLICIT CORE= 0 ORBS IN CI = 46; NUM ALP = 2 NUM BET = 2; NUM ALP EXPL = 2 NUM BET EXPL = 2; IOPEN = no; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:4296,Performance,Cache,Cache,4296,"ctrons = 4; Nalpha = 2; Nbeta = 2. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-CC-PVTZ; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 55; Spherical Harmonics?: true; Max angular momentum: 3. ==> Pre-Iterations <==. ---. ```; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; ```. ---. ```; Ag 11 11 0 0 0 0; B1g 3 3 0 0 0 0; B2g 3 3 0 0 0 0; B3g 3 3 0 0 0 0; Au 2 2 0 0 0 0; B1u 8 8 0 0 0 0; B2u 8 8 0 0 0 0; B3u 8 8 0 0 0 0; ```. ---. ```; Total 46 46 2 2 2 0; ```. ---. Starting with a DF guess... OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 12; Integrals threads: 12; Memory (MB): 34332; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12; ```. => Auxiliary Basis Set <=. Basis Set:; Number of shells: 30; Number of basis function: 104; Number of Cartesian functions: 131; Spherical Harmonics?: true; Max angular momentum: 4. Minimum eigenvalue in the overlap matrix is 2.5053959051E-02.; Using Symmetric Orthogonalization.; SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. ```; Total Energy Delta E RMS |[F,P]|; ```. @DF-RHF iter 1: -23.49398571874617 -2.34940e+01 7.47577e-02; @DF-RHF iter 2: -24.22630554723446 -7.32320e-01 7.13952e-03 DIIS; @DF-RHF iter 3: -24.23662538410707 -1.03198e-02 7.21912e-04 DIIS; @DF-RHF iter 4: -24.23681435257776 -1.88968e-04 6.97945e-05 DIIS; @DF-RHF iter 5: -24.23681649173431 -2.13916e-06 2.93127e-06 DIIS; @DF-RHF iter 6: -24.23681649645996 -4.72565e-09 1.53123e-07 DIIS; @DF-RHF iter 7: -24.23681649646912 -9.16245e-12 1.38238e-09 DIIS. DF guess converged. ==> Integral Setup <==. MINTS: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:8774,Performance,Cache,Cache,8774,"00 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes; Total time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:54 2016. ```; **************************************************; * TRANSQT2: Program to transform integrals from *; * the SO basis to the MO basis. *; * *; * Daniel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = DETCI; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 48000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 8; Number of SOs = 46; Number of MOs = 46; Number of active MOs = 46. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; Ag 11 0 2 0 9 0; B1g 3 0 0 0 3 0; B2g 3 0 0 0 3 0; B3g 3 0 0 0 3 0; Au 2 0 0 0 2 0; B1u 8 0 0 0 8 0; B2u 8 0 0 0 8 0; B3u 8 0 0 0 8 0. DOCC = 2 0 0 0 0 0 0 0; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTR DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 0 0 0; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 8 8 8; RAS 4 = 0 0 0 0 0 0 0 0; RESTR UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. Nuclear Rep. energy (chkpt) = 0.00000000000000; SCF energy (chkpt) = -24.23681570008748. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 1; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on node5-027",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:8791,Performance,Cache,Cache,8791,"00 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes; Total time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:54 2016. ```; **************************************************; * TRANSQT2: Program to transform integrals from *; * the SO basis to the MO basis. *; * *; * Daniel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = DETCI; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 48000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 8; Number of SOs = 46; Number of MOs = 46; Number of active MOs = 46. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; Ag 11 0 2 0 9 0; B1g 3 0 0 0 3 0; B2g 3 0 0 0 3 0; B3g 3 0 0 0 3 0; Au 2 0 0 0 2 0; B1u 8 0 0 0 8 0; B2u 8 0 0 0 8 0; B3u 8 0 0 0 8 0. DOCC = 2 0 0 0 0 0 0 0; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTR DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 0 0 0; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 8 8 8; RAS 4 = 0 0 0 0 0 0 0 0; RESTR UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. Nuclear Rep. energy (chkpt) = 0.00000000000000; SCF energy (chkpt) = -24.23681570008748. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 1; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on node5-027",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170152270:1658,Testability,Test,Test,1658,"0000000 -.000000000; units bohr; }; set globals {; basis aug-cc-pVTZ; icore 0; }; thisenergy = energy('fci'). The output file is:. ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (no tag) Driver. Git: Rev {(no tag)}. J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012); (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Sat Jan 9 01:41:42 2016. Process ID: 17178; PSI4DATADIR: ./lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---. #! 6-31G H2O Test FCI Energy Point. memory 48000 mb. molecule B {; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; }. set globals {; basis aug-cc-pVTZ; icore 0; }. thisenergy = energy('fci'). ---. Input file to run:; from psi4 import *; from p4const import *; from p4util import *; from molutil import *; from aliases import *; psi4_io = psi4.IOManager.shared_object(); psi4.efp_init(); psi4_io.set_default_path(""/tmp""); geometry(""""""; 0 1; H; H 1 0.74; """""",""blank_molecule_psi4_yo""). psi4.set_memory(48000000000). psi4.efp_init(); B = geometry(""""""; 1 1; B .0000000000 .0000000000 -.000000000; units bohr; """""",""B""); psi4.IO.set_default_namespace(""B""); psi4.set_global_option(""BASIS"", ""aug-cc-pVTZ""); psi4.set_global_option(""ICORE"", 0); thisenergy = energy('fci'). Memory set to 48.000 GiB by Python script. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:51 2016. ```; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Referenc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270
https://github.com/psi4/psi4/issues/204#issuecomment-170186608:125,Availability,error,error,125,"I just tried this with the very latest version of the code, and it works fine for me. The code will almost never have an I/O error after passing through a few iterations, unless your disk is full. Although this computation won't really require much scratch space, nevertheless, it's important to make sure an adequate scratch space has been set up (usually dedicated disks... not the default /tmp directory). http://www.psicode.org/psi4manual/master/external.html#scratch-files-psirc-file-and-elementary-restart",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170186608
https://github.com/psi4/psi4/issues/204#issuecomment-170187836:33,Testability,test,test,33,"Also, the B atom (singlet state) test case is small enough that it runs in the default 256 MB of RAM. Took about 2 seconds on my desktop.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170187836
https://github.com/psi4/psi4/issues/204#issuecomment-170252262:129,Availability,avail,available,129,"@medvedev-m, /tmp is just fine when it's big enough. Often, default Linux/Unix installations have only a limited amount of space available in /tmp. The singlet B atom computation you had crash is actually very small and doesn't require much space, so I think your /tmp must have been filled by some of your earlier computations that crashed. Many quantum chemistry programs, including Psi4, leave some of their temporary files around if they crash, so you have to delete them up to avoid filling the directory. Anything in /tmp should be automatically removed by the operating system, eventually, but I don't know how often that happens --- they might not be cleaned up that quickly. NFS-attached disks are very slow and you should never use them as scratch disks in a quantum chemistry computation. Otherwise, you'll cripple the network with all the data you're sending over it, people will have trouble accessing their files, and your system administrator will be very unhappy with you. So if /tmp is a problem and if NFS-attached disks are a problem, what do you do? Anyone running serious quantum chemistry computations (beyond tiny molecules with cheap methods) normally takes special steps to set up their computer such that is has one or more large hard drives in it that can be used for the temporary files (""scratch space""). For very large computations, it is advisable to get 2-3 hard drives and stripe them together in a ""RAID0"" configuration for maximum speed. It's good to have several hundreds of gibabytes available, at least, and for really big computations it's good to have a terabyte or more. . You might be able to get by using /tmp if you keep it cleaned of any files from crashed calculations, and if you're lucky it might be big enough for some decent computations if they're not too large. Ramdisks are great if your computations are quite small so that they will fit. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170252262
https://github.com/psi4/psi4/issues/204#issuecomment-170252262:1521,Availability,avail,available,1521,"@medvedev-m, /tmp is just fine when it's big enough. Often, default Linux/Unix installations have only a limited amount of space available in /tmp. The singlet B atom computation you had crash is actually very small and doesn't require much space, so I think your /tmp must have been filled by some of your earlier computations that crashed. Many quantum chemistry programs, including Psi4, leave some of their temporary files around if they crash, so you have to delete them up to avoid filling the directory. Anything in /tmp should be automatically removed by the operating system, eventually, but I don't know how often that happens --- they might not be cleaned up that quickly. NFS-attached disks are very slow and you should never use them as scratch disks in a quantum chemistry computation. Otherwise, you'll cripple the network with all the data you're sending over it, people will have trouble accessing their files, and your system administrator will be very unhappy with you. So if /tmp is a problem and if NFS-attached disks are a problem, what do you do? Anyone running serious quantum chemistry computations (beyond tiny molecules with cheap methods) normally takes special steps to set up their computer such that is has one or more large hard drives in it that can be used for the temporary files (""scratch space""). For very large computations, it is advisable to get 2-3 hard drives and stripe them together in a ""RAID0"" configuration for maximum speed. It's good to have several hundreds of gibabytes available, at least, and for really big computations it's good to have a terabyte or more. . You might be able to get by using /tmp if you keep it cleaned of any files from crashed calculations, and if you're lucky it might be big enough for some decent computations if they're not too large. Ramdisks are great if your computations are quite small so that they will fit. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170252262
https://github.com/psi4/psi4/issues/204#issuecomment-170252262:79,Deployability,install,installations,79,"@medvedev-m, /tmp is just fine when it's big enough. Often, default Linux/Unix installations have only a limited amount of space available in /tmp. The singlet B atom computation you had crash is actually very small and doesn't require much space, so I think your /tmp must have been filled by some of your earlier computations that crashed. Many quantum chemistry programs, including Psi4, leave some of their temporary files around if they crash, so you have to delete them up to avoid filling the directory. Anything in /tmp should be automatically removed by the operating system, eventually, but I don't know how often that happens --- they might not be cleaned up that quickly. NFS-attached disks are very slow and you should never use them as scratch disks in a quantum chemistry computation. Otherwise, you'll cripple the network with all the data you're sending over it, people will have trouble accessing their files, and your system administrator will be very unhappy with you. So if /tmp is a problem and if NFS-attached disks are a problem, what do you do? Anyone running serious quantum chemistry computations (beyond tiny molecules with cheap methods) normally takes special steps to set up their computer such that is has one or more large hard drives in it that can be used for the temporary files (""scratch space""). For very large computations, it is advisable to get 2-3 hard drives and stripe them together in a ""RAID0"" configuration for maximum speed. It's good to have several hundreds of gibabytes available, at least, and for really big computations it's good to have a terabyte or more. . You might be able to get by using /tmp if you keep it cleaned of any files from crashed calculations, and if you're lucky it might be big enough for some decent computations if they're not too large. Ramdisks are great if your computations are quite small so that they will fit. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170252262
https://github.com/psi4/psi4/issues/204#issuecomment-170252262:1440,Deployability,configurat,configuration,1440,"@medvedev-m, /tmp is just fine when it's big enough. Often, default Linux/Unix installations have only a limited amount of space available in /tmp. The singlet B atom computation you had crash is actually very small and doesn't require much space, so I think your /tmp must have been filled by some of your earlier computations that crashed. Many quantum chemistry programs, including Psi4, leave some of their temporary files around if they crash, so you have to delete them up to avoid filling the directory. Anything in /tmp should be automatically removed by the operating system, eventually, but I don't know how often that happens --- they might not be cleaned up that quickly. NFS-attached disks are very slow and you should never use them as scratch disks in a quantum chemistry computation. Otherwise, you'll cripple the network with all the data you're sending over it, people will have trouble accessing their files, and your system administrator will be very unhappy with you. So if /tmp is a problem and if NFS-attached disks are a problem, what do you do? Anyone running serious quantum chemistry computations (beyond tiny molecules with cheap methods) normally takes special steps to set up their computer such that is has one or more large hard drives in it that can be used for the temporary files (""scratch space""). For very large computations, it is advisable to get 2-3 hard drives and stripe them together in a ""RAID0"" configuration for maximum speed. It's good to have several hundreds of gibabytes available, at least, and for really big computations it's good to have a terabyte or more. . You might be able to get by using /tmp if you keep it cleaned of any files from crashed calculations, and if you're lucky it might be big enough for some decent computations if they're not too large. Ramdisks are great if your computations are quite small so that they will fit. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170252262
https://github.com/psi4/psi4/issues/204#issuecomment-170252262:1440,Modifiability,config,configuration,1440,"@medvedev-m, /tmp is just fine when it's big enough. Often, default Linux/Unix installations have only a limited amount of space available in /tmp. The singlet B atom computation you had crash is actually very small and doesn't require much space, so I think your /tmp must have been filled by some of your earlier computations that crashed. Many quantum chemistry programs, including Psi4, leave some of their temporary files around if they crash, so you have to delete them up to avoid filling the directory. Anything in /tmp should be automatically removed by the operating system, eventually, but I don't know how often that happens --- they might not be cleaned up that quickly. NFS-attached disks are very slow and you should never use them as scratch disks in a quantum chemistry computation. Otherwise, you'll cripple the network with all the data you're sending over it, people will have trouble accessing their files, and your system administrator will be very unhappy with you. So if /tmp is a problem and if NFS-attached disks are a problem, what do you do? Anyone running serious quantum chemistry computations (beyond tiny molecules with cheap methods) normally takes special steps to set up their computer such that is has one or more large hard drives in it that can be used for the temporary files (""scratch space""). For very large computations, it is advisable to get 2-3 hard drives and stripe them together in a ""RAID0"" configuration for maximum speed. It's good to have several hundreds of gibabytes available, at least, and for really big computations it's good to have a terabyte or more. . You might be able to get by using /tmp if you keep it cleaned of any files from crashed calculations, and if you're lucky it might be big enough for some decent computations if they're not too large. Ramdisks are great if your computations are quite small so that they will fit. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170252262
https://github.com/psi4/psi4/issues/204#issuecomment-170252262:482,Safety,avoid,avoid,482,"@medvedev-m, /tmp is just fine when it's big enough. Often, default Linux/Unix installations have only a limited amount of space available in /tmp. The singlet B atom computation you had crash is actually very small and doesn't require much space, so I think your /tmp must have been filled by some of your earlier computations that crashed. Many quantum chemistry programs, including Psi4, leave some of their temporary files around if they crash, so you have to delete them up to avoid filling the directory. Anything in /tmp should be automatically removed by the operating system, eventually, but I don't know how often that happens --- they might not be cleaned up that quickly. NFS-attached disks are very slow and you should never use them as scratch disks in a quantum chemistry computation. Otherwise, you'll cripple the network with all the data you're sending over it, people will have trouble accessing their files, and your system administrator will be very unhappy with you. So if /tmp is a problem and if NFS-attached disks are a problem, what do you do? Anyone running serious quantum chemistry computations (beyond tiny molecules with cheap methods) normally takes special steps to set up their computer such that is has one or more large hard drives in it that can be used for the temporary files (""scratch space""). For very large computations, it is advisable to get 2-3 hard drives and stripe them together in a ""RAID0"" configuration for maximum speed. It's good to have several hundreds of gibabytes available, at least, and for really big computations it's good to have a terabyte or more. . You might be able to get by using /tmp if you keep it cleaned of any files from crashed calculations, and if you're lucky it might be big enough for some decent computations if they're not too large. Ramdisks are great if your computations are quite small so that they will fit. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170252262
https://github.com/psi4/psi4/issues/204#issuecomment-170252262:905,Security,access,accessing,905,"@medvedev-m, /tmp is just fine when it's big enough. Often, default Linux/Unix installations have only a limited amount of space available in /tmp. The singlet B atom computation you had crash is actually very small and doesn't require much space, so I think your /tmp must have been filled by some of your earlier computations that crashed. Many quantum chemistry programs, including Psi4, leave some of their temporary files around if they crash, so you have to delete them up to avoid filling the directory. Anything in /tmp should be automatically removed by the operating system, eventually, but I don't know how often that happens --- they might not be cleaned up that quickly. NFS-attached disks are very slow and you should never use them as scratch disks in a quantum chemistry computation. Otherwise, you'll cripple the network with all the data you're sending over it, people will have trouble accessing their files, and your system administrator will be very unhappy with you. So if /tmp is a problem and if NFS-attached disks are a problem, what do you do? Anyone running serious quantum chemistry computations (beyond tiny molecules with cheap methods) normally takes special steps to set up their computer such that is has one or more large hard drives in it that can be used for the temporary files (""scratch space""). For very large computations, it is advisable to get 2-3 hard drives and stripe them together in a ""RAID0"" configuration for maximum speed. It's good to have several hundreds of gibabytes available, at least, and for really big computations it's good to have a terabyte or more. . You might be able to get by using /tmp if you keep it cleaned of any files from crashed calculations, and if you're lucky it might be big enough for some decent computations if they're not too large. Ramdisks are great if your computations are quite small so that they will fit. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170252262
https://github.com/psi4/psi4/issues/207#issuecomment-170788018:226,Availability,error,error,226,"I don't know if this is the same problem, but how did you clone the repo? . In the manual, it says that you should do a git --recursive clone rather than just a git clone. We had trouble with pcm if we didn't do this, but the error appeared during compilation of pcm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170788018
https://github.com/psi4/psi4/issues/207#issuecomment-170794065:517,Availability,Error,Error,517,"Thought I had, as this was the compilation including chemps2 and pcmsolver that I had working on Friday, but you're right, `git submodule update --init --recursive` changed the compilation. Now have the below:. ``` bash; [100%] Built target pcm-base; Scanning dependencies of target pcm-shared; Scanning dependencies of target pcm-static; Linking CXX static library ../lib/libpcm.a; Linking CXX shared library ../lib/libpcm.so; [100%] Built target pcm-static; ld: cannot find -lstdc++; make[5]: *** [lib/libpcm.so.1] Error 1; make[4]: *** [src/CMakeFiles/pcm-shared.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-build] Error 2; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I know @robertodr has been working on building both `.a`/`.so` so the missing library is probably a result of those changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170794065
https://github.com/psi4/psi4/issues/207#issuecomment-170794065:575,Availability,Error,Error,575,"Thought I had, as this was the compilation including chemps2 and pcmsolver that I had working on Friday, but you're right, `git submodule update --init --recursive` changed the compilation. Now have the below:. ``` bash; [100%] Built target pcm-base; Scanning dependencies of target pcm-shared; Scanning dependencies of target pcm-static; Linking CXX static library ../lib/libpcm.a; Linking CXX shared library ../lib/libpcm.so; [100%] Built target pcm-static; ld: cannot find -lstdc++; make[5]: *** [lib/libpcm.so.1] Error 1; make[4]: *** [src/CMakeFiles/pcm-shared.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-build] Error 2; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I know @robertodr has been working on building both `.a`/`.so` so the missing library is probably a result of those changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170794065
https://github.com/psi4/psi4/issues/207#issuecomment-170794065:603,Availability,Error,Error,603,"Thought I had, as this was the compilation including chemps2 and pcmsolver that I had working on Friday, but you're right, `git submodule update --init --recursive` changed the compilation. Now have the below:. ``` bash; [100%] Built target pcm-base; Scanning dependencies of target pcm-shared; Scanning dependencies of target pcm-static; Linking CXX static library ../lib/libpcm.a; Linking CXX shared library ../lib/libpcm.so; [100%] Built target pcm-static; ld: cannot find -lstdc++; make[5]: *** [lib/libpcm.so.1] Error 1; make[4]: *** [src/CMakeFiles/pcm-shared.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-build] Error 2; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I know @robertodr has been working on building both `.a`/`.so` so the missing library is probably a result of those changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170794065
https://github.com/psi4/psi4/issues/207#issuecomment-170794065:670,Availability,Error,Error,670,"Thought I had, as this was the compilation including chemps2 and pcmsolver that I had working on Friday, but you're right, `git submodule update --init --recursive` changed the compilation. Now have the below:. ``` bash; [100%] Built target pcm-base; Scanning dependencies of target pcm-shared; Scanning dependencies of target pcm-static; Linking CXX static library ../lib/libpcm.a; Linking CXX shared library ../lib/libpcm.so; [100%] Built target pcm-static; ld: cannot find -lstdc++; make[5]: *** [lib/libpcm.so.1] Error 1; make[4]: *** [src/CMakeFiles/pcm-shared.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-build] Error 2; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I know @robertodr has been working on building both `.a`/`.so` so the missing library is probably a result of those changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170794065
https://github.com/psi4/psi4/issues/207#issuecomment-170794065:741,Availability,Error,Error,741,"Thought I had, as this was the compilation including chemps2 and pcmsolver that I had working on Friday, but you're right, `git submodule update --init --recursive` changed the compilation. Now have the below:. ``` bash; [100%] Built target pcm-base; Scanning dependencies of target pcm-shared; Scanning dependencies of target pcm-static; Linking CXX static library ../lib/libpcm.a; Linking CXX shared library ../lib/libpcm.so; [100%] Built target pcm-static; ld: cannot find -lstdc++; make[5]: *** [lib/libpcm.so.1] Error 1; make[4]: *** [src/CMakeFiles/pcm-shared.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-build] Error 2; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I know @robertodr has been working on building both `.a`/`.so` so the missing library is probably a result of those changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170794065
https://github.com/psi4/psi4/issues/207#issuecomment-170794065:766,Availability,Error,Error,766,"Thought I had, as this was the compilation including chemps2 and pcmsolver that I had working on Friday, but you're right, `git submodule update --init --recursive` changed the compilation. Now have the below:. ``` bash; [100%] Built target pcm-base; Scanning dependencies of target pcm-shared; Scanning dependencies of target pcm-static; Linking CXX static library ../lib/libpcm.a; Linking CXX shared library ../lib/libpcm.so; [100%] Built target pcm-static; ld: cannot find -lstdc++; make[5]: *** [lib/libpcm.so.1] Error 1; make[4]: *** [src/CMakeFiles/pcm-shared.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-build] Error 2; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I know @robertodr has been working on building both `.a`/`.so` so the missing library is probably a result of those changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170794065
https://github.com/psi4/psi4/issues/207#issuecomment-170794065:138,Deployability,update,update,138,"Thought I had, as this was the compilation including chemps2 and pcmsolver that I had working on Friday, but you're right, `git submodule update --init --recursive` changed the compilation. Now have the below:. ``` bash; [100%] Built target pcm-base; Scanning dependencies of target pcm-shared; Scanning dependencies of target pcm-static; Linking CXX static library ../lib/libpcm.a; Linking CXX shared library ../lib/libpcm.so; [100%] Built target pcm-static; ld: cannot find -lstdc++; make[5]: *** [lib/libpcm.so.1] Error 1; make[4]: *** [src/CMakeFiles/pcm-shared.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-build] Error 2; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I know @robertodr has been working on building both `.a`/`.so` so the missing library is probably a result of those changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170794065
https://github.com/psi4/psi4/issues/207#issuecomment-170794065:260,Integrability,depend,dependencies,260,"Thought I had, as this was the compilation including chemps2 and pcmsolver that I had working on Friday, but you're right, `git submodule update --init --recursive` changed the compilation. Now have the below:. ``` bash; [100%] Built target pcm-base; Scanning dependencies of target pcm-shared; Scanning dependencies of target pcm-static; Linking CXX static library ../lib/libpcm.a; Linking CXX shared library ../lib/libpcm.so; [100%] Built target pcm-static; ld: cannot find -lstdc++; make[5]: *** [lib/libpcm.so.1] Error 1; make[4]: *** [src/CMakeFiles/pcm-shared.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-build] Error 2; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I know @robertodr has been working on building both `.a`/`.so` so the missing library is probably a result of those changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170794065
https://github.com/psi4/psi4/issues/207#issuecomment-170794065:304,Integrability,depend,dependencies,304,"Thought I had, as this was the compilation including chemps2 and pcmsolver that I had working on Friday, but you're right, `git submodule update --init --recursive` changed the compilation. Now have the below:. ``` bash; [100%] Built target pcm-base; Scanning dependencies of target pcm-shared; Scanning dependencies of target pcm-static; Linking CXX static library ../lib/libpcm.a; Linking CXX shared library ../lib/libpcm.so; [100%] Built target pcm-static; ld: cannot find -lstdc++; make[5]: *** [lib/libpcm.so.1] Error 1; make[4]: *** [src/CMakeFiles/pcm-shared.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-build] Error 2; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I know @robertodr has been working on building both `.a`/`.so` so the missing library is probably a result of those changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170794065
https://github.com/psi4/psi4/issues/207#issuecomment-170794065:626,Integrability,interface,interfaces,626,"Thought I had, as this was the compilation including chemps2 and pcmsolver that I had working on Friday, but you're right, `git submodule update --init --recursive` changed the compilation. Now have the below:. ``` bash; [100%] Built target pcm-base; Scanning dependencies of target pcm-shared; Scanning dependencies of target pcm-static; Linking CXX static library ../lib/libpcm.a; Linking CXX shared library ../lib/libpcm.so; [100%] Built target pcm-static; ld: cannot find -lstdc++; make[5]: *** [lib/libpcm.so.1] Error 1; make[4]: *** [src/CMakeFiles/pcm-shared.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-build] Error 2; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I know @robertodr has been working on building both `.a`/`.so` so the missing library is probably a result of those changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170794065
https://github.com/psi4/psi4/issues/207#issuecomment-170844312:265,Integrability,interface,interfaces,265,"@loriab @fevangelista @kannon92 Yes, I have been working on building both static **and** shared libraries for the PCM module and that's the root of your troubles.; @loriab commit psi4/psi4@f798b4f1b should fix your problem.; @fevangelista what is the output of `nm interfaces/lib/libpcm.so | grep Getkw`? Are you doing a fresh build? I suspect the Makefiles generated by CMake might be stale and try to link against the static `libpcm.a` which doesn't have Getkw or Zlib linked in. You might try to clean up your cache or better still, re-run the setup script and re-build from scratch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170844312
https://github.com/psi4/psi4/issues/207#issuecomment-170844312:513,Performance,cache,cache,513,"@loriab @fevangelista @kannon92 Yes, I have been working on building both static **and** shared libraries for the PCM module and that's the root of your troubles.; @loriab commit psi4/psi4@f798b4f1b should fix your problem.; @fevangelista what is the output of `nm interfaces/lib/libpcm.so | grep Getkw`? Are you doing a fresh build? I suspect the Makefiles generated by CMake might be stale and try to link against the static `libpcm.a` which doesn't have Getkw or Zlib linked in. You might try to clean up your cache or better still, re-run the setup script and re-build from scratch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170844312
https://github.com/psi4/psi4/issues/207#issuecomment-171058175:40,Integrability,interface,interfaces,40,"Roberto, I could not find libpcm.so in /interfaces/lib. If I ran nm on all files I get:. ```; interfaces/lib/libgetkw.a(Getkw.cpp.o):; 000000000000eb18 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE10BOOL_ARRAY; 000000000000ea58 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3DBL; 000000000000ea38 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3INT; 000000000000ea98 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3STR; 000000000000ea78 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE4BOOL; 000000000000eab8 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE4DATA; 000000000000eaf8 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE9DBL_ARRAY; 000000000000ead8 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE9INT_ARRAY; 000000000000eb38 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE9STR_ARRAY; 000000000000ea18 b __ZGVZN5Getkw8readlineERNSt3__113basic_istreamIcNS0_11char_traitsIcEEEERNS0_19basic_istringstreamIcS3_NS0_9allocatorIcEEEEE3buf; U __ZN10GetkwErrorC1ERNSt3__119basic_ostringstreamIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE; U __ZN10GetkwErrorD1Ev; 0000000000001e90 T __ZN5Getkw10popSectionEv; 0000000000001640 T __ZN5Getkw10setVerboseEb; 0000000000001a80 T __ZN5Getkw11pushSectionERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE; 0000000000002110 T __ZN5Getkw7readKeyEP7SectionRNSt3__113basic_istreamIcNS2_11char_traitsIcEEEE; 00000000000020d0 T __ZN5Getkw8convBoolERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE; 0000000000003af0 T __ZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE; 00000000000009a0 T __ZN5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171058175
https://github.com/psi4/psi4/issues/207#issuecomment-171058175:94,Integrability,interface,interfaces,94,"Roberto, I could not find libpcm.so in /interfaces/lib. If I ran nm on all files I get:. ```; interfaces/lib/libgetkw.a(Getkw.cpp.o):; 000000000000eb18 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE10BOOL_ARRAY; 000000000000ea58 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3DBL; 000000000000ea38 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3INT; 000000000000ea98 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3STR; 000000000000ea78 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE4BOOL; 000000000000eab8 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE4DATA; 000000000000eaf8 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE9DBL_ARRAY; 000000000000ead8 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE9INT_ARRAY; 000000000000eb38 b __ZGVZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE9STR_ARRAY; 000000000000ea18 b __ZGVZN5Getkw8readlineERNSt3__113basic_istreamIcNS0_11char_traitsIcEEEERNS0_19basic_istringstreamIcS3_NS0_9allocatorIcEEEEE3buf; U __ZN10GetkwErrorC1ERNSt3__119basic_ostringstreamIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE; U __ZN10GetkwErrorD1Ev; 0000000000001e90 T __ZN5Getkw10popSectionEv; 0000000000001640 T __ZN5Getkw10setVerboseEb; 0000000000001a80 T __ZN5Getkw11pushSectionERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE; 0000000000002110 T __ZN5Getkw7readKeyEP7SectionRNSt3__113basic_istreamIcNS2_11char_traitsIcEEEE; 00000000000020d0 T __ZN5Getkw8convBoolERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE; 0000000000003af0 T __ZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE; 00000000000009a0 T __ZN5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171058175
https://github.com/psi4/psi4/issues/207#issuecomment-171058175:5253,Integrability,interface,interfaces,5253,etkw3getINSt3__16vectorIiNS1_9allocatorIiEEEEEERKT_RKNS1_12basic_stringIcNS1_11char_traitsIcEENS3_IcEEEE; 0000000000005e10 S __ZNK5Getkw3getIbEERKT_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE; 00000000000060f0 S __ZNK5Getkw3getIdEERKT_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE; 0000000000005b30 S __ZNK5Getkw3getIiEERKT_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE; 00000000000016f0 T __ZNK5Getkw4reprERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEE; 0000000000001650 T __ZNK5Getkw5printEv; 00000000000017a0 T __ZNK5Getkw7getSectERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE; U __ZTI10GetkwError; 000000000000bd10 S __ZTI5Getkw; 000000000000c7f8 S __ZTS5Getkw; 000000000000bcf0 S __ZTV5Getkw; 000000000000eb00 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE10BOOL_ARRAY; 000000000000ea40 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3DBL; 000000000000ea20 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3INT; 000000000000ea80 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3STR; 000000000000ea60 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE4BOOL; 000000000000eaa0 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE4DATA; 000000000000eae0 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE9DBL_ARRAY; 000000000000eac0 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE9INT_ARRAY; 000000000000eb20 b __ZZN5Getkw8convKindERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE9STR_ARRAY; 000000000000ea00 b __ZZN5Getkw8readlineERNSt3__113basic_istreamIcNS0_11char_traitsIcEEEERNS0_19basic_istringstreamIcS3_NS0_9allocatorIcEEEEE3buf; interfaces/lib/libgetkw.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171058175
https://github.com/psi4/psi4/issues/207#issuecomment-171060415:26,Testability,log,log,26,What's the result of `git log -1 HEAD`? That is which commit are you building?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171060415
https://github.com/psi4/psi4/issues/207#issuecomment-171076595:23,Testability,log,log,23,@robertodr : I ran git log but was confused by the output. I am trying to clone the repo and compile again.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171076595
https://github.com/psi4/psi4/issues/207#issuecomment-171081034:2047,Availability,error,error,2047," 16:02:12 2016 -0500. ROHF Gradient: DIIS error_vectors really should be orthonormal, fixes #120; ```. and get. ```; /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.45:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxsph_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.55:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxvert_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.50:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxcoor' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.34:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxnew' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_pcmdef.h:25.39:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:47:. INTEGER MXTS, MXSP, MXTSPT, MXVER; 1; Warning: Unused parameter 'mxver' declared at (1); [ 94%] Built target pcm-base; Scanning dependencies of target pcm-shared; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol(s) not found for architecture x86_64; clang: error: linker command failed with exit code 1 (use -v to see invocation); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171081034
https://github.com/psi4/psi4/issues/207#issuecomment-171081034:270,Integrability,interface,interfaces,270,"Ok, now I am on . ```; commit 35ed00607bd31a3fe5668ce6f1aae70c9c28b436; Author: dgasmith <malorian@me.com>; Date: Tue Jan 12 16:02:12 2016 -0500. ROHF Gradient: DIIS error_vectors really should be orthonormal, fixes #120; ```. and get. ```; /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.45:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxsph_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.55:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxvert_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.50:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxcoor' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.34:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxnew' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_pcmdef.h:25.39:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:47:. INTEGER MXTS, MXSP, MXTSPT, MXVER; 1; Warning: Unused parameter 'mxver' declared at (1); [ 94%] Built target pcm-base; Scanning dependencies of target pcm-shared; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171081034
https://github.com/psi4/psi4/issues/207#issuecomment-171081034:477,Integrability,interface,interfaces,477,"Ok, now I am on . ```; commit 35ed00607bd31a3fe5668ce6f1aae70c9c28b436; Author: dgasmith <malorian@me.com>; Date: Tue Jan 12 16:02:12 2016 -0500. ROHF Gradient: DIIS error_vectors really should be orthonormal, fixes #120; ```. and get. ```; /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.45:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxsph_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.55:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxvert_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.50:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxcoor' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.34:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxnew' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_pcmdef.h:25.39:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:47:. INTEGER MXTS, MXSP, MXTSPT, MXVER; 1; Warning: Unused parameter 'mxver' declared at (1); [ 94%] Built target pcm-base; Scanning dependencies of target pcm-shared; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171081034
https://github.com/psi4/psi4/issues/207#issuecomment-171081034:685,Integrability,interface,interfaces,685,"Ok, now I am on . ```; commit 35ed00607bd31a3fe5668ce6f1aae70c9c28b436; Author: dgasmith <malorian@me.com>; Date: Tue Jan 12 16:02:12 2016 -0500. ROHF Gradient: DIIS error_vectors really should be orthonormal, fixes #120; ```. and get. ```; /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.45:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxsph_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.55:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxvert_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.50:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxcoor' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.34:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxnew' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_pcmdef.h:25.39:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:47:. INTEGER MXTS, MXSP, MXTSPT, MXVER; 1; Warning: Unused parameter 'mxver' declared at (1); [ 94%] Built target pcm-base; Scanning dependencies of target pcm-shared; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171081034
https://github.com/psi4/psi4/issues/207#issuecomment-171081034:778,Integrability,interface,interfaces,778,"Ok, now I am on . ```; commit 35ed00607bd31a3fe5668ce6f1aae70c9c28b436; Author: dgasmith <malorian@me.com>; Date: Tue Jan 12 16:02:12 2016 -0500. ROHF Gradient: DIIS error_vectors really should be orthonormal, fixes #120; ```. and get. ```; /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.45:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxsph_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.55:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxvert_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.50:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxcoor' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.34:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxnew' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_pcmdef.h:25.39:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:47:. INTEGER MXTS, MXSP, MXTSPT, MXVER; 1; Warning: Unused parameter 'mxver' declared at (1); [ 94%] Built target pcm-base; Scanning dependencies of target pcm-shared; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171081034
https://github.com/psi4/psi4/issues/207#issuecomment-171081034:971,Integrability,interface,interfaces,971,"Ok, now I am on . ```; commit 35ed00607bd31a3fe5668ce6f1aae70c9c28b436; Author: dgasmith <malorian@me.com>; Date: Tue Jan 12 16:02:12 2016 -0500. ROHF Gradient: DIIS error_vectors really should be orthonormal, fixes #120; ```. and get. ```; /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.45:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxsph_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.55:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxvert_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.50:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxcoor' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.34:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxnew' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_pcmdef.h:25.39:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:47:. INTEGER MXTS, MXSP, MXTSPT, MXVER; 1; Warning: Unused parameter 'mxver' declared at (1); [ 94%] Built target pcm-base; Scanning dependencies of target pcm-shared; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171081034
https://github.com/psi4/psi4/issues/207#issuecomment-171081034:1064,Integrability,interface,interfaces,1064,"36; Author: dgasmith <malorian@me.com>; Date: Tue Jan 12 16:02:12 2016 -0500. ROHF Gradient: DIIS error_vectors really should be orthonormal, fixes #120; ```. and get. ```; /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.45:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxsph_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.55:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxvert_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.50:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxcoor' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.34:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxnew' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_pcmdef.h:25.39:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:47:. INTEGER MXTS, MXSP, MXTSPT, MXVER; 1; Warning: Unused parameter 'mxver' declared at (1); [ 94%] Built target pcm-base; Scanning dependencies of target pcm-shared; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol(s) not found for architecture x86_64; clang: error: linker command",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171081034
https://github.com/psi4/psi4/issues/207#issuecomment-171081034:1256,Integrability,interface,interfaces,1256," 16:02:12 2016 -0500. ROHF Gradient: DIIS error_vectors really should be orthonormal, fixes #120; ```. and get. ```; /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.45:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxsph_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.55:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxvert_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.50:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxcoor' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.34:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxnew' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_pcmdef.h:25.39:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:47:. INTEGER MXTS, MXSP, MXTSPT, MXVER; 1; Warning: Unused parameter 'mxver' declared at (1); [ 94%] Built target pcm-base; Scanning dependencies of target pcm-shared; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol(s) not found for architecture x86_64; clang: error: linker command failed with exit code 1 (use -v to see invocation); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171081034
https://github.com/psi4/psi4/issues/207#issuecomment-171081034:1349,Integrability,interface,interfaces,1349," 16:02:12 2016 -0500. ROHF Gradient: DIIS error_vectors really should be orthonormal, fixes #120; ```. and get. ```; /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.45:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxsph_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.55:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxvert_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.50:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxcoor' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.34:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxnew' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_pcmdef.h:25.39:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:47:. INTEGER MXTS, MXSP, MXTSPT, MXVER; 1; Warning: Unused parameter 'mxver' declared at (1); [ 94%] Built target pcm-base; Scanning dependencies of target pcm-shared; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol(s) not found for architecture x86_64; clang: error: linker command failed with exit code 1 (use -v to see invocation); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171081034
https://github.com/psi4/psi4/issues/207#issuecomment-171081034:1540,Integrability,depend,dependencies,1540," 16:02:12 2016 -0500. ROHF Gradient: DIIS error_vectors really should be orthonormal, fixes #120; ```. and get. ```; /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.45:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxsph_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.55:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxvert_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.50:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxcoor' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.34:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxnew' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_pcmdef.h:25.39:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:47:. INTEGER MXTS, MXSP, MXTSPT, MXVER; 1; Warning: Unused parameter 'mxver' declared at (1); [ 94%] Built target pcm-base; Scanning dependencies of target pcm-shared; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol(s) not found for architecture x86_64; clang: error: linker command failed with exit code 1 (use -v to see invocation); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171081034
https://github.com/psi4/psi4/issues/207#issuecomment-171085200:156,Deployability,update,update,156,"OK, my bad. I checked in this fix for this problem in the library own repository PCMSolver/pcmsolver@affeac5528b4e31d76c2c5a7b2777afe39e57c5d but forgot to update the version in Psi4... I'll do it in a minute.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171085200
https://github.com/psi4/psi4/issues/207#issuecomment-171104138:202,Security,authoriz,authorized,202,@fevangelista psi4/psi4@c8b3767e76e4e76c54dec2004b961025fac1afa6 hopefully fixes your troubles. @loriab I do not unfortunately know what's the procedure for the private/public sync (I might not even be authorized to do it),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171104138
https://github.com/psi4/psi4/issues/207#issuecomment-171380307:39,Availability,error,error,39,"@robertodr we are making progress. The error has now morphed to:. ```; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol(s) not found for architecture x86_64; clang: error: linker command failed with exit code 1 (use -v to see invocation); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171380307
https://github.com/psi4/psi4/issues/207#issuecomment-171380307:543,Availability,error,error,543,"@robertodr we are making progress. The error has now morphed to:. ```; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol(s) not found for architecture x86_64; clang: error: linker command failed with exit code 1 (use -v to see invocation); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171380307
https://github.com/psi4/psi4/issues/207#issuecomment-171439294:127,Integrability,interface,interfaces,127,"@fevangelista which OS X version are you on? Which compilers are you using? Which versions?; Could you post the output of `cat interfaces/pcmsolver/cmake/custom/rpath.cmake`?; The problem arises because the `host_writer` function is not defined inside the module, since it depends on the host program. Creating a shared library with undefined symbols is not a problem on Linux, but trips up the linker on OS X.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171439294
https://github.com/psi4/psi4/issues/207#issuecomment-171439294:273,Integrability,depend,depends,273,"@fevangelista which OS X version are you on? Which compilers are you using? Which versions?; Could you post the output of `cat interfaces/pcmsolver/cmake/custom/rpath.cmake`?; The problem arises because the `host_writer` function is not defined inside the module, since it depends on the host program. Creating a shared library with undefined symbols is not a problem on Linux, but trips up the linker on OS X.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171439294
https://github.com/psi4/psi4/issues/207#issuecomment-171441011:523,Integrability,interface,interfaces,523,"@robertodr I am using the default compiler that ships with OS X El Capitan (`llvm-gcc`, and `llvm-g++`) version:. ```; Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1; Apple LLVM version 7.0.0 (clang-700.1.76); Target: x86_64-apple-darwin15.2.0; Thread model: posix; ```. For fortran I use `gfortran-4.9`:. ```; GNU Fortran (Homebrew gcc49 4.9.3 --with-fortran) 4.9.3; Copyright (C) 2015 Free Software Foundation, Inc.; ```. Here is the output of `cat interfaces/pcmsolver/cmake/custom/rpath.cmake`:. ```; if(APPLE); if(NOT DEFINED CMAKE_MACOSX_RPATH); set(CMAKE_MACOSX_RPATH ON); endif(); endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171441011
https://github.com/psi4/psi4/issues/207#issuecomment-171441011:119,Modifiability,Config,Configured,119,"@robertodr I am using the default compiler that ships with OS X El Capitan (`llvm-gcc`, and `llvm-g++`) version:. ```; Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1; Apple LLVM version 7.0.0 (clang-700.1.76); Target: x86_64-apple-darwin15.2.0; Thread model: posix; ```. For fortran I use `gfortran-4.9`:. ```; GNU Fortran (Homebrew gcc49 4.9.3 --with-fortran) 4.9.3; Copyright (C) 2015 Free Software Foundation, Inc.; ```. Here is the output of `cat interfaces/pcmsolver/cmake/custom/rpath.cmake`:. ```; if(APPLE); if(NOT DEFINED CMAKE_MACOSX_RPATH); set(CMAKE_MACOSX_RPATH ON); endif(); endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171441011
https://github.com/psi4/psi4/issues/207#issuecomment-171442967:51,Deployability,update,update,51,@fevangelista A-ha! You did not run `git submodule update --init --recursive` your submodule is still pointing to the previous revision of the PCM module. ; I wrote some notes on the workflow when submodules are involved [here](https://github.com/psi4/psi4public/wiki/External-subprojects-using-Git-and-CMake),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171442967
https://github.com/psi4/psi4/issues/209#issuecomment-200522653:144,Deployability,upgrade,upgrade,144,"Intel 16.0.2 compilers with MKL 11.3.2 seems to work fine on the i7-5930 with parallel enabled. Not sure whether it was the compiler or the MKL upgrade that fixed it, but either way, I can run my calculations again. Yay. I'm going to chock this up to a compiler bug and close the issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/209#issuecomment-200522653
https://github.com/psi4/psi4/issues/211#issuecomment-171564200:413,Energy Efficiency,energy,energy,413,"I have seen this before (for this exact system) - the SAD guess converges; to the correct root, but Core does not. Not really much more to it than; that. -Rob. On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; notifications@github.com> wrote:. > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > gives very different energies.; > The following input with the core guess gives a total energy of; > -75.5488580481183476; > ; > memory 250 mb; > molecule h2o {; > symmetry c1; > 1 2; > O 0.0000000000 0.0000000000 -0.2249058930; > H 1.4523499293 0.0000000000 0.8996235720; > H -1.4523499293 0.0000000000 0.8996235720; > units bohr; > no_reorient; > no_com; > }; > ; > set {; > basis cc-pVDZ; > scf_type direct; > guess core; > reference uhf; > e_convergence 7; > d_convergence 7; > }; > ; > energy_scf1 = energy('scf'); > ; > while this input with the SAD guess gives a total energy of; > -75.6330881795159655; > ; > memory 250 mb; > molecule h2o {; > symmetry c1; > 1 2; > O 0.0000000000 0.0000000000 -0.2249058930; > H 1.4523499293 0.0000000000 0.8996235720; > H -1.4523499293 0.0000000000 0.8996235720; > units bohr; > no_reorient; > no_com; > }; > ; > set {; > basis cc-pVDZ; > scf_type direct; > guess sad; > reference uhf; > e_convergence 7; > d_convergence 7; > }; > ; > energy_scf1 = energy('scf'); > ; > Of course, the initial guess has always a huge impact on the calculation,; > but is the reported difference reasonable for a system as small as H2O+?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/211.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171564200
https://github.com/psi4/psi4/issues/211#issuecomment-171564200:830,Energy Efficiency,energy,energy,830,"I have seen this before (for this exact system) - the SAD guess converges; to the correct root, but Core does not. Not really much more to it than; that. -Rob. On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; notifications@github.com> wrote:. > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > gives very different energies.; > The following input with the core guess gives a total energy of; > -75.5488580481183476; > ; > memory 250 mb; > molecule h2o {; > symmetry c1; > 1 2; > O 0.0000000000 0.0000000000 -0.2249058930; > H 1.4523499293 0.0000000000 0.8996235720; > H -1.4523499293 0.0000000000 0.8996235720; > units bohr; > no_reorient; > no_com; > }; > ; > set {; > basis cc-pVDZ; > scf_type direct; > guess core; > reference uhf; > e_convergence 7; > d_convergence 7; > }; > ; > energy_scf1 = energy('scf'); > ; > while this input with the SAD guess gives a total energy of; > -75.6330881795159655; > ; > memory 250 mb; > molecule h2o {; > symmetry c1; > 1 2; > O 0.0000000000 0.0000000000 -0.2249058930; > H 1.4523499293 0.0000000000 0.8996235720; > H -1.4523499293 0.0000000000 0.8996235720; > units bohr; > no_reorient; > no_com; > }; > ; > set {; > basis cc-pVDZ; > scf_type direct; > guess sad; > reference uhf; > e_convergence 7; > d_convergence 7; > }; > ; > energy_scf1 = energy('scf'); > ; > Of course, the initial guess has always a huge impact on the calculation,; > but is the reported difference reasonable for a system as small as H2O+?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/211.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171564200
https://github.com/psi4/psi4/issues/211#issuecomment-171564200:901,Energy Efficiency,energy,energy,901,"I have seen this before (for this exact system) - the SAD guess converges; to the correct root, but Core does not. Not really much more to it than; that. -Rob. On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; notifications@github.com> wrote:. > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > gives very different energies.; > The following input with the core guess gives a total energy of; > -75.5488580481183476; > ; > memory 250 mb; > molecule h2o {; > symmetry c1; > 1 2; > O 0.0000000000 0.0000000000 -0.2249058930; > H 1.4523499293 0.0000000000 0.8996235720; > H -1.4523499293 0.0000000000 0.8996235720; > units bohr; > no_reorient; > no_com; > }; > ; > set {; > basis cc-pVDZ; > scf_type direct; > guess core; > reference uhf; > e_convergence 7; > d_convergence 7; > }; > ; > energy_scf1 = energy('scf'); > ; > while this input with the SAD guess gives a total energy of; > -75.6330881795159655; > ; > memory 250 mb; > molecule h2o {; > symmetry c1; > 1 2; > O 0.0000000000 0.0000000000 -0.2249058930; > H 1.4523499293 0.0000000000 0.8996235720; > H -1.4523499293 0.0000000000 0.8996235720; > units bohr; > no_reorient; > no_com; > }; > ; > set {; > basis cc-pVDZ; > scf_type direct; > guess sad; > reference uhf; > e_convergence 7; > d_convergence 7; > }; > ; > energy_scf1 = energy('scf'); > ; > Of course, the initial guess has always a huge impact on the calculation,; > but is the reported difference reasonable for a system as small as H2O+?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/211.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171564200
https://github.com/psi4/psi4/issues/211#issuecomment-171564200:1317,Energy Efficiency,energy,energy,1317,"I have seen this before (for this exact system) - the SAD guess converges; to the correct root, but Core does not. Not really much more to it than; that. -Rob. On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; notifications@github.com> wrote:. > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > gives very different energies.; > The following input with the core guess gives a total energy of; > -75.5488580481183476; > ; > memory 250 mb; > molecule h2o {; > symmetry c1; > 1 2; > O 0.0000000000 0.0000000000 -0.2249058930; > H 1.4523499293 0.0000000000 0.8996235720; > H -1.4523499293 0.0000000000 0.8996235720; > units bohr; > no_reorient; > no_com; > }; > ; > set {; > basis cc-pVDZ; > scf_type direct; > guess core; > reference uhf; > e_convergence 7; > d_convergence 7; > }; > ; > energy_scf1 = energy('scf'); > ; > while this input with the SAD guess gives a total energy of; > -75.6330881795159655; > ; > memory 250 mb; > molecule h2o {; > symmetry c1; > 1 2; > O 0.0000000000 0.0000000000 -0.2249058930; > H 1.4523499293 0.0000000000 0.8996235720; > H -1.4523499293 0.0000000000 0.8996235720; > units bohr; > no_reorient; > no_com; > }; > ; > set {; > basis cc-pVDZ; > scf_type direct; > guess sad; > reference uhf; > e_convergence 7; > d_convergence 7; > }; > ; > energy_scf1 = energy('scf'); > ; > Of course, the initial guess has always a huge impact on the calculation,; > but is the reported difference reasonable for a system as small as H2O+?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/211.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171564200
https://github.com/psi4/psi4/issues/211#issuecomment-171646769:165,Energy Efficiency,energy,energy,165,"Are both solutions stable ? For UHF computations, it seems to me always; more safe to do a stability analysis. In some cases, it allowed me to; eliminate the higher energy solution as unstable. However, in other cases, both solutions are actually SCF minima... Trying; with different guesses then seems the only way to find the lowest energy; solution. 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:. > I have seen this before (for this exact system) - the SAD guess converges; > to the correct root, but Core does not. Not really much more to it than; > that.; > ; > -Rob; > ; > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > notifications@github.com> wrote:; > ; > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > gives very different energies.; > > The following input with the core guess gives a total energy of; > > -75.5488580481183476; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess core; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > while this input with the SAD guess gives a total energy of; > > -75.6330881795159655; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess sad; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > Of course, the initial guess has always a huge impact on the calculation,; > > but is the reported difference ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171646769
https://github.com/psi4/psi4/issues/211#issuecomment-171646769:335,Energy Efficiency,energy,energy,335,"Are both solutions stable ? For UHF computations, it seems to me always; more safe to do a stability analysis. In some cases, it allowed me to; eliminate the higher energy solution as unstable. However, in other cases, both solutions are actually SCF minima... Trying; with different guesses then seems the only way to find the lowest energy; solution. 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:. > I have seen this before (for this exact system) - the SAD guess converges; > to the correct root, but Core does not. Not really much more to it than; > that.; > ; > -Rob; > ; > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > notifications@github.com> wrote:; > ; > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > gives very different energies.; > > The following input with the core guess gives a total energy of; > > -75.5488580481183476; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess core; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > while this input with the SAD guess gives a total energy of; > > -75.6330881795159655; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess sad; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > Of course, the initial guess has always a huge impact on the calculation,; > > but is the reported difference ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171646769
https://github.com/psi4/psi4/issues/211#issuecomment-171646769:862,Energy Efficiency,energy,energy,862,"Are both solutions stable ? For UHF computations, it seems to me always; more safe to do a stability analysis. In some cases, it allowed me to; eliminate the higher energy solution as unstable. However, in other cases, both solutions are actually SCF minima... Trying; with different guesses then seems the only way to find the lowest energy; solution. 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:. > I have seen this before (for this exact system) - the SAD guess converges; > to the correct root, but Core does not. Not really much more to it than; > that.; > ; > -Rob; > ; > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > notifications@github.com> wrote:; > ; > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > gives very different energies.; > > The following input with the core guess gives a total energy of; > > -75.5488580481183476; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess core; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > while this input with the SAD guess gives a total energy of; > > -75.6330881795159655; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess sad; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > Of course, the initial guess has always a huge impact on the calculation,; > > but is the reported difference ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171646769
https://github.com/psi4/psi4/issues/211#issuecomment-171646769:1327,Energy Efficiency,energy,energy,1327,". Trying; with different guesses then seems the only way to find the lowest energy; solution. 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:. > I have seen this before (for this exact system) - the SAD guess converges; > to the correct root, but Core does not. Not really much more to it than; > that.; > ; > -Rob; > ; > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > notifications@github.com> wrote:; > ; > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > gives very different energies.; > > The following input with the core guess gives a total energy of; > > -75.5488580481183476; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess core; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > while this input with the SAD guess gives a total energy of; > > -75.6330881795159655; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess sad; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > Of course, the initial guess has always a huge impact on the calculation,; > > but is the reported difference reasonable for a system as small as H2O+?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/211.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4publ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171646769
https://github.com/psi4/psi4/issues/211#issuecomment-171646769:1402,Energy Efficiency,energy,energy,1402,". Trying; with different guesses then seems the only way to find the lowest energy; solution. 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:. > I have seen this before (for this exact system) - the SAD guess converges; > to the correct root, but Core does not. Not really much more to it than; > that.; > ; > -Rob; > ; > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > notifications@github.com> wrote:; > ; > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > gives very different energies.; > > The following input with the core guess gives a total energy of; > > -75.5488580481183476; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess core; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > while this input with the SAD guess gives a total energy of; > > -75.6330881795159655; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess sad; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > Of course, the initial guess has always a huge impact on the calculation,; > > but is the reported difference reasonable for a system as small as H2O+?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/211.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4publ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171646769
https://github.com/psi4/psi4/issues/211#issuecomment-171646769:1866,Energy Efficiency,energy,energy,1866,"seems the only way to find the lowest energy; solution. 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:. > I have seen this before (for this exact system) - the SAD guess converges; > to the correct root, but Core does not. Not really much more to it than; > that.; > ; > -Rob; > ; > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > notifications@github.com> wrote:; > ; > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > gives very different energies.; > > The following input with the core guess gives a total energy of; > > -75.5488580481183476; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess core; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > while this input with the SAD guess gives a total energy of; > > -75.6330881795159655; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess sad; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > Of course, the initial guess has always a huge impact on the calculation,; > > but is the reported difference reasonable for a system as small as H2O+?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/211.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/211#issuecomment-171564200.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171646769
https://github.com/psi4/psi4/issues/211#issuecomment-171646769:78,Safety,safe,safe,78,"Are both solutions stable ? For UHF computations, it seems to me always; more safe to do a stability analysis. In some cases, it allowed me to; eliminate the higher energy solution as unstable. However, in other cases, both solutions are actually SCF minima... Trying; with different guesses then seems the only way to find the lowest energy; solution. 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:. > I have seen this before (for this exact system) - the SAD guess converges; > to the correct root, but Core does not. Not really much more to it than; > that.; > ; > -Rob; > ; > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > notifications@github.com> wrote:; > ; > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > gives very different energies.; > > The following input with the core guess gives a total energy of; > > -75.5488580481183476; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess core; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > while this input with the SAD guess gives a total energy of; > > -75.6330881795159655; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess sad; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > Of course, the initial guess has always a huge impact on the calculation,; > > but is the reported difference ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171646769
https://github.com/psi4/psi4/issues/211#issuecomment-171648923:394,Energy Efficiency,energy,energy,394,"It is perhaps noteworthy that certain other codes converge this case even; with a core guess. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Jan 14, 2016 at 8:38 AM, jgonthier notifications@github.com wrote:. > Are both solutions stable ? For UHF computations, it seems to me always; > more safe to do a stability analysis. In some cases, it allowed me to; > eliminate the higher energy solution as unstable.; > ; > However, in other cases, both solutions are actually SCF minima... Trying; > with different guesses then seems the only way to find the lowest energy; > solution.; > ; > 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:; > ; > > I have seen this before (for this exact system) - the SAD guess converges; > > to the correct root, but Core does not. Not really much more to it than; > > that.; > > ; > > -Rob; > > ; > > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > > notifications@github.com> wrote:; > > ; > > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > > gives very different energies.; > > > The following input with the core guess gives a total energy of; > > > -75.5488580481183476; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direct; > > > guess core; > > > reference uhf; > > > e_convergence 7; > > > d_convergence 7; > > > }; > > > ; > > > energy_scf1 = energy('scf'); > > > ; > > > while this input with the SAD guess gives a total energy of; > > > -75.6330881795159655; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171648923
https://github.com/psi4/psi4/issues/211#issuecomment-171648923:573,Energy Efficiency,energy,energy,573,"It is perhaps noteworthy that certain other codes converge this case even; with a core guess. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Jan 14, 2016 at 8:38 AM, jgonthier notifications@github.com wrote:. > Are both solutions stable ? For UHF computations, it seems to me always; > more safe to do a stability analysis. In some cases, it allowed me to; > eliminate the higher energy solution as unstable.; > ; > However, in other cases, both solutions are actually SCF minima... Trying; > with different guesses then seems the only way to find the lowest energy; > solution.; > ; > 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:; > ; > > I have seen this before (for this exact system) - the SAD guess converges; > > to the correct root, but Core does not. Not really much more to it than; > > that.; > > ; > > -Rob; > > ; > > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > > notifications@github.com> wrote:; > > ; > > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > > gives very different energies.; > > > The following input with the core guess gives a total energy of; > > > -75.5488580481183476; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direct; > > > guess core; > > > reference uhf; > > > e_convergence 7; > > > d_convergence 7; > > > }; > > > ; > > > energy_scf1 = energy('scf'); > > > ; > > > while this input with the SAD guess gives a total energy of; > > > -75.6330881795159655; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171648923
https://github.com/psi4/psi4/issues/211#issuecomment-171648923:1137,Energy Efficiency,energy,energy,1137,"niel Crawford; crawdad@vt.edu. On Thu, Jan 14, 2016 at 8:38 AM, jgonthier notifications@github.com wrote:. > Are both solutions stable ? For UHF computations, it seems to me always; > more safe to do a stability analysis. In some cases, it allowed me to; > eliminate the higher energy solution as unstable.; > ; > However, in other cases, both solutions are actually SCF minima... Trying; > with different guesses then seems the only way to find the lowest energy; > solution.; > ; > 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:; > ; > > I have seen this before (for this exact system) - the SAD guess converges; > > to the correct root, but Core does not. Not really much more to it than; > > that.; > > ; > > -Rob; > > ; > > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > > notifications@github.com> wrote:; > > ; > > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > > gives very different energies.; > > > The following input with the core guess gives a total energy of; > > > -75.5488580481183476; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direct; > > > guess core; > > > reference uhf; > > > e_convergence 7; > > > d_convergence 7; > > > }; > > > ; > > > energy_scf1 = energy('scf'); > > > ; > > > while this input with the SAD guess gives a total energy of; > > > -75.6330881795159655; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171648923
https://github.com/psi4/psi4/issues/211#issuecomment-171648923:1650,Energy Efficiency,energy,energy,1650,"st energy; > solution.; > ; > 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:; > ; > > I have seen this before (for this exact system) - the SAD guess converges; > > to the correct root, but Core does not. Not really much more to it than; > > that.; > > ; > > -Rob; > > ; > > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > > notifications@github.com> wrote:; > > ; > > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > > gives very different energies.; > > > The following input with the core guess gives a total energy of; > > > -75.5488580481183476; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direct; > > > guess core; > > > reference uhf; > > > e_convergence 7; > > > d_convergence 7; > > > }; > > > ; > > > energy_scf1 = energy('scf'); > > > ; > > > while this input with the SAD guess gives a total energy of; > > > -75.6330881795159655; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direct; > > > guess sad; > > > reference uhf; > > > e_convergence 7; > > > d_convergence 7; > > > }; > > > ; > > > energy_scf1 = energy('scf'); > > > ; > > > Of course, the initial guess has always a huge impact on the; > > > calculation,; > > > but is the reported difference reasonable for a system as small as; > > > H2O+?; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4public/issues/211.; > > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171648923
https://github.com/psi4/psi4/issues/211#issuecomment-171648923:1729,Energy Efficiency,energy,energy,1729,"st energy; > solution.; > ; > 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:; > ; > > I have seen this before (for this exact system) - the SAD guess converges; > > to the correct root, but Core does not. Not really much more to it than; > > that.; > > ; > > -Rob; > > ; > > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > > notifications@github.com> wrote:; > > ; > > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > > gives very different energies.; > > > The following input with the core guess gives a total energy of; > > > -75.5488580481183476; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direct; > > > guess core; > > > reference uhf; > > > e_convergence 7; > > > d_convergence 7; > > > }; > > > ; > > > energy_scf1 = energy('scf'); > > > ; > > > while this input with the SAD guess gives a total energy of; > > > -75.6330881795159655; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direct; > > > guess sad; > > > reference uhf; > > > e_convergence 7; > > > d_convergence 7; > > > }; > > > ; > > > energy_scf1 = energy('scf'); > > > ; > > > Of course, the initial guess has always a huge impact on the; > > > calculation,; > > > but is the reported difference reasonable for a system as small as; > > > H2O+?; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4public/issues/211.; > > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171648923
https://github.com/psi4/psi4/issues/211#issuecomment-171648923:2241,Energy Efficiency,energy,energy,2241," > -Rob; > > ; > > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > > notifications@github.com> wrote:; > > ; > > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > > gives very different energies.; > > > The following input with the core guess gives a total energy of; > > > -75.5488580481183476; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direct; > > > guess core; > > > reference uhf; > > > e_convergence 7; > > > d_convergence 7; > > > }; > > > ; > > > energy_scf1 = energy('scf'); > > > ; > > > while this input with the SAD guess gives a total energy of; > > > -75.6330881795159655; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direct; > > > guess sad; > > > reference uhf; > > > e_convergence 7; > > > d_convergence 7; > > > }; > > > ; > > > energy_scf1 = energy('scf'); > > > ; > > > Of course, the initial guess has always a huge impact on the; > > > calculation,; > > > but is the reported difference reasonable for a system as small as; > > > H2O+?; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4public/issues/211.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/211#issuecomment-171564200.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/211#issuecomment-171646769.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171648923
https://github.com/psi4/psi4/issues/211#issuecomment-171648923:305,Safety,safe,safe,305,"It is perhaps noteworthy that certain other codes converge this case even; with a core guess. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Jan 14, 2016 at 8:38 AM, jgonthier notifications@github.com wrote:. > Are both solutions stable ? For UHF computations, it seems to me always; > more safe to do a stability analysis. In some cases, it allowed me to; > eliminate the higher energy solution as unstable.; > ; > However, in other cases, both solutions are actually SCF minima... Trying; > with different guesses then seems the only way to find the lowest energy; > solution.; > ; > 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:; > ; > > I have seen this before (for this exact system) - the SAD guess converges; > > to the correct root, but Core does not. Not really much more to it than; > > that.; > > ; > > -Rob; > > ; > > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > > notifications@github.com> wrote:; > > ; > > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > > gives very different energies.; > > > The following input with the core guess gives a total energy of; > > > -75.5488580481183476; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direct; > > > guess core; > > > reference uhf; > > > e_convergence 7; > > > d_convergence 7; > > > }; > > > ; > > > energy_scf1 = energy('scf'); > > > ; > > > while this input with the SAD guess gives a total energy of; > > > -75.6330881795159655; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171648923
https://github.com/psi4/psi4/issues/211#issuecomment-171659792:772,Energy Efficiency,energy,energy,772,"I would add that lately we have seen a lot of problems with UHF and ROHF; converging on a wrong state for open-shells in Psi4. Although new stability; analysis code helps a lot in fixing some of the problems (for UHF), for; many of these systems finding the lowest root is quite non-trivial and is; accompanied by many SCF convergence issues, as well as symmetry-breaking; issues (UHF). Things get a lot worse for transition metal compounds (even; simple ones, like Fe(CO)5). The most helpful solution is to start with; basis set projection from a small basis, but this strategy doesn't always; work. Sometimes, combining stability analysis root search and basis set; projection helps. Indeed, other codes (particularly, MOLPRO) sometimes do better job in; finding lowest-energy solutions for systems of this type. Usually, after; investing some time, it is possible to find the necessary solution for; these non-trivial cases with Psi4, but it may be worth investigating some; of these systems for possible improvements in the code. Best wishes,. Alexander. On Thu, Jan 14, 2016 at 9:25 AM, jgonthier notifications@github.com wrote:. > @lothian https://github.com/lothian I guess these other codes are using; > some other convergence accelerator than Psi4 ? I would not be surprised if; > SOSCF with a core guess would converge on the right solution.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/211#issuecomment-171656770.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171659792
https://github.com/psi4/psi4/issues/211#issuecomment-171659792:448,Usability,simpl,simple,448,"I would add that lately we have seen a lot of problems with UHF and ROHF; converging on a wrong state for open-shells in Psi4. Although new stability; analysis code helps a lot in fixing some of the problems (for UHF), for; many of these systems finding the lowest root is quite non-trivial and is; accompanied by many SCF convergence issues, as well as symmetry-breaking; issues (UHF). Things get a lot worse for transition metal compounds (even; simple ones, like Fe(CO)5). The most helpful solution is to start with; basis set projection from a small basis, but this strategy doesn't always; work. Sometimes, combining stability analysis root search and basis set; projection helps. Indeed, other codes (particularly, MOLPRO) sometimes do better job in; finding lowest-energy solutions for systems of this type. Usually, after; investing some time, it is possible to find the necessary solution for; these non-trivial cases with Psi4, but it may be worth investigating some; of these systems for possible improvements in the code. Best wishes,. Alexander. On Thu, Jan 14, 2016 at 9:25 AM, jgonthier notifications@github.com wrote:. > @lothian https://github.com/lothian I guess these other codes are using; > some other convergence accelerator than Psi4 ? I would not be surprised if; > SOSCF with a core guess would converge on the right solution.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/211#issuecomment-171656770.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171659792
https://github.com/psi4/psi4/issues/211#issuecomment-171660919:245,Energy Efficiency,energy,energy,245,"To Jerome's point, I would agree that for UHF doing stability analysis; helps a lot. However, we have also seen cases when stability analysis; severely breaks spin symmetry and converges on the wrong (or mixed) spin; state instead of the lowest energy root of desired spin. So one should be; careful about this issue. Best wishes,. Alexander. On Thu, Jan 14, 2016 at 9:38 AM, Alexander Sokolov <; alexander.y.sokolov@gmail.com> wrote:. > I would add that lately we have seen a lot of problems with UHF and ROHF; > converging on a wrong state for open-shells in Psi4. Although new stability; > analysis code helps a lot in fixing some of the problems (for UHF), for; > many of these systems finding the lowest root is quite non-trivial and is; > accompanied by many SCF convergence issues, as well as symmetry-breaking; > issues (UHF). Things get a lot worse for transition metal compounds (even; > simple ones, like Fe(CO)5). The most helpful solution is to start with; > basis set projection from a small basis, but this strategy doesn't always; > work. Sometimes, combining stability analysis root search and basis set; > projection helps.; > ; > Indeed, other codes (particularly, MOLPRO) sometimes do better job in; > finding lowest-energy solutions for systems of this type. Usually, after; > investing some time, it is possible to find the necessary solution for; > these non-trivial cases with Psi4, but it may be worth investigating some; > of these systems for possible improvements in the code.; > ; > Best wishes,; > ; > Alexander.; > ; > On Thu, Jan 14, 2016 at 9:25 AM, jgonthier notifications@github.com; > wrote:; > ; > > @lothian https://github.com/lothian I guess these other codes are; > > using some other convergence accelerator than Psi4 ? I would not be; > > surprised if SOSCF with a core guess would converge on the right solution.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/211#issuecomment-171656770.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171660919
https://github.com/psi4/psi4/issues/211#issuecomment-171660919:1237,Energy Efficiency,energy,energy,1237,"To Jerome's point, I would agree that for UHF doing stability analysis; helps a lot. However, we have also seen cases when stability analysis; severely breaks spin symmetry and converges on the wrong (or mixed) spin; state instead of the lowest energy root of desired spin. So one should be; careful about this issue. Best wishes,. Alexander. On Thu, Jan 14, 2016 at 9:38 AM, Alexander Sokolov <; alexander.y.sokolov@gmail.com> wrote:. > I would add that lately we have seen a lot of problems with UHF and ROHF; > converging on a wrong state for open-shells in Psi4. Although new stability; > analysis code helps a lot in fixing some of the problems (for UHF), for; > many of these systems finding the lowest root is quite non-trivial and is; > accompanied by many SCF convergence issues, as well as symmetry-breaking; > issues (UHF). Things get a lot worse for transition metal compounds (even; > simple ones, like Fe(CO)5). The most helpful solution is to start with; > basis set projection from a small basis, but this strategy doesn't always; > work. Sometimes, combining stability analysis root search and basis set; > projection helps.; > ; > Indeed, other codes (particularly, MOLPRO) sometimes do better job in; > finding lowest-energy solutions for systems of this type. Usually, after; > investing some time, it is possible to find the necessary solution for; > these non-trivial cases with Psi4, but it may be worth investigating some; > of these systems for possible improvements in the code.; > ; > Best wishes,; > ; > Alexander.; > ; > On Thu, Jan 14, 2016 at 9:25 AM, jgonthier notifications@github.com; > wrote:; > ; > > @lothian https://github.com/lothian I guess these other codes are; > > using some other convergence accelerator than Psi4 ? I would not be; > > surprised if SOSCF with a core guess would converge on the right solution.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/211#issuecomment-171656770.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171660919
https://github.com/psi4/psi4/issues/211#issuecomment-171660919:898,Usability,simpl,simple,898,"To Jerome's point, I would agree that for UHF doing stability analysis; helps a lot. However, we have also seen cases when stability analysis; severely breaks spin symmetry and converges on the wrong (or mixed) spin; state instead of the lowest energy root of desired spin. So one should be; careful about this issue. Best wishes,. Alexander. On Thu, Jan 14, 2016 at 9:38 AM, Alexander Sokolov <; alexander.y.sokolov@gmail.com> wrote:. > I would add that lately we have seen a lot of problems with UHF and ROHF; > converging on a wrong state for open-shells in Psi4. Although new stability; > analysis code helps a lot in fixing some of the problems (for UHF), for; > many of these systems finding the lowest root is quite non-trivial and is; > accompanied by many SCF convergence issues, as well as symmetry-breaking; > issues (UHF). Things get a lot worse for transition metal compounds (even; > simple ones, like Fe(CO)5). The most helpful solution is to start with; > basis set projection from a small basis, but this strategy doesn't always; > work. Sometimes, combining stability analysis root search and basis set; > projection helps.; > ; > Indeed, other codes (particularly, MOLPRO) sometimes do better job in; > finding lowest-energy solutions for systems of this type. Usually, after; > investing some time, it is possible to find the necessary solution for; > these non-trivial cases with Psi4, but it may be worth investigating some; > of these systems for possible improvements in the code.; > ; > Best wishes,; > ; > Alexander.; > ; > On Thu, Jan 14, 2016 at 9:25 AM, jgonthier notifications@github.com; > wrote:; > ; > > @lothian https://github.com/lothian I guess these other codes are; > > using some other convergence accelerator than Psi4 ? I would not be; > > surprised if SOSCF with a core guess would converge on the right solution.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/211#issuecomment-171656770.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171660919
https://github.com/psi4/psi4/issues/211#issuecomment-171662622:817,Energy Efficiency,energy,energy,817,"Yes, one of the cases where a stability analysis is detrimental is; closed-shell benzene with UHF. The closed-shell solution is unstable and; the stable UHF solution looks like a singlet hexaradical... Unfortunately I; believe this is related to the intrinsic spin contamination in UHF. There; are specific methods that can constrain or project UHF solutions to; alleviate this problem.; ROHF also avoids spin contamination, but lacks description of spin; polarization, which may sometimes be of interest. 2016-01-14 9:43 GMT-05:00 ssh2 notifications@github.com:. > To Jerome's point, I would agree that for UHF doing stability analysis; > helps a lot. However, we have also seen cases when stability analysis; > severely breaks spin symmetry and converges on the wrong (or mixed) spin; > state instead of the lowest energy root of desired spin. So one should be; > careful about this issue.; > ; > Best wishes,; > ; > Alexander.; > ; > On Thu, Jan 14, 2016 at 9:38 AM, Alexander Sokolov <; > alexander.y.sokolov@gmail.com> wrote:; > ; > > I would add that lately we have seen a lot of problems with UHF and ROHF; > > converging on a wrong state for open-shells in Psi4. Although new; > > stability; > > analysis code helps a lot in fixing some of the problems (for UHF), for; > > many of these systems finding the lowest root is quite non-trivial and is; > > accompanied by many SCF convergence issues, as well as symmetry-breaking; > > issues (UHF). Things get a lot worse for transition metal compounds (even; > > simple ones, like Fe(CO)5). The most helpful solution is to start with; > > basis set projection from a small basis, but this strategy doesn't always; > > work. Sometimes, combining stability analysis root search and basis set; > > projection helps.; > > ; > > Indeed, other codes (particularly, MOLPRO) sometimes do better job in; > > finding lowest-energy solutions for systems of this type. Usually, after; > > investing some time, it is possible to find the necessary solution for",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171662622
https://github.com/psi4/psi4/issues/211#issuecomment-171662622:1868,Energy Efficiency,energy,energy,1868,"he lowest energy root of desired spin. So one should be; > careful about this issue.; > ; > Best wishes,; > ; > Alexander.; > ; > On Thu, Jan 14, 2016 at 9:38 AM, Alexander Sokolov <; > alexander.y.sokolov@gmail.com> wrote:; > ; > > I would add that lately we have seen a lot of problems with UHF and ROHF; > > converging on a wrong state for open-shells in Psi4. Although new; > > stability; > > analysis code helps a lot in fixing some of the problems (for UHF), for; > > many of these systems finding the lowest root is quite non-trivial and is; > > accompanied by many SCF convergence issues, as well as symmetry-breaking; > > issues (UHF). Things get a lot worse for transition metal compounds (even; > > simple ones, like Fe(CO)5). The most helpful solution is to start with; > > basis set projection from a small basis, but this strategy doesn't always; > > work. Sometimes, combining stability analysis root search and basis set; > > projection helps.; > > ; > > Indeed, other codes (particularly, MOLPRO) sometimes do better job in; > > finding lowest-energy solutions for systems of this type. Usually, after; > > investing some time, it is possible to find the necessary solution for; > > these non-trivial cases with Psi4, but it may be worth investigating some; > > of these systems for possible improvements in the code.; > > ; > > Best wishes,; > > ; > > Alexander.; > > ; > > On Thu, Jan 14, 2016 at 9:25 AM, jgonthier notifications@github.com; > > wrote:; > > ; > > > @lothian https://github.com/lothian I guess these other codes are; > > > using some other convergence accelerator than Psi4 ? I would not be; > > > surprised if SOSCF with a core guess would converge on the right; > > > solution.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4public/issues/211#issuecomment-171656770.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/211#issuecomment-171660919.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171662622
https://github.com/psi4/psi4/issues/211#issuecomment-171662622:398,Safety,avoid,avoids,398,"Yes, one of the cases where a stability analysis is detrimental is; closed-shell benzene with UHF. The closed-shell solution is unstable and; the stable UHF solution looks like a singlet hexaradical... Unfortunately I; believe this is related to the intrinsic spin contamination in UHF. There; are specific methods that can constrain or project UHF solutions to; alleviate this problem.; ROHF also avoids spin contamination, but lacks description of spin; polarization, which may sometimes be of interest. 2016-01-14 9:43 GMT-05:00 ssh2 notifications@github.com:. > To Jerome's point, I would agree that for UHF doing stability analysis; > helps a lot. However, we have also seen cases when stability analysis; > severely breaks spin symmetry and converges on the wrong (or mixed) spin; > state instead of the lowest energy root of desired spin. So one should be; > careful about this issue.; > ; > Best wishes,; > ; > Alexander.; > ; > On Thu, Jan 14, 2016 at 9:38 AM, Alexander Sokolov <; > alexander.y.sokolov@gmail.com> wrote:; > ; > > I would add that lately we have seen a lot of problems with UHF and ROHF; > > converging on a wrong state for open-shells in Psi4. Although new; > > stability; > > analysis code helps a lot in fixing some of the problems (for UHF), for; > > many of these systems finding the lowest root is quite non-trivial and is; > > accompanied by many SCF convergence issues, as well as symmetry-breaking; > > issues (UHF). Things get a lot worse for transition metal compounds (even; > > simple ones, like Fe(CO)5). The most helpful solution is to start with; > > basis set projection from a small basis, but this strategy doesn't always; > > work. Sometimes, combining stability analysis root search and basis set; > > projection helps.; > > ; > > Indeed, other codes (particularly, MOLPRO) sometimes do better job in; > > finding lowest-energy solutions for systems of this type. Usually, after; > > investing some time, it is possible to find the necessary solution for",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171662622
https://github.com/psi4/psi4/issues/211#issuecomment-171662622:1517,Usability,simpl,simple,1517,"nterest. 2016-01-14 9:43 GMT-05:00 ssh2 notifications@github.com:. > To Jerome's point, I would agree that for UHF doing stability analysis; > helps a lot. However, we have also seen cases when stability analysis; > severely breaks spin symmetry and converges on the wrong (or mixed) spin; > state instead of the lowest energy root of desired spin. So one should be; > careful about this issue.; > ; > Best wishes,; > ; > Alexander.; > ; > On Thu, Jan 14, 2016 at 9:38 AM, Alexander Sokolov <; > alexander.y.sokolov@gmail.com> wrote:; > ; > > I would add that lately we have seen a lot of problems with UHF and ROHF; > > converging on a wrong state for open-shells in Psi4. Although new; > > stability; > > analysis code helps a lot in fixing some of the problems (for UHF), for; > > many of these systems finding the lowest root is quite non-trivial and is; > > accompanied by many SCF convergence issues, as well as symmetry-breaking; > > issues (UHF). Things get a lot worse for transition metal compounds (even; > > simple ones, like Fe(CO)5). The most helpful solution is to start with; > > basis set projection from a small basis, but this strategy doesn't always; > > work. Sometimes, combining stability analysis root search and basis set; > > projection helps.; > > ; > > Indeed, other codes (particularly, MOLPRO) sometimes do better job in; > > finding lowest-energy solutions for systems of this type. Usually, after; > > investing some time, it is possible to find the necessary solution for; > > these non-trivial cases with Psi4, but it may be worth investigating some; > > of these systems for possible improvements in the code.; > > ; > > Best wishes,; > > ; > > Alexander.; > > ; > > On Thu, Jan 14, 2016 at 9:25 AM, jgonthier notifications@github.com; > > wrote:; > > ; > > > @lothian https://github.com/lothian I guess these other codes are; > > > using some other convergence accelerator than Psi4 ? I would not be; > > > surprised if SOSCF with a core guess would converge on the",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171662622
https://github.com/psi4/psi4/issues/211#issuecomment-171704058:101,Safety,avoid,avoids,101,"Jerome, Have you played around with CUHF at all for the stability analysis?. I know that this method avoids spin contamination.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171704058
https://github.com/psi4/psi4/issues/211#issuecomment-171749071:355,Safety,avoid,avoids,355,"No, I haven't. And my next goals for stability analysis are more for RHF; and ROHF, since it's what most people use... But even these, I don't know; when I'll have time for it... 2016-01-14 12:00 GMT-05:00 Kevin Hannon notifications@github.com:. > Jerome, Have you played around with CUHF at all for the stability analysis?; > ; > I know that this method avoids spin contamination.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/211#issuecomment-171704058.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171749071
https://github.com/psi4/psi4/pull/212#issuecomment-171668610:398,Deployability,integrat,integrated,398,"Great, we were talking yesterday about how an interfaces doc page was needed, and here it is!. I was going to just mention topic here, but it turned into a write-up, so made an independent issue (https://github.com/psi4/psi4/issues/122). Would you take a look and see if you agree with its strategy?. On the `pcm {...}` block, is that the same syntax across the other QC programs that pcmsolver is integrated with?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/212#issuecomment-171668610
https://github.com/psi4/psi4/pull/212#issuecomment-171668610:46,Integrability,interface,interfaces,46,"Great, we were talking yesterday about how an interfaces doc page was needed, and here it is!. I was going to just mention topic here, but it turned into a write-up, so made an independent issue (https://github.com/psi4/psi4/issues/122). Would you take a look and see if you agree with its strategy?. On the `pcm {...}` block, is that the same syntax across the other QC programs that pcmsolver is integrated with?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/212#issuecomment-171668610
https://github.com/psi4/psi4/pull/212#issuecomment-171668610:398,Integrability,integrat,integrated,398,"Great, we were talking yesterday about how an interfaces doc page was needed, and here it is!. I was going to just mention topic here, but it turned into a write-up, so made an independent issue (https://github.com/psi4/psi4/issues/122). Would you take a look and see if you agree with its strategy?. On the `pcm {...}` block, is that the same syntax across the other QC programs that pcmsolver is integrated with?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/212#issuecomment-171668610
https://github.com/psi4/psi4/pull/212#issuecomment-171673504:637,Integrability,interoperab,interoperable,637,"@loriab **TL;DR** Yes, the syntax is the same and is described [here](http://pcmsolver.readthedocs.org/en/latest/users/input.html). **Lengthy version**; The input to PCMSolver can work like this:; 1. Either you use the ""native"" format that is processed by the module's own Python script. This requires the user to provide an additional input file when submitting the calculation.; 2. Either you pass a `struct` with relevant input parameters when initializing the library from within the host. This allows using the host program native syntax. Of course, the host has to define the appropriate input sections. Since the module has to be interoperable with C/C++ and Fortran hosts, for the moment being (and the foreseeable future), the second strategy is limited to a subset of all possible options to the library.; With @andysim and @lothian we decided for a middle ground in Psi4: The additional input file is incorporated into a section in the Psi4 input that is extracted in the current directory so that PCMSolver's Python script can parse it. This would be strategy 1.5. All programs with an interface to PCMSolver can use Strategy 1 (DALTON, LSDALTON, DIRAC and a couple of others) Only DIRAC can use Strategy 2. Only Psi4 uses strategy 1.5: it was rather easy to implement, since everything runs through Python.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/212#issuecomment-171673504
https://github.com/psi4/psi4/pull/212#issuecomment-171673504:1098,Integrability,interface,interface,1098,"@loriab **TL;DR** Yes, the syntax is the same and is described [here](http://pcmsolver.readthedocs.org/en/latest/users/input.html). **Lengthy version**; The input to PCMSolver can work like this:; 1. Either you use the ""native"" format that is processed by the module's own Python script. This requires the user to provide an additional input file when submitting the calculation.; 2. Either you pass a `struct` with relevant input parameters when initializing the library from within the host. This allows using the host program native syntax. Of course, the host has to define the appropriate input sections. Since the module has to be interoperable with C/C++ and Fortran hosts, for the moment being (and the foreseeable future), the second strategy is limited to a subset of all possible options to the library.; With @andysim and @lothian we decided for a middle ground in Psi4: The additional input file is incorporated into a section in the Psi4 input that is extracted in the current directory so that PCMSolver's Python script can parse it. This would be strategy 1.5. All programs with an interface to PCMSolver can use Strategy 1 (DALTON, LSDALTON, DIRAC and a couple of others) Only DIRAC can use Strategy 2. Only Psi4 uses strategy 1.5: it was rather easy to implement, since everything runs through Python.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/212#issuecomment-171673504
https://github.com/psi4/psi4/pull/212#issuecomment-171677827:300,Safety,safe,safe,300,"Lengthy version very interesting. It slightly pains me that options specification isn't consistent through all of psi4, but having options specification not consistent for pcmsolver across all host programs would be more painful to the dedicated pcmsolver user. Is the `pcm {...}` to `pcmsolver.inp` safe for multiple invocations in one psi4 input (I remember labeling temp dirs with random numbers for dftd3)?. I like the multiple input strategies scheme. Would someday you approve of an additional strategy 1.75 where pcm options are specified in psi4 format (e.g., `set pcm_cavity_probe_radius 2`, then the whole pcm collection be written to `pcmsolver.inp`? That way, could be friendly to the dedicated pcmsolver user and the dedicated psi4 user?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/212#issuecomment-171677827
https://github.com/psi4/psi4/pull/212#issuecomment-171680220:100,Testability,test,tests,100,"Alas, we didn't think that far ahead when Strategy 1.5 was put into place. But you can see from the tests in `pcm_scf`, `pcm_dft` and `pcm_dipole` that the same PCM input is used across multiple calculations without problem. I can't say (because I haven't checked) if it's because the same parsed file is used throughout (not what we want) or because the intermediate `pcmsolver.inp` is re-parsed for every calculation (what we want). Strategy 1.75 would be great and would definitely make @lothian happier :smile:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/212#issuecomment-171680220
https://github.com/psi4/psi4/issues/213#issuecomment-178106520:57,Deployability,release,release,57,"Not really related, but I think it makes sense to roll a release candidate once the code is frozen, so people not using git master can try building and running on various platforms. That might make an immediate brown-paperbag 1.0.1 release unnecessary or less likely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-178106520
https://github.com/psi4/psi4/issues/213#issuecomment-178106520:232,Deployability,release,release,232,"Not really related, but I think it makes sense to roll a release candidate once the code is frozen, so people not using git master can try building and running on various platforms. That might make an immediate brown-paperbag 1.0.1 release unnecessary or less likely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-178106520
https://github.com/psi4/psi4/issues/213#issuecomment-178167204:35,Deployability,release,release,35,"Yes, we're planning on a series of release candidates after the necessary features are in wherein only bug fixes permitted. For the most part, we work on a nightly build release schedule, but yes, we do want 1.0.0 to be durable. Thanks for the new term, ""brown-paperbag"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-178167204
https://github.com/psi4/psi4/issues/213#issuecomment-178167204:170,Deployability,release,release,170,"Yes, we're planning on a series of release candidates after the necessary features are in wherein only bug fixes permitted. For the most part, we work on a nightly build release schedule, but yes, we do want 1.0.0 to be durable. Thanks for the new term, ""brown-paperbag"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-178167204
https://github.com/psi4/psi4/issues/213#issuecomment-178167204:178,Energy Efficiency,schedul,schedule,178,"Yes, we're planning on a series of release candidates after the necessary features are in wherein only bug fixes permitted. For the most part, we work on a nightly build release schedule, but yes, we do want 1.0.0 to be durable. Thanks for the new term, ""brown-paperbag"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-178167204
https://github.com/psi4/psi4/issues/213#issuecomment-178169351:247,Deployability,configurat,configuration,247,"OK. About the brown-paperbag, I've now looked it up in the hacker dictionary, and I didn't mean it in that sense, sorry. I use it in the sense of ""maintainer successfully built and tested on their machine, but it's obviously broken on a different configuration they did not test"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-178169351
https://github.com/psi4/psi4/issues/213#issuecomment-178169351:247,Modifiability,config,configuration,247,"OK. About the brown-paperbag, I've now looked it up in the hacker dictionary, and I didn't mean it in that sense, sorry. I use it in the sense of ""maintainer successfully built and tested on their machine, but it's obviously broken on a different configuration they did not test"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-178169351
https://github.com/psi4/psi4/issues/213#issuecomment-178169351:181,Testability,test,tested,181,"OK. About the brown-paperbag, I've now looked it up in the hacker dictionary, and I didn't mean it in that sense, sorry. I use it in the sense of ""maintainer successfully built and tested on their machine, but it's obviously broken on a different configuration they did not test"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-178169351
https://github.com/psi4/psi4/issues/213#issuecomment-178169351:274,Testability,test,test,274,"OK. About the brown-paperbag, I've now looked it up in the hacker dictionary, and I didn't mean it in that sense, sorry. I use it in the sense of ""maintainer successfully built and tested on their machine, but it's obviously broken on a different configuration they did not test"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-178169351
https://github.com/psi4/psi4/issues/213#issuecomment-182772882:260,Deployability,release,release,260,"I know havoc and epochs and non-sortability ensue. We're actually trying to be _more_ versioning standards compliant, since if we went with project `psi` and version `4.0` we couldn't ever make an API change w/o bumping to psi5. So the plan is that the stable release will be project `psi4` and version `1.0`, as in https://github.com/psi4/psi4public/wiki/Versioning#how-to-get-and-interpret-the-version-number .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182772882
https://github.com/psi4/psi4/issues/213#issuecomment-182945585:189,Deployability,patch,patch,189,"Being one of those who thought psi4 1.0 to be a good idea, I'll state that my main requirement is that the project name is `psi4` and that we have the ability to bump major (in major.minor.patch) in an API change without bumping psi generations to psi5. If everyone prefers the stable release as `psi4` & `4.0.0`, with future `psi4` & `5.0.0` instead of stable release `1.0.0` and future `2.0.0`, I can live with that. (Of course the psi5 folks someday may regret that decision.) Maybe it's time to start naming major releases after (house)cats.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182945585
https://github.com/psi4/psi4/issues/213#issuecomment-182945585:285,Deployability,release,release,285,"Being one of those who thought psi4 1.0 to be a good idea, I'll state that my main requirement is that the project name is `psi4` and that we have the ability to bump major (in major.minor.patch) in an API change without bumping psi generations to psi5. If everyone prefers the stable release as `psi4` & `4.0.0`, with future `psi4` & `5.0.0` instead of stable release `1.0.0` and future `2.0.0`, I can live with that. (Of course the psi5 folks someday may regret that decision.) Maybe it's time to start naming major releases after (house)cats.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182945585
https://github.com/psi4/psi4/issues/213#issuecomment-182945585:361,Deployability,release,release,361,"Being one of those who thought psi4 1.0 to be a good idea, I'll state that my main requirement is that the project name is `psi4` and that we have the ability to bump major (in major.minor.patch) in an API change without bumping psi generations to psi5. If everyone prefers the stable release as `psi4` & `4.0.0`, with future `psi4` & `5.0.0` instead of stable release `1.0.0` and future `2.0.0`, I can live with that. (Of course the psi5 folks someday may regret that decision.) Maybe it's time to start naming major releases after (house)cats.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182945585
https://github.com/psi4/psi4/issues/213#issuecomment-182945585:518,Deployability,release,releases,518,"Being one of those who thought psi4 1.0 to be a good idea, I'll state that my main requirement is that the project name is `psi4` and that we have the ability to bump major (in major.minor.patch) in an API change without bumping psi generations to psi5. If everyone prefers the stable release as `psi4` & `4.0.0`, with future `psi4` & `5.0.0` instead of stable release `1.0.0` and future `2.0.0`, I can live with that. (Of course the psi5 folks someday may regret that decision.) Maybe it's time to start naming major releases after (house)cats.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182945585
https://github.com/psi4/psi4/issues/213#issuecomment-182946562:520,Deployability,patch,patch,520,"I agree with the plan already in place. API changes as we view them should; not be sufficient to bump us to PSI5, so naming the project PSI4 and; versioning against X.Y.Z makes sense to me. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Feb 11, 2016 at 11:33 AM, Lori A. Burns notifications@github.com; wrote:. > Being one of those who thought psi4 1.0 to be a good idea, I'll state that; > my main requirement is that the project name is psi4 and that we have the; > ability to bump major (in major.minor.patch) in an API change without; > bumping psi generations to psi5. If everyone prefers the stable release as; > psi4 & 4.0.0, with future psi4 & 5.0.0 instead of stable release 1.0.0; > and future 2.0.0, I can live with that. (Of course the psi5 folks someday; > may regret that decision.) Maybe it's time to start naming major releases; > after (house)cats.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/213#issuecomment-182945585.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182946562
https://github.com/psi4/psi4/issues/213#issuecomment-182946562:619,Deployability,release,release,619,"I agree with the plan already in place. API changes as we view them should; not be sufficient to bump us to PSI5, so naming the project PSI4 and; versioning against X.Y.Z makes sense to me. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Feb 11, 2016 at 11:33 AM, Lori A. Burns notifications@github.com; wrote:. > Being one of those who thought psi4 1.0 to be a good idea, I'll state that; > my main requirement is that the project name is psi4 and that we have the; > ability to bump major (in major.minor.patch) in an API change without; > bumping psi generations to psi5. If everyone prefers the stable release as; > psi4 & 4.0.0, with future psi4 & 5.0.0 instead of stable release 1.0.0; > and future 2.0.0, I can live with that. (Of course the psi5 folks someday; > may regret that decision.) Maybe it's time to start naming major releases; > after (house)cats.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/213#issuecomment-182945585.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182946562
https://github.com/psi4/psi4/issues/213#issuecomment-182946562:690,Deployability,release,release,690,"I agree with the plan already in place. API changes as we view them should; not be sufficient to bump us to PSI5, so naming the project PSI4 and; versioning against X.Y.Z makes sense to me. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Feb 11, 2016 at 11:33 AM, Lori A. Burns notifications@github.com; wrote:. > Being one of those who thought psi4 1.0 to be a good idea, I'll state that; > my main requirement is that the project name is psi4 and that we have the; > ability to bump major (in major.minor.patch) in an API change without; > bumping psi generations to psi5. If everyone prefers the stable release as; > psi4 & 4.0.0, with future psi4 & 5.0.0 instead of stable release 1.0.0; > and future 2.0.0, I can live with that. (Of course the psi5 folks someday; > may regret that decision.) Maybe it's time to start naming major releases; > after (house)cats.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/213#issuecomment-182945585.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182946562
https://github.com/psi4/psi4/issues/213#issuecomment-182946562:849,Deployability,release,releases,849,"I agree with the plan already in place. API changes as we view them should; not be sufficient to bump us to PSI5, so naming the project PSI4 and; versioning against X.Y.Z makes sense to me. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Feb 11, 2016 at 11:33 AM, Lori A. Burns notifications@github.com; wrote:. > Being one of those who thought psi4 1.0 to be a good idea, I'll state that; > my main requirement is that the project name is psi4 and that we have the; > ability to bump major (in major.minor.patch) in an API change without; > bumping psi generations to psi5. If everyone prefers the stable release as; > psi4 & 4.0.0, with future psi4 & 5.0.0 instead of stable release 1.0.0; > and future 2.0.0, I can live with that. (Of course the psi5 folks someday; > may regret that decision.) Maybe it's time to start naming major releases; > after (house)cats.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/213#issuecomment-182945585.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182946562
https://github.com/psi4/psi4/issues/213#issuecomment-182947030:173,Availability,down,downgrade,173,I didn't know psi5 already existed :laughing: . I do prefer to start with a version number that is clearly 'newer' then the previous ones (like 4.0b5). And 1.0 seems like a downgrade.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182947030
https://github.com/psi4/psi4/issues/213#issuecomment-182947030:99,Usability,clear,clearly,99,I didn't know psi5 already existed :laughing: . I do prefer to start with a version number that is clearly 'newer' then the previous ones (like 4.0b5). And 1.0 seems like a downgrade.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182947030
https://github.com/psi4/psi4/issues/213#issuecomment-182956745:102,Deployability,release,released,102,"Psi5 only exists in arguments about version naming :-) . I agree that `1.0.0` is out-of-sync with the released beta versions like 4.0b5. But it is in sync with the past 11 months (https://anaconda.org/psi4/psi4/files), ever since we started identifying commits by actual version numbers rather than just git hashes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182956745
https://github.com/psi4/psi4/issues/213#issuecomment-182956745:308,Security,hash,hashes,308,"Psi5 only exists in arguments about version naming :-) . I agree that `1.0.0` is out-of-sync with the released beta versions like 4.0b5. But it is in sync with the past 11 months (https://anaconda.org/psi4/psi4/files), ever since we started identifying commits by actual version numbers rather than just git hashes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182956745
https://github.com/psi4/psi4/issues/213#issuecomment-182959247:31,Deployability,install,installed,31,"Well, as we already have 4.0b5 installed on our systems, we stuck to this version scheme (we suffixed with a date for git builds). So, suddenly going to 1.0 will not work with our version ordering schemes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182959247
https://github.com/psi4/psi4/issues/213#issuecomment-182961246:54,Modifiability,config,config,54,"I'm sorry about the disruption. The executable or the config script or the output file will spit out the proper version, if that helps. ``` bash; >>> bin/psi4 --version; 0.4.14; >>> bin/psi4-config --version; 0.4.14; ```. ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 0.4.14 Driver. Git: Rev {master} 2485238 dirty; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182961246
https://github.com/psi4/psi4/issues/213#issuecomment-182961246:191,Modifiability,config,config,191,"I'm sorry about the disruption. The executable or the config script or the output file will spit out the proper version, if that helps. ``` bash; >>> bin/psi4 --version; 0.4.14; >>> bin/psi4-config --version; 0.4.14; ```. ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 0.4.14 Driver. Git: Rev {master} 2485238 dirty; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182961246
https://github.com/psi4/psi4/issues/213#issuecomment-183429072:302,Availability,down,downgrade,302,"> Well, as we already have 4.0b5 installed on our systems, we stuck to this version scheme (we ; > suffixed with a date for git builds). So, suddenly going to 1.0 will not work with our version ordering ; > schemes. Well, there are already the 0.1, 0.2 and 0.3 releases - I complained about the number downgrade, got schooled and bit the bullet by introducing an epoch in the version for the packages I maintain. But if the developers decide to switch back to 4.0 as stable version, I won't complain, it's not a big deal to skip version numbers. . In that case I guess there should be a note that psi5 really starts at 0.1 from the beginning (if people still use version numbers by then).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-183429072
https://github.com/psi4/psi4/issues/213#issuecomment-183429072:33,Deployability,install,installed,33,"> Well, as we already have 4.0b5 installed on our systems, we stuck to this version scheme (we ; > suffixed with a date for git builds). So, suddenly going to 1.0 will not work with our version ordering ; > schemes. Well, there are already the 0.1, 0.2 and 0.3 releases - I complained about the number downgrade, got schooled and bit the bullet by introducing an epoch in the version for the packages I maintain. But if the developers decide to switch back to 4.0 as stable version, I won't complain, it's not a big deal to skip version numbers. . In that case I guess there should be a note that psi5 really starts at 0.1 from the beginning (if people still use version numbers by then).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-183429072
https://github.com/psi4/psi4/issues/213#issuecomment-183429072:261,Deployability,release,releases,261,"> Well, as we already have 4.0b5 installed on our systems, we stuck to this version scheme (we ; > suffixed with a date for git builds). So, suddenly going to 1.0 will not work with our version ordering ; > schemes. Well, there are already the 0.1, 0.2 and 0.3 releases - I complained about the number downgrade, got schooled and bit the bullet by introducing an epoch in the version for the packages I maintain. But if the developers decide to switch back to 4.0 as stable version, I won't complain, it's not a big deal to skip version numbers. . In that case I guess there should be a note that psi5 really starts at 0.1 from the beginning (if people still use version numbers by then).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-183429072
https://github.com/psi4/psi4/issues/213#issuecomment-199429851:0,Deployability,Update,Updated,0,Updated list of other contributors,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-199429851
https://github.com/psi4/psi4/issues/214#issuecomment-172147949:752,Deployability,install,install,752,"Yes, the plugin scheme as currently implemented expects that you're generating a new plugin from a locally compiled psi4. The binary clearly doesn't satisfy that and indeed the excerpt you posted is both machine- and build-specific since it contains various oddities for making the binary as static and backwards-compatible as possible. I'm actually in the middle of trying to get the psi4 binary and all its subsidiaries in shape for both users and developers. May as well try to get plugins going, too. If you know of any conventions for handling plugins/libgcc dependencies within conda, I'd be interested to read of them. Where is `libplugin` called for? In the build, it's just a static library that gets linked into the psi4 exe. I can certainly install it, but it may need to be a `.so` to be useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172147949
https://github.com/psi4/psi4/issues/214#issuecomment-172147949:564,Integrability,depend,dependencies,564,"Yes, the plugin scheme as currently implemented expects that you're generating a new plugin from a locally compiled psi4. The binary clearly doesn't satisfy that and indeed the excerpt you posted is both machine- and build-specific since it contains various oddities for making the binary as static and backwards-compatible as possible. I'm actually in the middle of trying to get the psi4 binary and all its subsidiaries in shape for both users and developers. May as well try to get plugins going, too. If you know of any conventions for handling plugins/libgcc dependencies within conda, I'd be interested to read of them. Where is `libplugin` called for? In the build, it's just a static library that gets linked into the psi4 exe. I can certainly install it, but it may need to be a `.so` to be useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172147949
https://github.com/psi4/psi4/issues/214#issuecomment-172147949:9,Modifiability,plugin,plugin,9,"Yes, the plugin scheme as currently implemented expects that you're generating a new plugin from a locally compiled psi4. The binary clearly doesn't satisfy that and indeed the excerpt you posted is both machine- and build-specific since it contains various oddities for making the binary as static and backwards-compatible as possible. I'm actually in the middle of trying to get the psi4 binary and all its subsidiaries in shape for both users and developers. May as well try to get plugins going, too. If you know of any conventions for handling plugins/libgcc dependencies within conda, I'd be interested to read of them. Where is `libplugin` called for? In the build, it's just a static library that gets linked into the psi4 exe. I can certainly install it, but it may need to be a `.so` to be useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172147949
https://github.com/psi4/psi4/issues/214#issuecomment-172147949:85,Modifiability,plugin,plugin,85,"Yes, the plugin scheme as currently implemented expects that you're generating a new plugin from a locally compiled psi4. The binary clearly doesn't satisfy that and indeed the excerpt you posted is both machine- and build-specific since it contains various oddities for making the binary as static and backwards-compatible as possible. I'm actually in the middle of trying to get the psi4 binary and all its subsidiaries in shape for both users and developers. May as well try to get plugins going, too. If you know of any conventions for handling plugins/libgcc dependencies within conda, I'd be interested to read of them. Where is `libplugin` called for? In the build, it's just a static library that gets linked into the psi4 exe. I can certainly install it, but it may need to be a `.so` to be useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172147949
https://github.com/psi4/psi4/issues/214#issuecomment-172147949:485,Modifiability,plugin,plugins,485,"Yes, the plugin scheme as currently implemented expects that you're generating a new plugin from a locally compiled psi4. The binary clearly doesn't satisfy that and indeed the excerpt you posted is both machine- and build-specific since it contains various oddities for making the binary as static and backwards-compatible as possible. I'm actually in the middle of trying to get the psi4 binary and all its subsidiaries in shape for both users and developers. May as well try to get plugins going, too. If you know of any conventions for handling plugins/libgcc dependencies within conda, I'd be interested to read of them. Where is `libplugin` called for? In the build, it's just a static library that gets linked into the psi4 exe. I can certainly install it, but it may need to be a `.so` to be useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172147949
https://github.com/psi4/psi4/issues/214#issuecomment-172147949:549,Modifiability,plugin,plugins,549,"Yes, the plugin scheme as currently implemented expects that you're generating a new plugin from a locally compiled psi4. The binary clearly doesn't satisfy that and indeed the excerpt you posted is both machine- and build-specific since it contains various oddities for making the binary as static and backwards-compatible as possible. I'm actually in the middle of trying to get the psi4 binary and all its subsidiaries in shape for both users and developers. May as well try to get plugins going, too. If you know of any conventions for handling plugins/libgcc dependencies within conda, I'd be interested to read of them. Where is `libplugin` called for? In the build, it's just a static library that gets linked into the psi4 exe. I can certainly install it, but it may need to be a `.so` to be useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172147949
https://github.com/psi4/psi4/issues/214#issuecomment-172147949:133,Usability,clear,clearly,133,"Yes, the plugin scheme as currently implemented expects that you're generating a new plugin from a locally compiled psi4. The binary clearly doesn't satisfy that and indeed the excerpt you posted is both machine- and build-specific since it contains various oddities for making the binary as static and backwards-compatible as possible. I'm actually in the middle of trying to get the psi4 binary and all its subsidiaries in shape for both users and developers. May as well try to get plugins going, too. If you know of any conventions for handling plugins/libgcc dependencies within conda, I'd be interested to read of them. Where is `libplugin` called for? In the build, it's just a static library that gets linked into the psi4 exe. I can certainly install it, but it may need to be a `.so` to be useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172147949
https://github.com/psi4/psi4/issues/214#issuecomment-172149347:99,Energy Efficiency,adapt,adapt,99,"> Where is libplugin called for?. I'm not 100% sure if this is necessary or not -- I was trying to adapt my old plugin from a couple years ago (for RESP charge fitting) that no longer compiles, so that might be just accidental on my part.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172149347
https://github.com/psi4/psi4/issues/214#issuecomment-172149347:153,Energy Efficiency,charge,charge,153,"> Where is libplugin called for?. I'm not 100% sure if this is necessary or not -- I was trying to adapt my old plugin from a couple years ago (for RESP charge fitting) that no longer compiles, so that might be just accidental on my part.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172149347
https://github.com/psi4/psi4/issues/214#issuecomment-172149347:99,Modifiability,adapt,adapt,99,"> Where is libplugin called for?. I'm not 100% sure if this is necessary or not -- I was trying to adapt my old plugin from a couple years ago (for RESP charge fitting) that no longer compiles, so that might be just accidental on my part.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172149347
https://github.com/psi4/psi4/issues/214#issuecomment-172149347:112,Modifiability,plugin,plugin,112,"> Where is libplugin called for?. I'm not 100% sure if this is necessary or not -- I was trying to adapt my old plugin from a couple years ago (for RESP charge fitting) that no longer compiles, so that might be just accidental on my part.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172149347
https://github.com/psi4/psi4/issues/214#issuecomment-172149716:466,Deployability,patch,patched,466,"> If you know of any conventions for handling plugins/libgcc dependencies within conda... The default anaconda channel includes a libgcc, so you can declare a depenency on it. I assume you've considered that and it's the wrong version or something? Generally, you don't need to have everything statically linked in conda, since you can either provide shared libraries in your package or depend on other packages that include shared libraries, and everything will be patched up with `RPATH`s.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172149716
https://github.com/psi4/psi4/issues/214#issuecomment-172149716:61,Integrability,depend,dependencies,61,"> If you know of any conventions for handling plugins/libgcc dependencies within conda... The default anaconda channel includes a libgcc, so you can declare a depenency on it. I assume you've considered that and it's the wrong version or something? Generally, you don't need to have everything statically linked in conda, since you can either provide shared libraries in your package or depend on other packages that include shared libraries, and everything will be patched up with `RPATH`s.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172149716
https://github.com/psi4/psi4/issues/214#issuecomment-172149716:387,Integrability,depend,depend,387,"> If you know of any conventions for handling plugins/libgcc dependencies within conda... The default anaconda channel includes a libgcc, so you can declare a depenency on it. I assume you've considered that and it's the wrong version or something? Generally, you don't need to have everything statically linked in conda, since you can either provide shared libraries in your package or depend on other packages that include shared libraries, and everything will be patched up with `RPATH`s.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172149716
https://github.com/psi4/psi4/issues/214#issuecomment-172149716:46,Modifiability,plugin,plugins,46,"> If you know of any conventions for handling plugins/libgcc dependencies within conda... The default anaconda channel includes a libgcc, so you can declare a depenency on it. I assume you've considered that and it's the wrong version or something? Generally, you don't need to have everything statically linked in conda, since you can either provide shared libraries in your package or depend on other packages that include shared libraries, and everything will be patched up with `RPATH`s.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172149716
https://github.com/psi4/psi4/issues/214#issuecomment-172151258:296,Availability,down,down,296,"A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the `Makefile` spit out) has definitely been updated since then. Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon. Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the `--new-plugin-makefile` output won't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172151258
https://github.com/psi4/psi4/issues/214#issuecomment-172151258:154,Deployability,update,updated,154,"A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the `Makefile` spit out) has definitely been updated since then. Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon. Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the `--new-plugin-makefile` output won't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172151258
https://github.com/psi4/psi4/issues/214#issuecomment-172151258:395,Integrability,depend,dependency,395,"A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the `Makefile` spit out) has definitely been updated since then. Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon. Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the `--new-plugin-makefile` output won't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172151258
https://github.com/psi4/psi4/issues/214#issuecomment-172151258:456,Integrability,depend,dependencies,456,"A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the `Makefile` spit out) has definitely been updated since then. Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon. Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the `--new-plugin-makefile` output won't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172151258
https://github.com/psi4/psi4/issues/214#issuecomment-172151258:83,Modifiability,plugin,plugin,83,"A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the `Makefile` spit out) has definitely been updated since then. Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon. Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the `--new-plugin-makefile` output won't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172151258
https://github.com/psi4/psi4/issues/214#issuecomment-172151258:543,Modifiability,plugin,plugin,543,"A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the `Makefile` spit out) has definitely been updated since then. Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon. Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the `--new-plugin-makefile` output won't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172151258
https://github.com/psi4/psi4/issues/214#issuecomment-172151258:630,Modifiability,plugin,plugin,630,"A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the `Makefile` spit out) has definitely been updated since then. Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon. Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the `--new-plugin-makefile` output won't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172151258
https://github.com/psi4/psi4/issues/214#issuecomment-172151258:673,Modifiability,plugin,plugins,673,"A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the `Makefile` spit out) has definitely been updated since then. Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon. Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the `--new-plugin-makefile` output won't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172151258
https://github.com/psi4/psi4/issues/214#issuecomment-172151258:740,Modifiability,plugin,plugin-makefile,740,"A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the `Makefile` spit out) has definitely been updated since then. Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon. Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the `--new-plugin-makefile` output won't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172151258
https://github.com/psi4/psi4/issues/214#issuecomment-172192255:471,Availability,down,down,471,"I can work on this if you want. Also, Libplugin shouldn't be needed anymore. Justin. > On Jan 15, 2016, at 10:25 PM, Lori A. Burns notifications@github.com wrote:; > ; > A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the Makefile spit out) has definitely been updated since then.; > ; > Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon.; > ; > Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the --new-plugin-makefile output won't be a problem.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172192255
https://github.com/psi4/psi4/issues/214#issuecomment-172192255:322,Deployability,update,updated,322,"I can work on this if you want. Also, Libplugin shouldn't be needed anymore. Justin. > On Jan 15, 2016, at 10:25 PM, Lori A. Burns notifications@github.com wrote:; > ; > A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the Makefile spit out) has definitely been updated since then.; > ; > Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon.; > ; > Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the --new-plugin-makefile output won't be a problem.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172192255
https://github.com/psi4/psi4/issues/214#issuecomment-172192255:570,Integrability,depend,dependency,570,"I can work on this if you want. Also, Libplugin shouldn't be needed anymore. Justin. > On Jan 15, 2016, at 10:25 PM, Lori A. Burns notifications@github.com wrote:; > ; > A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the Makefile spit out) has definitely been updated since then.; > ; > Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon.; > ; > Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the --new-plugin-makefile output won't be a problem.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172192255
https://github.com/psi4/psi4/issues/214#issuecomment-172192255:631,Integrability,depend,dependencies,631,"I can work on this if you want. Also, Libplugin shouldn't be needed anymore. Justin. > On Jan 15, 2016, at 10:25 PM, Lori A. Burns notifications@github.com wrote:; > ; > A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the Makefile spit out) has definitely been updated since then.; > ; > Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon.; > ; > Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the --new-plugin-makefile output won't be a problem.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172192255
https://github.com/psi4/psi4/issues/214#issuecomment-172192255:253,Modifiability,plugin,plugin,253,"I can work on this if you want. Also, Libplugin shouldn't be needed anymore. Justin. > On Jan 15, 2016, at 10:25 PM, Lori A. Burns notifications@github.com wrote:; > ; > A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the Makefile spit out) has definitely been updated since then.; > ; > Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon.; > ; > Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the --new-plugin-makefile output won't be a problem.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172192255
https://github.com/psi4/psi4/issues/214#issuecomment-172192255:725,Modifiability,plugin,plugin,725,"I can work on this if you want. Also, Libplugin shouldn't be needed anymore. Justin. > On Jan 15, 2016, at 10:25 PM, Lori A. Burns notifications@github.com wrote:; > ; > A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the Makefile spit out) has definitely been updated since then.; > ; > Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon.; > ; > Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the --new-plugin-makefile output won't be a problem.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172192255
https://github.com/psi4/psi4/issues/214#issuecomment-172192255:812,Modifiability,plugin,plugin,812,"I can work on this if you want. Also, Libplugin shouldn't be needed anymore. Justin. > On Jan 15, 2016, at 10:25 PM, Lori A. Burns notifications@github.com wrote:; > ; > A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the Makefile spit out) has definitely been updated since then.; > ; > Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon.; > ; > Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the --new-plugin-makefile output won't be a problem.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172192255
https://github.com/psi4/psi4/issues/214#issuecomment-172192255:855,Modifiability,plugin,plugins,855,"I can work on this if you want. Also, Libplugin shouldn't be needed anymore. Justin. > On Jan 15, 2016, at 10:25 PM, Lori A. Burns notifications@github.com wrote:; > ; > A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the Makefile spit out) has definitely been updated since then.; > ; > Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon.; > ; > Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the --new-plugin-makefile output won't be a problem.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172192255
https://github.com/psi4/psi4/issues/214#issuecomment-172192255:921,Modifiability,plugin,plugin-makefile,921,"I can work on this if you want. Also, Libplugin shouldn't be needed anymore. Justin. > On Jan 15, 2016, at 10:25 PM, Lori A. Burns notifications@github.com wrote:; > ; > A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the Makefile spit out) has definitely been updated since then.; > ; > Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon.; > ; > Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the --new-plugin-makefile output won't be a problem.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172192255
https://github.com/psi4/psi4/issues/214#issuecomment-172235413:197,Deployability,install,installed,197,"I started in on this last night. The scheme for generating a Makefile from from a locally compiled psi4 exe can stay as it is, I think. Though we should make it so that it can be generated from an installed copy alone. Key missing component of that is that the main `$psi4-clone-dir/includes/*h` header files don't get installed at the moment. The `$psi4-clone-dir/src/*/*/*.h` files do. Do you think the lot should go behind a namespace like `$psi4-install-dir/includes/psi4/psifiles.h` (or `psi`)? Boost headers may also need to be installed. The other part is to make it so that people can check out plugins from the conda exe. I suppose the proper way to do this would be to have plugins under CMake control so that it would go off and detect their compiler/math situation. But instead I was thinking of sticking with Makefile and forcing the build environment– just setting it up so that generated plugins are ready to be compiled with conda gcc and math libs. The below is a start. ```; # Flags that were used to compile Psi4.; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug # set by $PREFIX; CXX = ${MCONDA}/bin/g++; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. How does that seem for a plan? @jturney, if you'd like to work on this, that'd be great. Or if you want me to do the conda parts, I'd be glad to do so.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172235413
https://github.com/psi4/psi4/issues/214#issuecomment-172235413:319,Deployability,install,installed,319,"I started in on this last night. The scheme for generating a Makefile from from a locally compiled psi4 exe can stay as it is, I think. Though we should make it so that it can be generated from an installed copy alone. Key missing component of that is that the main `$psi4-clone-dir/includes/*h` header files don't get installed at the moment. The `$psi4-clone-dir/src/*/*/*.h` files do. Do you think the lot should go behind a namespace like `$psi4-install-dir/includes/psi4/psifiles.h` (or `psi`)? Boost headers may also need to be installed. The other part is to make it so that people can check out plugins from the conda exe. I suppose the proper way to do this would be to have plugins under CMake control so that it would go off and detect their compiler/math situation. But instead I was thinking of sticking with Makefile and forcing the build environment– just setting it up so that generated plugins are ready to be compiled with conda gcc and math libs. The below is a start. ```; # Flags that were used to compile Psi4.; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug # set by $PREFIX; CXX = ${MCONDA}/bin/g++; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. How does that seem for a plan? @jturney, if you'd like to work on this, that'd be great. Or if you want me to do the conda parts, I'd be glad to do so.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172235413
https://github.com/psi4/psi4/issues/214#issuecomment-172235413:450,Deployability,install,install-dir,450,"I started in on this last night. The scheme for generating a Makefile from from a locally compiled psi4 exe can stay as it is, I think. Though we should make it so that it can be generated from an installed copy alone. Key missing component of that is that the main `$psi4-clone-dir/includes/*h` header files don't get installed at the moment. The `$psi4-clone-dir/src/*/*/*.h` files do. Do you think the lot should go behind a namespace like `$psi4-install-dir/includes/psi4/psifiles.h` (or `psi`)? Boost headers may also need to be installed. The other part is to make it so that people can check out plugins from the conda exe. I suppose the proper way to do this would be to have plugins under CMake control so that it would go off and detect their compiler/math situation. But instead I was thinking of sticking with Makefile and forcing the build environment– just setting it up so that generated plugins are ready to be compiled with conda gcc and math libs. The below is a start. ```; # Flags that were used to compile Psi4.; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug # set by $PREFIX; CXX = ${MCONDA}/bin/g++; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. How does that seem for a plan? @jturney, if you'd like to work on this, that'd be great. Or if you want me to do the conda parts, I'd be glad to do so.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172235413
https://github.com/psi4/psi4/issues/214#issuecomment-172235413:534,Deployability,install,installed,534,"I started in on this last night. The scheme for generating a Makefile from from a locally compiled psi4 exe can stay as it is, I think. Though we should make it so that it can be generated from an installed copy alone. Key missing component of that is that the main `$psi4-clone-dir/includes/*h` header files don't get installed at the moment. The `$psi4-clone-dir/src/*/*/*.h` files do. Do you think the lot should go behind a namespace like `$psi4-install-dir/includes/psi4/psifiles.h` (or `psi`)? Boost headers may also need to be installed. The other part is to make it so that people can check out plugins from the conda exe. I suppose the proper way to do this would be to have plugins under CMake control so that it would go off and detect their compiler/math situation. But instead I was thinking of sticking with Makefile and forcing the build environment– just setting it up so that generated plugins are ready to be compiled with conda gcc and math libs. The below is a start. ```; # Flags that were used to compile Psi4.; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug # set by $PREFIX; CXX = ${MCONDA}/bin/g++; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. How does that seem for a plan? @jturney, if you'd like to work on this, that'd be great. Or if you want me to do the conda parts, I'd be glad to do so.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172235413
https://github.com/psi4/psi4/issues/214#issuecomment-172235413:1071,Deployability,install,install,1071,"I started in on this last night. The scheme for generating a Makefile from from a locally compiled psi4 exe can stay as it is, I think. Though we should make it so that it can be generated from an installed copy alone. Key missing component of that is that the main `$psi4-clone-dir/includes/*h` header files don't get installed at the moment. The `$psi4-clone-dir/src/*/*/*.h` files do. Do you think the lot should go behind a namespace like `$psi4-install-dir/includes/psi4/psifiles.h` (or `psi`)? Boost headers may also need to be installed. The other part is to make it so that people can check out plugins from the conda exe. I suppose the proper way to do this would be to have plugins under CMake control so that it would go off and detect their compiler/math situation. But instead I was thinking of sticking with Makefile and forcing the build environment– just setting it up so that generated plugins are ready to be compiled with conda gcc and math libs. The below is a start. ```; # Flags that were used to compile Psi4.; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug # set by $PREFIX; CXX = ${MCONDA}/bin/g++; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. How does that seem for a plan? @jturney, if you'd like to work on this, that'd be great. Or if you want me to do the conda parts, I'd be glad to do so.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172235413
https://github.com/psi4/psi4/issues/214#issuecomment-172235413:603,Modifiability,plugin,plugins,603,"I started in on this last night. The scheme for generating a Makefile from from a locally compiled psi4 exe can stay as it is, I think. Though we should make it so that it can be generated from an installed copy alone. Key missing component of that is that the main `$psi4-clone-dir/includes/*h` header files don't get installed at the moment. The `$psi4-clone-dir/src/*/*/*.h` files do. Do you think the lot should go behind a namespace like `$psi4-install-dir/includes/psi4/psifiles.h` (or `psi`)? Boost headers may also need to be installed. The other part is to make it so that people can check out plugins from the conda exe. I suppose the proper way to do this would be to have plugins under CMake control so that it would go off and detect their compiler/math situation. But instead I was thinking of sticking with Makefile and forcing the build environment– just setting it up so that generated plugins are ready to be compiled with conda gcc and math libs. The below is a start. ```; # Flags that were used to compile Psi4.; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug # set by $PREFIX; CXX = ${MCONDA}/bin/g++; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. How does that seem for a plan? @jturney, if you'd like to work on this, that'd be great. Or if you want me to do the conda parts, I'd be glad to do so.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172235413
https://github.com/psi4/psi4/issues/214#issuecomment-172235413:684,Modifiability,plugin,plugins,684,"I started in on this last night. The scheme for generating a Makefile from from a locally compiled psi4 exe can stay as it is, I think. Though we should make it so that it can be generated from an installed copy alone. Key missing component of that is that the main `$psi4-clone-dir/includes/*h` header files don't get installed at the moment. The `$psi4-clone-dir/src/*/*/*.h` files do. Do you think the lot should go behind a namespace like `$psi4-install-dir/includes/psi4/psifiles.h` (or `psi`)? Boost headers may also need to be installed. The other part is to make it so that people can check out plugins from the conda exe. I suppose the proper way to do this would be to have plugins under CMake control so that it would go off and detect their compiler/math situation. But instead I was thinking of sticking with Makefile and forcing the build environment– just setting it up so that generated plugins are ready to be compiled with conda gcc and math libs. The below is a start. ```; # Flags that were used to compile Psi4.; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug # set by $PREFIX; CXX = ${MCONDA}/bin/g++; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. How does that seem for a plan? @jturney, if you'd like to work on this, that'd be great. Or if you want me to do the conda parts, I'd be glad to do so.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172235413
https://github.com/psi4/psi4/issues/214#issuecomment-172235413:903,Modifiability,plugin,plugins,903,"I started in on this last night. The scheme for generating a Makefile from from a locally compiled psi4 exe can stay as it is, I think. Though we should make it so that it can be generated from an installed copy alone. Key missing component of that is that the main `$psi4-clone-dir/includes/*h` header files don't get installed at the moment. The `$psi4-clone-dir/src/*/*/*.h` files do. Do you think the lot should go behind a namespace like `$psi4-install-dir/includes/psi4/psifiles.h` (or `psi`)? Boost headers may also need to be installed. The other part is to make it so that people can check out plugins from the conda exe. I suppose the proper way to do this would be to have plugins under CMake control so that it would go off and detect their compiler/math situation. But instead I was thinking of sticking with Makefile and forcing the build environment– just setting it up so that generated plugins are ready to be compiled with conda gcc and math libs. The below is a start. ```; # Flags that were used to compile Psi4.; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug # set by $PREFIX; CXX = ${MCONDA}/bin/g++; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. How does that seem for a plan? @jturney, if you'd like to work on this, that'd be great. Or if you want me to do the conda parts, I'd be glad to do so.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172235413
https://github.com/psi4/psi4/issues/214#issuecomment-172235413:740,Safety,detect,detect,740,"I started in on this last night. The scheme for generating a Makefile from from a locally compiled psi4 exe can stay as it is, I think. Though we should make it so that it can be generated from an installed copy alone. Key missing component of that is that the main `$psi4-clone-dir/includes/*h` header files don't get installed at the moment. The `$psi4-clone-dir/src/*/*/*.h` files do. Do you think the lot should go behind a namespace like `$psi4-install-dir/includes/psi4/psifiles.h` (or `psi`)? Boost headers may also need to be installed. The other part is to make it so that people can check out plugins from the conda exe. I suppose the proper way to do this would be to have plugins under CMake control so that it would go off and detect their compiler/math situation. But instead I was thinking of sticking with Makefile and forcing the build environment– just setting it up so that generated plugins are ready to be compiled with conda gcc and math libs. The below is a start. ```; # Flags that were used to compile Psi4.; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug # set by $PREFIX; CXX = ${MCONDA}/bin/g++; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. How does that seem for a plan? @jturney, if you'd like to work on this, that'd be great. Or if you want me to do the conda parts, I'd be glad to do so.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172235413
https://github.com/psi4/psi4/issues/214#issuecomment-172256746:11,Deployability,install,installs,11,"Ok, if one installs into a conda env the packages `psi4` (from us), `gcc`, and `openblas` (from default/anaconda channel), check out a new plugin from that psi4 exe, and modify the Makefile as below, it should work. . ```; # miniconda environment; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug; # Flags that were used to compile Psi4.; CXX = ${MCONDA}/bin/g++; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; LDFLAGS =; LDFLAGS=""-Wl,-rpath,${MCONDA}/lib/""; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. more explicitly,. ```; conda create -n p4plug2 psi4; source activate p4plug2; cd p4plug2 # may vary; just get into the miniconda/envs/p4plug2 directory; conda install gcc # 4.8.5-3; psi4 --new-plugin testplug; cd testplug; vi Makefile # copy in Makefile mods above, changing MCONDA variable; cp -pR ../../p4plug/include/psi4/ ../include/ # copy in a set of psi4 headers; make; psi4 # run sample input.dat; ldd testplug.so ; linux-vdso.so.1 => (0x00007fff969fe000); libstdc++.so.6 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libstdc++.so.6 (0x00007f763d984000); libm.so.6 => /lib64/libm.so.6 (0x00007f763d65c000); libgcc_s.so.1 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libgcc_s.so.1 (0x00007f763d446000); libc.so.6 => /lib64/libc.so.6 (0x00007f763d085000); /lib64/ld-linux-x86-64.so.2 (0x00007f763de9e000); ```. @jturney, if you approve the plan, do you want to fix the includes installation and",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172256746
https://github.com/psi4/psi4/issues/214#issuecomment-172256746:285,Deployability,install,install,285,"Ok, if one installs into a conda env the packages `psi4` (from us), `gcc`, and `openblas` (from default/anaconda channel), check out a new plugin from that psi4 exe, and modify the Makefile as below, it should work. . ```; # miniconda environment; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug; # Flags that were used to compile Psi4.; CXX = ${MCONDA}/bin/g++; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; LDFLAGS =; LDFLAGS=""-Wl,-rpath,${MCONDA}/lib/""; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. more explicitly,. ```; conda create -n p4plug2 psi4; source activate p4plug2; cd p4plug2 # may vary; just get into the miniconda/envs/p4plug2 directory; conda install gcc # 4.8.5-3; psi4 --new-plugin testplug; cd testplug; vi Makefile # copy in Makefile mods above, changing MCONDA variable; cp -pR ../../p4plug/include/psi4/ ../include/ # copy in a set of psi4 headers; make; psi4 # run sample input.dat; ldd testplug.so ; linux-vdso.so.1 => (0x00007fff969fe000); libstdc++.so.6 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libstdc++.so.6 (0x00007f763d984000); libm.so.6 => /lib64/libm.so.6 (0x00007f763d65c000); libgcc_s.so.1 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libgcc_s.so.1 (0x00007f763d446000); libc.so.6 => /lib64/libc.so.6 (0x00007f763d085000); /lib64/ld-linux-x86-64.so.2 (0x00007f763de9e000); ```. @jturney, if you approve the plan, do you want to fix the includes installation and",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172256746
https://github.com/psi4/psi4/issues/214#issuecomment-172256746:1219,Deployability,install,install,1219,"gin from that psi4 exe, and modify the Makefile as below, it should work. . ```; # miniconda environment; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug; # Flags that were used to compile Psi4.; CXX = ${MCONDA}/bin/g++; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; LDFLAGS =; LDFLAGS=""-Wl,-rpath,${MCONDA}/lib/""; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. more explicitly,. ```; conda create -n p4plug2 psi4; source activate p4plug2; cd p4plug2 # may vary; just get into the miniconda/envs/p4plug2 directory; conda install gcc # 4.8.5-3; psi4 --new-plugin testplug; cd testplug; vi Makefile # copy in Makefile mods above, changing MCONDA variable; cp -pR ../../p4plug/include/psi4/ ../include/ # copy in a set of psi4 headers; make; psi4 # run sample input.dat; ldd testplug.so ; linux-vdso.so.1 => (0x00007fff969fe000); libstdc++.so.6 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libstdc++.so.6 (0x00007f763d984000); libm.so.6 => /lib64/libm.so.6 (0x00007f763d65c000); libgcc_s.so.1 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libgcc_s.so.1 (0x00007f763d446000); libc.so.6 => /lib64/libc.so.6 (0x00007f763d085000); /lib64/ld-linux-x86-64.so.2 (0x00007f763de9e000); ```. @jturney, if you approve the plan, do you want to fix the includes installation and trigger an alternate Makefile.template if binary?. Of course, I haven't tried any plugin operation that actually involves blas/lapack calls.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172256746
https://github.com/psi4/psi4/issues/214#issuecomment-172256746:1571,Deployability,install,install,1571,"gin from that psi4 exe, and modify the Makefile as below, it should work. . ```; # miniconda environment; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug; # Flags that were used to compile Psi4.; CXX = ${MCONDA}/bin/g++; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; LDFLAGS =; LDFLAGS=""-Wl,-rpath,${MCONDA}/lib/""; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. more explicitly,. ```; conda create -n p4plug2 psi4; source activate p4plug2; cd p4plug2 # may vary; just get into the miniconda/envs/p4plug2 directory; conda install gcc # 4.8.5-3; psi4 --new-plugin testplug; cd testplug; vi Makefile # copy in Makefile mods above, changing MCONDA variable; cp -pR ../../p4plug/include/psi4/ ../include/ # copy in a set of psi4 headers; make; psi4 # run sample input.dat; ldd testplug.so ; linux-vdso.so.1 => (0x00007fff969fe000); libstdc++.so.6 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libstdc++.so.6 (0x00007f763d984000); libm.so.6 => /lib64/libm.so.6 (0x00007f763d65c000); libgcc_s.so.1 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libgcc_s.so.1 (0x00007f763d446000); libc.so.6 => /lib64/libc.so.6 (0x00007f763d085000); /lib64/ld-linux-x86-64.so.2 (0x00007f763de9e000); ```. @jturney, if you approve the plan, do you want to fix the includes installation and trigger an alternate Makefile.template if binary?. Of course, I haven't tried any plugin operation that actually involves blas/lapack calls.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172256746
https://github.com/psi4/psi4/issues/214#issuecomment-172256746:1740,Deployability,install,install,1740,"gin from that psi4 exe, and modify the Makefile as below, it should work. . ```; # miniconda environment; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug; # Flags that were used to compile Psi4.; CXX = ${MCONDA}/bin/g++; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; LDFLAGS =; LDFLAGS=""-Wl,-rpath,${MCONDA}/lib/""; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. more explicitly,. ```; conda create -n p4plug2 psi4; source activate p4plug2; cd p4plug2 # may vary; just get into the miniconda/envs/p4plug2 directory; conda install gcc # 4.8.5-3; psi4 --new-plugin testplug; cd testplug; vi Makefile # copy in Makefile mods above, changing MCONDA variable; cp -pR ../../p4plug/include/psi4/ ../include/ # copy in a set of psi4 headers; make; psi4 # run sample input.dat; ldd testplug.so ; linux-vdso.so.1 => (0x00007fff969fe000); libstdc++.so.6 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libstdc++.so.6 (0x00007f763d984000); libm.so.6 => /lib64/libm.so.6 (0x00007f763d65c000); libgcc_s.so.1 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libgcc_s.so.1 (0x00007f763d446000); libc.so.6 => /lib64/libc.so.6 (0x00007f763d085000); /lib64/ld-linux-x86-64.so.2 (0x00007f763de9e000); ```. @jturney, if you approve the plan, do you want to fix the includes installation and trigger an alternate Makefile.template if binary?. Of course, I haven't tried any plugin operation that actually involves blas/lapack calls.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172256746
https://github.com/psi4/psi4/issues/214#issuecomment-172256746:1985,Deployability,install,installation,1985,"gin from that psi4 exe, and modify the Makefile as below, it should work. . ```; # miniconda environment; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug; # Flags that were used to compile Psi4.; CXX = ${MCONDA}/bin/g++; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; LDFLAGS =; LDFLAGS=""-Wl,-rpath,${MCONDA}/lib/""; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. more explicitly,. ```; conda create -n p4plug2 psi4; source activate p4plug2; cd p4plug2 # may vary; just get into the miniconda/envs/p4plug2 directory; conda install gcc # 4.8.5-3; psi4 --new-plugin testplug; cd testplug; vi Makefile # copy in Makefile mods above, changing MCONDA variable; cp -pR ../../p4plug/include/psi4/ ../include/ # copy in a set of psi4 headers; make; psi4 # run sample input.dat; ldd testplug.so ; linux-vdso.so.1 => (0x00007fff969fe000); libstdc++.so.6 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libstdc++.so.6 (0x00007f763d984000); libm.so.6 => /lib64/libm.so.6 (0x00007f763d65c000); libgcc_s.so.1 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libgcc_s.so.1 (0x00007f763d446000); libc.so.6 => /lib64/libc.so.6 (0x00007f763d085000); /lib64/ld-linux-x86-64.so.2 (0x00007f763de9e000); ```. @jturney, if you approve the plan, do you want to fix the includes installation and trigger an alternate Makefile.template if binary?. Of course, I haven't tried any plugin operation that actually involves blas/lapack calls.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172256746
https://github.com/psi4/psi4/issues/214#issuecomment-172256746:139,Modifiability,plugin,plugin,139,"Ok, if one installs into a conda env the packages `psi4` (from us), `gcc`, and `openblas` (from default/anaconda channel), check out a new plugin from that psi4 exe, and modify the Makefile as below, it should work. . ```; # miniconda environment; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug; # Flags that were used to compile Psi4.; CXX = ${MCONDA}/bin/g++; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; LDFLAGS =; LDFLAGS=""-Wl,-rpath,${MCONDA}/lib/""; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. more explicitly,. ```; conda create -n p4plug2 psi4; source activate p4plug2; cd p4plug2 # may vary; just get into the miniconda/envs/p4plug2 directory; conda install gcc # 4.8.5-3; psi4 --new-plugin testplug; cd testplug; vi Makefile # copy in Makefile mods above, changing MCONDA variable; cp -pR ../../p4plug/include/psi4/ ../include/ # copy in a set of psi4 headers; make; psi4 # run sample input.dat; ldd testplug.so ; linux-vdso.so.1 => (0x00007fff969fe000); libstdc++.so.6 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libstdc++.so.6 (0x00007f763d984000); libm.so.6 => /lib64/libm.so.6 (0x00007f763d65c000); libgcc_s.so.1 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libgcc_s.so.1 (0x00007f763d446000); libc.so.6 => /lib64/libc.so.6 (0x00007f763d085000); /lib64/ld-linux-x86-64.so.2 (0x00007f763de9e000); ```. @jturney, if you approve the plan, do you want to fix the includes installation and",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172256746
https://github.com/psi4/psi4/issues/214#issuecomment-172256746:1253,Modifiability,plugin,plugin,1253,"gin from that psi4 exe, and modify the Makefile as below, it should work. . ```; # miniconda environment; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug; # Flags that were used to compile Psi4.; CXX = ${MCONDA}/bin/g++; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; LDFLAGS =; LDFLAGS=""-Wl,-rpath,${MCONDA}/lib/""; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. more explicitly,. ```; conda create -n p4plug2 psi4; source activate p4plug2; cd p4plug2 # may vary; just get into the miniconda/envs/p4plug2 directory; conda install gcc # 4.8.5-3; psi4 --new-plugin testplug; cd testplug; vi Makefile # copy in Makefile mods above, changing MCONDA variable; cp -pR ../../p4plug/include/psi4/ ../include/ # copy in a set of psi4 headers; make; psi4 # run sample input.dat; ldd testplug.so ; linux-vdso.so.1 => (0x00007fff969fe000); libstdc++.so.6 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libstdc++.so.6 (0x00007f763d984000); libm.so.6 => /lib64/libm.so.6 (0x00007f763d65c000); libgcc_s.so.1 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libgcc_s.so.1 (0x00007f763d446000); libc.so.6 => /lib64/libc.so.6 (0x00007f763d085000); /lib64/ld-linux-x86-64.so.2 (0x00007f763de9e000); ```. @jturney, if you approve the plan, do you want to fix the includes installation and trigger an alternate Makefile.template if binary?. Of course, I haven't tried any plugin operation that actually involves blas/lapack calls.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172256746
https://github.com/psi4/psi4/issues/214#issuecomment-172256746:1342,Modifiability,variab,variable,1342,"gin from that psi4 exe, and modify the Makefile as below, it should work. . ```; # miniconda environment; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug; # Flags that were used to compile Psi4.; CXX = ${MCONDA}/bin/g++; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; LDFLAGS =; LDFLAGS=""-Wl,-rpath,${MCONDA}/lib/""; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. more explicitly,. ```; conda create -n p4plug2 psi4; source activate p4plug2; cd p4plug2 # may vary; just get into the miniconda/envs/p4plug2 directory; conda install gcc # 4.8.5-3; psi4 --new-plugin testplug; cd testplug; vi Makefile # copy in Makefile mods above, changing MCONDA variable; cp -pR ../../p4plug/include/psi4/ ../include/ # copy in a set of psi4 headers; make; psi4 # run sample input.dat; ldd testplug.so ; linux-vdso.so.1 => (0x00007fff969fe000); libstdc++.so.6 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libstdc++.so.6 (0x00007f763d984000); libm.so.6 => /lib64/libm.so.6 (0x00007f763d65c000); libgcc_s.so.1 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libgcc_s.so.1 (0x00007f763d446000); libc.so.6 => /lib64/libc.so.6 (0x00007f763d085000); /lib64/ld-linux-x86-64.so.2 (0x00007f763de9e000); ```. @jturney, if you approve the plan, do you want to fix the includes installation and trigger an alternate Makefile.template if binary?. Of course, I haven't tried any plugin operation that actually involves blas/lapack calls.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172256746
https://github.com/psi4/psi4/issues/214#issuecomment-172256746:2084,Modifiability,plugin,plugin,2084,"gin from that psi4 exe, and modify the Makefile as below, it should work. . ```; # miniconda environment; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug; # Flags that were used to compile Psi4.; CXX = ${MCONDA}/bin/g++; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; LDFLAGS =; LDFLAGS=""-Wl,-rpath,${MCONDA}/lib/""; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. more explicitly,. ```; conda create -n p4plug2 psi4; source activate p4plug2; cd p4plug2 # may vary; just get into the miniconda/envs/p4plug2 directory; conda install gcc # 4.8.5-3; psi4 --new-plugin testplug; cd testplug; vi Makefile # copy in Makefile mods above, changing MCONDA variable; cp -pR ../../p4plug/include/psi4/ ../include/ # copy in a set of psi4 headers; make; psi4 # run sample input.dat; ldd testplug.so ; linux-vdso.so.1 => (0x00007fff969fe000); libstdc++.so.6 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libstdc++.so.6 (0x00007f763d984000); libm.so.6 => /lib64/libm.so.6 (0x00007f763d65c000); libgcc_s.so.1 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libgcc_s.so.1 (0x00007f763d446000); libc.so.6 => /lib64/libc.so.6 (0x00007f763d085000); /lib64/ld-linux-x86-64.so.2 (0x00007f763de9e000); ```. @jturney, if you approve the plan, do you want to fix the includes installation and trigger an alternate Makefile.template if binary?. Of course, I haven't tried any plugin operation that actually involves blas/lapack calls.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172256746
https://github.com/psi4/psi4/issues/214#issuecomment-172256746:1260,Testability,test,testplug,1260,"gin from that psi4 exe, and modify the Makefile as below, it should work. . ```; # miniconda environment; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug; # Flags that were used to compile Psi4.; CXX = ${MCONDA}/bin/g++; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; LDFLAGS =; LDFLAGS=""-Wl,-rpath,${MCONDA}/lib/""; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. more explicitly,. ```; conda create -n p4plug2 psi4; source activate p4plug2; cd p4plug2 # may vary; just get into the miniconda/envs/p4plug2 directory; conda install gcc # 4.8.5-3; psi4 --new-plugin testplug; cd testplug; vi Makefile # copy in Makefile mods above, changing MCONDA variable; cp -pR ../../p4plug/include/psi4/ ../include/ # copy in a set of psi4 headers; make; psi4 # run sample input.dat; ldd testplug.so ; linux-vdso.so.1 => (0x00007fff969fe000); libstdc++.so.6 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libstdc++.so.6 (0x00007f763d984000); libm.so.6 => /lib64/libm.so.6 (0x00007f763d65c000); libgcc_s.so.1 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libgcc_s.so.1 (0x00007f763d446000); libc.so.6 => /lib64/libc.so.6 (0x00007f763d085000); /lib64/ld-linux-x86-64.so.2 (0x00007f763de9e000); ```. @jturney, if you approve the plan, do you want to fix the includes installation and trigger an alternate Makefile.template if binary?. Of course, I haven't tried any plugin operation that actually involves blas/lapack calls.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172256746
https://github.com/psi4/psi4/issues/214#issuecomment-172256746:1273,Testability,test,testplug,1273,"gin from that psi4 exe, and modify the Makefile as below, it should work. . ```; # miniconda environment; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug; # Flags that were used to compile Psi4.; CXX = ${MCONDA}/bin/g++; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; LDFLAGS =; LDFLAGS=""-Wl,-rpath,${MCONDA}/lib/""; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. more explicitly,. ```; conda create -n p4plug2 psi4; source activate p4plug2; cd p4plug2 # may vary; just get into the miniconda/envs/p4plug2 directory; conda install gcc # 4.8.5-3; psi4 --new-plugin testplug; cd testplug; vi Makefile # copy in Makefile mods above, changing MCONDA variable; cp -pR ../../p4plug/include/psi4/ ../include/ # copy in a set of psi4 headers; make; psi4 # run sample input.dat; ldd testplug.so ; linux-vdso.so.1 => (0x00007fff969fe000); libstdc++.so.6 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libstdc++.so.6 (0x00007f763d984000); libm.so.6 => /lib64/libm.so.6 (0x00007f763d65c000); libgcc_s.so.1 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libgcc_s.so.1 (0x00007f763d446000); libc.so.6 => /lib64/libc.so.6 (0x00007f763d085000); /lib64/ld-linux-x86-64.so.2 (0x00007f763de9e000); ```. @jturney, if you approve the plan, do you want to fix the includes installation and trigger an alternate Makefile.template if binary?. Of course, I haven't tried any plugin operation that actually involves blas/lapack calls.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172256746
https://github.com/psi4/psi4/issues/214#issuecomment-172256746:1470,Testability,test,testplug,1470,"gin from that psi4 exe, and modify the Makefile as below, it should work. . ```; # miniconda environment; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug; # Flags that were used to compile Psi4.; CXX = ${MCONDA}/bin/g++; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; LDFLAGS =; LDFLAGS=""-Wl,-rpath,${MCONDA}/lib/""; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. more explicitly,. ```; conda create -n p4plug2 psi4; source activate p4plug2; cd p4plug2 # may vary; just get into the miniconda/envs/p4plug2 directory; conda install gcc # 4.8.5-3; psi4 --new-plugin testplug; cd testplug; vi Makefile # copy in Makefile mods above, changing MCONDA variable; cp -pR ../../p4plug/include/psi4/ ../include/ # copy in a set of psi4 headers; make; psi4 # run sample input.dat; ldd testplug.so ; linux-vdso.so.1 => (0x00007fff969fe000); libstdc++.so.6 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libstdc++.so.6 (0x00007f763d984000); libm.so.6 => /lib64/libm.so.6 (0x00007f763d65c000); libgcc_s.so.1 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libgcc_s.so.1 (0x00007f763d446000); libc.so.6 => /lib64/libc.so.6 (0x00007f763d085000); /lib64/ld-linux-x86-64.so.2 (0x00007f763de9e000); ```. @jturney, if you approve the plan, do you want to fix the includes installation and trigger an alternate Makefile.template if binary?. Of course, I haven't tried any plugin operation that actually involves blas/lapack calls.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172256746
https://github.com/psi4/psi4/issues/214#issuecomment-172263911:296,Modifiability,config,configure,296,"For my use case, I have actually not been using the `psi4`-generated Makefile directly. What I've been doing is generating the Makefile in a temporary directory and parsing it to extract the `CXXDEFS` / `CXXFLAGS`, linker options, include directories, and so forth, and using that information to configure my own build tool. So from this perspective, what would be really useful is something that lets me get that information out. For example, `libnetcdf` (https://packages.debian.org/sid/libnetcdf-dev) always ships with an executable called `nc-config` that you can query for this information. So if possible (feature request, I guess), something similar for the plugin mechanism would be ideal. The makefile is a good idea I think for many users, but sometimes is not flexible enough. ```; $ nc-config --cflags; -I/Users/rmcgibbo/miniconda/envs/3.5/include; rmcgibbo@MacBook-Pro ~ (3.5); $ nc-config --libs; -L/Users/rmcgibbo/miniconda/envs/3.5/lib -lnetcdf; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172263911
https://github.com/psi4/psi4/issues/214#issuecomment-172263911:547,Modifiability,config,config,547,"For my use case, I have actually not been using the `psi4`-generated Makefile directly. What I've been doing is generating the Makefile in a temporary directory and parsing it to extract the `CXXDEFS` / `CXXFLAGS`, linker options, include directories, and so forth, and using that information to configure my own build tool. So from this perspective, what would be really useful is something that lets me get that information out. For example, `libnetcdf` (https://packages.debian.org/sid/libnetcdf-dev) always ships with an executable called `nc-config` that you can query for this information. So if possible (feature request, I guess), something similar for the plugin mechanism would be ideal. The makefile is a good idea I think for many users, but sometimes is not flexible enough. ```; $ nc-config --cflags; -I/Users/rmcgibbo/miniconda/envs/3.5/include; rmcgibbo@MacBook-Pro ~ (3.5); $ nc-config --libs; -L/Users/rmcgibbo/miniconda/envs/3.5/lib -lnetcdf; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172263911
https://github.com/psi4/psi4/issues/214#issuecomment-172263911:665,Modifiability,plugin,plugin,665,"For my use case, I have actually not been using the `psi4`-generated Makefile directly. What I've been doing is generating the Makefile in a temporary directory and parsing it to extract the `CXXDEFS` / `CXXFLAGS`, linker options, include directories, and so forth, and using that information to configure my own build tool. So from this perspective, what would be really useful is something that lets me get that information out. For example, `libnetcdf` (https://packages.debian.org/sid/libnetcdf-dev) always ships with an executable called `nc-config` that you can query for this information. So if possible (feature request, I guess), something similar for the plugin mechanism would be ideal. The makefile is a good idea I think for many users, but sometimes is not flexible enough. ```; $ nc-config --cflags; -I/Users/rmcgibbo/miniconda/envs/3.5/include; rmcgibbo@MacBook-Pro ~ (3.5); $ nc-config --libs; -L/Users/rmcgibbo/miniconda/envs/3.5/lib -lnetcdf; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172263911
https://github.com/psi4/psi4/issues/214#issuecomment-172263911:771,Modifiability,flexible,flexible,771,"For my use case, I have actually not been using the `psi4`-generated Makefile directly. What I've been doing is generating the Makefile in a temporary directory and parsing it to extract the `CXXDEFS` / `CXXFLAGS`, linker options, include directories, and so forth, and using that information to configure my own build tool. So from this perspective, what would be really useful is something that lets me get that information out. For example, `libnetcdf` (https://packages.debian.org/sid/libnetcdf-dev) always ships with an executable called `nc-config` that you can query for this information. So if possible (feature request, I guess), something similar for the plugin mechanism would be ideal. The makefile is a good idea I think for many users, but sometimes is not flexible enough. ```; $ nc-config --cflags; -I/Users/rmcgibbo/miniconda/envs/3.5/include; rmcgibbo@MacBook-Pro ~ (3.5); $ nc-config --libs; -L/Users/rmcgibbo/miniconda/envs/3.5/lib -lnetcdf; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172263911
https://github.com/psi4/psi4/issues/214#issuecomment-172263911:798,Modifiability,config,config,798,"For my use case, I have actually not been using the `psi4`-generated Makefile directly. What I've been doing is generating the Makefile in a temporary directory and parsing it to extract the `CXXDEFS` / `CXXFLAGS`, linker options, include directories, and so forth, and using that information to configure my own build tool. So from this perspective, what would be really useful is something that lets me get that information out. For example, `libnetcdf` (https://packages.debian.org/sid/libnetcdf-dev) always ships with an executable called `nc-config` that you can query for this information. So if possible (feature request, I guess), something similar for the plugin mechanism would be ideal. The makefile is a good idea I think for many users, but sometimes is not flexible enough. ```; $ nc-config --cflags; -I/Users/rmcgibbo/miniconda/envs/3.5/include; rmcgibbo@MacBook-Pro ~ (3.5); $ nc-config --libs; -L/Users/rmcgibbo/miniconda/envs/3.5/lib -lnetcdf; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172263911
https://github.com/psi4/psi4/issues/214#issuecomment-172263911:896,Modifiability,config,config,896,"For my use case, I have actually not been using the `psi4`-generated Makefile directly. What I've been doing is generating the Makefile in a temporary directory and parsing it to extract the `CXXDEFS` / `CXXFLAGS`, linker options, include directories, and so forth, and using that information to configure my own build tool. So from this perspective, what would be really useful is something that lets me get that information out. For example, `libnetcdf` (https://packages.debian.org/sid/libnetcdf-dev) always ships with an executable called `nc-config` that you can query for this information. So if possible (feature request, I guess), something similar for the plugin mechanism would be ideal. The makefile is a good idea I think for many users, but sometimes is not flexible enough. ```; $ nc-config --cflags; -I/Users/rmcgibbo/miniconda/envs/3.5/include; rmcgibbo@MacBook-Pro ~ (3.5); $ nc-config --libs; -L/Users/rmcgibbo/miniconda/envs/3.5/lib -lnetcdf; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172263911
https://github.com/psi4/psi4/issues/214#issuecomment-172279516:110,Modifiability,config,config,110,"It's not necessary to use the conda `gcc`– just that makes for a predictable `Makefile`. I'll investigate `nc-config`. It always helps to know use cases, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172279516
https://github.com/psi4/psi4/issues/214#issuecomment-172279516:65,Safety,predict,predictable,65,"It's not necessary to use the conda `gcc`– just that makes for a predictable `Makefile`. I'll investigate `nc-config`. It always helps to know use cases, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172279516
https://github.com/psi4/psi4/issues/214#issuecomment-172287504:32,Modifiability,plugin,plugin,32,"@loriab, okay, I think I got my plugin compiling against the latest psi4 conda build. The code is [here](https://github.com/rmcgibbo/resp2) and the build log on Travis-CI [here](https://travis-ci.org/rmcgibbo/resp2), if you're curious, at least about the configure/make stuff.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172287504
https://github.com/psi4/psi4/issues/214#issuecomment-172287504:255,Modifiability,config,configure,255,"@loriab, okay, I think I got my plugin compiling against the latest psi4 conda build. The code is [here](https://github.com/rmcgibbo/resp2) and the build log on Travis-CI [here](https://travis-ci.org/rmcgibbo/resp2), if you're curious, at least about the configure/make stuff.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172287504
https://github.com/psi4/psi4/issues/214#issuecomment-172287504:154,Testability,log,log,154,"@loriab, okay, I think I got my plugin compiling against the latest psi4 conda build. The code is [here](https://github.com/rmcgibbo/resp2) and the build log on Travis-CI [here](https://travis-ci.org/rmcgibbo/resp2), if you're curious, at least about the configure/make stuff.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172287504
https://github.com/psi4/psi4/issues/214#issuecomment-172395303:191,Deployability,install,installation,191,"Nice! If you're allowing general use, that might even cross off the lingering 'add RESP to psi4' ticket (https://github.com/psi4/psi4/issues/20). I've added a `bin/psi4-config` script to the installation, final contents (for the binary) below. Binary nightly build is off for the moment, because I'm working on it for other reasons, but you can see if something like the below is what you'd like. I'm concerned that it's got a lot of full paths and binary-specific (static) flags and libraries, but perhaps it can be made useful with some modifications. ``` py; #!/usr/bin/env python; # vim:ft=python. import sys; from collections import OrderedDict. def main(argv):; info = OrderedDict(); info['--cc'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icc'; info['--cxx'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icpc' # aka PLUGIN_CXX; info['--fc'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/ifort'; info['--version'] = psiver; info['--githash'] = githash; if 'ON' == 'ON':; info['--prefix'] = '/opt/anaconda1anaconda2anaconda3'; else:; info['--prefix'] = '/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl'; info['--top-level-psi4-dir'] = '/scratch/cdsgroup/conda-builds/work'; info['--max-am-eri'] = '4'; info['--python-version'] = '2.7'; info['--has-pcmsolver'] = 'ON'; info['--has-chemps2'] = 'ON'; info['--includes'] = '-I/scratch/cdsgroup/conda-builds/work/build/interfaces/include -I/scratch/cdsgroup/conda-builds/work/build/src/lib -I/scratch/cdsgroup/conda-builds/work/src/lib -I/scratch/cdsgroup/conda-builds/work/include -I/scratch/cdsgroup/conda-builds/work/build/include -I/scratch/cdsgroup/conda-builds/work/build/boost/include -I/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include' # aka PLUGIN_INCLUDES; info['--defines'] = '-DHAVE_PCMSOLVER -DHAVE_DKH -",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172395303
https://github.com/psi4/psi4/issues/214#issuecomment-172395303:1178,Deployability,install,install,1178,"si4-config` script to the installation, final contents (for the binary) below. Binary nightly build is off for the moment, because I'm working on it for other reasons, but you can see if something like the below is what you'd like. I'm concerned that it's got a lot of full paths and binary-specific (static) flags and libraries, but perhaps it can be made useful with some modifications. ``` py; #!/usr/bin/env python; # vim:ft=python. import sys; from collections import OrderedDict. def main(argv):; info = OrderedDict(); info['--cc'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icc'; info['--cxx'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icpc' # aka PLUGIN_CXX; info['--fc'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/ifort'; info['--version'] = psiver; info['--githash'] = githash; if 'ON' == 'ON':; info['--prefix'] = '/opt/anaconda1anaconda2anaconda3'; else:; info['--prefix'] = '/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl'; info['--top-level-psi4-dir'] = '/scratch/cdsgroup/conda-builds/work'; info['--max-am-eri'] = '4'; info['--python-version'] = '2.7'; info['--has-pcmsolver'] = 'ON'; info['--has-chemps2'] = 'ON'; info['--includes'] = '-I/scratch/cdsgroup/conda-builds/work/build/interfaces/include -I/scratch/cdsgroup/conda-builds/work/build/src/lib -I/scratch/cdsgroup/conda-builds/work/src/lib -I/scratch/cdsgroup/conda-builds/work/include -I/scratch/cdsgroup/conda-builds/work/build/include -I/scratch/cdsgroup/conda-builds/work/build/boost/include -I/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include' # aka PLUGIN_INCLUDES; info['--defines'] = '-DHAVE_PCMSOLVER -DHAVE_DKH -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DHAVE_MKL_LAPACK -DHAVE_MKL_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172395303
https://github.com/psi4/psi4/issues/214#issuecomment-172395303:1796,Deployability,install,install,1796, from collections import OrderedDict. def main(argv):; info = OrderedDict(); info['--cc'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icc'; info['--cxx'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icpc' # aka PLUGIN_CXX; info['--fc'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/ifort'; info['--version'] = psiver; info['--githash'] = githash; if 'ON' == 'ON':; info['--prefix'] = '/opt/anaconda1anaconda2anaconda3'; else:; info['--prefix'] = '/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl'; info['--top-level-psi4-dir'] = '/scratch/cdsgroup/conda-builds/work'; info['--max-am-eri'] = '4'; info['--python-version'] = '2.7'; info['--has-pcmsolver'] = 'ON'; info['--has-chemps2'] = 'ON'; info['--includes'] = '-I/scratch/cdsgroup/conda-builds/work/build/interfaces/include -I/scratch/cdsgroup/conda-builds/work/build/src/lib -I/scratch/cdsgroup/conda-builds/work/src/lib -I/scratch/cdsgroup/conda-builds/work/include -I/scratch/cdsgroup/conda-builds/work/build/include -I/scratch/cdsgroup/conda-builds/work/build/boost/include -I/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include' # aka PLUGIN_INCLUDES; info['--defines'] = '-DHAVE_PCMSOLVER -DHAVE_DKH -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DHAVE_MKL_LAPACK -DHAVE_MKL_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H'; info['--ldflags'] = ' -static-libstdc++ -static-libgcc -static-intel -wd10237 -static-intel' # aka PLUGIN_LDFLAGS. skipping LIBC_INTERJECT; info['--flags'] = '-DRESTRICT=,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172395303
https://github.com/psi4/psi4/issues/214#issuecomment-172395303:1493,Integrability,interface,interfaces,1493, from collections import OrderedDict. def main(argv):; info = OrderedDict(); info['--cc'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icc'; info['--cxx'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icpc' # aka PLUGIN_CXX; info['--fc'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/ifort'; info['--version'] = psiver; info['--githash'] = githash; if 'ON' == 'ON':; info['--prefix'] = '/opt/anaconda1anaconda2anaconda3'; else:; info['--prefix'] = '/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl'; info['--top-level-psi4-dir'] = '/scratch/cdsgroup/conda-builds/work'; info['--max-am-eri'] = '4'; info['--python-version'] = '2.7'; info['--has-pcmsolver'] = 'ON'; info['--has-chemps2'] = 'ON'; info['--includes'] = '-I/scratch/cdsgroup/conda-builds/work/build/interfaces/include -I/scratch/cdsgroup/conda-builds/work/build/src/lib -I/scratch/cdsgroup/conda-builds/work/src/lib -I/scratch/cdsgroup/conda-builds/work/include -I/scratch/cdsgroup/conda-builds/work/build/include -I/scratch/cdsgroup/conda-builds/work/build/boost/include -I/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include' # aka PLUGIN_INCLUDES; info['--defines'] = '-DHAVE_PCMSOLVER -DHAVE_DKH -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DHAVE_MKL_LAPACK -DHAVE_MKL_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H'; info['--ldflags'] = ' -static-libstdc++ -static-libgcc -static-intel -wd10237 -static-intel' # aka PLUGIN_LDFLAGS. skipping LIBC_INTERJECT; info['--flags'] = '-DRESTRICT=,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172395303
https://github.com/psi4/psi4/issues/214#issuecomment-172395303:169,Modifiability,config,config,169,"Nice! If you're allowing general use, that might even cross off the lingering 'add RESP to psi4' ticket (https://github.com/psi4/psi4/issues/20). I've added a `bin/psi4-config` script to the installation, final contents (for the binary) below. Binary nightly build is off for the moment, because I'm working on it for other reasons, but you can see if something like the below is what you'd like. I'm concerned that it's got a lot of full paths and binary-specific (static) flags and libraries, but perhaps it can be made useful with some modifications. ``` py; #!/usr/bin/env python; # vim:ft=python. import sys; from collections import OrderedDict. def main(argv):; info = OrderedDict(); info['--cc'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icc'; info['--cxx'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icpc' # aka PLUGIN_CXX; info['--fc'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/ifort'; info['--version'] = psiver; info['--githash'] = githash; if 'ON' == 'ON':; info['--prefix'] = '/opt/anaconda1anaconda2anaconda3'; else:; info['--prefix'] = '/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl'; info['--top-level-psi4-dir'] = '/scratch/cdsgroup/conda-builds/work'; info['--max-am-eri'] = '4'; info['--python-version'] = '2.7'; info['--has-pcmsolver'] = 'ON'; info['--has-chemps2'] = 'ON'; info['--includes'] = '-I/scratch/cdsgroup/conda-builds/work/build/interfaces/include -I/scratch/cdsgroup/conda-builds/work/build/src/lib -I/scratch/cdsgroup/conda-builds/work/src/lib -I/scratch/cdsgroup/conda-builds/work/include -I/scratch/cdsgroup/conda-builds/work/build/include -I/scratch/cdsgroup/conda-builds/work/build/boost/include -I/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include' # aka PLUGIN_INCLUDES; info['--defines'] = '-DHAVE_PCMSOLVER -DHAVE_DKH -",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172395303
https://github.com/psi4/psi4/issues/214#issuecomment-172395303:3433,Modifiability,config,config,3433,"/include -I/usr/include -I/usr/include' # aka PLUGIN_INCLUDES; info['--defines'] = '-DHAVE_PCMSOLVER -DHAVE_DKH -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DHAVE_MKL_LAPACK -DHAVE_MKL_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H'; info['--ldflags'] = ' -static-libstdc++ -static-libgcc -static-intel -wd10237 -static-intel' # aka PLUGIN_LDFLAGS. skipping LIBC_INTERJECT; info['--flags'] = '-DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -qopenmp -O3 -no-prec-div -DNDEBUG' # aka PLUGIN_FLAGS; info['--libs'] = sep_cmake_list('-Wl,--start-group;/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/mkl/lib/intel64/libmkl_intel_lp64.a;/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/mkl/lib/intel64/libmkl_intel_thread.a;/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/mkl/lib/intel64/libmkl_core.a;/lib64/libpthread.so;/lib64/libm.a;-openmp;-Wl,--end-group;-Wl,--start-group;/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/mkl/lib/intel64/libmkl_lapack95_lp64.a;/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/mkl/lib/intel64/libmkl_intel_lp64.a;-openmp;-Wl,--end-group'). if len(argv) == 1:; retstr = """"""Build conditions of Psi4. Usage:; >>> psi4-config --all; >>> psi4-config --flags --libs; """"""; elif argv[1] == '--all':; retstr = ''; for k, v in info.iteritems():; retstr += """"""%-20s --> %s\n"""""" % (k, v); else:; retstr = []; for arg in sys.argv[1:]:; retstr.append(info[arg]); retstr = ' '.join(retstr). return retstr. def sep_cmake_list(cmlist):; return ' '.join(cmlist.split(';')). if __name__ == '__main__':; pass; psiver = ""0.3.479""; githash = ""{master} 9a95002 ""; sys.exit(main(sys.argv)). ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172395303
https://github.com/psi4/psi4/issues/214#issuecomment-172395303:3456,Modifiability,config,config,3456,"/include -I/usr/include -I/usr/include' # aka PLUGIN_INCLUDES; info['--defines'] = '-DHAVE_PCMSOLVER -DHAVE_DKH -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DHAVE_MKL_LAPACK -DHAVE_MKL_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H'; info['--ldflags'] = ' -static-libstdc++ -static-libgcc -static-intel -wd10237 -static-intel' # aka PLUGIN_LDFLAGS. skipping LIBC_INTERJECT; info['--flags'] = '-DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -qopenmp -O3 -no-prec-div -DNDEBUG' # aka PLUGIN_FLAGS; info['--libs'] = sep_cmake_list('-Wl,--start-group;/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/mkl/lib/intel64/libmkl_intel_lp64.a;/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/mkl/lib/intel64/libmkl_intel_thread.a;/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/mkl/lib/intel64/libmkl_core.a;/lib64/libpthread.so;/lib64/libm.a;-openmp;-Wl,--end-group;-Wl,--start-group;/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/mkl/lib/intel64/libmkl_lapack95_lp64.a;/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/mkl/lib/intel64/libmkl_intel_lp64.a;-openmp;-Wl,--end-group'). if len(argv) == 1:; retstr = """"""Build conditions of Psi4. Usage:; >>> psi4-config --all; >>> psi4-config --flags --libs; """"""; elif argv[1] == '--all':; retstr = ''; for k, v in info.iteritems():; retstr += """"""%-20s --> %s\n"""""" % (k, v); else:; retstr = []; for arg in sys.argv[1:]:; retstr.append(info[arg]); retstr = ' '.join(retstr). return retstr. def sep_cmake_list(cmlist):; return ' '.join(cmlist.split(';')). if __name__ == '__main__':; pass; psiver = ""0.3.479""; githash = ""{master} 9a95002 ""; sys.exit(main(sys.argv)). ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172395303
https://github.com/psi4/psi4/issues/214#issuecomment-172396551:357,Deployability,install,installation,357,"- Very cool. I'm not sure exactly if I'd be able to make that work for my plugin, because so many of the things are still either `icc/icpc` specific or tied to your build machine, but it will make getting the info out easier.; - Using conda's `info/has_prefix` / string replacement stuff for relocatable build, I assume some of strings will get modified on installation to point to the proper place.; - I'm not a collaborator on the psi4/psi4 issue tracker, so I can't see that issue. But if anyone on your team wants to take the RESP plugin and modify or improve it, that would be great.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172396551
https://github.com/psi4/psi4/issues/214#issuecomment-172396551:74,Modifiability,plugin,plugin,74,"- Very cool. I'm not sure exactly if I'd be able to make that work for my plugin, because so many of the things are still either `icc/icpc` specific or tied to your build machine, but it will make getting the info out easier.; - Using conda's `info/has_prefix` / string replacement stuff for relocatable build, I assume some of strings will get modified on installation to point to the proper place.; - I'm not a collaborator on the psi4/psi4 issue tracker, so I can't see that issue. But if anyone on your team wants to take the RESP plugin and modify or improve it, that would be great.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172396551
https://github.com/psi4/psi4/issues/214#issuecomment-172396551:535,Modifiability,plugin,plugin,535,"- Very cool. I'm not sure exactly if I'd be able to make that work for my plugin, because so many of the things are still either `icc/icpc` specific or tied to your build machine, but it will make getting the info out easier.; - Using conda's `info/has_prefix` / string replacement stuff for relocatable build, I assume some of strings will get modified on installation to point to the proper place.; - I'm not a collaborator on the psi4/psi4 issue tracker, so I can't see that issue. But if anyone on your team wants to take the RESP plugin and modify or improve it, that would be great.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172396551
https://github.com/psi4/psi4/issues/214#issuecomment-172949103:127,Modifiability,config,config,127,"starting with conda psi4 `0.3.491`, you should be getting all the headers (though not namespace protected) and the basic `psi4-config` script.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172949103
https://github.com/psi4/psi4/issues/214#issuecomment-174064319:126,Modifiability,config,config,126,"> starting with conda psi4 0.3.491, you should be getting all the headers (though not namespace protected) and the basic psi4-config script. There's one missing header, which is `psi4config.h`. conda psi4 0.3.491 includes `include/psiconfig.h.cmake.in`, but not the fully configured `include/psiconfig.h`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-174064319
https://github.com/psi4/psi4/issues/214#issuecomment-174064319:272,Modifiability,config,configured,272,"> starting with conda psi4 0.3.491, you should be getting all the headers (though not namespace protected) and the basic psi4-config script. There's one missing header, which is `psi4config.h`. conda psi4 0.3.491 includes `include/psiconfig.h.cmake.in`, but not the fully configured `include/psiconfig.h`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-174064319
https://github.com/psi4/psi4/issues/214#issuecomment-176947331:87,Deployability,release,release,87,"This is great. All of my plugin compilation stuff is working now with the latest conda release, so I'm going to close this. Thanks for all the hard work!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-176947331
https://github.com/psi4/psi4/issues/214#issuecomment-176947331:25,Modifiability,plugin,plugin,25,"This is great. All of my plugin compilation stuff is working now with the latest conda release, so I'm going to close this. Thanks for all the hard work!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-176947331
https://github.com/psi4/psi4/issues/215#issuecomment-172786390:13,Deployability,install,install,13,"@loriab the `install(FILES ""${headers_list} include/lib*)` directives are everywhere in all subdirectories in `src/lib-bin` since we are using the `make_cmake_files.py` script to generate the leaf `CMakeLists.txt`. Most of them are most likely not needed in a proper installation.; Possibly the include directory layout in robertodr/psi4public@d5a193f1 is good enough?; See also #218",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-172786390
https://github.com/psi4/psi4/issues/215#issuecomment-172786390:267,Deployability,install,installation,267,"@loriab the `install(FILES ""${headers_list} include/lib*)` directives are everywhere in all subdirectories in `src/lib-bin` since we are using the `make_cmake_files.py` script to generate the leaf `CMakeLists.txt`. Most of them are most likely not needed in a proper installation.; Possibly the include directory layout in robertodr/psi4public@d5a193f1 is good enough?; See also #218",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-172786390
https://github.com/psi4/psi4/issues/215#issuecomment-173789229:211,Deployability,install,installed,211,"@robertodr's PR fixes the urgent problem. @jturney, @CDSherrill, @lothian: is there any support for namespacing the includes (e.g., in the conda package, python, chemps, psi4, hdf5, possibly gcc headers are all installed to `prefix/include`). If anyone thinks this isn't a problem, just close the ticket.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173789229
https://github.com/psi4/psi4/issues/215#issuecomment-173890912:17,Deployability,install,install,17,Didn't we use to install the psi4 headers into `prefix/include/psi4` ?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173890912
https://github.com/psi4/psi4/issues/215#issuecomment-173925344:139,Deployability,install,install,139,"I think that sounds right, Jet. David. On Fri, Jan 22, 2016 at 6:31 AM, Justin Turney notifications@github.com; wrote:. > Didn't we use to install the psi4 headers into prefix/include/psi4 ?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/215#issuecomment-173890912.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173925344
https://github.com/psi4/psi4/issues/215#issuecomment-173950354:342,Deployability,install,installed,342,I'd be for using `psi4` since psi3 is still out in the wild and uses `psi`. Looking at that cmake url it looks like only `DOCDIR` is automatically namespaced. We'd only need to namespace `INCLUDEDIR` and `DATADIR`. Maybe now is a good time to rename the `lib` in our top source directory to `share/psi4` since that is where the items will be installed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173950354
https://github.com/psi4/psi4/issues/215#issuecomment-173956800:0,Deployability,Install,Installed,0,"Installed changes:; - `prefix/include/herebeheaders.h` --> `prefix/include/psi4/herebeheaders.h`; - `share/psi/python` --> `share/psi4/python`, etc. Then, Jet, you're also proposing the following?; Source changes:; - `top-source-dir/lib/python` --> `top-source-dir/share/psi4/python`. I agree the `lib` is misleading, but two directory levels is a lot just to match names. I'd leave it as is or move to `share`. That won't affect the public interface, so easier to change in future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173956800
https://github.com/psi4/psi4/issues/215#issuecomment-173956800:441,Integrability,interface,interface,441,"Installed changes:; - `prefix/include/herebeheaders.h` --> `prefix/include/psi4/herebeheaders.h`; - `share/psi/python` --> `share/psi4/python`, etc. Then, Jet, you're also proposing the following?; Source changes:; - `top-source-dir/lib/python` --> `top-source-dir/share/psi4/python`. I agree the `lib` is misleading, but two directory levels is a lot just to match names. I'd leave it as is or move to `share`. That won't affect the public interface, so easier to change in future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173956800
https://github.com/psi4/psi4/issues/215#issuecomment-173961471:306,Availability,down,down,306,I think we're on the same page (certainly for the headers). Installed changes:; - agreed; - `share/psi/* --> share/psi4/*`. Source changes:; - `top-source-dir/lib/* --> top-source-dir/share/psi4/*`. I'd like to have the two directory levels to keep the source and install tree similar could keep confusion down when setting `PSIDATADIR`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173961471
https://github.com/psi4/psi4/issues/215#issuecomment-173961471:60,Deployability,Install,Installed,60,I think we're on the same page (certainly for the headers). Installed changes:; - agreed; - `share/psi/* --> share/psi4/*`. Source changes:; - `top-source-dir/lib/* --> top-source-dir/share/psi4/*`. I'd like to have the two directory levels to keep the source and install tree similar could keep confusion down when setting `PSIDATADIR`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173961471
https://github.com/psi4/psi4/issues/215#issuecomment-173961471:264,Deployability,install,install,264,I think we're on the same page (certainly for the headers). Installed changes:; - agreed; - `share/psi/* --> share/psi4/*`. Source changes:; - `top-source-dir/lib/* --> top-source-dir/share/psi4/*`. I'd like to have the two directory levels to keep the source and install tree similar could keep confusion down when setting `PSIDATADIR`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173961471
https://github.com/psi4/psi4/issues/215#issuecomment-173967734:0,Deployability,Install,Installed,0,"Installed changes:; - agreed; - agreed (yes, that's what I meant to write). Source changes:; The extra psi4 dir in source wouldn't be expected in includes (i.e., we're not moving `top-source-dir/include/` to `top-source-dir/include/psi4` so I don't see that the shareables folder in source needs the namespace protection either. And setting `PSIDATADIR` is a slightly advanced topic. If the concensus is for mirroring the dir structure of shareables, I'm fine with it, but I mildly favor as is or `share`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173967734
https://github.com/psi4/psi4/issues/215#issuecomment-173979302:39,Deployability,Install,Install,39,"Ok, the task of this ticket shall be:. Install changes:; - `prefix/include/*` --> `prefix/include/psi4/*`; - `share/psi/*` --> `share/psi4/*`. Source changes:; - `top-source-dir/lib/*` --> `top-source-dir/share/*`. with reference to https://github.com/SebWouters/CheMPS2/blob/master/CMakeLists.txt as needed, since CheMPS2 has already been through packaging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173979302
https://github.com/psi4/psi4/issues/216#issuecomment-212549702:109,Modifiability,plugin,plugins,109,"@loriab, I think we might be able to check the first box. I tested on my linux box and I can compile and run plugins with scf and mointegrals. Do you want a separate manual page or it is ok to post new info in the same page where we describe ""--new-plugin""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/216#issuecomment-212549702
https://github.com/psi4/psi4/issues/216#issuecomment-212549702:249,Modifiability,plugin,plugin,249,"@loriab, I think we might be able to check the first box. I tested on my linux box and I can compile and run plugins with scf and mointegrals. Do you want a separate manual page or it is ok to post new info in the same page where we describe ""--new-plugin""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/216#issuecomment-212549702
https://github.com/psi4/psi4/issues/216#issuecomment-212549702:60,Testability,test,tested,60,"@loriab, I think we might be able to check the first box. I tested on my linux box and I can compile and run plugins with scf and mointegrals. Do you want a separate manual page or it is ok to post new info in the same page where we describe ""--new-plugin""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/216#issuecomment-212549702
https://github.com/psi4/psi4/issues/216#issuecomment-213240900:244,Deployability,install,installations,244,"@loriab, my pull request https://github.com/psi4/psi4/pull/366 should address boxes 3-5. I am not sure about box 2. Do we want printing when calling `--new-plugin`? Perhaps the message with the manual link should appear for both conda/nonconda installations. Right now the relevant documentation is in http://www.psicode.org/psi4manual/master/plugins.html.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/216#issuecomment-213240900
https://github.com/psi4/psi4/issues/216#issuecomment-213240900:177,Integrability,message,message,177,"@loriab, my pull request https://github.com/psi4/psi4/pull/366 should address boxes 3-5. I am not sure about box 2. Do we want printing when calling `--new-plugin`? Perhaps the message with the manual link should appear for both conda/nonconda installations. Right now the relevant documentation is in http://www.psicode.org/psi4manual/master/plugins.html.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/216#issuecomment-213240900
https://github.com/psi4/psi4/issues/216#issuecomment-213240900:156,Modifiability,plugin,plugin,156,"@loriab, my pull request https://github.com/psi4/psi4/pull/366 should address boxes 3-5. I am not sure about box 2. Do we want printing when calling `--new-plugin`? Perhaps the message with the manual link should appear for both conda/nonconda installations. Right now the relevant documentation is in http://www.psicode.org/psi4manual/master/plugins.html.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/216#issuecomment-213240900
https://github.com/psi4/psi4/issues/216#issuecomment-213240900:343,Modifiability,plugin,plugins,343,"@loriab, my pull request https://github.com/psi4/psi4/pull/366 should address boxes 3-5. I am not sure about box 2. Do we want printing when calling `--new-plugin`? Perhaps the message with the manual link should appear for both conda/nonconda installations. Right now the relevant documentation is in http://www.psicode.org/psi4manual/master/plugins.html.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/216#issuecomment-213240900
https://github.com/psi4/psi4/issues/216#issuecomment-215206861:116,Modifiability,config,configuring,116,"PR #370 also hit various of these points, particularly moving from Makefile, Makefile.conda, Makefile.macconda into configuring at cmake-time. All in at least provisionally working order, so closing out. Thanks, @fevangelista.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/216#issuecomment-215206861
https://github.com/psi4/psi4/pull/218#issuecomment-172794407:81,Deployability,install,installed,81,"Thanks, this would probably fix most of it (most important psi4 headers actually installed). I just worry that once psi4, add-ons, perhaps openbabel, etc. are all getting installed into one conda env that eventually there will be `molecule.h` collisions. Or `physconst.h`. Will accept PR but not syncing with private immediately.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/218#issuecomment-172794407
https://github.com/psi4/psi4/pull/218#issuecomment-172794407:171,Deployability,install,installed,171,"Thanks, this would probably fix most of it (most important psi4 headers actually installed). I just worry that once psi4, add-ons, perhaps openbabel, etc. are all getting installed into one conda env that eventually there will be `molecule.h` collisions. Or `physconst.h`. Will accept PR but not syncing with private immediately.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/218#issuecomment-172794407
https://github.com/psi4/psi4/issues/219#issuecomment-173199216:25,Availability,error,error,25,Could you copy-paste the error you get from the `-jN` build? It might be the same problem I hit on some nightly builds on stallo and that I have never been able to reproduce.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/219#issuecomment-173199216
https://github.com/psi4/psi4/issues/219#issuecomment-173202821:61,Availability,error,error,61,"Actually, for the build I just tried, the real source of the error was in libdpd, which now includes libmints/mints.h, which includes (through basisset.h) libint.h. Since the libdpd/Makefiles.txt did not list mints as a dependency, the compilation tried to build libdpd before the libint header was ready, hence the crash. Running a test with the proper dependency in place now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/219#issuecomment-173202821
https://github.com/psi4/psi4/issues/219#issuecomment-173202821:220,Integrability,depend,dependency,220,"Actually, for the build I just tried, the real source of the error was in libdpd, which now includes libmints/mints.h, which includes (through basisset.h) libint.h. Since the libdpd/Makefiles.txt did not list mints as a dependency, the compilation tried to build libdpd before the libint header was ready, hence the crash. Running a test with the proper dependency in place now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/219#issuecomment-173202821
https://github.com/psi4/psi4/issues/219#issuecomment-173202821:354,Integrability,depend,dependency,354,"Actually, for the build I just tried, the real source of the error was in libdpd, which now includes libmints/mints.h, which includes (through basisset.h) libint.h. Since the libdpd/Makefiles.txt did not list mints as a dependency, the compilation tried to build libdpd before the libint header was ready, hence the crash. Running a test with the proper dependency in place now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/219#issuecomment-173202821
https://github.com/psi4/psi4/issues/219#issuecomment-173202821:333,Testability,test,test,333,"Actually, for the build I just tried, the real source of the error was in libdpd, which now includes libmints/mints.h, which includes (through basisset.h) libint.h. Since the libdpd/Makefiles.txt did not list mints as a dependency, the compilation tried to build libdpd before the libint header was ready, hence the crash. Running a test with the proper dependency in place now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/219#issuecomment-173202821
https://github.com/psi4/psi4/issues/219#issuecomment-173210896:130,Availability,error,error,130,"-j4 builds now run smoothly on my Mac and another cluster (cerebro), but I still have problems on one of our campus clusters. The error is not the same as the libdpd+libmints case mentioned above, so I'm investigating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/219#issuecomment-173210896
https://github.com/psi4/psi4/issues/219#issuecomment-173217907:68,Availability,error,errors,68,I believe that the problems with -jN builds is now corrected. Other errors I'm seeing arise from another bug that I'll put up in a separate issue report.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/219#issuecomment-173217907
https://github.com/psi4/psi4/issues/220#issuecomment-173222692:183,Deployability,install,installation,183,"Is this on cerebro? We discussed this issue some time ago, since it's the same hiccup that hinders compilation of PCMSolver on cerebro. Intel relies on the standard headers from some installation of GCC. The only non-conflicting GCC on cerebro is 4.4.6 which implemented just those 3 overloads for `std::to_string`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/220#issuecomment-173222692
https://github.com/psi4/psi4/issues/220#issuecomment-173224110:512,Deployability,install,installation,512,"No, the build is clean on cerebro. This is on blueridge, but perhaps it's; the same issue? This change was just made on January 8th, which was after; we discussed the GCC header thing. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Wed, Jan 20, 2016 at 9:37 AM, Roberto Di Remigio <; notifications@github.com> wrote:. > Is this on cerebro? We discussed this issue some time ago, since it's the; > same hiccup that hinders compilation of PCMSolver on cerebro. Intel relies; > on the standard headers from some installation of GCC. The only; > non-conflicting GCC on cerebro is 4.4.6 which implemented just those 3; > overloads for std::to_string.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/220#issuecomment-173222692.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/220#issuecomment-173224110
https://github.com/psi4/psi4/issues/220#issuecomment-173225638:77,Availability,error,error,77,"Well, in this case, I can just cast to `(long long)` to get around the build error. The PCMSolver issue is potentially more involved.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/220#issuecomment-173225638
https://github.com/psi4/psi4/issues/222#issuecomment-226956340:41,Testability,test,test,41,This will directly effect the stability2 test case.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/222#issuecomment-226956340
https://github.com/psi4/psi4/issues/222#issuecomment-260083312:53,Testability,test,test,53,"@jgonthier We have not noticed this in awhile in the test cases. If you have not seen this, could we consider closing this issue?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/222#issuecomment-260083312
https://github.com/psi4/psi4/pull/224#issuecomment-175864194:107,Deployability,update,updated,107,"Just a heads-up: you don't need to close the PR and reopen it to apply fixes. The request is automatically updated as you add features / fixes, until it gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175864194
https://github.com/psi4/psi4/pull/224#issuecomment-175866345:375,Deployability,update,updated,375,"Thanks for the tip. But does it matter if it claims to already be in the; testing stage? I presumed that the test calculations might already be; running and that's why I closed it. On Wed, Jan 27, 2016 at 3:28 PM, Andy Simmonett notifications@github.com; wrote:. > Just a heads-up: you don't need to close the PR and reopen it to apply; > fixes. The request is automatically updated as you add features / fixes,; > until it gets merged.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/224#issuecomment-175864194.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175866345
https://github.com/psi4/psi4/pull/224#issuecomment-175866345:74,Testability,test,testing,74,"Thanks for the tip. But does it matter if it claims to already be in the; testing stage? I presumed that the test calculations might already be; running and that's why I closed it. On Wed, Jan 27, 2016 at 3:28 PM, Andy Simmonett notifications@github.com; wrote:. > Just a heads-up: you don't need to close the PR and reopen it to apply; > fixes. The request is automatically updated as you add features / fixes,; > until it gets merged.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/224#issuecomment-175864194.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175866345
https://github.com/psi4/psi4/pull/224#issuecomment-175866345:109,Testability,test,test,109,"Thanks for the tip. But does it matter if it claims to already be in the; testing stage? I presumed that the test calculations might already be; running and that's why I closed it. On Wed, Jan 27, 2016 at 3:28 PM, Andy Simmonett notifications@github.com; wrote:. > Just a heads-up: you don't need to close the PR and reopen it to apply; > fixes. The request is automatically updated as you add features / fixes,; > until it gets merged.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/224#issuecomment-175864194.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175866345
https://github.com/psi4/psi4/pull/224#issuecomment-175868491:27,Testability,test,testing,27,"No, it doesn't matter. The testing is triggered every time a commit is pushed, or every time a PR is created. The bugfix commit (0188418) test is running now, and then the merge commit that followed it will be tested after that (both appear on this PR). Then the tests for the new PR will pick up, but will be identical to the tests for 9a20655 from here. Closing a PR doesn't stop Travis from running the tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175868491
https://github.com/psi4/psi4/pull/224#issuecomment-175868491:138,Testability,test,test,138,"No, it doesn't matter. The testing is triggered every time a commit is pushed, or every time a PR is created. The bugfix commit (0188418) test is running now, and then the merge commit that followed it will be tested after that (both appear on this PR). Then the tests for the new PR will pick up, but will be identical to the tests for 9a20655 from here. Closing a PR doesn't stop Travis from running the tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175868491
https://github.com/psi4/psi4/pull/224#issuecomment-175868491:210,Testability,test,tested,210,"No, it doesn't matter. The testing is triggered every time a commit is pushed, or every time a PR is created. The bugfix commit (0188418) test is running now, and then the merge commit that followed it will be tested after that (both appear on this PR). Then the tests for the new PR will pick up, but will be identical to the tests for 9a20655 from here. Closing a PR doesn't stop Travis from running the tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175868491
https://github.com/psi4/psi4/pull/224#issuecomment-175868491:263,Testability,test,tests,263,"No, it doesn't matter. The testing is triggered every time a commit is pushed, or every time a PR is created. The bugfix commit (0188418) test is running now, and then the merge commit that followed it will be tested after that (both appear on this PR). Then the tests for the new PR will pick up, but will be identical to the tests for 9a20655 from here. Closing a PR doesn't stop Travis from running the tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175868491
https://github.com/psi4/psi4/pull/224#issuecomment-175868491:327,Testability,test,tests,327,"No, it doesn't matter. The testing is triggered every time a commit is pushed, or every time a PR is created. The bugfix commit (0188418) test is running now, and then the merge commit that followed it will be tested after that (both appear on this PR). Then the tests for the new PR will pick up, but will be identical to the tests for 9a20655 from here. Closing a PR doesn't stop Travis from running the tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175868491
https://github.com/psi4/psi4/pull/224#issuecomment-175868491:406,Testability,test,tests,406,"No, it doesn't matter. The testing is triggered every time a commit is pushed, or every time a PR is created. The bugfix commit (0188418) test is running now, and then the merge commit that followed it will be tested after that (both appear on this PR). Then the tests for the new PR will pick up, but will be identical to the tests for 9a20655 from here. Closing a PR doesn't stop Travis from running the tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175868491
https://github.com/psi4/psi4/pull/224#issuecomment-175871650:123,Testability,test,tests,123,"Thanks for the description. Very helpful. To verify, if I make a PR with; 5 commits, and only the first 3 commits pass the tests, then those first; three are pulled and included. That is, final incorporation is approved; one commit at a time. On Wed, Jan 27, 2016 at 3:34 PM, Andy Simmonett notifications@github.com; wrote:. > No, it doesn't matter. The testing is triggered every time a commit is; > pushed, or every time a PR is created. The bugfix commit (0188418; > https://github.com/psi4/psi4public/commit/01884187fd1cb6ed86e817802044c9cc5c15e190); > test is running now, and then the merge commit that followed it will be; > tested after that (both appear on this PR). Then the tests for the new PR; > will pick up, but will be identical to the tests for 9a20655; > https://github.com/psi4/psi4public/commit/9a206552db2d313df83cd3d3327fccea2ec4088c; > from here. Closing a PR doesn't stop Travis from running the tests.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/224#issuecomment-175868491.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175871650
https://github.com/psi4/psi4/pull/224#issuecomment-175871650:354,Testability,test,testing,354,"Thanks for the description. Very helpful. To verify, if I make a PR with; 5 commits, and only the first 3 commits pass the tests, then those first; three are pulled and included. That is, final incorporation is approved; one commit at a time. On Wed, Jan 27, 2016 at 3:34 PM, Andy Simmonett notifications@github.com; wrote:. > No, it doesn't matter. The testing is triggered every time a commit is; > pushed, or every time a PR is created. The bugfix commit (0188418; > https://github.com/psi4/psi4public/commit/01884187fd1cb6ed86e817802044c9cc5c15e190); > test is running now, and then the merge commit that followed it will be; > tested after that (both appear on this PR). Then the tests for the new PR; > will pick up, but will be identical to the tests for 9a20655; > https://github.com/psi4/psi4public/commit/9a206552db2d313df83cd3d3327fccea2ec4088c; > from here. Closing a PR doesn't stop Travis from running the tests.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/224#issuecomment-175868491.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175871650
https://github.com/psi4/psi4/pull/224#issuecomment-175871650:557,Testability,test,test,557,"Thanks for the description. Very helpful. To verify, if I make a PR with; 5 commits, and only the first 3 commits pass the tests, then those first; three are pulled and included. That is, final incorporation is approved; one commit at a time. On Wed, Jan 27, 2016 at 3:34 PM, Andy Simmonett notifications@github.com; wrote:. > No, it doesn't matter. The testing is triggered every time a commit is; > pushed, or every time a PR is created. The bugfix commit (0188418; > https://github.com/psi4/psi4public/commit/01884187fd1cb6ed86e817802044c9cc5c15e190); > test is running now, and then the merge commit that followed it will be; > tested after that (both appear on this PR). Then the tests for the new PR; > will pick up, but will be identical to the tests for 9a20655; > https://github.com/psi4/psi4public/commit/9a206552db2d313df83cd3d3327fccea2ec4088c; > from here. Closing a PR doesn't stop Travis from running the tests.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/224#issuecomment-175868491.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175871650
https://github.com/psi4/psi4/pull/224#issuecomment-175871650:632,Testability,test,tested,632,"Thanks for the description. Very helpful. To verify, if I make a PR with; 5 commits, and only the first 3 commits pass the tests, then those first; three are pulled and included. That is, final incorporation is approved; one commit at a time. On Wed, Jan 27, 2016 at 3:34 PM, Andy Simmonett notifications@github.com; wrote:. > No, it doesn't matter. The testing is triggered every time a commit is; > pushed, or every time a PR is created. The bugfix commit (0188418; > https://github.com/psi4/psi4public/commit/01884187fd1cb6ed86e817802044c9cc5c15e190); > test is running now, and then the merge commit that followed it will be; > tested after that (both appear on this PR). Then the tests for the new PR; > will pick up, but will be identical to the tests for 9a20655; > https://github.com/psi4/psi4public/commit/9a206552db2d313df83cd3d3327fccea2ec4088c; > from here. Closing a PR doesn't stop Travis from running the tests.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/224#issuecomment-175868491.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175871650
https://github.com/psi4/psi4/pull/224#issuecomment-175871650:685,Testability,test,tests,685,"Thanks for the description. Very helpful. To verify, if I make a PR with; 5 commits, and only the first 3 commits pass the tests, then those first; three are pulled and included. That is, final incorporation is approved; one commit at a time. On Wed, Jan 27, 2016 at 3:34 PM, Andy Simmonett notifications@github.com; wrote:. > No, it doesn't matter. The testing is triggered every time a commit is; > pushed, or every time a PR is created. The bugfix commit (0188418; > https://github.com/psi4/psi4public/commit/01884187fd1cb6ed86e817802044c9cc5c15e190); > test is running now, and then the merge commit that followed it will be; > tested after that (both appear on this PR). Then the tests for the new PR; > will pick up, but will be identical to the tests for 9a20655; > https://github.com/psi4/psi4public/commit/9a206552db2d313df83cd3d3327fccea2ec4088c; > from here. Closing a PR doesn't stop Travis from running the tests.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/224#issuecomment-175868491.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175871650
https://github.com/psi4/psi4/pull/224#issuecomment-175871650:752,Testability,test,tests,752,"Thanks for the description. Very helpful. To verify, if I make a PR with; 5 commits, and only the first 3 commits pass the tests, then those first; three are pulled and included. That is, final incorporation is approved; one commit at a time. On Wed, Jan 27, 2016 at 3:34 PM, Andy Simmonett notifications@github.com; wrote:. > No, it doesn't matter. The testing is triggered every time a commit is; > pushed, or every time a PR is created. The bugfix commit (0188418; > https://github.com/psi4/psi4public/commit/01884187fd1cb6ed86e817802044c9cc5c15e190); > test is running now, and then the merge commit that followed it will be; > tested after that (both appear on this PR). Then the tests for the new PR; > will pick up, but will be identical to the tests for 9a20655; > https://github.com/psi4/psi4public/commit/9a206552db2d313df83cd3d3327fccea2ec4088c; > from here. Closing a PR doesn't stop Travis from running the tests.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/224#issuecomment-175868491.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175871650
https://github.com/psi4/psi4/pull/224#issuecomment-175871650:920,Testability,test,tests,920,"Thanks for the description. Very helpful. To verify, if I make a PR with; 5 commits, and only the first 3 commits pass the tests, then those first; three are pulled and included. That is, final incorporation is approved; one commit at a time. On Wed, Jan 27, 2016 at 3:34 PM, Andy Simmonett notifications@github.com; wrote:. > No, it doesn't matter. The testing is triggered every time a commit is; > pushed, or every time a PR is created. The bugfix commit (0188418; > https://github.com/psi4/psi4public/commit/01884187fd1cb6ed86e817802044c9cc5c15e190); > test is running now, and then the merge commit that followed it will be; > tested after that (both appear on this PR). Then the tests for the new PR; > will pick up, but will be identical to the tests for 9a20655; > https://github.com/psi4/psi4public/commit/9a206552db2d313df83cd3d3327fccea2ec4088c; > from here. Closing a PR doesn't stop Travis from running the tests.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/224#issuecomment-175868491.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175871650
https://github.com/psi4/psi4/pull/224#issuecomment-175882141:15,Testability,test,testing,15,"Not quite. The testing is just a guide that helps us to determine whether to accept a PR or not; the outcome of the tests does not affect GitHub's handling of the merge at all. So in your example above, all 5 commits would be pulled in. I was trying to make the following point, but didn't explain well at all:. Say you open a pull request with three commits, but discover that the tests don't pass. If you were to continue pushing commits to your GitHub repo branch (the same one you based the PR on), those commits would continue to be added real-time to the original PR automatically. Therefore there's no need to close the PR when you find that it's broken, and re-open a new one when it's fixed. In fact I think it's better to just leave the original one open, because it allows a discussion to take place, amongst the commits, and the team can hopefully jump in with solutions to whatever problems were created. It's up to you, or whomever actually accepts the PR, to make sure that the final commit in the PR passes the tests before accepting it. The Travis CI testing helps us to quickly make that determination, and GitHub helpfully tells us whether the merge can happen without conflicts. I hope this clears things up a little.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175882141
https://github.com/psi4/psi4/pull/224#issuecomment-175882141:116,Testability,test,tests,116,"Not quite. The testing is just a guide that helps us to determine whether to accept a PR or not; the outcome of the tests does not affect GitHub's handling of the merge at all. So in your example above, all 5 commits would be pulled in. I was trying to make the following point, but didn't explain well at all:. Say you open a pull request with three commits, but discover that the tests don't pass. If you were to continue pushing commits to your GitHub repo branch (the same one you based the PR on), those commits would continue to be added real-time to the original PR automatically. Therefore there's no need to close the PR when you find that it's broken, and re-open a new one when it's fixed. In fact I think it's better to just leave the original one open, because it allows a discussion to take place, amongst the commits, and the team can hopefully jump in with solutions to whatever problems were created. It's up to you, or whomever actually accepts the PR, to make sure that the final commit in the PR passes the tests before accepting it. The Travis CI testing helps us to quickly make that determination, and GitHub helpfully tells us whether the merge can happen without conflicts. I hope this clears things up a little.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175882141
https://github.com/psi4/psi4/pull/224#issuecomment-175882141:382,Testability,test,tests,382,"Not quite. The testing is just a guide that helps us to determine whether to accept a PR or not; the outcome of the tests does not affect GitHub's handling of the merge at all. So in your example above, all 5 commits would be pulled in. I was trying to make the following point, but didn't explain well at all:. Say you open a pull request with three commits, but discover that the tests don't pass. If you were to continue pushing commits to your GitHub repo branch (the same one you based the PR on), those commits would continue to be added real-time to the original PR automatically. Therefore there's no need to close the PR when you find that it's broken, and re-open a new one when it's fixed. In fact I think it's better to just leave the original one open, because it allows a discussion to take place, amongst the commits, and the team can hopefully jump in with solutions to whatever problems were created. It's up to you, or whomever actually accepts the PR, to make sure that the final commit in the PR passes the tests before accepting it. The Travis CI testing helps us to quickly make that determination, and GitHub helpfully tells us whether the merge can happen without conflicts. I hope this clears things up a little.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175882141
https://github.com/psi4/psi4/pull/224#issuecomment-175882141:1027,Testability,test,tests,1027,"Not quite. The testing is just a guide that helps us to determine whether to accept a PR or not; the outcome of the tests does not affect GitHub's handling of the merge at all. So in your example above, all 5 commits would be pulled in. I was trying to make the following point, but didn't explain well at all:. Say you open a pull request with three commits, but discover that the tests don't pass. If you were to continue pushing commits to your GitHub repo branch (the same one you based the PR on), those commits would continue to be added real-time to the original PR automatically. Therefore there's no need to close the PR when you find that it's broken, and re-open a new one when it's fixed. In fact I think it's better to just leave the original one open, because it allows a discussion to take place, amongst the commits, and the team can hopefully jump in with solutions to whatever problems were created. It's up to you, or whomever actually accepts the PR, to make sure that the final commit in the PR passes the tests before accepting it. The Travis CI testing helps us to quickly make that determination, and GitHub helpfully tells us whether the merge can happen without conflicts. I hope this clears things up a little.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175882141
https://github.com/psi4/psi4/pull/224#issuecomment-175882141:1068,Testability,test,testing,1068,"Not quite. The testing is just a guide that helps us to determine whether to accept a PR or not; the outcome of the tests does not affect GitHub's handling of the merge at all. So in your example above, all 5 commits would be pulled in. I was trying to make the following point, but didn't explain well at all:. Say you open a pull request with three commits, but discover that the tests don't pass. If you were to continue pushing commits to your GitHub repo branch (the same one you based the PR on), those commits would continue to be added real-time to the original PR automatically. Therefore there's no need to close the PR when you find that it's broken, and re-open a new one when it's fixed. In fact I think it's better to just leave the original one open, because it allows a discussion to take place, amongst the commits, and the team can hopefully jump in with solutions to whatever problems were created. It's up to you, or whomever actually accepts the PR, to make sure that the final commit in the PR passes the tests before accepting it. The Travis CI testing helps us to quickly make that determination, and GitHub helpfully tells us whether the merge can happen without conflicts. I hope this clears things up a little.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175882141
https://github.com/psi4/psi4/pull/224#issuecomment-175882141:33,Usability,guid,guide,33,"Not quite. The testing is just a guide that helps us to determine whether to accept a PR or not; the outcome of the tests does not affect GitHub's handling of the merge at all. So in your example above, all 5 commits would be pulled in. I was trying to make the following point, but didn't explain well at all:. Say you open a pull request with three commits, but discover that the tests don't pass. If you were to continue pushing commits to your GitHub repo branch (the same one you based the PR on), those commits would continue to be added real-time to the original PR automatically. Therefore there's no need to close the PR when you find that it's broken, and re-open a new one when it's fixed. In fact I think it's better to just leave the original one open, because it allows a discussion to take place, amongst the commits, and the team can hopefully jump in with solutions to whatever problems were created. It's up to you, or whomever actually accepts the PR, to make sure that the final commit in the PR passes the tests before accepting it. The Travis CI testing helps us to quickly make that determination, and GitHub helpfully tells us whether the merge can happen without conflicts. I hope this clears things up a little.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175882141
https://github.com/psi4/psi4/pull/224#issuecomment-175882141:1211,Usability,clear,clears,1211,"Not quite. The testing is just a guide that helps us to determine whether to accept a PR or not; the outcome of the tests does not affect GitHub's handling of the merge at all. So in your example above, all 5 commits would be pulled in. I was trying to make the following point, but didn't explain well at all:. Say you open a pull request with three commits, but discover that the tests don't pass. If you were to continue pushing commits to your GitHub repo branch (the same one you based the PR on), those commits would continue to be added real-time to the original PR automatically. Therefore there's no need to close the PR when you find that it's broken, and re-open a new one when it's fixed. In fact I think it's better to just leave the original one open, because it allows a discussion to take place, amongst the commits, and the team can hopefully jump in with solutions to whatever problems were created. It's up to you, or whomever actually accepts the PR, to make sure that the final commit in the PR passes the tests before accepting it. The Travis CI testing helps us to quickly make that determination, and GitHub helpfully tells us whether the merge can happen without conflicts. I hope this clears things up a little.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175882141
https://github.com/psi4/psi4/issues/226#issuecomment-175175264:26,Deployability,upgrade,upgrade,26,We are currently doing an upgrade to how information is passed around in Psi4. This may make it easier in the future if we decide to add restart capabilities to SAPT.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/226#issuecomment-175175264
https://github.com/psi4/psi4/issues/227#issuecomment-175470082:600,Availability,avail,available,600,"Thanks for your interest in Psi4. The SMD model offers an empirical parametrization of the nonelectrostatic contributions to the solvation energy (cavitation, dispersion, repulsion and hydrogen bonding effects) to add on top of the electrostatic contribution calculated by means of the IEFPCM or CPCM (COSMO) models. The nonelectrostatic contributions are added _a posteriori_ to the energy calculated self-consistently including the purely electrostatic reaction field. As such, SMD is very suitable for an independent implementation _via_ a Psi4 plugin. Both the IEFPCM and CPCM (COSMO) models are available in Psi4 using the interface to the PCMSolver library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/227#issuecomment-175470082
https://github.com/psi4/psi4/issues/227#issuecomment-175470082:139,Energy Efficiency,energy,energy,139,"Thanks for your interest in Psi4. The SMD model offers an empirical parametrization of the nonelectrostatic contributions to the solvation energy (cavitation, dispersion, repulsion and hydrogen bonding effects) to add on top of the electrostatic contribution calculated by means of the IEFPCM or CPCM (COSMO) models. The nonelectrostatic contributions are added _a posteriori_ to the energy calculated self-consistently including the purely electrostatic reaction field. As such, SMD is very suitable for an independent implementation _via_ a Psi4 plugin. Both the IEFPCM and CPCM (COSMO) models are available in Psi4 using the interface to the PCMSolver library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/227#issuecomment-175470082
https://github.com/psi4/psi4/issues/227#issuecomment-175470082:384,Energy Efficiency,energy,energy,384,"Thanks for your interest in Psi4. The SMD model offers an empirical parametrization of the nonelectrostatic contributions to the solvation energy (cavitation, dispersion, repulsion and hydrogen bonding effects) to add on top of the electrostatic contribution calculated by means of the IEFPCM or CPCM (COSMO) models. The nonelectrostatic contributions are added _a posteriori_ to the energy calculated self-consistently including the purely electrostatic reaction field. As such, SMD is very suitable for an independent implementation _via_ a Psi4 plugin. Both the IEFPCM and CPCM (COSMO) models are available in Psi4 using the interface to the PCMSolver library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/227#issuecomment-175470082
https://github.com/psi4/psi4/issues/227#issuecomment-175470082:628,Integrability,interface,interface,628,"Thanks for your interest in Psi4. The SMD model offers an empirical parametrization of the nonelectrostatic contributions to the solvation energy (cavitation, dispersion, repulsion and hydrogen bonding effects) to add on top of the electrostatic contribution calculated by means of the IEFPCM or CPCM (COSMO) models. The nonelectrostatic contributions are added _a posteriori_ to the energy calculated self-consistently including the purely electrostatic reaction field. As such, SMD is very suitable for an independent implementation _via_ a Psi4 plugin. Both the IEFPCM and CPCM (COSMO) models are available in Psi4 using the interface to the PCMSolver library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/227#issuecomment-175470082
https://github.com/psi4/psi4/issues/227#issuecomment-175470082:548,Modifiability,plugin,plugin,548,"Thanks for your interest in Psi4. The SMD model offers an empirical parametrization of the nonelectrostatic contributions to the solvation energy (cavitation, dispersion, repulsion and hydrogen bonding effects) to add on top of the electrostatic contribution calculated by means of the IEFPCM or CPCM (COSMO) models. The nonelectrostatic contributions are added _a posteriori_ to the energy calculated self-consistently including the purely electrostatic reaction field. As such, SMD is very suitable for an independent implementation _via_ a Psi4 plugin. Both the IEFPCM and CPCM (COSMO) models are available in Psi4 using the interface to the PCMSolver library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/227#issuecomment-175470082
https://github.com/psi4/psi4/pull/228#issuecomment-176579308:69,Modifiability,variab,variable,69,"Have you tried running it through Valgrind? If it's an uninitialized variable that GCC is magically zeroing out for you, Valgrind will tell you about it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/228#issuecomment-176579308
https://github.com/psi4/psi4/pull/228#issuecomment-176991048:198,Modifiability,variab,variables,198,"I tried valgrind. I found a couple of functions with assumed return type; due to an incorrect syntax (probably the problem), one invalid read (going; 8 bytes too far), and a couple of uninitialized variables that probably; don't matter. Enough to give it another go. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Thu, Jan 28, 2016 at 11:13 PM, Andy Simmonett notifications@github.com; wrote:. > Have you tried running it through Valgrind? If it's an uninitialized; > variable that GCC is magically zeroing out for you, Valgrind will tell you; > about it.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/228#issuecomment-176579308.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/228#issuecomment-176991048
https://github.com/psi4/psi4/pull/228#issuecomment-176991048:520,Modifiability,variab,variable,520,"I tried valgrind. I found a couple of functions with assumed return type; due to an incorrect syntax (probably the problem), one invalid read (going; 8 bytes too far), and a couple of uninitialized variables that probably; don't matter. Enough to give it another go. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Thu, Jan 28, 2016 at 11:13 PM, Andy Simmonett notifications@github.com; wrote:. > Have you tried running it through Valgrind? If it's an uninitialized; > variable that GCC is magically zeroing out for you, Valgrind will tell you; > about it.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/228#issuecomment-176579308.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/228#issuecomment-176991048
https://github.com/psi4/psi4/pull/228#issuecomment-176995836:384,Integrability,Message,Messages,384,"As a note this is a perfect example where you probably want to squash commits so that the git history is more understandable. A quick rundown would be something like the following:. `git rebase -i HEAD~5`; Change the commits that you no longer want from `pick` to `squash`, save the file. See [here](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Changing-Multiple-Commit-Messages) for more information.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/228#issuecomment-176995836
https://github.com/psi4/psi4/pull/228#issuecomment-177002304:853,Integrability,Message,Messages,853,"Thanks for the tip. Would you elaborate on ""Don't include any commit; already pushed to a central server"" a quote from the link you sent? Would; I need to cancel the pull request, then go ahead and push the squashed; version to my fork, then reinitiate the pull request?. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Fri, Jan 29, 2016 at 4:19 PM, Daniel Smith notifications@github.com; wrote:. > As a note this is a perfect example where you probably want to squash; > commits so that the git history is more understandable. A quick rundown; > would be something like the following:; > ; > git rebase -i HEAD~5; > Change the commits that you no longer want from pick to squash, save the; > file.; > ; > See here; > https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Changing-Multiple-Commit-Messages; > for more information.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/228#issuecomment-176995836.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/228#issuecomment-177002304
https://github.com/psi4/psi4/pull/228#issuecomment-177008536:35,Usability,clear,clearer,35,"Thanks, yes, that link is a little clearer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/228#issuecomment-177008536
https://github.com/psi4/psi4/pull/228#issuecomment-177017160:76,Testability,test,testing,76,Really liking this new github/TravisCI workflow of pull request / automatic testing / fix any remaining problems and let people comment on pull request. TravisCI is already showing its value by finding us some of these bugs.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/228#issuecomment-177017160
https://github.com/psi4/psi4/issues/229#issuecomment-176961114:65,Modifiability,plugin,plugin,65,So the closest thing we have to precedent on this is the csx4psi plugin (which has nothing to do with dmrg) https://anaconda.org/psi4/csx4psi . More later.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-176961114
https://github.com/psi4/psi4/issues/229#issuecomment-176961990:52,Availability,down,download,52,```; $ wget https://anaconda.org/psi4/csx4psi/0.0.8/download/linux-64/csx4psi-0.0.8-0.tar.bz2. $ tar -tjvf csx4psi-0.0.8-0.tar.bz2 ; -rw-r--r-- cdsgroup/sherrill 170 2015-09-03 20:23 info/README.md; -rw-r--r-- cdsgroup/sherrill 180 2015-09-03 20:23 info/files; -rw-r--r-- cdsgroup/sherrill 442 2015-09-03 20:23 info/git; -rw-r--r-- cdsgroup/sherrill 193 2015-09-03 20:23 info/index.json; -rw-r--r-- cdsgroup/sherrill 857 2015-09-03 20:23 info/recipe.json; -rw-r--r-- cdsgroup/sherrill 1404 2015-09-03 20:23 info/recipe/build.sh; -rw-r--r-- cdsgroup/sherrill 683 2015-09-03 20:23 info/recipe/meta.yaml; -rwxr-xr-x cdsgroup/sherrill 1319008 2015-09-03 20:23 lib/libiomp5.so; -rw-r--r-- cdsgroup/sherrill 170 2015-09-03 20:23 psi4aux/csx4psi/README.md; -rw-r--r-- cdsgroup/sherrill 1158 2015-09-03 20:23 psi4aux/csx4psi/__init__.py; -rw-r--r-- cdsgroup/sherrill 559469 2015-09-03 20:23 psi4aux/csx4psi/csx1_api.py; -rw-r--r-- cdsgroup/sherrill 3063 2015-09-03 20:23 psi4aux/csx4psi/csx4psi.cc; -rwxr-xr-x cdsgroup/sherrill 1037802 2015-09-03 20:23 psi4aux/csx4psi/csx4psi.so; -rw-r--r-- cdsgroup/sherrill 22479 2015-09-03 20:23 psi4aux/csx4psi/pymodule.py; ```. Interesting.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-176961990
https://github.com/psi4/psi4/issues/229#issuecomment-176983588:68,Modifiability,plugin,plugins,68,"So the main control for finding non-distributed things (basis sets, plugins, etc.) in psi4 is the `PSIPATH` environment variable (http://psicode.org/psi4manual/master/external.html#envvar-PSIPATH) that (for python things) internally prepends to `sys.path`. How to handle user-enabled non-distributed things in a certain place (as conda needs) without `PSIPATH` (or with that dir standardly appended to `PSIPATH`) hasn't really been thought through. (Though now is the time, for you and others that are non-standard at present.) I don't think `share/psi4` is right because that dir is supposed to be platform independent, so `.so` not suitable. Hence I tentatively selected `psi4aux`. I've done a little internet searching but not much inspection of unpacked conda packages seeking a precedent.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-176983588
https://github.com/psi4/psi4/issues/229#issuecomment-176983588:120,Modifiability,variab,variable,120,"So the main control for finding non-distributed things (basis sets, plugins, etc.) in psi4 is the `PSIPATH` environment variable (http://psicode.org/psi4manual/master/external.html#envvar-PSIPATH) that (for python things) internally prepends to `sys.path`. How to handle user-enabled non-distributed things in a certain place (as conda needs) without `PSIPATH` (or with that dir standardly appended to `PSIPATH`) hasn't really been thought through. (Though now is the time, for you and others that are non-standard at present.) I don't think `share/psi4` is right because that dir is supposed to be platform independent, so `.so` not suitable. Hence I tentatively selected `psi4aux`. I've done a little internet searching but not much inspection of unpacked conda packages seeking a precedent.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-176983588
https://github.com/psi4/psi4/issues/229#issuecomment-176997138:0,Deployability,Install,Installing,0,"Installing user add-ons into the normal tree would be alarming for things like basis sets into `share/psi4/basis` because that could deviously rename common data. But talking it over with a few people, we think that the normal installation tree is fine for conda packages with binaries going to `bin` and python packages going to `lib/python-2.7/site-packages`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-176997138
https://github.com/psi4/psi4/issues/229#issuecomment-176997138:227,Deployability,install,installation,227,"Installing user add-ons into the normal tree would be alarming for things like basis sets into `share/psi4/basis` because that could deviously rename common data. But talking it over with a few people, we think that the normal installation tree is fine for conda packages with binaries going to `bin` and python packages going to `lib/python-2.7/site-packages`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-176997138
https://github.com/psi4/psi4/issues/229#issuecomment-182542054:26,Deployability,install,installation,26,"Resolution: for the conda installation environment, so long as not overwriting distributed file (e.g., no renaming S22 database or cc-pvdz basis set), install into normal location on install tree. Reopen if further questions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-182542054
https://github.com/psi4/psi4/issues/229#issuecomment-182542054:151,Deployability,install,install,151,"Resolution: for the conda installation environment, so long as not overwriting distributed file (e.g., no renaming S22 database or cc-pvdz basis set), install into normal location on install tree. Reopen if further questions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-182542054
https://github.com/psi4/psi4/issues/229#issuecomment-182542054:183,Deployability,install,install,183,"Resolution: for the conda installation environment, so long as not overwriting distributed file (e.g., no renaming S22 database or cc-pvdz basis set), install into normal location on install tree. Reopen if further questions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-182542054
https://github.com/psi4/psi4/issues/229#issuecomment-182553481:224,Availability,down,down,224,"Glad to help, as you're actually using the feature. Note that we're doing some infrastructure reworking (on private repo for now, but private is what conda builds from, again for now) that affect plugins. Until that settles down and appears in public (which is to become our primary repo, for conda, too) with guidelines, you may want to stick with recommending the `0.3` series for your RESP plugin. (Helps that our nightly build box is down for now, so there's only one `0.4` series around https://anaconda.org/psi4/psi4/files.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-182553481
https://github.com/psi4/psi4/issues/229#issuecomment-182553481:438,Availability,down,down,438,"Glad to help, as you're actually using the feature. Note that we're doing some infrastructure reworking (on private repo for now, but private is what conda builds from, again for now) that affect plugins. Until that settles down and appears in public (which is to become our primary repo, for conda, too) with guidelines, you may want to stick with recommending the `0.3` series for your RESP plugin. (Helps that our nightly build box is down for now, so there's only one `0.4` series around https://anaconda.org/psi4/psi4/files.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-182553481
https://github.com/psi4/psi4/issues/229#issuecomment-182553481:196,Modifiability,plugin,plugins,196,"Glad to help, as you're actually using the feature. Note that we're doing some infrastructure reworking (on private repo for now, but private is what conda builds from, again for now) that affect plugins. Until that settles down and appears in public (which is to become our primary repo, for conda, too) with guidelines, you may want to stick with recommending the `0.3` series for your RESP plugin. (Helps that our nightly build box is down for now, so there's only one `0.4` series around https://anaconda.org/psi4/psi4/files.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-182553481
https://github.com/psi4/psi4/issues/229#issuecomment-182553481:393,Modifiability,plugin,plugin,393,"Glad to help, as you're actually using the feature. Note that we're doing some infrastructure reworking (on private repo for now, but private is what conda builds from, again for now) that affect plugins. Until that settles down and appears in public (which is to become our primary repo, for conda, too) with guidelines, you may want to stick with recommending the `0.3` series for your RESP plugin. (Helps that our nightly build box is down for now, so there's only one `0.4` series around https://anaconda.org/psi4/psi4/files.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-182553481
https://github.com/psi4/psi4/issues/229#issuecomment-182553481:310,Usability,guid,guidelines,310,"Glad to help, as you're actually using the feature. Note that we're doing some infrastructure reworking (on private repo for now, but private is what conda builds from, again for now) that affect plugins. Until that settles down and appears in public (which is to become our primary repo, for conda, too) with guidelines, you may want to stick with recommending the `0.3` series for your RESP plugin. (Helps that our nightly build box is down for now, so there's only one `0.4` series around https://anaconda.org/psi4/psi4/files.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-182553481
https://github.com/psi4/psi4/issues/230#issuecomment-178134633:2431,Energy Efficiency,energy,energy,2431,mplete.; > (OO|VV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OV|OO)...; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OV|OV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OV|VV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (VV|OO)...; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (VV|OV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (VV|VV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > Frozen core energy = 0.00000000000000; > ; > Size of irrep 0 of <ab|cd> integrals: 0.017 (MW) / 0.135 (MB); > Size of irrep 1 of <ab|cd> integrals: 0.005 (MW) / 0.041 (MB); > Size of irrep 2 of <ab|cd> integrals: 0.006 (MW) / 0.049 (MB); > Size of irrep 3 of <ab|cd> integrals: 0.014 (MW) / 0.115 (MB); > Total: 0.043 (MW) / 0.341 (MB); > ; > Size of irrep 0 of <ia|bc> integrals: 0.005 (MW) / 0.037 (MB); > Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > Total: 0.011 (MW) / 0.086 (MB); > ; > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > Total: 0.003 (MW) / 0.022 (MB); > ```; > ; > Output from running coupled cluster tests:; > ; > ```; > Start 9: cc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633
https://github.com/psi4/psi4/issues/230#issuecomment-178134633:211,Testability,test,test,211,"I just pulled the code, and will see if I can figure it out. > On Feb 1, 2016, at 1:57 PM, Justin Turney notifications@github.com wrote:; > ; > Something in the recent version of Psi4 is causing coupled cluster test cases to fail on our cluster. It also appears in the clang version of the Travis CI builds. I'm using Intel compiler on our cluster.; > ; > Is there a new transqt/ccsort module, if so it appears to be failing in it:; > ; > From cc1 test output:; > ; > ```; > Wfn Parameters:; > --------------------; > Wavefunction = CCSD; > Number of irreps = 4; > Number of MOs = 25; > Number of active MOs = 25; > AO-Basis = NONE; > Semicanonical = false; > Reference = RHF; > Print Level = 1; > ; > IRREP # MOs # FZDC # DOCC # SOCC # VIRT # FZVR; > ----- ----- ------ ------ ------ ------ ------; > A1 12 0 3 0 9 0; > A2 2 0 0 0 2 0; > B1 4 0 1 0 3 0; > B2 7 0 1 0 6 0; > Transforming integrals...; > IWL integrals will be deleted.; > (OO|OO)...; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 1; > Transforming the one-electron integrals and constructing Fock matrices; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OO|OV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OO|VV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OV|OO)...; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OV|OV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OV|VV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (VV|OO)...; > Starti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633
https://github.com/psi4/psi4/issues/230#issuecomment-178134633:448,Testability,test,test,448,"I just pulled the code, and will see if I can figure it out. > On Feb 1, 2016, at 1:57 PM, Justin Turney notifications@github.com wrote:; > ; > Something in the recent version of Psi4 is causing coupled cluster test cases to fail on our cluster. It also appears in the clang version of the Travis CI builds. I'm using Intel compiler on our cluster.; > ; > Is there a new transqt/ccsort module, if so it appears to be failing in it:; > ; > From cc1 test output:; > ; > ```; > Wfn Parameters:; > --------------------; > Wavefunction = CCSD; > Number of irreps = 4; > Number of MOs = 25; > Number of active MOs = 25; > AO-Basis = NONE; > Semicanonical = false; > Reference = RHF; > Print Level = 1; > ; > IRREP # MOs # FZDC # DOCC # SOCC # VIRT # FZVR; > ----- ----- ------ ------ ------ ------ ------; > A1 12 0 3 0 9 0; > A2 2 0 0 0 2 0; > B1 4 0 1 0 3 0; > B2 7 0 1 0 6 0; > Transforming integrals...; > IWL integrals will be deleted.; > (OO|OO)...; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 1; > Transforming the one-electron integrals and constructing Fock matrices; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OO|OV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OO|VV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OV|OO)...; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OV|OV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OV|VV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (VV|OO)...; > Starti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633
https://github.com/psi4/psi4/issues/230#issuecomment-178134633:3397,Testability,test,tests,3397,tion complete.; > Frozen core energy = 0.00000000000000; > ; > Size of irrep 0 of <ab|cd> integrals: 0.017 (MW) / 0.135 (MB); > Size of irrep 1 of <ab|cd> integrals: 0.005 (MW) / 0.041 (MB); > Size of irrep 2 of <ab|cd> integrals: 0.006 (MW) / 0.049 (MB); > Size of irrep 3 of <ab|cd> integrals: 0.014 (MW) / 0.115 (MB); > Total: 0.043 (MW) / 0.341 (MB); > ; > Size of irrep 0 of <ia|bc> integrals: 0.005 (MW) / 0.037 (MB); > Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > Total: 0.011 (MW) / 0.086 (MB); > ; > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > Total: 0.003 (MW) / 0.022 (MB); > ```; > ; > Output from running coupled cluster tests:; > ; > ```; > Start 9: cc1; > ```; > ; > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > Start 10: cc10; > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > Start 11: cc11; > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > Start 12: cc12; > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > Start 13: cc13; > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > Start 14: cc13a; > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > Start 15: cc14; > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > Start 16: cc15; > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > Start 17: cc16; > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > Start 18: cc17; > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > Other tests are passing:; > ; > ```; > Start 1: adc1; > ```; > ; > 1/294 Test #1: a,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633
https://github.com/psi4/psi4/issues/230#issuecomment-178134633:3450,Testability,Test,Test,3450,tion complete.; > Frozen core energy = 0.00000000000000; > ; > Size of irrep 0 of <ab|cd> integrals: 0.017 (MW) / 0.135 (MB); > Size of irrep 1 of <ab|cd> integrals: 0.005 (MW) / 0.041 (MB); > Size of irrep 2 of <ab|cd> integrals: 0.006 (MW) / 0.049 (MB); > Size of irrep 3 of <ab|cd> integrals: 0.014 (MW) / 0.115 (MB); > Total: 0.043 (MW) / 0.341 (MB); > ; > Size of irrep 0 of <ia|bc> integrals: 0.005 (MW) / 0.037 (MB); > Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > Total: 0.011 (MW) / 0.086 (MB); > ; > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > Total: 0.003 (MW) / 0.022 (MB); > ```; > ; > Output from running coupled cluster tests:; > ; > ```; > Start 9: cc1; > ```; > ; > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > Start 10: cc10; > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > Start 11: cc11; > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > Start 12: cc12; > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > Start 13: cc13; > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > Start 14: cc13a; > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > Start 15: cc14; > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > Start 16: cc15; > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > Start 17: cc16; > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > Start 18: cc17; > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > Other tests are passing:; > ; > ```; > Start 1: adc1; > ```; > ; > 1/294 Test #1: a,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633
https://github.com/psi4/psi4/issues/230#issuecomment-178134633:3538,Testability,Test,Test,3538,Size of irrep 1 of <ab|cd> integrals: 0.005 (MW) / 0.041 (MB); > Size of irrep 2 of <ab|cd> integrals: 0.006 (MW) / 0.049 (MB); > Size of irrep 3 of <ab|cd> integrals: 0.014 (MW) / 0.115 (MB); > Total: 0.043 (MW) / 0.341 (MB); > ; > Size of irrep 0 of <ia|bc> integrals: 0.005 (MW) / 0.037 (MB); > Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > Total: 0.011 (MW) / 0.086 (MB); > ; > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > Total: 0.003 (MW) / 0.022 (MB); > ```; > ; > Output from running coupled cluster tests:; > ; > ```; > Start 9: cc1; > ```; > ; > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > Start 10: cc10; > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > Start 11: cc11; > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > Start 12: cc12; > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > Start 13: cc13; > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > Start 14: cc13a; > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > Start 15: cc14; > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > Start 16: cc15; > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > Start 17: cc16; > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > Start 18: cc17; > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > Other tests are passing:; > ; > ```; > Start 1: adc1; > ```; > ; > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > Start 2: adc2; > 2/294 Test #2: adc2 ............................. Passed 3,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633
https://github.com/psi4/psi4/issues/230#issuecomment-178134633:3627,Testability,Test,Test,3627,d> integrals: 0.006 (MW) / 0.049 (MB); > Size of irrep 3 of <ab|cd> integrals: 0.014 (MW) / 0.115 (MB); > Total: 0.043 (MW) / 0.341 (MB); > ; > Size of irrep 0 of <ia|bc> integrals: 0.005 (MW) / 0.037 (MB); > Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > Total: 0.011 (MW) / 0.086 (MB); > ; > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > Total: 0.003 (MW) / 0.022 (MB); > ```; > ; > Output from running coupled cluster tests:; > ; > ```; > Start 9: cc1; > ```; > ; > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > Start 10: cc10; > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > Start 11: cc11; > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > Start 12: cc12; > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > Start 13: cc13; > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > Start 14: cc13a; > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > Start 15: cc14; > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > Start 16: cc15; > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > Start 17: cc16; > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > Start 18: cc17; > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > Other tests are passing:; > ; > ```; > Start 1: adc1; > ```; > ; > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > Start 2: adc2; > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > Start 3: casscf-fzc-sp; > 3/294 Test #3: casscf-fzc-sp .................... P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633
https://github.com/psi4/psi4/issues/230#issuecomment-178134633:3716,Testability,Test,Test,3716, / 0.115 (MB); > Total: 0.043 (MW) / 0.341 (MB); > ; > Size of irrep 0 of <ia|bc> integrals: 0.005 (MW) / 0.037 (MB); > Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > Total: 0.011 (MW) / 0.086 (MB); > ; > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > Total: 0.003 (MW) / 0.022 (MB); > ```; > ; > Output from running coupled cluster tests:; > ; > ```; > Start 9: cc1; > ```; > ; > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > Start 10: cc10; > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > Start 11: cc11; > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > Start 12: cc12; > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > Start 13: cc13; > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > Start 14: cc13a; > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > Start 15: cc14; > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > Start 16: cc15; > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > Start 17: cc16; > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > Start 18: cc17; > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > Other tests are passing:; > ; > ```; > Start 1: adc1; > ```; > ; > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > Start 2: adc2; > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > Start 3: casscf-fzc-sp; > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > Start 4: casscf-sa-sp; > 4/294 Test #4: casscf-sa-sp ..................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633
https://github.com/psi4/psi4/issues/230#issuecomment-178134633:3805,Testability,Test,Test,3805,ls: 0.005 (MW) / 0.037 (MB); > Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > Total: 0.011 (MW) / 0.086 (MB); > ; > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > Total: 0.003 (MW) / 0.022 (MB); > ```; > ; > Output from running coupled cluster tests:; > ; > ```; > Start 9: cc1; > ```; > ; > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > Start 10: cc10; > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > Start 11: cc11; > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > Start 12: cc12; > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > Start 13: cc13; > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > Start 14: cc13a; > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > Start 15: cc14; > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > Start 16: cc15; > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > Start 17: cc16; > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > Start 18: cc17; > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > Other tests are passing:; > ; > ```; > Start 1: adc1; > ```; > ; > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > Start 2: adc2; > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > Start 3: casscf-fzc-sp; > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > Start 4: casscf-sa-sp; > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > Start 5: casscf-sp; > 5/294 Test #5: casscf-sp ...................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633
https://github.com/psi4/psi4/issues/230#issuecomment-178134633:3895,Testability,Test,Test,3895,B); > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > Total: 0.011 (MW) / 0.086 (MB); > ; > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > Total: 0.003 (MW) / 0.022 (MB); > ```; > ; > Output from running coupled cluster tests:; > ; > ```; > Start 9: cc1; > ```; > ; > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > Start 10: cc10; > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > Start 11: cc11; > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > Start 12: cc12; > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > Start 13: cc13; > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > Start 14: cc13a; > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > Start 15: cc14; > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > Start 16: cc15; > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > Start 17: cc16; > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > Start 18: cc17; > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > Other tests are passing:; > ; > ```; > Start 1: adc1; > ```; > ; > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > Start 2: adc2; > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > Start 3: casscf-fzc-sp; > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > Start 4: casscf-sa-sp; > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > Start 5: casscf-sp; > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > —; > Reply to this email directly or view it on GitHub https://gi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633
https://github.com/psi4/psi4/issues/230#issuecomment-178134633:3984,Testability,Test,Test,3984,grals: 0.002 (MW) / 0.012 (MB); > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > Total: 0.011 (MW) / 0.086 (MB); > ; > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > Total: 0.003 (MW) / 0.022 (MB); > ```; > ; > Output from running coupled cluster tests:; > ; > ```; > Start 9: cc1; > ```; > ; > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > Start 10: cc10; > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > Start 11: cc11; > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > Start 12: cc12; > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > Start 13: cc13; > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > Start 14: cc13a; > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > Start 15: cc14; > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > Start 16: cc15; > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > Start 17: cc16; > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > Start 18: cc17; > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > Other tests are passing:; > ; > ```; > Start 1: adc1; > ```; > ; > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > Start 2: adc2; > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > Start 3: casscf-fzc-sp; > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > Start 4: casscf-sa-sp; > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > Start 5: casscf-sp; > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/230.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633
https://github.com/psi4/psi4/issues/230#issuecomment-178134633:4073,Testability,Test,Test,4073,grals: 0.002 (MW) / 0.012 (MB); > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > Total: 0.011 (MW) / 0.086 (MB); > ; > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > Total: 0.003 (MW) / 0.022 (MB); > ```; > ; > Output from running coupled cluster tests:; > ; > ```; > Start 9: cc1; > ```; > ; > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > Start 10: cc10; > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > Start 11: cc11; > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > Start 12: cc12; > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > Start 13: cc13; > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > Start 14: cc13a; > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > Start 15: cc14; > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > Start 16: cc15; > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > Start 17: cc16; > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > Start 18: cc17; > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > Other tests are passing:; > ; > ```; > Start 1: adc1; > ```; > ; > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > Start 2: adc2; > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > Start 3: casscf-fzc-sp; > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > Start 4: casscf-sa-sp; > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > Start 5: casscf-sp; > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/230.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633
https://github.com/psi4/psi4/issues/230#issuecomment-178134633:4162,Testability,Test,Test,4162,grals: 0.002 (MW) / 0.012 (MB); > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > Total: 0.011 (MW) / 0.086 (MB); > ; > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > Total: 0.003 (MW) / 0.022 (MB); > ```; > ; > Output from running coupled cluster tests:; > ; > ```; > Start 9: cc1; > ```; > ; > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > Start 10: cc10; > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > Start 11: cc11; > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > Start 12: cc12; > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > Start 13: cc13; > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > Start 14: cc13a; > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > Start 15: cc14; > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > Start 16: cc15; > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > Start 17: cc16; > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > Start 18: cc17; > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > Other tests are passing:; > ; > ```; > Start 1: adc1; > ```; > ; > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > Start 2: adc2; > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > Start 3: casscf-fzc-sp; > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > Start 4: casscf-sa-sp; > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > Start 5: casscf-sp; > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/230.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633
https://github.com/psi4/psi4/issues/230#issuecomment-178134633:4252,Testability,Test,Test,4252,grals: 0.002 (MW) / 0.012 (MB); > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > Total: 0.011 (MW) / 0.086 (MB); > ; > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > Total: 0.003 (MW) / 0.022 (MB); > ```; > ; > Output from running coupled cluster tests:; > ; > ```; > Start 9: cc1; > ```; > ; > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > Start 10: cc10; > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > Start 11: cc11; > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > Start 12: cc12; > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > Start 13: cc13; > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > Start 14: cc13a; > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > Start 15: cc14; > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > Start 16: cc15; > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > Start 17: cc16; > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > Start 18: cc17; > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > Other tests are passing:; > ; > ```; > Start 1: adc1; > ```; > ; > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > Start 2: adc2; > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > Start 3: casscf-fzc-sp; > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > Start 4: casscf-sa-sp; > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > Start 5: casscf-sp; > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/230.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633
https://github.com/psi4/psi4/issues/230#issuecomment-178134633:4324,Testability,test,tests,4324,grals: 0.002 (MW) / 0.012 (MB); > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > Total: 0.011 (MW) / 0.086 (MB); > ; > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > Total: 0.003 (MW) / 0.022 (MB); > ```; > ; > Output from running coupled cluster tests:; > ; > ```; > Start 9: cc1; > ```; > ; > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > Start 10: cc10; > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > Start 11: cc11; > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > Start 12: cc12; > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > Start 13: cc13; > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > Start 14: cc13a; > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > Start 15: cc14; > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > Start 16: cc15; > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > Start 17: cc16; > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > Start 18: cc17; > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > Other tests are passing:; > ; > ```; > Start 1: adc1; > ```; > ; > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > Start 2: adc2; > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > Start 3: casscf-fzc-sp; > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > Start 4: casscf-sa-sp; > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > Start 5: casscf-sp; > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/230.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633
https://github.com/psi4/psi4/issues/230#issuecomment-178134633:4391,Testability,Test,Test,4391,grals: 0.002 (MW) / 0.012 (MB); > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > Total: 0.011 (MW) / 0.086 (MB); > ; > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > Total: 0.003 (MW) / 0.022 (MB); > ```; > ; > Output from running coupled cluster tests:; > ; > ```; > Start 9: cc1; > ```; > ; > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > Start 10: cc10; > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > Start 11: cc11; > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > Start 12: cc12; > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > Start 13: cc13; > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > Start 14: cc13a; > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > Start 15: cc14; > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > Start 16: cc15; > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > Start 17: cc16; > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > Start 18: cc17; > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > Other tests are passing:; > ; > ```; > Start 1: adc1; > ```; > ; > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > Start 2: adc2; > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > Start 3: casscf-fzc-sp; > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > Start 4: casscf-sa-sp; > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > Start 5: casscf-sp; > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/230.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633
https://github.com/psi4/psi4/issues/230#issuecomment-178134633:4478,Testability,Test,Test,4478,grals: 0.002 (MW) / 0.012 (MB); > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > Total: 0.011 (MW) / 0.086 (MB); > ; > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > Total: 0.003 (MW) / 0.022 (MB); > ```; > ; > Output from running coupled cluster tests:; > ; > ```; > Start 9: cc1; > ```; > ; > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > Start 10: cc10; > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > Start 11: cc11; > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > Start 12: cc12; > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > Start 13: cc13; > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > Start 14: cc13a; > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > Start 15: cc14; > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > Start 16: cc15; > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > Start 17: cc16; > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > Start 18: cc17; > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > Other tests are passing:; > ; > ```; > Start 1: adc1; > ```; > ; > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > Start 2: adc2; > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > Start 3: casscf-fzc-sp; > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > Start 4: casscf-sa-sp; > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > Start 5: casscf-sp; > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/230.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633
https://github.com/psi4/psi4/issues/230#issuecomment-178134633:4574,Testability,Test,Test,4574,grals: 0.002 (MW) / 0.012 (MB); > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > Total: 0.011 (MW) / 0.086 (MB); > ; > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > Total: 0.003 (MW) / 0.022 (MB); > ```; > ; > Output from running coupled cluster tests:; > ; > ```; > Start 9: cc1; > ```; > ; > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > Start 10: cc10; > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > Start 11: cc11; > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > Start 12: cc12; > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > Start 13: cc13; > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > Start 14: cc13a; > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > Start 15: cc14; > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > Start 16: cc15; > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > Start 17: cc16; > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > Start 18: cc17; > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > Other tests are passing:; > ; > ```; > Start 1: adc1; > ```; > ; > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > Start 2: adc2; > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > Start 3: casscf-fzc-sp; > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > Start 4: casscf-sa-sp; > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > Start 5: casscf-sp; > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/230.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633
https://github.com/psi4/psi4/issues/230#issuecomment-178134633:4668,Testability,Test,Test,4668,grals: 0.002 (MW) / 0.012 (MB); > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > Total: 0.011 (MW) / 0.086 (MB); > ; > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > Total: 0.003 (MW) / 0.022 (MB); > ```; > ; > Output from running coupled cluster tests:; > ; > ```; > Start 9: cc1; > ```; > ; > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > Start 10: cc10; > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > Start 11: cc11; > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > Start 12: cc12; > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > Start 13: cc13; > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > Start 14: cc13a; > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > Start 15: cc14; > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > Start 16: cc15; > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > Start 17: cc16; > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > Start 18: cc17; > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > Other tests are passing:; > ; > ```; > Start 1: adc1; > ```; > ; > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > Start 2: adc2; > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > Start 3: casscf-fzc-sp; > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > Start 4: casscf-sa-sp; > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > Start 5: casscf-sp; > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/230.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633
https://github.com/psi4/psi4/issues/230#issuecomment-178134633:4759,Testability,Test,Test,4759,grals: 0.002 (MW) / 0.012 (MB); > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > Total: 0.011 (MW) / 0.086 (MB); > ; > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > Total: 0.003 (MW) / 0.022 (MB); > ```; > ; > Output from running coupled cluster tests:; > ; > ```; > Start 9: cc1; > ```; > ; > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > Start 10: cc10; > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > Start 11: cc11; > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > Start 12: cc12; > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > Start 13: cc13; > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > Start 14: cc13a; > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > Start 15: cc14; > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > Start 16: cc15; > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > Start 17: cc16; > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > Start 18: cc17; > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > Other tests are passing:; > ; > ```; > Start 1: adc1; > ```; > ; > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > Start 2: adc2; > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > Start 3: casscf-fzc-sp; > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > Start 4: casscf-sa-sp; > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > Start 5: casscf-sp; > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/230.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:2803,Energy Efficiency,energy,energy,2803,formation.; > > Two-electron integral transformation complete.; > > (OV|OO)...; > > Starting first half-transformation.; > > Sorting half-transformed integrals.; > > First half integral transformation complete.; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (OV|OV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (OV|VV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (VV|OO)...; > > Starting first half-transformation.; > > Sorting half-transformed integrals.; > > First half integral transformation complete.; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (VV|OV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (VV|VV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > Frozen core energy = 0.00000000000000; > > ; > > Size of irrep 0 of <ab|cd> integrals: 0.017 (MW) / 0.135 (MB); > > Size of irrep 1 of <ab|cd> integrals: 0.005 (MW) / 0.041 (MB); > > Size of irrep 2 of <ab|cd> integrals: 0.006 (MW) / 0.049 (MB); > > Size of irrep 3 of <ab|cd> integrals: 0.014 (MW) / 0.115 (MB); > > Total: 0.043 (MW) / 0.341 (MB); > > ; > > Size of irrep 0 of <ia|bc> integrals: 0.005 (MW) / 0.037 (MB); > > Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); > > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > > Total: 0.011 (MW) / 0.086 (MB); > > ; > > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:18,Testability,test,tests,18,"Actually, all the tests are failing for me on my MacOS systems:. https://testboard.org/cdash/index.php?project=Psi&date=2016-01-31. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Mon, Feb 1, 2016 at 2:11 PM, Andy Simmonett notifications@github.com; wrote:. > I just pulled the code, and will see if I can figure it out.; > ; > > On Feb 1, 2016, at 1:57 PM, Justin Turney notifications@github.com; > > wrote:; > > ; > > Something in the recent version of Psi4 is causing coupled cluster test; > > cases to fail on our cluster. It also appears in the clang version of the; > > Travis CI builds. I'm using Intel compiler on our cluster.; > > ; > > Is there a new transqt/ccsort module, if so it appears to be failing in; > > it:; > > ; > > From cc1 test output:; > > ; > > ## Wfn Parameters:; > > ; > > Wavefunction = CCSD; > > Number of irreps = 4; > > Number of MOs = 25; > > Number of active MOs = 25; > > AO-Basis = NONE; > > Semicanonical = false; > > Reference = RHF; > > Print Level = 1; > > ; > > IRREP # MOs # FZDC # DOCC # SOCC # VIRT # FZVR; > > ; > > ---; > > ; > > A1 12 0 3 0 9 0; > > A2 2 0 0 0 2 0; > > B1 4 0 1 0 3 0; > > B2 7 0 1 0 6 0; > > Transforming integrals...; > > IWL integrals will be deleted.; > > (OO|OO)...; > > Presorting SO-basis two-electron integrals.; > > Sorting File: SO Ints (nn|nn) nbuckets = 1; > > Transforming the one-electron integrals and constructing Fock matrices; > > Starting first half-transformation.; > > Sorting half-transformed integrals.; > > First half integral transformation complete.; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (OO|OV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (OO|VV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (OV|OO)...; > > Starting first half-transformation.; > > Sorting half-transformed integrals.; > > First half integral transformation c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:73,Testability,test,testboard,73,"Actually, all the tests are failing for me on my MacOS systems:. https://testboard.org/cdash/index.php?project=Psi&date=2016-01-31. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Mon, Feb 1, 2016 at 2:11 PM, Andy Simmonett notifications@github.com; wrote:. > I just pulled the code, and will see if I can figure it out.; > ; > > On Feb 1, 2016, at 1:57 PM, Justin Turney notifications@github.com; > > wrote:; > > ; > > Something in the recent version of Psi4 is causing coupled cluster test; > > cases to fail on our cluster. It also appears in the clang version of the; > > Travis CI builds. I'm using Intel compiler on our cluster.; > > ; > > Is there a new transqt/ccsort module, if so it appears to be failing in; > > it:; > > ; > > From cc1 test output:; > > ; > > ## Wfn Parameters:; > > ; > > Wavefunction = CCSD; > > Number of irreps = 4; > > Number of MOs = 25; > > Number of active MOs = 25; > > AO-Basis = NONE; > > Semicanonical = false; > > Reference = RHF; > > Print Level = 1; > > ; > > IRREP # MOs # FZDC # DOCC # SOCC # VIRT # FZVR; > > ; > > ---; > > ; > > A1 12 0 3 0 9 0; > > A2 2 0 0 0 2 0; > > B1 4 0 1 0 3 0; > > B2 7 0 1 0 6 0; > > Transforming integrals...; > > IWL integrals will be deleted.; > > (OO|OO)...; > > Presorting SO-basis two-electron integrals.; > > Sorting File: SO Ints (nn|nn) nbuckets = 1; > > Transforming the one-electron integrals and constructing Fock matrices; > > Starting first half-transformation.; > > Sorting half-transformed integrals.; > > First half integral transformation complete.; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (OO|OV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (OO|VV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (OV|OO)...; > > Starting first half-transformation.; > > Sorting half-transformed integrals.; > > First half integral transformation c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:495,Testability,test,test,495,"Actually, all the tests are failing for me on my MacOS systems:. https://testboard.org/cdash/index.php?project=Psi&date=2016-01-31. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Mon, Feb 1, 2016 at 2:11 PM, Andy Simmonett notifications@github.com; wrote:. > I just pulled the code, and will see if I can figure it out.; > ; > > On Feb 1, 2016, at 1:57 PM, Justin Turney notifications@github.com; > > wrote:; > > ; > > Something in the recent version of Psi4 is causing coupled cluster test; > > cases to fail on our cluster. It also appears in the clang version of the; > > Travis CI builds. I'm using Intel compiler on our cluster.; > > ; > > Is there a new transqt/ccsort module, if so it appears to be failing in; > > it:; > > ; > > From cc1 test output:; > > ; > > ## Wfn Parameters:; > > ; > > Wavefunction = CCSD; > > Number of irreps = 4; > > Number of MOs = 25; > > Number of active MOs = 25; > > AO-Basis = NONE; > > Semicanonical = false; > > Reference = RHF; > > Print Level = 1; > > ; > > IRREP # MOs # FZDC # DOCC # SOCC # VIRT # FZVR; > > ; > > ---; > > ; > > A1 12 0 3 0 9 0; > > A2 2 0 0 0 2 0; > > B1 4 0 1 0 3 0; > > B2 7 0 1 0 6 0; > > Transforming integrals...; > > IWL integrals will be deleted.; > > (OO|OO)...; > > Presorting SO-basis two-electron integrals.; > > Sorting File: SO Ints (nn|nn) nbuckets = 1; > > Transforming the one-electron integrals and constructing Fock matrices; > > Starting first half-transformation.; > > Sorting half-transformed integrals.; > > First half integral transformation complete.; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (OO|OV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (OO|VV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (OV|OO)...; > > Starting first half-transformation.; > > Sorting half-transformed integrals.; > > First half integral transformation c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:755,Testability,test,test,755,"Actually, all the tests are failing for me on my MacOS systems:. https://testboard.org/cdash/index.php?project=Psi&date=2016-01-31. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Mon, Feb 1, 2016 at 2:11 PM, Andy Simmonett notifications@github.com; wrote:. > I just pulled the code, and will see if I can figure it out.; > ; > > On Feb 1, 2016, at 1:57 PM, Justin Turney notifications@github.com; > > wrote:; > > ; > > Something in the recent version of Psi4 is causing coupled cluster test; > > cases to fail on our cluster. It also appears in the clang version of the; > > Travis CI builds. I'm using Intel compiler on our cluster.; > > ; > > Is there a new transqt/ccsort module, if so it appears to be failing in; > > it:; > > ; > > From cc1 test output:; > > ; > > ## Wfn Parameters:; > > ; > > Wavefunction = CCSD; > > Number of irreps = 4; > > Number of MOs = 25; > > Number of active MOs = 25; > > AO-Basis = NONE; > > Semicanonical = false; > > Reference = RHF; > > Print Level = 1; > > ; > > IRREP # MOs # FZDC # DOCC # SOCC # VIRT # FZVR; > > ; > > ---; > > ; > > A1 12 0 3 0 9 0; > > A2 2 0 0 0 2 0; > > B1 4 0 1 0 3 0; > > B2 7 0 1 0 6 0; > > Transforming integrals...; > > IWL integrals will be deleted.; > > (OO|OO)...; > > Presorting SO-basis two-electron integrals.; > > Sorting File: SO Ints (nn|nn) nbuckets = 1; > > Transforming the one-electron integrals and constructing Fock matrices; > > Starting first half-transformation.; > > Sorting half-transformed integrals.; > > First half integral transformation complete.; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (OO|OV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (OO|VV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (OV|OO)...; > > Starting first half-transformation.; > > Sorting half-transformed integrals.; > > First half integral transformation c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:3796,Testability,test,tests,3796,core energy = 0.00000000000000; > > ; > > Size of irrep 0 of <ab|cd> integrals: 0.017 (MW) / 0.135 (MB); > > Size of irrep 1 of <ab|cd> integrals: 0.005 (MW) / 0.041 (MB); > > Size of irrep 2 of <ab|cd> integrals: 0.006 (MW) / 0.049 (MB); > > Size of irrep 3 of <ab|cd> integrals: 0.014 (MW) / 0.115 (MB); > > Total: 0.043 (MW) / 0.341 (MB); > > ; > > Size of irrep 0 of <ia|bc> integrals: 0.005 (MW) / 0.037 (MB); > > Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); > > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > > Total: 0.011 (MW) / 0.086 (MB); > > ; > > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster tests:; > > ; > > Start 9: cc1; > > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > > Start 10: cc10; > > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > > Start 11: cc11; > > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > > Start 12: cc12; > > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > > Start 13: cc13; > > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > > Start 14: cc13a; > > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > > Start 15: cc14; > > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > > Start 16: cc15; > > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > > Start 17: cc16; > > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > > Start 18: cc17; > > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > > Other tests are passing:; > > ; > > Start 1: adc1; > > 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:3837,Testability,Test,Test,3837,core energy = 0.00000000000000; > > ; > > Size of irrep 0 of <ab|cd> integrals: 0.017 (MW) / 0.135 (MB); > > Size of irrep 1 of <ab|cd> integrals: 0.005 (MW) / 0.041 (MB); > > Size of irrep 2 of <ab|cd> integrals: 0.006 (MW) / 0.049 (MB); > > Size of irrep 3 of <ab|cd> integrals: 0.014 (MW) / 0.115 (MB); > > Total: 0.043 (MW) / 0.341 (MB); > > ; > > Size of irrep 0 of <ia|bc> integrals: 0.005 (MW) / 0.037 (MB); > > Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); > > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > > Total: 0.011 (MW) / 0.086 (MB); > > ; > > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster tests:; > > ; > > Start 9: cc1; > > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > > Start 10: cc10; > > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > > Start 11: cc11; > > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > > Start 12: cc12; > > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > > Start 13: cc13; > > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > > Start 14: cc13a; > > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > > Start 15: cc14; > > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > > Start 16: cc15; > > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > > Start 17: cc16; > > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > > Start 18: cc17; > > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > > Other tests are passing:; > > ; > > Start 1: adc1; > > 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:3929,Testability,Test,Test,3929,ep 1 of <ab|cd> integrals: 0.005 (MW) / 0.041 (MB); > > Size of irrep 2 of <ab|cd> integrals: 0.006 (MW) / 0.049 (MB); > > Size of irrep 3 of <ab|cd> integrals: 0.014 (MW) / 0.115 (MB); > > Total: 0.043 (MW) / 0.341 (MB); > > ; > > Size of irrep 0 of <ia|bc> integrals: 0.005 (MW) / 0.037 (MB); > > Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); > > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > > Total: 0.011 (MW) / 0.086 (MB); > > ; > > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster tests:; > > ; > > Start 9: cc1; > > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > > Start 10: cc10; > > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > > Start 11: cc11; > > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > > Start 12: cc12; > > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > > Start 13: cc13; > > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > > Start 14: cc13a; > > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > > Start 15: cc14; > > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > > Start 16: cc15; > > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > > Start 17: cc16; > > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > > Start 18: cc17; > > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > > Other tests are passing:; > > ; > > Start 1: adc1; > > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > > Start 2: adc2; > > 2/294 Test #2: adc2 ..........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:4022,Testability,Test,Test,4022, 0.006 (MW) / 0.049 (MB); > > Size of irrep 3 of <ab|cd> integrals: 0.014 (MW) / 0.115 (MB); > > Total: 0.043 (MW) / 0.341 (MB); > > ; > > Size of irrep 0 of <ia|bc> integrals: 0.005 (MW) / 0.037 (MB); > > Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); > > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > > Total: 0.011 (MW) / 0.086 (MB); > > ; > > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster tests:; > > ; > > Start 9: cc1; > > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > > Start 10: cc10; > > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > > Start 11: cc11; > > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > > Start 12: cc12; > > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > > Start 13: cc13; > > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > > Start 14: cc13a; > > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > > Start 15: cc14; > > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > > Start 16: cc15; > > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > > Start 17: cc16; > > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > > Start 18: cc17; > > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > > Other tests are passing:; > > ; > > Start 1: adc1; > > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > > Start 2: adc2; > > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > > Start 3: casscf-fzc-sp; > > 3/294 Test #3: casscf-f,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:4115,Testability,Test,Test,4115,> > Total: 0.043 (MW) / 0.341 (MB); > > ; > > Size of irrep 0 of <ia|bc> integrals: 0.005 (MW) / 0.037 (MB); > > Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); > > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > > Total: 0.011 (MW) / 0.086 (MB); > > ; > > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster tests:; > > ; > > Start 9: cc1; > > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > > Start 10: cc10; > > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > > Start 11: cc11; > > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > > Start 12: cc12; > > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > > Start 13: cc13; > > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > > Start 14: cc13a; > > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > > Start 15: cc14; > > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > > Start 16: cc15; > > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > > Start 17: cc16; > > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > > Start 18: cc17; > > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > > Other tests are passing:; > > ; > > Start 1: adc1; > > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > > Start 2: adc2; > > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > > Start 3: casscf-fzc-sp; > > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > > Start 4: casscf-sa-sp; > > 4/294 Test #4: cas,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:4208,Testability,Test,Test,4208,) / 0.037 (MB); > > Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); > > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > > Total: 0.011 (MW) / 0.086 (MB); > > ; > > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster tests:; > > ; > > Start 9: cc1; > > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > > Start 10: cc10; > > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > > Start 11: cc11; > > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > > Start 12: cc12; > > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > > Start 13: cc13; > > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > > Start 14: cc13a; > > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > > Start 15: cc14; > > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > > Start 16: cc15; > > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > > Start 17: cc16; > > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > > Start 18: cc17; > > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > > Other tests are passing:; > > ; > > Start 1: adc1; > > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > > Start 2: adc2; > > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > > Start 3: casscf-fzc-sp; > > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > > Start 4: casscf-sa-sp; > > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > > Start 5: casscf-sp; > > 5/294 Test #5: c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:4302,Testability,Test,Test,4302, irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > > Total: 0.011 (MW) / 0.086 (MB); > > ; > > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster tests:; > > ; > > Start 9: cc1; > > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > > Start 10: cc10; > > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > > Start 11: cc11; > > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > > Start 12: cc12; > > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > > Start 13: cc13; > > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > > Start 14: cc13a; > > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > > Start 15: cc14; > > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > > Start 16: cc15; > > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > > Start 17: cc16; > > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > > Start 18: cc17; > > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > > Other tests are passing:; > > ; > > Start 1: adc1; > > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > > Start 2: adc2; > > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > > Start 3: casscf-fzc-sp; > > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > > Start 4: casscf-sa-sp; > > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > > Start 5: casscf-sp; > > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > > —; > > Reply to this email directly or ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:4395,Testability,Test,Test,4395,als: 0.003 (MW) / 0.028 (MB); > > Total: 0.011 (MW) / 0.086 (MB); > > ; > > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster tests:; > > ; > > Start 9: cc1; > > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > > Start 10: cc10; > > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > > Start 11: cc11; > > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > > Start 12: cc12; > > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > > Start 13: cc13; > > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > > Start 14: cc13a; > > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > > Start 15: cc14; > > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > > Start 16: cc15; > > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > > Start 17: cc16; > > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > > Start 18: cc17; > > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > > Other tests are passing:; > > ; > > Start 1: adc1; > > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > > Start 2: adc2; > > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > > Start 3: casscf-fzc-sp; > > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > > Start 4: casscf-sa-sp; > > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > > Start 5: casscf-sp; > > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4public/issues/230>.; > ; > —; > Reply to,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:4488,Testability,Test,Test,4488,f tijab amplitudes: 0.001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster tests:; > > ; > > Start 9: cc1; > > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > > Start 10: cc10; > > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > > Start 11: cc11; > > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > > Start 12: cc12; > > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > > Start 13: cc13; > > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > > Start 14: cc13a; > > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > > Start 15: cc14; > > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > > Start 16: cc15; > > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > > Start 17: cc16; > > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > > Start 18: cc17; > > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > > Other tests are passing:; > > ; > > Start 1: adc1; > > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > > Start 2: adc2; > > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > > Start 3: casscf-fzc-sp; > > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > > Start 4: casscf-sa-sp; > > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > > Start 5: casscf-sp; > > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4public/issues/230>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#is,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:4581,Testability,Test,Test,4581,001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster tests:; > > ; > > Start 9: cc1; > > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > > Start 10: cc10; > > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > > Start 11: cc11; > > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > > Start 12: cc12; > > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > > Start 13: cc13; > > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > > Start 14: cc13a; > > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > > Start 15: cc14; > > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > > Start 16: cc15; > > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > > Start 17: cc16; > > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > > Start 18: cc17; > > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > > Other tests are passing:; > > ; > > Start 1: adc1; > > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > > Start 2: adc2; > > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > > Start 3: casscf-fzc-sp; > > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > > Start 4: casscf-sa-sp; > > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > > Start 5: casscf-sp; > > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4public/issues/230>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178134633.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:4675,Testability,Test,Test,4675,001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster tests:; > > ; > > Start 9: cc1; > > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > > Start 10: cc10; > > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > > Start 11: cc11; > > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > > Start 12: cc12; > > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > > Start 13: cc13; > > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > > Start 14: cc13a; > > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > > Start 15: cc14; > > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > > Start 16: cc15; > > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > > Start 17: cc16; > > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > > Start 18: cc17; > > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > > Other tests are passing:; > > ; > > Start 1: adc1; > > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > > Start 2: adc2; > > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > > Start 3: casscf-fzc-sp; > > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > > Start 4: casscf-sa-sp; > > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > > Start 5: casscf-sp; > > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4public/issues/230>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178134633.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:4749,Testability,test,tests,4749,001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster tests:; > > ; > > Start 9: cc1; > > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > > Start 10: cc10; > > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > > Start 11: cc11; > > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > > Start 12: cc12; > > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > > Start 13: cc13; > > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > > Start 14: cc13a; > > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > > Start 15: cc14; > > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > > Start 16: cc15; > > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > > Start 17: cc16; > > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > > Start 18: cc17; > > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > > Other tests are passing:; > > ; > > Start 1: adc1; > > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > > Start 2: adc2; > > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > > Start 3: casscf-fzc-sp; > > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > > Start 4: casscf-sa-sp; > > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > > Start 5: casscf-sp; > > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4public/issues/230>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178134633.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:4804,Testability,Test,Test,4804,001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster tests:; > > ; > > Start 9: cc1; > > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > > Start 10: cc10; > > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > > Start 11: cc11; > > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > > Start 12: cc12; > > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > > Start 13: cc13; > > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > > Start 14: cc13a; > > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > > Start 15: cc14; > > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > > Start 16: cc15; > > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > > Start 17: cc16; > > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > > Start 18: cc17; > > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > > Other tests are passing:; > > ; > > Start 1: adc1; > > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > > Start 2: adc2; > > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > > Start 3: casscf-fzc-sp; > > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > > Start 4: casscf-sa-sp; > > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > > Start 5: casscf-sp; > > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4public/issues/230>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178134633.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:4895,Testability,Test,Test,4895,001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster tests:; > > ; > > Start 9: cc1; > > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > > Start 10: cc10; > > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > > Start 11: cc11; > > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > > Start 12: cc12; > > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > > Start 13: cc13; > > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > > Start 14: cc13a; > > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > > Start 15: cc14; > > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > > Start 16: cc15; > > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > > Start 17: cc16; > > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > > Start 18: cc17; > > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > > Other tests are passing:; > > ; > > Start 1: adc1; > > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > > Start 2: adc2; > > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > > Start 3: casscf-fzc-sp; > > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > > Start 4: casscf-sa-sp; > > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > > Start 5: casscf-sp; > > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4public/issues/230>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178134633.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:4995,Testability,Test,Test,4995,001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster tests:; > > ; > > Start 9: cc1; > > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > > Start 10: cc10; > > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > > Start 11: cc11; > > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > > Start 12: cc12; > > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > > Start 13: cc13; > > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > > Start 14: cc13a; > > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > > Start 15: cc14; > > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > > Start 16: cc15; > > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > > Start 17: cc16; > > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > > Start 18: cc17; > > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > > Other tests are passing:; > > ; > > Start 1: adc1; > > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > > Start 2: adc2; > > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > > Start 3: casscf-fzc-sp; > > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > > Start 4: casscf-sa-sp; > > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > > Start 5: casscf-sp; > > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4public/issues/230>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178134633.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:5093,Testability,Test,Test,5093,001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster tests:; > > ; > > Start 9: cc1; > > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > > Start 10: cc10; > > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > > Start 11: cc11; > > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > > Start 12: cc12; > > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > > Start 13: cc13; > > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > > Start 14: cc13a; > > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > > Start 15: cc14; > > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > > Start 16: cc15; > > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > > Start 17: cc16; > > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > > Start 18: cc17; > > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > > Other tests are passing:; > > ; > > Start 1: adc1; > > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > > Start 2: adc2; > > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > > Start 3: casscf-fzc-sp; > > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > > Start 4: casscf-sa-sp; > > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > > Start 5: casscf-sp; > > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4public/issues/230>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178134633.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205078:5188,Testability,Test,Test,5188,001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster tests:; > > ; > > Start 9: cc1; > > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > > Start 10: cc10; > > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > > Start 11: cc11; > > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > > Start 12: cc12; > > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > > Start 13: cc13; > > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > > Start 14: cc13a; > > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > > Start 15: cc14; > > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > > Start 16: cc15; > > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > > Start 17: cc16; > > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > > Start 18: cc17; > > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > > Other tests are passing:; > > ; > > Start 1: adc1; > > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > > Start 2: adc2; > > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > > Start 3: casscf-fzc-sp; > > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > > Start 4: casscf-sa-sp; > > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > > Start 5: casscf-sp; > > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4public/issues/230>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178134633.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078
https://github.com/psi4/psi4/issues/230#issuecomment-178205819:4,Testability,test,tests,4,"The tests pass on my MacBook (clang 7.0.2), so I'm trying to reproduce on Linux right now. Valgrind should help, me thinks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205819
https://github.com/psi4/psi4/issues/230#issuecomment-178220621:115,Availability,error,error,115,"Everything passes on my Linux box too, with Intel 15.0.2. I'll try a fresh checkout and see if I can reproduce the error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178220621
https://github.com/psi4/psi4/issues/230#issuecomment-178350753:175,Availability,error,error,175,"Just a quick update - I'm making a little bit of progress. I hacked my local branch to get valgrind info from the test machines. Here's the pertinent section of the resulting error:. `vex amd64->IR: unhandled instruction bytes: 0xF 0xB 0x89 0xD1 0x48 0x89 0x45 0xC8; ==20864== valgrind: Unrecognised instruction at address 0x22fd55c.; ==20864== at 0x22FD55C: psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, std::string, std::string, char const*) (buf4_sort.cc:1977); ==20864== by 0x191AEB0: psi::cctransort::sort_tei_rhf(boost::shared_ptr<psi::PSIO>, int) (sort_tei_rhf.cc:35); ==20864== by 0x18F8C81: psi::cctransort::cctransort(psi::Options&) (cctransort.cc:472); ==20864== by 0x1434733: py_psi_cctransort() (python.cc:497); ==20864== by 0x144C47D: _object* boost::python::detail::invoke<boost::python::to_python_value<double const&>, double (*)()>(boost::python::detail::invoke_tag_<false, false>, boost::python::to_python_value<double const&> const&, double (*&)()) (invoke.hpp:75)`. I'm digging around now, because I can't see anything obviously wrong in those lines of code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178350753
https://github.com/psi4/psi4/issues/230#issuecomment-178350753:13,Deployability,update,update,13,"Just a quick update - I'm making a little bit of progress. I hacked my local branch to get valgrind info from the test machines. Here's the pertinent section of the resulting error:. `vex amd64->IR: unhandled instruction bytes: 0xF 0xB 0x89 0xD1 0x48 0x89 0x45 0xC8; ==20864== valgrind: Unrecognised instruction at address 0x22fd55c.; ==20864== at 0x22FD55C: psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, std::string, std::string, char const*) (buf4_sort.cc:1977); ==20864== by 0x191AEB0: psi::cctransort::sort_tei_rhf(boost::shared_ptr<psi::PSIO>, int) (sort_tei_rhf.cc:35); ==20864== by 0x18F8C81: psi::cctransort::cctransort(psi::Options&) (cctransort.cc:472); ==20864== by 0x1434733: py_psi_cctransort() (python.cc:497); ==20864== by 0x144C47D: _object* boost::python::detail::invoke<boost::python::to_python_value<double const&>, double (*)()>(boost::python::detail::invoke_tag_<false, false>, boost::python::to_python_value<double const&> const&, double (*&)()) (invoke.hpp:75)`. I'm digging around now, because I can't see anything obviously wrong in those lines of code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178350753
https://github.com/psi4/psi4/issues/230#issuecomment-178350753:114,Testability,test,test,114,"Just a quick update - I'm making a little bit of progress. I hacked my local branch to get valgrind info from the test machines. Here's the pertinent section of the resulting error:. `vex amd64->IR: unhandled instruction bytes: 0xF 0xB 0x89 0xD1 0x48 0x89 0x45 0xC8; ==20864== valgrind: Unrecognised instruction at address 0x22fd55c.; ==20864== at 0x22FD55C: psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, std::string, std::string, char const*) (buf4_sort.cc:1977); ==20864== by 0x191AEB0: psi::cctransort::sort_tei_rhf(boost::shared_ptr<psi::PSIO>, int) (sort_tei_rhf.cc:35); ==20864== by 0x18F8C81: psi::cctransort::cctransort(psi::Options&) (cctransort.cc:472); ==20864== by 0x1434733: py_psi_cctransort() (python.cc:497); ==20864== by 0x144C47D: _object* boost::python::detail::invoke<boost::python::to_python_value<double const&>, double (*)()>(boost::python::detail::invoke_tag_<false, false>, boost::python::to_python_value<double const&> const&, double (*&)()) (invoke.hpp:75)`. I'm digging around now, because I can't see anything obviously wrong in those lines of code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178350753
https://github.com/psi4/psi4/issues/230#issuecomment-178810449:126,Availability,error,errors,126,"Is that file also empty if you exit at line 486 of cctransort.cc? It's populated by the code above there. I don't see any TOC errors in the Valgrind outputs from Travis, so I don't think it's the same problem. It looks like there's an illegal instruction in the Clang code that GCC doesn't generate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178810449
https://github.com/psi4/psi4/issues/230#issuecomment-178812501:40,Testability,test,test,40,I should point out that I'm running cc1 test case. If I put a breakpoint at cctransort.cc:386 the file sizes are:. ```; -rw-r--r-- 1 jturney hfs 2280 Feb 2 15:53 /tmp/psi.16572.h2o.100; -rw-r--r-- 1 jturney hfs 12744 Feb 2 15:53 /tmp/psi.16572.h2o.180; -rw-r--r-- 1 jturney hfs 10564 Feb 2 15:53 /tmp/psi.16572.h2o.32; -rw-r--r-- 1 jturney hfs 114472 Feb 2 15:53 /tmp/psi.16572.h2o.34; -rw-r--r-- 1 jturney hfs 40688 Feb 2 15:53 /tmp/psi.16572.h2o.35; -rw-r--r-- 1 jturney hfs 233504 Feb 2 15:53 /tmp/psi.16572.h2o.41; -rw-r--r-- 1 jturney hfs 784 Feb 2 15:53 /tmp/psi.16572.h2o.61; -rw-r--r-- 1 jturney hfs 11848 Feb 2 15:53 /tmp/psi.16572.h2o.62; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178812501
https://github.com/psi4/psi4/issues/230#issuecomment-178821679:27,Availability,fault,fault,27,This might actually be our fault. While @xwang862 was coding up DF-ODC12 method he ran into issues with the libtrans file being left around and I added code to delete it in the destructor. I'll comment my changes and see if that fixes it and then I'll have @xwang862 modify his code accordingly. I never intended this to stay in our local version.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178821679
https://github.com/psi4/psi4/issues/230#issuecomment-178825893:31,Testability,test,test,31,"Yup, that was our problem. The test cases are passing. Not sure if @lothian is doing something similar.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178825893
https://github.com/psi4/psi4/issues/230#issuecomment-178826938:3,Availability,error,errors,3,"My errors appeared before the code even loads – at the Python stage – and; happens on both my laptop and desktop Macs. I'm going to grab a fresh; clone and try it again (though I doubt that will fix the problem, given; that the error also occurs on my nightly test builds). But first I have to; land in Atlanta. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 2:18 PM, Justin Turney notifications@github.com; wrote:. > Yup, that was our problem. The test cases are passing.; > ; > Not sure if @lothian https://github.com/lothian is doing something; > similar.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178825893.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178826938
https://github.com/psi4/psi4/issues/230#issuecomment-178826938:228,Availability,error,error,228,"My errors appeared before the code even loads – at the Python stage – and; happens on both my laptop and desktop Macs. I'm going to grab a fresh; clone and try it again (though I doubt that will fix the problem, given; that the error also occurs on my nightly test builds). But first I have to; land in Atlanta. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 2:18 PM, Justin Turney notifications@github.com; wrote:. > Yup, that was our problem. The test cases are passing.; > ; > Not sure if @lothian https://github.com/lothian is doing something; > similar.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178825893.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178826938
https://github.com/psi4/psi4/issues/230#issuecomment-178826938:40,Performance,load,loads,40,"My errors appeared before the code even loads – at the Python stage – and; happens on both my laptop and desktop Macs. I'm going to grab a fresh; clone and try it again (though I doubt that will fix the problem, given; that the error also occurs on my nightly test builds). But first I have to; land in Atlanta. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 2:18 PM, Justin Turney notifications@github.com; wrote:. > Yup, that was our problem. The test cases are passing.; > ; > Not sure if @lothian https://github.com/lothian is doing something; > similar.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178825893.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178826938
https://github.com/psi4/psi4/issues/230#issuecomment-178826938:260,Testability,test,test,260,"My errors appeared before the code even loads – at the Python stage – and; happens on both my laptop and desktop Macs. I'm going to grab a fresh; clone and try it again (though I doubt that will fix the problem, given; that the error also occurs on my nightly test builds). But first I have to; land in Atlanta. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 2:18 PM, Justin Turney notifications@github.com; wrote:. > Yup, that was our problem. The test cases are passing.; > ; > Not sure if @lothian https://github.com/lothian is doing something; > similar.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178825893.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178826938
https://github.com/psi4/psi4/issues/230#issuecomment-178826938:478,Testability,test,test,478,"My errors appeared before the code even loads – at the Python stage – and; happens on both my laptop and desktop Macs. I'm going to grab a fresh; clone and try it again (though I doubt that will fix the problem, given; that the error also occurs on my nightly test builds). But first I have to; land in Atlanta. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 2:18 PM, Justin Turney notifications@github.com; wrote:. > Yup, that was our problem. The test cases are passing.; > ; > Not sure if @lothian https://github.com/lothian is doing something; > similar.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178825893.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178826938
https://github.com/psi4/psi4/issues/230#issuecomment-178853828:282,Availability,error,error,282,"Pretty sure I'm using the homebrew boost, but that could still be the; problem. I upgraded homebrew a few days ago, but I didn't recompile PSI; since. The current homebrew boost is 1.60.0, and cmake sees it when it; configures. Everything compiles smoothly, but I get the following error; immediately on any attempt to execute with any input file:. Traceback (most recent call last):. File ""<string>"", line 6, in <module>. File ""/Users/crawdad/psi4/share/psi4/python/aliases.py"", line 39, in; <module>. ```; from wrappers import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/wrappers.py"", line 39, in; <module>. ```; from driver import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/driver.py"", line 265, in; <module>. ```; for ssuper in superfunctional_list():; ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 3365, in; superfunctional_list. ```; sup = superfunctionals[key](key, 1, 1); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1910, in; build_b3lypd1_superfunctional. ```; sup = build_b3lyp_superfunctional(name, npoints, deriv); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1224, in; build_b3lyp_superfunctional. ```; sup = psi4.SuperFunctional.blank(); ```. TypeError: No to_python (by-value) converter found for C++ type:; boost::shared_ptrpsi::SuperFunctional. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 2:39 PM, Andy Simmonett notifications@github.com; wrote:. > Messaging from 30000 feet, @lothian https://github.com/lothian . Fancy!; > I bet the problem you're seeing is due to some incompatibility between the; > way boost and psi4 are compiled. On the Mac I had a hard time getting a GCC; > version to compile. I had to compile boost with some modified settings to; > get the code to link, but it failed in the way that you described when it; > did link. I had no problems using the Homebrew (or the Psi4 bundled) Boost; > if I used clang.; > ; > —; > Reply to this emai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178853828
https://github.com/psi4/psi4/issues/230#issuecomment-178853828:82,Deployability,upgrade,upgraded,82,"Pretty sure I'm using the homebrew boost, but that could still be the; problem. I upgraded homebrew a few days ago, but I didn't recompile PSI; since. The current homebrew boost is 1.60.0, and cmake sees it when it; configures. Everything compiles smoothly, but I get the following error; immediately on any attempt to execute with any input file:. Traceback (most recent call last):. File ""<string>"", line 6, in <module>. File ""/Users/crawdad/psi4/share/psi4/python/aliases.py"", line 39, in; <module>. ```; from wrappers import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/wrappers.py"", line 39, in; <module>. ```; from driver import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/driver.py"", line 265, in; <module>. ```; for ssuper in superfunctional_list():; ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 3365, in; superfunctional_list. ```; sup = superfunctionals[key](key, 1, 1); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1910, in; build_b3lypd1_superfunctional. ```; sup = build_b3lyp_superfunctional(name, npoints, deriv); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1224, in; build_b3lyp_superfunctional. ```; sup = psi4.SuperFunctional.blank(); ```. TypeError: No to_python (by-value) converter found for C++ type:; boost::shared_ptrpsi::SuperFunctional. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 2:39 PM, Andy Simmonett notifications@github.com; wrote:. > Messaging from 30000 feet, @lothian https://github.com/lothian . Fancy!; > I bet the problem you're seeing is due to some incompatibility between the; > way boost and psi4 are compiled. On the Mac I had a hard time getting a GCC; > version to compile. I had to compile boost with some modified settings to; > get the code to link, but it failed in the way that you described when it; > did link. I had no problems using the Homebrew (or the Psi4 bundled) Boost; > if I used clang.; > ; > —; > Reply to this emai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178853828
https://github.com/psi4/psi4/issues/230#issuecomment-178853828:513,Integrability,wrap,wrappers,513,"Pretty sure I'm using the homebrew boost, but that could still be the; problem. I upgraded homebrew a few days ago, but I didn't recompile PSI; since. The current homebrew boost is 1.60.0, and cmake sees it when it; configures. Everything compiles smoothly, but I get the following error; immediately on any attempt to execute with any input file:. Traceback (most recent call last):. File ""<string>"", line 6, in <module>. File ""/Users/crawdad/psi4/share/psi4/python/aliases.py"", line 39, in; <module>. ```; from wrappers import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/wrappers.py"", line 39, in; <module>. ```; from driver import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/driver.py"", line 265, in; <module>. ```; for ssuper in superfunctional_list():; ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 3365, in; superfunctional_list. ```; sup = superfunctionals[key](key, 1, 1); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1910, in; build_b3lypd1_superfunctional. ```; sup = build_b3lyp_superfunctional(name, npoints, deriv); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1224, in; build_b3lyp_superfunctional. ```; sup = psi4.SuperFunctional.blank(); ```. TypeError: No to_python (by-value) converter found for C++ type:; boost::shared_ptrpsi::SuperFunctional. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 2:39 PM, Andy Simmonett notifications@github.com; wrote:. > Messaging from 30000 feet, @lothian https://github.com/lothian . Fancy!; > I bet the problem you're seeing is due to some incompatibility between the; > way boost and psi4 are compiled. On the Mac I had a hard time getting a GCC; > version to compile. I had to compile boost with some modified settings to; > get the code to link, but it failed in the way that you described when it; > did link. I had no problems using the Homebrew (or the Psi4 bundled) Boost; > if I used clang.; > ; > —; > Reply to this emai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178853828
https://github.com/psi4/psi4/issues/230#issuecomment-178853828:581,Integrability,wrap,wrappers,581,"Pretty sure I'm using the homebrew boost, but that could still be the; problem. I upgraded homebrew a few days ago, but I didn't recompile PSI; since. The current homebrew boost is 1.60.0, and cmake sees it when it; configures. Everything compiles smoothly, but I get the following error; immediately on any attempt to execute with any input file:. Traceback (most recent call last):. File ""<string>"", line 6, in <module>. File ""/Users/crawdad/psi4/share/psi4/python/aliases.py"", line 39, in; <module>. ```; from wrappers import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/wrappers.py"", line 39, in; <module>. ```; from driver import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/driver.py"", line 265, in; <module>. ```; for ssuper in superfunctional_list():; ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 3365, in; superfunctional_list. ```; sup = superfunctionals[key](key, 1, 1); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1910, in; build_b3lypd1_superfunctional. ```; sup = build_b3lyp_superfunctional(name, npoints, deriv); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1224, in; build_b3lyp_superfunctional. ```; sup = psi4.SuperFunctional.blank(); ```. TypeError: No to_python (by-value) converter found for C++ type:; boost::shared_ptrpsi::SuperFunctional. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 2:39 PM, Andy Simmonett notifications@github.com; wrote:. > Messaging from 30000 feet, @lothian https://github.com/lothian . Fancy!; > I bet the problem you're seeing is due to some incompatibility between the; > way boost and psi4 are compiled. On the Mac I had a hard time getting a GCC; > version to compile. I had to compile boost with some modified settings to; > get the code to link, but it failed in the way that you described when it; > did link. I had no problems using the Homebrew (or the Psi4 bundled) Boost; > if I used clang.; > ; > —; > Reply to this emai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178853828
https://github.com/psi4/psi4/issues/230#issuecomment-178853828:216,Modifiability,config,configures,216,"Pretty sure I'm using the homebrew boost, but that could still be the; problem. I upgraded homebrew a few days ago, but I didn't recompile PSI; since. The current homebrew boost is 1.60.0, and cmake sees it when it; configures. Everything compiles smoothly, but I get the following error; immediately on any attempt to execute with any input file:. Traceback (most recent call last):. File ""<string>"", line 6, in <module>. File ""/Users/crawdad/psi4/share/psi4/python/aliases.py"", line 39, in; <module>. ```; from wrappers import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/wrappers.py"", line 39, in; <module>. ```; from driver import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/driver.py"", line 265, in; <module>. ```; for ssuper in superfunctional_list():; ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 3365, in; superfunctional_list. ```; sup = superfunctionals[key](key, 1, 1); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1910, in; build_b3lypd1_superfunctional. ```; sup = build_b3lyp_superfunctional(name, npoints, deriv); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1224, in; build_b3lyp_superfunctional. ```; sup = psi4.SuperFunctional.blank(); ```. TypeError: No to_python (by-value) converter found for C++ type:; boost::shared_ptrpsi::SuperFunctional. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 2:39 PM, Andy Simmonett notifications@github.com; wrote:. > Messaging from 30000 feet, @lothian https://github.com/lothian . Fancy!; > I bet the problem you're seeing is due to some incompatibility between the; > way boost and psi4 are compiled. On the Mac I had a hard time getting a GCC; > version to compile. I had to compile boost with some modified settings to; > get the code to link, but it failed in the way that you described when it; > did link. I had no problems using the Homebrew (or the Psi4 bundled) Boost; > if I used clang.; > ; > —; > Reply to this emai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178853828
https://github.com/psi4/psi4/issues/230#issuecomment-178857878:192,Deployability,Integrat,Integrate,192,"That DFT interface hasn't changed in years, so I'm inclined to think it's a Boost version thing. A temporary workaround (if you don't need DFT) is to comment out in `driver.py`. ``` python; # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178857878
https://github.com/psi4/psi4/issues/230#issuecomment-178857878:279,Energy Efficiency,energy,energy,279,"That DFT interface hasn't changed in years, so I'm inclined to think it's a Boost version thing. A temporary workaround (if you don't need DFT) is to comment out in `driver.py`. ``` python; # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178857878
https://github.com/psi4/psi4/issues/230#issuecomment-178857878:9,Integrability,interface,interface,9,"That DFT interface hasn't changed in years, so I'm inclined to think it's a Boost version thing. A temporary workaround (if you don't need DFT) is to comment out in `driver.py`. ``` python; # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178857878
https://github.com/psi4/psi4/issues/230#issuecomment-178857878:192,Integrability,Integrat,Integrate,192,"That DFT interface hasn't changed in years, so I'm inclined to think it's a Boost version thing. A temporary workaround (if you don't need DFT) is to comment out in `driver.py`. ``` python; # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178857878
https://github.com/psi4/psi4/issues/230#issuecomment-178857878:218,Integrability,rout,routines,218,"That DFT interface hasn't changed in years, so I'm inclined to think it's a Boost version thing. A temporary workaround (if you don't need DFT) is to comment out in `driver.py`. ``` python; # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178857878
https://github.com/psi4/psi4/issues/230#issuecomment-178858441:23,Deployability,Integrat,Integrate,23,"Whoops,. ``` python; # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178858441
https://github.com/psi4/psi4/issues/230#issuecomment-178858441:110,Energy Efficiency,energy,energy,110,"Whoops,. ``` python; # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178858441
https://github.com/psi4/psi4/issues/230#issuecomment-178858441:23,Integrability,Integrat,Integrate,23,"Whoops,. ``` python; # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178858441
https://github.com/psi4/psi4/issues/230#issuecomment-178858441:49,Integrability,rout,routines,49,"Whoops,. ``` python; # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178858441
https://github.com/psi4/psi4/issues/230#issuecomment-178874533:4,Availability,failure,failures,4,"The failures on the Travis tests systems are likely unrelated to the file closing error. Can you reproduce those problems on the CCQC cluster, @jturney? I haven't been able to reproduce the problem on any of our machines; the valgrind trace shows an illegal instruction, but that may just be something that Valgrind can't handle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178874533
https://github.com/psi4/psi4/issues/230#issuecomment-178874533:82,Availability,error,error,82,"The failures on the Travis tests systems are likely unrelated to the file closing error. Can you reproduce those problems on the CCQC cluster, @jturney? I haven't been able to reproduce the problem on any of our machines; the valgrind trace shows an illegal instruction, but that may just be something that Valgrind can't handle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178874533
https://github.com/psi4/psi4/issues/230#issuecomment-178874533:27,Testability,test,tests,27,"The failures on the Travis tests systems are likely unrelated to the file closing error. Can you reproduce those problems on the CCQC cluster, @jturney? I haven't been able to reproduce the problem on any of our machines; the valgrind trace shows an illegal instruction, but that may just be something that Valgrind can't handle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178874533
https://github.com/psi4/psi4/issues/230#issuecomment-179352477:350,Availability,failure,failures,350,"The problem was indeed boost. I've switched my testboard nightly builds to; use the boost we distribute with PSI, but at some point we'll have to; figure out why the interface to 1.60.0 isn't working properly. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 5:58 PM, Andy Simmonett notifications@github.com; wrote:. > The failures on the Travis tests systems are likely unrelated to the file; > closing error. Can you reproduce those problems on the CCQC cluster,; > @jturney https://github.com/jturney? I haven't been able to reproduce; > the problem on any of our machines; the valgrind trace shows an illegal; > instruction, but that may just be something that Valgrind can't handle.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178874533.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-179352477
https://github.com/psi4/psi4/issues/230#issuecomment-179352477:431,Availability,error,error,431,"The problem was indeed boost. I've switched my testboard nightly builds to; use the boost we distribute with PSI, but at some point we'll have to; figure out why the interface to 1.60.0 isn't working properly. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 5:58 PM, Andy Simmonett notifications@github.com; wrote:. > The failures on the Travis tests systems are likely unrelated to the file; > closing error. Can you reproduce those problems on the CCQC cluster,; > @jturney https://github.com/jturney? I haven't been able to reproduce; > the problem on any of our machines; the valgrind trace shows an illegal; > instruction, but that may just be something that Valgrind can't handle.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178874533.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-179352477
https://github.com/psi4/psi4/issues/230#issuecomment-179352477:166,Integrability,interface,interface,166,"The problem was indeed boost. I've switched my testboard nightly builds to; use the boost we distribute with PSI, but at some point we'll have to; figure out why the interface to 1.60.0 isn't working properly. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 5:58 PM, Andy Simmonett notifications@github.com; wrote:. > The failures on the Travis tests systems are likely unrelated to the file; > closing error. Can you reproduce those problems on the CCQC cluster,; > @jturney https://github.com/jturney? I haven't been able to reproduce; > the problem on any of our machines; the valgrind trace shows an illegal; > instruction, but that may just be something that Valgrind can't handle.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178874533.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-179352477
https://github.com/psi4/psi4/issues/230#issuecomment-179352477:47,Testability,test,testboard,47,"The problem was indeed boost. I've switched my testboard nightly builds to; use the boost we distribute with PSI, but at some point we'll have to; figure out why the interface to 1.60.0 isn't working properly. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 5:58 PM, Andy Simmonett notifications@github.com; wrote:. > The failures on the Travis tests systems are likely unrelated to the file; > closing error. Can you reproduce those problems on the CCQC cluster,; > @jturney https://github.com/jturney? I haven't been able to reproduce; > the problem on any of our machines; the valgrind trace shows an illegal; > instruction, but that may just be something that Valgrind can't handle.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178874533.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-179352477
https://github.com/psi4/psi4/issues/230#issuecomment-179352477:373,Testability,test,tests,373,"The problem was indeed boost. I've switched my testboard nightly builds to; use the boost we distribute with PSI, but at some point we'll have to; figure out why the interface to 1.60.0 isn't working properly. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 5:58 PM, Andy Simmonett notifications@github.com; wrote:. > The failures on the Travis tests systems are likely unrelated to the file; > closing error. Can you reproduce those problems on the CCQC cluster,; > @jturney https://github.com/jturney? I haven't been able to reproduce; > the problem on any of our machines; the valgrind trace shows an illegal; > instruction, but that may just be something that Valgrind can't handle.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-178874533.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-179352477
https://github.com/psi4/psi4/issues/230#issuecomment-179588161:84,Security,access,accessible,84,"Ugh. This could be bad if we have to register every boost::shared_ptr that; we want accessible to the Python layer. In the meantime, I'm going to; shift my boost back. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Wed, Feb 3, 2016 at 3:45 PM, Ben Pritchard notifications@github.com; wrote:. > Seems boost 1.60 breaks some boost::shared_ptr handling in boost python.; > It looks like before it would automatically register; > boost::shared_ptr<CLASS> into the python registry when you exported the; > class, but it doesn't do that anymore. Instead, you might have to register; > it yourself (?); > ; > See http://permalink.gmane.org/gmane.comp.python.c++/16601 and; > boostorg/python#29 https://github.com/boostorg/python/issues/29; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-179510813.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-179588161
https://github.com/psi4/psi4/issues/230#issuecomment-180480448:17,Testability,test,tests,17,"All of the clang tests are still failing on the CI system. It's not related to Boost, and appears to be a problem in the cctransort code. I cannot reproduce this problem on my linux machine - are you seeing it at all, @jturney?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-180480448
https://github.com/psi4/psi4/issues/230#issuecomment-180492708:257,Testability,test,tests,257,"I can't reproduce it on my linux systems. What are the system and compiler; specs where you see the problem?. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Fri, Feb 5, 2016 at 1:19 PM, Andy Simmonett notifications@github.com; wrote:. > All of the clang tests are still failing on the CI system. It's not; > related to Boost, and appears to be a problem in the cctransort code. I; > cannot reproduce this problem on my linux machine - are you seeing it at; > all, @jturney https://github.com/jturney?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-180480448.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-180492708
https://github.com/psi4/psi4/issues/230#issuecomment-180494377:67,Availability,error,errors,67,"My first try on Ubuntu with clang-3.7 wasn't able to reproduce the errors. My valgrind output was clean, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-180494377
https://github.com/psi4/psi4/issues/230#issuecomment-180503623:715,Integrability,depend,depend,715,"The problem first appeared [here](https://travis-ci.org/psi4/psi4public/builds/106133128), and it affects every clang build on the Travis machines. I did some hacking of the setup, to run cc1 through Valgrind [here](https://travis-ci.org/andysim/psi4public), but it's showing an illegal instruction. That could be a genuine illegal instruction being generated (how, I have no idea), or just a red herring due to Valgrind not recognizing one of the instructions generated. The fact that none of us can reproduce it is mystifying to me. That commit simply pulled in the new cctransort code from the private repo into master. I don't believe there's anything wrong with the cctransort code, but I'd like to be able to depend on the CI tests again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-180503623
https://github.com/psi4/psi4/issues/230#issuecomment-180503623:732,Testability,test,tests,732,"The problem first appeared [here](https://travis-ci.org/psi4/psi4public/builds/106133128), and it affects every clang build on the Travis machines. I did some hacking of the setup, to run cc1 through Valgrind [here](https://travis-ci.org/andysim/psi4public), but it's showing an illegal instruction. That could be a genuine illegal instruction being generated (how, I have no idea), or just a red herring due to Valgrind not recognizing one of the instructions generated. The fact that none of us can reproduce it is mystifying to me. That commit simply pulled in the new cctransort code from the private repo into master. I don't believe there's anything wrong with the cctransort code, but I'd like to be able to depend on the CI tests again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-180503623
https://github.com/psi4/psi4/issues/230#issuecomment-180503623:547,Usability,simpl,simply,547,"The problem first appeared [here](https://travis-ci.org/psi4/psi4public/builds/106133128), and it affects every clang build on the Travis machines. I did some hacking of the setup, to run cc1 through Valgrind [here](https://travis-ci.org/andysim/psi4public), but it's showing an illegal instruction. That could be a genuine illegal instruction being generated (how, I have no idea), or just a red herring due to Valgrind not recognizing one of the instructions generated. The fact that none of us can reproduce it is mystifying to me. That commit simply pulled in the new cctransort code from the private repo into master. I don't believe there's anything wrong with the cctransort code, but I'd like to be able to depend on the CI tests again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-180503623
https://github.com/psi4/psi4/issues/232#issuecomment-205862342:110,Availability,down,downside,110,`DEFAULT_SYM_TOL` would simply become an attribute of the Molecule class that would have a getter/setter. The downside to this is it would be difficult to have calls like `symmetrize(double tol)`. It would simply always take the internal attribute.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/232#issuecomment-205862342
https://github.com/psi4/psi4/issues/232#issuecomment-205862342:24,Usability,simpl,simply,24,`DEFAULT_SYM_TOL` would simply become an attribute of the Molecule class that would have a getter/setter. The downside to this is it would be difficult to have calls like `symmetrize(double tol)`. It would simply always take the internal attribute.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/232#issuecomment-205862342
https://github.com/psi4/psi4/issues/232#issuecomment-205862342:206,Usability,simpl,simply,206,`DEFAULT_SYM_TOL` would simply become an attribute of the Molecule class that would have a getter/setter. The downside to this is it would be difficult to have calls like `symmetrize(double tol)`. It would simply always take the internal attribute.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/232#issuecomment-205862342
https://github.com/psi4/psi4/issues/232#issuecomment-205865787:261,Availability,toler,tolerance,261,"Ah, yes if `DEFAULT_SYM_TOL` was just an attribute of Molecule, that'd work just fine. That was the scheme I originally talked over with Jet, and in that case the argument to `symmetrize()` could certainly be dropped. . It was later that I noticed the separate tolerance parameter to `symmetrize()` and thought that might be a way around WebMO's problem (point group changing in the course of geom opt) _without_ major construction work on the Molecule class. Brandon was looking into this at one point. Really should reproduce the WebMO problem first.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/232#issuecomment-205865787
https://github.com/psi4/psi4/pull/236#issuecomment-182162959:77,Availability,down,down,77,"Yay, two clang successes! That return statement looks like a bother to track down.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/236#issuecomment-182162959
https://github.com/psi4/psi4/pull/237#issuecomment-182562754:366,Safety,safe,safety,366,"It doesn't really bother me that it takes 2-6 hours for Travis CI to build the 15 types, nor do I think it's hindering anything. I would actually like to see additional types added (specifically Mac, but I think there were other issues with that). It should be noted that we can merge pull requests in before Travis CI has completed testing. Travis CI is there as a safety net.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182562754
https://github.com/psi4/psi4/pull/237#issuecomment-182562754:333,Testability,test,testing,333,"It doesn't really bother me that it takes 2-6 hours for Travis CI to build the 15 types, nor do I think it's hindering anything. I would actually like to see additional types added (specifically Mac, but I think there were other issues with that). It should be noted that we can merge pull requests in before Travis CI has completed testing. Travis CI is there as a safety net.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182562754
https://github.com/psi4/psi4/pull/237#issuecomment-182576134:295,Availability,down,down,295,"I, too, would like to see at least a token Mac build eventually. But when Mac and python3 get added to the build matrix, the number of builds starts to get really high, considering our compile time. So I slightly favor the thinning. Also, master is already a protected branch. After the closing down of private master into read-only, should we activate that we _can't_ merge PR w/o them passing CI?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182576134
https://github.com/psi4/psi4/pull/237#issuecomment-182581290:339,Performance,concurren,concurrent,339,"Most repo's use travis CI as a full testing suite, which is great if your code is relatively light. However, Psi4 is a bit heavy for something like travis and a full build matrix could take days on a free account (assuming they don't send us a polite email). What I would like to see is a very light travis that does 5 builds (the maximum concurrent instances for a free travis account) with an option through Docker that will do full builds on local boxes. What this gives us is a cursory check in about an hour to make sure everything is going well before we either devote the resources for a full check or decide the change is trivial enough to not worry about (documentation, test suite additions, etc). Just would like to add that if we use travis, you basically _must_ let all test cases pass before merging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182581290
https://github.com/psi4/psi4/pull/237#issuecomment-182581290:36,Testability,test,testing,36,"Most repo's use travis CI as a full testing suite, which is great if your code is relatively light. However, Psi4 is a bit heavy for something like travis and a full build matrix could take days on a free account (assuming they don't send us a polite email). What I would like to see is a very light travis that does 5 builds (the maximum concurrent instances for a free travis account) with an option through Docker that will do full builds on local boxes. What this gives us is a cursory check in about an hour to make sure everything is going well before we either devote the resources for a full check or decide the change is trivial enough to not worry about (documentation, test suite additions, etc). Just would like to add that if we use travis, you basically _must_ let all test cases pass before merging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182581290
https://github.com/psi4/psi4/pull/237#issuecomment-182581290:680,Testability,test,test,680,"Most repo's use travis CI as a full testing suite, which is great if your code is relatively light. However, Psi4 is a bit heavy for something like travis and a full build matrix could take days on a free account (assuming they don't send us a polite email). What I would like to see is a very light travis that does 5 builds (the maximum concurrent instances for a free travis account) with an option through Docker that will do full builds on local boxes. What this gives us is a cursory check in about an hour to make sure everything is going well before we either devote the resources for a full check or decide the change is trivial enough to not worry about (documentation, test suite additions, etc). Just would like to add that if we use travis, you basically _must_ let all test cases pass before merging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182581290
https://github.com/psi4/psi4/pull/237#issuecomment-182581290:783,Testability,test,test,783,"Most repo's use travis CI as a full testing suite, which is great if your code is relatively light. However, Psi4 is a bit heavy for something like travis and a full build matrix could take days on a free account (assuming they don't send us a polite email). What I would like to see is a very light travis that does 5 builds (the maximum concurrent instances for a free travis account) with an option through Docker that will do full builds on local boxes. What this gives us is a cursory check in about an hour to make sure everything is going well before we either devote the resources for a full check or decide the change is trivial enough to not worry about (documentation, test suite additions, etc). Just would like to add that if we use travis, you basically _must_ let all test cases pass before merging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182581290
https://github.com/psi4/psi4/pull/237#issuecomment-182590148:112,Testability,test,test,112,I can see the point for reducing the number of builds. I'm for it now. I'm wondering what's up with that failed test case.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182590148
https://github.com/psi4/psi4/pull/237#issuecomment-182595256:982,Availability,down,down,982,"So are we. We can see that it passed for Andy and failed for us. We cannot reproduce the issue with a icc or clang build. From travis:. ```; DLU 11 1 3 3.776E-06; DLU 12 1 4 2.292E-06; DLU 13 2 5 8.987E-07. DLUSolver converged. Wavefunction stable under totally symmetric rotations.; Lowest totally symmetric eigenvalue: -0.131403 ; Lowest UHF->UHF stability eigenvalues: ; B1 -0.131403 A2 -0.000000 A2 0.000000 A1 0.163530 ; B2 0.248212 A1 0.385029 B1 0.390496 B2 0.493736 ; ```. from master:. ```; DLU 11 1 3 3.776E-06; DLU 12 1 4 1.870E-06; DLU 13 2 5 7.332E-07. DLUSolver converged. Wavefunction stable under totally symmetric rotations.; Lowest totally symmetric eigenvalue: -0.131403; Lowest UHF->UHF stability eigenvalues:; B1 -0.131403 A2 0.000000 A1 0.163530 B2 0.248212; A1 0.385029 B1 0.390496 B2 0.493736 A2 0.523085; ```. Notice the last two iterations slightly diverge from each other. This seems to cause the A2 ordering to differ and causes a matrix comparison fail down the line. Could be a convergence issue, the way its dividing by a small number, or many things. Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. @jgonthier Tagging Jerome in so he can have a look.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182595256
https://github.com/psi4/psi4/pull/237#issuecomment-182595256:1157,Availability,down,downside,1157,"So are we. We can see that it passed for Andy and failed for us. We cannot reproduce the issue with a icc or clang build. From travis:. ```; DLU 11 1 3 3.776E-06; DLU 12 1 4 2.292E-06; DLU 13 2 5 8.987E-07. DLUSolver converged. Wavefunction stable under totally symmetric rotations.; Lowest totally symmetric eigenvalue: -0.131403 ; Lowest UHF->UHF stability eigenvalues: ; B1 -0.131403 A2 -0.000000 A2 0.000000 A1 0.163530 ; B2 0.248212 A1 0.385029 B1 0.390496 B2 0.493736 ; ```. from master:. ```; DLU 11 1 3 3.776E-06; DLU 12 1 4 1.870E-06; DLU 13 2 5 7.332E-07. DLUSolver converged. Wavefunction stable under totally symmetric rotations.; Lowest totally symmetric eigenvalue: -0.131403; Lowest UHF->UHF stability eigenvalues:; B1 -0.131403 A2 0.000000 A1 0.163530 B2 0.248212; A1 0.385029 B1 0.390496 B2 0.493736 A2 0.523085; ```. Notice the last two iterations slightly diverge from each other. This seems to cause the A2 ordering to differ and causes a matrix comparison fail down the line. Could be a convergence issue, the way its dividing by a small number, or many things. Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. @jgonthier Tagging Jerome in so he can have a look.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182595256
https://github.com/psi4/psi4/pull/237#issuecomment-182597595:221,Energy Efficiency,reduce,reduce,221,"It could just be that the optimization in GCC5 introduces some instability that doesn't always show up. I'd still crank it through valgrind if I were you, just to be safe. If we see this consistently, we may have to just reduce the optimization level for that file, to see if that fixes things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182597595
https://github.com/psi4/psi4/pull/237#issuecomment-182597595:26,Performance,optimiz,optimization,26,"It could just be that the optimization in GCC5 introduces some instability that doesn't always show up. I'd still crank it through valgrind if I were you, just to be safe. If we see this consistently, we may have to just reduce the optimization level for that file, to see if that fixes things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182597595
https://github.com/psi4/psi4/pull/237#issuecomment-182597595:232,Performance,optimiz,optimization,232,"It could just be that the optimization in GCC5 introduces some instability that doesn't always show up. I'd still crank it through valgrind if I were you, just to be safe. If we see this consistently, we may have to just reduce the optimization level for that file, to see if that fixes things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182597595
https://github.com/psi4/psi4/pull/237#issuecomment-182597595:166,Safety,safe,safe,166,"It could just be that the optimization in GCC5 introduces some instability that doesn't always show up. I'd still crank it through valgrind if I were you, just to be safe. If we see this consistently, we may have to just reduce the optimization level for that file, to see if that fixes things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182597595
https://github.com/psi4/psi4/pull/237#issuecomment-182692064:47,Usability,simpl,simple,47,"I'll take care of getting it through Valgrind, simple memcheck at first.; I'll let you know how it goes. 2016-02-10 17:06 GMT-05:00 Justin Turney notifications@github.com:. > I agree with @andysim https://github.com/andysim to send it through; > Valgrind.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/237#issuecomment-182601301.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182692064
https://github.com/psi4/psi4/pull/237#issuecomment-182861777:706,Availability,down,downside,706,"I am beginning to think we should forgo Travis CI with debug and focus it solely on release builds. That's where differences between the generated binaries is going to differ the most. > Just would like to add that if we use travis, you basically must let all test cases pass before merging. This sounds great to me. We shouldn't allow code to be committed that potentially causes problems for users using compiler combinations we do not routinely use. Initially, we may have many random issues arising such as the possible memory issue in the stability code but it's better for the code and the user to investigate and fix them. > Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. No, this is an upside of Travis CI. I have an Ubuntu box that already has gcc 5 installed. If needed, I can run Psi4 through it and Valgrind. . It's also great to have other resources for testing Psi with. We do have the [testboard](https://testboard.org/cdash/index.php?project=Psi) where additional compiler combinations can be added. However, the testboard is not holding anyone accountable to fixing the code. I propose Travis CI release builds with the following compiler versions:; - clang: 3.5, 3.6, 3.7, 3.8; - gcc: 4.8, 4.9, 5.2. clang 3.5 was released on September 3, 2014 and gcc 4.8.0 was released on March 22, 2013.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182861777
https://github.com/psi4/psi4/pull/237#issuecomment-182861777:84,Deployability,release,release,84,"I am beginning to think we should forgo Travis CI with debug and focus it solely on release builds. That's where differences between the generated binaries is going to differ the most. > Just would like to add that if we use travis, you basically must let all test cases pass before merging. This sounds great to me. We shouldn't allow code to be committed that potentially causes problems for users using compiler combinations we do not routinely use. Initially, we may have many random issues arising such as the possible memory issue in the stability code but it's better for the code and the user to investigate and fix them. > Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. No, this is an upside of Travis CI. I have an Ubuntu box that already has gcc 5 installed. If needed, I can run Psi4 through it and Valgrind. . It's also great to have other resources for testing Psi with. We do have the [testboard](https://testboard.org/cdash/index.php?project=Psi) where additional compiler combinations can be added. However, the testboard is not holding anyone accountable to fixing the code. I propose Travis CI release builds with the following compiler versions:; - clang: 3.5, 3.6, 3.7, 3.8; - gcc: 4.8, 4.9, 5.2. clang 3.5 was released on September 3, 2014 and gcc 4.8.0 was released on March 22, 2013.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182861777
https://github.com/psi4/psi4/pull/237#issuecomment-182861777:806,Deployability,install,installed,806,"I am beginning to think we should forgo Travis CI with debug and focus it solely on release builds. That's where differences between the generated binaries is going to differ the most. > Just would like to add that if we use travis, you basically must let all test cases pass before merging. This sounds great to me. We shouldn't allow code to be committed that potentially causes problems for users using compiler combinations we do not routinely use. Initially, we may have many random issues arising such as the possible memory issue in the stability code but it's better for the code and the user to investigate and fix them. > Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. No, this is an upside of Travis CI. I have an Ubuntu box that already has gcc 5 installed. If needed, I can run Psi4 through it and Valgrind. . It's also great to have other resources for testing Psi with. We do have the [testboard](https://testboard.org/cdash/index.php?project=Psi) where additional compiler combinations can be added. However, the testboard is not holding anyone accountable to fixing the code. I propose Travis CI release builds with the following compiler versions:; - clang: 3.5, 3.6, 3.7, 3.8; - gcc: 4.8, 4.9, 5.2. clang 3.5 was released on September 3, 2014 and gcc 4.8.0 was released on March 22, 2013.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182861777
https://github.com/psi4/psi4/pull/237#issuecomment-182861777:1160,Deployability,release,release,1160,"I am beginning to think we should forgo Travis CI with debug and focus it solely on release builds. That's where differences between the generated binaries is going to differ the most. > Just would like to add that if we use travis, you basically must let all test cases pass before merging. This sounds great to me. We shouldn't allow code to be committed that potentially causes problems for users using compiler combinations we do not routinely use. Initially, we may have many random issues arising such as the possible memory issue in the stability code but it's better for the code and the user to investigate and fix them. > Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. No, this is an upside of Travis CI. I have an Ubuntu box that already has gcc 5 installed. If needed, I can run Psi4 through it and Valgrind. . It's also great to have other resources for testing Psi with. We do have the [testboard](https://testboard.org/cdash/index.php?project=Psi) where additional compiler combinations can be added. However, the testboard is not holding anyone accountable to fixing the code. I propose Travis CI release builds with the following compiler versions:; - clang: 3.5, 3.6, 3.7, 3.8; - gcc: 4.8, 4.9, 5.2. clang 3.5 was released on September 3, 2014 and gcc 4.8.0 was released on March 22, 2013.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182861777
https://github.com/psi4/psi4/pull/237#issuecomment-182861777:1279,Deployability,release,released,1279,"I am beginning to think we should forgo Travis CI with debug and focus it solely on release builds. That's where differences between the generated binaries is going to differ the most. > Just would like to add that if we use travis, you basically must let all test cases pass before merging. This sounds great to me. We shouldn't allow code to be committed that potentially causes problems for users using compiler combinations we do not routinely use. Initially, we may have many random issues arising such as the possible memory issue in the stability code but it's better for the code and the user to investigate and fix them. > Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. No, this is an upside of Travis CI. I have an Ubuntu box that already has gcc 5 installed. If needed, I can run Psi4 through it and Valgrind. . It's also great to have other resources for testing Psi with. We do have the [testboard](https://testboard.org/cdash/index.php?project=Psi) where additional compiler combinations can be added. However, the testboard is not holding anyone accountable to fixing the code. I propose Travis CI release builds with the following compiler versions:; - clang: 3.5, 3.6, 3.7, 3.8; - gcc: 4.8, 4.9, 5.2. clang 3.5 was released on September 3, 2014 and gcc 4.8.0 was released on March 22, 2013.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182861777
https://github.com/psi4/psi4/pull/237#issuecomment-182861777:1327,Deployability,release,released,1327,"I am beginning to think we should forgo Travis CI with debug and focus it solely on release builds. That's where differences between the generated binaries is going to differ the most. > Just would like to add that if we use travis, you basically must let all test cases pass before merging. This sounds great to me. We shouldn't allow code to be committed that potentially causes problems for users using compiler combinations we do not routinely use. Initially, we may have many random issues arising such as the possible memory issue in the stability code but it's better for the code and the user to investigate and fix them. > Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. No, this is an upside of Travis CI. I have an Ubuntu box that already has gcc 5 installed. If needed, I can run Psi4 through it and Valgrind. . It's also great to have other resources for testing Psi with. We do have the [testboard](https://testboard.org/cdash/index.php?project=Psi) where additional compiler combinations can be added. However, the testboard is not holding anyone accountable to fixing the code. I propose Travis CI release builds with the following compiler versions:; - clang: 3.5, 3.6, 3.7, 3.8; - gcc: 4.8, 4.9, 5.2. clang 3.5 was released on September 3, 2014 and gcc 4.8.0 was released on March 22, 2013.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182861777
https://github.com/psi4/psi4/pull/237#issuecomment-182861777:438,Integrability,rout,routinely,438,"I am beginning to think we should forgo Travis CI with debug and focus it solely on release builds. That's where differences between the generated binaries is going to differ the most. > Just would like to add that if we use travis, you basically must let all test cases pass before merging. This sounds great to me. We shouldn't allow code to be committed that potentially causes problems for users using compiler combinations we do not routinely use. Initially, we may have many random issues arising such as the possible memory issue in the stability code but it's better for the code and the user to investigate and fix them. > Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. No, this is an upside of Travis CI. I have an Ubuntu box that already has gcc 5 installed. If needed, I can run Psi4 through it and Valgrind. . It's also great to have other resources for testing Psi with. We do have the [testboard](https://testboard.org/cdash/index.php?project=Psi) where additional compiler combinations can be added. However, the testboard is not holding anyone accountable to fixing the code. I propose Travis CI release builds with the following compiler versions:; - clang: 3.5, 3.6, 3.7, 3.8; - gcc: 4.8, 4.9, 5.2. clang 3.5 was released on September 3, 2014 and gcc 4.8.0 was released on March 22, 2013.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182861777
https://github.com/psi4/psi4/pull/237#issuecomment-182861777:260,Testability,test,test,260,"I am beginning to think we should forgo Travis CI with debug and focus it solely on release builds. That's where differences between the generated binaries is going to differ the most. > Just would like to add that if we use travis, you basically must let all test cases pass before merging. This sounds great to me. We shouldn't allow code to be committed that potentially causes problems for users using compiler combinations we do not routinely use. Initially, we may have many random issues arising such as the possible memory issue in the stability code but it's better for the code and the user to investigate and fix them. > Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. No, this is an upside of Travis CI. I have an Ubuntu box that already has gcc 5 installed. If needed, I can run Psi4 through it and Valgrind. . It's also great to have other resources for testing Psi with. We do have the [testboard](https://testboard.org/cdash/index.php?project=Psi) where additional compiler combinations can be added. However, the testboard is not holding anyone accountable to fixing the code. I propose Travis CI release builds with the following compiler versions:; - clang: 3.5, 3.6, 3.7, 3.8; - gcc: 4.8, 4.9, 5.2. clang 3.5 was released on September 3, 2014 and gcc 4.8.0 was released on March 22, 2013.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182861777
https://github.com/psi4/psi4/pull/237#issuecomment-182861777:914,Testability,test,testing,914,"I am beginning to think we should forgo Travis CI with debug and focus it solely on release builds. That's where differences between the generated binaries is going to differ the most. > Just would like to add that if we use travis, you basically must let all test cases pass before merging. This sounds great to me. We shouldn't allow code to be committed that potentially causes problems for users using compiler combinations we do not routinely use. Initially, we may have many random issues arising such as the possible memory issue in the stability code but it's better for the code and the user to investigate and fix them. > Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. No, this is an upside of Travis CI. I have an Ubuntu box that already has gcc 5 installed. If needed, I can run Psi4 through it and Valgrind. . It's also great to have other resources for testing Psi with. We do have the [testboard](https://testboard.org/cdash/index.php?project=Psi) where additional compiler combinations can be added. However, the testboard is not holding anyone accountable to fixing the code. I propose Travis CI release builds with the following compiler versions:; - clang: 3.5, 3.6, 3.7, 3.8; - gcc: 4.8, 4.9, 5.2. clang 3.5 was released on September 3, 2014 and gcc 4.8.0 was released on March 22, 2013.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182861777
https://github.com/psi4/psi4/pull/237#issuecomment-182861777:948,Testability,test,testboard,948,"I am beginning to think we should forgo Travis CI with debug and focus it solely on release builds. That's where differences between the generated binaries is going to differ the most. > Just would like to add that if we use travis, you basically must let all test cases pass before merging. This sounds great to me. We shouldn't allow code to be committed that potentially causes problems for users using compiler combinations we do not routinely use. Initially, we may have many random issues arising such as the possible memory issue in the stability code but it's better for the code and the user to investigate and fix them. > Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. No, this is an upside of Travis CI. I have an Ubuntu box that already has gcc 5 installed. If needed, I can run Psi4 through it and Valgrind. . It's also great to have other resources for testing Psi with. We do have the [testboard](https://testboard.org/cdash/index.php?project=Psi) where additional compiler combinations can be added. However, the testboard is not holding anyone accountable to fixing the code. I propose Travis CI release builds with the following compiler versions:; - clang: 3.5, 3.6, 3.7, 3.8; - gcc: 4.8, 4.9, 5.2. clang 3.5 was released on September 3, 2014 and gcc 4.8.0 was released on March 22, 2013.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182861777
https://github.com/psi4/psi4/pull/237#issuecomment-182861777:967,Testability,test,testboard,967,"I am beginning to think we should forgo Travis CI with debug and focus it solely on release builds. That's where differences between the generated binaries is going to differ the most. > Just would like to add that if we use travis, you basically must let all test cases pass before merging. This sounds great to me. We shouldn't allow code to be committed that potentially causes problems for users using compiler combinations we do not routinely use. Initially, we may have many random issues arising such as the possible memory issue in the stability code but it's better for the code and the user to investigate and fix them. > Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. No, this is an upside of Travis CI. I have an Ubuntu box that already has gcc 5 installed. If needed, I can run Psi4 through it and Valgrind. . It's also great to have other resources for testing Psi with. We do have the [testboard](https://testboard.org/cdash/index.php?project=Psi) where additional compiler combinations can be added. However, the testboard is not holding anyone accountable to fixing the code. I propose Travis CI release builds with the following compiler versions:; - clang: 3.5, 3.6, 3.7, 3.8; - gcc: 4.8, 4.9, 5.2. clang 3.5 was released on September 3, 2014 and gcc 4.8.0 was released on March 22, 2013.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182861777
https://github.com/psi4/psi4/pull/237#issuecomment-182861777:1076,Testability,test,testboard,1076,"I am beginning to think we should forgo Travis CI with debug and focus it solely on release builds. That's where differences between the generated binaries is going to differ the most. > Just would like to add that if we use travis, you basically must let all test cases pass before merging. This sounds great to me. We shouldn't allow code to be committed that potentially causes problems for users using compiler combinations we do not routinely use. Initially, we may have many random issues arising such as the possible memory issue in the stability code but it's better for the code and the user to investigate and fix them. > Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. No, this is an upside of Travis CI. I have an Ubuntu box that already has gcc 5 installed. If needed, I can run Psi4 through it and Valgrind. . It's also great to have other resources for testing Psi with. We do have the [testboard](https://testboard.org/cdash/index.php?project=Psi) where additional compiler combinations can be added. However, the testboard is not holding anyone accountable to fixing the code. I propose Travis CI release builds with the following compiler versions:; - clang: 3.5, 3.6, 3.7, 3.8; - gcc: 4.8, 4.9, 5.2. clang 3.5 was released on September 3, 2014 and gcc 4.8.0 was released on March 22, 2013.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182861777
https://github.com/psi4/psi4/pull/237#issuecomment-182873969:412,Availability,error,error,412,"Hey everyone,. I got the code through Valgrind for the stability test case and I did find an invalid read, but in the orbital rotation parameters that occurs after all the roots are computed. I'm correcting it now and investigating all divisions occurring in the code for small numbers. @jturney Could you just run the stability1 test case if it does not take too much time ? From what I understood the observed error was not even fully reproducible on Travis, which is going to make difficult to correct it. If you can see it on your machine you could also test the new version once I commit it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182873969
https://github.com/psi4/psi4/pull/237#issuecomment-182873969:65,Testability,test,test,65,"Hey everyone,. I got the code through Valgrind for the stability test case and I did find an invalid read, but in the orbital rotation parameters that occurs after all the roots are computed. I'm correcting it now and investigating all divisions occurring in the code for small numbers. @jturney Could you just run the stability1 test case if it does not take too much time ? From what I understood the observed error was not even fully reproducible on Travis, which is going to make difficult to correct it. If you can see it on your machine you could also test the new version once I commit it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182873969
https://github.com/psi4/psi4/pull/237#issuecomment-182873969:330,Testability,test,test,330,"Hey everyone,. I got the code through Valgrind for the stability test case and I did find an invalid read, but in the orbital rotation parameters that occurs after all the roots are computed. I'm correcting it now and investigating all divisions occurring in the code for small numbers. @jturney Could you just run the stability1 test case if it does not take too much time ? From what I understood the observed error was not even fully reproducible on Travis, which is going to make difficult to correct it. If you can see it on your machine you could also test the new version once I commit it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182873969
https://github.com/psi4/psi4/pull/237#issuecomment-182873969:558,Testability,test,test,558,"Hey everyone,. I got the code through Valgrind for the stability test case and I did find an invalid read, but in the orbital rotation parameters that occurs after all the roots are computed. I'm correcting it now and investigating all divisions occurring in the code for small numbers. @jturney Could you just run the stability1 test case if it does not take too much time ? From what I understood the observed error was not even fully reproducible on Travis, which is going to make difficult to correct it. If you can see it on your machine you could also test the new version once I commit it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182873969
https://github.com/psi4/psi4/pull/237#issuecomment-182874560:345,Availability,failure,failure,345,"I pretty much agree with this. One thing to keep in mind is [Rollin's problem](https://travis-ci.org/psi4/psi4public/builds/105540128) that was only picked up with debug settings, so I think that a solitary debug build for GCC and clang could be worth keeping in mind. If we do go that route, they should be the first ones built, so the time to failure is low if it's a compile error. Clang 3.8 isn't stable yet and will seg fault with optimization turned on, but the [final release](http://llvm.org/) is slated for a week from now, so I expect that to change very soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182874560
https://github.com/psi4/psi4/pull/237#issuecomment-182874560:378,Availability,error,error,378,"I pretty much agree with this. One thing to keep in mind is [Rollin's problem](https://travis-ci.org/psi4/psi4public/builds/105540128) that was only picked up with debug settings, so I think that a solitary debug build for GCC and clang could be worth keeping in mind. If we do go that route, they should be the first ones built, so the time to failure is low if it's a compile error. Clang 3.8 isn't stable yet and will seg fault with optimization turned on, but the [final release](http://llvm.org/) is slated for a week from now, so I expect that to change very soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182874560
https://github.com/psi4/psi4/pull/237#issuecomment-182874560:425,Availability,fault,fault,425,"I pretty much agree with this. One thing to keep in mind is [Rollin's problem](https://travis-ci.org/psi4/psi4public/builds/105540128) that was only picked up with debug settings, so I think that a solitary debug build for GCC and clang could be worth keeping in mind. If we do go that route, they should be the first ones built, so the time to failure is low if it's a compile error. Clang 3.8 isn't stable yet and will seg fault with optimization turned on, but the [final release](http://llvm.org/) is slated for a week from now, so I expect that to change very soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182874560
https://github.com/psi4/psi4/pull/237#issuecomment-182874560:475,Deployability,release,release,475,"I pretty much agree with this. One thing to keep in mind is [Rollin's problem](https://travis-ci.org/psi4/psi4public/builds/105540128) that was only picked up with debug settings, so I think that a solitary debug build for GCC and clang could be worth keeping in mind. If we do go that route, they should be the first ones built, so the time to failure is low if it's a compile error. Clang 3.8 isn't stable yet and will seg fault with optimization turned on, but the [final release](http://llvm.org/) is slated for a week from now, so I expect that to change very soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182874560
https://github.com/psi4/psi4/pull/237#issuecomment-182874560:286,Integrability,rout,route,286,"I pretty much agree with this. One thing to keep in mind is [Rollin's problem](https://travis-ci.org/psi4/psi4public/builds/105540128) that was only picked up with debug settings, so I think that a solitary debug build for GCC and clang could be worth keeping in mind. If we do go that route, they should be the first ones built, so the time to failure is low if it's a compile error. Clang 3.8 isn't stable yet and will seg fault with optimization turned on, but the [final release](http://llvm.org/) is slated for a week from now, so I expect that to change very soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182874560
https://github.com/psi4/psi4/pull/237#issuecomment-182874560:436,Performance,optimiz,optimization,436,"I pretty much agree with this. One thing to keep in mind is [Rollin's problem](https://travis-ci.org/psi4/psi4public/builds/105540128) that was only picked up with debug settings, so I think that a solitary debug build for GCC and clang could be worth keeping in mind. If we do go that route, they should be the first ones built, so the time to failure is low if it's a compile error. Clang 3.8 isn't stable yet and will seg fault with optimization turned on, but the [final release](http://llvm.org/) is slated for a week from now, so I expect that to change very soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182874560
https://github.com/psi4/psi4/pull/237#issuecomment-182875337:343,Energy Efficiency,reduce,reduce,343,"Thanks, @jgonthier. Given that the Travis CI tests run every time somebody submits or merges a PR, we're going to be running that test a lot. If we don't see the problem again, it was probably just a strange artifact of the invalid read that was non-deterministic. If we keep seeing it after you have fixed that read, we probably just need to reduce the optimization level for that one routine. Either way, thanks for checking it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182875337
https://github.com/psi4/psi4/pull/237#issuecomment-182875337:386,Integrability,rout,routine,386,"Thanks, @jgonthier. Given that the Travis CI tests run every time somebody submits or merges a PR, we're going to be running that test a lot. If we don't see the problem again, it was probably just a strange artifact of the invalid read that was non-deterministic. If we keep seeing it after you have fixed that read, we probably just need to reduce the optimization level for that one routine. Either way, thanks for checking it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182875337
https://github.com/psi4/psi4/pull/237#issuecomment-182875337:354,Performance,optimiz,optimization,354,"Thanks, @jgonthier. Given that the Travis CI tests run every time somebody submits or merges a PR, we're going to be running that test a lot. If we don't see the problem again, it was probably just a strange artifact of the invalid read that was non-deterministic. If we keep seeing it after you have fixed that read, we probably just need to reduce the optimization level for that one routine. Either way, thanks for checking it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182875337
https://github.com/psi4/psi4/pull/237#issuecomment-182875337:45,Testability,test,tests,45,"Thanks, @jgonthier. Given that the Travis CI tests run every time somebody submits or merges a PR, we're going to be running that test a lot. If we don't see the problem again, it was probably just a strange artifact of the invalid read that was non-deterministic. If we keep seeing it after you have fixed that read, we probably just need to reduce the optimization level for that one routine. Either way, thanks for checking it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182875337
https://github.com/psi4/psi4/pull/237#issuecomment-182875337:130,Testability,test,test,130,"Thanks, @jgonthier. Given that the Travis CI tests run every time somebody submits or merges a PR, we're going to be running that test a lot. If we don't see the problem again, it was probably just a strange artifact of the invalid read that was non-deterministic. If we keep seeing it after you have fixed that read, we probably just need to reduce the optimization level for that one routine. Either way, thanks for checking it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182875337
https://github.com/psi4/psi4/pull/237#issuecomment-182877975:612,Energy Efficiency,reduce,reduce,612,"I agree with @andysim --- Rollin's bug was only uncovered with debug flags; turned on, so it makes sense to retain at least one debug build. On Thu, Feb 11, 2016 at 8:56 AM, Andy Simmonett notifications@github.com; wrote:. > Thanks, @jgonthier https://github.com/jgonthier. Given that the Travis; > CI tests run every time somebody submits or merges a PR, we're going to be; > running that test a lot. If we don't see the problem again, it was probably; > just a strange artifact of the invalid read that was non-deterministic. If; > we keep seeing it after you have fixed that read, we probably just need to; > reduce the optimization level for that one routine. Either way, thanks for; > checking it.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/237#issuecomment-182875337.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182877975
https://github.com/psi4/psi4/pull/237#issuecomment-182877975:655,Integrability,rout,routine,655,"I agree with @andysim --- Rollin's bug was only uncovered with debug flags; turned on, so it makes sense to retain at least one debug build. On Thu, Feb 11, 2016 at 8:56 AM, Andy Simmonett notifications@github.com; wrote:. > Thanks, @jgonthier https://github.com/jgonthier. Given that the Travis; > CI tests run every time somebody submits or merges a PR, we're going to be; > running that test a lot. If we don't see the problem again, it was probably; > just a strange artifact of the invalid read that was non-deterministic. If; > we keep seeing it after you have fixed that read, we probably just need to; > reduce the optimization level for that one routine. Either way, thanks for; > checking it.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/237#issuecomment-182875337.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182877975
https://github.com/psi4/psi4/pull/237#issuecomment-182877975:623,Performance,optimiz,optimization,623,"I agree with @andysim --- Rollin's bug was only uncovered with debug flags; turned on, so it makes sense to retain at least one debug build. On Thu, Feb 11, 2016 at 8:56 AM, Andy Simmonett notifications@github.com; wrote:. > Thanks, @jgonthier https://github.com/jgonthier. Given that the Travis; > CI tests run every time somebody submits or merges a PR, we're going to be; > running that test a lot. If we don't see the problem again, it was probably; > just a strange artifact of the invalid read that was non-deterministic. If; > we keep seeing it after you have fixed that read, we probably just need to; > reduce the optimization level for that one routine. Either way, thanks for; > checking it.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/237#issuecomment-182875337.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182877975
https://github.com/psi4/psi4/pull/237#issuecomment-182877975:302,Testability,test,tests,302,"I agree with @andysim --- Rollin's bug was only uncovered with debug flags; turned on, so it makes sense to retain at least one debug build. On Thu, Feb 11, 2016 at 8:56 AM, Andy Simmonett notifications@github.com; wrote:. > Thanks, @jgonthier https://github.com/jgonthier. Given that the Travis; > CI tests run every time somebody submits or merges a PR, we're going to be; > running that test a lot. If we don't see the problem again, it was probably; > just a strange artifact of the invalid read that was non-deterministic. If; > we keep seeing it after you have fixed that read, we probably just need to; > reduce the optimization level for that one routine. Either way, thanks for; > checking it.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/237#issuecomment-182875337.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182877975
https://github.com/psi4/psi4/pull/237#issuecomment-182877975:390,Testability,test,test,390,"I agree with @andysim --- Rollin's bug was only uncovered with debug flags; turned on, so it makes sense to retain at least one debug build. On Thu, Feb 11, 2016 at 8:56 AM, Andy Simmonett notifications@github.com; wrote:. > Thanks, @jgonthier https://github.com/jgonthier. Given that the Travis; > CI tests run every time somebody submits or merges a PR, we're going to be; > running that test a lot. If we don't see the problem again, it was probably; > just a strange artifact of the invalid read that was non-deterministic. If; > we keep seeing it after you have fixed that read, we probably just need to; > reduce the optimization level for that one routine. Either way, thanks for; > checking it.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/237#issuecomment-182875337.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182877975
https://github.com/psi4/psi4/pull/237#issuecomment-182886143:55,Deployability,release,released,55,"@andysim Ah, didn't realize 3.8 hasn't been officially released yet. I'll take that off the list. How's this:; - clang: 3.5 release, 3.6 release, 3.7 release; - gcc: 4.8 release, 4.9 release, 5.2 release/debug. This should cover the last version or two of the major distros. . @jgonthier I'll build and test on my box shortly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182886143
https://github.com/psi4/psi4/pull/237#issuecomment-182886143:124,Deployability,release,release,124,"@andysim Ah, didn't realize 3.8 hasn't been officially released yet. I'll take that off the list. How's this:; - clang: 3.5 release, 3.6 release, 3.7 release; - gcc: 4.8 release, 4.9 release, 5.2 release/debug. This should cover the last version or two of the major distros. . @jgonthier I'll build and test on my box shortly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182886143
https://github.com/psi4/psi4/pull/237#issuecomment-182886143:137,Deployability,release,release,137,"@andysim Ah, didn't realize 3.8 hasn't been officially released yet. I'll take that off the list. How's this:; - clang: 3.5 release, 3.6 release, 3.7 release; - gcc: 4.8 release, 4.9 release, 5.2 release/debug. This should cover the last version or two of the major distros. . @jgonthier I'll build and test on my box shortly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182886143
https://github.com/psi4/psi4/pull/237#issuecomment-182886143:150,Deployability,release,release,150,"@andysim Ah, didn't realize 3.8 hasn't been officially released yet. I'll take that off the list. How's this:; - clang: 3.5 release, 3.6 release, 3.7 release; - gcc: 4.8 release, 4.9 release, 5.2 release/debug. This should cover the last version or two of the major distros. . @jgonthier I'll build and test on my box shortly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182886143
https://github.com/psi4/psi4/pull/237#issuecomment-182886143:170,Deployability,release,release,170,"@andysim Ah, didn't realize 3.8 hasn't been officially released yet. I'll take that off the list. How's this:; - clang: 3.5 release, 3.6 release, 3.7 release; - gcc: 4.8 release, 4.9 release, 5.2 release/debug. This should cover the last version or two of the major distros. . @jgonthier I'll build and test on my box shortly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182886143
https://github.com/psi4/psi4/pull/237#issuecomment-182886143:183,Deployability,release,release,183,"@andysim Ah, didn't realize 3.8 hasn't been officially released yet. I'll take that off the list. How's this:; - clang: 3.5 release, 3.6 release, 3.7 release; - gcc: 4.8 release, 4.9 release, 5.2 release/debug. This should cover the last version or two of the major distros. . @jgonthier I'll build and test on my box shortly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182886143
https://github.com/psi4/psi4/pull/237#issuecomment-182886143:196,Deployability,release,release,196,"@andysim Ah, didn't realize 3.8 hasn't been officially released yet. I'll take that off the list. How's this:; - clang: 3.5 release, 3.6 release, 3.7 release; - gcc: 4.8 release, 4.9 release, 5.2 release/debug. This should cover the last version or two of the major distros. . @jgonthier I'll build and test on my box shortly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182886143
https://github.com/psi4/psi4/pull/237#issuecomment-182886143:303,Testability,test,test,303,"@andysim Ah, didn't realize 3.8 hasn't been officially released yet. I'll take that off the list. How's this:; - clang: 3.5 release, 3.6 release, 3.7 release; - gcc: 4.8 release, 4.9 release, 5.2 release/debug. This should cover the last version or two of the major distros. . @jgonthier I'll build and test on my box shortly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182886143
https://github.com/psi4/psi4/pull/237#issuecomment-182887045:144,Deployability,release,release,144,"Well, I was really hoping to keep the build matrix fairly simple to prevent build # explosions. What if we do the following:; - clang 3.5, 3.7 (release); - gcc 4.8, 5.2 (release); - gcc 5.2 (debug). I don think building intermediate compiler releases is as important and we manage to stay at the 5 concurrent build number.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182887045
https://github.com/psi4/psi4/pull/237#issuecomment-182887045:170,Deployability,release,release,170,"Well, I was really hoping to keep the build matrix fairly simple to prevent build # explosions. What if we do the following:; - clang 3.5, 3.7 (release); - gcc 4.8, 5.2 (release); - gcc 5.2 (debug). I don think building intermediate compiler releases is as important and we manage to stay at the 5 concurrent build number.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182887045
https://github.com/psi4/psi4/pull/237#issuecomment-182887045:242,Deployability,release,releases,242,"Well, I was really hoping to keep the build matrix fairly simple to prevent build # explosions. What if we do the following:; - clang 3.5, 3.7 (release); - gcc 4.8, 5.2 (release); - gcc 5.2 (debug). I don think building intermediate compiler releases is as important and we manage to stay at the 5 concurrent build number.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182887045
https://github.com/psi4/psi4/pull/237#issuecomment-182887045:298,Performance,concurren,concurrent,298,"Well, I was really hoping to keep the build matrix fairly simple to prevent build # explosions. What if we do the following:; - clang 3.5, 3.7 (release); - gcc 4.8, 5.2 (release); - gcc 5.2 (debug). I don think building intermediate compiler releases is as important and we manage to stay at the 5 concurrent build number.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182887045
https://github.com/psi4/psi4/pull/237#issuecomment-182887045:58,Usability,simpl,simple,58,"Well, I was really hoping to keep the build matrix fairly simple to prevent build # explosions. What if we do the following:; - clang 3.5, 3.7 (release); - gcc 4.8, 5.2 (release); - gcc 5.2 (debug). I don think building intermediate compiler releases is as important and we manage to stay at the 5 concurrent build number.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182887045
https://github.com/psi4/psi4/pull/237#issuecomment-182893146:48,Deployability,release,releases,48,I'm the opposite: Testing intermediate compiler releases is important and the 5 concurrent build limit is unimportant. We're not talking about about an enormous about of time testing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182893146
https://github.com/psi4/psi4/pull/237#issuecomment-182893146:80,Performance,concurren,concurrent,80,I'm the opposite: Testing intermediate compiler releases is important and the 5 concurrent build limit is unimportant. We're not talking about about an enormous about of time testing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182893146
https://github.com/psi4/psi4/pull/237#issuecomment-182893146:18,Testability,Test,Testing,18,I'm the opposite: Testing intermediate compiler releases is important and the 5 concurrent build limit is unimportant. We're not talking about about an enormous about of time testing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182893146
https://github.com/psi4/psi4/pull/237#issuecomment-182893146:175,Testability,test,testing,175,I'm the opposite: Testing intermediate compiler releases is important and the 5 concurrent build limit is unimportant. We're not talking about about an enormous about of time testing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182893146
https://github.com/psi4/psi4/pull/237#issuecomment-182893800:224,Deployability,release,release,224,"I think that looks good, @dgasmith. @jturney, how about a weekly build/test for the full matrix (and OSX) using the Docker solution that @dgasmith proposed before. That would give us complete coverage of compilers and debug/release, but on a slight delay. We'd catch most bugs before that stage with the limited Travis builds. Just a thought.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182893800
https://github.com/psi4/psi4/pull/237#issuecomment-182893800:71,Testability,test,test,71,"I think that looks good, @dgasmith. @jturney, how about a weekly build/test for the full matrix (and OSX) using the Docker solution that @dgasmith proposed before. That would give us complete coverage of compilers and debug/release, but on a slight delay. We'd catch most bugs before that stage with the limited Travis builds. Just a thought.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182893800
https://github.com/psi4/psi4/pull/237#issuecomment-182896518:154,Availability,down,down,154,@jgonthier I found that invalid read you mentioned but the test did pass. @andysim That's fine. I'm just not sure why there's concern to keep the testing down to a minimum. It's free testing that we don't have to think about.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182896518
https://github.com/psi4/psi4/pull/237#issuecomment-182896518:59,Testability,test,test,59,@jgonthier I found that invalid read you mentioned but the test did pass. @andysim That's fine. I'm just not sure why there's concern to keep the testing down to a minimum. It's free testing that we don't have to think about.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182896518
https://github.com/psi4/psi4/pull/237#issuecomment-182896518:146,Testability,test,testing,146,@jgonthier I found that invalid read you mentioned but the test did pass. @andysim That's fine. I'm just not sure why there's concern to keep the testing down to a minimum. It's free testing that we don't have to think about.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182896518
https://github.com/psi4/psi4/pull/237#issuecomment-182896518:183,Testability,test,testing,183,@jgonthier I found that invalid read you mentioned but the test did pass. @andysim That's fine. I'm just not sure why there's concern to keep the testing down to a minimum. It's free testing that we don't have to think about.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182896518
https://github.com/psi4/psi4/pull/237#issuecomment-182898239:265,Integrability,rout,route,265,"I can see an argument for both fast and rigorous CI solutions, and don't really have a strong opinion on how we should proceed. The minimal test may become important as we start getting more PRs; it's nice to be able to see if they're valid in a short window. That route is fine for me, as long as we plug the gaps with another test solution. Right now we only deal with a handful of PRs a day at most, so having to wait a few hours isn't too bad, which means your more extensive testing idea is valid. As I said, I don't really have a strong opinion; I was just making some suggestions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182898239
https://github.com/psi4/psi4/pull/237#issuecomment-182898239:140,Testability,test,test,140,"I can see an argument for both fast and rigorous CI solutions, and don't really have a strong opinion on how we should proceed. The minimal test may become important as we start getting more PRs; it's nice to be able to see if they're valid in a short window. That route is fine for me, as long as we plug the gaps with another test solution. Right now we only deal with a handful of PRs a day at most, so having to wait a few hours isn't too bad, which means your more extensive testing idea is valid. As I said, I don't really have a strong opinion; I was just making some suggestions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182898239
https://github.com/psi4/psi4/pull/237#issuecomment-182898239:328,Testability,test,test,328,"I can see an argument for both fast and rigorous CI solutions, and don't really have a strong opinion on how we should proceed. The minimal test may become important as we start getting more PRs; it's nice to be able to see if they're valid in a short window. That route is fine for me, as long as we plug the gaps with another test solution. Right now we only deal with a handful of PRs a day at most, so having to wait a few hours isn't too bad, which means your more extensive testing idea is valid. As I said, I don't really have a strong opinion; I was just making some suggestions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182898239
https://github.com/psi4/psi4/pull/237#issuecomment-182898239:480,Testability,test,testing,480,"I can see an argument for both fast and rigorous CI solutions, and don't really have a strong opinion on how we should proceed. The minimal test may become important as we start getting more PRs; it's nice to be able to see if they're valid in a short window. That route is fine for me, as long as we plug the gaps with another test solution. Right now we only deal with a handful of PRs a day at most, so having to wait a few hours isn't too bad, which means your more extensive testing idea is valid. As I said, I don't really have a strong opinion; I was just making some suggestions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182898239
https://github.com/psi4/psi4/pull/237#issuecomment-182953987:230,Integrability,depend,depending,230,"@jturney Its a momentum thing. Take something like QChem as an extreme example which (apparently) takes about 15 hours to compile and fully test. Say I do some work, push it out, and then basically have to wait a work day (or two depending on the queue) before I can see if I broke anything or not. I think this is a clear hindrance to the development cycle. If travis cannot be a full test I would prefer it would be as brief as possible while. With the way travis works 5 tests will run in an hour, 6 will always take two, with more test taking progressively longer depending on the queue. If it wasn't such a sharp increase I wouldn't mind it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182953987
https://github.com/psi4/psi4/pull/237#issuecomment-182953987:568,Integrability,depend,depending,568,"@jturney Its a momentum thing. Take something like QChem as an extreme example which (apparently) takes about 15 hours to compile and fully test. Say I do some work, push it out, and then basically have to wait a work day (or two depending on the queue) before I can see if I broke anything or not. I think this is a clear hindrance to the development cycle. If travis cannot be a full test I would prefer it would be as brief as possible while. With the way travis works 5 tests will run in an hour, 6 will always take two, with more test taking progressively longer depending on the queue. If it wasn't such a sharp increase I wouldn't mind it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182953987
https://github.com/psi4/psi4/pull/237#issuecomment-182953987:247,Performance,queue,queue,247,"@jturney Its a momentum thing. Take something like QChem as an extreme example which (apparently) takes about 15 hours to compile and fully test. Say I do some work, push it out, and then basically have to wait a work day (or two depending on the queue) before I can see if I broke anything or not. I think this is a clear hindrance to the development cycle. If travis cannot be a full test I would prefer it would be as brief as possible while. With the way travis works 5 tests will run in an hour, 6 will always take two, with more test taking progressively longer depending on the queue. If it wasn't such a sharp increase I wouldn't mind it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182953987
https://github.com/psi4/psi4/pull/237#issuecomment-182953987:585,Performance,queue,queue,585,"@jturney Its a momentum thing. Take something like QChem as an extreme example which (apparently) takes about 15 hours to compile and fully test. Say I do some work, push it out, and then basically have to wait a work day (or two depending on the queue) before I can see if I broke anything or not. I think this is a clear hindrance to the development cycle. If travis cannot be a full test I would prefer it would be as brief as possible while. With the way travis works 5 tests will run in an hour, 6 will always take two, with more test taking progressively longer depending on the queue. If it wasn't such a sharp increase I wouldn't mind it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182953987
https://github.com/psi4/psi4/pull/237#issuecomment-182953987:140,Testability,test,test,140,"@jturney Its a momentum thing. Take something like QChem as an extreme example which (apparently) takes about 15 hours to compile and fully test. Say I do some work, push it out, and then basically have to wait a work day (or two depending on the queue) before I can see if I broke anything or not. I think this is a clear hindrance to the development cycle. If travis cannot be a full test I would prefer it would be as brief as possible while. With the way travis works 5 tests will run in an hour, 6 will always take two, with more test taking progressively longer depending on the queue. If it wasn't such a sharp increase I wouldn't mind it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182953987
https://github.com/psi4/psi4/pull/237#issuecomment-182953987:386,Testability,test,test,386,"@jturney Its a momentum thing. Take something like QChem as an extreme example which (apparently) takes about 15 hours to compile and fully test. Say I do some work, push it out, and then basically have to wait a work day (or two depending on the queue) before I can see if I broke anything or not. I think this is a clear hindrance to the development cycle. If travis cannot be a full test I would prefer it would be as brief as possible while. With the way travis works 5 tests will run in an hour, 6 will always take two, with more test taking progressively longer depending on the queue. If it wasn't such a sharp increase I wouldn't mind it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182953987
https://github.com/psi4/psi4/pull/237#issuecomment-182953987:474,Testability,test,tests,474,"@jturney Its a momentum thing. Take something like QChem as an extreme example which (apparently) takes about 15 hours to compile and fully test. Say I do some work, push it out, and then basically have to wait a work day (or two depending on the queue) before I can see if I broke anything or not. I think this is a clear hindrance to the development cycle. If travis cannot be a full test I would prefer it would be as brief as possible while. With the way travis works 5 tests will run in an hour, 6 will always take two, with more test taking progressively longer depending on the queue. If it wasn't such a sharp increase I wouldn't mind it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182953987
https://github.com/psi4/psi4/pull/237#issuecomment-182953987:535,Testability,test,test,535,"@jturney Its a momentum thing. Take something like QChem as an extreme example which (apparently) takes about 15 hours to compile and fully test. Say I do some work, push it out, and then basically have to wait a work day (or two depending on the queue) before I can see if I broke anything or not. I think this is a clear hindrance to the development cycle. If travis cannot be a full test I would prefer it would be as brief as possible while. With the way travis works 5 tests will run in an hour, 6 will always take two, with more test taking progressively longer depending on the queue. If it wasn't such a sharp increase I wouldn't mind it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182953987
https://github.com/psi4/psi4/pull/237#issuecomment-182953987:317,Usability,clear,clear,317,"@jturney Its a momentum thing. Take something like QChem as an extreme example which (apparently) takes about 15 hours to compile and fully test. Say I do some work, push it out, and then basically have to wait a work day (or two depending on the queue) before I can see if I broke anything or not. I think this is a clear hindrance to the development cycle. If travis cannot be a full test I would prefer it would be as brief as possible while. With the way travis works 5 tests will run in an hour, 6 will always take two, with more test taking progressively longer depending on the queue. If it wasn't such a sharp increase I wouldn't mind it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182953987
https://github.com/psi4/psi4/pull/237#issuecomment-182966941:22,Usability,undo,undoubtedly,22,"The build matrix will undoubtedly grow with time (python 3, OS X, etc). I think we are at least starting with room to grow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182966941
https://github.com/psi4/psi4/pull/237#issuecomment-183376850:99,Testability,test,tested,99,"Waiting a couple hours doesn't sound bad to me, especially for something; that presumably has been tested at some level before the PR. But I see the; argument for wanting feedback quicker than half a day, and also the; argument for keeping things light now if other builds are expected in the; near future. Whether or not Travis CI builds in one hour or six, we do need to; supplement it with automated testing of the entire test suite at least on; an occasional basis, since Travis CI is only running a small subset of our; tests. David. On Thu, Feb 11, 2016 at 4:46 PM, Lori A. Burns notifications@github.com; wrote:. > Merged #237 https://github.com/psi4/psi4public/pull/237.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/237#event-547798162.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-183376850
https://github.com/psi4/psi4/pull/237#issuecomment-183376850:403,Testability,test,testing,403,"Waiting a couple hours doesn't sound bad to me, especially for something; that presumably has been tested at some level before the PR. But I see the; argument for wanting feedback quicker than half a day, and also the; argument for keeping things light now if other builds are expected in the; near future. Whether or not Travis CI builds in one hour or six, we do need to; supplement it with automated testing of the entire test suite at least on; an occasional basis, since Travis CI is only running a small subset of our; tests. David. On Thu, Feb 11, 2016 at 4:46 PM, Lori A. Burns notifications@github.com; wrote:. > Merged #237 https://github.com/psi4/psi4public/pull/237.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/237#event-547798162.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-183376850
https://github.com/psi4/psi4/pull/237#issuecomment-183376850:425,Testability,test,test,425,"Waiting a couple hours doesn't sound bad to me, especially for something; that presumably has been tested at some level before the PR. But I see the; argument for wanting feedback quicker than half a day, and also the; argument for keeping things light now if other builds are expected in the; near future. Whether or not Travis CI builds in one hour or six, we do need to; supplement it with automated testing of the entire test suite at least on; an occasional basis, since Travis CI is only running a small subset of our; tests. David. On Thu, Feb 11, 2016 at 4:46 PM, Lori A. Burns notifications@github.com; wrote:. > Merged #237 https://github.com/psi4/psi4public/pull/237.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/237#event-547798162.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-183376850
https://github.com/psi4/psi4/pull/237#issuecomment-183376850:525,Testability,test,tests,525,"Waiting a couple hours doesn't sound bad to me, especially for something; that presumably has been tested at some level before the PR. But I see the; argument for wanting feedback quicker than half a day, and also the; argument for keeping things light now if other builds are expected in the; near future. Whether or not Travis CI builds in one hour or six, we do need to; supplement it with automated testing of the entire test suite at least on; an occasional basis, since Travis CI is only running a small subset of our; tests. David. On Thu, Feb 11, 2016 at 4:46 PM, Lori A. Burns notifications@github.com; wrote:. > Merged #237 https://github.com/psi4/psi4public/pull/237.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/237#event-547798162.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-183376850
https://github.com/psi4/psi4/pull/237#issuecomment-183376850:171,Usability,feedback,feedback,171,"Waiting a couple hours doesn't sound bad to me, especially for something; that presumably has been tested at some level before the PR. But I see the; argument for wanting feedback quicker than half a day, and also the; argument for keeping things light now if other builds are expected in the; near future. Whether or not Travis CI builds in one hour or six, we do need to; supplement it with automated testing of the entire test suite at least on; an occasional basis, since Travis CI is only running a small subset of our; tests. David. On Thu, Feb 11, 2016 at 4:46 PM, Lori A. Burns notifications@github.com; wrote:. > Merged #237 https://github.com/psi4/psi4public/pull/237.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/237#event-547798162.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-183376850
https://github.com/psi4/psi4/issues/238#issuecomment-182577836:425,Availability,error,error,425,"For me the biggest pro of C++11 is that is reduces the amount of code I have to write/maintain/debug.; - Defaulted (and deleted) constructors and assignment operators (mentiond by @dgasmith); - Liberal use of STL containers and `unique_ptr` means you should rarely have to write a destructor, and often don't have to write a copy constructor; - Constructor delegation. Cons:; - Template programming results in nasty compiler error messages that take experience to figure out; - Overuse of templates, auto, decltype, etc, can result unreadable code; - This can somewhat be fixed in the new PR workflow. Don't accept PRs which are a mess; - Some C++11 patterns can be intimidating to people who are still learning basic C++. As more libraries require C++11 (I think Ambit, TiledArray, and Cyclops all do), it should generally be embraced, with some reservations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182577836
https://github.com/psi4/psi4/issues/238#issuecomment-182577836:43,Energy Efficiency,reduce,reduces,43,"For me the biggest pro of C++11 is that is reduces the amount of code I have to write/maintain/debug.; - Defaulted (and deleted) constructors and assignment operators (mentiond by @dgasmith); - Liberal use of STL containers and `unique_ptr` means you should rarely have to write a destructor, and often don't have to write a copy constructor; - Constructor delegation. Cons:; - Template programming results in nasty compiler error messages that take experience to figure out; - Overuse of templates, auto, decltype, etc, can result unreadable code; - This can somewhat be fixed in the new PR workflow. Don't accept PRs which are a mess; - Some C++11 patterns can be intimidating to people who are still learning basic C++. As more libraries require C++11 (I think Ambit, TiledArray, and Cyclops all do), it should generally be embraced, with some reservations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182577836
https://github.com/psi4/psi4/issues/238#issuecomment-182577836:431,Integrability,message,messages,431,"For me the biggest pro of C++11 is that is reduces the amount of code I have to write/maintain/debug.; - Defaulted (and deleted) constructors and assignment operators (mentiond by @dgasmith); - Liberal use of STL containers and `unique_ptr` means you should rarely have to write a destructor, and often don't have to write a copy constructor; - Constructor delegation. Cons:; - Template programming results in nasty compiler error messages that take experience to figure out; - Overuse of templates, auto, decltype, etc, can result unreadable code; - This can somewhat be fixed in the new PR workflow. Don't accept PRs which are a mess; - Some C++11 patterns can be intimidating to people who are still learning basic C++. As more libraries require C++11 (I think Ambit, TiledArray, and Cyclops all do), it should generally be embraced, with some reservations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182577836
https://github.com/psi4/psi4/issues/238#issuecomment-182577836:703,Usability,learn,learning,703,"For me the biggest pro of C++11 is that is reduces the amount of code I have to write/maintain/debug.; - Defaulted (and deleted) constructors and assignment operators (mentiond by @dgasmith); - Liberal use of STL containers and `unique_ptr` means you should rarely have to write a destructor, and often don't have to write a copy constructor; - Constructor delegation. Cons:; - Template programming results in nasty compiler error messages that take experience to figure out; - Overuse of templates, auto, decltype, etc, can result unreadable code; - This can somewhat be fixed in the new PR workflow. Don't accept PRs which are a mess; - Some C++11 patterns can be intimidating to people who are still learning basic C++. As more libraries require C++11 (I think Ambit, TiledArray, and Cyclops all do), it should generally be embraced, with some reservations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182577836
https://github.com/psi4/psi4/issues/238#issuecomment-182588993:765,Availability,error,error,765,"Fewer compilers working is less of an issue as we push more users towards; the binary distribution. And is only a temporary problem, anyway. Is icpc; 15.0 recent enough to support all the standards we need?. On Wed, Feb 10, 2016 at 3:50 PM, Ben Pritchard notifications@github.com; wrote:. > For me the biggest pro of C++11 is that is reduces the amount of code I; > have to write/maintain/debug.; > - Defaulted (and deleted) constructors and assignment operators; > (mentiond by @dgasmith https://github.com/dgasmith); > - Liberal use of STL containers and unique_ptr means you should rarely; > have to write a destructor, and often don't have to write a copy constructor; > - Constructor delegation; > ; > Cons:; > - Template programming results in nasty compiler error messages that; > take experience to figure out; > - Overuse of templates, auto, decltype, etc, can result unreadable; > code; > - This can somewhat be fixed in the new PR workflow. Don't accept; > PRs which are a mess; > - Some C++11 patterns can be intimidating to people who are still; > learning basic C++; > ; > As more libraries require C++11 (I think Ambit, TiledArray, and Cyclops; > all do), it should generally be embraced, with some reservations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/238#issuecomment-182577836.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182588993
https://github.com/psi4/psi4/issues/238#issuecomment-182588993:334,Energy Efficiency,reduce,reduces,334,"Fewer compilers working is less of an issue as we push more users towards; the binary distribution. And is only a temporary problem, anyway. Is icpc; 15.0 recent enough to support all the standards we need?. On Wed, Feb 10, 2016 at 3:50 PM, Ben Pritchard notifications@github.com; wrote:. > For me the biggest pro of C++11 is that is reduces the amount of code I; > have to write/maintain/debug.; > - Defaulted (and deleted) constructors and assignment operators; > (mentiond by @dgasmith https://github.com/dgasmith); > - Liberal use of STL containers and unique_ptr means you should rarely; > have to write a destructor, and often don't have to write a copy constructor; > - Constructor delegation; > ; > Cons:; > - Template programming results in nasty compiler error messages that; > take experience to figure out; > - Overuse of templates, auto, decltype, etc, can result unreadable; > code; > - This can somewhat be fixed in the new PR workflow. Don't accept; > PRs which are a mess; > - Some C++11 patterns can be intimidating to people who are still; > learning basic C++; > ; > As more libraries require C++11 (I think Ambit, TiledArray, and Cyclops; > all do), it should generally be embraced, with some reservations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/238#issuecomment-182577836.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182588993
https://github.com/psi4/psi4/issues/238#issuecomment-182588993:771,Integrability,message,messages,771,"Fewer compilers working is less of an issue as we push more users towards; the binary distribution. And is only a temporary problem, anyway. Is icpc; 15.0 recent enough to support all the standards we need?. On Wed, Feb 10, 2016 at 3:50 PM, Ben Pritchard notifications@github.com; wrote:. > For me the biggest pro of C++11 is that is reduces the amount of code I; > have to write/maintain/debug.; > - Defaulted (and deleted) constructors and assignment operators; > (mentiond by @dgasmith https://github.com/dgasmith); > - Liberal use of STL containers and unique_ptr means you should rarely; > have to write a destructor, and often don't have to write a copy constructor; > - Constructor delegation; > ; > Cons:; > - Template programming results in nasty compiler error messages that; > take experience to figure out; > - Overuse of templates, auto, decltype, etc, can result unreadable; > code; > - This can somewhat be fixed in the new PR workflow. Don't accept; > PRs which are a mess; > - Some C++11 patterns can be intimidating to people who are still; > learning basic C++; > ; > As more libraries require C++11 (I think Ambit, TiledArray, and Cyclops; > all do), it should generally be embraced, with some reservations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/238#issuecomment-182577836.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182588993
https://github.com/psi4/psi4/issues/238#issuecomment-182588993:1061,Usability,learn,learning,1061,"Fewer compilers working is less of an issue as we push more users towards; the binary distribution. And is only a temporary problem, anyway. Is icpc; 15.0 recent enough to support all the standards we need?. On Wed, Feb 10, 2016 at 3:50 PM, Ben Pritchard notifications@github.com; wrote:. > For me the biggest pro of C++11 is that is reduces the amount of code I; > have to write/maintain/debug.; > - Defaulted (and deleted) constructors and assignment operators; > (mentiond by @dgasmith https://github.com/dgasmith); > - Liberal use of STL containers and unique_ptr means you should rarely; > have to write a destructor, and often don't have to write a copy constructor; > - Constructor delegation; > ; > Cons:; > - Template programming results in nasty compiler error messages that; > take experience to figure out; > - Overuse of templates, auto, decltype, etc, can result unreadable; > code; > - This can somewhat be fixed in the new PR workflow. Don't accept; > PRs which are a mess; > - Some C++11 patterns can be intimidating to people who are still; > learning basic C++; > ; > As more libraries require C++11 (I think Ambit, TiledArray, and Cyclops; > all do), it should generally be embraced, with some reservations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/238#issuecomment-182577836.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182588993
https://github.com/psi4/psi4/issues/238#issuecomment-182596162:993,Availability,error,error,993,"@cdsherrill yes 15.0 is recent enough. 14.0 is the minimum for full C; ++11 support based on the internets. On Wed, 2016-02-10 at 13:27 -0800, David Sherrill wrote:. > Fewer compilers working is less of an issue as we push more users; > towards; > the binary distribution. And is only a temporary problem, anyway. Is; > icpc; > 15.0 recent enough to support all the standards we need?; > ; > On Wed, Feb 10, 2016 at 3:50 PM, Ben Pritchard; > notifications@github.com; > wrote:; > ; > > For me the biggest pro of C++11 is that is reduces the amount of; > > code I; > > have to write/maintain/debug.; > > - Defaulted (and deleted) constructors and assignment operators; > > (mentiond by @dgasmith https://github.com/dgasmith); > > - Liberal use of STL containers and unique_ptr means you should; > > rarely; > > have to write a destructor, and often don't have to write a copy; > > constructor; > > - Constructor delegation; > > ; > > Cons:; > > - Template programming results in nasty compiler error messages that; > > take experience to figure out; > > - Overuse of templates, auto, decltype, etc, can result unreadable; > > code; > > - This can somewhat be fixed in the new PR workflow. Don't accept; > > PRs which are a mess; > > - Some C++11 patterns can be intimidating to people who are still; > > learning basic C++; > > ; > > As more libraries require C++11 (I think Ambit, TiledArray, and; > > Cyclops; > > all do), it should generally be embraced, with some reservations.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > ; > > https://github.com/psi4/psi4public/issues/238#issuecomment-182577836.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182596162
https://github.com/psi4/psi4/issues/238#issuecomment-182596162:529,Energy Efficiency,reduce,reduces,529,"@cdsherrill yes 15.0 is recent enough. 14.0 is the minimum for full C; ++11 support based on the internets. On Wed, 2016-02-10 at 13:27 -0800, David Sherrill wrote:. > Fewer compilers working is less of an issue as we push more users; > towards; > the binary distribution. And is only a temporary problem, anyway. Is; > icpc; > 15.0 recent enough to support all the standards we need?; > ; > On Wed, Feb 10, 2016 at 3:50 PM, Ben Pritchard; > notifications@github.com; > wrote:; > ; > > For me the biggest pro of C++11 is that is reduces the amount of; > > code I; > > have to write/maintain/debug.; > > - Defaulted (and deleted) constructors and assignment operators; > > (mentiond by @dgasmith https://github.com/dgasmith); > > - Liberal use of STL containers and unique_ptr means you should; > > rarely; > > have to write a destructor, and often don't have to write a copy; > > constructor; > > - Constructor delegation; > > ; > > Cons:; > > - Template programming results in nasty compiler error messages that; > > take experience to figure out; > > - Overuse of templates, auto, decltype, etc, can result unreadable; > > code; > > - This can somewhat be fixed in the new PR workflow. Don't accept; > > PRs which are a mess; > > - Some C++11 patterns can be intimidating to people who are still; > > learning basic C++; > > ; > > As more libraries require C++11 (I think Ambit, TiledArray, and; > > Cyclops; > > all do), it should generally be embraced, with some reservations.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > ; > > https://github.com/psi4/psi4public/issues/238#issuecomment-182577836.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182596162
https://github.com/psi4/psi4/issues/238#issuecomment-182596162:999,Integrability,message,messages,999,"@cdsherrill yes 15.0 is recent enough. 14.0 is the minimum for full C; ++11 support based on the internets. On Wed, 2016-02-10 at 13:27 -0800, David Sherrill wrote:. > Fewer compilers working is less of an issue as we push more users; > towards; > the binary distribution. And is only a temporary problem, anyway. Is; > icpc; > 15.0 recent enough to support all the standards we need?; > ; > On Wed, Feb 10, 2016 at 3:50 PM, Ben Pritchard; > notifications@github.com; > wrote:; > ; > > For me the biggest pro of C++11 is that is reduces the amount of; > > code I; > > have to write/maintain/debug.; > > - Defaulted (and deleted) constructors and assignment operators; > > (mentiond by @dgasmith https://github.com/dgasmith); > > - Liberal use of STL containers and unique_ptr means you should; > > rarely; > > have to write a destructor, and often don't have to write a copy; > > constructor; > > - Constructor delegation; > > ; > > Cons:; > > - Template programming results in nasty compiler error messages that; > > take experience to figure out; > > - Overuse of templates, auto, decltype, etc, can result unreadable; > > code; > > - This can somewhat be fixed in the new PR workflow. Don't accept; > > PRs which are a mess; > > - Some C++11 patterns can be intimidating to people who are still; > > learning basic C++; > > ; > > As more libraries require C++11 (I think Ambit, TiledArray, and; > > Cyclops; > > all do), it should generally be embraced, with some reservations.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > ; > > https://github.com/psi4/psi4public/issues/238#issuecomment-182577836.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182596162
https://github.com/psi4/psi4/issues/238#issuecomment-182596162:1303,Usability,learn,learning,1303,"@cdsherrill yes 15.0 is recent enough. 14.0 is the minimum for full C; ++11 support based on the internets. On Wed, 2016-02-10 at 13:27 -0800, David Sherrill wrote:. > Fewer compilers working is less of an issue as we push more users; > towards; > the binary distribution. And is only a temporary problem, anyway. Is; > icpc; > 15.0 recent enough to support all the standards we need?; > ; > On Wed, Feb 10, 2016 at 3:50 PM, Ben Pritchard; > notifications@github.com; > wrote:; > ; > > For me the biggest pro of C++11 is that is reduces the amount of; > > code I; > > have to write/maintain/debug.; > > - Defaulted (and deleted) constructors and assignment operators; > > (mentiond by @dgasmith https://github.com/dgasmith); > > - Liberal use of STL containers and unique_ptr means you should; > > rarely; > > have to write a destructor, and often don't have to write a copy; > > constructor; > > - Constructor delegation; > > ; > > Cons:; > > - Template programming results in nasty compiler error messages that; > > take experience to figure out; > > - Overuse of templates, auto, decltype, etc, can result unreadable; > > code; > > - This can somewhat be fixed in the new PR workflow. Don't accept; > > PRs which are a mess; > > - Some C++11 patterns can be intimidating to people who are still; > > learning basic C++; > > ; > > As more libraries require C++11 (I think Ambit, TiledArray, and; > > Cyclops; > > all do), it should generally be embraced, with some reservations.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > ; > > https://github.com/psi4/psi4public/issues/238#issuecomment-182577836.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182596162
https://github.com/psi4/psi4/issues/238#issuecomment-189146864:58,Usability,guid,guide,58,I fully support this. And I suppose that the contribution guide should mention which features of C++11 are **not** welcome (`auto` seems to be one of those).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-189146864
https://github.com/psi4/psi4/issues/238#issuecomment-191705233:74,Usability,clear,clear,74,"Outright banning `auto` is excessive. It can make your code actually more clear to understand. Of course, it should be used economically and with care. But in a lot of cases, the exact type is not that important.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-191705233
https://github.com/psi4/psi4/issues/238#issuecomment-191750201:72,Usability,simpl,simply,72,"Yes, banning certain features is not really what we want to do. I would simply add caution to the use of `auto`, maybe a rule of thumb: If you are using auto for something besides an iterator its _likely_ not a good idea. We tossed around a C++11 user guide, but didnt really get anywhere. I can start a wiki article if others will contribute as my personal list of do's and dont's is quite short.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-191750201
https://github.com/psi4/psi4/issues/238#issuecomment-191750201:252,Usability,guid,guide,252,"Yes, banning certain features is not really what we want to do. I would simply add caution to the use of `auto`, maybe a rule of thumb: If you are using auto for something besides an iterator its _likely_ not a good idea. We tossed around a C++11 user guide, but didnt really get anywhere. I can start a wiki article if others will contribute as my personal list of do's and dont's is quite short.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-191750201
https://github.com/psi4/psi4/issues/238#issuecomment-212920383:41,Usability,guid,guidelines,41,"@ryanmrichard : I am reading through the guidelines you wrote and I see that for unique_ptr, the C++14 syntax for construction will be:; `std::unique_ptr<Type> MyPtr=std::make_unique<Type>();`; whereas the syntax for shared_ptr is reported as:; `std::shared_ptr<Type> MyPtr=std::make_shared();`; Should it be `make_shared<Type>()` ? Or are the two really different ?. Thanks for these notes, by the way. I'm going to try to apply that to the new PK integral code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-212920383
https://github.com/psi4/psi4/issues/240#issuecomment-182649776:201,Availability,error,errors,201,"Thanks for the report. We did some considerable infrastructure changes that show up in `0.4` (hence the tag, so it'd be easy to let people know how to avoid them if they went wrong). The nature of the errors you're getting indicates they're definitely infrastructure-related. Could you post the input file for the oeprop error?. In trying to revert, even the architecture independent files (the python driver) will be inconsistent between pre and post `0.4`. So maybe try installing a `0.3` afresh into a new conda environment. And make sure you don't have `PSIDATADIR` envvar defined anywhere, just in case you occasionally work from cloned/compiled copies.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182649776
https://github.com/psi4/psi4/issues/240#issuecomment-182649776:321,Availability,error,error,321,"Thanks for the report. We did some considerable infrastructure changes that show up in `0.4` (hence the tag, so it'd be easy to let people know how to avoid them if they went wrong). The nature of the errors you're getting indicates they're definitely infrastructure-related. Could you post the input file for the oeprop error?. In trying to revert, even the architecture independent files (the python driver) will be inconsistent between pre and post `0.4`. So maybe try installing a `0.3` afresh into a new conda environment. And make sure you don't have `PSIDATADIR` envvar defined anywhere, just in case you occasionally work from cloned/compiled copies.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182649776
https://github.com/psi4/psi4/issues/240#issuecomment-182649776:472,Deployability,install,installing,472,"Thanks for the report. We did some considerable infrastructure changes that show up in `0.4` (hence the tag, so it'd be easy to let people know how to avoid them if they went wrong). The nature of the errors you're getting indicates they're definitely infrastructure-related. Could you post the input file for the oeprop error?. In trying to revert, even the architecture independent files (the python driver) will be inconsistent between pre and post `0.4`. So maybe try installing a `0.3` afresh into a new conda environment. And make sure you don't have `PSIDATADIR` envvar defined anywhere, just in case you occasionally work from cloned/compiled copies.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182649776
https://github.com/psi4/psi4/issues/240#issuecomment-182649776:151,Safety,avoid,avoid,151,"Thanks for the report. We did some considerable infrastructure changes that show up in `0.4` (hence the tag, so it'd be easy to let people know how to avoid them if they went wrong). The nature of the errors you're getting indicates they're definitely infrastructure-related. Could you post the input file for the oeprop error?. In trying to revert, even the architecture independent files (the python driver) will be inconsistent between pre and post `0.4`. So maybe try installing a `0.3` afresh into a new conda environment. And make sure you don't have `PSIDATADIR` envvar defined anywhere, just in case you occasionally work from cloned/compiled copies.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182649776
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:411,Availability,recover,recovering,411,"I leave most of the environment variable stuff for PSI4 in the hands of conda. I have a modified/compiled version of PSI4 on just one of my machines, but PSI4 crashes on all of them for one electron properties. I saw the crash while I was running a testing script, so I know that it printed correct results for HF, PBE0, gradient, and PBE0+point-charges calculations. The only test of mine that failed involved recovering charges from a QM calculation. ```; [input file]. set_num_threads(8); memory 256 mb; set reference rhf; set basis 6-31G*; set guess sad; set scf_type df. psi4_io.set_specific_path(32,'./'); psi4_io.set_specific_retention(32,True); psi4_io.set_specific_path(180,'./'); psi4_io.set_specific_retention(180,True). molecule LICHM_0 {; 0 1; O 0.87273600000000 0.00000000000000 -1.2467539999999; H 0.28827300000000 0.00000000000000 -2.0108530000000; H 0.28827300000000 0.00000000000000 -0.4826550000000; symmetry c1; no_reorient; no_com; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1.3062266666666,-0.6489658001839,0.00000001660701,1.10730418839000); Chrgfield.extern.addCharge(0.35180666666666,-0.7534241883900,-0.0000000536004,1.26252019981607); Chrgfield.extern.addCharge(0.86636000000000,-0.7788030060160,0.13229430272998,1.13268305579077); Chrgfield.extern.addCharge(-1.3062266666666,-0.9086401998160,-0.0000000166070,1.15806181160999); Chrgfield.extern.addCharge(0.10176666666666,-0.8041818116099,0.00000005360047,1.00284580018392); Chrgfield.extern.addCharge(0.86636000000000,-0.7788029939839,-0.1322943027299,1.13268294420922); Chrgfield.extern.addCharge(0.51284666666666,-0.7965191998160,0.76409898339298,1.73166981160999); Chrgfield.extern.addCharge(-1.7440911751517,-0.6778443974775,0.64528811991560,1.64918444879139); Chrgfield.extern.addCharge(0.85696271562354,-0.6894742127334,0.82228626070531,1.58968679653742); Chrgfield.extern.addCharge(0.51284666666666,-0.5368448001839,0.76409901660701,1.68091218839000); Chrgfield.extern.addCharge(-0.5989622639259,-0.65551960",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:9187,Availability,Error,Error,9187,"IS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; Total time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; [Error prints before oeprop]; ```. The other crash I saw was just the input/output from the conda install test. Let me know if you need more information.; -kratz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:9284,Deployability,install,install,9284,"IS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; Total time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; [Error prints before oeprop]; ```. The other crash I saw was just the input/output from the conda install test. Let me know if you need more information.; -kratz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:346,Energy Efficiency,charge,charges,346,"I leave most of the environment variable stuff for PSI4 in the hands of conda. I have a modified/compiled version of PSI4 on just one of my machines, but PSI4 crashes on all of them for one electron properties. I saw the crash while I was running a testing script, so I know that it printed correct results for HF, PBE0, gradient, and PBE0+point-charges calculations. The only test of mine that failed involved recovering charges from a QM calculation. ```; [input file]. set_num_threads(8); memory 256 mb; set reference rhf; set basis 6-31G*; set guess sad; set scf_type df. psi4_io.set_specific_path(32,'./'); psi4_io.set_specific_retention(32,True); psi4_io.set_specific_path(180,'./'); psi4_io.set_specific_retention(180,True). molecule LICHM_0 {; 0 1; O 0.87273600000000 0.00000000000000 -1.2467539999999; H 0.28827300000000 0.00000000000000 -2.0108530000000; H 0.28827300000000 0.00000000000000 -0.4826550000000; symmetry c1; no_reorient; no_com; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1.3062266666666,-0.6489658001839,0.00000001660701,1.10730418839000); Chrgfield.extern.addCharge(0.35180666666666,-0.7534241883900,-0.0000000536004,1.26252019981607); Chrgfield.extern.addCharge(0.86636000000000,-0.7788030060160,0.13229430272998,1.13268305579077); Chrgfield.extern.addCharge(-1.3062266666666,-0.9086401998160,-0.0000000166070,1.15806181160999); Chrgfield.extern.addCharge(0.10176666666666,-0.8041818116099,0.00000005360047,1.00284580018392); Chrgfield.extern.addCharge(0.86636000000000,-0.7788029939839,-0.1322943027299,1.13268294420922); Chrgfield.extern.addCharge(0.51284666666666,-0.7965191998160,0.76409898339298,1.73166981160999); Chrgfield.extern.addCharge(-1.7440911751517,-0.6778443974775,0.64528811991560,1.64918444879139); Chrgfield.extern.addCharge(0.85696271562354,-0.6894742127334,0.82228626070531,1.58968679653742); Chrgfield.extern.addCharge(0.51284666666666,-0.5368448001839,0.76409901660701,1.68091218839000); Chrgfield.extern.addCharge(-0.5989622639259,-0.65551960",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:422,Energy Efficiency,charge,charges,422,"I leave most of the environment variable stuff for PSI4 in the hands of conda. I have a modified/compiled version of PSI4 on just one of my machines, but PSI4 crashes on all of them for one electron properties. I saw the crash while I was running a testing script, so I know that it printed correct results for HF, PBE0, gradient, and PBE0+point-charges calculations. The only test of mine that failed involved recovering charges from a QM calculation. ```; [input file]. set_num_threads(8); memory 256 mb; set reference rhf; set basis 6-31G*; set guess sad; set scf_type df. psi4_io.set_specific_path(32,'./'); psi4_io.set_specific_retention(32,True); psi4_io.set_specific_path(180,'./'); psi4_io.set_specific_retention(180,True). molecule LICHM_0 {; 0 1; O 0.87273600000000 0.00000000000000 -1.2467539999999; H 0.28827300000000 0.00000000000000 -2.0108530000000; H 0.28827300000000 0.00000000000000 -0.4826550000000; symmetry c1; no_reorient; no_com; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1.3062266666666,-0.6489658001839,0.00000001660701,1.10730418839000); Chrgfield.extern.addCharge(0.35180666666666,-0.7534241883900,-0.0000000536004,1.26252019981607); Chrgfield.extern.addCharge(0.86636000000000,-0.7788030060160,0.13229430272998,1.13268305579077); Chrgfield.extern.addCharge(-1.3062266666666,-0.9086401998160,-0.0000000166070,1.15806181160999); Chrgfield.extern.addCharge(0.10176666666666,-0.8041818116099,0.00000005360047,1.00284580018392); Chrgfield.extern.addCharge(0.86636000000000,-0.7788029939839,-0.1322943027299,1.13268294420922); Chrgfield.extern.addCharge(0.51284666666666,-0.7965191998160,0.76409898339298,1.73166981160999); Chrgfield.extern.addCharge(-1.7440911751517,-0.6778443974775,0.64528811991560,1.64918444879139); Chrgfield.extern.addCharge(0.85696271562354,-0.6894742127334,0.82228626070531,1.58968679653742); Chrgfield.extern.addCharge(0.51284666666666,-0.5368448001839,0.76409901660701,1.68091218839000); Chrgfield.extern.addCharge(-0.5989622639259,-0.65551960",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:2786,Energy Efficiency,energy,energy,2786,"31,1.58968679653742); Chrgfield.extern.addCharge(0.51284666666666,-0.5368448001839,0.76409901660701,1.68091218839000); Chrgfield.extern.addCharge(-0.5989622639259,-0.6555196025224,0.88290988008439,1.76339755120860); Chrgfield.extern.addCharge(0.67347739012079,-0.6438897872665,0.70591173929468,1.82289520346257); Chrgfield.extern.addCharge(0.51284666666666,-0.7965191998160,-0.7640990166070,1.73166881160999); Chrgfield.extern.addCharge(-0.5989622639259,-0.6555195917165,-0.8829099272347,1.76339645099940); Chrgfield.extern.addCharge(0.85696271562354,-0.6894742074413,-0.8222861644302,1.58968574746033); Chrgfield.extern.addCharge(0.51284666666666,-0.5368448001839,-0.7640989833929,1.68091118839000); Chrgfield.extern.addCharge(-1.7440911751517,-0.6778444082834,-0.6452880727652,1.64918354900059); Chrgfield.extern.addCharge(0.67347739012079,-0.6438897925586,-0.7059118355697,1.82289425253966); psi4.set_global_option_python('EXTERN',Chrgfield.extern). Eqm = energy('PBE0'); print('Energy: '+`Eqm`); oeprop('MULLIKEN_CHARGES',bypass_scf=True); ```. ```; [output file]. --------------------------------------------------------------------------. Memory set to 256.000 MiB by Python script. *** tstart() called on machtiani1; *** at Wed Feb 10 19:35:38 2016. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RKS Reference; 8 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: Cs. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.872736000000 0.000000000000 -1.246754000000 15.994914619560; H 0.288273000000 0.000000000000 -2.010853000000 1.007825032070; H 0.288273000000 0.000000000000 -0.482655000000 1.007825032070. Running in c1 symmetry. Rotational constants: A = 21.70025 B = 0.41373 C = 0.40599 [cm^-1]; Rotational const",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:2809,Energy Efficiency,Energy,Energy,2809,"31,1.58968679653742); Chrgfield.extern.addCharge(0.51284666666666,-0.5368448001839,0.76409901660701,1.68091218839000); Chrgfield.extern.addCharge(-0.5989622639259,-0.6555196025224,0.88290988008439,1.76339755120860); Chrgfield.extern.addCharge(0.67347739012079,-0.6438897872665,0.70591173929468,1.82289520346257); Chrgfield.extern.addCharge(0.51284666666666,-0.7965191998160,-0.7640990166070,1.73166881160999); Chrgfield.extern.addCharge(-0.5989622639259,-0.6555195917165,-0.8829099272347,1.76339645099940); Chrgfield.extern.addCharge(0.85696271562354,-0.6894742074413,-0.8222861644302,1.58968574746033); Chrgfield.extern.addCharge(0.51284666666666,-0.5368448001839,-0.7640989833929,1.68091118839000); Chrgfield.extern.addCharge(-1.7440911751517,-0.6778444082834,-0.6452880727652,1.64918354900059); Chrgfield.extern.addCharge(0.67347739012079,-0.6438897925586,-0.7059118355697,1.82289425253966); psi4.set_global_option_python('EXTERN',Chrgfield.extern). Eqm = energy('PBE0'); print('Energy: '+`Eqm`); oeprop('MULLIKEN_CHARGES',bypass_scf=True); ```. ```; [output file]. --------------------------------------------------------------------------. Memory set to 256.000 MiB by Python script. *** tstart() called on machtiani1; *** at Wed Feb 10 19:35:38 2016. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RKS Reference; 8 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: Cs. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.872736000000 0.000000000000 -1.246754000000 15.994914619560; H 0.288273000000 0.000000000000 -2.010853000000 1.007825032070; H 0.288273000000 0.000000000000 -0.482655000000 1.007825032070. Running in c1 symmetry. Rotational constants: A = 21.70025 B = 0.41373 C = 0.40599 [cm^-1]; Rotational const",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:3389,Energy Efficiency,charge,charge,3389,"413,-0.8222861644302,1.58968574746033); Chrgfield.extern.addCharge(0.51284666666666,-0.5368448001839,-0.7640989833929,1.68091118839000); Chrgfield.extern.addCharge(-1.7440911751517,-0.6778444082834,-0.6452880727652,1.64918354900059); Chrgfield.extern.addCharge(0.67347739012079,-0.6438897925586,-0.7059118355697,1.82289425253966); psi4.set_global_option_python('EXTERN',Chrgfield.extern). Eqm = energy('PBE0'); print('Energy: '+`Eqm`); oeprop('MULLIKEN_CHARGES',bypass_scf=True); ```. ```; [output file]. --------------------------------------------------------------------------. Memory set to 256.000 MiB by Python script. *** tstart() called on machtiani1; *** at Wed Feb 10 19:35:38 2016. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RKS Reference; 8 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: Cs. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.872736000000 0.000000000000 -1.246754000000 15.994914619560; H 0.288273000000 0.000000000000 -2.010853000000 1.007825032070; H 0.288273000000 0.000000000000 -0.482655000000 1.007825032070. Running in c1 symmetry. Rotational constants: A = 21.70025 B = 0.41373 C = 0.40599 [cm^-1]; Rotational constants: A = 650557.09010 B = 12403.20112 C = 12171.15193 [MHz]; Nuclear repulsion = 9.147558094236395. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 6-31G*; Number of shells: 10; Number of basis function: 19; Number of Cartesian functions: 19; Spherical Harmonics?: false; Max angular moment",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:3928,Energy Efficiency,Charge,Charge,3928,"---------. Memory set to 256.000 MiB by Python script. *** tstart() called on machtiani1; *** at Wed Feb 10 19:35:38 2016. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RKS Reference; 8 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: Cs. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.872736000000 0.000000000000 -1.246754000000 15.994914619560; H 0.288273000000 0.000000000000 -2.010853000000 1.007825032070; H 0.288273000000 0.000000000000 -0.482655000000 1.007825032070. Running in c1 symmetry. Rotational constants: A = 21.70025 B = 0.41373 C = 0.40599 [cm^-1]; Rotational constants: A = 650557.09010 B = 12403.20112 C = 12171.15193 [MHz]; Nuclear repulsion = 9.147558094236395. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 6-31G*; Number of shells: 10; Number of basis function: 19; Number of Cartesian functions: 19; Spherical Harmonics?: false; Max angular momentum: 2. ==> DFT Potential <==. => PBE0 Composite Functional <= . PBE0 Hybrid GGA Exchange-Correlation Functional. Adamo et. al., J. Chem. Phys., 110(13), 6158, 1999. Points = 5000; Deriv = 1; GGA = TRUE; Meta = FALSE. X_LRC = FALSE; X_Hybrid = TRUE; X_Alpha = 2.500000E-01; X_Omega = 0.000000E+00; C_LRC = FALSE; C_Hybrid = FALSE; C_Alpha = 0.000000E+00; C_Omega = 0.000000E+00. => Exchange Functionals <=. 0.7500 PBE_X; 0.2500 HF . => Correlation Functionals <=. 1.0000 PBE_C. => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = FLAT; Nuclear Scheme =",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:4126,Energy Efficiency,Energy,Energy,4126,"------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RKS Reference; 8 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: Cs. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.872736000000 0.000000000000 -1.246754000000 15.994914619560; H 0.288273000000 0.000000000000 -2.010853000000 1.007825032070; H 0.288273000000 0.000000000000 -0.482655000000 1.007825032070. Running in c1 symmetry. Rotational constants: A = 21.70025 B = 0.41373 C = 0.40599 [cm^-1]; Rotational constants: A = 650557.09010 B = 12403.20112 C = 12171.15193 [MHz]; Nuclear repulsion = 9.147558094236395. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 6-31G*; Number of shells: 10; Number of basis function: 19; Number of Cartesian functions: 19; Spherical Harmonics?: false; Max angular momentum: 2. ==> DFT Potential <==. => PBE0 Composite Functional <= . PBE0 Hybrid GGA Exchange-Correlation Functional. Adamo et. al., J. Chem. Phys., 110(13), 6158, 1999. Points = 5000; Deriv = 1; GGA = TRUE; Meta = FALSE. X_LRC = FALSE; X_Hybrid = TRUE; X_Alpha = 2.500000E-01; X_Omega = 0.000000E+00; C_LRC = FALSE; C_Hybrid = FALSE; C_Alpha = 0.000000E+00; C_Omega = 0.000000E+00. => Exchange Functionals <=. 0.7500 PBE_X; 0.2500 HF . => Correlation Functionals <=. 1.0000 PBE_C. => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = FLAT; Nuclear Scheme = TREUTLER. BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 65565; Total Blocks = 69; Max Points = 4576; Max Functions = 19.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:5945,Energy Efficiency,Charge,Charges,5945,lear Scheme = TREUTLER. BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 65565; Total Blocks = 69; Max Points = 4576; Max Functions = 19. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 19 19 0 0 0 0; -------------------------------------------------------; Total 19 19 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 8; Integrals threads: 8; Memory (MB): 183; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: ; Number of shells: 42; Number of basis function: 131; Number of Cartesian functions: 131; Spherical Harmonics?: false; Max angular momentum: 3. => External Potential Field: <= . > Charges [a.u.] < . Z x y z; -1.30623 -0.64897 0.00000 1.10730; 0.35181 -0.75342 -0.00000 1.26252; 0.86636 -0.77880 0.13229 1.13268; -1.30623 -0.90864 -0.00000 1.15806; 0.10177 -0.80418 0.00000 1.00285; 0.86636 -0.77880 -0.13229 1.13268; 0.51285 -0.79652 0.76410 1.73167; -1.74409 -0.67784 0.64529 1.64918; 0.85696 -0.68947 0.82229 1.58969; 0.51285 -0.53684 0.76410 1.68091; -0.59896 -0.65552 0.88291 1.76340; 0.67348 -0.64389 0.70591 1.82290; 0.51285 -0.79652 -0.76410 1.73167; -0.59896 -0.65552 -0.88291 1.76340; 0.85696 -0.68947 -0.82229 1.58969; 0.51285 -0.53684 -0.76410 1.68091; -1.74409 -0.67784 -0.64529 1.64918; 0.67348 -0.64389 -0.70591 1.82289. Old nuclear repulsion = 9.147558094236395; Additional nuclear repulsion = -0.220306557236836; Total nuclear repulsion = 8.927251536999558. Minimum eigenvalue in the overlap matrix is 2.2467595935E-02.; Using Symmetric Orthogonalization.; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:6936,Energy Efficiency,Energy,Energy,6936,"harges [a.u.] < . Z x y z; -1.30623 -0.64897 0.00000 1.10730; 0.35181 -0.75342 -0.00000 1.26252; 0.86636 -0.77880 0.13229 1.13268; -1.30623 -0.90864 -0.00000 1.15806; 0.10177 -0.80418 0.00000 1.00285; 0.86636 -0.77880 -0.13229 1.13268; 0.51285 -0.79652 0.76410 1.73167; -1.74409 -0.67784 0.64529 1.64918; 0.85696 -0.68947 0.82229 1.58969; 0.51285 -0.53684 0.76410 1.68091; -0.59896 -0.65552 0.88291 1.76340; 0.67348 -0.64389 0.70591 1.82290; 0.51285 -0.79652 -0.76410 1.73167; -0.59896 -0.65552 -0.88291 1.76340; 0.85696 -0.68947 -0.82229 1.58969; 0.51285 -0.53684 -0.76410 1.68091; -1.74409 -0.67784 -0.64529 1.64918; 0.67348 -0.64389 -0.70591 1.82289. Old nuclear repulsion = 9.147558094236395; Additional nuclear repulsion = -0.220306557236836; Total nuclear repulsion = 8.927251536999558. Minimum eigenvalue in the overlap matrix is 2.2467595935E-02.; Using Symmetric Orthogonalization.; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -76.25426884215133 -7.62543e+01 8.25166e-02 ; @DF-RKS iter 1: -76.28225054480332 -2.79817e-02 2.00561e-02 ; @DF-RKS iter 2: -76.24994640870842 3.23041e-02 2.57661e-02 DIIS; @DF-RKS iter 3: -76.33537346510494 -8.54271e-02 5.64978e-04 DIIS; @DF-RKS iter 4: -76.33541666733151 -4.32022e-05 7.02182e-05 DIIS; @DF-RKS iter 5: -76.33541734518556 -6.77854e-07 7.73497e-06 DIIS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.335417355952",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:7890,Energy Efficiency,Energy,Energy,7890,"atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -76.25426884215133 -7.62543e+01 8.25166e-02 ; @DF-RKS iter 1: -76.28225054480332 -2.79817e-02 2.00561e-02 ; @DF-RKS iter 2: -76.24994640870842 3.23041e-02 2.57661e-02 DIIS; @DF-RKS iter 3: -76.33537346510494 -8.54271e-02 5.64978e-04 DIIS; @DF-RKS iter 4: -76.33541666733151 -4.32022e-05 7.02182e-05 DIIS; @DF-RKS iter 5: -76.33541734518556 -6.77854e-07 7.73497e-06 DIIS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:7922,Energy Efficiency,Energy,Energy,7922,"ions <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -76.25426884215133 -7.62543e+01 8.25166e-02 ; @DF-RKS iter 1: -76.28225054480332 -2.79817e-02 2.00561e-02 ; @DF-RKS iter 2: -76.24994640870842 3.23041e-02 2.57661e-02 DIIS; @DF-RKS iter 3: -76.33537346510494 -8.54271e-02 5.64978e-04 DIIS; @DF-RKS iter 4: -76.33541666733151 -4.32022e-05 7.02182e-05 DIIS; @DF-RKS iter 5: -76.33541734518556 -6.77854e-07 7.73497e-06 DIIS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module tim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:7986,Energy Efficiency,Energy,Energy,7986,"6.25426884215133 -7.62543e+01 8.25166e-02 ; @DF-RKS iter 1: -76.28225054480332 -2.79817e-02 2.00561e-02 ; @DF-RKS iter 2: -76.24994640870842 3.23041e-02 2.57661e-02 DIIS; @DF-RKS iter 3: -76.33537346510494 -8.54271e-02 5.64978e-04 DIIS; @DF-RKS iter 4: -76.33541666733151 -4.32022e-05 7.02182e-05 DIIS; @DF-RKS iter 5: -76.33541734518556 -6.77854e-07 7.73497e-06 DIIS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module time:; user time = 23.90 seconds = 0.40 minutes; system time = 1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:8028,Energy Efficiency,Energy,Energy,8028,"e-02 ; @DF-RKS iter 1: -76.28225054480332 -2.79817e-02 2.00561e-02 ; @DF-RKS iter 2: -76.24994640870842 3.23041e-02 2.57661e-02 DIIS; @DF-RKS iter 3: -76.33537346510494 -8.54271e-02 5.64978e-04 DIIS; @DF-RKS iter 4: -76.33541666733151 -4.32022e-05 7.02182e-05 DIIS; @DF-RKS iter 5: -76.33541734518556 -6.77854e-07 7.73497e-06 DIIS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:8073,Energy Efficiency,Energy,Energy,8073,".79817e-02 2.00561e-02 ; @DF-RKS iter 2: -76.24994640870842 3.23041e-02 2.57661e-02 DIIS; @DF-RKS iter 3: -76.33537346510494 -8.54271e-02 5.64978e-04 DIIS; @DF-RKS iter 4: -76.33541666733151 -4.32022e-05 7.02182e-05 DIIS; @DF-RKS iter 5: -76.33541734518556 -6.77854e-07 7.73497e-06 DIIS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; Total time:; us",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:8128,Energy Efficiency,Energy,Energy,8128,"4640870842 3.23041e-02 2.57661e-02 DIIS; @DF-RKS iter 3: -76.33537346510494 -8.54271e-02 5.64978e-04 DIIS; @DF-RKS iter 4: -76.33541666733151 -4.32022e-05 7.02182e-05 DIIS; @DF-RKS iter 5: -76.33541734518556 -6.77854e-07 7.73497e-06 DIIS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; Total time:; user time = 23.90 seconds = 0.40 minutes; system ti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:8179,Energy Efficiency,Energy,Energy,8179," 3: -76.33537346510494 -8.54271e-02 5.64978e-04 DIIS; @DF-RKS iter 4: -76.33541666733151 -4.32022e-05 7.02182e-05 DIIS; @DF-RKS iter 5: -76.33541734518556 -6.77854e-07 7.73497e-06 DIIS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; Total time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:8225,Energy Efficiency,Energy,Energy,8225,"DIIS; @DF-RKS iter 4: -76.33541666733151 -4.32022e-05 7.02182e-05 DIIS; @DF-RKS iter 5: -76.33541734518556 -6.77854e-07 7.73497e-06 DIIS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; Total time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; [Error prints before oeprop",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:8258,Energy Efficiency,Energy,Energy,8258,"1 -4.32022e-05 7.02182e-05 DIIS; @DF-RKS iter 5: -76.33541734518556 -6.77854e-07 7.73497e-06 DIIS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; Total time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; [Error prints before oeprop]; ```. The other crash I saw was just t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:8293,Energy Efficiency,Energy,Energy,8293,"F-RKS iter 5: -76.33541734518556 -6.77854e-07 7.73497e-06 DIIS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; Total time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; [Error prints before oeprop]; ```. The other crash I saw was just the input/output from the conda inst",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:32,Modifiability,variab,variable,32,"I leave most of the environment variable stuff for PSI4 in the hands of conda. I have a modified/compiled version of PSI4 on just one of my machines, but PSI4 crashes on all of them for one electron properties. I saw the crash while I was running a testing script, so I know that it printed correct results for HF, PBE0, gradient, and PBE0+point-charges calculations. The only test of mine that failed involved recovering charges from a QM calculation. ```; [input file]. set_num_threads(8); memory 256 mb; set reference rhf; set basis 6-31G*; set guess sad; set scf_type df. psi4_io.set_specific_path(32,'./'); psi4_io.set_specific_retention(32,True); psi4_io.set_specific_path(180,'./'); psi4_io.set_specific_retention(180,True). molecule LICHM_0 {; 0 1; O 0.87273600000000 0.00000000000000 -1.2467539999999; H 0.28827300000000 0.00000000000000 -2.0108530000000; H 0.28827300000000 0.00000000000000 -0.4826550000000; symmetry c1; no_reorient; no_com; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1.3062266666666,-0.6489658001839,0.00000001660701,1.10730418839000); Chrgfield.extern.addCharge(0.35180666666666,-0.7534241883900,-0.0000000536004,1.26252019981607); Chrgfield.extern.addCharge(0.86636000000000,-0.7788030060160,0.13229430272998,1.13268305579077); Chrgfield.extern.addCharge(-1.3062266666666,-0.9086401998160,-0.0000000166070,1.15806181160999); Chrgfield.extern.addCharge(0.10176666666666,-0.8041818116099,0.00000005360047,1.00284580018392); Chrgfield.extern.addCharge(0.86636000000000,-0.7788029939839,-0.1322943027299,1.13268294420922); Chrgfield.extern.addCharge(0.51284666666666,-0.7965191998160,0.76409898339298,1.73166981160999); Chrgfield.extern.addCharge(-1.7440911751517,-0.6778443974775,0.64528811991560,1.64918444879139); Chrgfield.extern.addCharge(0.85696271562354,-0.6894742127334,0.82228626070531,1.58968679653742); Chrgfield.extern.addCharge(0.51284666666666,-0.5368448001839,0.76409901660701,1.68091218839000); Chrgfield.extern.addCharge(-0.5989622639259,-0.65551960",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:5664,Performance,Cache,Cache,5664,rid = TRUE; X_Alpha = 2.500000E-01; X_Omega = 0.000000E+00; C_LRC = FALSE; C_Hybrid = FALSE; C_Alpha = 0.000000E+00; C_Omega = 0.000000E+00. => Exchange Functionals <=. 0.7500 PBE_X; 0.2500 HF . => Correlation Functionals <=. 1.0000 PBE_C. => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = FLAT; Nuclear Scheme = TREUTLER. BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 65565; Total Blocks = 69; Max Points = 4576; Max Functions = 19. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 19 19 0 0 0 0; -------------------------------------------------------; Total 19 19 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 8; Integrals threads: 8; Memory (MB): 183; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: ; Number of shells: 42; Number of basis function: 131; Number of Cartesian functions: 131; Spherical Harmonics?: false; Max angular momentum: 3. => External Potential Field: <= . > Charges [a.u.] < . Z x y z; -1.30623 -0.64897 0.00000 1.10730; 0.35181 -0.75342 -0.00000 1.26252; 0.86636 -0.77880 0.13229 1.13268; -1.30623 -0.90864 -0.00000 1.15806; 0.10177 -0.80418 0.00000 1.00285; 0.86636 -0.77880 -0.13229 1.13268; 0.51285 -0.79652 0.76410 1.73167; -1.74409 -0.67784 0.64529 1.64918; 0.85696 -0.68947 0.82229 1.58969; 0.51285 -0.53684 0.76410 1.68091; -0.59896 -0.65552 0.88291 1.76340; 0.67348 -0.64389 0.70591 1.82290; 0.51285 -0.79652 -0.76410 1.73167; -0.59896 -0.65552 -0.88291 1.76340; 0.85696 -0.68947 -0.82229 1.58969; 0.51285 -0.53684 -0.76410 1.68091; -1.74409 -0.67784 -0.64529 1.64918; 0.67348 -0.64389 -0.70591 1.82289. Old nuclear repulsion = 9.147,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:411,Safety,recover,recovering,411,"I leave most of the environment variable stuff for PSI4 in the hands of conda. I have a modified/compiled version of PSI4 on just one of my machines, but PSI4 crashes on all of them for one electron properties. I saw the crash while I was running a testing script, so I know that it printed correct results for HF, PBE0, gradient, and PBE0+point-charges calculations. The only test of mine that failed involved recovering charges from a QM calculation. ```; [input file]. set_num_threads(8); memory 256 mb; set reference rhf; set basis 6-31G*; set guess sad; set scf_type df. psi4_io.set_specific_path(32,'./'); psi4_io.set_specific_retention(32,True); psi4_io.set_specific_path(180,'./'); psi4_io.set_specific_retention(180,True). molecule LICHM_0 {; 0 1; O 0.87273600000000 0.00000000000000 -1.2467539999999; H 0.28827300000000 0.00000000000000 -2.0108530000000; H 0.28827300000000 0.00000000000000 -0.4826550000000; symmetry c1; no_reorient; no_com; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1.3062266666666,-0.6489658001839,0.00000001660701,1.10730418839000); Chrgfield.extern.addCharge(0.35180666666666,-0.7534241883900,-0.0000000536004,1.26252019981607); Chrgfield.extern.addCharge(0.86636000000000,-0.7788030060160,0.13229430272998,1.13268305579077); Chrgfield.extern.addCharge(-1.3062266666666,-0.9086401998160,-0.0000000166070,1.15806181160999); Chrgfield.extern.addCharge(0.10176666666666,-0.8041818116099,0.00000005360047,1.00284580018392); Chrgfield.extern.addCharge(0.86636000000000,-0.7788029939839,-0.1322943027299,1.13268294420922); Chrgfield.extern.addCharge(0.51284666666666,-0.7965191998160,0.76409898339298,1.73166981160999); Chrgfield.extern.addCharge(-1.7440911751517,-0.6778443974775,0.64528811991560,1.64918444879139); Chrgfield.extern.addCharge(0.85696271562354,-0.6894742127334,0.82228626070531,1.58968679653742); Chrgfield.extern.addCharge(0.51284666666666,-0.5368448001839,0.76409901660701,1.68091218839000); Chrgfield.extern.addCharge(-0.5989622639259,-0.65551960",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:249,Testability,test,testing,249,"I leave most of the environment variable stuff for PSI4 in the hands of conda. I have a modified/compiled version of PSI4 on just one of my machines, but PSI4 crashes on all of them for one electron properties. I saw the crash while I was running a testing script, so I know that it printed correct results for HF, PBE0, gradient, and PBE0+point-charges calculations. The only test of mine that failed involved recovering charges from a QM calculation. ```; [input file]. set_num_threads(8); memory 256 mb; set reference rhf; set basis 6-31G*; set guess sad; set scf_type df. psi4_io.set_specific_path(32,'./'); psi4_io.set_specific_retention(32,True); psi4_io.set_specific_path(180,'./'); psi4_io.set_specific_retention(180,True). molecule LICHM_0 {; 0 1; O 0.87273600000000 0.00000000000000 -1.2467539999999; H 0.28827300000000 0.00000000000000 -2.0108530000000; H 0.28827300000000 0.00000000000000 -0.4826550000000; symmetry c1; no_reorient; no_com; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1.3062266666666,-0.6489658001839,0.00000001660701,1.10730418839000); Chrgfield.extern.addCharge(0.35180666666666,-0.7534241883900,-0.0000000536004,1.26252019981607); Chrgfield.extern.addCharge(0.86636000000000,-0.7788030060160,0.13229430272998,1.13268305579077); Chrgfield.extern.addCharge(-1.3062266666666,-0.9086401998160,-0.0000000166070,1.15806181160999); Chrgfield.extern.addCharge(0.10176666666666,-0.8041818116099,0.00000005360047,1.00284580018392); Chrgfield.extern.addCharge(0.86636000000000,-0.7788029939839,-0.1322943027299,1.13268294420922); Chrgfield.extern.addCharge(0.51284666666666,-0.7965191998160,0.76409898339298,1.73166981160999); Chrgfield.extern.addCharge(-1.7440911751517,-0.6778443974775,0.64528811991560,1.64918444879139); Chrgfield.extern.addCharge(0.85696271562354,-0.6894742127334,0.82228626070531,1.58968679653742); Chrgfield.extern.addCharge(0.51284666666666,-0.5368448001839,0.76409901660701,1.68091218839000); Chrgfield.extern.addCharge(-0.5989622639259,-0.65551960",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:377,Testability,test,test,377,"I leave most of the environment variable stuff for PSI4 in the hands of conda. I have a modified/compiled version of PSI4 on just one of my machines, but PSI4 crashes on all of them for one electron properties. I saw the crash while I was running a testing script, so I know that it printed correct results for HF, PBE0, gradient, and PBE0+point-charges calculations. The only test of mine that failed involved recovering charges from a QM calculation. ```; [input file]. set_num_threads(8); memory 256 mb; set reference rhf; set basis 6-31G*; set guess sad; set scf_type df. psi4_io.set_specific_path(32,'./'); psi4_io.set_specific_retention(32,True); psi4_io.set_specific_path(180,'./'); psi4_io.set_specific_retention(180,True). molecule LICHM_0 {; 0 1; O 0.87273600000000 0.00000000000000 -1.2467539999999; H 0.28827300000000 0.00000000000000 -2.0108530000000; H 0.28827300000000 0.00000000000000 -0.4826550000000; symmetry c1; no_reorient; no_com; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1.3062266666666,-0.6489658001839,0.00000001660701,1.10730418839000); Chrgfield.extern.addCharge(0.35180666666666,-0.7534241883900,-0.0000000536004,1.26252019981607); Chrgfield.extern.addCharge(0.86636000000000,-0.7788030060160,0.13229430272998,1.13268305579077); Chrgfield.extern.addCharge(-1.3062266666666,-0.9086401998160,-0.0000000166070,1.15806181160999); Chrgfield.extern.addCharge(0.10176666666666,-0.8041818116099,0.00000005360047,1.00284580018392); Chrgfield.extern.addCharge(0.86636000000000,-0.7788029939839,-0.1322943027299,1.13268294420922); Chrgfield.extern.addCharge(0.51284666666666,-0.7965191998160,0.76409898339298,1.73166981160999); Chrgfield.extern.addCharge(-1.7440911751517,-0.6778443974775,0.64528811991560,1.64918444879139); Chrgfield.extern.addCharge(0.85696271562354,-0.6894742127334,0.82228626070531,1.58968679653742); Chrgfield.extern.addCharge(0.51284666666666,-0.5368448001839,0.76409901660701,1.68091218839000); Chrgfield.extern.addCharge(-0.5989622639259,-0.65551960",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182660528:9292,Testability,test,test,9292,"IS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; Total time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; [Error prints before oeprop]; ```. The other crash I saw was just the input/output from the conda install test. Let me know if you need more information.; -kratz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528
https://github.com/psi4/psi4/issues/240#issuecomment-182667180:172,Deployability,install,installed,172,"We're being a little more explicit about information-passing, and that influences oeprop. Change your ending lines to the below and all should be well. I'd say look at the installed samples, but I just remembered those didn't get updated until `0.4.3` or so, and our conda build machine is kaput so I can't update them for you. Sorry about that. I'll look into that SAPT install problem. ```; Eqm, wfn = energy('PBE0', return_wfn=True); print('Energy: '+`Eqm`); oeprop(wfn, 'MULLIKEN_CHARGES'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182667180
https://github.com/psi4/psi4/issues/240#issuecomment-182667180:230,Deployability,update,updated,230,"We're being a little more explicit about information-passing, and that influences oeprop. Change your ending lines to the below and all should be well. I'd say look at the installed samples, but I just remembered those didn't get updated until `0.4.3` or so, and our conda build machine is kaput so I can't update them for you. Sorry about that. I'll look into that SAPT install problem. ```; Eqm, wfn = energy('PBE0', return_wfn=True); print('Energy: '+`Eqm`); oeprop(wfn, 'MULLIKEN_CHARGES'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182667180
https://github.com/psi4/psi4/issues/240#issuecomment-182667180:307,Deployability,update,update,307,"We're being a little more explicit about information-passing, and that influences oeprop. Change your ending lines to the below and all should be well. I'd say look at the installed samples, but I just remembered those didn't get updated until `0.4.3` or so, and our conda build machine is kaput so I can't update them for you. Sorry about that. I'll look into that SAPT install problem. ```; Eqm, wfn = energy('PBE0', return_wfn=True); print('Energy: '+`Eqm`); oeprop(wfn, 'MULLIKEN_CHARGES'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182667180
https://github.com/psi4/psi4/issues/240#issuecomment-182667180:371,Deployability,install,install,371,"We're being a little more explicit about information-passing, and that influences oeprop. Change your ending lines to the below and all should be well. I'd say look at the installed samples, but I just remembered those didn't get updated until `0.4.3` or so, and our conda build machine is kaput so I can't update them for you. Sorry about that. I'll look into that SAPT install problem. ```; Eqm, wfn = energy('PBE0', return_wfn=True); print('Energy: '+`Eqm`); oeprop(wfn, 'MULLIKEN_CHARGES'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182667180
https://github.com/psi4/psi4/issues/240#issuecomment-182667180:404,Energy Efficiency,energy,energy,404,"We're being a little more explicit about information-passing, and that influences oeprop. Change your ending lines to the below and all should be well. I'd say look at the installed samples, but I just remembered those didn't get updated until `0.4.3` or so, and our conda build machine is kaput so I can't update them for you. Sorry about that. I'll look into that SAPT install problem. ```; Eqm, wfn = energy('PBE0', return_wfn=True); print('Energy: '+`Eqm`); oeprop(wfn, 'MULLIKEN_CHARGES'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182667180
https://github.com/psi4/psi4/issues/240#issuecomment-182667180:444,Energy Efficiency,Energy,Energy,444,"We're being a little more explicit about information-passing, and that influences oeprop. Change your ending lines to the below and all should be well. I'd say look at the installed samples, but I just remembered those didn't get updated until `0.4.3` or so, and our conda build machine is kaput so I can't update them for you. Sorry about that. I'll look into that SAPT install problem. ```; Eqm, wfn = energy('PBE0', return_wfn=True); print('Energy: '+`Eqm`); oeprop(wfn, 'MULLIKEN_CHARGES'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182667180
https://github.com/psi4/psi4/issues/240#issuecomment-182669910:215,Deployability,install,install,215,"By the way, you're quite right to leave the PSIDATADIR business to conda. I only mentioned it because having that set is a way to lead the conda binary astray. I didn't have any problem with the SAPT test case upon install onto a fresh machine. Closing, but do reopen or start another issue if you've any further problems. Or for just questions about the new information-passing, try out forum.psicode.org . Thanks for helping us debug.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182669910
https://github.com/psi4/psi4/issues/240#issuecomment-182669910:200,Testability,test,test,200,"By the way, you're quite right to leave the PSIDATADIR business to conda. I only mentioned it because having that set is a way to lead the conda binary astray. I didn't have any problem with the SAPT test case upon install onto a fresh machine. Closing, but do reopen or start another issue if you've any further problems. Or for just questions about the new information-passing, try out forum.psicode.org . Thanks for helping us debug.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182669910
https://github.com/psi4/psi4/issues/240#issuecomment-182670019:15,Deployability,update,update,15,"Thanks, I will update my input file writer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182670019
https://github.com/psi4/psi4/issues/240#issuecomment-182755475:88,Deployability,release,release,88,"Is there a 0.4.0 already out? I can't see one tagged here... When you make a new stable release, I'll update the Fedora packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182755475
https://github.com/psi4/psi4/issues/240#issuecomment-182755475:102,Deployability,update,update,102,"Is there a 0.4.0 already out? I can't see one tagged here... When you make a new stable release, I'll update the Fedora packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182755475
https://github.com/psi4/psi4/issues/240#issuecomment-182759327:40,Deployability,release,release,40,We don't mean `0.4.0` as the new stable release. That will be `1.0.0`. The `0.4` tag (only on private at the moment) indicates some considerable data-passing changes. The sole public face of `0.4` at the moment is at https://anaconda.org/psi4/psi4/files .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182759327
https://github.com/psi4/psi4/issues/243#issuecomment-217271211:106,Testability,test,test,106,May be [fixed](https://github.com/Homebrew/homebrew-core/pull/516). @bennybp Do you have an easy setup to test this out?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/243#issuecomment-217271211
https://github.com/psi4/psi4/issues/243#issuecomment-217272738:89,Testability,test,test,89,"No, I don't have a mac. I had been waiting for the official 1.61 to come out to actually test it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/243#issuecomment-217272738
https://github.com/psi4/psi4/issues/243#issuecomment-217522431:83,Testability,test,tests,83,"I was able to build and link against the latest homebrew boost 1.60.0, running the tests now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/243#issuecomment-217522431
https://github.com/psi4/psi4/issues/243#issuecomment-217971287:80,Testability,test,tests,80,Sorry I just realized I never followed up on this. On my mac all of the regular tests pass except 86 dcft-grad1 and 93 dcft4 both timed out.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/243#issuecomment-217971287
https://github.com/psi4/psi4/issues/244#issuecomment-183423323:50,Energy Efficiency,Energy,Energy,50,"This is very strange! Yes, the CD-MP2 Correlation Energy is positive,; which is definitely wrong. I can't imagine why seemingly innocent; changes to the input file would change the result, unless there is; just a memory leak or something. Valgrind might be a good idea. On Fri, Feb 12, 2016 at 12:05 PM, Lori A. Burns notifications@github.com; wrote:. > I'm finding non-deterministic energies for cd-mp2, depending on amount of; > extraneous stuff commented in the input file. For example, the below works; > as is, but gives a different answer when the unused molecules are commented; > out (not only molecules, but irrelevant keywords can cause the problem,; > too). The problem shows up in the final output as correlation energy has; > wrong sign and not matching sum of aa, ab, bb contributions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.945130559",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323
https://github.com/psi4/psi4/issues/244#issuecomment-183423323:725,Energy Efficiency,energy,energy,725,"This is very strange! Yes, the CD-MP2 Correlation Energy is positive,; which is definitely wrong. I can't imagine why seemingly innocent; changes to the input file would change the result, unless there is; just a memory leak or something. Valgrind might be a good idea. On Fri, Feb 12, 2016 at 12:05 PM, Lori A. Burns notifications@github.com; wrote:. > I'm finding non-deterministic energies for cd-mp2, depending on amount of; > extraneous stuff commented in the input file. For example, the below works; > as is, but gives a different answer when the unused molecules are commented; > out (not only molecules, but irrelevant keywords can cause the problem,; > too). The problem shows up in the final output as correlation energy has; > wrong sign and not matching sum of aa, ab, bb contributions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.945130559",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323
https://github.com/psi4/psi4/issues/244#issuecomment-183423323:1615,Energy Efficiency,energy,energy,1615," the unused molecules are commented; > out (not only molecules, but irrelevant keywords can cause the problem,; > too). The problem shows up in the final output as correlation energy has; > wrong sign and not matching sum of aa, ab, bb contributions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914741; > REF Energy (a.u.) : -25.94513055914741; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; > CD-MP2 Correlation Energy (a.u.) : 0.02352520344587; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323
https://github.com/psi4/psi4/issues/244#issuecomment-183423323:1719,Energy Efficiency,energy,energy,1719," not matching sum of aa, ab, bb contributions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914741; > REF Energy (a.u.) : -25.94513055914741; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; > CD-MP2 Correlation Energy (a.u.) : 0.02352520344587; > CD-MP2 Total Energy (a.u.) : -25.92160535570154; > =======================================================================; > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https:/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323
https://github.com/psi4/psi4/issues/244#issuecomment-183423323:1791,Energy Efficiency,energy,energy,1791," not matching sum of aa, ab, bb contributions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914741; > REF Energy (a.u.) : -25.94513055914741; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; > CD-MP2 Correlation Energy (a.u.) : 0.02352520344587; > CD-MP2 Total Energy (a.u.) : -25.92160535570154; > =======================================================================; > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https:/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323
https://github.com/psi4/psi4/issues/244#issuecomment-183423323:1930,Energy Efficiency,Energy,Energy,1930,"utions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914741; > REF Energy (a.u.) : -25.94513055914741; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; > CD-MP2 Correlation Energy (a.u.) : 0.02352520344587; > CD-MP2 Total Energy (a.u.) : -25.92160535570154; > =======================================================================; > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/244.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323
https://github.com/psi4/psi4/issues/244#issuecomment-183423323:1972,Energy Efficiency,Energy,Energy,1972,"utions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914741; > REF Energy (a.u.) : -25.94513055914741; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; > CD-MP2 Correlation Energy (a.u.) : 0.02352520344587; > CD-MP2 Total Energy (a.u.) : -25.92160535570154; > =======================================================================; > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/244.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323
https://github.com/psi4/psi4/issues/244#issuecomment-183423323:2014,Energy Efficiency,Energy,Energy,2014,"utions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914741; > REF Energy (a.u.) : -25.94513055914741; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; > CD-MP2 Correlation Energy (a.u.) : 0.02352520344587; > CD-MP2 Total Energy (a.u.) : -25.92160535570154; > =======================================================================; > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/244.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323
https://github.com/psi4/psi4/issues/244#issuecomment-183423323:2236,Energy Efficiency,Energy,Energy,2236,"utions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914741; > REF Energy (a.u.) : -25.94513055914741; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; > CD-MP2 Correlation Energy (a.u.) : 0.02352520344587; > CD-MP2 Total Energy (a.u.) : -25.92160535570154; > =======================================================================; > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/244.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323
https://github.com/psi4/psi4/issues/244#issuecomment-183423323:2294,Energy Efficiency,Energy,Energy,2294,"utions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914741; > REF Energy (a.u.) : -25.94513055914741; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; > CD-MP2 Correlation Energy (a.u.) : 0.02352520344587; > CD-MP2 Total Energy (a.u.) : -25.92160535570154; > =======================================================================; > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/244.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323
https://github.com/psi4/psi4/issues/244#issuecomment-183423323:2347,Energy Efficiency,Energy,Energy,2347,"utions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914741; > REF Energy (a.u.) : -25.94513055914741; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; > CD-MP2 Correlation Energy (a.u.) : 0.02352520344587; > CD-MP2 Total Energy (a.u.) : -25.92160535570154; > =======================================================================; > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/244.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323
https://github.com/psi4/psi4/issues/244#issuecomment-183423323:2402,Energy Efficiency,Energy,Energy,2402,"utions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914741; > REF Energy (a.u.) : -25.94513055914741; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; > CD-MP2 Correlation Energy (a.u.) : 0.02352520344587; > CD-MP2 Total Energy (a.u.) : -25.92160535570154; > =======================================================================; > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/244.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323
https://github.com/psi4/psi4/issues/244#issuecomment-183423323:2458,Energy Efficiency,Energy,Energy,2458,"utions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914741; > REF Energy (a.u.) : -25.94513055914741; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; > CD-MP2 Correlation Energy (a.u.) : 0.02352520344587; > CD-MP2 Total Energy (a.u.) : -25.92160535570154; > =======================================================================; > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/244.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323
https://github.com/psi4/psi4/issues/244#issuecomment-183423323:2515,Energy Efficiency,Energy,Energy,2515,"utions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914741; > REF Energy (a.u.) : -25.94513055914741; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; > CD-MP2 Correlation Energy (a.u.) : 0.02352520344587; > CD-MP2 Total Energy (a.u.) : -25.92160535570154; > =======================================================================; > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/244.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323
https://github.com/psi4/psi4/issues/244#issuecomment-183423323:2564,Energy Efficiency,Energy,Energy,2564,"utions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914741; > REF Energy (a.u.) : -25.94513055914741; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; > CD-MP2 Correlation Energy (a.u.) : 0.02352520344587; > CD-MP2 Total Energy (a.u.) : -25.92160535570154; > =======================================================================; > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/244.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323
https://github.com/psi4/psi4/issues/244#issuecomment-183423323:405,Integrability,depend,depending,405,"This is very strange! Yes, the CD-MP2 Correlation Energy is positive,; which is definitely wrong. I can't imagine why seemingly innocent; changes to the input file would change the result, unless there is; just a memory leak or something. Valgrind might be a good idea. On Fri, Feb 12, 2016 at 12:05 PM, Lori A. Burns notifications@github.com; wrote:. > I'm finding non-deterministic energies for cd-mp2, depending on amount of; > extraneous stuff commented in the input file. For example, the below works; > as is, but gives a different answer when the unused molecules are commented; > out (not only molecules, but irrelevant keywords can cause the problem,; > too). The problem shows up in the final output as correlation energy has; > wrong sign and not matching sum of aa, ab, bb contributions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.945130559",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323
https://github.com/psi4/psi4/issues/244#issuecomment-183423323:1755,Testability,TEST,TEST,1755," not matching sum of aa, ab, bb contributions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914741; > REF Energy (a.u.) : -25.94513055914741; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; > CD-MP2 Correlation Energy (a.u.) : 0.02352520344587; > CD-MP2 Total Energy (a.u.) : -25.92160535570154; > =======================================================================; > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https:/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323
https://github.com/psi4/psi4/issues/244#issuecomment-183508678:120,Energy Efficiency,energy,energy,120,"I do not have the latest revision. However, with the revision I have (Psi4 0.3.431) I removed ""set mp2_type cd"" and use energy('cd-mp2'), then I get . CD-MP2 Correlation Energy (a.u.) : -0.05840983042460. Hence, with my version it appears to be okay. @loriab @CDSherrill",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183508678
https://github.com/psi4/psi4/issues/244#issuecomment-183508678:170,Energy Efficiency,Energy,Energy,170,"I do not have the latest revision. However, with the revision I have (Psi4 0.3.431) I removed ""set mp2_type cd"" and use energy('cd-mp2'), then I get . CD-MP2 Correlation Energy (a.u.) : -0.05840983042460. Hence, with my version it appears to be okay. @loriab @CDSherrill",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183508678
https://github.com/psi4/psi4/issues/244#issuecomment-183509137:44,Energy Efficiency,energy,energy,44,and all results are:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914802; REF Energy (a.u.) : -25.94513055914802; Alpha-Alpha Contribution (a.u.) : -0.00171224398409; Alpha-Beta Contribution (a.u.) : -0.05664222782838; Beta-Beta Contribution (a.u.) : -0.00005535861213; Scaled_SS Correlation Energy (a.u.): -0.00058920086541; Scaled_OS Correlation Energy (a.u.): -0.06797067339406; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043340749; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545532492; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153971737; CD-MP2 Correlation Energy (a.u.) : -0.05840983042460; CD-MP2 Total Energy (a.u.) : -26.00354038957262; =======================================================================; ```. @loriab @CDSherrill,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183509137
https://github.com/psi4/psi4/issues/244#issuecomment-183509137:179,Energy Efficiency,Energy,Energy,179,and all results are:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914802; REF Energy (a.u.) : -25.94513055914802; Alpha-Alpha Contribution (a.u.) : -0.00171224398409; Alpha-Beta Contribution (a.u.) : -0.05664222782838; Beta-Beta Contribution (a.u.) : -0.00005535861213; Scaled_SS Correlation Energy (a.u.): -0.00058920086541; Scaled_OS Correlation Energy (a.u.): -0.06797067339406; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043340749; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545532492; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153971737; CD-MP2 Correlation Energy (a.u.) : -0.05840983042460; CD-MP2 Total Energy (a.u.) : -26.00354038957262; =======================================================================; ```. @loriab @CDSherrill,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183509137
https://github.com/psi4/psi4/issues/244#issuecomment-183509137:219,Energy Efficiency,Energy,Energy,219,and all results are:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914802; REF Energy (a.u.) : -25.94513055914802; Alpha-Alpha Contribution (a.u.) : -0.00171224398409; Alpha-Beta Contribution (a.u.) : -0.05664222782838; Beta-Beta Contribution (a.u.) : -0.00005535861213; Scaled_SS Correlation Energy (a.u.): -0.00058920086541; Scaled_OS Correlation Energy (a.u.): -0.06797067339406; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043340749; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545532492; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153971737; CD-MP2 Correlation Energy (a.u.) : -0.05840983042460; CD-MP2 Total Energy (a.u.) : -26.00354038957262; =======================================================================; ```. @loriab @CDSherrill,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183509137
https://github.com/psi4/psi4/issues/244#issuecomment-183509137:259,Energy Efficiency,Energy,Energy,259,and all results are:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914802; REF Energy (a.u.) : -25.94513055914802; Alpha-Alpha Contribution (a.u.) : -0.00171224398409; Alpha-Beta Contribution (a.u.) : -0.05664222782838; Beta-Beta Contribution (a.u.) : -0.00005535861213; Scaled_SS Correlation Energy (a.u.): -0.00058920086541; Scaled_OS Correlation Energy (a.u.): -0.06797067339406; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043340749; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545532492; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153971737; CD-MP2 Correlation Energy (a.u.) : -0.05840983042460; CD-MP2 Total Energy (a.u.) : -26.00354038957262; =======================================================================; ```. @loriab @CDSherrill,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183509137
https://github.com/psi4/psi4/issues/244#issuecomment-183509137:473,Energy Efficiency,Energy,Energy,473,and all results are:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914802; REF Energy (a.u.) : -25.94513055914802; Alpha-Alpha Contribution (a.u.) : -0.00171224398409; Alpha-Beta Contribution (a.u.) : -0.05664222782838; Beta-Beta Contribution (a.u.) : -0.00005535861213; Scaled_SS Correlation Energy (a.u.): -0.00058920086541; Scaled_OS Correlation Energy (a.u.): -0.06797067339406; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043340749; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545532492; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153971737; CD-MP2 Correlation Energy (a.u.) : -0.05840983042460; CD-MP2 Total Energy (a.u.) : -26.00354038957262; =======================================================================; ```. @loriab @CDSherrill,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183509137
https://github.com/psi4/psi4/issues/244#issuecomment-183509137:529,Energy Efficiency,Energy,Energy,529,and all results are:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914802; REF Energy (a.u.) : -25.94513055914802; Alpha-Alpha Contribution (a.u.) : -0.00171224398409; Alpha-Beta Contribution (a.u.) : -0.05664222782838; Beta-Beta Contribution (a.u.) : -0.00005535861213; Scaled_SS Correlation Energy (a.u.): -0.00058920086541; Scaled_OS Correlation Energy (a.u.): -0.06797067339406; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043340749; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545532492; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153971737; CD-MP2 Correlation Energy (a.u.) : -0.05840983042460; CD-MP2 Total Energy (a.u.) : -26.00354038957262; =======================================================================; ```. @loriab @CDSherrill,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183509137
https://github.com/psi4/psi4/issues/244#issuecomment-183509137:580,Energy Efficiency,Energy,Energy,580,and all results are:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914802; REF Energy (a.u.) : -25.94513055914802; Alpha-Alpha Contribution (a.u.) : -0.00171224398409; Alpha-Beta Contribution (a.u.) : -0.05664222782838; Beta-Beta Contribution (a.u.) : -0.00005535861213; Scaled_SS Correlation Energy (a.u.): -0.00058920086541; Scaled_OS Correlation Energy (a.u.): -0.06797067339406; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043340749; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545532492; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153971737; CD-MP2 Correlation Energy (a.u.) : -0.05840983042460; CD-MP2 Total Energy (a.u.) : -26.00354038957262; =======================================================================; ```. @loriab @CDSherrill,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183509137
https://github.com/psi4/psi4/issues/244#issuecomment-183509137:633,Energy Efficiency,Energy,Energy,633,and all results are:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914802; REF Energy (a.u.) : -25.94513055914802; Alpha-Alpha Contribution (a.u.) : -0.00171224398409; Alpha-Beta Contribution (a.u.) : -0.05664222782838; Beta-Beta Contribution (a.u.) : -0.00005535861213; Scaled_SS Correlation Energy (a.u.): -0.00058920086541; Scaled_OS Correlation Energy (a.u.): -0.06797067339406; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043340749; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545532492; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153971737; CD-MP2 Correlation Energy (a.u.) : -0.05840983042460; CD-MP2 Total Energy (a.u.) : -26.00354038957262; =======================================================================; ```. @loriab @CDSherrill,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183509137
https://github.com/psi4/psi4/issues/244#issuecomment-183509137:687,Energy Efficiency,Energy,Energy,687,and all results are:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914802; REF Energy (a.u.) : -25.94513055914802; Alpha-Alpha Contribution (a.u.) : -0.00171224398409; Alpha-Beta Contribution (a.u.) : -0.05664222782838; Beta-Beta Contribution (a.u.) : -0.00005535861213; Scaled_SS Correlation Energy (a.u.): -0.00058920086541; Scaled_OS Correlation Energy (a.u.): -0.06797067339406; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043340749; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545532492; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153971737; CD-MP2 Correlation Energy (a.u.) : -0.05840983042460; CD-MP2 Total Energy (a.u.) : -26.00354038957262; =======================================================================; ```. @loriab @CDSherrill,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183509137
https://github.com/psi4/psi4/issues/244#issuecomment-183509137:742,Energy Efficiency,Energy,Energy,742,and all results are:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914802; REF Energy (a.u.) : -25.94513055914802; Alpha-Alpha Contribution (a.u.) : -0.00171224398409; Alpha-Beta Contribution (a.u.) : -0.05664222782838; Beta-Beta Contribution (a.u.) : -0.00005535861213; Scaled_SS Correlation Energy (a.u.): -0.00058920086541; Scaled_OS Correlation Energy (a.u.): -0.06797067339406; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043340749; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545532492; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153971737; CD-MP2 Correlation Energy (a.u.) : -0.05840983042460; CD-MP2 Total Energy (a.u.) : -26.00354038957262; =======================================================================; ```. @loriab @CDSherrill,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183509137
https://github.com/psi4/psi4/issues/244#issuecomment-183509137:790,Energy Efficiency,Energy,Energy,790,and all results are:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914802; REF Energy (a.u.) : -25.94513055914802; Alpha-Alpha Contribution (a.u.) : -0.00171224398409; Alpha-Beta Contribution (a.u.) : -0.05664222782838; Beta-Beta Contribution (a.u.) : -0.00005535861213; Scaled_SS Correlation Energy (a.u.): -0.00058920086541; Scaled_OS Correlation Energy (a.u.): -0.06797067339406; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043340749; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545532492; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153971737; CD-MP2 Correlation Energy (a.u.) : -0.05840983042460; CD-MP2 Total Energy (a.u.) : -26.00354038957262; =======================================================================; ```. @loriab @CDSherrill,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183509137
https://github.com/psi4/psi4/issues/244#issuecomment-183512111:316,Availability,error,error,316,"Yes, it's often right (that's how I got the reference value for the compare_values function, from a simple input file). My concern is that in a more complex input file, it started throwing odd energies, depending on the (commented) input file contents. It's possible there was something funny with my setup, but the error is consistent enough that I'm really suspicious.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183512111
https://github.com/psi4/psi4/issues/244#issuecomment-183512111:203,Integrability,depend,depending,203,"Yes, it's often right (that's how I got the reference value for the compare_values function, from a simple input file). My concern is that in a more complex input file, it started throwing odd energies, depending on the (commented) input file contents. It's possible there was something funny with my setup, but the error is consistent enough that I'm really suspicious.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183512111
https://github.com/psi4/psi4/issues/244#issuecomment-183512111:100,Usability,simpl,simple,100,"Yes, it's often right (that's how I got the reference value for the compare_values function, from a simple input file). My concern is that in a more complex input file, it started throwing odd energies, depending on the (commented) input file contents. It's possible there was something funny with my setup, but the error is consistent enough that I'm really suspicious.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183512111
https://github.com/psi4/psi4/issues/244#issuecomment-183516602:73,Energy Efficiency,energy,energy,73,"Is this problem restricted to CD-MP2, @loriab? If it's affecting the SCF energy too, it seems like it's a problem with the input parser not correctly handling the commented lines.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183516602
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:109,Energy Efficiency,energy,energy,109,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:246,Energy Efficiency,Energy,Energy,246,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:286,Energy Efficiency,Energy,Energy,286,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:326,Energy Efficiency,Energy,Energy,326,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:540,Energy Efficiency,Energy,Energy,540,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:596,Energy Efficiency,Energy,Energy,596,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:647,Energy Efficiency,Energy,Energy,647,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:700,Energy Efficiency,Energy,Energy,700,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:754,Energy Efficiency,Energy,Energy,754,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:809,Energy Efficiency,Energy,Energy,809,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:857,Energy Efficiency,Energy,Energy,857,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:994,Energy Efficiency,energy,energy,994,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:1131,Energy Efficiency,Energy,Energy,1131,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:1171,Energy Efficiency,Energy,Energy,1171,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:1211,Energy Efficiency,Energy,Energy,1211,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:1425,Energy Efficiency,Energy,Energy,1425,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:1481,Energy Efficiency,Energy,Energy,1481,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:1532,Energy Efficiency,Energy,Energy,1532,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:1585,Energy Efficiency,Energy,Energy,1585,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:1639,Energy Efficiency,Energy,Energy,1639,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:1694,Energy Efficiency,Energy,Energy,1694,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183520260:1742,Energy Efficiency,Energy,Energy,1742,"Here are my results from two failed runs, I only see a difference at the CD-MP2 line:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914818; REF Energy (a.u.) : -25.94513055914818; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466326; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678522; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923064; CD-MP2 Correlation Energy (a.u.) : -0.02055603315430; CD-MP2 Total Energy (a.u.) : -25.96568659230248; ======================================================================= ; ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914819; REF Energy (a.u.) : -25.94513055914819; Alpha-Alpha Contribution (a.u.) : -0.00171224383410; Alpha-Beta Contribution (a.u.) : -0.05664222895157; Beta-Beta Contribution (a.u.) : -0.00005535848549; Scaled_SS Correlation Energy (a.u.): -0.00058920077319; Scaled_OS Correlation Energy (a.u.): -0.06797067474188; CD-SCS-MP2 Total Energy (a.u.) : -26.01369043466327; CD-SOS-MP2 Total Energy (a.u.) : -26.01876545678523; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153923066; CD-MP2 Correlation Energy (a.u.) : -0.05918204371032; CD-MP2 Total Energy (a.u.) : -26.00431260285851; ======================================================================= ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183520260
https://github.com/psi4/psi4/issues/244#issuecomment-183535595:11,Deployability,install,install,11,"Now I have install a fresh binary version (Psi4 0.4.16) and run the same input and get:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914770; REF Energy (a.u.) : -25.94513055914770; Alpha-Alpha Contribution (a.u.) : -0.00171224403804; Alpha-Beta Contribution (a.u.) : -0.05664223456972; Beta-Beta Contribution (a.u.) : -0.00005535856885; Scaled_SS Correlation Energy (a.u.): -0.00058920086896; Scaled_OS Correlation Energy (a.u.): -0.06797068148366; CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; CD-MP2 Total Energy (a.u.) : -25.96664562659070; =======================================================================; ```. I also tried with another older version (Psi4 0.3.137) I still get the correct result. Hence, the new version yields wrong result while older versions give the correct result. Therefore, it should be related to the recent changes were made. I do not know how to fix it. ; @loriab @CDSherrill @andysim @jturney",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183535595
https://github.com/psi4/psi4/issues/244#issuecomment-183535595:111,Energy Efficiency,energy,energy,111,"Now I have install a fresh binary version (Psi4 0.4.16) and run the same input and get:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914770; REF Energy (a.u.) : -25.94513055914770; Alpha-Alpha Contribution (a.u.) : -0.00171224403804; Alpha-Beta Contribution (a.u.) : -0.05664223456972; Beta-Beta Contribution (a.u.) : -0.00005535856885; Scaled_SS Correlation Energy (a.u.): -0.00058920086896; Scaled_OS Correlation Energy (a.u.): -0.06797068148366; CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; CD-MP2 Total Energy (a.u.) : -25.96664562659070; =======================================================================; ```. I also tried with another older version (Psi4 0.3.137) I still get the correct result. Hence, the new version yields wrong result while older versions give the correct result. Therefore, it should be related to the recent changes were made. I do not know how to fix it. ; @loriab @CDSherrill @andysim @jturney",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183535595
https://github.com/psi4/psi4/issues/244#issuecomment-183535595:246,Energy Efficiency,Energy,Energy,246,"Now I have install a fresh binary version (Psi4 0.4.16) and run the same input and get:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914770; REF Energy (a.u.) : -25.94513055914770; Alpha-Alpha Contribution (a.u.) : -0.00171224403804; Alpha-Beta Contribution (a.u.) : -0.05664223456972; Beta-Beta Contribution (a.u.) : -0.00005535856885; Scaled_SS Correlation Energy (a.u.): -0.00058920086896; Scaled_OS Correlation Energy (a.u.): -0.06797068148366; CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; CD-MP2 Total Energy (a.u.) : -25.96664562659070; =======================================================================; ```. I also tried with another older version (Psi4 0.3.137) I still get the correct result. Hence, the new version yields wrong result while older versions give the correct result. Therefore, it should be related to the recent changes were made. I do not know how to fix it. ; @loriab @CDSherrill @andysim @jturney",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183535595
https://github.com/psi4/psi4/issues/244#issuecomment-183535595:286,Energy Efficiency,Energy,Energy,286,"Now I have install a fresh binary version (Psi4 0.4.16) and run the same input and get:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914770; REF Energy (a.u.) : -25.94513055914770; Alpha-Alpha Contribution (a.u.) : -0.00171224403804; Alpha-Beta Contribution (a.u.) : -0.05664223456972; Beta-Beta Contribution (a.u.) : -0.00005535856885; Scaled_SS Correlation Energy (a.u.): -0.00058920086896; Scaled_OS Correlation Energy (a.u.): -0.06797068148366; CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; CD-MP2 Total Energy (a.u.) : -25.96664562659070; =======================================================================; ```. I also tried with another older version (Psi4 0.3.137) I still get the correct result. Hence, the new version yields wrong result while older versions give the correct result. Therefore, it should be related to the recent changes were made. I do not know how to fix it. ; @loriab @CDSherrill @andysim @jturney",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183535595
https://github.com/psi4/psi4/issues/244#issuecomment-183535595:326,Energy Efficiency,Energy,Energy,326,"Now I have install a fresh binary version (Psi4 0.4.16) and run the same input and get:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914770; REF Energy (a.u.) : -25.94513055914770; Alpha-Alpha Contribution (a.u.) : -0.00171224403804; Alpha-Beta Contribution (a.u.) : -0.05664223456972; Beta-Beta Contribution (a.u.) : -0.00005535856885; Scaled_SS Correlation Energy (a.u.): -0.00058920086896; Scaled_OS Correlation Energy (a.u.): -0.06797068148366; CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; CD-MP2 Total Energy (a.u.) : -25.96664562659070; =======================================================================; ```. I also tried with another older version (Psi4 0.3.137) I still get the correct result. Hence, the new version yields wrong result while older versions give the correct result. Therefore, it should be related to the recent changes were made. I do not know how to fix it. ; @loriab @CDSherrill @andysim @jturney",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183535595
https://github.com/psi4/psi4/issues/244#issuecomment-183535595:540,Energy Efficiency,Energy,Energy,540,"Now I have install a fresh binary version (Psi4 0.4.16) and run the same input and get:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914770; REF Energy (a.u.) : -25.94513055914770; Alpha-Alpha Contribution (a.u.) : -0.00171224403804; Alpha-Beta Contribution (a.u.) : -0.05664223456972; Beta-Beta Contribution (a.u.) : -0.00005535856885; Scaled_SS Correlation Energy (a.u.): -0.00058920086896; Scaled_OS Correlation Energy (a.u.): -0.06797068148366; CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; CD-MP2 Total Energy (a.u.) : -25.96664562659070; =======================================================================; ```. I also tried with another older version (Psi4 0.3.137) I still get the correct result. Hence, the new version yields wrong result while older versions give the correct result. Therefore, it should be related to the recent changes were made. I do not know how to fix it. ; @loriab @CDSherrill @andysim @jturney",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183535595
https://github.com/psi4/psi4/issues/244#issuecomment-183535595:596,Energy Efficiency,Energy,Energy,596,"Now I have install a fresh binary version (Psi4 0.4.16) and run the same input and get:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914770; REF Energy (a.u.) : -25.94513055914770; Alpha-Alpha Contribution (a.u.) : -0.00171224403804; Alpha-Beta Contribution (a.u.) : -0.05664223456972; Beta-Beta Contribution (a.u.) : -0.00005535856885; Scaled_SS Correlation Energy (a.u.): -0.00058920086896; Scaled_OS Correlation Energy (a.u.): -0.06797068148366; CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; CD-MP2 Total Energy (a.u.) : -25.96664562659070; =======================================================================; ```. I also tried with another older version (Psi4 0.3.137) I still get the correct result. Hence, the new version yields wrong result while older versions give the correct result. Therefore, it should be related to the recent changes were made. I do not know how to fix it. ; @loriab @CDSherrill @andysim @jturney",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183535595
https://github.com/psi4/psi4/issues/244#issuecomment-183535595:647,Energy Efficiency,Energy,Energy,647,"Now I have install a fresh binary version (Psi4 0.4.16) and run the same input and get:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914770; REF Energy (a.u.) : -25.94513055914770; Alpha-Alpha Contribution (a.u.) : -0.00171224403804; Alpha-Beta Contribution (a.u.) : -0.05664223456972; Beta-Beta Contribution (a.u.) : -0.00005535856885; Scaled_SS Correlation Energy (a.u.): -0.00058920086896; Scaled_OS Correlation Energy (a.u.): -0.06797068148366; CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; CD-MP2 Total Energy (a.u.) : -25.96664562659070; =======================================================================; ```. I also tried with another older version (Psi4 0.3.137) I still get the correct result. Hence, the new version yields wrong result while older versions give the correct result. Therefore, it should be related to the recent changes were made. I do not know how to fix it. ; @loriab @CDSherrill @andysim @jturney",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183535595
https://github.com/psi4/psi4/issues/244#issuecomment-183535595:700,Energy Efficiency,Energy,Energy,700,"Now I have install a fresh binary version (Psi4 0.4.16) and run the same input and get:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914770; REF Energy (a.u.) : -25.94513055914770; Alpha-Alpha Contribution (a.u.) : -0.00171224403804; Alpha-Beta Contribution (a.u.) : -0.05664223456972; Beta-Beta Contribution (a.u.) : -0.00005535856885; Scaled_SS Correlation Energy (a.u.): -0.00058920086896; Scaled_OS Correlation Energy (a.u.): -0.06797068148366; CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; CD-MP2 Total Energy (a.u.) : -25.96664562659070; =======================================================================; ```. I also tried with another older version (Psi4 0.3.137) I still get the correct result. Hence, the new version yields wrong result while older versions give the correct result. Therefore, it should be related to the recent changes were made. I do not know how to fix it. ; @loriab @CDSherrill @andysim @jturney",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183535595
https://github.com/psi4/psi4/issues/244#issuecomment-183535595:754,Energy Efficiency,Energy,Energy,754,"Now I have install a fresh binary version (Psi4 0.4.16) and run the same input and get:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914770; REF Energy (a.u.) : -25.94513055914770; Alpha-Alpha Contribution (a.u.) : -0.00171224403804; Alpha-Beta Contribution (a.u.) : -0.05664223456972; Beta-Beta Contribution (a.u.) : -0.00005535856885; Scaled_SS Correlation Energy (a.u.): -0.00058920086896; Scaled_OS Correlation Energy (a.u.): -0.06797068148366; CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; CD-MP2 Total Energy (a.u.) : -25.96664562659070; =======================================================================; ```. I also tried with another older version (Psi4 0.3.137) I still get the correct result. Hence, the new version yields wrong result while older versions give the correct result. Therefore, it should be related to the recent changes were made. I do not know how to fix it. ; @loriab @CDSherrill @andysim @jturney",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183535595
https://github.com/psi4/psi4/issues/244#issuecomment-183535595:809,Energy Efficiency,Energy,Energy,809,"Now I have install a fresh binary version (Psi4 0.4.16) and run the same input and get:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914770; REF Energy (a.u.) : -25.94513055914770; Alpha-Alpha Contribution (a.u.) : -0.00171224403804; Alpha-Beta Contribution (a.u.) : -0.05664223456972; Beta-Beta Contribution (a.u.) : -0.00005535856885; Scaled_SS Correlation Energy (a.u.): -0.00058920086896; Scaled_OS Correlation Energy (a.u.): -0.06797068148366; CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; CD-MP2 Total Energy (a.u.) : -25.96664562659070; =======================================================================; ```. I also tried with another older version (Psi4 0.3.137) I still get the correct result. Hence, the new version yields wrong result while older versions give the correct result. Therefore, it should be related to the recent changes were made. I do not know how to fix it. ; @loriab @CDSherrill @andysim @jturney",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183535595
https://github.com/psi4/psi4/issues/244#issuecomment-183535595:857,Energy Efficiency,Energy,Energy,857,"Now I have install a fresh binary version (Psi4 0.4.16) and run the same input and get:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914770; REF Energy (a.u.) : -25.94513055914770; Alpha-Alpha Contribution (a.u.) : -0.00171224403804; Alpha-Beta Contribution (a.u.) : -0.05664223456972; Beta-Beta Contribution (a.u.) : -0.00005535856885; Scaled_SS Correlation Energy (a.u.): -0.00058920086896; Scaled_OS Correlation Energy (a.u.): -0.06797068148366; CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; CD-MP2 Total Energy (a.u.) : -25.96664562659070; =======================================================================; ```. I also tried with another older version (Psi4 0.3.137) I still get the correct result. Hence, the new version yields wrong result while older versions give the correct result. Therefore, it should be related to the recent changes were made. I do not know how to fix it. ; @loriab @CDSherrill @andysim @jturney",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183535595
https://github.com/psi4/psi4/issues/244#issuecomment-183540864:358,Deployability,install,install,358,"I'm a bit late to this party, but what strikes me as interesting (as Jet; says) is that the spin components printed look OK, but the various; summations at the very bottom of the table are wrong. That smells vaguely; like corruption in one of the summations. -Rob. On Fri, Feb 12, 2016 at 4:02 PM, Ugur Bozkaya notifications@github.com; wrote:. > Now I have install a fresh binary version (Psi4 0.4.16) and run the same; > input and get:; > ; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914770; > REF Energy (a.u.) : -25.94513055914770; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; > CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; > CD-MP2 Total Energy (a.u.) : -25.96664562659070; > =======================================================================; > ; > I also tried with another older version (Psi4 0.3.137) I still get the; > correct result. Hence, the new version yields wrong result while older; > versions give the correct result. Therefore, it should be related to the; > recent changes were made. I do not know how to fix it.; > @loriab https://github.com/loriab @CDSherrill; > https://github.com/CDSherrill @andysim https://github.com/andysim; > @jturney https://github.com/jturney; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/244#issuecomment-183535595.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183540864
https://github.com/psi4/psi4/issues/244#issuecomment-183540864:462,Energy Efficiency,energy,energy,462,"I'm a bit late to this party, but what strikes me as interesting (as Jet; says) is that the spin components printed look OK, but the various; summations at the very bottom of the table are wrong. That smells vaguely; like corruption in one of the summations. -Rob. On Fri, Feb 12, 2016 at 4:02 PM, Ugur Bozkaya notifications@github.com; wrote:. > Now I have install a fresh binary version (Psi4 0.4.16) and run the same; > input and get:; > ; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914770; > REF Energy (a.u.) : -25.94513055914770; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; > CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; > CD-MP2 Total Energy (a.u.) : -25.96664562659070; > =======================================================================; > ; > I also tried with another older version (Psi4 0.3.137) I still get the; > correct result. Hence, the new version yields wrong result while older; > versions give the correct result. Therefore, it should be related to the; > recent changes were made. I do not know how to fix it.; > @loriab https://github.com/loriab @CDSherrill; > https://github.com/CDSherrill @andysim https://github.com/andysim; > @jturney https://github.com/jturney; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/244#issuecomment-183535595.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183540864
https://github.com/psi4/psi4/issues/244#issuecomment-183540864:601,Energy Efficiency,Energy,Energy,601,"I'm a bit late to this party, but what strikes me as interesting (as Jet; says) is that the spin components printed look OK, but the various; summations at the very bottom of the table are wrong. That smells vaguely; like corruption in one of the summations. -Rob. On Fri, Feb 12, 2016 at 4:02 PM, Ugur Bozkaya notifications@github.com; wrote:. > Now I have install a fresh binary version (Psi4 0.4.16) and run the same; > input and get:; > ; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914770; > REF Energy (a.u.) : -25.94513055914770; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; > CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; > CD-MP2 Total Energy (a.u.) : -25.96664562659070; > =======================================================================; > ; > I also tried with another older version (Psi4 0.3.137) I still get the; > correct result. Hence, the new version yields wrong result while older; > versions give the correct result. Therefore, it should be related to the; > recent changes were made. I do not know how to fix it.; > @loriab https://github.com/loriab @CDSherrill; > https://github.com/CDSherrill @andysim https://github.com/andysim; > @jturney https://github.com/jturney; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/244#issuecomment-183535595.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183540864
https://github.com/psi4/psi4/issues/244#issuecomment-183540864:643,Energy Efficiency,Energy,Energy,643,"I'm a bit late to this party, but what strikes me as interesting (as Jet; says) is that the spin components printed look OK, but the various; summations at the very bottom of the table are wrong. That smells vaguely; like corruption in one of the summations. -Rob. On Fri, Feb 12, 2016 at 4:02 PM, Ugur Bozkaya notifications@github.com; wrote:. > Now I have install a fresh binary version (Psi4 0.4.16) and run the same; > input and get:; > ; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914770; > REF Energy (a.u.) : -25.94513055914770; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; > CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; > CD-MP2 Total Energy (a.u.) : -25.96664562659070; > =======================================================================; > ; > I also tried with another older version (Psi4 0.3.137) I still get the; > correct result. Hence, the new version yields wrong result while older; > versions give the correct result. Therefore, it should be related to the; > recent changes were made. I do not know how to fix it.; > @loriab https://github.com/loriab @CDSherrill; > https://github.com/CDSherrill @andysim https://github.com/andysim; > @jturney https://github.com/jturney; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/244#issuecomment-183535595.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183540864
https://github.com/psi4/psi4/issues/244#issuecomment-183540864:685,Energy Efficiency,Energy,Energy,685,"I'm a bit late to this party, but what strikes me as interesting (as Jet; says) is that the spin components printed look OK, but the various; summations at the very bottom of the table are wrong. That smells vaguely; like corruption in one of the summations. -Rob. On Fri, Feb 12, 2016 at 4:02 PM, Ugur Bozkaya notifications@github.com; wrote:. > Now I have install a fresh binary version (Psi4 0.4.16) and run the same; > input and get:; > ; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914770; > REF Energy (a.u.) : -25.94513055914770; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; > CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; > CD-MP2 Total Energy (a.u.) : -25.96664562659070; > =======================================================================; > ; > I also tried with another older version (Psi4 0.3.137) I still get the; > correct result. Hence, the new version yields wrong result while older; > versions give the correct result. Therefore, it should be related to the; > recent changes were made. I do not know how to fix it.; > @loriab https://github.com/loriab @CDSherrill; > https://github.com/CDSherrill @andysim https://github.com/andysim; > @jturney https://github.com/jturney; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/244#issuecomment-183535595.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183540864
https://github.com/psi4/psi4/issues/244#issuecomment-183540864:907,Energy Efficiency,Energy,Energy,907,"I'm a bit late to this party, but what strikes me as interesting (as Jet; says) is that the spin components printed look OK, but the various; summations at the very bottom of the table are wrong. That smells vaguely; like corruption in one of the summations. -Rob. On Fri, Feb 12, 2016 at 4:02 PM, Ugur Bozkaya notifications@github.com; wrote:. > Now I have install a fresh binary version (Psi4 0.4.16) and run the same; > input and get:; > ; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914770; > REF Energy (a.u.) : -25.94513055914770; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; > CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; > CD-MP2 Total Energy (a.u.) : -25.96664562659070; > =======================================================================; > ; > I also tried with another older version (Psi4 0.3.137) I still get the; > correct result. Hence, the new version yields wrong result while older; > versions give the correct result. Therefore, it should be related to the; > recent changes were made. I do not know how to fix it.; > @loriab https://github.com/loriab @CDSherrill; > https://github.com/CDSherrill @andysim https://github.com/andysim; > @jturney https://github.com/jturney; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/244#issuecomment-183535595.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183540864
https://github.com/psi4/psi4/issues/244#issuecomment-183540864:965,Energy Efficiency,Energy,Energy,965,"I'm a bit late to this party, but what strikes me as interesting (as Jet; says) is that the spin components printed look OK, but the various; summations at the very bottom of the table are wrong. That smells vaguely; like corruption in one of the summations. -Rob. On Fri, Feb 12, 2016 at 4:02 PM, Ugur Bozkaya notifications@github.com; wrote:. > Now I have install a fresh binary version (Psi4 0.4.16) and run the same; > input and get:; > ; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914770; > REF Energy (a.u.) : -25.94513055914770; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; > CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; > CD-MP2 Total Energy (a.u.) : -25.96664562659070; > =======================================================================; > ; > I also tried with another older version (Psi4 0.3.137) I still get the; > correct result. Hence, the new version yields wrong result while older; > versions give the correct result. Therefore, it should be related to the; > recent changes were made. I do not know how to fix it.; > @loriab https://github.com/loriab @CDSherrill; > https://github.com/CDSherrill @andysim https://github.com/andysim; > @jturney https://github.com/jturney; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/244#issuecomment-183535595.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183540864
https://github.com/psi4/psi4/issues/244#issuecomment-183540864:1018,Energy Efficiency,Energy,Energy,1018,"I'm a bit late to this party, but what strikes me as interesting (as Jet; says) is that the spin components printed look OK, but the various; summations at the very bottom of the table are wrong. That smells vaguely; like corruption in one of the summations. -Rob. On Fri, Feb 12, 2016 at 4:02 PM, Ugur Bozkaya notifications@github.com; wrote:. > Now I have install a fresh binary version (Psi4 0.4.16) and run the same; > input and get:; > ; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914770; > REF Energy (a.u.) : -25.94513055914770; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; > CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; > CD-MP2 Total Energy (a.u.) : -25.96664562659070; > =======================================================================; > ; > I also tried with another older version (Psi4 0.3.137) I still get the; > correct result. Hence, the new version yields wrong result while older; > versions give the correct result. Therefore, it should be related to the; > recent changes were made. I do not know how to fix it.; > @loriab https://github.com/loriab @CDSherrill; > https://github.com/CDSherrill @andysim https://github.com/andysim; > @jturney https://github.com/jturney; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/244#issuecomment-183535595.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183540864
https://github.com/psi4/psi4/issues/244#issuecomment-183540864:1073,Energy Efficiency,Energy,Energy,1073,"I'm a bit late to this party, but what strikes me as interesting (as Jet; says) is that the spin components printed look OK, but the various; summations at the very bottom of the table are wrong. That smells vaguely; like corruption in one of the summations. -Rob. On Fri, Feb 12, 2016 at 4:02 PM, Ugur Bozkaya notifications@github.com; wrote:. > Now I have install a fresh binary version (Psi4 0.4.16) and run the same; > input and get:; > ; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914770; > REF Energy (a.u.) : -25.94513055914770; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; > CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; > CD-MP2 Total Energy (a.u.) : -25.96664562659070; > =======================================================================; > ; > I also tried with another older version (Psi4 0.3.137) I still get the; > correct result. Hence, the new version yields wrong result while older; > versions give the correct result. Therefore, it should be related to the; > recent changes were made. I do not know how to fix it.; > @loriab https://github.com/loriab @CDSherrill; > https://github.com/CDSherrill @andysim https://github.com/andysim; > @jturney https://github.com/jturney; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/244#issuecomment-183535595.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183540864
https://github.com/psi4/psi4/issues/244#issuecomment-183540864:1129,Energy Efficiency,Energy,Energy,1129,"I'm a bit late to this party, but what strikes me as interesting (as Jet; says) is that the spin components printed look OK, but the various; summations at the very bottom of the table are wrong. That smells vaguely; like corruption in one of the summations. -Rob. On Fri, Feb 12, 2016 at 4:02 PM, Ugur Bozkaya notifications@github.com; wrote:. > Now I have install a fresh binary version (Psi4 0.4.16) and run the same; > input and get:; > ; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914770; > REF Energy (a.u.) : -25.94513055914770; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; > CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; > CD-MP2 Total Energy (a.u.) : -25.96664562659070; > =======================================================================; > ; > I also tried with another older version (Psi4 0.3.137) I still get the; > correct result. Hence, the new version yields wrong result while older; > versions give the correct result. Therefore, it should be related to the; > recent changes were made. I do not know how to fix it.; > @loriab https://github.com/loriab @CDSherrill; > https://github.com/CDSherrill @andysim https://github.com/andysim; > @jturney https://github.com/jturney; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/244#issuecomment-183535595.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183540864
https://github.com/psi4/psi4/issues/244#issuecomment-183540864:1186,Energy Efficiency,Energy,Energy,1186,"I'm a bit late to this party, but what strikes me as interesting (as Jet; says) is that the spin components printed look OK, but the various; summations at the very bottom of the table are wrong. That smells vaguely; like corruption in one of the summations. -Rob. On Fri, Feb 12, 2016 at 4:02 PM, Ugur Bozkaya notifications@github.com; wrote:. > Now I have install a fresh binary version (Psi4 0.4.16) and run the same; > input and get:; > ; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914770; > REF Energy (a.u.) : -25.94513055914770; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; > CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; > CD-MP2 Total Energy (a.u.) : -25.96664562659070; > =======================================================================; > ; > I also tried with another older version (Psi4 0.3.137) I still get the; > correct result. Hence, the new version yields wrong result while older; > versions give the correct result. Therefore, it should be related to the; > recent changes were made. I do not know how to fix it.; > @loriab https://github.com/loriab @CDSherrill; > https://github.com/CDSherrill @andysim https://github.com/andysim; > @jturney https://github.com/jturney; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/244#issuecomment-183535595.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183540864
https://github.com/psi4/psi4/issues/244#issuecomment-183540864:1236,Energy Efficiency,Energy,Energy,1236,"I'm a bit late to this party, but what strikes me as interesting (as Jet; says) is that the spin components printed look OK, but the various; summations at the very bottom of the table are wrong. That smells vaguely; like corruption in one of the summations. -Rob. On Fri, Feb 12, 2016 at 4:02 PM, Ugur Bozkaya notifications@github.com; wrote:. > Now I have install a fresh binary version (Psi4 0.4.16) and run the same; > input and get:; > ; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914770; > REF Energy (a.u.) : -25.94513055914770; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; > CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; > CD-MP2 Total Energy (a.u.) : -25.96664562659070; > =======================================================================; > ; > I also tried with another older version (Psi4 0.3.137) I still get the; > correct result. Hence, the new version yields wrong result while older; > versions give the correct result. Therefore, it should be related to the; > recent changes were made. I do not know how to fix it.; > @loriab https://github.com/loriab @CDSherrill; > https://github.com/CDSherrill @andysim https://github.com/andysim; > @jturney https://github.com/jturney; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/244#issuecomment-183535595.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183540864
https://github.com/psi4/psi4/issues/244#issuecomment-183550049:446,Modifiability,variab,variable,446,"I didn't try too hard to break it on public (which doesn't have wavefunction_pass) so it's possible this never appears before the infrastructure changes. But nevertheless, those changes on the whole are for the better, and it's disturbing that infrastructure changes + suitable tweaking to make the extensive occ/dfocc test suite pass can still hide a situation like this. `Ecorr`, `Emp2AA`, etc. are computed out of sight. ... Aha! Initializing variable (below) seems to help in https://github.com/psi4/psi4/blob/master/src/bin/dfocc/mp2_direct.cc#L90; Only affects UHF. Will continue explorations along these lines. ```; 121 if (mo_optimized == 0) Esosmp2AB = sos_scale * Emp2AB;; 122 else if (mo_optimized == 1) Esosmp2AB = sos_scale2 * Emp2AB;; 123 ; 124 Emp2_t1 = 0.0;; 125 if (reference == ""ROHF"" && orb_opt_ == ""FALSE"") {; 126 if (wfn_type_ == ""DF-OMP2"" || wfn_type_ == ""CD-OMP2"") {; 127 //Singles-contribution; 128 Emp2_t1 = 0.0;; 129 //Alpha; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183550049
https://github.com/psi4/psi4/issues/244#issuecomment-183550049:319,Testability,test,test,319,"I didn't try too hard to break it on public (which doesn't have wavefunction_pass) so it's possible this never appears before the infrastructure changes. But nevertheless, those changes on the whole are for the better, and it's disturbing that infrastructure changes + suitable tweaking to make the extensive occ/dfocc test suite pass can still hide a situation like this. `Ecorr`, `Emp2AA`, etc. are computed out of sight. ... Aha! Initializing variable (below) seems to help in https://github.com/psi4/psi4/blob/master/src/bin/dfocc/mp2_direct.cc#L90; Only affects UHF. Will continue explorations along these lines. ```; 121 if (mo_optimized == 0) Esosmp2AB = sos_scale * Emp2AB;; 122 else if (mo_optimized == 1) Esosmp2AB = sos_scale2 * Emp2AB;; 123 ; 124 Emp2_t1 = 0.0;; 125 if (reference == ""ROHF"" && orb_opt_ == ""FALSE"") {; 126 if (wfn_type_ == ""DF-OMP2"" || wfn_type_ == ""CD-OMP2"") {; 127 //Singles-contribution; 128 Emp2_t1 = 0.0;; 129 //Alpha; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183550049
https://github.com/psi4/psi4/issues/244#issuecomment-187302588:27,Availability,down,down,27,"Nice job tracking this one down, everyone. David. On Sun, Feb 21, 2016 at 3:53 PM, Daniel Smith notifications@github.com; wrote:. > Closed #244 https://github.com/psi4/psi4/issues/244 via fc721a2; > https://github.com/psi4/psi4/commit/fc721a29611cee4de7dfa4d96cf9707317191860; > .; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/244#event-558642745.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-187302588
https://github.com/psi4/psi4/issues/245#issuecomment-183702993:11,Energy Efficiency,energy,energy,11,"In case of energy the situation is as simple as you suggested. However, in case of gradients the situation is much complicated. The DF-SCF orbitals are optimized at DF-SCF level, and these are different than that of conventional SCF. Hence, after DF-SCF if I try to compute gradients for conventional SCF I need to an extra term to MP2 Lagrangian to account for the orbital relaxation for SCF MOs. It may sound odd, but it is. Since the MOs of SCF are different than that of DF-SCF, we need to re-optimize orbitals for SCF or we need to modify our Z-vector equation sin SCF-MO gradient is not zero, but DF-SCF orbital gradient is zero. Hence, we need to modify MP2 Lagrangian for DF-SCF ref and add another term to account for orbital relaxation for SCF wfn. In summary, I recommend to use the conventional SCF for conventional MP2 gradients even though user asks a DF-SCF ref. @loriab @andysim @CDSherrill",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-183702993
https://github.com/psi4/psi4/issues/245#issuecomment-183702993:152,Performance,optimiz,optimized,152,"In case of energy the situation is as simple as you suggested. However, in case of gradients the situation is much complicated. The DF-SCF orbitals are optimized at DF-SCF level, and these are different than that of conventional SCF. Hence, after DF-SCF if I try to compute gradients for conventional SCF I need to an extra term to MP2 Lagrangian to account for the orbital relaxation for SCF MOs. It may sound odd, but it is. Since the MOs of SCF are different than that of DF-SCF, we need to re-optimize orbitals for SCF or we need to modify our Z-vector equation sin SCF-MO gradient is not zero, but DF-SCF orbital gradient is zero. Hence, we need to modify MP2 Lagrangian for DF-SCF ref and add another term to account for orbital relaxation for SCF wfn. In summary, I recommend to use the conventional SCF for conventional MP2 gradients even though user asks a DF-SCF ref. @loriab @andysim @CDSherrill",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-183702993
https://github.com/psi4/psi4/issues/245#issuecomment-183702993:497,Performance,optimiz,optimize,497,"In case of energy the situation is as simple as you suggested. However, in case of gradients the situation is much complicated. The DF-SCF orbitals are optimized at DF-SCF level, and these are different than that of conventional SCF. Hence, after DF-SCF if I try to compute gradients for conventional SCF I need to an extra term to MP2 Lagrangian to account for the orbital relaxation for SCF MOs. It may sound odd, but it is. Since the MOs of SCF are different than that of DF-SCF, we need to re-optimize orbitals for SCF or we need to modify our Z-vector equation sin SCF-MO gradient is not zero, but DF-SCF orbital gradient is zero. Hence, we need to modify MP2 Lagrangian for DF-SCF ref and add another term to account for orbital relaxation for SCF wfn. In summary, I recommend to use the conventional SCF for conventional MP2 gradients even though user asks a DF-SCF ref. @loriab @andysim @CDSherrill",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-183702993
https://github.com/psi4/psi4/issues/245#issuecomment-183702993:38,Usability,simpl,simple,38,"In case of energy the situation is as simple as you suggested. However, in case of gradients the situation is much complicated. The DF-SCF orbitals are optimized at DF-SCF level, and these are different than that of conventional SCF. Hence, after DF-SCF if I try to compute gradients for conventional SCF I need to an extra term to MP2 Lagrangian to account for the orbital relaxation for SCF MOs. It may sound odd, but it is. Since the MOs of SCF are different than that of DF-SCF, we need to re-optimize orbitals for SCF or we need to modify our Z-vector equation sin SCF-MO gradient is not zero, but DF-SCF orbital gradient is zero. Hence, we need to modify MP2 Lagrangian for DF-SCF ref and add another term to account for orbital relaxation for SCF wfn. In summary, I recommend to use the conventional SCF for conventional MP2 gradients even though user asks a DF-SCF ref. @loriab @andysim @CDSherrill",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-183702993
https://github.com/psi4/psi4/issues/245#issuecomment-184035189:389,Availability,error,error,389,"Thank you, Ugur, for the detailed explanation. That really helps me understand what's going on in this case and in psi4/psi4private#48 . I gather that the situation we've got now is the following:. | `scf_type` | `mp2_type` | `qc_module` | outcome |; | --- | --- | --- | --- |; | conv | conv | occ | works |; | df | df | occ | works |; | df | df | dfmp2 | works |; | df | conv | occ | NYI error; psi4/psi4#48 (this); not too useful to implement |; | conv | df | dfmp2 | NYI error; psi4/psi4private#48; would be useful to implement |; | conv | df | occ | works or not?, @bozkaya |. Barring implementing many orbital response terms in this or psi4/psi4private#48, sounds like the above is fixed for the time being for when the user specifies `scf_type` and `mp2_type`. But when `scf_type` is only implied ""(df)"", I can add the below. | `scf_type` | `mp2_type` | `qc_module` | outcome |; | --- | --- | --- | --- |; | (df) --> conv | conv | occ | works as above |. If you _did_ implement cd-mp2 gradients, @bozkaya, do you anticipate them only working upon a cd-hf reference?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-184035189
https://github.com/psi4/psi4/issues/245#issuecomment-184035189:474,Availability,error,error,474,"Thank you, Ugur, for the detailed explanation. That really helps me understand what's going on in this case and in psi4/psi4private#48 . I gather that the situation we've got now is the following:. | `scf_type` | `mp2_type` | `qc_module` | outcome |; | --- | --- | --- | --- |; | conv | conv | occ | works |; | df | df | occ | works |; | df | df | dfmp2 | works |; | df | conv | occ | NYI error; psi4/psi4#48 (this); not too useful to implement |; | conv | df | dfmp2 | NYI error; psi4/psi4private#48; would be useful to implement |; | conv | df | occ | works or not?, @bozkaya |. Barring implementing many orbital response terms in this or psi4/psi4private#48, sounds like the above is fixed for the time being for when the user specifies `scf_type` and `mp2_type`. But when `scf_type` is only implied ""(df)"", I can add the below. | `scf_type` | `mp2_type` | `qc_module` | outcome |; | --- | --- | --- | --- |; | (df) --> conv | conv | occ | works as above |. If you _did_ implement cd-mp2 gradients, @bozkaya, do you anticipate them only working upon a cd-hf reference?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-184035189
https://github.com/psi4/psi4/issues/245#issuecomment-186302823:47,Energy Efficiency,energy,energy,47,"Further, df-mp2 with conventional HF works for energy if user set the ""READ_SCF_3INDEX FALSE"" option. However, for analytic gradients it does not work. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-186302823
https://github.com/psi4/psi4/issues/245#issuecomment-192816600:196,Availability,error,error,196,"@bozkaya, so if one runs a df-mp2 gradient that effectively but not explicitly does conventional HF, as through the input below, which yields the output pattern below, then this is actually a bad error of routing, which I should correct?. ```; molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set mp2_type df; set qc_module occ. gradient('mp2'); ```. ```; ...; @RHF Final Energy: -100.01941126902265; ...; Computing DF-MP2 energy using SCF MOs (Canonical DF-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 5.19366944090513; DF-HF Energy (a.u.) : -100.01941126902265; REF Energy (a.u.) : -100.01941126902265; DF-MP2 Correlation Energy (a.u.) : -0.20376310280949; DF-MP2 Total Energy (a.u.) : -100.22317437183214; ======================================================================= ; ...; DFGRAD ; A General Analytic Gradients Code ; for Density-Fitted Methods ; ...; -Total Gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 -0.000000000000 0.000000000000 0.002795941505; 2 0.000000000000 -0.000000000000 -0.002795941505; ...; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192816600
https://github.com/psi4/psi4/issues/245#issuecomment-192816600:374,Energy Efficiency,Energy,Energy,374,"@bozkaya, so if one runs a df-mp2 gradient that effectively but not explicitly does conventional HF, as through the input below, which yields the output pattern below, then this is actually a bad error of routing, which I should correct?. ```; molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set mp2_type df; set qc_module occ. gradient('mp2'); ```. ```; ...; @RHF Final Energy: -100.01941126902265; ...; Computing DF-MP2 energy using SCF MOs (Canonical DF-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 5.19366944090513; DF-HF Energy (a.u.) : -100.01941126902265; REF Energy (a.u.) : -100.01941126902265; DF-MP2 Correlation Energy (a.u.) : -0.20376310280949; DF-MP2 Total Energy (a.u.) : -100.22317437183214; ======================================================================= ; ...; DFGRAD ; A General Analytic Gradients Code ; for Density-Fitted Methods ; ...; -Total Gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 -0.000000000000 0.000000000000 0.002795941505; 2 0.000000000000 -0.000000000000 -0.002795941505; ...; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192816600
https://github.com/psi4/psi4/issues/245#issuecomment-192816600:425,Energy Efficiency,energy,energy,425,"@bozkaya, so if one runs a df-mp2 gradient that effectively but not explicitly does conventional HF, as through the input below, which yields the output pattern below, then this is actually a bad error of routing, which I should correct?. ```; molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set mp2_type df; set qc_module occ. gradient('mp2'); ```. ```; ...; @RHF Final Energy: -100.01941126902265; ...; Computing DF-MP2 energy using SCF MOs (Canonical DF-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 5.19366944090513; DF-HF Energy (a.u.) : -100.01941126902265; REF Energy (a.u.) : -100.01941126902265; DF-MP2 Correlation Energy (a.u.) : -0.20376310280949; DF-MP2 Total Energy (a.u.) : -100.22317437183214; ======================================================================= ; ...; DFGRAD ; A General Analytic Gradients Code ; for Density-Fitted Methods ; ...; -Total Gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 -0.000000000000 0.000000000000 0.002795941505; 2 0.000000000000 -0.000000000000 -0.002795941505; ...; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192816600
https://github.com/psi4/psi4/issues/245#issuecomment-192816600:562,Energy Efficiency,Energy,Energy,562,"@bozkaya, so if one runs a df-mp2 gradient that effectively but not explicitly does conventional HF, as through the input below, which yields the output pattern below, then this is actually a bad error of routing, which I should correct?. ```; molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set mp2_type df; set qc_module occ. gradient('mp2'); ```. ```; ...; @RHF Final Energy: -100.01941126902265; ...; Computing DF-MP2 energy using SCF MOs (Canonical DF-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 5.19366944090513; DF-HF Energy (a.u.) : -100.01941126902265; REF Energy (a.u.) : -100.01941126902265; DF-MP2 Correlation Energy (a.u.) : -0.20376310280949; DF-MP2 Total Energy (a.u.) : -100.22317437183214; ======================================================================= ; ...; DFGRAD ; A General Analytic Gradients Code ; for Density-Fitted Methods ; ...; -Total Gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 -0.000000000000 0.000000000000 0.002795941505; 2 0.000000000000 -0.000000000000 -0.002795941505; ...; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192816600
https://github.com/psi4/psi4/issues/245#issuecomment-192816600:602,Energy Efficiency,Energy,Energy,602,"@bozkaya, so if one runs a df-mp2 gradient that effectively but not explicitly does conventional HF, as through the input below, which yields the output pattern below, then this is actually a bad error of routing, which I should correct?. ```; molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set mp2_type df; set qc_module occ. gradient('mp2'); ```. ```; ...; @RHF Final Energy: -100.01941126902265; ...; Computing DF-MP2 energy using SCF MOs (Canonical DF-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 5.19366944090513; DF-HF Energy (a.u.) : -100.01941126902265; REF Energy (a.u.) : -100.01941126902265; DF-MP2 Correlation Energy (a.u.) : -0.20376310280949; DF-MP2 Total Energy (a.u.) : -100.22317437183214; ======================================================================= ; ...; DFGRAD ; A General Analytic Gradients Code ; for Density-Fitted Methods ; ...; -Total Gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 -0.000000000000 0.000000000000 0.002795941505; 2 0.000000000000 -0.000000000000 -0.002795941505; ...; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192816600
https://github.com/psi4/psi4/issues/245#issuecomment-192816600:643,Energy Efficiency,Energy,Energy,643,"@bozkaya, so if one runs a df-mp2 gradient that effectively but not explicitly does conventional HF, as through the input below, which yields the output pattern below, then this is actually a bad error of routing, which I should correct?. ```; molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set mp2_type df; set qc_module occ. gradient('mp2'); ```. ```; ...; @RHF Final Energy: -100.01941126902265; ...; Computing DF-MP2 energy using SCF MOs (Canonical DF-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 5.19366944090513; DF-HF Energy (a.u.) : -100.01941126902265; REF Energy (a.u.) : -100.01941126902265; DF-MP2 Correlation Energy (a.u.) : -0.20376310280949; DF-MP2 Total Energy (a.u.) : -100.22317437183214; ======================================================================= ; ...; DFGRAD ; A General Analytic Gradients Code ; for Density-Fitted Methods ; ...; -Total Gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 -0.000000000000 0.000000000000 0.002795941505; 2 0.000000000000 -0.000000000000 -0.002795941505; ...; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192816600
https://github.com/psi4/psi4/issues/245#issuecomment-192816600:699,Energy Efficiency,Energy,Energy,699,"@bozkaya, so if one runs a df-mp2 gradient that effectively but not explicitly does conventional HF, as through the input below, which yields the output pattern below, then this is actually a bad error of routing, which I should correct?. ```; molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set mp2_type df; set qc_module occ. gradient('mp2'); ```. ```; ...; @RHF Final Energy: -100.01941126902265; ...; Computing DF-MP2 energy using SCF MOs (Canonical DF-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 5.19366944090513; DF-HF Energy (a.u.) : -100.01941126902265; REF Energy (a.u.) : -100.01941126902265; DF-MP2 Correlation Energy (a.u.) : -0.20376310280949; DF-MP2 Total Energy (a.u.) : -100.22317437183214; ======================================================================= ; ...; DFGRAD ; A General Analytic Gradients Code ; for Density-Fitted Methods ; ...; -Total Gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 -0.000000000000 0.000000000000 0.002795941505; 2 0.000000000000 -0.000000000000 -0.002795941505; ...; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192816600
https://github.com/psi4/psi4/issues/245#issuecomment-192816600:747,Energy Efficiency,Energy,Energy,747,"@bozkaya, so if one runs a df-mp2 gradient that effectively but not explicitly does conventional HF, as through the input below, which yields the output pattern below, then this is actually a bad error of routing, which I should correct?. ```; molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set mp2_type df; set qc_module occ. gradient('mp2'); ```. ```; ...; @RHF Final Energy: -100.01941126902265; ...; Computing DF-MP2 energy using SCF MOs (Canonical DF-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 5.19366944090513; DF-HF Energy (a.u.) : -100.01941126902265; REF Energy (a.u.) : -100.01941126902265; DF-MP2 Correlation Energy (a.u.) : -0.20376310280949; DF-MP2 Total Energy (a.u.) : -100.22317437183214; ======================================================================= ; ...; DFGRAD ; A General Analytic Gradients Code ; for Density-Fitted Methods ; ...; -Total Gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 -0.000000000000 0.000000000000 0.002795941505; 2 0.000000000000 -0.000000000000 -0.002795941505; ...; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192816600
https://github.com/psi4/psi4/issues/245#issuecomment-192816600:205,Integrability,rout,routing,205,"@bozkaya, so if one runs a df-mp2 gradient that effectively but not explicitly does conventional HF, as through the input below, which yields the output pattern below, then this is actually a bad error of routing, which I should correct?. ```; molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set mp2_type df; set qc_module occ. gradient('mp2'); ```. ```; ...; @RHF Final Energy: -100.01941126902265; ...; Computing DF-MP2 energy using SCF MOs (Canonical DF-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 5.19366944090513; DF-HF Energy (a.u.) : -100.01941126902265; REF Energy (a.u.) : -100.01941126902265; DF-MP2 Correlation Energy (a.u.) : -0.20376310280949; DF-MP2 Total Energy (a.u.) : -100.22317437183214; ======================================================================= ; ...; DFGRAD ; A General Analytic Gradients Code ; for Density-Fitted Methods ; ...; -Total Gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 -0.000000000000 0.000000000000 0.002795941505; 2 0.000000000000 -0.000000000000 -0.002795941505; ...; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192816600
https://github.com/psi4/psi4/issues/245#issuecomment-192822036:410,Energy Efficiency,energy,energy,410,"@bozkaya, sorry to bombard, but any thoughts on why occ analytic doesn't want to match occ findif?. ```. mp2totg = psi4.Matrix(2, 3); mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; [ 0.0000000000, 0.0000000000, -0.0028301835]]; mp2totg.set(mp2tot_vals). molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set scf_type pk; set mp2_type conv. set qc_module detci; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'detci fd'); clean(). set qc_module fnocc; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'fnocc fd'); clean(). set qc_module occ; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'occ fd'); clean(). set qc_module occ; realgrad = gradient('mp2'); compare_matrices(mp2totg, realgrad, 5, 'occ analytic'); clean(); ```. ```; Performing finite difference calculations; 3 displacements needed ... 1 2 3; detci fd..........................................................PASSED; Performing finite difference calculations; 3 displacements needed ... 1 2 3; fnocc fd..........................................................PASSED; Performing finite difference calculations; 3 displacements needed ... 1 2 3; occ fd............................................................PASSED; occ analytic: computed value (0.0028301835) does not match (0.00281933825282).; occ analytic: computed value (-0.0028301835) does not match (-0.00281933825299).; Check your output file for reporting of the matrices.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192822036
https://github.com/psi4/psi4/issues/245#issuecomment-192822036:534,Energy Efficiency,energy,energy,534,"@bozkaya, sorry to bombard, but any thoughts on why occ analytic doesn't want to match occ findif?. ```. mp2totg = psi4.Matrix(2, 3); mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; [ 0.0000000000, 0.0000000000, -0.0028301835]]; mp2totg.set(mp2tot_vals). molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set scf_type pk; set mp2_type conv. set qc_module detci; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'detci fd'); clean(). set qc_module fnocc; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'fnocc fd'); clean(). set qc_module occ; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'occ fd'); clean(). set qc_module occ; realgrad = gradient('mp2'); compare_matrices(mp2totg, realgrad, 5, 'occ analytic'); clean(); ```. ```; Performing finite difference calculations; 3 displacements needed ... 1 2 3; detci fd..........................................................PASSED; Performing finite difference calculations; 3 displacements needed ... 1 2 3; fnocc fd..........................................................PASSED; Performing finite difference calculations; 3 displacements needed ... 1 2 3; occ fd............................................................PASSED; occ analytic: computed value (0.0028301835) does not match (0.00281933825282).; occ analytic: computed value (-0.0028301835) does not match (-0.00281933825299).; Check your output file for reporting of the matrices.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192822036
https://github.com/psi4/psi4/issues/245#issuecomment-192822036:656,Energy Efficiency,energy,energy,656,"@bozkaya, sorry to bombard, but any thoughts on why occ analytic doesn't want to match occ findif?. ```. mp2totg = psi4.Matrix(2, 3); mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; [ 0.0000000000, 0.0000000000, -0.0028301835]]; mp2totg.set(mp2tot_vals). molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set scf_type pk; set mp2_type conv. set qc_module detci; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'detci fd'); clean(). set qc_module fnocc; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'fnocc fd'); clean(). set qc_module occ; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'occ fd'); clean(). set qc_module occ; realgrad = gradient('mp2'); compare_matrices(mp2totg, realgrad, 5, 'occ analytic'); clean(); ```. ```; Performing finite difference calculations; 3 displacements needed ... 1 2 3; detci fd..........................................................PASSED; Performing finite difference calculations; 3 displacements needed ... 1 2 3; fnocc fd..........................................................PASSED; Performing finite difference calculations; 3 displacements needed ... 1 2 3; occ fd............................................................PASSED; occ analytic: computed value (0.0028301835) does not match (0.00281933825282).; occ analytic: computed value (-0.0028301835) does not match (-0.00281933825299).; Check your output file for reporting of the matrices.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192822036
https://github.com/psi4/psi4/issues/245#issuecomment-192822036:845,Performance,Perform,Performing,845,"@bozkaya, sorry to bombard, but any thoughts on why occ analytic doesn't want to match occ findif?. ```. mp2totg = psi4.Matrix(2, 3); mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; [ 0.0000000000, 0.0000000000, -0.0028301835]]; mp2totg.set(mp2tot_vals). molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set scf_type pk; set mp2_type conv. set qc_module detci; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'detci fd'); clean(). set qc_module fnocc; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'fnocc fd'); clean(). set qc_module occ; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'occ fd'); clean(). set qc_module occ; realgrad = gradient('mp2'); compare_matrices(mp2totg, realgrad, 5, 'occ analytic'); clean(); ```. ```; Performing finite difference calculations; 3 displacements needed ... 1 2 3; detci fd..........................................................PASSED; Performing finite difference calculations; 3 displacements needed ... 1 2 3; fnocc fd..........................................................PASSED; Performing finite difference calculations; 3 displacements needed ... 1 2 3; occ fd............................................................PASSED; occ analytic: computed value (0.0028301835) does not match (0.00281933825282).; occ analytic: computed value (-0.0028301835) does not match (-0.00281933825299).; Check your output file for reporting of the matrices.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192822036
https://github.com/psi4/psi4/issues/245#issuecomment-192822036:996,Performance,Perform,Performing,996,"@bozkaya, sorry to bombard, but any thoughts on why occ analytic doesn't want to match occ findif?. ```. mp2totg = psi4.Matrix(2, 3); mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; [ 0.0000000000, 0.0000000000, -0.0028301835]]; mp2totg.set(mp2tot_vals). molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set scf_type pk; set mp2_type conv. set qc_module detci; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'detci fd'); clean(). set qc_module fnocc; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'fnocc fd'); clean(). set qc_module occ; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'occ fd'); clean(). set qc_module occ; realgrad = gradient('mp2'); compare_matrices(mp2totg, realgrad, 5, 'occ analytic'); clean(); ```. ```; Performing finite difference calculations; 3 displacements needed ... 1 2 3; detci fd..........................................................PASSED; Performing finite difference calculations; 3 displacements needed ... 1 2 3; fnocc fd..........................................................PASSED; Performing finite difference calculations; 3 displacements needed ... 1 2 3; occ fd............................................................PASSED; occ analytic: computed value (0.0028301835) does not match (0.00281933825282).; occ analytic: computed value (-0.0028301835) does not match (-0.00281933825299).; Check your output file for reporting of the matrices.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192822036
https://github.com/psi4/psi4/issues/245#issuecomment-192822036:1147,Performance,Perform,Performing,1147,"@bozkaya, sorry to bombard, but any thoughts on why occ analytic doesn't want to match occ findif?. ```. mp2totg = psi4.Matrix(2, 3); mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; [ 0.0000000000, 0.0000000000, -0.0028301835]]; mp2totg.set(mp2tot_vals). molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set scf_type pk; set mp2_type conv. set qc_module detci; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'detci fd'); clean(). set qc_module fnocc; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'fnocc fd'); clean(). set qc_module occ; fdgrad = gradient('mp2', dertype='energy'); compare_matrices(mp2totg, fdgrad, 5, 'occ fd'); clean(). set qc_module occ; realgrad = gradient('mp2'); compare_matrices(mp2totg, realgrad, 5, 'occ analytic'); clean(); ```. ```; Performing finite difference calculations; 3 displacements needed ... 1 2 3; detci fd..........................................................PASSED; Performing finite difference calculations; 3 displacements needed ... 1 2 3; fnocc fd..........................................................PASSED; Performing finite difference calculations; 3 displacements needed ... 1 2 3; occ fd............................................................PASSED; occ analytic: computed value (0.0028301835) does not match (0.00281933825282).; occ analytic: computed value (-0.0028301835) does not match (-0.00281933825299).; Check your output file for reporting of the matrices.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192822036
https://github.com/psi4/psi4/issues/245#issuecomment-192875912:546,Availability,error,error,546,"Hi Lori,. Let us start with your first question for the HF molecule. I run your job, and it terminates ""normally"". Since it is a gradient job I do not simply grab integrals from SCF, but I compute both JKFIT and RI basis DF integrals. Hence, it does not matter to start with the conventional integrals the df-mp2 code proceeds. However, the gradient is not correct because the MO coefficients are from conventional SCF, but it should be from DF-SCF. I think in the case df-mp2 gradients, if user set the conventional SCF, then we should throw an error. Alternatively we may change the reference to DF-SCF and throw a warning for user to explain what we did. Both solutions are okay for me. DFOCC uses frozen cores properly in energy and gradients. I did not add the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients. However, OCC does not use frozen cores in the energy and gradients. In case of OCC the problem is that you need to define different MO class with libtrans, which is not obvious how to do it. I know it is possible now. Andy explained it for me. As a result, there is no plan for OCC module. However, frozen virtuals will be added to DFOCC. In fact, I am waiting for RC1 release, then I will implement add it to Psi4. For the final question, your reference gradient is wrong (mp2tot_vals). This is a very good example how 3-point numeric gradients are unreliable for challenging systems. I reproduce problem with your input. However, if I use ""points 5"", all numeric gradient computations give the same result with the analytic gradients. I also run the same job with gausssian 09 with analytic gradients, which gives the same result with our analytic gradient. Here is the G09 result:. ---. Center Atomic Forces (Hartrees/Bohr); Number Number X Y Z. ---. ```; 1 1 0.000000000 0.000000000 -0.002819339; 2 9 0.000000000 0.000000000 0.002819339; ```. ---. and our analytic gradients:. -Total gradient:; Atom X Y Z; ------ ----------------- ----------------- ---------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192875912
https://github.com/psi4/psi4/issues/245#issuecomment-192875912:1207,Deployability,release,release,1207,"Since it is a gradient job I do not simply grab integrals from SCF, but I compute both JKFIT and RI basis DF integrals. Hence, it does not matter to start with the conventional integrals the df-mp2 code proceeds. However, the gradient is not correct because the MO coefficients are from conventional SCF, but it should be from DF-SCF. I think in the case df-mp2 gradients, if user set the conventional SCF, then we should throw an error. Alternatively we may change the reference to DF-SCF and throw a warning for user to explain what we did. Both solutions are okay for me. DFOCC uses frozen cores properly in energy and gradients. I did not add the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients. However, OCC does not use frozen cores in the energy and gradients. In case of OCC the problem is that you need to define different MO class with libtrans, which is not obvious how to do it. I know it is possible now. Andy explained it for me. As a result, there is no plan for OCC module. However, frozen virtuals will be added to DFOCC. In fact, I am waiting for RC1 release, then I will implement add it to Psi4. For the final question, your reference gradient is wrong (mp2tot_vals). This is a very good example how 3-point numeric gradients are unreliable for challenging systems. I reproduce problem with your input. However, if I use ""points 5"", all numeric gradient computations give the same result with the analytic gradients. I also run the same job with gausssian 09 with analytic gradients, which gives the same result with our analytic gradient. Here is the G09 result:. ---. Center Atomic Forces (Hartrees/Bohr); Number Number X Y Z. ---. ```; 1 1 0.000000000 0.000000000 -0.002819339; 2 9 0.000000000 0.000000000 0.002819339; ```. ---. and our analytic gradients:. -Total gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 0.000000000000 0.000000000000 0.002819338251; 2 0.000000000000 0.000000000000 -0.002819338251. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192875912
https://github.com/psi4/psi4/issues/245#issuecomment-192875912:726,Energy Efficiency,energy,energy,726,"Hi Lori,. Let us start with your first question for the HF molecule. I run your job, and it terminates ""normally"". Since it is a gradient job I do not simply grab integrals from SCF, but I compute both JKFIT and RI basis DF integrals. Hence, it does not matter to start with the conventional integrals the df-mp2 code proceeds. However, the gradient is not correct because the MO coefficients are from conventional SCF, but it should be from DF-SCF. I think in the case df-mp2 gradients, if user set the conventional SCF, then we should throw an error. Alternatively we may change the reference to DF-SCF and throw a warning for user to explain what we did. Both solutions are okay for me. DFOCC uses frozen cores properly in energy and gradients. I did not add the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients. However, OCC does not use frozen cores in the energy and gradients. In case of OCC the problem is that you need to define different MO class with libtrans, which is not obvious how to do it. I know it is possible now. Andy explained it for me. As a result, there is no plan for OCC module. However, frozen virtuals will be added to DFOCC. In fact, I am waiting for RC1 release, then I will implement add it to Psi4. For the final question, your reference gradient is wrong (mp2tot_vals). This is a very good example how 3-point numeric gradients are unreliable for challenging systems. I reproduce problem with your input. However, if I use ""points 5"", all numeric gradient computations give the same result with the analytic gradients. I also run the same job with gausssian 09 with analytic gradients, which gives the same result with our analytic gradient. Here is the G09 result:. ---. Center Atomic Forces (Hartrees/Bohr); Number Number X Y Z. ---. ```; 1 1 0.000000000 0.000000000 -0.002819339; 2 9 0.000000000 0.000000000 0.002819339; ```. ---. and our analytic gradients:. -Total gradient:; Atom X Y Z; ------ ----------------- ----------------- ---------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192875912
https://github.com/psi4/psi4/issues/245#issuecomment-192875912:884,Energy Efficiency,energy,energy,884,"Hi Lori,. Let us start with your first question for the HF molecule. I run your job, and it terminates ""normally"". Since it is a gradient job I do not simply grab integrals from SCF, but I compute both JKFIT and RI basis DF integrals. Hence, it does not matter to start with the conventional integrals the df-mp2 code proceeds. However, the gradient is not correct because the MO coefficients are from conventional SCF, but it should be from DF-SCF. I think in the case df-mp2 gradients, if user set the conventional SCF, then we should throw an error. Alternatively we may change the reference to DF-SCF and throw a warning for user to explain what we did. Both solutions are okay for me. DFOCC uses frozen cores properly in energy and gradients. I did not add the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients. However, OCC does not use frozen cores in the energy and gradients. In case of OCC the problem is that you need to define different MO class with libtrans, which is not obvious how to do it. I know it is possible now. Andy explained it for me. As a result, there is no plan for OCC module. However, frozen virtuals will be added to DFOCC. In fact, I am waiting for RC1 release, then I will implement add it to Psi4. For the final question, your reference gradient is wrong (mp2tot_vals). This is a very good example how 3-point numeric gradients are unreliable for challenging systems. I reproduce problem with your input. However, if I use ""points 5"", all numeric gradient computations give the same result with the analytic gradients. I also run the same job with gausssian 09 with analytic gradients, which gives the same result with our analytic gradient. Here is the G09 result:. ---. Center Atomic Forces (Hartrees/Bohr); Number Number X Y Z. ---. ```; 1 1 0.000000000 0.000000000 -0.002819339; 2 9 0.000000000 0.000000000 0.002819339; ```. ---. and our analytic gradients:. -Total gradient:; Atom X Y Z; ------ ----------------- ----------------- ---------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192875912
https://github.com/psi4/psi4/issues/245#issuecomment-192875912:151,Usability,simpl,simply,151,"Hi Lori,. Let us start with your first question for the HF molecule. I run your job, and it terminates ""normally"". Since it is a gradient job I do not simply grab integrals from SCF, but I compute both JKFIT and RI basis DF integrals. Hence, it does not matter to start with the conventional integrals the df-mp2 code proceeds. However, the gradient is not correct because the MO coefficients are from conventional SCF, but it should be from DF-SCF. I think in the case df-mp2 gradients, if user set the conventional SCF, then we should throw an error. Alternatively we may change the reference to DF-SCF and throw a warning for user to explain what we did. Both solutions are okay for me. DFOCC uses frozen cores properly in energy and gradients. I did not add the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients. However, OCC does not use frozen cores in the energy and gradients. In case of OCC the problem is that you need to define different MO class with libtrans, which is not obvious how to do it. I know it is possible now. Andy explained it for me. As a result, there is no plan for OCC module. However, frozen virtuals will be added to DFOCC. In fact, I am waiting for RC1 release, then I will implement add it to Psi4. For the final question, your reference gradient is wrong (mp2tot_vals). This is a very good example how 3-point numeric gradients are unreliable for challenging systems. I reproduce problem with your input. However, if I use ""points 5"", all numeric gradient computations give the same result with the analytic gradients. I also run the same job with gausssian 09 with analytic gradients, which gives the same result with our analytic gradient. Here is the G09 result:. ---. Center Atomic Forces (Hartrees/Bohr); Number Number X Y Z. ---. ```; 1 1 0.000000000 0.000000000 -0.002819339; 2 9 0.000000000 0.000000000 0.002819339; ```. ---. and our analytic gradients:. -Total gradient:; Atom X Y Z; ------ ----------------- ----------------- ---------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192875912
https://github.com/psi4/psi4/issues/245#issuecomment-192920861:168,Availability,error,errors,168,"My feeling is that gradient('mp2') should probably default to DF in the SCF; and the MP2, so that we have a nice user experience. We know very well by; now that the DF errors are essentially zero, and the DF algorithm is way; faster. We should print some warning to the user to explain what we did, because; admittedly this solution will cause some degree of confusion. For more advanced users, they should be able to specify where they want; conventional integrals for the SCF and/or MP2. And if they pick an; unsupported combination (conventional SCF plus DF MP2 gradients) we should; print an error message explaining that's not available. Are we still defaulting to DF for SCF? (at least when there is no post HF; module that wants the conventional ints)? Probably should until / unless; we get efficient conventional SCF, and arguably even then. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious ho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861
https://github.com/psi4/psi4/issues/245#issuecomment-192920861:596,Availability,error,error,596,"My feeling is that gradient('mp2') should probably default to DF in the SCF; and the MP2, so that we have a nice user experience. We know very well by; now that the DF errors are essentially zero, and the DF algorithm is way; faster. We should print some warning to the user to explain what we did, because; admittedly this solution will cause some degree of confusion. For more advanced users, they should be able to specify where they want; conventional integrals for the SCF and/or MP2. And if they pick an; unsupported combination (conventional SCF plus DF MP2 gradients) we should; print an error message explaining that's not available. Are we still defaulting to DF for SCF? (at least when there is no post HF; module that wants the conventional ints)? Probably should until / unless; we get efficient conventional SCF, and arguably even then. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious ho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861
https://github.com/psi4/psi4/issues/245#issuecomment-192920861:632,Availability,avail,available,632,"My feeling is that gradient('mp2') should probably default to DF in the SCF; and the MP2, so that we have a nice user experience. We know very well by; now that the DF errors are essentially zero, and the DF algorithm is way; faster. We should print some warning to the user to explain what we did, because; admittedly this solution will cause some degree of confusion. For more advanced users, they should be able to specify where they want; conventional integrals for the SCF and/or MP2. And if they pick an; unsupported combination (conventional SCF plus DF MP2 gradients) we should; print an error message explaining that's not available. Are we still defaulting to DF for SCF? (at least when there is no post HF; module that wants the conventional ints)? Probably should until / unless; we get efficient conventional SCF, and arguably even then. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious ho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861
https://github.com/psi4/psi4/issues/245#issuecomment-192920861:1505,Availability,error,error,1505,"tegrals for the SCF and/or MP2. And if they pick an; unsupported combination (conventional SCF plus DF MP2 gradients) we should; print an error message explaining that's not available. Are we still defaulting to DF for SCF? (at least when there is no post HF; module that wants the conventional ints)? Probably should until / unless; we get efficient conventional SCF, and arguably even then. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious how to do it. I know it is possible now.; > Andy explained it for me. As a result, there is no plan for OCC module.; > However, frozen virtuals will be added to DFOCC. In fact, I am waiting for; > RC1 release, then I will implement add it to Psi4.; > ; > For the final question, your reference gradient is wrong (mp2tot_vals).; > This is a very good example how 3-point numeric gradients are unreliable; > for challenging systems. I reproduce problem with you",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861
https://github.com/psi4/psi4/issues/245#issuecomment-192920861:2200,Deployability,release,release,2200,"r to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious how to do it. I know it is possible now.; > Andy explained it for me. As a result, there is no plan for OCC module.; > However, frozen virtuals will be added to DFOCC. In fact, I am waiting for; > RC1 release, then I will implement add it to Psi4.; > ; > For the final question, your reference gradient is wrong (mp2tot_vals).; > This is a very good example how 3-point numeric gradients are unreliable; > for challenging systems. I reproduce problem with your input. However, if I; > use ""points 5"", all numeric gradient computations give the same result with; > the analytic gradients. I also run the same job with gausssian 09 with; > analytic gradients, which gives the same result with our analytic gradient.; > ; > ## Here is the G09 result:; > ; > Center Atomic Forces (Hartrees/Bohr); > ; > ## Number Number X Y Z; > ; > 1 1 0.000000000 0.000000000 -0.002819339; > 2 9 0.000000000 0.000000000 0.002819339; > ; > ---; > ; > and our analytic gradients:; > ; > -Total gradient:; > Atom X Y Z; > ; > ---; > ; > 1 0.000000000000 0.000000000000 0.002819338251; > 2 0.000000000000 0.000000000000 -0.002819338251; > ; > @loriab https://github.com/loriab; > ; > —; > Reply to this email directly or view it o",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861
https://github.com/psi4/psi4/issues/245#issuecomment-192920861:799,Energy Efficiency,efficient,efficient,799,"My feeling is that gradient('mp2') should probably default to DF in the SCF; and the MP2, so that we have a nice user experience. We know very well by; now that the DF errors are essentially zero, and the DF algorithm is way; faster. We should print some warning to the user to explain what we did, because; admittedly this solution will cause some degree of confusion. For more advanced users, they should be able to specify where they want; conventional integrals for the SCF and/or MP2. And if they pick an; unsupported combination (conventional SCF plus DF MP2 gradients) we should; print an error message explaining that's not available. Are we still defaulting to DF for SCF? (at least when there is no post HF; module that wants the conventional ints)? Probably should until / unless; we get efficient conventional SCF, and arguably even then. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious ho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861
https://github.com/psi4/psi4/issues/245#issuecomment-192920861:1698,Energy Efficiency,energy,energy,1698,"least when there is no post HF; module that wants the conventional ints)? Probably should until / unless; we get efficient conventional SCF, and arguably even then. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious how to do it. I know it is possible now.; > Andy explained it for me. As a result, there is no plan for OCC module.; > However, frozen virtuals will be added to DFOCC. In fact, I am waiting for; > RC1 release, then I will implement add it to Psi4.; > ; > For the final question, your reference gradient is wrong (mp2tot_vals).; > This is a very good example how 3-point numeric gradients are unreliable; > for challenging systems. I reproduce problem with your input. However, if I; > use ""points 5"", all numeric gradient computations give the same result with; > the analytic gradients. I also run the same job with gausssian 09 with; > analytic gradients, which gives the same result wi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861
https://github.com/psi4/psi4/issues/245#issuecomment-192920861:1862,Energy Efficiency,energy,energy,1862,"en. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious how to do it. I know it is possible now.; > Andy explained it for me. As a result, there is no plan for OCC module.; > However, frozen virtuals will be added to DFOCC. In fact, I am waiting for; > RC1 release, then I will implement add it to Psi4.; > ; > For the final question, your reference gradient is wrong (mp2tot_vals).; > This is a very good example how 3-point numeric gradients are unreliable; > for challenging systems. I reproduce problem with your input. However, if I; > use ""points 5"", all numeric gradient computations give the same result with; > the analytic gradients. I also run the same job with gausssian 09 with; > analytic gradients, which gives the same result with our analytic gradient.; > ; > ## Here is the G09 result:; > ; > Center Atomic Forces (Hartrees/Bohr); > ; > ## Number Number X Y Z; > ; > 1 1 0.000000000 0.00",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861
https://github.com/psi4/psi4/issues/245#issuecomment-192920861:602,Integrability,message,message,602,"My feeling is that gradient('mp2') should probably default to DF in the SCF; and the MP2, so that we have a nice user experience. We know very well by; now that the DF errors are essentially zero, and the DF algorithm is way; faster. We should print some warning to the user to explain what we did, because; admittedly this solution will cause some degree of confusion. For more advanced users, they should be able to specify where they want; conventional integrals for the SCF and/or MP2. And if they pick an; unsupported combination (conventional SCF plus DF MP2 gradients) we should; print an error message explaining that's not available. Are we still defaulting to DF for SCF? (at least when there is no post HF; module that wants the conventional ints)? Probably should until / unless; we get efficient conventional SCF, and arguably even then. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious ho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861
https://github.com/psi4/psi4/issues/245#issuecomment-192920861:113,Usability,user experience,user experience,113,"My feeling is that gradient('mp2') should probably default to DF in the SCF; and the MP2, so that we have a nice user experience. We know very well by; now that the DF errors are essentially zero, and the DF algorithm is way; faster. We should print some warning to the user to explain what we did, because; admittedly this solution will cause some degree of confusion. For more advanced users, they should be able to specify where they want; conventional integrals for the SCF and/or MP2. And if they pick an; unsupported combination (conventional SCF plus DF MP2 gradients) we should; print an error message explaining that's not available. Are we still defaulting to DF for SCF? (at least when there is no post HF; module that wants the conventional ints)? Probably should until / unless; we get efficient conventional SCF, and arguably even then. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious ho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861
https://github.com/psi4/psi4/issues/245#issuecomment-192920861:1092,Usability,simpl,simply,1092,"experience. We know very well by; now that the DF errors are essentially zero, and the DF algorithm is way; faster. We should print some warning to the user to explain what we did, because; admittedly this solution will cause some degree of confusion. For more advanced users, they should be able to specify where they want; conventional integrals for the SCF and/or MP2. And if they pick an; unsupported combination (conventional SCF plus DF MP2 gradients) we should; print an error message explaining that's not available. Are we still defaulting to DF for SCF? (at least when there is no post HF; module that wants the conventional ints)? Probably should until / unless; we get efficient conventional SCF, and arguably even then. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious how to do it. I know it is possible now.; > Andy explained it for me. As a result, there is no plan for OCC module.; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861
https://github.com/psi4/psi4/issues/245#issuecomment-192928974:1122,Energy Efficiency,energy,energy,1122,"@CDSherrill , good to hear as I quite agree. This is just what the dfmp2 module does presently for gradients: switches `scf_type` to `df` unless the user has reqested _not_ `df`, in which case it reveals its cause of death. I'm imitating this behavior now for the other mp2 gradient routes. My Q1 for Ugur was that a conv+df gradient was proceeding, and I wanted to confirm that failing it was the correct thing to do. The complication/confusion (it even caught me last night) is that although all scf calculations _run df by default_ (handled in the driver), the `scf_type` keyword _does not default to df_ (since there's a lot more post-scf than scf out there, it's easier to handle the latter as the exception), so setting solely `mp2_type df` in a `gradient('mp2')` leads to that conv+df case (even though someone knowing psi's df-philia might expect that to lead to df+df). But don't worry about that– for mp2, at least, I'll try all combinations and arrange that only good ones get through and that the advanced defaulting is handled right. By the way, back to energies, would you expect OCC's conventional ROHF mp2 energy to match DETCI's? It doesn't, and that's the only check remaining commented out in my great mp2 cross-module comparison (https://github.com/psi4/psi4/blob/master/tests/mp2-module/input.dat#L191) OCC's df ROHF mp2 _does_ match DFMP2's.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192928974
https://github.com/psi4/psi4/issues/245#issuecomment-192928974:283,Integrability,rout,routes,283,"@CDSherrill , good to hear as I quite agree. This is just what the dfmp2 module does presently for gradients: switches `scf_type` to `df` unless the user has reqested _not_ `df`, in which case it reveals its cause of death. I'm imitating this behavior now for the other mp2 gradient routes. My Q1 for Ugur was that a conv+df gradient was proceeding, and I wanted to confirm that failing it was the correct thing to do. The complication/confusion (it even caught me last night) is that although all scf calculations _run df by default_ (handled in the driver), the `scf_type` keyword _does not default to df_ (since there's a lot more post-scf than scf out there, it's easier to handle the latter as the exception), so setting solely `mp2_type df` in a `gradient('mp2')` leads to that conv+df case (even though someone knowing psi's df-philia might expect that to lead to df+df). But don't worry about that– for mp2, at least, I'll try all combinations and arrange that only good ones get through and that the advanced defaulting is handled right. By the way, back to energies, would you expect OCC's conventional ROHF mp2 energy to match DETCI's? It doesn't, and that's the only check remaining commented out in my great mp2 cross-module comparison (https://github.com/psi4/psi4/blob/master/tests/mp2-module/input.dat#L191) OCC's df ROHF mp2 _does_ match DFMP2's.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192928974
https://github.com/psi4/psi4/issues/245#issuecomment-192928974:1291,Testability,test,tests,1291,"@CDSherrill , good to hear as I quite agree. This is just what the dfmp2 module does presently for gradients: switches `scf_type` to `df` unless the user has reqested _not_ `df`, in which case it reveals its cause of death. I'm imitating this behavior now for the other mp2 gradient routes. My Q1 for Ugur was that a conv+df gradient was proceeding, and I wanted to confirm that failing it was the correct thing to do. The complication/confusion (it even caught me last night) is that although all scf calculations _run df by default_ (handled in the driver), the `scf_type` keyword _does not default to df_ (since there's a lot more post-scf than scf out there, it's easier to handle the latter as the exception), so setting solely `mp2_type df` in a `gradient('mp2')` leads to that conv+df case (even though someone knowing psi's df-philia might expect that to lead to df+df). But don't worry about that– for mp2, at least, I'll try all combinations and arrange that only good ones get through and that the advanced defaulting is handled right. By the way, back to energies, would you expect OCC's conventional ROHF mp2 energy to match DETCI's? It doesn't, and that's the only check remaining commented out in my great mp2 cross-module comparison (https://github.com/psi4/psi4/blob/master/tests/mp2-module/input.dat#L191) OCC's df ROHF mp2 _does_ match DFMP2's.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192928974
https://github.com/psi4/psi4/issues/245#issuecomment-192934321:177,Availability,error,error,177,"@bozkaya, thanks for all the feedback!. Q1: Good, I'm going the latter route so it behaves just like the DFMP2 module. I just wanted to confirm that it was finishing cleanly in error, and it seems we agree on that. Q2: Ok, just confirming that this was a difference btwn OCC & DFOCC. I'll go ahead and check fc & non-fc independently for df and leave in a commented check for fc w/conv in case you ever get around to that. Q3: Yay! I had tried up-ing the convergence but not the findif scheme. Will do this routinely in future. Thanks for finding the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192934321
https://github.com/psi4/psi4/issues/245#issuecomment-192934321:71,Integrability,rout,route,71,"@bozkaya, thanks for all the feedback!. Q1: Good, I'm going the latter route so it behaves just like the DFMP2 module. I just wanted to confirm that it was finishing cleanly in error, and it seems we agree on that. Q2: Ok, just confirming that this was a difference btwn OCC & DFOCC. I'll go ahead and check fc & non-fc independently for df and leave in a commented check for fc w/conv in case you ever get around to that. Q3: Yay! I had tried up-ing the convergence but not the findif scheme. Will do this routinely in future. Thanks for finding the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192934321
https://github.com/psi4/psi4/issues/245#issuecomment-192934321:507,Integrability,rout,routinely,507,"@bozkaya, thanks for all the feedback!. Q1: Good, I'm going the latter route so it behaves just like the DFMP2 module. I just wanted to confirm that it was finishing cleanly in error, and it seems we agree on that. Q2: Ok, just confirming that this was a difference btwn OCC & DFOCC. I'll go ahead and check fc & non-fc independently for df and leave in a commented check for fc w/conv in case you ever get around to that. Q3: Yay! I had tried up-ing the convergence but not the findif scheme. Will do this routinely in future. Thanks for finding the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192934321
https://github.com/psi4/psi4/issues/245#issuecomment-192934321:29,Usability,feedback,feedback,29,"@bozkaya, thanks for all the feedback!. Q1: Good, I'm going the latter route so it behaves just like the DFMP2 module. I just wanted to confirm that it was finishing cleanly in error, and it seems we agree on that. Q2: Ok, just confirming that this was a difference btwn OCC & DFOCC. I'll go ahead and check fc & non-fc independently for df and leave in a commented check for fc w/conv in case you ever get around to that. Q3: Yay! I had tried up-ing the convergence but not the findif scheme. Will do this routinely in future. Thanks for finding the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192934321
https://github.com/psi4/psi4/issues/245#issuecomment-192951491:413,Availability,error,error,413,"On the first item, yes, that's what DFMP2 module does now, and that's what DFOCC will do when I get through with it. In effect yes, but there's enough combinations of scf_type/higher_type and variation among modules (some may be equipped to handle mixed df&conv) that I'm not going to reset the types bluntly. Let's see how mp2 goes first. Ok, good to know there's a plausible reason. Here's the magnitude of the error (for BH3+), if that helps, @CDSherrill . ```; mp2 rohf conv: 2 occ*.............................................PASSED # HF; mp2 rohf conv: 2 occ*: computed value (-0.0594063) does not match (-0.0609392) to 6 decimal places. # MP2 corl; mp2 rohf conv: 2 occ*: computed value (-26.0030128) does not match (-26.0045457) to 6 decimal places. # MP2 tot; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192951491
https://github.com/psi4/psi4/issues/245#issuecomment-193199034:834,Deployability,TOGGLE,TOGGLE,834,"@bozkaya, regarding `READ_SCF_3INDEX` for CD calcs, I'll just believe you. For this (https://github.com/psi4/psi4/issues/245#issuecomment-186302823) comment, though, for DF calcs, I'm not seeing that that keyword can make a difference. Toggling its presence and value in the below makes no difference to the energies. So fyi, I'm not implementing the advice in your comment for now. ```. mp2totg = psi4.Matrix(2, 3); mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; [ 0.0000000000, 0.0000000000, -0.0028301835]]; mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028193375],; [ 0.0000000000, 0.0000000000, -0.0028193375]]; mp2totg.set(mp2tot_vals). molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set scf_type pk; set mp2_type df; set points 5; set freeze_core false; set reference rhf; set READ_SCF_3INDEX true #FALSE # TOGGLE. set qc_module dfmp2 #occ # TOGGLE; energy('mp2'). compare_values(-100.0194112690226973, get_variable('scf total energy'), 6, 'scf'); compare_values(-0.203779972647527, get_variable('mp2 correlation energy'), 6, 'mp2corl'); compare_values(-100.2231912416702215, get_variable('mp2 total energy'), 6, 'mp2tot'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-193199034
https://github.com/psi4/psi4/issues/245#issuecomment-193199034:869,Deployability,TOGGLE,TOGGLE,869,"@bozkaya, regarding `READ_SCF_3INDEX` for CD calcs, I'll just believe you. For this (https://github.com/psi4/psi4/issues/245#issuecomment-186302823) comment, though, for DF calcs, I'm not seeing that that keyword can make a difference. Toggling its presence and value in the below makes no difference to the energies. So fyi, I'm not implementing the advice in your comment for now. ```. mp2totg = psi4.Matrix(2, 3); mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; [ 0.0000000000, 0.0000000000, -0.0028301835]]; mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028193375],; [ 0.0000000000, 0.0000000000, -0.0028193375]]; mp2totg.set(mp2tot_vals). molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set scf_type pk; set mp2_type df; set points 5; set freeze_core false; set reference rhf; set READ_SCF_3INDEX true #FALSE # TOGGLE. set qc_module dfmp2 #occ # TOGGLE; energy('mp2'). compare_values(-100.0194112690226973, get_variable('scf total energy'), 6, 'scf'); compare_values(-0.203779972647527, get_variable('mp2 correlation energy'), 6, 'mp2corl'); compare_values(-100.2231912416702215, get_variable('mp2 total energy'), 6, 'mp2tot'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-193199034
https://github.com/psi4/psi4/issues/245#issuecomment-193199034:877,Energy Efficiency,energy,energy,877,"@bozkaya, regarding `READ_SCF_3INDEX` for CD calcs, I'll just believe you. For this (https://github.com/psi4/psi4/issues/245#issuecomment-186302823) comment, though, for DF calcs, I'm not seeing that that keyword can make a difference. Toggling its presence and value in the below makes no difference to the energies. So fyi, I'm not implementing the advice in your comment for now. ```. mp2totg = psi4.Matrix(2, 3); mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; [ 0.0000000000, 0.0000000000, -0.0028301835]]; mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028193375],; [ 0.0000000000, 0.0000000000, -0.0028193375]]; mp2totg.set(mp2tot_vals). molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set scf_type pk; set mp2_type df; set points 5; set freeze_core false; set reference rhf; set READ_SCF_3INDEX true #FALSE # TOGGLE. set qc_module dfmp2 #occ # TOGGLE; energy('mp2'). compare_values(-100.0194112690226973, get_variable('scf total energy'), 6, 'scf'); compare_values(-0.203779972647527, get_variable('mp2 correlation energy'), 6, 'mp2corl'); compare_values(-100.2231912416702215, get_variable('mp2 total energy'), 6, 'mp2tot'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-193199034
https://github.com/psi4/psi4/issues/245#issuecomment-193199034:954,Energy Efficiency,energy,energy,954,"@bozkaya, regarding `READ_SCF_3INDEX` for CD calcs, I'll just believe you. For this (https://github.com/psi4/psi4/issues/245#issuecomment-186302823) comment, though, for DF calcs, I'm not seeing that that keyword can make a difference. Toggling its presence and value in the below makes no difference to the energies. So fyi, I'm not implementing the advice in your comment for now. ```. mp2totg = psi4.Matrix(2, 3); mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; [ 0.0000000000, 0.0000000000, -0.0028301835]]; mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028193375],; [ 0.0000000000, 0.0000000000, -0.0028193375]]; mp2totg.set(mp2tot_vals). molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set scf_type pk; set mp2_type df; set points 5; set freeze_core false; set reference rhf; set READ_SCF_3INDEX true #FALSE # TOGGLE. set qc_module dfmp2 #occ # TOGGLE; energy('mp2'). compare_values(-100.0194112690226973, get_variable('scf total energy'), 6, 'scf'); compare_values(-0.203779972647527, get_variable('mp2 correlation energy'), 6, 'mp2corl'); compare_values(-100.2231912416702215, get_variable('mp2 total energy'), 6, 'mp2tot'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-193199034
https://github.com/psi4/psi4/issues/245#issuecomment-193199034:1040,Energy Efficiency,energy,energy,1040,"@bozkaya, regarding `READ_SCF_3INDEX` for CD calcs, I'll just believe you. For this (https://github.com/psi4/psi4/issues/245#issuecomment-186302823) comment, though, for DF calcs, I'm not seeing that that keyword can make a difference. Toggling its presence and value in the below makes no difference to the energies. So fyi, I'm not implementing the advice in your comment for now. ```. mp2totg = psi4.Matrix(2, 3); mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; [ 0.0000000000, 0.0000000000, -0.0028301835]]; mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028193375],; [ 0.0000000000, 0.0000000000, -0.0028193375]]; mp2totg.set(mp2tot_vals). molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set scf_type pk; set mp2_type df; set points 5; set freeze_core false; set reference rhf; set READ_SCF_3INDEX true #FALSE # TOGGLE. set qc_module dfmp2 #occ # TOGGLE; energy('mp2'). compare_values(-100.0194112690226973, get_variable('scf total energy'), 6, 'scf'); compare_values(-0.203779972647527, get_variable('mp2 correlation energy'), 6, 'mp2corl'); compare_values(-100.2231912416702215, get_variable('mp2 total energy'), 6, 'mp2tot'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-193199034
https://github.com/psi4/psi4/issues/245#issuecomment-193199034:1127,Energy Efficiency,energy,energy,1127,"@bozkaya, regarding `READ_SCF_3INDEX` for CD calcs, I'll just believe you. For this (https://github.com/psi4/psi4/issues/245#issuecomment-186302823) comment, though, for DF calcs, I'm not seeing that that keyword can make a difference. Toggling its presence and value in the below makes no difference to the energies. So fyi, I'm not implementing the advice in your comment for now. ```. mp2totg = psi4.Matrix(2, 3); mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; [ 0.0000000000, 0.0000000000, -0.0028301835]]; mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028193375],; [ 0.0000000000, 0.0000000000, -0.0028193375]]; mp2totg.set(mp2tot_vals). molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set scf_type pk; set mp2_type df; set points 5; set freeze_core false; set reference rhf; set READ_SCF_3INDEX true #FALSE # TOGGLE. set qc_module dfmp2 #occ # TOGGLE; energy('mp2'). compare_values(-100.0194112690226973, get_variable('scf total energy'), 6, 'scf'); compare_values(-0.203779972647527, get_variable('mp2 correlation energy'), 6, 'mp2corl'); compare_values(-100.2231912416702215, get_variable('mp2 total energy'), 6, 'mp2tot'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-193199034
https://github.com/psi4/psi4/issues/245#issuecomment-193492980:1229,Deployability,TOGGLE,TOGGLE,1229,"@loriab, I would have thought DETCI ROHF MP2 would agree with other codes,; but I can think of at least a couple little reasons it might not. I should; check into this next couple weeks (help me remember). David. On Mon, Mar 7, 2016 at 5:37 AM, Lori A. Burns notifications@github.com; wrote:. > @bozkaya https://github.com/bozkaya, regarding READ_SCF_3INDEX for CD; > calcs, I'll just believe you. For this (#245 (comment); > https://github.com/psi4/psi4/issues/245#issuecomment-186302823); > comment, though, for DF calcs, I'm not seeing that that keyword can make a; > difference. Toggling its presence and value in the below makes no; > difference to the energies. So fyi, I'm not implementing the advice in your; > comment for now.; > ; > mp2totg = psi4.Matrix(2, 3); > mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; > [ 0.0000000000, 0.0000000000, -0.0028301835]]; > mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028193375],; > [ 0.0000000000, 0.0000000000, -0.0028193375]]; > mp2totg.set(mp2tot_vals); > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > set basis cc-pvdz; > set scf_type pk; > set mp2_type df; > set points 5; > set freeze_core false; > set reference rhf; > set READ_SCF_3INDEX true #FALSE # TOGGLE; > ; > set qc_module dfmp2 #occ # TOGGLE; > energy('mp2'); > ; > compare_values(-100.0194112690226973, get_variable('scf total energy'), 6, 'scf'); > compare_values(-0.203779972647527, get_variable('mp2 correlation energy'), 6, 'mp2corl'); > compare_values(-100.2231912416702215, get_variable('mp2 total energy'), 6, 'mp2tot'); > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/245#issuecomment-193199034.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-193492980
https://github.com/psi4/psi4/issues/245#issuecomment-193492980:1270,Deployability,TOGGLE,TOGGLE,1270,"@loriab, I would have thought DETCI ROHF MP2 would agree with other codes,; but I can think of at least a couple little reasons it might not. I should; check into this next couple weeks (help me remember). David. On Mon, Mar 7, 2016 at 5:37 AM, Lori A. Burns notifications@github.com; wrote:. > @bozkaya https://github.com/bozkaya, regarding READ_SCF_3INDEX for CD; > calcs, I'll just believe you. For this (#245 (comment); > https://github.com/psi4/psi4/issues/245#issuecomment-186302823); > comment, though, for DF calcs, I'm not seeing that that keyword can make a; > difference. Toggling its presence and value in the below makes no; > difference to the energies. So fyi, I'm not implementing the advice in your; > comment for now.; > ; > mp2totg = psi4.Matrix(2, 3); > mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; > [ 0.0000000000, 0.0000000000, -0.0028301835]]; > mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028193375],; > [ 0.0000000000, 0.0000000000, -0.0028193375]]; > mp2totg.set(mp2tot_vals); > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > set basis cc-pvdz; > set scf_type pk; > set mp2_type df; > set points 5; > set freeze_core false; > set reference rhf; > set READ_SCF_3INDEX true #FALSE # TOGGLE; > ; > set qc_module dfmp2 #occ # TOGGLE; > energy('mp2'); > ; > compare_values(-100.0194112690226973, get_variable('scf total energy'), 6, 'scf'); > compare_values(-0.203779972647527, get_variable('mp2 correlation energy'), 6, 'mp2corl'); > compare_values(-100.2231912416702215, get_variable('mp2 total energy'), 6, 'mp2tot'); > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/245#issuecomment-193199034.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-193492980
https://github.com/psi4/psi4/issues/245#issuecomment-193492980:1280,Energy Efficiency,energy,energy,1280,"@loriab, I would have thought DETCI ROHF MP2 would agree with other codes,; but I can think of at least a couple little reasons it might not. I should; check into this next couple weeks (help me remember). David. On Mon, Mar 7, 2016 at 5:37 AM, Lori A. Burns notifications@github.com; wrote:. > @bozkaya https://github.com/bozkaya, regarding READ_SCF_3INDEX for CD; > calcs, I'll just believe you. For this (#245 (comment); > https://github.com/psi4/psi4/issues/245#issuecomment-186302823); > comment, though, for DF calcs, I'm not seeing that that keyword can make a; > difference. Toggling its presence and value in the below makes no; > difference to the energies. So fyi, I'm not implementing the advice in your; > comment for now.; > ; > mp2totg = psi4.Matrix(2, 3); > mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; > [ 0.0000000000, 0.0000000000, -0.0028301835]]; > mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028193375],; > [ 0.0000000000, 0.0000000000, -0.0028193375]]; > mp2totg.set(mp2tot_vals); > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > set basis cc-pvdz; > set scf_type pk; > set mp2_type df; > set points 5; > set freeze_core false; > set reference rhf; > set READ_SCF_3INDEX true #FALSE # TOGGLE; > ; > set qc_module dfmp2 #occ # TOGGLE; > energy('mp2'); > ; > compare_values(-100.0194112690226973, get_variable('scf total energy'), 6, 'scf'); > compare_values(-0.203779972647527, get_variable('mp2 correlation energy'), 6, 'mp2corl'); > compare_values(-100.2231912416702215, get_variable('mp2 total energy'), 6, 'mp2tot'); > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/245#issuecomment-193199034.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-193492980
https://github.com/psi4/psi4/issues/245#issuecomment-193492980:1363,Energy Efficiency,energy,energy,1363,"@loriab, I would have thought DETCI ROHF MP2 would agree with other codes,; but I can think of at least a couple little reasons it might not. I should; check into this next couple weeks (help me remember). David. On Mon, Mar 7, 2016 at 5:37 AM, Lori A. Burns notifications@github.com; wrote:. > @bozkaya https://github.com/bozkaya, regarding READ_SCF_3INDEX for CD; > calcs, I'll just believe you. For this (#245 (comment); > https://github.com/psi4/psi4/issues/245#issuecomment-186302823); > comment, though, for DF calcs, I'm not seeing that that keyword can make a; > difference. Toggling its presence and value in the below makes no; > difference to the energies. So fyi, I'm not implementing the advice in your; > comment for now.; > ; > mp2totg = psi4.Matrix(2, 3); > mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; > [ 0.0000000000, 0.0000000000, -0.0028301835]]; > mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028193375],; > [ 0.0000000000, 0.0000000000, -0.0028193375]]; > mp2totg.set(mp2tot_vals); > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > set basis cc-pvdz; > set scf_type pk; > set mp2_type df; > set points 5; > set freeze_core false; > set reference rhf; > set READ_SCF_3INDEX true #FALSE # TOGGLE; > ; > set qc_module dfmp2 #occ # TOGGLE; > energy('mp2'); > ; > compare_values(-100.0194112690226973, get_variable('scf total energy'), 6, 'scf'); > compare_values(-0.203779972647527, get_variable('mp2 correlation energy'), 6, 'mp2corl'); > compare_values(-100.2231912416702215, get_variable('mp2 total energy'), 6, 'mp2tot'); > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/245#issuecomment-193199034.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-193492980
https://github.com/psi4/psi4/issues/245#issuecomment-193492980:1451,Energy Efficiency,energy,energy,1451,"@loriab, I would have thought DETCI ROHF MP2 would agree with other codes,; but I can think of at least a couple little reasons it might not. I should; check into this next couple weeks (help me remember). David. On Mon, Mar 7, 2016 at 5:37 AM, Lori A. Burns notifications@github.com; wrote:. > @bozkaya https://github.com/bozkaya, regarding READ_SCF_3INDEX for CD; > calcs, I'll just believe you. For this (#245 (comment); > https://github.com/psi4/psi4/issues/245#issuecomment-186302823); > comment, though, for DF calcs, I'm not seeing that that keyword can make a; > difference. Toggling its presence and value in the below makes no; > difference to the energies. So fyi, I'm not implementing the advice in your; > comment for now.; > ; > mp2totg = psi4.Matrix(2, 3); > mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; > [ 0.0000000000, 0.0000000000, -0.0028301835]]; > mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028193375],; > [ 0.0000000000, 0.0000000000, -0.0028193375]]; > mp2totg.set(mp2tot_vals); > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > set basis cc-pvdz; > set scf_type pk; > set mp2_type df; > set points 5; > set freeze_core false; > set reference rhf; > set READ_SCF_3INDEX true #FALSE # TOGGLE; > ; > set qc_module dfmp2 #occ # TOGGLE; > energy('mp2'); > ; > compare_values(-100.0194112690226973, get_variable('scf total energy'), 6, 'scf'); > compare_values(-0.203779972647527, get_variable('mp2 correlation energy'), 6, 'mp2corl'); > compare_values(-100.2231912416702215, get_variable('mp2 total energy'), 6, 'mp2tot'); > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/245#issuecomment-193199034.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-193492980
https://github.com/psi4/psi4/issues/245#issuecomment-193492980:1540,Energy Efficiency,energy,energy,1540,"@loriab, I would have thought DETCI ROHF MP2 would agree with other codes,; but I can think of at least a couple little reasons it might not. I should; check into this next couple weeks (help me remember). David. On Mon, Mar 7, 2016 at 5:37 AM, Lori A. Burns notifications@github.com; wrote:. > @bozkaya https://github.com/bozkaya, regarding READ_SCF_3INDEX for CD; > calcs, I'll just believe you. For this (#245 (comment); > https://github.com/psi4/psi4/issues/245#issuecomment-186302823); > comment, though, for DF calcs, I'm not seeing that that keyword can make a; > difference. Toggling its presence and value in the below makes no; > difference to the energies. So fyi, I'm not implementing the advice in your; > comment for now.; > ; > mp2totg = psi4.Matrix(2, 3); > mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; > [ 0.0000000000, 0.0000000000, -0.0028301835]]; > mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028193375],; > [ 0.0000000000, 0.0000000000, -0.0028193375]]; > mp2totg.set(mp2tot_vals); > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > set basis cc-pvdz; > set scf_type pk; > set mp2_type df; > set points 5; > set freeze_core false; > set reference rhf; > set READ_SCF_3INDEX true #FALSE # TOGGLE; > ; > set qc_module dfmp2 #occ # TOGGLE; > energy('mp2'); > ; > compare_values(-100.0194112690226973, get_variable('scf total energy'), 6, 'scf'); > compare_values(-0.203779972647527, get_variable('mp2 correlation energy'), 6, 'mp2corl'); > compare_values(-100.2231912416702215, get_variable('mp2 total energy'), 6, 'mp2tot'); > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/245#issuecomment-193199034.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-193492980
https://github.com/psi4/psi4/issues/245#issuecomment-195054616:16,Testability,test,testing,16,"Hi Lori,. I was testing the new call name conventions for a while. Now, we have MP2_TYPE, MP_TYPE, CC_TYPE, CEPA_TYPE to switch between DF/CD/CONV. I guess it will be somewhat confusing for users to remember all of these options. . I think we can merge all this options into a global option. For example, we may define CORRELATION_TYPE as a new option (or POST_HF_TYPE), and instead of MP2_TYPE/MP_TYPE/CC_TYPE/CEPA_TYPE we will have a global option which will switch between DF/CD/CONV. Hence, with this definition we will just need to set SCF_TYPE and CORRELATION_TYPE options. What do you think? @loriab @CDSherrill . Ugur",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-195054616
https://github.com/psi4/psi4/issues/245#issuecomment-195060159:279,Usability,simpl,simple,279,"Actually, we have CI_TYPE but not CEPA_TYPE now (or will once https://github.com/psi4/psi4/pull/306 merges in), so 5: SCF_TYPE, MP2_TYPE, MP_TYPE, CC_TYPE, CI_TYPE. The first has many algorithms, the others just DF/CD/CONV. There's also a few strays: DCFT_TYPE and OPT_TYPE. For simple calculations, a SCF_TYPE and CORRELATION_TYPE, as you suggest, works. But I'm concerned about targeting a complete options set for composite jobs (e.g., SCF + extrapolated MP2 + CCSD(T) delta correction). There, you might want the first two terms DF and the last CONV. When I started going crazy with _TYPE keywords, I had one for each method (e.g., MP4SDQ_TYPE). The current lineup is a compromise between broad (CORRELATION_TYPE) and specific (LCCD_TYPE), and I think I'd like to see how the use-cases develop along that spectrum. Thanks for thinking about this, though!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-195060159
https://github.com/psi4/psi4/issues/245#issuecomment-195061636:552,Usability,simpl,simple,552,"Hm wonder if we could do as Lori suggests as the bulletproof way to do it,; but allow CORRELATION_TYPE as the quick and easy default that will usually; work for most things. On Thursday, March 10, 2016, Lori A. Burns notifications@github.com wrote:. > Actually, we have CI_TYPE but not CEPA_TYPE now (or will once #306; > https://github.com/psi4/psi4/pull/306 merges in), so 5: SCF_TYPE,; > MP2_TYPE, MP_TYPE, CC_TYPE, CI_TYPE. The first has many algorithms, the; > others just DF/CD/CONV. There's also a few strays: DCFT_TYPE and OPT_TYPE.; > ; > For simple calculations, a SCF_TYPE and CORRELATION_TYPE, as you suggest,; > works. But I'm concerned about targeting a complete options set for; > composite jobs (e.g., SCF + extrapolated MP2 + CCSD(T) delta correction).; > There, you might want the first two terms DF and the last CONV.; > ; > When I started going crazy with _TYPE keywords, I had one for each method; > (e.g., MP4SDQ_TYPE). The current lineup is a compromise between broad; > (CORRELATION_TYPE) and specific (LCCD_TYPE), and I think I'd like to see; > how the use-cases develop along that spectrum. Thanks for thinking about; > this, though!; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/245#issuecomment-195060159.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-195061636
https://github.com/psi4/psi4/issues/245#issuecomment-196456574:195,Testability,test,test,195,"Thanks to all the good discussions on this thread, I think we agree that df+conv mp2 gradients are not going to materialize and for good reason. With 16ccace5b87e92334e3ff7a6ca9a5a536cc1ecaf and test case https://github.com/psi4/psi4/blob/master/tests/mp2-module/input.dat and independent tests that show auto switching scf_type to conv when conv mp2 gradients requested and scf_type unspecified working. So closing this out with #306 . The detci rohf mp2 is moved to #311 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-196456574
https://github.com/psi4/psi4/issues/245#issuecomment-196456574:246,Testability,test,tests,246,"Thanks to all the good discussions on this thread, I think we agree that df+conv mp2 gradients are not going to materialize and for good reason. With 16ccace5b87e92334e3ff7a6ca9a5a536cc1ecaf and test case https://github.com/psi4/psi4/blob/master/tests/mp2-module/input.dat and independent tests that show auto switching scf_type to conv when conv mp2 gradients requested and scf_type unspecified working. So closing this out with #306 . The detci rohf mp2 is moved to #311 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-196456574
https://github.com/psi4/psi4/issues/245#issuecomment-196456574:289,Testability,test,tests,289,"Thanks to all the good discussions on this thread, I think we agree that df+conv mp2 gradients are not going to materialize and for good reason. With 16ccace5b87e92334e3ff7a6ca9a5a536cc1ecaf and test case https://github.com/psi4/psi4/blob/master/tests/mp2-module/input.dat and independent tests that show auto switching scf_type to conv when conv mp2 gradients requested and scf_type unspecified working. So closing this out with #306 . The detci rohf mp2 is moved to #311 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-196456574
https://github.com/psi4/psi4/pull/246#issuecomment-183784922:15,Deployability,continuous,continuous-integration,15,"I keep seeing ""continuous-integration/travis-ci — Waiting for status to be reported"", and it doesn't appear to have run your merge of Lori's commits. Is anybody else seeing the same?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183784922
https://github.com/psi4/psi4/pull/246#issuecomment-183784922:26,Integrability,integrat,integration,26,"I keep seeing ""continuous-integration/travis-ci — Waiting for status to be reported"", and it doesn't appear to have run your merge of Lori's commits. Is anybody else seeing the same?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183784922
https://github.com/psi4/psi4/pull/246#issuecomment-183790721:227,Availability,error,error,227,"That's the merge of @loriab's new printing / running machinery into the existing master, which we expect to pass. What we need to see is 9c5d3c3 of this PR. It's not running because of merge conflicts (I only just noticed that error message), so you'll need to pull the master branch in and add the conflict resolution to the PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183790721
https://github.com/psi4/psi4/pull/246#issuecomment-183790721:233,Integrability,message,message,233,"That's the merge of @loriab's new printing / running machinery into the existing master, which we expect to pass. What we need to see is 9c5d3c3 of this PR. It's not running because of merge conflicts (I only just noticed that error message), so you'll need to pull the master branch in and add the conflict resolution to the PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183790721
https://github.com/psi4/psi4/pull/246#issuecomment-183819784:345,Security,access,access,345,"Not helping the current discussion, but if `DF` and `RI` modifiers are no longer valid, the manual needs to be modified accordingly. Is it already done ? I had a look but could not find it. Also, if someone could write somewhere (for example in the Psi4 forum) how the TravisCI works, i.e. how do we know what fails and which details do we have access to, that would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183819784
https://github.com/psi4/psi4/pull/246#issuecomment-183823400:184,Availability,error,error,184,"Well, https://github.com/dgasmith/psi4public/blob/wavefunction_pass/cmake/ConfigPCMSolver.cmake#L78 needs `lib` --> `share` for one thing. Can you do that, then tell me what your next error is? Both @dgasmith and I have been using pcmsolver from metapackage and so may have evaded a few issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183823400
https://github.com/psi4/psi4/pull/246#issuecomment-183823400:74,Modifiability,Config,ConfigPCMSolver,74,"Well, https://github.com/dgasmith/psi4public/blob/wavefunction_pass/cmake/ConfigPCMSolver.cmake#L78 needs `lib` --> `share` for one thing. Can you do that, then tell me what your next error is? Both @dgasmith and I have been using pcmsolver from metapackage and so may have evaded a few issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183823400
https://github.com/psi4/psi4/pull/246#issuecomment-183824678:55,Testability,test,test,55,"Actually, it's alarming that the pcm cases were in the test suite. If no fortran, then enable_pcmsolver should have been off and the tests/pcmsolver subdir never added. . > On Feb 14, 2016, at 12:36 AM, Andy Simmonett notifications@github.com wrote:; > ; > I forgot to specify a fortran compiler, so it didn't actually build PCMSolver. My bad. That's still a bug though; we should run just fine without PCM so we should probe that a little. I'm currently torturing my laptop with a clean build that actually does include PCM; I'll let you know what I find. The ""good"" news is that it's completely reproducible on a vanilla OSX setup.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183824678
https://github.com/psi4/psi4/pull/246#issuecomment-183824678:133,Testability,test,tests,133,"Actually, it's alarming that the pcm cases were in the test suite. If no fortran, then enable_pcmsolver should have been off and the tests/pcmsolver subdir never added. . > On Feb 14, 2016, at 12:36 AM, Andy Simmonett notifications@github.com wrote:; > ; > I forgot to specify a fortran compiler, so it didn't actually build PCMSolver. My bad. That's still a bug though; we should run just fine without PCM so we should probe that a little. I'm currently torturing my laptop with a clean build that actually does include PCM; I'll let you know what I find. The ""good"" news is that it's completely reproducible on a vanilla OSX setup.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183824678
https://github.com/psi4/psi4/pull/246#issuecomment-183827154:98,Deployability,update,update,98,"Your suggestion fixed the problem on my machine, @loriab. Great detective work. I just pushed the update, so we'll see if that fixes it. The non-PCM thing needs to be figured out some time, but I think it can wait until the rest of the merge issues are resolved.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183827154
https://github.com/psi4/psi4/pull/246#issuecomment-183827154:64,Safety,detect,detective,64,"Your suggestion fixed the problem on my machine, @loriab. Great detective work. I just pushed the update, so we'll see if that fixes it. The non-PCM thing needs to be figured out some time, but I think it can wait until the rest of the merge issues are resolved.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183827154
https://github.com/psi4/psi4/pull/246#issuecomment-183827620:253,Deployability,update,update,253,"Yay. If that was the only lib --> share I missed, I'll be pleased. . > On Feb 14, 2016, at 12:59 AM, Andy Simmonett notifications@github.com wrote:; > ; > Your suggestion fixed the problem on my machine, @loriab. Great detective work. I just pushed the update, so we'll see if that fixes it. The non-PCM thing needs to be figured out some time, but I think it can wait until the rest of the merge issues are resolved.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183827620
https://github.com/psi4/psi4/pull/246#issuecomment-183827620:219,Safety,detect,detective,219,"Yay. If that was the only lib --> share I missed, I'll be pleased. . > On Feb 14, 2016, at 12:59 AM, Andy Simmonett notifications@github.com wrote:; > ; > Your suggestion fixed the problem on my machine, @loriab. Great detective work. I just pushed the update, so we'll see if that fixes it. The non-PCM thing needs to be figured out some time, but I think it can wait until the rest of the merge issues are resolved.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183827620
https://github.com/psi4/psi4/pull/246#issuecomment-183835547:127,Testability,test,tests,127,Looks great so far! I retract my statement about the code being bad in the absence of PCMSolver; I wasn't actually running the tests themselves. I just grabbed a PCM input from the test suite and it's no surprise that it failed when I didn't compile PCM.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183835547
https://github.com/psi4/psi4/pull/246#issuecomment-183835547:181,Testability,test,test,181,Looks great so far! I retract my statement about the code being bad in the absence of PCMSolver; I wasn't actually running the tests themselves. I just grabbed a PCM input from the test suite and it's no surprise that it failed when I didn't compile PCM.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183835547
https://github.com/psi4/psi4/pull/247#issuecomment-183702374:8,Testability,log,log,8,"Is `run.log` posted to the travis output log? If so, I would add a banner between the running of the test cases and printing their outputs for clarity. PS: I added several people to my psi4/psi4 fork so that they can make their own changes as desired. It looks like the organization permission transference is different for public and private repositories?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/247#issuecomment-183702374
https://github.com/psi4/psi4/pull/247#issuecomment-183702374:41,Testability,log,log,41,"Is `run.log` posted to the travis output log? If so, I would add a banner between the running of the test cases and printing their outputs for clarity. PS: I added several people to my psi4/psi4 fork so that they can make their own changes as desired. It looks like the organization permission transference is different for public and private repositories?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/247#issuecomment-183702374
https://github.com/psi4/psi4/pull/247#issuecomment-183702374:101,Testability,test,test,101,"Is `run.log` posted to the travis output log? If so, I would add a banner between the running of the test cases and printing their outputs for clarity. PS: I added several people to my psi4/psi4 fork so that they can make their own changes as desired. It looks like the organization permission transference is different for public and private repositories?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/247#issuecomment-183702374
https://github.com/psi4/psi4/pull/247#issuecomment-183716683:78,Testability,log,log,78,"Ok, it looks like stdout is all that matters. Is there any known use for `run.log`. Will double up the printing so that everything reaches the screen.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/247#issuecomment-183716683
https://github.com/psi4/psi4/pull/247#issuecomment-183716956:138,Availability,failure,failures,138,"Run.log was a dirty hack that I came up with, to allow the test info to stream to stdout, but have a file to be able to parse to identify failures after the fact. The PIPE machinery in Python's subprocess will allow the same behavior.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/247#issuecomment-183716956
https://github.com/psi4/psi4/pull/247#issuecomment-183716956:4,Testability,log,log,4,"Run.log was a dirty hack that I came up with, to allow the test info to stream to stdout, but have a file to be able to parse to identify failures after the fact. The PIPE machinery in Python's subprocess will allow the same behavior.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/247#issuecomment-183716956
https://github.com/psi4/psi4/pull/247#issuecomment-183716956:59,Testability,test,test,59,"Run.log was a dirty hack that I came up with, to allow the test info to stream to stdout, but have a file to be able to parse to identify failures after the fact. The PIPE machinery in Python's subprocess will allow the same behavior.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/247#issuecomment-183716956
https://github.com/psi4/psi4/pull/247#issuecomment-183717105:111,Deployability,continuous,continuous,111,"And, yes, the reason for using tee so extensively in my Travis scripts is twofold: a) making the output stream continuous so that we don't timeout, as @jturney said, and b) allowing us to filter extraneous output to ensure we don't print too much.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/247#issuecomment-183717105
https://github.com/psi4/psi4/pull/247#issuecomment-183717105:139,Safety,timeout,timeout,139,"And, yes, the reason for using tee so extensively in my Travis scripts is twofold: a) making the output stream continuous so that we don't timeout, as @jturney said, and b) allowing us to filter extraneous output to ensure we don't print too much.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/247#issuecomment-183717105
https://github.com/psi4/psi4/pull/248#issuecomment-183819601:249,Integrability,rout,routine,249,"Well, I wholly approve of this sentence: ""Please note that ; sSAPT0 is thus not the same as requesting `exch_scale_alpha 3.0`."" For the psivars, I think I'll just compute from the keyword in the driver, same as you do and pass it along the the qcdb routine (which doesn't access `psi4` commands. Below is what you're doing I think. ``` python; alpha = psi4.get_option('SAPT', 'EXCH_SCAL_ALPHA'); scale = 1.0 if alpha is True else (0.0 if alpha is False else alpha); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/248#issuecomment-183819601
https://github.com/psi4/psi4/pull/248#issuecomment-183819601:272,Security,access,access,272,"Well, I wholly approve of this sentence: ""Please note that ; sSAPT0 is thus not the same as requesting `exch_scale_alpha 3.0`."" For the psivars, I think I'll just compute from the keyword in the driver, same as you do and pass it along the the qcdb routine (which doesn't access `psi4` commands. Below is what you're doing I think. ``` python; alpha = psi4.get_option('SAPT', 'EXCH_SCAL_ALPHA'); scale = 1.0 if alpha is True else (0.0 if alpha is False else alpha); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/248#issuecomment-183819601
https://github.com/psi4/psi4/pull/248#issuecomment-184408121:0,Testability,Test,Test,0,Test of @psi4/p4pub-rw. Jerome says this is ready to merge when travis is complete.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/248#issuecomment-184408121
https://github.com/psi4/psi4/issues/253#issuecomment-184197959:67,Security,firewall,firewall,67,Thank you for the detailed report. You're probably right about the firewall causing the `pubchem*` tests to fail. I'll see what I can figure out about the others.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184197959
https://github.com/psi4/psi4/issues/253#issuecomment-184197959:99,Testability,test,tests,99,Thank you for the detailed report. You're probably right about the firewall causing the `pubchem*` tests to fail. I'll see what I can figure out about the others.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184197959
https://github.com/psi4/psi4/issues/253#issuecomment-184200636:21,Availability,failure,failure,21,"The sowreap one is a failure of both the capability and the testing mechanics. It's been removed temporarily through wfn_pass PR. Sapt4 changes are due to actually turning on by default the nat orb tricks we always recommended. That test case has been modified to pass also in wfn_pass PR. The opt one sounds like an actual problem. . Sent from my iPhone. > On Feb 15, 2016, at 8:06 AM, Justin Turney notifications@github.com wrote:; > ; > Thank you for the detailed report. You're probably right about the firewall causing the pubchem\* tests to fail. I'll see what I can figure out about the others.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184200636
https://github.com/psi4/psi4/issues/253#issuecomment-184200636:507,Security,firewall,firewall,507,"The sowreap one is a failure of both the capability and the testing mechanics. It's been removed temporarily through wfn_pass PR. Sapt4 changes are due to actually turning on by default the nat orb tricks we always recommended. That test case has been modified to pass also in wfn_pass PR. The opt one sounds like an actual problem. . Sent from my iPhone. > On Feb 15, 2016, at 8:06 AM, Justin Turney notifications@github.com wrote:; > ; > Thank you for the detailed report. You're probably right about the firewall causing the pubchem\* tests to fail. I'll see what I can figure out about the others.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184200636
https://github.com/psi4/psi4/issues/253#issuecomment-184200636:60,Testability,test,testing,60,"The sowreap one is a failure of both the capability and the testing mechanics. It's been removed temporarily through wfn_pass PR. Sapt4 changes are due to actually turning on by default the nat orb tricks we always recommended. That test case has been modified to pass also in wfn_pass PR. The opt one sounds like an actual problem. . Sent from my iPhone. > On Feb 15, 2016, at 8:06 AM, Justin Turney notifications@github.com wrote:; > ; > Thank you for the detailed report. You're probably right about the firewall causing the pubchem\* tests to fail. I'll see what I can figure out about the others.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184200636
https://github.com/psi4/psi4/issues/253#issuecomment-184200636:233,Testability,test,test,233,"The sowreap one is a failure of both the capability and the testing mechanics. It's been removed temporarily through wfn_pass PR. Sapt4 changes are due to actually turning on by default the nat orb tricks we always recommended. That test case has been modified to pass also in wfn_pass PR. The opt one sounds like an actual problem. . Sent from my iPhone. > On Feb 15, 2016, at 8:06 AM, Justin Turney notifications@github.com wrote:; > ; > Thank you for the detailed report. You're probably right about the firewall causing the pubchem\* tests to fail. I'll see what I can figure out about the others.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184200636
https://github.com/psi4/psi4/issues/253#issuecomment-184200636:538,Testability,test,tests,538,"The sowreap one is a failure of both the capability and the testing mechanics. It's been removed temporarily through wfn_pass PR. Sapt4 changes are due to actually turning on by default the nat orb tricks we always recommended. That test case has been modified to pass also in wfn_pass PR. The opt one sounds like an actual problem. . Sent from my iPhone. > On Feb 15, 2016, at 8:06 AM, Justin Turney notifications@github.com wrote:; > ; > Thank you for the detailed report. You're probably right about the firewall causing the pubchem\* tests to fail. I'll see what I can figure out about the others.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184200636
https://github.com/psi4/psi4/issues/253#issuecomment-184219439:110,Performance,perform,performing,110,"`opt10` is too big for a test case: 15 atoms, C1 symmetry, 322 basis functions, requests 32 GB of memory, and performing a transition state geometry optimization with an initial Hessian by finite difference of gradients. The calculation timed out on the 13 of 79 gradient displacements of the initial Hessian. The only thing that does help is that it's a DF-MP2 calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184219439
https://github.com/psi4/psi4/issues/253#issuecomment-184219439:149,Performance,optimiz,optimization,149,"`opt10` is too big for a test case: 15 atoms, C1 symmetry, 322 basis functions, requests 32 GB of memory, and performing a transition state geometry optimization with an initial Hessian by finite difference of gradients. The calculation timed out on the 13 of 79 gradient displacements of the initial Hessian. The only thing that does help is that it's a DF-MP2 calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184219439
https://github.com/psi4/psi4/issues/253#issuecomment-184219439:25,Testability,test,test,25,"`opt10` is too big for a test case: 15 atoms, C1 symmetry, 322 basis functions, requests 32 GB of memory, and performing a transition state geometry optimization with an initial Hessian by finite difference of gradients. The calculation timed out on the 13 of 79 gradient displacements of the initial Hessian. The only thing that does help is that it's a DF-MP2 calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184219439
https://github.com/psi4/psi4/issues/253#issuecomment-184220315:94,Energy Efficiency,reduce,reduce,94,"Ah yes, this is no longer a used test case in wavefunction_pass. @psi-rking is it possible to reduce the basis set to something fairly quick?. > On Feb 15, 2016, at 9:01 AM, Justin Turney notifications@github.com wrote:; > ; > opt10 is too big for a test case: 15 atoms, C1 symmetry, 322 basis functions, requests 32 GB of memory, and performing a transition state geometry optimization with an initial Hessian by finite difference of gradients. The calculation timed out on the 13 of 79 gradient displacements of the initial Hessian. The only thing that does help is that it's a DF-MP2 calculation.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184219439.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184220315
https://github.com/psi4/psi4/issues/253#issuecomment-184220315:335,Performance,perform,performing,335,"Ah yes, this is no longer a used test case in wavefunction_pass. @psi-rking is it possible to reduce the basis set to something fairly quick?. > On Feb 15, 2016, at 9:01 AM, Justin Turney notifications@github.com wrote:; > ; > opt10 is too big for a test case: 15 atoms, C1 symmetry, 322 basis functions, requests 32 GB of memory, and performing a transition state geometry optimization with an initial Hessian by finite difference of gradients. The calculation timed out on the 13 of 79 gradient displacements of the initial Hessian. The only thing that does help is that it's a DF-MP2 calculation.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184219439.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184220315
https://github.com/psi4/psi4/issues/253#issuecomment-184220315:374,Performance,optimiz,optimization,374,"Ah yes, this is no longer a used test case in wavefunction_pass. @psi-rking is it possible to reduce the basis set to something fairly quick?. > On Feb 15, 2016, at 9:01 AM, Justin Turney notifications@github.com wrote:; > ; > opt10 is too big for a test case: 15 atoms, C1 symmetry, 322 basis functions, requests 32 GB of memory, and performing a transition state geometry optimization with an initial Hessian by finite difference of gradients. The calculation timed out on the 13 of 79 gradient displacements of the initial Hessian. The only thing that does help is that it's a DF-MP2 calculation.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184219439.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184220315
https://github.com/psi4/psi4/issues/253#issuecomment-184220315:33,Testability,test,test,33,"Ah yes, this is no longer a used test case in wavefunction_pass. @psi-rking is it possible to reduce the basis set to something fairly quick?. > On Feb 15, 2016, at 9:01 AM, Justin Turney notifications@github.com wrote:; > ; > opt10 is too big for a test case: 15 atoms, C1 symmetry, 322 basis functions, requests 32 GB of memory, and performing a transition state geometry optimization with an initial Hessian by finite difference of gradients. The calculation timed out on the 13 of 79 gradient displacements of the initial Hessian. The only thing that does help is that it's a DF-MP2 calculation.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184219439.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184220315
https://github.com/psi4/psi4/issues/253#issuecomment-184220315:250,Testability,test,test,250,"Ah yes, this is no longer a used test case in wavefunction_pass. @psi-rking is it possible to reduce the basis set to something fairly quick?. > On Feb 15, 2016, at 9:01 AM, Justin Turney notifications@github.com wrote:; > ; > opt10 is too big for a test case: 15 atoms, C1 symmetry, 322 basis functions, requests 32 GB of memory, and performing a transition state geometry optimization with an initial Hessian by finite difference of gradients. The calculation timed out on the 13 of 79 gradient displacements of the initial Hessian. The only thing that does help is that it's a DF-MP2 calculation.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184219439.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184220315
https://github.com/psi4/psi4/issues/253#issuecomment-184227998:731,Energy Efficiency,reduce,reduce,731,"This is an actual representative of the failed (large) optimizations that I; constantly get forwarded to me! :) I don't choose them. Do we not have a; way to leave test cases, even 'longertests' in there without them; interfering in the normal course?. The purpose of this tests is that it has challenging quasi-linear angles in; it. I have no objection to reducing the calculation. Perhaps removing the; polarization functions would be enough?. -Rollin. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Mon, Feb 15, 2016 at 8:04 AM, Daniel Smith notifications@github.com; wrote:. > Ah yes, this is no longer a used test cases in wavefunction_pass.; > @psi-rking is it possible to reduce the basis set to something fairly quick?; > ; > Daniel Smith; > malorian@me.com; > ; > > On Feb 15, 2016, at 9:01 AM, Justin Turney notifications@github.com; > > wrote:; > > ; > > opt10 is too big for a test case: 15 atoms, C1 symmetry, 322 basis; > > functions, requests 32 GB of memory, and performing a transition state; > > geometry optimization with an initial Hessian by finite difference of; > > gradients. The calculation timed out on the 13 of 79 gradient displacements; > > of the initial Hessian. The only thing that does help is that it's a DF-MP2; > > calculation.; > > ; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/issues/253#issuecomment-184219439>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-184220315.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184227998
https://github.com/psi4/psi4/issues/253#issuecomment-184227998:55,Performance,optimiz,optimizations,55,"This is an actual representative of the failed (large) optimizations that I; constantly get forwarded to me! :) I don't choose them. Do we not have a; way to leave test cases, even 'longertests' in there without them; interfering in the normal course?. The purpose of this tests is that it has challenging quasi-linear angles in; it. I have no objection to reducing the calculation. Perhaps removing the; polarization functions would be enough?. -Rollin. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Mon, Feb 15, 2016 at 8:04 AM, Daniel Smith notifications@github.com; wrote:. > Ah yes, this is no longer a used test cases in wavefunction_pass.; > @psi-rking is it possible to reduce the basis set to something fairly quick?; > ; > Daniel Smith; > malorian@me.com; > ; > > On Feb 15, 2016, at 9:01 AM, Justin Turney notifications@github.com; > > wrote:; > > ; > > opt10 is too big for a test case: 15 atoms, C1 symmetry, 322 basis; > > functions, requests 32 GB of memory, and performing a transition state; > > geometry optimization with an initial Hessian by finite difference of; > > gradients. The calculation timed out on the 13 of 79 gradient displacements; > > of the initial Hessian. The only thing that does help is that it's a DF-MP2; > > calculation.; > > ; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/issues/253#issuecomment-184219439>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-184220315.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184227998
https://github.com/psi4/psi4/issues/253#issuecomment-184227998:1031,Performance,perform,performing,1031,"This is an actual representative of the failed (large) optimizations that I; constantly get forwarded to me! :) I don't choose them. Do we not have a; way to leave test cases, even 'longertests' in there without them; interfering in the normal course?. The purpose of this tests is that it has challenging quasi-linear angles in; it. I have no objection to reducing the calculation. Perhaps removing the; polarization functions would be enough?. -Rollin. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Mon, Feb 15, 2016 at 8:04 AM, Daniel Smith notifications@github.com; wrote:. > Ah yes, this is no longer a used test cases in wavefunction_pass.; > @psi-rking is it possible to reduce the basis set to something fairly quick?; > ; > Daniel Smith; > malorian@me.com; > ; > > On Feb 15, 2016, at 9:01 AM, Justin Turney notifications@github.com; > > wrote:; > > ; > > opt10 is too big for a test case: 15 atoms, C1 symmetry, 322 basis; > > functions, requests 32 GB of memory, and performing a transition state; > > geometry optimization with an initial Hessian by finite difference of; > > gradients. The calculation timed out on the 13 of 79 gradient displacements; > > of the initial Hessian. The only thing that does help is that it's a DF-MP2; > > calculation.; > > ; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/issues/253#issuecomment-184219439>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-184220315.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184227998
https://github.com/psi4/psi4/issues/253#issuecomment-184227998:1075,Performance,optimiz,optimization,1075,"This is an actual representative of the failed (large) optimizations that I; constantly get forwarded to me! :) I don't choose them. Do we not have a; way to leave test cases, even 'longertests' in there without them; interfering in the normal course?. The purpose of this tests is that it has challenging quasi-linear angles in; it. I have no objection to reducing the calculation. Perhaps removing the; polarization functions would be enough?. -Rollin. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Mon, Feb 15, 2016 at 8:04 AM, Daniel Smith notifications@github.com; wrote:. > Ah yes, this is no longer a used test cases in wavefunction_pass.; > @psi-rking is it possible to reduce the basis set to something fairly quick?; > ; > Daniel Smith; > malorian@me.com; > ; > > On Feb 15, 2016, at 9:01 AM, Justin Turney notifications@github.com; > > wrote:; > > ; > > opt10 is too big for a test case: 15 atoms, C1 symmetry, 322 basis; > > functions, requests 32 GB of memory, and performing a transition state; > > geometry optimization with an initial Hessian by finite difference of; > > gradients. The calculation timed out on the 13 of 79 gradient displacements; > > of the initial Hessian. The only thing that does help is that it's a DF-MP2; > > calculation.; > > ; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/issues/253#issuecomment-184219439>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-184220315.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184227998
https://github.com/psi4/psi4/issues/253#issuecomment-184227998:164,Testability,test,test,164,"This is an actual representative of the failed (large) optimizations that I; constantly get forwarded to me! :) I don't choose them. Do we not have a; way to leave test cases, even 'longertests' in there without them; interfering in the normal course?. The purpose of this tests is that it has challenging quasi-linear angles in; it. I have no objection to reducing the calculation. Perhaps removing the; polarization functions would be enough?. -Rollin. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Mon, Feb 15, 2016 at 8:04 AM, Daniel Smith notifications@github.com; wrote:. > Ah yes, this is no longer a used test cases in wavefunction_pass.; > @psi-rking is it possible to reduce the basis set to something fairly quick?; > ; > Daniel Smith; > malorian@me.com; > ; > > On Feb 15, 2016, at 9:01 AM, Justin Turney notifications@github.com; > > wrote:; > > ; > > opt10 is too big for a test case: 15 atoms, C1 symmetry, 322 basis; > > functions, requests 32 GB of memory, and performing a transition state; > > geometry optimization with an initial Hessian by finite difference of; > > gradients. The calculation timed out on the 13 of 79 gradient displacements; > > of the initial Hessian. The only thing that does help is that it's a DF-MP2; > > calculation.; > > ; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/issues/253#issuecomment-184219439>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-184220315.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184227998
https://github.com/psi4/psi4/issues/253#issuecomment-184227998:273,Testability,test,tests,273,"This is an actual representative of the failed (large) optimizations that I; constantly get forwarded to me! :) I don't choose them. Do we not have a; way to leave test cases, even 'longertests' in there without them; interfering in the normal course?. The purpose of this tests is that it has challenging quasi-linear angles in; it. I have no objection to reducing the calculation. Perhaps removing the; polarization functions would be enough?. -Rollin. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Mon, Feb 15, 2016 at 8:04 AM, Daniel Smith notifications@github.com; wrote:. > Ah yes, this is no longer a used test cases in wavefunction_pass.; > @psi-rking is it possible to reduce the basis set to something fairly quick?; > ; > Daniel Smith; > malorian@me.com; > ; > > On Feb 15, 2016, at 9:01 AM, Justin Turney notifications@github.com; > > wrote:; > > ; > > opt10 is too big for a test case: 15 atoms, C1 symmetry, 322 basis; > > functions, requests 32 GB of memory, and performing a transition state; > > geometry optimization with an initial Hessian by finite difference of; > > gradients. The calculation timed out on the 13 of 79 gradient displacements; > > of the initial Hessian. The only thing that does help is that it's a DF-MP2; > > calculation.; > > ; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/issues/253#issuecomment-184219439>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-184220315.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184227998
https://github.com/psi4/psi4/issues/253#issuecomment-184227998:666,Testability,test,test,666,"This is an actual representative of the failed (large) optimizations that I; constantly get forwarded to me! :) I don't choose them. Do we not have a; way to leave test cases, even 'longertests' in there without them; interfering in the normal course?. The purpose of this tests is that it has challenging quasi-linear angles in; it. I have no objection to reducing the calculation. Perhaps removing the; polarization functions would be enough?. -Rollin. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Mon, Feb 15, 2016 at 8:04 AM, Daniel Smith notifications@github.com; wrote:. > Ah yes, this is no longer a used test cases in wavefunction_pass.; > @psi-rking is it possible to reduce the basis set to something fairly quick?; > ; > Daniel Smith; > malorian@me.com; > ; > > On Feb 15, 2016, at 9:01 AM, Justin Turney notifications@github.com; > > wrote:; > > ; > > opt10 is too big for a test case: 15 atoms, C1 symmetry, 322 basis; > > functions, requests 32 GB of memory, and performing a transition state; > > geometry optimization with an initial Hessian by finite difference of; > > gradients. The calculation timed out on the 13 of 79 gradient displacements; > > of the initial Hessian. The only thing that does help is that it's a DF-MP2; > > calculation.; > > ; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/issues/253#issuecomment-184219439>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-184220315.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184227998
https://github.com/psi4/psi4/issues/253#issuecomment-184227998:941,Testability,test,test,941,"This is an actual representative of the failed (large) optimizations that I; constantly get forwarded to me! :) I don't choose them. Do we not have a; way to leave test cases, even 'longertests' in there without them; interfering in the normal course?. The purpose of this tests is that it has challenging quasi-linear angles in; it. I have no objection to reducing the calculation. Perhaps removing the; polarization functions would be enough?. -Rollin. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Mon, Feb 15, 2016 at 8:04 AM, Daniel Smith notifications@github.com; wrote:. > Ah yes, this is no longer a used test cases in wavefunction_pass.; > @psi-rking is it possible to reduce the basis set to something fairly quick?; > ; > Daniel Smith; > malorian@me.com; > ; > > On Feb 15, 2016, at 9:01 AM, Justin Turney notifications@github.com; > > wrote:; > > ; > > opt10 is too big for a test case: 15 atoms, C1 symmetry, 322 basis; > > functions, requests 32 GB of memory, and performing a transition state; > > geometry optimization with an initial Hessian by finite difference of; > > gradients. The calculation timed out on the 13 of 79 gradient displacements; > > of the initial Hessian. The only thing that does help is that it's a DF-MP2; > > calculation.; > > ; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/issues/253#issuecomment-184219439>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-184220315.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184227998
https://github.com/psi4/psi4/issues/253#issuecomment-184231418:14,Testability,test,test,14,"I've run this test (`opt10`) without limits on 128 GB RAM and 20 threads and it takes:. ```; Total time:; user time = 36215.14 seconds = 603.59 minutes; system time = 882.69 seconds = 14.71 minutes; total time = 2280 seconds = 38.00 minutes; ```. So the test works, it just takes some time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184231418
https://github.com/psi4/psi4/issues/253#issuecomment-184231418:254,Testability,test,test,254,"I've run this test (`opt10`) without limits on 128 GB RAM and 20 threads and it takes:. ```; Total time:; user time = 36215.14 seconds = 603.59 minutes; system time = 882.69 seconds = 14.71 minutes; total time = 2280 seconds = 38.00 minutes; ```. So the test works, it just takes some time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184231418
https://github.com/psi4/psi4/issues/253#issuecomment-184233000:252,Energy Efficiency,reduce,reduce,252,"I just removed opt10 from all ctest labels. Its still present, but will not run unless you specifically request it. It looks like the reference opt10 ran in about 45 minutes on 8 threads. @psi-rking If you are just testing angular dependancies can you reduce this to something like 6-31G?. Edit: Whoops, misread timing data. > On Feb 15, 2016, at 9:27 AM, Justin Turney notifications@github.com wrote:; > ; > Yeah, we should have that mechanism to leave it as a longertest. Maybe that's what @dgasmith https://github.com/dgasmith has already done.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184228286.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184233000
https://github.com/psi4/psi4/issues/253#issuecomment-184233000:231,Integrability,depend,dependancies,231,"I just removed opt10 from all ctest labels. Its still present, but will not run unless you specifically request it. It looks like the reference opt10 ran in about 45 minutes on 8 threads. @psi-rking If you are just testing angular dependancies can you reduce this to something like 6-31G?. Edit: Whoops, misread timing data. > On Feb 15, 2016, at 9:27 AM, Justin Turney notifications@github.com wrote:; > ; > Yeah, we should have that mechanism to leave it as a longertest. Maybe that's what @dgasmith https://github.com/dgasmith has already done.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184228286.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184233000
https://github.com/psi4/psi4/issues/253#issuecomment-184233000:215,Testability,test,testing,215,"I just removed opt10 from all ctest labels. Its still present, but will not run unless you specifically request it. It looks like the reference opt10 ran in about 45 minutes on 8 threads. @psi-rking If you are just testing angular dependancies can you reduce this to something like 6-31G?. Edit: Whoops, misread timing data. > On Feb 15, 2016, at 9:27 AM, Justin Turney notifications@github.com wrote:; > ; > Yeah, we should have that mechanism to leave it as a longertest. Maybe that's what @dgasmith https://github.com/dgasmith has already done.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184228286.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184233000
https://github.com/psi4/psi4/issues/253#issuecomment-184413127:20,Performance,optimiz,optimization,20,"I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; 1gb of memory. Is that short enough? If so, I'll commit the change. -Rollin. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith notifications@github.com; wrote:. > I just removed opt10 from all ctest labels. Its still present, but will; > not run unless you specifically request it.; > ; > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > ; > > On Feb 15, 2016, at 9:27 AM, Justin Turney notifications@github.com; > > wrote:; > > ; > > Yeah, we should have that mechanism to leave it as a longertest. Maybe; > > that's what @dgasmith https://github.com/dgasmith has already done.; > > ; > > —; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/issues/253#issuecomment-184228286>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-184233000.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184413127
https://github.com/psi4/psi4/issues/253#issuecomment-184418683:180,Integrability,rout,routinely,180,"The current cap for ctest is 25 minutes on a single core. Is there any reason not to do this on a tiny basis like 6-31G or 3-21G?. This is just if you want the test case to be run routinely, there is nothing wrong with having extra long test cases that are only run if specifically requested. > On Feb 15, 2016, at 5:01 PM, Rollin King notifications@github.com wrote:; > ; > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > 1gb of memory. Is that short enough? If so, I'll commit the change.; > ; > -Rollin; > ; > ## ; > ; > Dr. Rollin A. King; > Professor and Chair of Chemistry; > Bethel University; > rking@bethel.edu; > ; > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith notifications@github.com; > wrote:; > ; > > I just removed opt10 from all ctest labels. Its still present, but will; > > not run unless you specifically request it.; > > ; > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > ; > > > On Feb 15, 2016, at 9:27 AM, Justin Turney notifications@github.com; > > > wrote:; > > > ; > > > Yeah, we should have that mechanism to leave it as a longertest. Maybe; > > > that's what @dgasmith https://github.com/dgasmith has already done.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4/issues/253#issuecomment-184228286>.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/253#issuecomment-184233000.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184413127.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184418683
https://github.com/psi4/psi4/issues/253#issuecomment-184418683:395,Performance,optimiz,optimization,395,"The current cap for ctest is 25 minutes on a single core. Is there any reason not to do this on a tiny basis like 6-31G or 3-21G?. This is just if you want the test case to be run routinely, there is nothing wrong with having extra long test cases that are only run if specifically requested. > On Feb 15, 2016, at 5:01 PM, Rollin King notifications@github.com wrote:; > ; > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > 1gb of memory. Is that short enough? If so, I'll commit the change.; > ; > -Rollin; > ; > ## ; > ; > Dr. Rollin A. King; > Professor and Chair of Chemistry; > Bethel University; > rking@bethel.edu; > ; > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith notifications@github.com; > wrote:; > ; > > I just removed opt10 from all ctest labels. Its still present, but will; > > not run unless you specifically request it.; > > ; > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > ; > > > On Feb 15, 2016, at 9:27 AM, Justin Turney notifications@github.com; > > > wrote:; > > > ; > > > Yeah, we should have that mechanism to leave it as a longertest. Maybe; > > > that's what @dgasmith https://github.com/dgasmith has already done.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4/issues/253#issuecomment-184228286>.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/253#issuecomment-184233000.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184413127.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184418683
https://github.com/psi4/psi4/issues/253#issuecomment-184418683:160,Testability,test,test,160,"The current cap for ctest is 25 minutes on a single core. Is there any reason not to do this on a tiny basis like 6-31G or 3-21G?. This is just if you want the test case to be run routinely, there is nothing wrong with having extra long test cases that are only run if specifically requested. > On Feb 15, 2016, at 5:01 PM, Rollin King notifications@github.com wrote:; > ; > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > 1gb of memory. Is that short enough? If so, I'll commit the change.; > ; > -Rollin; > ; > ## ; > ; > Dr. Rollin A. King; > Professor and Chair of Chemistry; > Bethel University; > rking@bethel.edu; > ; > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith notifications@github.com; > wrote:; > ; > > I just removed opt10 from all ctest labels. Its still present, but will; > > not run unless you specifically request it.; > > ; > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > ; > > > On Feb 15, 2016, at 9:27 AM, Justin Turney notifications@github.com; > > > wrote:; > > > ; > > > Yeah, we should have that mechanism to leave it as a longertest. Maybe; > > > that's what @dgasmith https://github.com/dgasmith has already done.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4/issues/253#issuecomment-184228286>.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/253#issuecomment-184233000.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184413127.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184418683
https://github.com/psi4/psi4/issues/253#issuecomment-184418683:237,Testability,test,test,237,"The current cap for ctest is 25 minutes on a single core. Is there any reason not to do this on a tiny basis like 6-31G or 3-21G?. This is just if you want the test case to be run routinely, there is nothing wrong with having extra long test cases that are only run if specifically requested. > On Feb 15, 2016, at 5:01 PM, Rollin King notifications@github.com wrote:; > ; > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > 1gb of memory. Is that short enough? If so, I'll commit the change.; > ; > -Rollin; > ; > ## ; > ; > Dr. Rollin A. King; > Professor and Chair of Chemistry; > Bethel University; > rking@bethel.edu; > ; > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith notifications@github.com; > wrote:; > ; > > I just removed opt10 from all ctest labels. Its still present, but will; > > not run unless you specifically request it.; > > ; > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > ; > > > On Feb 15, 2016, at 9:27 AM, Justin Turney notifications@github.com; > > > wrote:; > > > ; > > > Yeah, we should have that mechanism to leave it as a longertest. Maybe; > > > that's what @dgasmith https://github.com/dgasmith has already done.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4/issues/253#issuecomment-184228286>.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/253#issuecomment-184233000.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184413127.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184418683
https://github.com/psi4/psi4/issues/253#issuecomment-184429744:629,Integrability,rout,routinely,629,"That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; so this test case could be added to one of the other test categories, like; longtests, in principle. That said, the quicker the test runs (while testing the desired feature); the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; loosening the convergence criteria. David. On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:. > The current cap for ctest is 25 minutes on a single core. Is there any; > reason not to do this on a tiny basis like 6-31G or 3-21G?; > ; > This is just if you want the test case to be run routinely, there is; > nothing wrong with having extra long test cases that are only run if; > specifically requested.; > ; > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > ; > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > ; > > -Rollin; > > ; > > ## ; > > ; > > Dr. Rollin A. King; > > Professor and Chair of Chemistry; > > Bethel University; > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > ; > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > wrote:; > > ; > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > not run unless you specifically request it.; > > > ; > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > ; > > > > On Feb 15, 2016, at 9:27 AM, Justin Turney <notifications@github.com; > > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > > wrote:; > > > > ; > > > > Yeah, we should have that mechanism to leave it as a longertest.; > > > > Maybe; > > > > that's what @dgasmith https://github.com/dgasmith has already done.; > > > > ; > > > > —; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184429744
https://github.com/psi4/psi4/issues/253#issuecomment-184429744:927,Performance,optimiz,optimization,927,"That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; so this test case could be added to one of the other test categories, like; longtests, in principle. That said, the quicker the test runs (while testing the desired feature); the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; loosening the convergence criteria. David. On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:. > The current cap for ctest is 25 minutes on a single core. Is there any; > reason not to do this on a tiny basis like 6-31G or 3-21G?; > ; > This is just if you want the test case to be run routinely, there is; > nothing wrong with having extra long test cases that are only run if; > specifically requested.; > ; > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > ; > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > ; > > -Rollin; > > ; > > ## ; > > ; > > Dr. Rollin A. King; > > Professor and Chair of Chemistry; > > Bethel University; > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > ; > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > wrote:; > > ; > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > not run unless you specifically request it.; > > > ; > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > ; > > > > On Feb 15, 2016, at 9:27 AM, Justin Turney <notifications@github.com; > > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > > wrote:; > > > > ; > > > > Yeah, we should have that mechanism to leave it as a longertest.; > > > > Maybe; > > > > that's what @dgasmith https://github.com/dgasmith has already done.; > > > > ; > > > > —; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184429744
https://github.com/psi4/psi4/issues/253#issuecomment-184429744:78,Testability,test,test,78,"That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; so this test case could be added to one of the other test categories, like; longtests, in principle. That said, the quicker the test runs (while testing the desired feature); the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; loosening the convergence criteria. David. On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:. > The current cap for ctest is 25 minutes on a single core. Is there any; > reason not to do this on a tiny basis like 6-31G or 3-21G?; > ; > This is just if you want the test case to be run routinely, there is; > nothing wrong with having extra long test cases that are only run if; > specifically requested.; > ; > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > ; > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > ; > > -Rollin; > > ; > > ## ; > > ; > > Dr. Rollin A. King; > > Professor and Chair of Chemistry; > > Bethel University; > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > ; > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > wrote:; > > ; > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > not run unless you specifically request it.; > > > ; > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > ; > > > > On Feb 15, 2016, at 9:27 AM, Justin Turney <notifications@github.com; > > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > > wrote:; > > > > ; > > > > Yeah, we should have that mechanism to leave it as a longertest.; > > > > Maybe; > > > > that's what @dgasmith https://github.com/dgasmith has already done.; > > > > ; > > > > —; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184429744
https://github.com/psi4/psi4/issues/253#issuecomment-184429744:123,Testability,test,test,123,"That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; so this test case could be added to one of the other test categories, like; longtests, in principle. That said, the quicker the test runs (while testing the desired feature); the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; loosening the convergence criteria. David. On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:. > The current cap for ctest is 25 minutes on a single core. Is there any; > reason not to do this on a tiny basis like 6-31G or 3-21G?; > ; > This is just if you want the test case to be run routinely, there is; > nothing wrong with having extra long test cases that are only run if; > specifically requested.; > ; > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > ; > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > ; > > -Rollin; > > ; > > ## ; > > ; > > Dr. Rollin A. King; > > Professor and Chair of Chemistry; > > Bethel University; > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > ; > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > wrote:; > > ; > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > not run unless you specifically request it.; > > > ; > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > ; > > > > On Feb 15, 2016, at 9:27 AM, Justin Turney <notifications@github.com; > > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > > wrote:; > > > > ; > > > > Yeah, we should have that mechanism to leave it as a longertest.; > > > > Maybe; > > > > that's what @dgasmith https://github.com/dgasmith has already done.; > > > > ; > > > > —; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184429744
https://github.com/psi4/psi4/issues/253#issuecomment-184429744:198,Testability,test,test,198,"That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; so this test case could be added to one of the other test categories, like; longtests, in principle. That said, the quicker the test runs (while testing the desired feature); the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; loosening the convergence criteria. David. On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:. > The current cap for ctest is 25 minutes on a single core. Is there any; > reason not to do this on a tiny basis like 6-31G or 3-21G?; > ; > This is just if you want the test case to be run routinely, there is; > nothing wrong with having extra long test cases that are only run if; > specifically requested.; > ; > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > ; > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > ; > > -Rollin; > > ; > > ## ; > > ; > > Dr. Rollin A. King; > > Professor and Chair of Chemistry; > > Bethel University; > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > ; > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > wrote:; > > ; > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > not run unless you specifically request it.; > > > ; > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > ; > > > > On Feb 15, 2016, at 9:27 AM, Justin Turney <notifications@github.com; > > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > > wrote:; > > > > ; > > > > Yeah, we should have that mechanism to leave it as a longertest.; > > > > Maybe; > > > > that's what @dgasmith https://github.com/dgasmith has already done.; > > > > ; > > > > —; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184429744
https://github.com/psi4/psi4/issues/253#issuecomment-184429744:215,Testability,test,testing,215,"That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; so this test case could be added to one of the other test categories, like; longtests, in principle. That said, the quicker the test runs (while testing the desired feature); the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; loosening the convergence criteria. David. On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:. > The current cap for ctest is 25 minutes on a single core. Is there any; > reason not to do this on a tiny basis like 6-31G or 3-21G?; > ; > This is just if you want the test case to be run routinely, there is; > nothing wrong with having extra long test cases that are only run if; > specifically requested.; > ; > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > ; > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > ; > > -Rollin; > > ; > > ## ; > > ; > > Dr. Rollin A. King; > > Professor and Chair of Chemistry; > > Bethel University; > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > ; > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > wrote:; > > ; > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > not run unless you specifically request it.; > > > ; > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > ; > > > > On Feb 15, 2016, at 9:27 AM, Justin Turney <notifications@github.com; > > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > > wrote:; > > > > ; > > > > Yeah, we should have that mechanism to leave it as a longertest.; > > > > Maybe; > > > > that's what @dgasmith https://github.com/dgasmith has already done.; > > > > ; > > > > —; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184429744
https://github.com/psi4/psi4/issues/253#issuecomment-184429744:609,Testability,test,test,609,"That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; so this test case could be added to one of the other test categories, like; longtests, in principle. That said, the quicker the test runs (while testing the desired feature); the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; loosening the convergence criteria. David. On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:. > The current cap for ctest is 25 minutes on a single core. Is there any; > reason not to do this on a tiny basis like 6-31G or 3-21G?; > ; > This is just if you want the test case to be run routinely, there is; > nothing wrong with having extra long test cases that are only run if; > specifically requested.; > ; > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > ; > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > ; > > -Rollin; > > ; > > ## ; > > ; > > Dr. Rollin A. King; > > Professor and Chair of Chemistry; > > Bethel University; > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > ; > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > wrote:; > > ; > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > not run unless you specifically request it.; > > > ; > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > ; > > > > On Feb 15, 2016, at 9:27 AM, Justin Turney <notifications@github.com; > > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > > wrote:; > > > > ; > > > > Yeah, we should have that mechanism to leave it as a longertest.; > > > > Maybe; > > > > that's what @dgasmith https://github.com/dgasmith has already done.; > > > > ; > > > > —; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184429744
https://github.com/psi4/psi4/issues/253#issuecomment-184429744:689,Testability,test,test,689,"That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; so this test case could be added to one of the other test categories, like; longtests, in principle. That said, the quicker the test runs (while testing the desired feature); the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; loosening the convergence criteria. David. On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:. > The current cap for ctest is 25 minutes on a single core. Is there any; > reason not to do this on a tiny basis like 6-31G or 3-21G?; > ; > This is just if you want the test case to be run routinely, there is; > nothing wrong with having extra long test cases that are only run if; > specifically requested.; > ; > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > ; > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > ; > > -Rollin; > > ; > > ## ; > > ; > > Dr. Rollin A. King; > > Professor and Chair of Chemistry; > > Bethel University; > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > ; > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > wrote:; > > ; > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > not run unless you specifically request it.; > > > ; > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > ; > > > > On Feb 15, 2016, at 9:27 AM, Justin Turney <notifications@github.com; > > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > > wrote:; > > > > ; > > > > Yeah, we should have that mechanism to leave it as a longertest.; > > > > Maybe; > > > > that's what @dgasmith https://github.com/dgasmith has already done.; > > > > ; > > > > —; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184429744
https://github.com/psi4/psi4/issues/253#issuecomment-184432870:867,Integrability,rout,routinely,867,"The 6-31G case runs fine in ~20 minutes on one core. I'll call it a; 'longtest' and check it in now.; -Rollin. On Mon, Feb 15, 2016 at 4:54 PM, David Sherrill notifications@github.com; wrote:. > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com; > wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores); > > > with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <; > > > notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but; > > > > will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Justin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184432870
https://github.com/psi4/psi4/issues/253#issuecomment-184432870:1179,Performance,optimiz,optimization,1179,"otifications@github.com; wrote:. > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com; > wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores); > > > with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <; > > > notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but; > > > > will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Justin Turney <; > > > > > notifications@github.com; > > > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > > > wrote:; > > > > > ; > > > > > Y",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184432870
https://github.com/psi4/psi4/issues/253#issuecomment-184432870:275,Testability,test,test,275,"The 6-31G case runs fine in ~20 minutes on one core. I'll call it a; 'longtest' and check it in now.; -Rollin. On Mon, Feb 15, 2016 at 4:54 PM, David Sherrill notifications@github.com; wrote:. > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com; > wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores); > > > with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <; > > > notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but; > > > > will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Justin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184432870
https://github.com/psi4/psi4/issues/253#issuecomment-184432870:320,Testability,test,test,320,"The 6-31G case runs fine in ~20 minutes on one core. I'll call it a; 'longtest' and check it in now.; -Rollin. On Mon, Feb 15, 2016 at 4:54 PM, David Sherrill notifications@github.com; wrote:. > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com; > wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores); > > > with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <; > > > notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but; > > > > will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Justin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184432870
https://github.com/psi4/psi4/issues/253#issuecomment-184432870:404,Testability,test,test,404,"The 6-31G case runs fine in ~20 minutes on one core. I'll call it a; 'longtest' and check it in now.; -Rollin. On Mon, Feb 15, 2016 at 4:54 PM, David Sherrill notifications@github.com; wrote:. > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com; > wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores); > > > with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <; > > > notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but; > > > > will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Justin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184432870
https://github.com/psi4/psi4/issues/253#issuecomment-184432870:421,Testability,test,testing,421,"The 6-31G case runs fine in ~20 minutes on one core. I'll call it a; 'longtest' and check it in now.; -Rollin. On Mon, Feb 15, 2016 at 4:54 PM, David Sherrill notifications@github.com; wrote:. > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com; > wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores); > > > with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <; > > > notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but; > > > > will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Justin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184432870
https://github.com/psi4/psi4/issues/253#issuecomment-184432870:847,Testability,test,test,847,"The 6-31G case runs fine in ~20 minutes on one core. I'll call it a; 'longtest' and check it in now.; -Rollin. On Mon, Feb 15, 2016 at 4:54 PM, David Sherrill notifications@github.com; wrote:. > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com; > wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores); > > > with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <; > > > notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but; > > > > will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Justin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184432870
https://github.com/psi4/psi4/issues/253#issuecomment-184432870:929,Testability,test,test,929,"The 6-31G case runs fine in ~20 minutes on one core. I'll call it a; 'longtest' and check it in now.; -Rollin. On Mon, Feb 15, 2016 at 4:54 PM, David Sherrill notifications@github.com; wrote:. > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com; > wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores); > > > with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <; > > > notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but; > > > > will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Justin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184432870
https://github.com/psi4/psi4/issues/253#issuecomment-184433294:894,Integrability,rout,routinely,894,"The 25 minute cap is a ctest cap that we control. The cap helps figure out if a test case is stuck in a loop or not. Cheers,; Daniel Smith. > On Feb 15, 2016, at 5:54 PM, David Sherrill notifications@github.com wrote:; > ; > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Jus",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184433294
https://github.com/psi4/psi4/issues/253#issuecomment-184433294:1206,Performance,optimiz,optimization,1206,"otifications@github.com wrote:; > ; > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Justin Turney <notifications@github.com; > > > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > > > wrote:; > > > > > ; > > > > > Yeah, we should have that mechanism t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184433294
https://github.com/psi4/psi4/issues/253#issuecomment-184433294:80,Testability,test,test,80,"The 25 minute cap is a ctest cap that we control. The cap helps figure out if a test case is stuck in a loop or not. Cheers,; Daniel Smith. > On Feb 15, 2016, at 5:54 PM, David Sherrill notifications@github.com wrote:; > ; > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Jus",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184433294
https://github.com/psi4/psi4/issues/253#issuecomment-184433294:305,Testability,test,test,305,"The 25 minute cap is a ctest cap that we control. The cap helps figure out if a test case is stuck in a loop or not. Cheers,; Daniel Smith. > On Feb 15, 2016, at 5:54 PM, David Sherrill notifications@github.com wrote:; > ; > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Jus",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184433294
https://github.com/psi4/psi4/issues/253#issuecomment-184433294:350,Testability,test,test,350,"The 25 minute cap is a ctest cap that we control. The cap helps figure out if a test case is stuck in a loop or not. Cheers,; Daniel Smith. > On Feb 15, 2016, at 5:54 PM, David Sherrill notifications@github.com wrote:; > ; > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Jus",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184433294
https://github.com/psi4/psi4/issues/253#issuecomment-184433294:434,Testability,test,test,434,"The 25 minute cap is a ctest cap that we control. The cap helps figure out if a test case is stuck in a loop or not. Cheers,; Daniel Smith. > On Feb 15, 2016, at 5:54 PM, David Sherrill notifications@github.com wrote:; > ; > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Jus",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184433294
https://github.com/psi4/psi4/issues/253#issuecomment-184433294:451,Testability,test,testing,451,"The 25 minute cap is a ctest cap that we control. The cap helps figure out if a test case is stuck in a loop or not. Cheers,; Daniel Smith. > On Feb 15, 2016, at 5:54 PM, David Sherrill notifications@github.com wrote:; > ; > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Jus",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184433294
https://github.com/psi4/psi4/issues/253#issuecomment-184433294:874,Testability,test,test,874,"The 25 minute cap is a ctest cap that we control. The cap helps figure out if a test case is stuck in a loop or not. Cheers,; Daniel Smith. > On Feb 15, 2016, at 5:54 PM, David Sherrill notifications@github.com wrote:; > ; > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Jus",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184433294
https://github.com/psi4/psi4/issues/253#issuecomment-184433294:956,Testability,test,test,956,"The 25 minute cap is a ctest cap that we control. The cap helps figure out if a test case is stuck in a loop or not. Cheers,; Daniel Smith. > On Feb 15, 2016, at 5:54 PM, David Sherrill notifications@github.com wrote:; > ; > That 25 minute cap is from Travis CI? Travis only runs 'quicktests',; > so this test case could be added to one of the other test categories, like; > longtests, in principle.; > ; > That said, the quicker the test runs (while testing the desired feature); > the better. So, it is worth checking it with 6-31G or even 3-21G, and/or; > loosening the convergence criteria.; > ; > David; > ; > On Monday, February 15, 2016, Daniel Smith notifications@github.com wrote:; > ; > > The current cap for ctest is 25 minutes on a single core. Is there any; > > reason not to do this on a tiny basis like 6-31G or 3-21G?; > > ; > > This is just if you want the test case to be run routinely, there is; > > nothing wrong with having extra long test cases that are only run if; > > specifically requested.; > > ; > > > On Feb 15, 2016, at 5:01 PM, Rollin King <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>> wrote:; > > > ; > > > I tried the cc-pvdz optimization. I runs in 16 minutes (on 8 cores) with; > > > 1gb of memory. Is that short enough? If so, I'll commit the change.; > > > ; > > > -Rollin; > > > ; > > > ## ; > > > ; > > > Dr. Rollin A. King; > > > Professor and Chair of Chemistry; > > > Bethel University; > > > rking@bethel.edu <javascript:_e(%7B%7D,'cvml','rking@bethel.edu');>; > > > ; > > > On Mon, Feb 15, 2016 at 8:37 AM, Daniel Smith <notifications@github.com; > > > <javascript:_e(%7B%7D,'cvml','notifications@github.com');>>; > > > wrote:; > > > ; > > > > I just removed opt10 from all ctest labels. Its still present, but will; > > > > not run unless you specifically request it.; > > > > ; > > > > It looks like the reference opt10 ran in about 6 hours on 8 threads.; > > > > ; > > > > > On Feb 15, 2016, at 9:27 AM, Jus",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184433294
https://github.com/psi4/psi4/issues/253#issuecomment-185192172:54,Availability,failure,failures,54,"@wpoely86 Please do a fresh full, the opt10 and sapt4 failures should be resolved. For pubchem you can try running the following python script:. ``` python; from urllib2 import urlopen; print urlopen('http://pubchem.ncbi.nlm.nih.gov/pug/pug.cgi', """").read(); ```. If you can access your server you should see some xml containing the following line:; `<PCT-Status-Message_messages_E>Status: input-error.`. If you bounce off your firewall you will likely see something along the lines of `URLError: <urlopen error [Errno 11004] getaddrinfo failed>`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-185192172
https://github.com/psi4/psi4/issues/253#issuecomment-185192172:396,Availability,error,error,396,"@wpoely86 Please do a fresh full, the opt10 and sapt4 failures should be resolved. For pubchem you can try running the following python script:. ``` python; from urllib2 import urlopen; print urlopen('http://pubchem.ncbi.nlm.nih.gov/pug/pug.cgi', """").read(); ```. If you can access your server you should see some xml containing the following line:; `<PCT-Status-Message_messages_E>Status: input-error.`. If you bounce off your firewall you will likely see something along the lines of `URLError: <urlopen error [Errno 11004] getaddrinfo failed>`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-185192172
https://github.com/psi4/psi4/issues/253#issuecomment-185192172:506,Availability,error,error,506,"@wpoely86 Please do a fresh full, the opt10 and sapt4 failures should be resolved. For pubchem you can try running the following python script:. ``` python; from urllib2 import urlopen; print urlopen('http://pubchem.ncbi.nlm.nih.gov/pug/pug.cgi', """").read(); ```. If you can access your server you should see some xml containing the following line:; `<PCT-Status-Message_messages_E>Status: input-error.`. If you bounce off your firewall you will likely see something along the lines of `URLError: <urlopen error [Errno 11004] getaddrinfo failed>`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-185192172
https://github.com/psi4/psi4/issues/253#issuecomment-185192172:275,Security,access,access,275,"@wpoely86 Please do a fresh full, the opt10 and sapt4 failures should be resolved. For pubchem you can try running the following python script:. ``` python; from urllib2 import urlopen; print urlopen('http://pubchem.ncbi.nlm.nih.gov/pug/pug.cgi', """").read(); ```. If you can access your server you should see some xml containing the following line:; `<PCT-Status-Message_messages_E>Status: input-error.`. If you bounce off your firewall you will likely see something along the lines of `URLError: <urlopen error [Errno 11004] getaddrinfo failed>`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-185192172
https://github.com/psi4/psi4/issues/253#issuecomment-185192172:428,Security,firewall,firewall,428,"@wpoely86 Please do a fresh full, the opt10 and sapt4 failures should be resolved. For pubchem you can try running the following python script:. ``` python; from urllib2 import urlopen; print urlopen('http://pubchem.ncbi.nlm.nih.gov/pug/pug.cgi', """").read(); ```. If you can access your server you should see some xml containing the following line:; `<PCT-Status-Message_messages_E>Status: input-error.`. If you bounce off your firewall you will likely see something along the lines of `URLError: <urlopen error [Errno 11004] getaddrinfo failed>`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-185192172
https://github.com/psi4/psi4/issues/253#issuecomment-190689367:81,Availability,failure,failures,81,"@dgasmith yes, `opt10` and `sapt4` no longer complain. However, I've got two new failures: `opt7` and `opt-irc-2`.; For `opt7`:. ```; PsiException: Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```. For `opt-irc-2`:. ```; PsiException: Energy of last IRC point: computed value (-92.869134) does not match (-92.868901) to 5 decimal places.; ```. I used 13bf41bd1b0dd2a39d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190689367
https://github.com/psi4/psi4/issues/253#issuecomment-190689367:201,Energy Efficiency,energy,energy,201,"@dgasmith yes, `opt10` and `sapt4` no longer complain. However, I've got two new failures: `opt7` and `opt-irc-2`.; For `opt7`:. ```; PsiException: Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```. For `opt-irc-2`:. ```; PsiException: Energy of last IRC point: computed value (-92.869134) does not match (-92.868901) to 5 decimal places.; ```. I used 13bf41bd1b0dd2a39d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190689367
https://github.com/psi4/psi4/issues/253#issuecomment-190689367:333,Energy Efficiency,Energy,Energy,333,"@dgasmith yes, `opt10` and `sapt4` no longer complain. However, I've got two new failures: `opt7` and `opt-irc-2`.; For `opt7`:. ```; PsiException: Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```. For `opt-irc-2`:. ```; PsiException: Energy of last IRC point: computed value (-92.869134) does not match (-92.868901) to 5 decimal places.; ```. I used 13bf41bd1b0dd2a39d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190689367
https://github.com/psi4/psi4/issues/253#issuecomment-190761069:77,Performance,optimiz,optimized-irc-point,77,"You mean @avcopan should adjust the compare_values test for opt7 to the last-optimized-irc-point from the last structure, similar to what was done for opt-irc-1 & -2, @dgasmith? I think I agree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190761069
https://github.com/psi4/psi4/issues/253#issuecomment-190761069:51,Testability,test,test,51,"You mean @avcopan should adjust the compare_values test for opt7 to the last-optimized-irc-point from the last structure, similar to what was done for opt-irc-1 & -2, @dgasmith? I think I agree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190761069
https://github.com/psi4/psi4/issues/253#issuecomment-190951929:25,Testability,test,test,25,"Since opt7 is not an IRC test case, I better let @psi-rking decide what he wants to do with it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190951929
https://github.com/psi4/psi4/issues/253#issuecomment-190956405:367,Availability,error,error,367,"Sorry @avcopan, I saw all the `@IRC`s in that gist above and thought opt7 was an unlabeled IRC. But that was for opt-irc-2, which should be fixed now. opt7 fails on a few systems (https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01). This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640) looks like the most coherent error message (also copied below), if @psi-rking would like to examine it. ```; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190956405
https://github.com/psi4/psi4/issues/253#issuecomment-190956405:534,Energy Efficiency,energy,energy,534,"Sorry @avcopan, I saw all the `@IRC`s in that gist above and thought opt7 was an unlabeled IRC. But that was for opt-irc-2, which should be fixed now. opt7 fails on a few systems (https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01). This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640) looks like the most coherent error message (also copied below), if @psi-rking would like to examine it. ```; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190956405
https://github.com/psi4/psi4/issues/253#issuecomment-190956405:644,Energy Efficiency,energy,energy,644,"Sorry @avcopan, I saw all the `@IRC`s in that gist above and thought opt7 was an unlabeled IRC. But that was for opt-irc-2, which should be fixed now. opt7 fails on a few systems (https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01). This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640) looks like the most coherent error message (also copied below), if @psi-rking would like to examine it. ```; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190956405
https://github.com/psi4/psi4/issues/253#issuecomment-190956405:373,Integrability,message,message,373,"Sorry @avcopan, I saw all the `@IRC`s in that gist above and thought opt7 was an unlabeled IRC. But that was for opt-irc-2, which should be fixed now. opt7 fails on a few systems (https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01). This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640) looks like the most coherent error message (also copied below), if @psi-rking would like to examine it. ```; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190956405
https://github.com/psi4/psi4/issues/253#issuecomment-190956405:447,Performance,Optimiz,Optimizer,447,"Sorry @avcopan, I saw all the `@IRC`s in that gist above and thought opt7 was an unlabeled IRC. But that was for opt-irc-2, which should be fixed now. opt7 fails on a few systems (https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01). This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640) looks like the most coherent error message (also copied below), if @psi-rking would like to examine it. ```; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190956405
https://github.com/psi4/psi4/issues/253#issuecomment-190956405:458,Performance,Optimiz,Optimization,458,"Sorry @avcopan, I saw all the `@IRC`s in that gist above and thought opt7 was an unlabeled IRC. But that was for opt-irc-2, which should be fixed now. opt7 fails on a few systems (https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01). This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640) looks like the most coherent error message (also copied below), if @psi-rking would like to examine it. ```; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190956405
https://github.com/psi4/psi4/issues/253#issuecomment-190956405:556,Performance,Optimiz,Optimizer,556,"Sorry @avcopan, I saw all the `@IRC`s in that gist above and thought opt7 was an unlabeled IRC. But that was for opt-irc-2, which should be fixed now. opt7 fails on a few systems (https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01). This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640) looks like the most coherent error message (also copied below), if @psi-rking would like to examine it. ```; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190956405
https://github.com/psi4/psi4/issues/253#issuecomment-190956405:567,Performance,Optimiz,Optimization,567,"Sorry @avcopan, I saw all the `@IRC`s in that gist above and thought opt7 was an unlabeled IRC. But that was for opt-irc-2, which should be fixed now. opt7 fails on a few systems (https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01). This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640) looks like the most coherent error message (also copied below), if @psi-rking would like to examine it. ```; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190956405
https://github.com/psi4/psi4/issues/253#issuecomment-190956405:188,Testability,test,testboard,188,"Sorry @avcopan, I saw all the `@IRC`s in that gist above and thought opt7 was an unlabeled IRC. But that was for opt-irc-2, which should be fixed now. opt7 fails on a few systems (https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01). This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640) looks like the most coherent error message (also copied below), if @psi-rking would like to examine it. ```; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190956405
https://github.com/psi4/psi4/issues/253#issuecomment-190956405:208,Testability,test,testSummary,208,"Sorry @avcopan, I saw all the `@IRC`s in that gist above and thought opt7 was an unlabeled IRC. But that was for opt-irc-2, which should be fixed now. opt7 fails on a few systems (https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01). This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640) looks like the most coherent error message (also copied below), if @psi-rking would like to examine it. ```; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190956405
https://github.com/psi4/psi4/issues/253#issuecomment-190956405:276,Testability,test,testboard,276,"Sorry @avcopan, I saw all the `@IRC`s in that gist above and thought opt7 was an unlabeled IRC. But that was for opt-irc-2, which should be fixed now. opt7 fails on a few systems (https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01). This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640) looks like the most coherent error message (also copied below), if @psi-rking would like to examine it. ```; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190956405
https://github.com/psi4/psi4/issues/253#issuecomment-190956405:296,Testability,test,testDetails,296,"Sorry @avcopan, I saw all the `@IRC`s in that gist above and thought opt7 was an unlabeled IRC. But that was for opt-irc-2, which should be fixed now. opt7 fails on a few systems (https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01). This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640) looks like the most coherent error message (also copied below), if @psi-rking would like to examine it. ```; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190956405
https://github.com/psi4/psi4/issues/253#issuecomment-190956405:312,Testability,test,test,312,"Sorry @avcopan, I saw all the `@IRC`s in that gist above and thought opt7 was an unlabeled IRC. But that was for opt-irc-2, which should be fixed now. opt7 fails on a few systems (https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01). This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640) looks like the most coherent error message (also copied below), if @psi-rking would like to examine it. ```; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; Optimizer: Optimization complete!; Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-190956405
https://github.com/psi4/psi4/issues/253#issuecomment-191034927:598,Availability,error,error,598,"Doesn't really look like a bug. Either we up the convergence criterion or; we check only 5 decimals. On Tue, Mar 1, 2016 at 5:14 PM, Lori A. Burns notifications@github.com; wrote:. > Sorry @avcopan https://github.com/avcopan, I saw all the @IRCs in that; > gist above and thought opt7 was an unlabeled IRC. But that was for; > opt-irc-2, which should be fixed now.; > ; > opt7 fails on a few systems (; > https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01).; > This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640); > looks like the most coherent error message (also copied below), if; > @psi-rking https://github.com/psi-rking would like to examine it.; > ; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-190956405.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191034927
https://github.com/psi4/psi4/issues/253#issuecomment-191034927:801,Energy Efficiency,energy,energy,801,"Doesn't really look like a bug. Either we up the convergence criterion or; we check only 5 decimals. On Tue, Mar 1, 2016 at 5:14 PM, Lori A. Burns notifications@github.com; wrote:. > Sorry @avcopan https://github.com/avcopan, I saw all the @IRCs in that; > gist above and thought opt7 was an unlabeled IRC. But that was for; > opt-irc-2, which should be fixed now.; > ; > opt7 fails on a few systems (; > https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01).; > This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640); > looks like the most coherent error message (also copied below), if; > @psi-rking https://github.com/psi-rking would like to examine it.; > ; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-190956405.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191034927
https://github.com/psi4/psi4/issues/253#issuecomment-191034927:915,Energy Efficiency,energy,energy,915,"Doesn't really look like a bug. Either we up the convergence criterion or; we check only 5 decimals. On Tue, Mar 1, 2016 at 5:14 PM, Lori A. Burns notifications@github.com; wrote:. > Sorry @avcopan https://github.com/avcopan, I saw all the @IRCs in that; > gist above and thought opt7 was an unlabeled IRC. But that was for; > opt-irc-2, which should be fixed now.; > ; > opt7 fails on a few systems (; > https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01).; > This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640); > looks like the most coherent error message (also copied below), if; > @psi-rking https://github.com/psi-rking would like to examine it.; > ; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-190956405.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191034927
https://github.com/psi4/psi4/issues/253#issuecomment-191034927:604,Integrability,message,message,604,"Doesn't really look like a bug. Either we up the convergence criterion or; we check only 5 decimals. On Tue, Mar 1, 2016 at 5:14 PM, Lori A. Burns notifications@github.com; wrote:. > Sorry @avcopan https://github.com/avcopan, I saw all the @IRCs in that; > gist above and thought opt7 was an unlabeled IRC. But that was for; > opt-irc-2, which should be fixed now.; > ; > opt7 fails on a few systems (; > https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01).; > This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640); > looks like the most coherent error message (also copied below), if; > @psi-rking https://github.com/psi-rking would like to examine it.; > ; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-190956405.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191034927
https://github.com/psi4/psi4/issues/253#issuecomment-191034927:712,Performance,Optimiz,Optimizer,712,"Doesn't really look like a bug. Either we up the convergence criterion or; we check only 5 decimals. On Tue, Mar 1, 2016 at 5:14 PM, Lori A. Burns notifications@github.com; wrote:. > Sorry @avcopan https://github.com/avcopan, I saw all the @IRCs in that; > gist above and thought opt7 was an unlabeled IRC. But that was for; > opt-irc-2, which should be fixed now.; > ; > opt7 fails on a few systems (; > https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01).; > This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640); > looks like the most coherent error message (also copied below), if; > @psi-rking https://github.com/psi-rking would like to examine it.; > ; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-190956405.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191034927
https://github.com/psi4/psi4/issues/253#issuecomment-191034927:723,Performance,Optimiz,Optimization,723,"Doesn't really look like a bug. Either we up the convergence criterion or; we check only 5 decimals. On Tue, Mar 1, 2016 at 5:14 PM, Lori A. Burns notifications@github.com; wrote:. > Sorry @avcopan https://github.com/avcopan, I saw all the @IRCs in that; > gist above and thought opt7 was an unlabeled IRC. But that was for; > opt-irc-2, which should be fixed now.; > ; > opt7 fails on a few systems (; > https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01).; > This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640); > looks like the most coherent error message (also copied below), if; > @psi-rking https://github.com/psi-rking would like to examine it.; > ; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-190956405.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191034927
https://github.com/psi4/psi4/issues/253#issuecomment-191034927:825,Performance,Optimiz,Optimizer,825,"Doesn't really look like a bug. Either we up the convergence criterion or; we check only 5 decimals. On Tue, Mar 1, 2016 at 5:14 PM, Lori A. Burns notifications@github.com; wrote:. > Sorry @avcopan https://github.com/avcopan, I saw all the @IRCs in that; > gist above and thought opt7 was an unlabeled IRC. But that was for; > opt-irc-2, which should be fixed now.; > ; > opt7 fails on a few systems (; > https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01).; > This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640); > looks like the most coherent error message (also copied below), if; > @psi-rking https://github.com/psi-rking would like to examine it.; > ; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-190956405.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191034927
https://github.com/psi4/psi4/issues/253#issuecomment-191034927:836,Performance,Optimiz,Optimization,836,"Doesn't really look like a bug. Either we up the convergence criterion or; we check only 5 decimals. On Tue, Mar 1, 2016 at 5:14 PM, Lori A. Burns notifications@github.com; wrote:. > Sorry @avcopan https://github.com/avcopan, I saw all the @IRCs in that; > gist above and thought opt7 was an unlabeled IRC. But that was for; > opt-irc-2, which should be fixed now.; > ; > opt7 fails on a few systems (; > https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01).; > This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640); > looks like the most coherent error message (also copied below), if; > @psi-rking https://github.com/psi-rking would like to examine it.; > ; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-190956405.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191034927
https://github.com/psi4/psi4/issues/253#issuecomment-191034927:413,Testability,test,testboard,413,"Doesn't really look like a bug. Either we up the convergence criterion or; we check only 5 decimals. On Tue, Mar 1, 2016 at 5:14 PM, Lori A. Burns notifications@github.com; wrote:. > Sorry @avcopan https://github.com/avcopan, I saw all the @IRCs in that; > gist above and thought opt7 was an unlabeled IRC. But that was for; > opt-irc-2, which should be fixed now.; > ; > opt7 fails on a few systems (; > https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01).; > This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640); > looks like the most coherent error message (also copied below), if; > @psi-rking https://github.com/psi-rking would like to examine it.; > ; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-190956405.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191034927
https://github.com/psi4/psi4/issues/253#issuecomment-191034927:433,Testability,test,testSummary,433,"Doesn't really look like a bug. Either we up the convergence criterion or; we check only 5 decimals. On Tue, Mar 1, 2016 at 5:14 PM, Lori A. Burns notifications@github.com; wrote:. > Sorry @avcopan https://github.com/avcopan, I saw all the @IRCs in that; > gist above and thought opt7 was an unlabeled IRC. But that was for; > opt-irc-2, which should be fixed now.; > ; > opt7 fails on a few systems (; > https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01).; > This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640); > looks like the most coherent error message (also copied below), if; > @psi-rking https://github.com/psi-rking would like to examine it.; > ; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-190956405.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191034927
https://github.com/psi4/psi4/issues/253#issuecomment-191034927:504,Testability,test,testboard,504,"Doesn't really look like a bug. Either we up the convergence criterion or; we check only 5 decimals. On Tue, Mar 1, 2016 at 5:14 PM, Lori A. Burns notifications@github.com; wrote:. > Sorry @avcopan https://github.com/avcopan, I saw all the @IRCs in that; > gist above and thought opt7 was an unlabeled IRC. But that was for; > opt-irc-2, which should be fixed now.; > ; > opt7 fails on a few systems (; > https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01).; > This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640); > looks like the most coherent error message (also copied below), if; > @psi-rking https://github.com/psi-rking would like to examine it.; > ; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-190956405.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191034927
https://github.com/psi4/psi4/issues/253#issuecomment-191034927:524,Testability,test,testDetails,524,"Doesn't really look like a bug. Either we up the convergence criterion or; we check only 5 decimals. On Tue, Mar 1, 2016 at 5:14 PM, Lori A. Burns notifications@github.com; wrote:. > Sorry @avcopan https://github.com/avcopan, I saw all the @IRCs in that; > gist above and thought opt7 was an unlabeled IRC. But that was for; > opt-irc-2, which should be fixed now.; > ; > opt7 fails on a few systems (; > https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01).; > This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640); > looks like the most coherent error message (also copied below), if; > @psi-rking https://github.com/psi-rking would like to examine it.; > ; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-190956405.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191034927
https://github.com/psi4/psi4/issues/253#issuecomment-191034927:540,Testability,test,test,540,"Doesn't really look like a bug. Either we up the convergence criterion or; we check only 5 decimals. On Tue, Mar 1, 2016 at 5:14 PM, Lori A. Burns notifications@github.com; wrote:. > Sorry @avcopan https://github.com/avcopan, I saw all the @IRCs in that; > gist above and thought opt7 was an unlabeled IRC. But that was for; > opt-irc-2, which should be fixed now.; > ; > opt7 fails on a few systems (; > https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01).; > This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640); > looks like the most coherent error message (also copied below), if; > @psi-rking https://github.com/psi-rking would like to examine it.; > ; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-190956405.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191034927
https://github.com/psi4/psi4/issues/253#issuecomment-191036575:37,Testability,test,testing,37,Concur. Whichever you feel meets the testing needs best.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191036575
https://github.com/psi4/psi4/pull/254#issuecomment-184372725:18,Testability,test,test,18,Going to let this test out as another check on wavefunction_pass then ill merge it.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/254#issuecomment-184372725
https://github.com/psi4/psi4/pull/254#issuecomment-184374822:51,Usability,guid,guidelines,51,"Sounds good to me. I just wanted to get some rough guidelines in there, now that we've made master private. Feel free to add/remove anything.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/254#issuecomment-184374822
https://github.com/psi4/psi4/pull/254#issuecomment-185526548:6,Usability,guid,guidelines,6,These guidelines seem clear enough to me. Thanks!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/254#issuecomment-185526548
https://github.com/psi4/psi4/pull/254#issuecomment-185526548:22,Usability,clear,clear,22,These guidelines seem clear enough to me. Thanks!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/254#issuecomment-185526548
https://github.com/psi4/psi4/pull/254#issuecomment-186988254:15,Usability,feedback,feedback,15,"Thanks for the feedback, all. I agree that we can recommend people launch a PR early on, and only when it's marked as ready to go will it be pulled in. To that end, I'll mess with the [new PR templates](https://github.com/blog/2111-issue-and-pull-request-templates) that GitHub just launched; a little checkbox would be a nice, clean solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/254#issuecomment-186988254
https://github.com/psi4/psi4/pull/254#issuecomment-187310350:672,Availability,down,down,672,"I haven't seen any articles advocating the new workflow, but will let you know if I stumble upon them. I just skimmed the link you sent, and it looks like it raises some good points. My motivation for pushing the PR-based workflow is to make it much easier to validate (via Travis) contributions. By finding issues at the PR stage, we can avoid problems entering the codebase; pushing the new CC transform code as a PR would have prevented that simple missing ""return"" statement from affecting any users, for example. That turned out to be a non-issue, but it serves as a nice example of how apparently good code can still introduce problems that can be difficult to hunt down without our new workflow. The PR mechanism just serves to utilize the contributor's fork as a staging area for validation, which takes a lot of responsibility off the shoulders of the maintainer that clicks that ""accept"" button. A very nice side effect of all of this, is that is brings us in line with most projects on GH, and lowers the barrier to getting contributions from outside the usual suspects.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/254#issuecomment-187310350
https://github.com/psi4/psi4/pull/254#issuecomment-187310350:339,Safety,avoid,avoid,339,"I haven't seen any articles advocating the new workflow, but will let you know if I stumble upon them. I just skimmed the link you sent, and it looks like it raises some good points. My motivation for pushing the PR-based workflow is to make it much easier to validate (via Travis) contributions. By finding issues at the PR stage, we can avoid problems entering the codebase; pushing the new CC transform code as a PR would have prevented that simple missing ""return"" statement from affecting any users, for example. That turned out to be a non-issue, but it serves as a nice example of how apparently good code can still introduce problems that can be difficult to hunt down without our new workflow. The PR mechanism just serves to utilize the contributor's fork as a staging area for validation, which takes a lot of responsibility off the shoulders of the maintainer that clicks that ""accept"" button. A very nice side effect of all of this, is that is brings us in line with most projects on GH, and lowers the barrier to getting contributions from outside the usual suspects.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/254#issuecomment-187310350
https://github.com/psi4/psi4/pull/254#issuecomment-187310350:260,Security,validat,validate,260,"I haven't seen any articles advocating the new workflow, but will let you know if I stumble upon them. I just skimmed the link you sent, and it looks like it raises some good points. My motivation for pushing the PR-based workflow is to make it much easier to validate (via Travis) contributions. By finding issues at the PR stage, we can avoid problems entering the codebase; pushing the new CC transform code as a PR would have prevented that simple missing ""return"" statement from affecting any users, for example. That turned out to be a non-issue, but it serves as a nice example of how apparently good code can still introduce problems that can be difficult to hunt down without our new workflow. The PR mechanism just serves to utilize the contributor's fork as a staging area for validation, which takes a lot of responsibility off the shoulders of the maintainer that clicks that ""accept"" button. A very nice side effect of all of this, is that is brings us in line with most projects on GH, and lowers the barrier to getting contributions from outside the usual suspects.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/254#issuecomment-187310350
https://github.com/psi4/psi4/pull/254#issuecomment-187310350:788,Security,validat,validation,788,"I haven't seen any articles advocating the new workflow, but will let you know if I stumble upon them. I just skimmed the link you sent, and it looks like it raises some good points. My motivation for pushing the PR-based workflow is to make it much easier to validate (via Travis) contributions. By finding issues at the PR stage, we can avoid problems entering the codebase; pushing the new CC transform code as a PR would have prevented that simple missing ""return"" statement from affecting any users, for example. That turned out to be a non-issue, but it serves as a nice example of how apparently good code can still introduce problems that can be difficult to hunt down without our new workflow. The PR mechanism just serves to utilize the contributor's fork as a staging area for validation, which takes a lot of responsibility off the shoulders of the maintainer that clicks that ""accept"" button. A very nice side effect of all of this, is that is brings us in line with most projects on GH, and lowers the barrier to getting contributions from outside the usual suspects.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/254#issuecomment-187310350
https://github.com/psi4/psi4/pull/254#issuecomment-187310350:445,Usability,simpl,simple,445,"I haven't seen any articles advocating the new workflow, but will let you know if I stumble upon them. I just skimmed the link you sent, and it looks like it raises some good points. My motivation for pushing the PR-based workflow is to make it much easier to validate (via Travis) contributions. By finding issues at the PR stage, we can avoid problems entering the codebase; pushing the new CC transform code as a PR would have prevented that simple missing ""return"" statement from affecting any users, for example. That turned out to be a non-issue, but it serves as a nice example of how apparently good code can still introduce problems that can be difficult to hunt down without our new workflow. The PR mechanism just serves to utilize the contributor's fork as a staging area for validation, which takes a lot of responsibility off the shoulders of the maintainer that clicks that ""accept"" button. A very nice side effect of all of this, is that is brings us in line with most projects on GH, and lowers the barrier to getting contributions from outside the usual suspects.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/254#issuecomment-187310350
https://github.com/psi4/psi4/issues/256#issuecomment-184648840:98,Availability,fault,faults,98,"SOSCF is not implemented for DFT as we do not have exact DFT Hessians yet. That's odd that it seg faults however, it should call the base HF SOSCF method and throw an error. I'll see if I can fix this. . -Daniel Smith; Sent from my iPhone. . > On Feb 16, 2016, at 05:21, Holger Kruse notifications@github.com wrote:; > ; > version: Rev {master} 0d10de8; > ; > After entering the SOSCF psi4 exists with a segmentation fault. It prints the soscf header if soscf_print true. Occurs e.g. when I run soscf1 test case with PBE instead of HF.; > ; > I don't know if SOSCF should work with DFT or not.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/256#issuecomment-184648840
https://github.com/psi4/psi4/issues/256#issuecomment-184648840:167,Availability,error,error,167,"SOSCF is not implemented for DFT as we do not have exact DFT Hessians yet. That's odd that it seg faults however, it should call the base HF SOSCF method and throw an error. I'll see if I can fix this. . -Daniel Smith; Sent from my iPhone. . > On Feb 16, 2016, at 05:21, Holger Kruse notifications@github.com wrote:; > ; > version: Rev {master} 0d10de8; > ; > After entering the SOSCF psi4 exists with a segmentation fault. It prints the soscf header if soscf_print true. Occurs e.g. when I run soscf1 test case with PBE instead of HF.; > ; > I don't know if SOSCF should work with DFT or not.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/256#issuecomment-184648840
https://github.com/psi4/psi4/issues/256#issuecomment-184648840:417,Availability,fault,fault,417,"SOSCF is not implemented for DFT as we do not have exact DFT Hessians yet. That's odd that it seg faults however, it should call the base HF SOSCF method and throw an error. I'll see if I can fix this. . -Daniel Smith; Sent from my iPhone. . > On Feb 16, 2016, at 05:21, Holger Kruse notifications@github.com wrote:; > ; > version: Rev {master} 0d10de8; > ; > After entering the SOSCF psi4 exists with a segmentation fault. It prints the soscf header if soscf_print true. Occurs e.g. when I run soscf1 test case with PBE instead of HF.; > ; > I don't know if SOSCF should work with DFT or not.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/256#issuecomment-184648840
https://github.com/psi4/psi4/issues/256#issuecomment-184648840:502,Testability,test,test,502,"SOSCF is not implemented for DFT as we do not have exact DFT Hessians yet. That's odd that it seg faults however, it should call the base HF SOSCF method and throw an error. I'll see if I can fix this. . -Daniel Smith; Sent from my iPhone. . > On Feb 16, 2016, at 05:21, Holger Kruse notifications@github.com wrote:; > ; > version: Rev {master} 0d10de8; > ; > After entering the SOSCF psi4 exists with a segmentation fault. It prints the soscf header if soscf_print true. Occurs e.g. when I run soscf1 test case with PBE instead of HF.; > ; > I don't know if SOSCF should work with DFT or not.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/256#issuecomment-184648840
https://github.com/psi4/psi4/issues/256#issuecomment-184814615:11,Deployability,patch,patch,11,"I put in a patch so that this should soft fail now. SOSCF is quite a new module, out of curiosity have you used it for any other systems?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/256#issuecomment-184814615
https://github.com/psi4/psi4/issues/256#issuecomment-184844335:37,Deployability,update,update,37,"Yea, Psi4's SOSCF is an exact Newton update if you let the equations fully converge; however, it makes implementing SOSCF for KS a bit rough since we need to compute all possible KS Hessian vector products (which is actually on a todo list somewhere!). If it is a desired feature we can add an approximate SOSCF update. Either through BFGS or just some kind of clever diagonal approximation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/256#issuecomment-184844335
https://github.com/psi4/psi4/issues/256#issuecomment-184844335:312,Deployability,update,update,312,"Yea, Psi4's SOSCF is an exact Newton update if you let the equations fully converge; however, it makes implementing SOSCF for KS a bit rough since we need to compute all possible KS Hessian vector products (which is actually on a todo list somewhere!). If it is a desired feature we can add an approximate SOSCF update. Either through BFGS or just some kind of clever diagonal approximation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/256#issuecomment-184844335
https://github.com/psi4/psi4/issues/256#issuecomment-185103863:32,Availability,robust,robust,32,"The DIIS solver is usually more robust than approx. SOSCF, at least ORCA's implementation had and still has troubles sometimes. Not sure if it is worth the time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/256#issuecomment-185103863
https://github.com/psi4/psi4/pull/257#issuecomment-184851903:15,Testability,test,tests,15,Looks like the tests are 1-2 minutes on one core and have been added to shorttests. Great!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/257#issuecomment-184851903
https://github.com/psi4/psi4/issues/259#issuecomment-184846709:106,Availability,error,error,106,"On the SAPT wavefunction: right now, we do not know what SAPT should return. I see that you have added an error message reading ""SAPT incomplete wavefunction is only dimer SCF"", which is a bit confusing because at first I thought SAPT had a problem _reading_ the wavefunction in. Maybe a message reading ""SAPT returns incomplete wavefunction, only dimer SCF"" would be better. Also, I don't think SAPT can meaningfully return a wavefunction, at least not in its current state... Do you think it would be better if methods like that just returned an empty structure or the equivalent of a NULL pointer in Python ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-184846709
https://github.com/psi4/psi4/issues/259#issuecomment-184846709:112,Integrability,message,message,112,"On the SAPT wavefunction: right now, we do not know what SAPT should return. I see that you have added an error message reading ""SAPT incomplete wavefunction is only dimer SCF"", which is a bit confusing because at first I thought SAPT had a problem _reading_ the wavefunction in. Maybe a message reading ""SAPT returns incomplete wavefunction, only dimer SCF"" would be better. Also, I don't think SAPT can meaningfully return a wavefunction, at least not in its current state... Do you think it would be better if methods like that just returned an empty structure or the equivalent of a NULL pointer in Python ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-184846709
https://github.com/psi4/psi4/issues/259#issuecomment-184846709:288,Integrability,message,message,288,"On the SAPT wavefunction: right now, we do not know what SAPT should return. I see that you have added an error message reading ""SAPT incomplete wavefunction is only dimer SCF"", which is a bit confusing because at first I thought SAPT had a problem _reading_ the wavefunction in. Maybe a message reading ""SAPT returns incomplete wavefunction, only dimer SCF"" would be better. Also, I don't think SAPT can meaningfully return a wavefunction, at least not in its current state... Do you think it would be better if methods like that just returned an empty structure or the equivalent of a NULL pointer in Python ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-184846709
https://github.com/psi4/psi4/issues/259#issuecomment-184852147:415,Integrability,message,message,415,"@jgonthier We could return a `None` object in python, but with the way wavefunction passing works its probably best to return _something_. We could also return a blank wavefunction, but the SCF does have meaningful information. Its a hard call and part of the reason why we didnt solve it during the wavefunction_pass work. Any opinions are greatly appreciated!. The comments do need an overhaul. We would like the message to print only if `return_wfn=True`, but we have not yet figured out the mechanics to do that cleanly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-184852147
https://github.com/psi4/psi4/issues/259#issuecomment-184963064:97,Security,access,access,97,@dgasmith I think right now returning the dimer SCF wavefunction is fine. It gives the user easy access to it in case more computations are required. If there are other requests from users/developers in the future we could consider it.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-184963064
https://github.com/psi4/psi4/issues/259#issuecomment-191517725:44,Deployability,release,release,44,"Are all of these really necessary for a 1.0 release? Some of them seem to me to be design-/feature-related issues that could wait until 1.X or 1.0.X. For example, are we worried at this point that general users are going to run EFP calculations?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-191517725
https://github.com/psi4/psi4/issues/259#issuecomment-191759336:616,Deployability,release,release,616,"@lothian For EFP I would argue that we should figure out the corner case now while were thinking about it as they are likely to come up again in the future. If we simple pass through the SCF Wavefunction or a blank Wavefunction for these, thats fine. But we need to make it a rule. @fevangelista By the same token, psimrcc doesn't need a Wavefunction if you are ok with the default behavior for Wavefunction-less methods. I could see moving the C1 symmetry conversion to a later date (David has already strongly encouraged me to think about overhauling the Wavefunction class). Everything else I would want in a 1.0 release as they are enhancements that will prevent additional forum posts (documentation, softer fails, and plugins using modern Psi programming practice) or what I would call logical flow\* issues (passing orbitals to SCF, what wavefunction is returned). *Logical flow: If an advanced user is used to certain mechanics working it is quite jarring when a conventional call suddenly does not work for no apparent reason.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-191759336
https://github.com/psi4/psi4/issues/259#issuecomment-191759336:636,Modifiability,enhance,enhancements,636,"@lothian For EFP I would argue that we should figure out the corner case now while were thinking about it as they are likely to come up again in the future. If we simple pass through the SCF Wavefunction or a blank Wavefunction for these, thats fine. But we need to make it a rule. @fevangelista By the same token, psimrcc doesn't need a Wavefunction if you are ok with the default behavior for Wavefunction-less methods. I could see moving the C1 symmetry conversion to a later date (David has already strongly encouraged me to think about overhauling the Wavefunction class). Everything else I would want in a 1.0 release as they are enhancements that will prevent additional forum posts (documentation, softer fails, and plugins using modern Psi programming practice) or what I would call logical flow\* issues (passing orbitals to SCF, what wavefunction is returned). *Logical flow: If an advanced user is used to certain mechanics working it is quite jarring when a conventional call suddenly does not work for no apparent reason.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-191759336
https://github.com/psi4/psi4/issues/259#issuecomment-191759336:724,Modifiability,plugin,plugins,724,"@lothian For EFP I would argue that we should figure out the corner case now while were thinking about it as they are likely to come up again in the future. If we simple pass through the SCF Wavefunction or a blank Wavefunction for these, thats fine. But we need to make it a rule. @fevangelista By the same token, psimrcc doesn't need a Wavefunction if you are ok with the default behavior for Wavefunction-less methods. I could see moving the C1 symmetry conversion to a later date (David has already strongly encouraged me to think about overhauling the Wavefunction class). Everything else I would want in a 1.0 release as they are enhancements that will prevent additional forum posts (documentation, softer fails, and plugins using modern Psi programming practice) or what I would call logical flow\* issues (passing orbitals to SCF, what wavefunction is returned). *Logical flow: If an advanced user is used to certain mechanics working it is quite jarring when a conventional call suddenly does not work for no apparent reason.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-191759336
https://github.com/psi4/psi4/issues/259#issuecomment-191759336:792,Testability,log,logical,792,"@lothian For EFP I would argue that we should figure out the corner case now while were thinking about it as they are likely to come up again in the future. If we simple pass through the SCF Wavefunction or a blank Wavefunction for these, thats fine. But we need to make it a rule. @fevangelista By the same token, psimrcc doesn't need a Wavefunction if you are ok with the default behavior for Wavefunction-less methods. I could see moving the C1 symmetry conversion to a later date (David has already strongly encouraged me to think about overhauling the Wavefunction class). Everything else I would want in a 1.0 release as they are enhancements that will prevent additional forum posts (documentation, softer fails, and plugins using modern Psi programming practice) or what I would call logical flow\* issues (passing orbitals to SCF, what wavefunction is returned). *Logical flow: If an advanced user is used to certain mechanics working it is quite jarring when a conventional call suddenly does not work for no apparent reason.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-191759336
https://github.com/psi4/psi4/issues/259#issuecomment-191759336:873,Testability,Log,Logical,873,"@lothian For EFP I would argue that we should figure out the corner case now while were thinking about it as they are likely to come up again in the future. If we simple pass through the SCF Wavefunction or a blank Wavefunction for these, thats fine. But we need to make it a rule. @fevangelista By the same token, psimrcc doesn't need a Wavefunction if you are ok with the default behavior for Wavefunction-less methods. I could see moving the C1 symmetry conversion to a later date (David has already strongly encouraged me to think about overhauling the Wavefunction class). Everything else I would want in a 1.0 release as they are enhancements that will prevent additional forum posts (documentation, softer fails, and plugins using modern Psi programming practice) or what I would call logical flow\* issues (passing orbitals to SCF, what wavefunction is returned). *Logical flow: If an advanced user is used to certain mechanics working it is quite jarring when a conventional call suddenly does not work for no apparent reason.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-191759336
https://github.com/psi4/psi4/issues/259#issuecomment-191759336:163,Usability,simpl,simple,163,"@lothian For EFP I would argue that we should figure out the corner case now while were thinking about it as they are likely to come up again in the future. If we simple pass through the SCF Wavefunction or a blank Wavefunction for these, thats fine. But we need to make it a rule. @fevangelista By the same token, psimrcc doesn't need a Wavefunction if you are ok with the default behavior for Wavefunction-less methods. I could see moving the C1 symmetry conversion to a later date (David has already strongly encouraged me to think about overhauling the Wavefunction class). Everything else I would want in a 1.0 release as they are enhancements that will prevent additional forum posts (documentation, softer fails, and plugins using modern Psi programming practice) or what I would call logical flow\* issues (passing orbitals to SCF, what wavefunction is returned). *Logical flow: If an advanced user is used to certain mechanics working it is quite jarring when a conventional call suddenly does not work for no apparent reason.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-191759336
https://github.com/psi4/psi4/issues/259#issuecomment-191921428:94,Usability,simpl,simple,94,"On the wavefunction return for efp, psimrcc, sapt issue, it's not going to matter much to the simple operation of these methods. But now `gradient()`, `hessian()`, etc. rely on functions from proc.py to return a Wavefunction, so the generic driver machinery of analytic vs. findif derivatives is going to be broken. Hence the case for deciding/agreeing now what to do about these corner cases. I think a sensible thing is just to return the scf Wfn (I already did that for MRCC, which should be in that discussion list, too), leaving pure EFP as still an oddity.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-191921428
https://github.com/psi4/psi4/issues/259#issuecomment-192482520:225,Performance,optimiz,optimization,225,"@dgasmith: psimrcc does not compute NOs or change orbitals/integrals/etc so I am fine with both solutions. I prefer to pass back the RHF wfn or whatever alternative solution that does not to break the ability to do numerical optimization, since we actually use this feature. I'll be glad to work on psimrcc once we settle on a solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-192482520
https://github.com/psi4/psi4/issues/260#issuecomment-184837562:451,Availability,error,error,451,"Yes, we have recently pushed a very large update to how data handling is passed in Psi4. Please change your input to the following:. ``` python; scf_e, scf_wfn = energy('scf', return_wfn=True); oeprop(scf_wfn, ""MULLIKEN_CHARGES""); ```. Effectively, there is no longer a global wavefunction and you must explicitly pass wavefunctions around. Sowreap should fail at the moment (has not had a wavefunction_pass update yet). Can you please post the sapt4 error and the git reference hash?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/260#issuecomment-184837562
https://github.com/psi4/psi4/issues/260#issuecomment-184837562:42,Deployability,update,update,42,"Yes, we have recently pushed a very large update to how data handling is passed in Psi4. Please change your input to the following:. ``` python; scf_e, scf_wfn = energy('scf', return_wfn=True); oeprop(scf_wfn, ""MULLIKEN_CHARGES""); ```. Effectively, there is no longer a global wavefunction and you must explicitly pass wavefunctions around. Sowreap should fail at the moment (has not had a wavefunction_pass update yet). Can you please post the sapt4 error and the git reference hash?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/260#issuecomment-184837562
https://github.com/psi4/psi4/issues/260#issuecomment-184837562:408,Deployability,update,update,408,"Yes, we have recently pushed a very large update to how data handling is passed in Psi4. Please change your input to the following:. ``` python; scf_e, scf_wfn = energy('scf', return_wfn=True); oeprop(scf_wfn, ""MULLIKEN_CHARGES""); ```. Effectively, there is no longer a global wavefunction and you must explicitly pass wavefunctions around. Sowreap should fail at the moment (has not had a wavefunction_pass update yet). Can you please post the sapt4 error and the git reference hash?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/260#issuecomment-184837562
https://github.com/psi4/psi4/issues/260#issuecomment-184837562:162,Energy Efficiency,energy,energy,162,"Yes, we have recently pushed a very large update to how data handling is passed in Psi4. Please change your input to the following:. ``` python; scf_e, scf_wfn = energy('scf', return_wfn=True); oeprop(scf_wfn, ""MULLIKEN_CHARGES""); ```. Effectively, there is no longer a global wavefunction and you must explicitly pass wavefunctions around. Sowreap should fail at the moment (has not had a wavefunction_pass update yet). Can you please post the sapt4 error and the git reference hash?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/260#issuecomment-184837562
https://github.com/psi4/psi4/issues/260#issuecomment-184837562:479,Security,hash,hash,479,"Yes, we have recently pushed a very large update to how data handling is passed in Psi4. Please change your input to the following:. ``` python; scf_e, scf_wfn = energy('scf', return_wfn=True); oeprop(scf_wfn, ""MULLIKEN_CHARGES""); ```. Effectively, there is no longer a global wavefunction and you must explicitly pass wavefunctions around. Sowreap should fail at the moment (has not had a wavefunction_pass update yet). Can you please post the sapt4 error and the git reference hash?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/260#issuecomment-184837562
https://github.com/psi4/psi4/issues/260#issuecomment-184839252:58,Availability,error,error,58,"Ok, thanks. Should I open a different issue for the sapt4 error?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/260#issuecomment-184839252
https://github.com/psi4/psi4/issues/260#issuecomment-184840463:169,Availability,error,error,169,"```; sapt4; 2016-02-16 10:46; SAPT incomplete wavefunction is only dimer SCF; SAPT Elst: computed value (-0.0407577) does not match (-0.0407606) to 6 decimal places. An error has occurred Py-side; Traceback:; <class 'p4xcpt.TestComparisonError'>: SAPT Elst: computed value (-0.0407577) does not match (-0.0407606) to 6 decimal places.: File ""<string>"", line 67, in <module>. File ""/Users/stanlen1/gitrepos/psi4/share/python/p4util/util.py"", line 100, in compare_values; raise TestComparisonError(message); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/260#issuecomment-184840463
https://github.com/psi4/psi4/issues/260#issuecomment-184840463:496,Integrability,message,message,496,"```; sapt4; 2016-02-16 10:46; SAPT incomplete wavefunction is only dimer SCF; SAPT Elst: computed value (-0.0407577) does not match (-0.0407606) to 6 decimal places. An error has occurred Py-side; Traceback:; <class 'p4xcpt.TestComparisonError'>: SAPT Elst: computed value (-0.0407577) does not match (-0.0407606) to 6 decimal places.: File ""<string>"", line 67, in <module>. File ""/Users/stanlen1/gitrepos/psi4/share/python/p4util/util.py"", line 100, in compare_values; raise TestComparisonError(message); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/260#issuecomment-184840463
https://github.com/psi4/psi4/issues/260#issuecomment-184840463:224,Testability,Test,TestComparisonError,224,"```; sapt4; 2016-02-16 10:46; SAPT incomplete wavefunction is only dimer SCF; SAPT Elst: computed value (-0.0407577) does not match (-0.0407606) to 6 decimal places. An error has occurred Py-side; Traceback:; <class 'p4xcpt.TestComparisonError'>: SAPT Elst: computed value (-0.0407577) does not match (-0.0407606) to 6 decimal places.: File ""<string>"", line 67, in <module>. File ""/Users/stanlen1/gitrepos/psi4/share/python/p4util/util.py"", line 100, in compare_values; raise TestComparisonError(message); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/260#issuecomment-184840463
https://github.com/psi4/psi4/issues/260#issuecomment-184840463:476,Testability,Test,TestComparisonError,476,"```; sapt4; 2016-02-16 10:46; SAPT incomplete wavefunction is only dimer SCF; SAPT Elst: computed value (-0.0407577) does not match (-0.0407606) to 6 decimal places. An error has occurred Py-side; Traceback:; <class 'p4xcpt.TestComparisonError'>: SAPT Elst: computed value (-0.0407577) does not match (-0.0407606) to 6 decimal places.: File ""<string>"", line 67, in <module>. File ""/Users/stanlen1/gitrepos/psi4/share/python/p4util/util.py"", line 100, in compare_values; raise TestComparisonError(message); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/260#issuecomment-184840463
https://github.com/psi4/psi4/issues/260#issuecomment-184846589:66,Testability,test,test,66,"Great, thanks for this. I just pushed a change that will fix this test case. @jgonthier We both attempted to fix sapt4 in two different ways, the merge accepted both fixes which consequently broke the test case again. I reverted to your way of doing this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/260#issuecomment-184846589
https://github.com/psi4/psi4/issues/260#issuecomment-184846589:201,Testability,test,test,201,"Great, thanks for this. I just pushed a change that will fix this test case. @jgonthier We both attempted to fix sapt4 in two different ways, the merge accepted both fixes which consequently broke the test case again. I reverted to your way of doing this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/260#issuecomment-184846589
https://github.com/psi4/psi4/issues/262#issuecomment-185230186:461,Availability,error,error-stl-iterator-base-types-h,461,This is a known issue with the Intel compiler and gcc 5+ header files. Even the latest Intel version 16.0.1 is affected. NERSC advises loading in gcc 4.9.x series. References:; [Intel Forum](https://software.intel.com/en-us/forums/intel-c-compiler/topic/565143); [Intel Fourm](https://software.intel.com/en-us/forums/intel-c-compiler/topic/591174); [NERSC](https://www.nersc.gov/users/software/compilers/intel-fortran-c-and-c/intel-bug-reports/intel-c-compiler-error-stl-iterator-base-types-h/),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/262#issuecomment-185230186
https://github.com/psi4/psi4/issues/262#issuecomment-185230186:135,Performance,load,loading,135,This is a known issue with the Intel compiler and gcc 5+ header files. Even the latest Intel version 16.0.1 is affected. NERSC advises loading in gcc 4.9.x series. References:; [Intel Forum](https://software.intel.com/en-us/forums/intel-c-compiler/topic/565143); [Intel Fourm](https://software.intel.com/en-us/forums/intel-c-compiler/topic/591174); [NERSC](https://www.nersc.gov/users/software/compilers/intel-fortran-c-and-c/intel-bug-reports/intel-c-compiler-error-stl-iterator-base-types-h/),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/262#issuecomment-185230186
https://github.com/psi4/psi4/issues/262#issuecomment-185960794:6,Deployability,release,released,6,Intel released 2016 update 2 today (16.0.2) and it resolves this header file issue. We may need to note this someplace for others to find: Intel C++ version 16.0.0 and 16.0.1 with GCC 5 C++ standard library has problems. Either use Intel 16.0.0 and 16.0.1 with pre-GCC 5 or update your Intel compiler to 16.0.2. Closing the issue as it was a compiler and not a Psi4 bug.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/262#issuecomment-185960794
https://github.com/psi4/psi4/issues/262#issuecomment-185960794:20,Deployability,update,update,20,Intel released 2016 update 2 today (16.0.2) and it resolves this header file issue. We may need to note this someplace for others to find: Intel C++ version 16.0.0 and 16.0.1 with GCC 5 C++ standard library has problems. Either use Intel 16.0.0 and 16.0.1 with pre-GCC 5 or update your Intel compiler to 16.0.2. Closing the issue as it was a compiler and not a Psi4 bug.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/262#issuecomment-185960794
https://github.com/psi4/psi4/issues/262#issuecomment-185960794:274,Deployability,update,update,274,Intel released 2016 update 2 today (16.0.2) and it resolves this header file issue. We may need to note this someplace for others to find: Intel C++ version 16.0.0 and 16.0.1 with GCC 5 C++ standard library has problems. Either use Intel 16.0.0 and 16.0.1 with pre-GCC 5 or update your Intel compiler to 16.0.2. Closing the issue as it was a compiler and not a Psi4 bug.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/262#issuecomment-185960794
https://github.com/psi4/psi4/issues/263#issuecomment-185199613:46,Testability,test,test,46,"Nice, thanks for the heads up! I'll give it a test and then get it in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/263#issuecomment-185199613
https://github.com/psi4/psi4/issues/264#issuecomment-185220619:3748,Availability,error,error,3748,"/executable.cpp:459: undefined reference to `CheMPS2::DMRG::DMRG(CheMPS2::Problem*, CheMPS2::ConvergenceScheme*, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:462: undefined reference to `CheMPS2::DMRG::newExcitation(double)'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:463: undefined reference to `CheMPS2::DMRG::Solve()'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:464: undefined reference to `CheMPS2::DMRG::activateExcitations(int)'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:475: undefined reference to `CheMPS2::DMRG::deleteStoredOperators()'; /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `CheMPS2::DMRG::calc2DMandCorrelations()':; /home/jturney/Code/CheMPS2/CheMPS2/include/chemps2/DMRG.h:104: undefined reference to `CheMPS2::DMRG::calc_rdms_and_correlations(bool)'; /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `main':; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:470: undefined reference to `CheMPS2::TwoDM::write2DMAfile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) const'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:471: undefined reference to `CheMPS2::Correlations::Print(int, int) const'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:352: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:343: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:410: undefined reference to `CheMPS2::Irreps::~Irreps()'; collect2: error: ld returned 1 exit status; CheMPS2/CMakeFiles/chemps2bin.dir/build.make:92: recipe for target 'CheMPS2/chemps2' failed; make[2]: *** [CheMPS2/chemps2] Error 1; CMakeFiles/Makefile2:149: recipe for target 'CheMPS2/CMakeFiles/chemps2bin.dir/all' failed; make[1]: *** [CheMPS2/CMakeFiles/chemps2bin.dir/all] Error 2; Makefile:126: recipe for target 'all' failed; make: *** [all] Error 2; ... ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185220619
https://github.com/psi4/psi4/issues/264#issuecomment-185220619:3906,Availability,Error,Error,3906,"/executable.cpp:459: undefined reference to `CheMPS2::DMRG::DMRG(CheMPS2::Problem*, CheMPS2::ConvergenceScheme*, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:462: undefined reference to `CheMPS2::DMRG::newExcitation(double)'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:463: undefined reference to `CheMPS2::DMRG::Solve()'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:464: undefined reference to `CheMPS2::DMRG::activateExcitations(int)'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:475: undefined reference to `CheMPS2::DMRG::deleteStoredOperators()'; /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `CheMPS2::DMRG::calc2DMandCorrelations()':; /home/jturney/Code/CheMPS2/CheMPS2/include/chemps2/DMRG.h:104: undefined reference to `CheMPS2::DMRG::calc_rdms_and_correlations(bool)'; /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `main':; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:470: undefined reference to `CheMPS2::TwoDM::write2DMAfile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) const'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:471: undefined reference to `CheMPS2::Correlations::Print(int, int) const'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:352: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:343: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:410: undefined reference to `CheMPS2::Irreps::~Irreps()'; collect2: error: ld returned 1 exit status; CheMPS2/CMakeFiles/chemps2bin.dir/build.make:92: recipe for target 'CheMPS2/chemps2' failed; make[2]: *** [CheMPS2/chemps2] Error 1; CMakeFiles/Makefile2:149: recipe for target 'CheMPS2/CMakeFiles/chemps2bin.dir/all' failed; make[1]: *** [CheMPS2/CMakeFiles/chemps2bin.dir/all] Error 2; Makefile:126: recipe for target 'all' failed; make: *** [all] Error 2; ... ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185220619
https://github.com/psi4/psi4/issues/264#issuecomment-185220619:4060,Availability,Error,Error,4060,"/executable.cpp:459: undefined reference to `CheMPS2::DMRG::DMRG(CheMPS2::Problem*, CheMPS2::ConvergenceScheme*, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:462: undefined reference to `CheMPS2::DMRG::newExcitation(double)'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:463: undefined reference to `CheMPS2::DMRG::Solve()'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:464: undefined reference to `CheMPS2::DMRG::activateExcitations(int)'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:475: undefined reference to `CheMPS2::DMRG::deleteStoredOperators()'; /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `CheMPS2::DMRG::calc2DMandCorrelations()':; /home/jturney/Code/CheMPS2/CheMPS2/include/chemps2/DMRG.h:104: undefined reference to `CheMPS2::DMRG::calc_rdms_and_correlations(bool)'; /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `main':; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:470: undefined reference to `CheMPS2::TwoDM::write2DMAfile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) const'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:471: undefined reference to `CheMPS2::Correlations::Print(int, int) const'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:352: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:343: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:410: undefined reference to `CheMPS2::Irreps::~Irreps()'; collect2: error: ld returned 1 exit status; CheMPS2/CMakeFiles/chemps2bin.dir/build.make:92: recipe for target 'CheMPS2/chemps2' failed; make[2]: *** [CheMPS2/chemps2] Error 1; CMakeFiles/Makefile2:149: recipe for target 'CheMPS2/CMakeFiles/chemps2bin.dir/all' failed; make[1]: *** [CheMPS2/CMakeFiles/chemps2bin.dir/all] Error 2; Makefile:126: recipe for target 'all' failed; make: *** [all] Error 2; ... ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185220619
https://github.com/psi4/psi4/issues/264#issuecomment-185220619:4131,Availability,Error,Error,4131,"/executable.cpp:459: undefined reference to `CheMPS2::DMRG::DMRG(CheMPS2::Problem*, CheMPS2::ConvergenceScheme*, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:462: undefined reference to `CheMPS2::DMRG::newExcitation(double)'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:463: undefined reference to `CheMPS2::DMRG::Solve()'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:464: undefined reference to `CheMPS2::DMRG::activateExcitations(int)'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:475: undefined reference to `CheMPS2::DMRG::deleteStoredOperators()'; /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `CheMPS2::DMRG::calc2DMandCorrelations()':; /home/jturney/Code/CheMPS2/CheMPS2/include/chemps2/DMRG.h:104: undefined reference to `CheMPS2::DMRG::calc_rdms_and_correlations(bool)'; /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `main':; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:470: undefined reference to `CheMPS2::TwoDM::write2DMAfile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) const'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:471: undefined reference to `CheMPS2::Correlations::Print(int, int) const'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:352: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:343: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:410: undefined reference to `CheMPS2::Irreps::~Irreps()'; collect2: error: ld returned 1 exit status; CheMPS2/CMakeFiles/chemps2bin.dir/build.make:92: recipe for target 'CheMPS2/chemps2' failed; make[2]: *** [CheMPS2/chemps2] Error 1; CMakeFiles/Makefile2:149: recipe for target 'CheMPS2/CMakeFiles/chemps2bin.dir/all' failed; make[1]: *** [CheMPS2/CMakeFiles/chemps2bin.dir/all] Error 2; Makefile:126: recipe for target 'all' failed; make: *** [all] Error 2; ... ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185220619
https://github.com/psi4/psi4/issues/264#issuecomment-185225793:3972,Availability,error,error,3972,":DMRG::Solve()'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:464: undefined reference to `CheMPS2::DMRG::activateExcitations(int)'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:475: undefined reference to`CheMPS2::DMRG::deleteStoredOperators()'; > /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `CheMPS2::DMRG::calc2DMandCorrelations()':; > /home/jturney/Code/CheMPS2/CheMPS2/include/chemps2/DMRG.h:104: undefined reference to`CheMPS2::DMRG::calc_rdms_and_correlations(bool)'; > /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `main':; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:470: undefined reference to`CheMPS2::TwoDM::write2DMAfile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) const'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:471: undefined reference to `CheMPS2::Correlations::Print(int, int) const'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:352: undefined reference to`CheMPS2::Irreps::~Irreps()'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:343: undefined reference to `CheMPS2::Irreps::~Irreps()'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:410: undefined reference to`CheMPS2::Irreps::~Irreps()'; > collect2: error: ld returned 1 exit status; > CheMPS2/CMakeFiles/chemps2bin.dir/build.make:92: recipe for target 'CheMPS2/chemps2' failed; > make[2]: **\* [CheMPS2/chemps2] Error 1; > CMakeFiles/Makefile2:149: recipe for target 'CheMPS2/CMakeFiles/chemps2bin.dir/all' failed; > make[1]: **\* [CheMPS2/CMakeFiles/chemps2bin.dir/all] Error 2; > Makefile:126: recipe for target 'all' failed; > make: **\* [all] Error 2; > ...; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/264#issuecomment-185220619. ## . ---. dr. ir. Sebastian Wouters; Postdoctoral Fellow of the Research Foundation Flanders (FWO); Ghent University; (address) Center for Molecular Modeling; Technologiepark 903; 9052 Zwijnaarde (Belgium); (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185225793
https://github.com/psi4/psi4/issues/264#issuecomment-185225793:4135,Availability,Error,Error,4135,":DMRG::Solve()'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:464: undefined reference to `CheMPS2::DMRG::activateExcitations(int)'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:475: undefined reference to`CheMPS2::DMRG::deleteStoredOperators()'; > /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `CheMPS2::DMRG::calc2DMandCorrelations()':; > /home/jturney/Code/CheMPS2/CheMPS2/include/chemps2/DMRG.h:104: undefined reference to`CheMPS2::DMRG::calc_rdms_and_correlations(bool)'; > /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `main':; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:470: undefined reference to`CheMPS2::TwoDM::write2DMAfile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) const'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:471: undefined reference to `CheMPS2::Correlations::Print(int, int) const'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:352: undefined reference to`CheMPS2::Irreps::~Irreps()'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:343: undefined reference to `CheMPS2::Irreps::~Irreps()'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:410: undefined reference to`CheMPS2::Irreps::~Irreps()'; > collect2: error: ld returned 1 exit status; > CheMPS2/CMakeFiles/chemps2bin.dir/build.make:92: recipe for target 'CheMPS2/chemps2' failed; > make[2]: **\* [CheMPS2/chemps2] Error 1; > CMakeFiles/Makefile2:149: recipe for target 'CheMPS2/CMakeFiles/chemps2bin.dir/all' failed; > make[1]: **\* [CheMPS2/CMakeFiles/chemps2bin.dir/all] Error 2; > Makefile:126: recipe for target 'all' failed; > make: **\* [all] Error 2; > ...; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/264#issuecomment-185220619. ## . ---. dr. ir. Sebastian Wouters; Postdoctoral Fellow of the Research Foundation Flanders (FWO); Ghent University; (address) Center for Molecular Modeling; Technologiepark 903; 9052 Zwijnaarde (Belgium); (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185225793
https://github.com/psi4/psi4/issues/264#issuecomment-185225793:4294,Availability,Error,Error,4294,":DMRG::Solve()'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:464: undefined reference to `CheMPS2::DMRG::activateExcitations(int)'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:475: undefined reference to`CheMPS2::DMRG::deleteStoredOperators()'; > /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `CheMPS2::DMRG::calc2DMandCorrelations()':; > /home/jturney/Code/CheMPS2/CheMPS2/include/chemps2/DMRG.h:104: undefined reference to`CheMPS2::DMRG::calc_rdms_and_correlations(bool)'; > /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `main':; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:470: undefined reference to`CheMPS2::TwoDM::write2DMAfile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) const'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:471: undefined reference to `CheMPS2::Correlations::Print(int, int) const'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:352: undefined reference to`CheMPS2::Irreps::~Irreps()'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:343: undefined reference to `CheMPS2::Irreps::~Irreps()'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:410: undefined reference to`CheMPS2::Irreps::~Irreps()'; > collect2: error: ld returned 1 exit status; > CheMPS2/CMakeFiles/chemps2bin.dir/build.make:92: recipe for target 'CheMPS2/chemps2' failed; > make[2]: **\* [CheMPS2/chemps2] Error 1; > CMakeFiles/Makefile2:149: recipe for target 'CheMPS2/CMakeFiles/chemps2bin.dir/all' failed; > make[1]: **\* [CheMPS2/CMakeFiles/chemps2bin.dir/all] Error 2; > Makefile:126: recipe for target 'all' failed; > make: **\* [all] Error 2; > ...; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/264#issuecomment-185220619. ## . ---. dr. ir. Sebastian Wouters; Postdoctoral Fellow of the Research Foundation Flanders (FWO); Ghent University; (address) Center for Molecular Modeling; Technologiepark 903; 9052 Zwijnaarde (Belgium); (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185225793
https://github.com/psi4/psi4/issues/264#issuecomment-185225793:4370,Availability,Error,Error,4370,":DMRG::Solve()'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:464: undefined reference to `CheMPS2::DMRG::activateExcitations(int)'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:475: undefined reference to`CheMPS2::DMRG::deleteStoredOperators()'; > /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `CheMPS2::DMRG::calc2DMandCorrelations()':; > /home/jturney/Code/CheMPS2/CheMPS2/include/chemps2/DMRG.h:104: undefined reference to`CheMPS2::DMRG::calc_rdms_and_correlations(bool)'; > /tmp/ccJGpNaW.ltrans0.ltrans.o: In function `main':; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:470: undefined reference to`CheMPS2::TwoDM::write2DMAfile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) const'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:471: undefined reference to `CheMPS2::Correlations::Print(int, int) const'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:352: undefined reference to`CheMPS2::Irreps::~Irreps()'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:343: undefined reference to `CheMPS2::Irreps::~Irreps()'; > /home/jturney/Code/CheMPS2/CheMPS2/executable.cpp:410: undefined reference to`CheMPS2::Irreps::~Irreps()'; > collect2: error: ld returned 1 exit status; > CheMPS2/CMakeFiles/chemps2bin.dir/build.make:92: recipe for target 'CheMPS2/chemps2' failed; > make[2]: **\* [CheMPS2/chemps2] Error 1; > CMakeFiles/Makefile2:149: recipe for target 'CheMPS2/CMakeFiles/chemps2bin.dir/all' failed; > make[1]: **\* [CheMPS2/CMakeFiles/chemps2bin.dir/all] Error 2; > Makefile:126: recipe for target 'all' failed; > make: **\* [all] Error 2; > ...; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/264#issuecomment-185220619. ## . ---. dr. ir. Sebastian Wouters; Postdoctoral Fellow of the Research Foundation Flanders (FWO); Ghent University; (address) Center for Molecular Modeling; Technologiepark 903; 9052 Zwijnaarde (Belgium); (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185225793
https://github.com/psi4/psi4/issues/264#issuecomment-185260019:943,Modifiability,plugin,plugin,943,"On Ubuntu, I was able to get Psi4 (with CheMPS2 v1.5) and CheMPS2 (master; separate) to link when I disabled the link-time optimizer option in CheMPS2's CMakeLists.txt. Looks like the option is not fully supported on Ubuntu. ```; diff --git a/CMakeLists.txt b/CMakeLists.txt; index 868a694..9f5d2b2 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -46,10 +46,10 @@ if (HAS_IPO); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -ipo""); endif (HAS_IPO). -check_cxx_compiler_flag (-flto HAS_FLTO); -if (HAS_FLTO); - set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); -endif (HAS_FLTO); +#check_cxx_compiler_flag (-flto HAS_FLTO); +#if (HAS_FLTO); +# set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); +#endif (HAS_FLTO). if (ENABLE_GENERIC); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-libstdc++ -static-libgcc""); ```. I came to this conclusion when I tried to look into libchemps2.a:. ```; % nm libchemps2.a| grep appendNew; nm: CASSCF.cpp.o: plugin needed to handle lto object; nm: CASSCFdebug.cpp.o: plugin needed to handle lto object; nm: CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; nm: ConvergenceScheme.cpp.o: plugin needed to handle lto object; nm: Correlations.cpp.o: plugin needed to handle lto object; nm: Davidson.cpp.o: plugin needed to handle lto object; nm: DIIS.cpp.o: plugin needed to handle lto object; nm: DMRG.cpp.o: plugin needed to handle lto object; nm: DMRGmpsio.cpp.o: plugin needed to handle lto object; nm: DMRGoperators.cpp.o: plugin needed to handle lto object; nm: DMRGSCFindices.cpp.o: plugin needed to handle lto object; nm: DMRGSCFintegrals.cpp.o: plugin needed to handle lto object; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185260019
https://github.com/psi4/psi4/issues/264#issuecomment-185260019:1002,Modifiability,plugin,plugin,1002,"On Ubuntu, I was able to get Psi4 (with CheMPS2 v1.5) and CheMPS2 (master; separate) to link when I disabled the link-time optimizer option in CheMPS2's CMakeLists.txt. Looks like the option is not fully supported on Ubuntu. ```; diff --git a/CMakeLists.txt b/CMakeLists.txt; index 868a694..9f5d2b2 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -46,10 +46,10 @@ if (HAS_IPO); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -ipo""); endif (HAS_IPO). -check_cxx_compiler_flag (-flto HAS_FLTO); -if (HAS_FLTO); - set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); -endif (HAS_FLTO); +#check_cxx_compiler_flag (-flto HAS_FLTO); +#if (HAS_FLTO); +# set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); +#endif (HAS_FLTO). if (ENABLE_GENERIC); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-libstdc++ -static-libgcc""); ```. I came to this conclusion when I tried to look into libchemps2.a:. ```; % nm libchemps2.a| grep appendNew; nm: CASSCF.cpp.o: plugin needed to handle lto object; nm: CASSCFdebug.cpp.o: plugin needed to handle lto object; nm: CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; nm: ConvergenceScheme.cpp.o: plugin needed to handle lto object; nm: Correlations.cpp.o: plugin needed to handle lto object; nm: Davidson.cpp.o: plugin needed to handle lto object; nm: DIIS.cpp.o: plugin needed to handle lto object; nm: DMRG.cpp.o: plugin needed to handle lto object; nm: DMRGmpsio.cpp.o: plugin needed to handle lto object; nm: DMRGoperators.cpp.o: plugin needed to handle lto object; nm: DMRGSCFindices.cpp.o: plugin needed to handle lto object; nm: DMRGSCFintegrals.cpp.o: plugin needed to handle lto object; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185260019
https://github.com/psi4/psi4/issues/264#issuecomment-185260019:1069,Modifiability,plugin,plugin,1069,"On Ubuntu, I was able to get Psi4 (with CheMPS2 v1.5) and CheMPS2 (master; separate) to link when I disabled the link-time optimizer option in CheMPS2's CMakeLists.txt. Looks like the option is not fully supported on Ubuntu. ```; diff --git a/CMakeLists.txt b/CMakeLists.txt; index 868a694..9f5d2b2 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -46,10 +46,10 @@ if (HAS_IPO); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -ipo""); endif (HAS_IPO). -check_cxx_compiler_flag (-flto HAS_FLTO); -if (HAS_FLTO); - set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); -endif (HAS_FLTO); +#check_cxx_compiler_flag (-flto HAS_FLTO); +#if (HAS_FLTO); +# set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); +#endif (HAS_FLTO). if (ENABLE_GENERIC); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-libstdc++ -static-libgcc""); ```. I came to this conclusion when I tried to look into libchemps2.a:. ```; % nm libchemps2.a| grep appendNew; nm: CASSCF.cpp.o: plugin needed to handle lto object; nm: CASSCFdebug.cpp.o: plugin needed to handle lto object; nm: CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; nm: ConvergenceScheme.cpp.o: plugin needed to handle lto object; nm: Correlations.cpp.o: plugin needed to handle lto object; nm: Davidson.cpp.o: plugin needed to handle lto object; nm: DIIS.cpp.o: plugin needed to handle lto object; nm: DMRG.cpp.o: plugin needed to handle lto object; nm: DMRGmpsio.cpp.o: plugin needed to handle lto object; nm: DMRGoperators.cpp.o: plugin needed to handle lto object; nm: DMRGSCFindices.cpp.o: plugin needed to handle lto object; nm: DMRGSCFintegrals.cpp.o: plugin needed to handle lto object; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185260019
https://github.com/psi4/psi4/issues/264#issuecomment-185260019:1134,Modifiability,plugin,plugin,1134,"On Ubuntu, I was able to get Psi4 (with CheMPS2 v1.5) and CheMPS2 (master; separate) to link when I disabled the link-time optimizer option in CheMPS2's CMakeLists.txt. Looks like the option is not fully supported on Ubuntu. ```; diff --git a/CMakeLists.txt b/CMakeLists.txt; index 868a694..9f5d2b2 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -46,10 +46,10 @@ if (HAS_IPO); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -ipo""); endif (HAS_IPO). -check_cxx_compiler_flag (-flto HAS_FLTO); -if (HAS_FLTO); - set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); -endif (HAS_FLTO); +#check_cxx_compiler_flag (-flto HAS_FLTO); +#if (HAS_FLTO); +# set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); +#endif (HAS_FLTO). if (ENABLE_GENERIC); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-libstdc++ -static-libgcc""); ```. I came to this conclusion when I tried to look into libchemps2.a:. ```; % nm libchemps2.a| grep appendNew; nm: CASSCF.cpp.o: plugin needed to handle lto object; nm: CASSCFdebug.cpp.o: plugin needed to handle lto object; nm: CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; nm: ConvergenceScheme.cpp.o: plugin needed to handle lto object; nm: Correlations.cpp.o: plugin needed to handle lto object; nm: Davidson.cpp.o: plugin needed to handle lto object; nm: DIIS.cpp.o: plugin needed to handle lto object; nm: DMRG.cpp.o: plugin needed to handle lto object; nm: DMRGmpsio.cpp.o: plugin needed to handle lto object; nm: DMRGoperators.cpp.o: plugin needed to handle lto object; nm: DMRGSCFindices.cpp.o: plugin needed to handle lto object; nm: DMRGSCFintegrals.cpp.o: plugin needed to handle lto object; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185260019
https://github.com/psi4/psi4/issues/264#issuecomment-185260019:1194,Modifiability,plugin,plugin,1194,"On Ubuntu, I was able to get Psi4 (with CheMPS2 v1.5) and CheMPS2 (master; separate) to link when I disabled the link-time optimizer option in CheMPS2's CMakeLists.txt. Looks like the option is not fully supported on Ubuntu. ```; diff --git a/CMakeLists.txt b/CMakeLists.txt; index 868a694..9f5d2b2 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -46,10 +46,10 @@ if (HAS_IPO); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -ipo""); endif (HAS_IPO). -check_cxx_compiler_flag (-flto HAS_FLTO); -if (HAS_FLTO); - set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); -endif (HAS_FLTO); +#check_cxx_compiler_flag (-flto HAS_FLTO); +#if (HAS_FLTO); +# set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); +#endif (HAS_FLTO). if (ENABLE_GENERIC); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-libstdc++ -static-libgcc""); ```. I came to this conclusion when I tried to look into libchemps2.a:. ```; % nm libchemps2.a| grep appendNew; nm: CASSCF.cpp.o: plugin needed to handle lto object; nm: CASSCFdebug.cpp.o: plugin needed to handle lto object; nm: CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; nm: ConvergenceScheme.cpp.o: plugin needed to handle lto object; nm: Correlations.cpp.o: plugin needed to handle lto object; nm: Davidson.cpp.o: plugin needed to handle lto object; nm: DIIS.cpp.o: plugin needed to handle lto object; nm: DMRG.cpp.o: plugin needed to handle lto object; nm: DMRGmpsio.cpp.o: plugin needed to handle lto object; nm: DMRGoperators.cpp.o: plugin needed to handle lto object; nm: DMRGSCFindices.cpp.o: plugin needed to handle lto object; nm: DMRGSCFintegrals.cpp.o: plugin needed to handle lto object; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185260019
https://github.com/psi4/psi4/issues/264#issuecomment-185260019:1250,Modifiability,plugin,plugin,1250,"On Ubuntu, I was able to get Psi4 (with CheMPS2 v1.5) and CheMPS2 (master; separate) to link when I disabled the link-time optimizer option in CheMPS2's CMakeLists.txt. Looks like the option is not fully supported on Ubuntu. ```; diff --git a/CMakeLists.txt b/CMakeLists.txt; index 868a694..9f5d2b2 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -46,10 +46,10 @@ if (HAS_IPO); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -ipo""); endif (HAS_IPO). -check_cxx_compiler_flag (-flto HAS_FLTO); -if (HAS_FLTO); - set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); -endif (HAS_FLTO); +#check_cxx_compiler_flag (-flto HAS_FLTO); +#if (HAS_FLTO); +# set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); +#endif (HAS_FLTO). if (ENABLE_GENERIC); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-libstdc++ -static-libgcc""); ```. I came to this conclusion when I tried to look into libchemps2.a:. ```; % nm libchemps2.a| grep appendNew; nm: CASSCF.cpp.o: plugin needed to handle lto object; nm: CASSCFdebug.cpp.o: plugin needed to handle lto object; nm: CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; nm: ConvergenceScheme.cpp.o: plugin needed to handle lto object; nm: Correlations.cpp.o: plugin needed to handle lto object; nm: Davidson.cpp.o: plugin needed to handle lto object; nm: DIIS.cpp.o: plugin needed to handle lto object; nm: DMRG.cpp.o: plugin needed to handle lto object; nm: DMRGmpsio.cpp.o: plugin needed to handle lto object; nm: DMRGoperators.cpp.o: plugin needed to handle lto object; nm: DMRGSCFindices.cpp.o: plugin needed to handle lto object; nm: DMRGSCFintegrals.cpp.o: plugin needed to handle lto object; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185260019
https://github.com/psi4/psi4/issues/264#issuecomment-185260019:1302,Modifiability,plugin,plugin,1302,"On Ubuntu, I was able to get Psi4 (with CheMPS2 v1.5) and CheMPS2 (master; separate) to link when I disabled the link-time optimizer option in CheMPS2's CMakeLists.txt. Looks like the option is not fully supported on Ubuntu. ```; diff --git a/CMakeLists.txt b/CMakeLists.txt; index 868a694..9f5d2b2 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -46,10 +46,10 @@ if (HAS_IPO); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -ipo""); endif (HAS_IPO). -check_cxx_compiler_flag (-flto HAS_FLTO); -if (HAS_FLTO); - set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); -endif (HAS_FLTO); +#check_cxx_compiler_flag (-flto HAS_FLTO); +#if (HAS_FLTO); +# set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); +#endif (HAS_FLTO). if (ENABLE_GENERIC); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-libstdc++ -static-libgcc""); ```. I came to this conclusion when I tried to look into libchemps2.a:. ```; % nm libchemps2.a| grep appendNew; nm: CASSCF.cpp.o: plugin needed to handle lto object; nm: CASSCFdebug.cpp.o: plugin needed to handle lto object; nm: CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; nm: ConvergenceScheme.cpp.o: plugin needed to handle lto object; nm: Correlations.cpp.o: plugin needed to handle lto object; nm: Davidson.cpp.o: plugin needed to handle lto object; nm: DIIS.cpp.o: plugin needed to handle lto object; nm: DMRG.cpp.o: plugin needed to handle lto object; nm: DMRGmpsio.cpp.o: plugin needed to handle lto object; nm: DMRGoperators.cpp.o: plugin needed to handle lto object; nm: DMRGSCFindices.cpp.o: plugin needed to handle lto object; nm: DMRGSCFintegrals.cpp.o: plugin needed to handle lto object; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185260019
https://github.com/psi4/psi4/issues/264#issuecomment-185260019:1354,Modifiability,plugin,plugin,1354,"On Ubuntu, I was able to get Psi4 (with CheMPS2 v1.5) and CheMPS2 (master; separate) to link when I disabled the link-time optimizer option in CheMPS2's CMakeLists.txt. Looks like the option is not fully supported on Ubuntu. ```; diff --git a/CMakeLists.txt b/CMakeLists.txt; index 868a694..9f5d2b2 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -46,10 +46,10 @@ if (HAS_IPO); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -ipo""); endif (HAS_IPO). -check_cxx_compiler_flag (-flto HAS_FLTO); -if (HAS_FLTO); - set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); -endif (HAS_FLTO); +#check_cxx_compiler_flag (-flto HAS_FLTO); +#if (HAS_FLTO); +# set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); +#endif (HAS_FLTO). if (ENABLE_GENERIC); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-libstdc++ -static-libgcc""); ```. I came to this conclusion when I tried to look into libchemps2.a:. ```; % nm libchemps2.a| grep appendNew; nm: CASSCF.cpp.o: plugin needed to handle lto object; nm: CASSCFdebug.cpp.o: plugin needed to handle lto object; nm: CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; nm: ConvergenceScheme.cpp.o: plugin needed to handle lto object; nm: Correlations.cpp.o: plugin needed to handle lto object; nm: Davidson.cpp.o: plugin needed to handle lto object; nm: DIIS.cpp.o: plugin needed to handle lto object; nm: DMRG.cpp.o: plugin needed to handle lto object; nm: DMRGmpsio.cpp.o: plugin needed to handle lto object; nm: DMRGoperators.cpp.o: plugin needed to handle lto object; nm: DMRGSCFindices.cpp.o: plugin needed to handle lto object; nm: DMRGSCFintegrals.cpp.o: plugin needed to handle lto object; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185260019
https://github.com/psi4/psi4/issues/264#issuecomment-185260019:1411,Modifiability,plugin,plugin,1411,"On Ubuntu, I was able to get Psi4 (with CheMPS2 v1.5) and CheMPS2 (master; separate) to link when I disabled the link-time optimizer option in CheMPS2's CMakeLists.txt. Looks like the option is not fully supported on Ubuntu. ```; diff --git a/CMakeLists.txt b/CMakeLists.txt; index 868a694..9f5d2b2 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -46,10 +46,10 @@ if (HAS_IPO); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -ipo""); endif (HAS_IPO). -check_cxx_compiler_flag (-flto HAS_FLTO); -if (HAS_FLTO); - set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); -endif (HAS_FLTO); +#check_cxx_compiler_flag (-flto HAS_FLTO); +#if (HAS_FLTO); +# set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); +#endif (HAS_FLTO). if (ENABLE_GENERIC); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-libstdc++ -static-libgcc""); ```. I came to this conclusion when I tried to look into libchemps2.a:. ```; % nm libchemps2.a| grep appendNew; nm: CASSCF.cpp.o: plugin needed to handle lto object; nm: CASSCFdebug.cpp.o: plugin needed to handle lto object; nm: CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; nm: ConvergenceScheme.cpp.o: plugin needed to handle lto object; nm: Correlations.cpp.o: plugin needed to handle lto object; nm: Davidson.cpp.o: plugin needed to handle lto object; nm: DIIS.cpp.o: plugin needed to handle lto object; nm: DMRG.cpp.o: plugin needed to handle lto object; nm: DMRGmpsio.cpp.o: plugin needed to handle lto object; nm: DMRGoperators.cpp.o: plugin needed to handle lto object; nm: DMRGSCFindices.cpp.o: plugin needed to handle lto object; nm: DMRGSCFintegrals.cpp.o: plugin needed to handle lto object; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185260019
https://github.com/psi4/psi4/issues/264#issuecomment-185260019:1472,Modifiability,plugin,plugin,1472,"On Ubuntu, I was able to get Psi4 (with CheMPS2 v1.5) and CheMPS2 (master; separate) to link when I disabled the link-time optimizer option in CheMPS2's CMakeLists.txt. Looks like the option is not fully supported on Ubuntu. ```; diff --git a/CMakeLists.txt b/CMakeLists.txt; index 868a694..9f5d2b2 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -46,10 +46,10 @@ if (HAS_IPO); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -ipo""); endif (HAS_IPO). -check_cxx_compiler_flag (-flto HAS_FLTO); -if (HAS_FLTO); - set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); -endif (HAS_FLTO); +#check_cxx_compiler_flag (-flto HAS_FLTO); +#if (HAS_FLTO); +# set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); +#endif (HAS_FLTO). if (ENABLE_GENERIC); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-libstdc++ -static-libgcc""); ```. I came to this conclusion when I tried to look into libchemps2.a:. ```; % nm libchemps2.a| grep appendNew; nm: CASSCF.cpp.o: plugin needed to handle lto object; nm: CASSCFdebug.cpp.o: plugin needed to handle lto object; nm: CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; nm: ConvergenceScheme.cpp.o: plugin needed to handle lto object; nm: Correlations.cpp.o: plugin needed to handle lto object; nm: Davidson.cpp.o: plugin needed to handle lto object; nm: DIIS.cpp.o: plugin needed to handle lto object; nm: DMRG.cpp.o: plugin needed to handle lto object; nm: DMRGmpsio.cpp.o: plugin needed to handle lto object; nm: DMRGoperators.cpp.o: plugin needed to handle lto object; nm: DMRGSCFindices.cpp.o: plugin needed to handle lto object; nm: DMRGSCFintegrals.cpp.o: plugin needed to handle lto object; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185260019
https://github.com/psi4/psi4/issues/264#issuecomment-185260019:1534,Modifiability,plugin,plugin,1534,"On Ubuntu, I was able to get Psi4 (with CheMPS2 v1.5) and CheMPS2 (master; separate) to link when I disabled the link-time optimizer option in CheMPS2's CMakeLists.txt. Looks like the option is not fully supported on Ubuntu. ```; diff --git a/CMakeLists.txt b/CMakeLists.txt; index 868a694..9f5d2b2 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -46,10 +46,10 @@ if (HAS_IPO); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -ipo""); endif (HAS_IPO). -check_cxx_compiler_flag (-flto HAS_FLTO); -if (HAS_FLTO); - set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); -endif (HAS_FLTO); +#check_cxx_compiler_flag (-flto HAS_FLTO); +#if (HAS_FLTO); +# set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); +#endif (HAS_FLTO). if (ENABLE_GENERIC); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-libstdc++ -static-libgcc""); ```. I came to this conclusion when I tried to look into libchemps2.a:. ```; % nm libchemps2.a| grep appendNew; nm: CASSCF.cpp.o: plugin needed to handle lto object; nm: CASSCFdebug.cpp.o: plugin needed to handle lto object; nm: CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; nm: ConvergenceScheme.cpp.o: plugin needed to handle lto object; nm: Correlations.cpp.o: plugin needed to handle lto object; nm: Davidson.cpp.o: plugin needed to handle lto object; nm: DIIS.cpp.o: plugin needed to handle lto object; nm: DMRG.cpp.o: plugin needed to handle lto object; nm: DMRGmpsio.cpp.o: plugin needed to handle lto object; nm: DMRGoperators.cpp.o: plugin needed to handle lto object; nm: DMRGSCFindices.cpp.o: plugin needed to handle lto object; nm: DMRGSCFintegrals.cpp.o: plugin needed to handle lto object; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185260019
https://github.com/psi4/psi4/issues/264#issuecomment-185260019:1598,Modifiability,plugin,plugin,1598,"On Ubuntu, I was able to get Psi4 (with CheMPS2 v1.5) and CheMPS2 (master; separate) to link when I disabled the link-time optimizer option in CheMPS2's CMakeLists.txt. Looks like the option is not fully supported on Ubuntu. ```; diff --git a/CMakeLists.txt b/CMakeLists.txt; index 868a694..9f5d2b2 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -46,10 +46,10 @@ if (HAS_IPO); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -ipo""); endif (HAS_IPO). -check_cxx_compiler_flag (-flto HAS_FLTO); -if (HAS_FLTO); - set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); -endif (HAS_FLTO); +#check_cxx_compiler_flag (-flto HAS_FLTO); +#if (HAS_FLTO); +# set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); +#endif (HAS_FLTO). if (ENABLE_GENERIC); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-libstdc++ -static-libgcc""); ```. I came to this conclusion when I tried to look into libchemps2.a:. ```; % nm libchemps2.a| grep appendNew; nm: CASSCF.cpp.o: plugin needed to handle lto object; nm: CASSCFdebug.cpp.o: plugin needed to handle lto object; nm: CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; nm: ConvergenceScheme.cpp.o: plugin needed to handle lto object; nm: Correlations.cpp.o: plugin needed to handle lto object; nm: Davidson.cpp.o: plugin needed to handle lto object; nm: DIIS.cpp.o: plugin needed to handle lto object; nm: DMRG.cpp.o: plugin needed to handle lto object; nm: DMRGmpsio.cpp.o: plugin needed to handle lto object; nm: DMRGoperators.cpp.o: plugin needed to handle lto object; nm: DMRGSCFindices.cpp.o: plugin needed to handle lto object; nm: DMRGSCFintegrals.cpp.o: plugin needed to handle lto object; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185260019
https://github.com/psi4/psi4/issues/264#issuecomment-185260019:123,Performance,optimiz,optimizer,123,"On Ubuntu, I was able to get Psi4 (with CheMPS2 v1.5) and CheMPS2 (master; separate) to link when I disabled the link-time optimizer option in CheMPS2's CMakeLists.txt. Looks like the option is not fully supported on Ubuntu. ```; diff --git a/CMakeLists.txt b/CMakeLists.txt; index 868a694..9f5d2b2 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -46,10 +46,10 @@ if (HAS_IPO); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -ipo""); endif (HAS_IPO). -check_cxx_compiler_flag (-flto HAS_FLTO); -if (HAS_FLTO); - set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); -endif (HAS_FLTO); +#check_cxx_compiler_flag (-flto HAS_FLTO); +#if (HAS_FLTO); +# set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); +#endif (HAS_FLTO). if (ENABLE_GENERIC); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-libstdc++ -static-libgcc""); ```. I came to this conclusion when I tried to look into libchemps2.a:. ```; % nm libchemps2.a| grep appendNew; nm: CASSCF.cpp.o: plugin needed to handle lto object; nm: CASSCFdebug.cpp.o: plugin needed to handle lto object; nm: CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; nm: ConvergenceScheme.cpp.o: plugin needed to handle lto object; nm: Correlations.cpp.o: plugin needed to handle lto object; nm: Davidson.cpp.o: plugin needed to handle lto object; nm: DIIS.cpp.o: plugin needed to handle lto object; nm: DMRG.cpp.o: plugin needed to handle lto object; nm: DMRGmpsio.cpp.o: plugin needed to handle lto object; nm: DMRGoperators.cpp.o: plugin needed to handle lto object; nm: DMRGSCFindices.cpp.o: plugin needed to handle lto object; nm: DMRGSCFintegrals.cpp.o: plugin needed to handle lto object; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185260019
https://github.com/psi4/psi4/issues/266#issuecomment-185833831:170,Availability,error,error,170,"Thanks a lot, it now works for scf calculation. now i try to do a dmrg-scf as explained here : http://sebwouters.github.io/CheMPS2/interfaces.html ; but end up with . An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File ""<string>"", line 48, in <module>. File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'). LUCA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185833831
https://github.com/psi4/psi4/issues/266#issuecomment-185833831:504,Energy Efficiency,energy,energy,504,"Thanks a lot, it now works for scf calculation. now i try to do a dmrg-scf as explained here : http://sebwouters.github.io/CheMPS2/interfaces.html ; but end up with . An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File ""<string>"", line 48, in <module>. File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'). LUCA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185833831
https://github.com/psi4/psi4/issues/266#issuecomment-185833831:530,Energy Efficiency,energy,energy,530,"Thanks a lot, it now works for scf calculation. now i try to do a dmrg-scf as explained here : http://sebwouters.github.io/CheMPS2/interfaces.html ; but end up with . An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File ""<string>"", line 48, in <module>. File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'). LUCA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185833831
https://github.com/psi4/psi4/issues/266#issuecomment-185833831:131,Integrability,interface,interfaces,131,"Thanks a lot, it now works for scf calculation. now i try to do a dmrg-scf as explained here : http://sebwouters.github.io/CheMPS2/interfaces.html ; but end up with . An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File ""<string>"", line 48, in <module>. File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'). LUCA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185833831
https://github.com/psi4/psi4/issues/266#issuecomment-185833831:279,Modifiability,plugin,plugin,279,"Thanks a lot, it now works for scf calculation. now i try to do a dmrg-scf as explained here : http://sebwouters.github.io/CheMPS2/interfaces.html ; but end up with . An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File ""<string>"", line 48, in <module>. File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'). LUCA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185833831
https://github.com/psi4/psi4/issues/266#issuecomment-185833831:322,Modifiability,plugin,plugin,322,"Thanks a lot, it now works for scf calculation. now i try to do a dmrg-scf as explained here : http://sebwouters.github.io/CheMPS2/interfaces.html ; but end up with . An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File ""<string>"", line 48, in <module>. File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'). LUCA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185833831
https://github.com/psi4/psi4/issues/266#issuecomment-185833831:662,Modifiability,plugin,plugin,662,"Thanks a lot, it now works for scf calculation. now i try to do a dmrg-scf as explained here : http://sebwouters.github.io/CheMPS2/interfaces.html ; but end up with . An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File ""<string>"", line 48, in <module>. File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'). LUCA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185833831
https://github.com/psi4/psi4/issues/266#issuecomment-185841947:60,Deployability,update,update,60,"Looks like the plugin didn't get the infrastructure changes update. If you change the signature and return according to http://forum.psicode.org/t/wavefunction-passing-update/139 , does that fix it? @SebWouters, did your latest changes cover the plugin signature change?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185841947
https://github.com/psi4/psi4/issues/266#issuecomment-185841947:168,Deployability,update,update,168,"Looks like the plugin didn't get the infrastructure changes update. If you change the signature and return according to http://forum.psicode.org/t/wavefunction-passing-update/139 , does that fix it? @SebWouters, did your latest changes cover the plugin signature change?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185841947
https://github.com/psi4/psi4/issues/266#issuecomment-185841947:15,Modifiability,plugin,plugin,15,"Looks like the plugin didn't get the infrastructure changes update. If you change the signature and return according to http://forum.psicode.org/t/wavefunction-passing-update/139 , does that fix it? @SebWouters, did your latest changes cover the plugin signature change?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185841947
https://github.com/psi4/psi4/issues/266#issuecomment-185841947:246,Modifiability,plugin,plugin,246,"Looks like the plugin didn't get the infrastructure changes update. If you change the signature and return according to http://forum.psicode.org/t/wavefunction-passing-update/139 , does that fix it? @SebWouters, did your latest changes cover the plugin signature change?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185841947
https://github.com/psi4/psi4/issues/266#issuecomment-185847048:74,Modifiability,plugin,plugins,74,"no idea where to do this : . A consequence of this is we broke all of the plugins! Don't worry the fix is very simple please change your C++ signature from: ; PsiReturnType skeleton(Options& options); to:; SharedWavefunction skeleton(SharedWavefunction ref_wfn, Options& options)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185847048
https://github.com/psi4/psi4/issues/266#issuecomment-185847048:111,Usability,simpl,simple,111,"no idea where to do this : . A consequence of this is we broke all of the plugins! Don't worry the fix is very simple please change your C++ signature from: ; PsiReturnType skeleton(Options& options); to:; SharedWavefunction skeleton(SharedWavefunction ref_wfn, Options& options)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185847048
https://github.com/psi4/psi4/issues/266#issuecomment-185853311:30,Deployability,release,released,30,"CheMPS2 is the latest version released today, since i need CASPT2.; Sorry, no idea how to verify tags of CheMPS2. I separately compiled psi4.0.5 and latest version of CheMPS2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185853311
https://github.com/psi4/psi4/issues/266#issuecomment-185857811:178,Modifiability,plugin,plugin,178,"Ah, I think @SebWouters said CASPT2 is only in 1.7, and there's a CheMPS2 API change between 1.6 and 1.7. But according to https://github.com/SebWouters/CheMPS2/issues/20, a new plugin from today should be such that the CheMPS2/Psi4 interfacing code is 1.7/HEAD compliant. So I don't see that what you're doing _shouldn't_ work. Would have to try it out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185857811
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:1844,Availability,error,error,1844,"ion with the CASPT2 interface at one point in the future.; - I don't use the current HEAD of psi4/psi4, but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_lo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:48,Deployability,release,released,48,"A couple of remarks:; - chemps2 v1.7 is not yet released and will not be until I do a few applications and write a paper myself. The recommended version to use is still v1.6 in the meantime and CASPT2 is therefore not supported yet. But that doesn't mean it shouldn't work.; - One important thing is that I haven't made CASPT2 parallel yet. You will have to wait forever when the number of virtuals is modest / large.; - A second important remark is that I also currently use only pseudocanonical orbitals for DMRG-CASPT2, so for elongated molecules you will waste your time at the moment, because the virtual dimension is way smaller by using localized orbitals. But for that I need to implement the full 4-RDM instead of the diagonal one, and that is not for the very near future. The cumulant approximation is also ready on the other hand, but will only be used in conjunction with the CASPT2 interface at one point in the future.; - I don't use the current HEAD of psi4/psi4, but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:1036,Deployability,release,releases,1036," is not yet released and will not be until I do a few applications and write a paper myself. The recommended version to use is still v1.6 in the meantime and CASPT2 is therefore not supported yet. But that doesn't mean it shouldn't work.; - One important thing is that I haven't made CASPT2 parallel yet. You will have to wait forever when the number of virtuals is modest / large.; - A second important remark is that I also currently use only pseudocanonical orbitals for DMRG-CASPT2, so for elongated molecules you will waste your time at the moment, because the virtual dimension is way smaller by using localized orbitals. But for that I need to implement the full 4-RDM instead of the diagonal one, and that is not for the very near future. The cumulant approximation is also ready on the other hand, but will only be used in conjunction with the CASPT2 interface at one point in the future.; - I don't use the current HEAD of psi4/psi4, but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:1592,Deployability,update,updated,1592,"your time at the moment, because the virtual dimension is way smaller by using localized orbitals. But for that I need to implement the full 4-RDM instead of the diagonal one, and that is not for the very near future. The cumulant approximation is also ready on the other hand, but will only be used in conjunction with the CASPT2 interface at one point in the future.; - I don't use the current HEAD of psi4/psi4, but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:3353,Deployability,Integrat,Integration,3353,"i4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with the right version of psi4 (psi4-0.5)? It doesn't suffice to run the plugin with the right version of psi4, you also need to do. ```; psi4 --new-plugin dmrg; ```. with the right version of psi4. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2126,Energy Efficiency,energy,energy,2126,"l. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2152,Energy Efficiency,energy,energy,2152,"l. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2656,Energy Efficiency,energy,energy,2656,"aid, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2691,Energy Efficiency,energy,energy,2691,"You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:3399,Energy Efficiency,energy,energy,3399,"i4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with the right version of psi4 (psi4-0.5)? It doesn't suffice to run the plugin with the right version of psi4, you also need to do. ```; psi4 --new-plugin dmrg; ```. with the right version of psi4. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:896,Integrability,interface,interface,896,"A couple of remarks:; - chemps2 v1.7 is not yet released and will not be until I do a few applications and write a paper myself. The recommended version to use is still v1.6 in the meantime and CASPT2 is therefore not supported yet. But that doesn't mean it shouldn't work.; - One important thing is that I haven't made CASPT2 parallel yet. You will have to wait forever when the number of virtuals is modest / large.; - A second important remark is that I also currently use only pseudocanonical orbitals for DMRG-CASPT2, so for elongated molecules you will waste your time at the moment, because the virtual dimension is way smaller by using localized orbitals. But for that I need to implement the full 4-RDM instead of the diagonal one, and that is not for the very near future. The cumulant approximation is also ready on the other hand, but will only be used in conjunction with the CASPT2 interface at one point in the future.; - I don't use the current HEAD of psi4/psi4, but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:1820,Integrability,message,message,1820,"s also ready on the other hand, but will only be used in conjunction with the CASPT2 interface at one point in the future.; - I don't use the current HEAD of psi4/psi4, but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence go",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2434,Integrability,wrap,wrappers,2434,"I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:3353,Integrability,Integrat,Integration,3353,"i4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with the right version of psi4 (psi4-0.5)? It doesn't suffice to run the plugin with the right version of psi4, you also need to do. ```; psi4 --new-plugin dmrg; ```. with the right version of psi4. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:3377,Integrability,rout,routines,3377,"i4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with the right version of psi4 (psi4-0.5)? It doesn't suffice to run the plugin with the right version of psi4, you also need to do. ```; psi4 --new-plugin dmrg; ```. with the right version of psi4. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:1760,Modifiability,plugin,plugin,1760,"and that is not for the very near future. The cumulant approximation is also ready on the other hand, but will only be used in conjunction with the CASPT2 interface at one point in the future.; - I don't use the current HEAD of psi4/psi4, but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwar",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:1917,Modifiability,plugin,plugin,1917,", but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:1960,Modifiability,plugin,plugin,1960,", but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2242,Modifiability,plugin,plugin,2242," gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavef",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2593,Modifiability,plugin,plugin,2593,"ers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; r",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2678,Modifiability,plugin,plugins,2678,"ow what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2783,Modifiability,plugin,plugin,2783,"g is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with the right version of psi4 (psi4-0.5)? It doesn't suffice to run the plugin with the right version of psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:3195,Modifiability,plugin,plugin,3195,"i4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with the right version of psi4 (psi4-0.5)? It doesn't suffice to run the plugin with the right version of psi4, you also need to do. ```; psi4 --new-plugin dmrg; ```. with the right version of psi4. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:3281,Modifiability,plugin,plugins,3281,"i4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with the right version of psi4 (psi4-0.5)? It doesn't suffice to run the plugin with the right version of psi4, you also need to do. ```; psi4 --new-plugin dmrg; ```. with the right version of psi4. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:3306,Modifiability,plugin,plugin,3306,"i4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with the right version of psi4 (psi4-0.5)? It doesn't suffice to run the plugin with the right version of psi4, you also need to do. ```; psi4 --new-plugin dmrg; ```. with the right version of psi4. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:3533,Modifiability,plugin,plugin,3533,"i4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with the right version of psi4 (psi4-0.5)? It doesn't suffice to run the plugin with the right version of psi4, you also need to do. ```; psi4 --new-plugin dmrg; ```. with the right version of psi4. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:3602,Modifiability,plugin,plugin,3602,"i4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with the right version of psi4 (psi4-0.5)? It doesn't suffice to run the plugin with the right version of psi4, you also need to do. ```; psi4 --new-plugin dmrg; ```. with the right version of psi4. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:3765,Modifiability,plugin,plugin,3765,"i4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with the right version of psi4 (psi4-0.5)? It doesn't suffice to run the plugin with the right version of psi4, you also need to do. ```; psi4 --new-plugin dmrg; ```. with the right version of psi4. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:3841,Modifiability,plugin,plugin,3841,"i4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with the right version of psi4 (psi4-0.5)? It doesn't suffice to run the plugin with the right version of psi4, you also need to do. ```; psi4 --new-plugin dmrg; ```. with the right version of psi4. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:1700,Usability,clear,clearly,1700,"and that is not for the very near future. The cumulant approximation is also ready on the other hand, but will only be used in conjunction with the CASPT2 interface at one point in the future.; - I don't use the current HEAD of psi4/psi4, but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwar",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/issues/266#issuecomment-186113504:1774,Usability,clear,clearly,1774,"and that is not for the very near future. The cumulant approximation is also ready on the other hand, but will only be used in conjunction with the CASPT2 interface at one point in the future.; - I don't use the current HEAD of psi4/psi4, but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwar",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504
https://github.com/psi4/psi4/pull/268#issuecomment-186917821:14,Testability,test,tested,14,Has this been tested with `make psi4so` yet? I'm not sure it would compile. There were a few changes in my commit that were needed to remove some ambiguity of some types. Or is this just laying the groundwork a bit?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/268#issuecomment-186917821
https://github.com/psi4/psi4/pull/268#issuecomment-186931933:101,Integrability,depend,dependency,101,"Hmm I definitely did, but don't anymore. Likely some of the cleaning that's been done lately removed dependency on a library that also defined a `str` class.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/268#issuecomment-186931933
https://github.com/psi4/psi4/pull/268#issuecomment-187021220:481,Deployability,install,install,481,"Ok, sounds safe to leave the `boost::python` out for the time being and go ahead and merge this PR to get the python so `psi4.so` working again. @bennybp, you'll have noticed that I didn't do the initialize and finalize changes possibly necessary for your linux so `libpsi4.so` since I couldn't test the built product. Whenever you like, add a `libpsi4so` target to build your version. Even if the python so and the linux so are identical, I think they'll have different names and install locations (site-packages and lib, respectively), so they'll need different targets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/268#issuecomment-187021220
https://github.com/psi4/psi4/pull/268#issuecomment-187021220:11,Safety,safe,safe,11,"Ok, sounds safe to leave the `boost::python` out for the time being and go ahead and merge this PR to get the python so `psi4.so` working again. @bennybp, you'll have noticed that I didn't do the initialize and finalize changes possibly necessary for your linux so `libpsi4.so` since I couldn't test the built product. Whenever you like, add a `libpsi4so` target to build your version. Even if the python so and the linux so are identical, I think they'll have different names and install locations (site-packages and lib, respectively), so they'll need different targets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/268#issuecomment-187021220
https://github.com/psi4/psi4/pull/268#issuecomment-187021220:295,Testability,test,test,295,"Ok, sounds safe to leave the `boost::python` out for the time being and go ahead and merge this PR to get the python so `psi4.so` working again. @bennybp, you'll have noticed that I didn't do the initialize and finalize changes possibly necessary for your linux so `libpsi4.so` since I couldn't test the built product. Whenever you like, add a `libpsi4so` target to build your version. Even if the python so and the linux so are identical, I think they'll have different names and install locations (site-packages and lib, respectively), so they'll need different targets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/268#issuecomment-187021220
https://github.com/psi4/psi4/pull/270#issuecomment-186778555:18,Modifiability,variab,variables,18,Fix uninitialized variables in dfocc affecting UHF calcs are okay. Thank you very much Lori!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/270#issuecomment-186778555
https://github.com/psi4/psi4/issues/271#issuecomment-187426230:51,Modifiability,Config,ConfigVersion,51,Seems to be used to define `PSI_VERSION` in `cmake/ConfigVersion.cmake` @loriab is `PSI_VERSION` redefined somewhere else afterwards or is that an unused variable?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/271#issuecomment-187426230
https://github.com/psi4/psi4/issues/271#issuecomment-187426230:154,Modifiability,variab,variable,154,Seems to be used to define `PSI_VERSION` in `cmake/ConfigVersion.cmake` @loriab is `PSI_VERSION` redefined somewhere else afterwards or is that an unused variable?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/271#issuecomment-187426230
https://github.com/psi4/psi4/issues/271#issuecomment-187431099:252,Modifiability,config,config,252,"At _every_ recompile, `$objdir/src/bin/psi4/gitversion.h` is generated with contents below that get used in defining the output file header. ```; #define GIT_VERSION ""{master} b04cdf9 ""; #define PSI_VERSION ""0.4.90""; ```. Then either `$objdir/bin/psi4-config --version` or `$objdir/bin/psi4 --version` will yield the version. So I don't use the `VERSION` file at all for versioning. But I haven't gotten rid of it either b/c of dashboard suspicions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/271#issuecomment-187431099
https://github.com/psi4/psi4/issues/271#issuecomment-187436091:42,Safety,safe,safely,42,"Well, it's not used there either. You can safely remove that file :wink:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/271#issuecomment-187436091
https://github.com/psi4/psi4/issues/271#issuecomment-187447352:28,Usability,feedback,feedback,28,"Great, thanks for the rapid feedback, Roberto. I'll nuke the file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/271#issuecomment-187447352
https://github.com/psi4/psi4/pull/272#issuecomment-187457866:30,Modifiability,Config,ConfigVersion,30,"OK, I nuked all references to ConfigVersion because, as I understand, gitversion.py replaces it. The code is building now, but we should make sure it all links properly before merging. Also, I'd like @loriab to confirm that I haven't done something stupid, before we accept the PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/272#issuecomment-187457866
https://github.com/psi4/psi4/pull/272#issuecomment-187462125:30,Safety,predict,predict,30,It looks good so far as I can predict.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/272#issuecomment-187462125
https://github.com/psi4/psi4/pull/272#issuecomment-187471134:166,Safety,predict,predict,166,"We don't pull VERSION into the manual somewhere do we?. On Monday, February 22, 2016, Lori A. Burns notifications@github.com; wrote:. > It looks good so far as I can predict.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/272#issuecomment-187462125.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/272#issuecomment-187471134
https://github.com/psi4/psi4/pull/272#issuecomment-187516909:59,Security,validat,validate,59,"This is pretty simple, so merging. Docs-build tonight will validate harmlessness of removal.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/272#issuecomment-187516909
https://github.com/psi4/psi4/pull/272#issuecomment-187516909:15,Usability,simpl,simple,15,"This is pretty simple, so merging. Docs-build tonight will validate harmlessness of removal.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/272#issuecomment-187516909
https://github.com/psi4/psi4/pull/272#issuecomment-187809940:36,Deployability,install,install,36,"Nope, they're fine! I did break the install by adding an install rule to the optional psi4so target, but that's unrelated, and I've got a fix in the works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/272#issuecomment-187809940
https://github.com/psi4/psi4/pull/272#issuecomment-187809940:57,Deployability,install,install,57,"Nope, they're fine! I did break the install by adding an install rule to the optional psi4so target, but that's unrelated, and I've got a fix in the works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/272#issuecomment-187809940
https://github.com/psi4/psi4/issues/274#issuecomment-187694715:1114,Availability,error,error,1114,"Hmm thats actually kind of interesting. So I think the misunderstanding here is when you make `Matrix( num_irreps, nao, nmopi )`, as we do not support different symmetries along different axises nao is replicated along the axis so you have a `([nao, nao, …]` by `[nmopi[0], nmopi[1], …])` matrix. So when you do the AOTOMO, MO_RDM, AOTOMO.T transformation what you should _should_ end up with is a (nirrep, nao, nao) matrix where the ao contribution of each irrep is in a subsequent `(nao, nao)` block. However, since AO_RDM only has one dimension that `gemm` will only collect the first dimension (irrep). What you need to do is change:; `AO_RDM = SharedMatrix( new Matrix( nao, nao ) );`. to; `AO_RDM = SharedMatrix( new Matrix( num_irreps, nao, nao ) );`. and then sum through the irreps of AO_RDM. I don’t think we currently have a built-in routine to collapse irreps like this. Im hard pressed to call this last part a bug since this follows through on the matrix algebra and automatically summing is probably not wise. The first part where calling `gemm` on different irrep matrices should probably throw an error because this only works where the LHS has less irreps than the RHS; however, if the RHS has more irreps it will seg fault. As I said before, this is an interesting error as its a strange mix of opaque code and a small bug. Hopefully this is both the truth and makes sense, coffee should kick in soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/274#issuecomment-187694715
https://github.com/psi4/psi4/issues/274#issuecomment-187694715:1236,Availability,fault,fault,1236,"Hmm thats actually kind of interesting. So I think the misunderstanding here is when you make `Matrix( num_irreps, nao, nmopi )`, as we do not support different symmetries along different axises nao is replicated along the axis so you have a `([nao, nao, …]` by `[nmopi[0], nmopi[1], …])` matrix. So when you do the AOTOMO, MO_RDM, AOTOMO.T transformation what you should _should_ end up with is a (nirrep, nao, nao) matrix where the ao contribution of each irrep is in a subsequent `(nao, nao)` block. However, since AO_RDM only has one dimension that `gemm` will only collect the first dimension (irrep). What you need to do is change:; `AO_RDM = SharedMatrix( new Matrix( nao, nao ) );`. to; `AO_RDM = SharedMatrix( new Matrix( num_irreps, nao, nao ) );`. and then sum through the irreps of AO_RDM. I don’t think we currently have a built-in routine to collapse irreps like this. Im hard pressed to call this last part a bug since this follows through on the matrix algebra and automatically summing is probably not wise. The first part where calling `gemm` on different irrep matrices should probably throw an error because this only works where the LHS has less irreps than the RHS; however, if the RHS has more irreps it will seg fault. As I said before, this is an interesting error as its a strange mix of opaque code and a small bug. Hopefully this is both the truth and makes sense, coffee should kick in soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/274#issuecomment-187694715
https://github.com/psi4/psi4/issues/274#issuecomment-187694715:1284,Availability,error,error,1284,"Hmm thats actually kind of interesting. So I think the misunderstanding here is when you make `Matrix( num_irreps, nao, nmopi )`, as we do not support different symmetries along different axises nao is replicated along the axis so you have a `([nao, nao, …]` by `[nmopi[0], nmopi[1], …])` matrix. So when you do the AOTOMO, MO_RDM, AOTOMO.T transformation what you should _should_ end up with is a (nirrep, nao, nao) matrix where the ao contribution of each irrep is in a subsequent `(nao, nao)` block. However, since AO_RDM only has one dimension that `gemm` will only collect the first dimension (irrep). What you need to do is change:; `AO_RDM = SharedMatrix( new Matrix( nao, nao ) );`. to; `AO_RDM = SharedMatrix( new Matrix( num_irreps, nao, nao ) );`. and then sum through the irreps of AO_RDM. I don’t think we currently have a built-in routine to collapse irreps like this. Im hard pressed to call this last part a bug since this follows through on the matrix algebra and automatically summing is probably not wise. The first part where calling `gemm` on different irrep matrices should probably throw an error because this only works where the LHS has less irreps than the RHS; however, if the RHS has more irreps it will seg fault. As I said before, this is an interesting error as its a strange mix of opaque code and a small bug. Hopefully this is both the truth and makes sense, coffee should kick in soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/274#issuecomment-187694715
https://github.com/psi4/psi4/issues/274#issuecomment-187694715:845,Integrability,rout,routine,845,"Hmm thats actually kind of interesting. So I think the misunderstanding here is when you make `Matrix( num_irreps, nao, nmopi )`, as we do not support different symmetries along different axises nao is replicated along the axis so you have a `([nao, nao, …]` by `[nmopi[0], nmopi[1], …])` matrix. So when you do the AOTOMO, MO_RDM, AOTOMO.T transformation what you should _should_ end up with is a (nirrep, nao, nao) matrix where the ao contribution of each irrep is in a subsequent `(nao, nao)` block. However, since AO_RDM only has one dimension that `gemm` will only collect the first dimension (irrep). What you need to do is change:; `AO_RDM = SharedMatrix( new Matrix( nao, nao ) );`. to; `AO_RDM = SharedMatrix( new Matrix( num_irreps, nao, nao ) );`. and then sum through the irreps of AO_RDM. I don’t think we currently have a built-in routine to collapse irreps like this. Im hard pressed to call this last part a bug since this follows through on the matrix algebra and automatically summing is probably not wise. The first part where calling `gemm` on different irrep matrices should probably throw an error because this only works where the LHS has less irreps than the RHS; however, if the RHS has more irreps it will seg fault. As I said before, this is an interesting error as its a strange mix of opaque code and a small bug. Hopefully this is both the truth and makes sense, coffee should kick in soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/274#issuecomment-187694715
https://github.com/psi4/psi4/issues/274#issuecomment-187696803:52,Availability,error,error,52,"Yes, this is a bug. The wrong one should produce an error. Take a look at the `remove_symmetry` routine of `Matrix`. Something like the following might work:. ```; MintsHelper helper(wfn->basisset(), wfn->options(), 0);; SharedMatrix sotoao = helper.petite_list()->sotoao();. SharedMatrix work; work = SharedMatrix( new Matrix( ""work"", num_irreps, nsopi, nmopi ) );; SharedMatrix AO_RDM; AO_RDM = SharedMatrix( new Matrix( nao, nao ) );; AO_RDM->remove_symmetry (work, sotoao);; ```. There are various examples of using `remove_symmetry` in `libmints/writer.cc` and `libscf_solver/hf.cc`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/274#issuecomment-187696803
https://github.com/psi4/psi4/issues/274#issuecomment-187696803:96,Integrability,rout,routine,96,"Yes, this is a bug. The wrong one should produce an error. Take a look at the `remove_symmetry` routine of `Matrix`. Something like the following might work:. ```; MintsHelper helper(wfn->basisset(), wfn->options(), 0);; SharedMatrix sotoao = helper.petite_list()->sotoao();. SharedMatrix work; work = SharedMatrix( new Matrix( ""work"", num_irreps, nsopi, nmopi ) );; SharedMatrix AO_RDM; AO_RDM = SharedMatrix( new Matrix( nao, nao ) );; AO_RDM->remove_symmetry (work, sotoao);; ```. There are various examples of using `remove_symmetry` in `libmints/writer.cc` and `libscf_solver/hf.cc`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/274#issuecomment-187696803
https://github.com/psi4/psi4/issues/279#issuecomment-188499509:550,Integrability,depend,depending,550,"The attempt at a coherent decision put basic methods `SCF_TYPE` and `MP2_TYPE` at `DF` among conv/df/cd-ness. And higher-order methods `MP_TYPE`, `CC_TYPE`, `CEPA_TYPE` at `CONV`. OMP2 is controlled by `MP2_TYPE`, so it should still be defaulting to density-fitted. Let me know if it's not. For the higher-order OMP3/OMP2.5/OCEPA(0), CONV and DF have the same reference and gradient capabilities. For higher-order non-oo, CONV tends to be more supported. If we set `MP_TYPE` or `CEPA_TYPE` at `DF`, then, at best, users will get different CONV or DF depending on mp2 vs. mp4 or cepa(0) vs cepa(3). Other route is to split off more `*_TYPE` options for the oo methods, whereupon they really start to proliferate. I rather prefer to keep the defaults as they are at present (omp2 df, others conv). But will go with consensus. This message is just the background info of implications.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/279#issuecomment-188499509
https://github.com/psi4/psi4/issues/279#issuecomment-188499509:604,Integrability,rout,route,604,"The attempt at a coherent decision put basic methods `SCF_TYPE` and `MP2_TYPE` at `DF` among conv/df/cd-ness. And higher-order methods `MP_TYPE`, `CC_TYPE`, `CEPA_TYPE` at `CONV`. OMP2 is controlled by `MP2_TYPE`, so it should still be defaulting to density-fitted. Let me know if it's not. For the higher-order OMP3/OMP2.5/OCEPA(0), CONV and DF have the same reference and gradient capabilities. For higher-order non-oo, CONV tends to be more supported. If we set `MP_TYPE` or `CEPA_TYPE` at `DF`, then, at best, users will get different CONV or DF depending on mp2 vs. mp4 or cepa(0) vs cepa(3). Other route is to split off more `*_TYPE` options for the oo methods, whereupon they really start to proliferate. I rather prefer to keep the defaults as they are at present (omp2 df, others conv). But will go with consensus. This message is just the background info of implications.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/279#issuecomment-188499509
https://github.com/psi4/psi4/issues/279#issuecomment-188499509:829,Integrability,message,message,829,"The attempt at a coherent decision put basic methods `SCF_TYPE` and `MP2_TYPE` at `DF` among conv/df/cd-ness. And higher-order methods `MP_TYPE`, `CC_TYPE`, `CEPA_TYPE` at `CONV`. OMP2 is controlled by `MP2_TYPE`, so it should still be defaulting to density-fitted. Let me know if it's not. For the higher-order OMP3/OMP2.5/OCEPA(0), CONV and DF have the same reference and gradient capabilities. For higher-order non-oo, CONV tends to be more supported. If we set `MP_TYPE` or `CEPA_TYPE` at `DF`, then, at best, users will get different CONV or DF depending on mp2 vs. mp4 or cepa(0) vs cepa(3). Other route is to split off more `*_TYPE` options for the oo methods, whereupon they really start to proliferate. I rather prefer to keep the defaults as they are at present (omp2 df, others conv). But will go with consensus. This message is just the background info of implications.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/279#issuecomment-188499509
https://github.com/psi4/psi4/issues/279#issuecomment-212039726:249,Energy Efficiency,energy,energy,249,"We're going to go with no change here, and people will have to do the below to get df-omp3. Can revisit as density-fitting for >mp2 becomes more generally accepted and as other modules include more df algorithms alongside conv. ```; set mp_type df; energy('omp3'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/279#issuecomment-212039726
https://github.com/psi4/psi4/issues/281#issuecomment-189096514:515,Modifiability,plugin,plugin,515,"@loriab: yes, I forgot that's how we solved psi4/psi4private#115. Let me point out that I observe the same behavior if turn df_scf_guess on or off. So my main concern was efficiency, because we seem to recompute the PK integrals twice for both df_scf_guess=off or on. I think that for consistency we should perhaps warn the user if he/she selects df_scf_guess=off and of course not recompute PK integrals again. I am not particularly concerned with being able to do DF followed by PK, I just had a test fail in our plugin and I traced it back to the fact that orbitals from DF/PK gave slightly different energies (<1e-10). Perhaps we could re-enable df_scf_guess=on, but with the new info passing that's not too difficult to reproduce with two scf calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/281#issuecomment-189096514
https://github.com/psi4/psi4/issues/281#issuecomment-189096514:498,Testability,test,test,498,"@loriab: yes, I forgot that's how we solved psi4/psi4private#115. Let me point out that I observe the same behavior if turn df_scf_guess on or off. So my main concern was efficiency, because we seem to recompute the PK integrals twice for both df_scf_guess=off or on. I think that for consistency we should perhaps warn the user if he/she selects df_scf_guess=off and of course not recompute PK integrals again. I am not particularly concerned with being able to do DF followed by PK, I just had a test fail in our plugin and I traced it back to the fact that orbitals from DF/PK gave slightly different energies (<1e-10). Perhaps we could re-enable df_scf_guess=on, but with the new info passing that's not too difficult to reproduce with two scf calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/281#issuecomment-189096514
https://github.com/psi4/psi4/issues/281#issuecomment-189351737:82,Integrability,message,message,82,"@fevangelista : I think you may not have received a notification from my previous message. I don't think the code is recomputing the PK integrals. @loriab, @fevangelista : I think that the same behaviour is observed with `df_scf_guess on` or `off` because the driver automatically sets it to `on` ? Is that possible ? In the hf.cc code, everything is supposed to be fine if `df_scf_guess` is `off`. If nobody is working on that yet I will get on it after lunch and submit a pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/281#issuecomment-189351737
https://github.com/psi4/psi4/issues/281#issuecomment-189416253:514,Energy Efficiency,reduce,reduce,514,"Sorry for messing the fix up, and thanks for diagnosing it, @jgonthier . No, it doesn't look like the driver is touching `df_scf_guess`. read_options defaults it to `on`, but otherwise only `hf.cc` handles that option. Ah, yes, I see what you mean at L1969. If the path to resolve this is clear to you, then yes, please, go ahead and do so, @jgonthier . I'm sort of with @fevangelista that I don't see that we need to facilitate `df_scf_guess` for non-`direct` since it doesn't change the convergence behaviour or reduce quantities to compute. Maybe also change. ``` c++; /*- Use DF integrals tech to converge the SCF before switching to a conventional tech -*/; options.add_bool(""DF_SCF_GUESS"", true);; ```. to. ``` c++; /*- Use DF integrals tech to converge the SCF before switching to a conventional tech; in a |scf__scf_type| ``DIRECT`` calculation -*/; options.add_bool(""DF_SCF_GUESS"", true);; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/281#issuecomment-189416253
https://github.com/psi4/psi4/issues/281#issuecomment-189416253:289,Usability,clear,clear,289,"Sorry for messing the fix up, and thanks for diagnosing it, @jgonthier . No, it doesn't look like the driver is touching `df_scf_guess`. read_options defaults it to `on`, but otherwise only `hf.cc` handles that option. Ah, yes, I see what you mean at L1969. If the path to resolve this is clear to you, then yes, please, go ahead and do so, @jgonthier . I'm sort of with @fevangelista that I don't see that we need to facilitate `df_scf_guess` for non-`direct` since it doesn't change the convergence behaviour or reduce quantities to compute. Maybe also change. ``` c++; /*- Use DF integrals tech to converge the SCF before switching to a conventional tech -*/; options.add_bool(""DF_SCF_GUESS"", true);; ```. to. ``` c++; /*- Use DF integrals tech to converge the SCF before switching to a conventional tech; in a |scf__scf_type| ``DIRECT`` calculation -*/; options.add_bool(""DF_SCF_GUESS"", true);; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/281#issuecomment-189416253
https://github.com/psi4/psi4/issues/281#issuecomment-189511708:53,Integrability,message,message,53,"fyi, you can put `fixes psi4/psi4#281` in the commit message of one of the commits in the PR, then the issue will close when the PR gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/281#issuecomment-189511708
https://github.com/psi4/psi4/issues/281#issuecomment-189552370:164,Security,access,access,164,"Ooooooooooooh I didn't know that. It's awesome. I kind of want something to break again now :D. Also, I can't close the issue, actually, because I don't have write access to this repository, I guess.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/281#issuecomment-189552370
https://github.com/psi4/psi4/issues/282#issuecomment-189282404:872,Availability,error,error,872,"Lori and I had a discussion about this a while back. I _think_ my; conclusion was to remove ROHF MP4 as a listed capability. _Technically_; DETCI can run it, but it will fail for any but the very tiniest of systems,; and in my opinion this will cause more user grief than it would to say we; can't do it. I think the correct solution is to get rid of MP4 in the; Psi4Education module... which one was it?. David. On Fri, Feb 26, 2016 at 8:41 AM, Justin Turney notifications@github.com; wrote:. > One of our students has been working through the Psi4Education site and; > one of the labs requires the user to run MP4 on boron.; > ; > If I'm reading the managed method matrix; > http://psicode.org/psi4manual/master/proc_py.html#table-managedmethods; > correctly then the user should specify an ROHF reference and Psi4 will use; > DETCI. However on we receive the following error:; > ; > Input file: h2o_mp4.txt; > https://github.com/psi4/psi4/files/148253/h2o_mp4.txt; > ; > An error has occurred Py-side; > Traceback:; > <class 'p4xcpt.ManagedMethodError'>: select_mp4: Method 'mp4' with MP_TYPE 'CONV' and REFERENCE 'ROHF' not available: File ""<string>"", line 27, in <module>; > ; > File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/driver.py"", line 586, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > ; > File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/proc.py"", line 831, in select_mp4; > raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]); > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/282.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189282404
https://github.com/psi4/psi4/issues/282#issuecomment-189282404:977,Availability,error,error,977,"Lori and I had a discussion about this a while back. I _think_ my; conclusion was to remove ROHF MP4 as a listed capability. _Technically_; DETCI can run it, but it will fail for any but the very tiniest of systems,; and in my opinion this will cause more user grief than it would to say we; can't do it. I think the correct solution is to get rid of MP4 in the; Psi4Education module... which one was it?. David. On Fri, Feb 26, 2016 at 8:41 AM, Justin Turney notifications@github.com; wrote:. > One of our students has been working through the Psi4Education site and; > one of the labs requires the user to run MP4 on boron.; > ; > If I'm reading the managed method matrix; > http://psicode.org/psi4manual/master/proc_py.html#table-managedmethods; > correctly then the user should specify an ROHF reference and Psi4 will use; > DETCI. However on we receive the following error:; > ; > Input file: h2o_mp4.txt; > https://github.com/psi4/psi4/files/148253/h2o_mp4.txt; > ; > An error has occurred Py-side; > Traceback:; > <class 'p4xcpt.ManagedMethodError'>: select_mp4: Method 'mp4' with MP_TYPE 'CONV' and REFERENCE 'ROHF' not available: File ""<string>"", line 27, in <module>; > ; > File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/driver.py"", line 586, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > ; > File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/proc.py"", line 831, in select_mp4; > raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]); > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/282.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189282404
https://github.com/psi4/psi4/issues/282#issuecomment-189282404:1128,Availability,avail,available,1128,"Lori and I had a discussion about this a while back. I _think_ my; conclusion was to remove ROHF MP4 as a listed capability. _Technically_; DETCI can run it, but it will fail for any but the very tiniest of systems,; and in my opinion this will cause more user grief than it would to say we; can't do it. I think the correct solution is to get rid of MP4 in the; Psi4Education module... which one was it?. David. On Fri, Feb 26, 2016 at 8:41 AM, Justin Turney notifications@github.com; wrote:. > One of our students has been working through the Psi4Education site and; > one of the labs requires the user to run MP4 on boron.; > ; > If I'm reading the managed method matrix; > http://psicode.org/psi4manual/master/proc_py.html#table-managedmethods; > correctly then the user should specify an ROHF reference and Psi4 will use; > DETCI. However on we receive the following error:; > ; > Input file: h2o_mp4.txt; > https://github.com/psi4/psi4/files/148253/h2o_mp4.txt; > ; > An error has occurred Py-side; > Traceback:; > <class 'p4xcpt.ManagedMethodError'>: select_mp4: Method 'mp4' with MP_TYPE 'CONV' and REFERENCE 'ROHF' not available: File ""<string>"", line 27, in <module>; > ; > File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/driver.py"", line 586, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > ; > File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/proc.py"", line 831, in select_mp4; > raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]); > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/282.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189282404
https://github.com/psi4/psi4/issues/282#issuecomment-189282404:1270,Energy Efficiency,energy,energy,1270,"Lori and I had a discussion about this a while back. I _think_ my; conclusion was to remove ROHF MP4 as a listed capability. _Technically_; DETCI can run it, but it will fail for any but the very tiniest of systems,; and in my opinion this will cause more user grief than it would to say we; can't do it. I think the correct solution is to get rid of MP4 in the; Psi4Education module... which one was it?. David. On Fri, Feb 26, 2016 at 8:41 AM, Justin Turney notifications@github.com; wrote:. > One of our students has been working through the Psi4Education site and; > one of the labs requires the user to run MP4 on boron.; > ; > If I'm reading the managed method matrix; > http://psicode.org/psi4manual/master/proc_py.html#table-managedmethods; > correctly then the user should specify an ROHF reference and Psi4 will use; > DETCI. However on we receive the following error:; > ; > Input file: h2o_mp4.txt; > https://github.com/psi4/psi4/files/148253/h2o_mp4.txt; > ; > An error has occurred Py-side; > Traceback:; > <class 'p4xcpt.ManagedMethodError'>: select_mp4: Method 'mp4' with MP_TYPE 'CONV' and REFERENCE 'ROHF' not available: File ""<string>"", line 27, in <module>; > ; > File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/driver.py"", line 586, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > ; > File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/proc.py"", line 831, in select_mp4; > raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]); > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/282.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189282404
https://github.com/psi4/psi4/issues/282#issuecomment-189282404:1298,Energy Efficiency,energy,energy,1298,"Lori and I had a discussion about this a while back. I _think_ my; conclusion was to remove ROHF MP4 as a listed capability. _Technically_; DETCI can run it, but it will fail for any but the very tiniest of systems,; and in my opinion this will cause more user grief than it would to say we; can't do it. I think the correct solution is to get rid of MP4 in the; Psi4Education module... which one was it?. David. On Fri, Feb 26, 2016 at 8:41 AM, Justin Turney notifications@github.com; wrote:. > One of our students has been working through the Psi4Education site and; > one of the labs requires the user to run MP4 on boron.; > ; > If I'm reading the managed method matrix; > http://psicode.org/psi4manual/master/proc_py.html#table-managedmethods; > correctly then the user should specify an ROHF reference and Psi4 will use; > DETCI. However on we receive the following error:; > ; > Input file: h2o_mp4.txt; > https://github.com/psi4/psi4/files/148253/h2o_mp4.txt; > ; > An error has occurred Py-side; > Traceback:; > <class 'p4xcpt.ManagedMethodError'>: select_mp4: Method 'mp4' with MP_TYPE 'CONV' and REFERENCE 'ROHF' not available: File ""<string>"", line 27, in <module>; > ; > File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/driver.py"", line 586, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > ; > File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/proc.py"", line 831, in select_mp4; > raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]); > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/282.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189282404
https://github.com/psi4/psi4/issues/282#issuecomment-189441001:334,Availability,avail,available,334,"If the above works, and you think it'd be helpful, I can edit https://github.com/psi4/psi4/blob/master/share/python/proc.py#L825 to something like. ``` python; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; psi4.print_out(""""""This method is available inefficiently as a byproduct of a CISDT computation. Add ""set qc_module detci"" to input to access this route.""""""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189441001
https://github.com/psi4/psi4/issues/282#issuecomment-189441001:447,Integrability,rout,route,447,"If the above works, and you think it'd be helpful, I can edit https://github.com/psi4/psi4/blob/master/share/python/proc.py#L825 to something like. ``` python; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; psi4.print_out(""""""This method is available inefficiently as a byproduct of a CISDT computation. Add ""set qc_module detci"" to input to access this route.""""""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189441001
https://github.com/psi4/psi4/issues/282#issuecomment-189441001:435,Security,access,access,435,"If the above works, and you think it'd be helpful, I can edit https://github.com/psi4/psi4/blob/master/share/python/proc.py#L825 to something like. ``` python; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module == 'DETCI': # no default for this case; func = run_detci; elif module in ['']:; psi4.print_out(""""""This method is available inefficiently as a byproduct of a CISDT computation. Add ""set qc_module detci"" to input to access this route.""""""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189441001
https://github.com/psi4/psi4/issues/282#issuecomment-189441755:471,Availability,avail,available,471,"Sure, I'm ok with that modification. On Fri, Feb 26, 2016 at 2:24 PM, Lori A. Burns notifications@github.com; wrote:. > If the above works, and you think it'd be helpful, I can edit; > https://github.com/psi4/psi4/blob/master/share/python/proc.py#L825 to; > something like; > ; > ```; > elif reference == 'ROHF':; > if mtd_type == 'CONV':; > if module == 'DETCI': # no default for this case; > func = run_detci; > elif module in ['']:; > psi4.print_out(""""""This method is available inefficiently as a byproduct of a CISDT computation. Add ""set qc_module detci"" to input to access this route.""""""); > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/282#issuecomment-189441001.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189441755
https://github.com/psi4/psi4/issues/282#issuecomment-189441755:584,Integrability,rout,route,584,"Sure, I'm ok with that modification. On Fri, Feb 26, 2016 at 2:24 PM, Lori A. Burns notifications@github.com; wrote:. > If the above works, and you think it'd be helpful, I can edit; > https://github.com/psi4/psi4/blob/master/share/python/proc.py#L825 to; > something like; > ; > ```; > elif reference == 'ROHF':; > if mtd_type == 'CONV':; > if module == 'DETCI': # no default for this case; > func = run_detci; > elif module in ['']:; > psi4.print_out(""""""This method is available inefficiently as a byproduct of a CISDT computation. Add ""set qc_module detci"" to input to access this route.""""""); > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/282#issuecomment-189441001.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189441755
https://github.com/psi4/psi4/issues/282#issuecomment-189441755:572,Security,access,access,572,"Sure, I'm ok with that modification. On Fri, Feb 26, 2016 at 2:24 PM, Lori A. Burns notifications@github.com; wrote:. > If the above works, and you think it'd be helpful, I can edit; > https://github.com/psi4/psi4/blob/master/share/python/proc.py#L825 to; > something like; > ; > ```; > elif reference == 'ROHF':; > if mtd_type == 'CONV':; > if module == 'DETCI': # no default for this case; > func = run_detci; > elif module in ['']:; > psi4.print_out(""""""This method is available inefficiently as a byproduct of a CISDT computation. Add ""set qc_module detci"" to input to access this route.""""""); > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/282#issuecomment-189441001.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/282#issuecomment-189441755
https://github.com/psi4/psi4/issues/285#issuecomment-190756986:61,Testability,test,test,61,"Excellent, I'll mark that one off. And I think I know how to test for the last one. Thanks, @jgonthier .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/285#issuecomment-190756986
https://github.com/psi4/psi4/pull/286#issuecomment-189699831:229,Energy Efficiency,energy,energy,229,"I've never really liked having `def property(` out on it's own. That is, I think it needs to be for driver routing purposes for the same reason `def run_dfmp2` and `def run_dfmp2_gradient` are different. For user-facing, I find `energy('mp2')` and `property('mp2')` too alike. I'd rather `properties=[]` was just a kwarg passed on to any of e(), g(), o(), f(), h() (with the understanding that an extra calc would be taken at the end of o()). But that's a large can of worms, so I'll just mention it as why I like properties as a kwarg. So I like the kwarg for that reason. I don't mind the look of `*args` in oeprop, as certainly that the most important info being conveyed to the fn, though we scarcely ever use `*args` otherwise. I think the syntax of the c-side option is rather ungainly. Python-wise I'd love to do getters and setters on the CubeProp object so it acts more like the functional object. But what worries me is users not knowing where to go to specify what they want done– c-side options, kwargs, args, methods on object. Right now, you can do most any calc with the name argument to e(), etc. plus c-side options. . But a more object-based API procedure in future will require more explicit options passing. And cubeprop, oeprop, moldenwriter are all very light-weight objects. So maybe going ahead and exporting and using all the getters and setters for these objects is the route. Figure out what the best syntax would be for that route, then use that to figure out a convenient one-line call to handle most use cases with minimal options spec. Maybe guided by the vml_cube script. Sorry, this is a ramble. Certainly I'm not clear on what's best to do to accomodate all styles.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/286#issuecomment-189699831
https://github.com/psi4/psi4/pull/286#issuecomment-189699831:107,Integrability,rout,routing,107,"I've never really liked having `def property(` out on it's own. That is, I think it needs to be for driver routing purposes for the same reason `def run_dfmp2` and `def run_dfmp2_gradient` are different. For user-facing, I find `energy('mp2')` and `property('mp2')` too alike. I'd rather `properties=[]` was just a kwarg passed on to any of e(), g(), o(), f(), h() (with the understanding that an extra calc would be taken at the end of o()). But that's a large can of worms, so I'll just mention it as why I like properties as a kwarg. So I like the kwarg for that reason. I don't mind the look of `*args` in oeprop, as certainly that the most important info being conveyed to the fn, though we scarcely ever use `*args` otherwise. I think the syntax of the c-side option is rather ungainly. Python-wise I'd love to do getters and setters on the CubeProp object so it acts more like the functional object. But what worries me is users not knowing where to go to specify what they want done– c-side options, kwargs, args, methods on object. Right now, you can do most any calc with the name argument to e(), etc. plus c-side options. . But a more object-based API procedure in future will require more explicit options passing. And cubeprop, oeprop, moldenwriter are all very light-weight objects. So maybe going ahead and exporting and using all the getters and setters for these objects is the route. Figure out what the best syntax would be for that route, then use that to figure out a convenient one-line call to handle most use cases with minimal options spec. Maybe guided by the vml_cube script. Sorry, this is a ramble. Certainly I'm not clear on what's best to do to accomodate all styles.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/286#issuecomment-189699831
https://github.com/psi4/psi4/pull/286#issuecomment-189699831:1396,Integrability,rout,route,1396,"I've never really liked having `def property(` out on it's own. That is, I think it needs to be for driver routing purposes for the same reason `def run_dfmp2` and `def run_dfmp2_gradient` are different. For user-facing, I find `energy('mp2')` and `property('mp2')` too alike. I'd rather `properties=[]` was just a kwarg passed on to any of e(), g(), o(), f(), h() (with the understanding that an extra calc would be taken at the end of o()). But that's a large can of worms, so I'll just mention it as why I like properties as a kwarg. So I like the kwarg for that reason. I don't mind the look of `*args` in oeprop, as certainly that the most important info being conveyed to the fn, though we scarcely ever use `*args` otherwise. I think the syntax of the c-side option is rather ungainly. Python-wise I'd love to do getters and setters on the CubeProp object so it acts more like the functional object. But what worries me is users not knowing where to go to specify what they want done– c-side options, kwargs, args, methods on object. Right now, you can do most any calc with the name argument to e(), etc. plus c-side options. . But a more object-based API procedure in future will require more explicit options passing. And cubeprop, oeprop, moldenwriter are all very light-weight objects. So maybe going ahead and exporting and using all the getters and setters for these objects is the route. Figure out what the best syntax would be for that route, then use that to figure out a convenient one-line call to handle most use cases with minimal options spec. Maybe guided by the vml_cube script. Sorry, this is a ramble. Certainly I'm not clear on what's best to do to accomodate all styles.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/286#issuecomment-189699831
https://github.com/psi4/psi4/pull/286#issuecomment-189699831:1453,Integrability,rout,route,1453,"I've never really liked having `def property(` out on it's own. That is, I think it needs to be for driver routing purposes for the same reason `def run_dfmp2` and `def run_dfmp2_gradient` are different. For user-facing, I find `energy('mp2')` and `property('mp2')` too alike. I'd rather `properties=[]` was just a kwarg passed on to any of e(), g(), o(), f(), h() (with the understanding that an extra calc would be taken at the end of o()). But that's a large can of worms, so I'll just mention it as why I like properties as a kwarg. So I like the kwarg for that reason. I don't mind the look of `*args` in oeprop, as certainly that the most important info being conveyed to the fn, though we scarcely ever use `*args` otherwise. I think the syntax of the c-side option is rather ungainly. Python-wise I'd love to do getters and setters on the CubeProp object so it acts more like the functional object. But what worries me is users not knowing where to go to specify what they want done– c-side options, kwargs, args, methods on object. Right now, you can do most any calc with the name argument to e(), etc. plus c-side options. . But a more object-based API procedure in future will require more explicit options passing. And cubeprop, oeprop, moldenwriter are all very light-weight objects. So maybe going ahead and exporting and using all the getters and setters for these objects is the route. Figure out what the best syntax would be for that route, then use that to figure out a convenient one-line call to handle most use cases with minimal options spec. Maybe guided by the vml_cube script. Sorry, this is a ramble. Certainly I'm not clear on what's best to do to accomodate all styles.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/286#issuecomment-189699831
https://github.com/psi4/psi4/pull/286#issuecomment-189699831:1573,Usability,guid,guided,1573,"I've never really liked having `def property(` out on it's own. That is, I think it needs to be for driver routing purposes for the same reason `def run_dfmp2` and `def run_dfmp2_gradient` are different. For user-facing, I find `energy('mp2')` and `property('mp2')` too alike. I'd rather `properties=[]` was just a kwarg passed on to any of e(), g(), o(), f(), h() (with the understanding that an extra calc would be taken at the end of o()). But that's a large can of worms, so I'll just mention it as why I like properties as a kwarg. So I like the kwarg for that reason. I don't mind the look of `*args` in oeprop, as certainly that the most important info being conveyed to the fn, though we scarcely ever use `*args` otherwise. I think the syntax of the c-side option is rather ungainly. Python-wise I'd love to do getters and setters on the CubeProp object so it acts more like the functional object. But what worries me is users not knowing where to go to specify what they want done– c-side options, kwargs, args, methods on object. Right now, you can do most any calc with the name argument to e(), etc. plus c-side options. . But a more object-based API procedure in future will require more explicit options passing. And cubeprop, oeprop, moldenwriter are all very light-weight objects. So maybe going ahead and exporting and using all the getters and setters for these objects is the route. Figure out what the best syntax would be for that route, then use that to figure out a convenient one-line call to handle most use cases with minimal options spec. Maybe guided by the vml_cube script. Sorry, this is a ramble. Certainly I'm not clear on what's best to do to accomodate all styles.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/286#issuecomment-189699831
https://github.com/psi4/psi4/pull/286#issuecomment-189699831:1647,Usability,clear,clear,1647,"I've never really liked having `def property(` out on it's own. That is, I think it needs to be for driver routing purposes for the same reason `def run_dfmp2` and `def run_dfmp2_gradient` are different. For user-facing, I find `energy('mp2')` and `property('mp2')` too alike. I'd rather `properties=[]` was just a kwarg passed on to any of e(), g(), o(), f(), h() (with the understanding that an extra calc would be taken at the end of o()). But that's a large can of worms, so I'll just mention it as why I like properties as a kwarg. So I like the kwarg for that reason. I don't mind the look of `*args` in oeprop, as certainly that the most important info being conveyed to the fn, though we scarcely ever use `*args` otherwise. I think the syntax of the c-side option is rather ungainly. Python-wise I'd love to do getters and setters on the CubeProp object so it acts more like the functional object. But what worries me is users not knowing where to go to specify what they want done– c-side options, kwargs, args, methods on object. Right now, you can do most any calc with the name argument to e(), etc. plus c-side options. . But a more object-based API procedure in future will require more explicit options passing. And cubeprop, oeprop, moldenwriter are all very light-weight objects. So maybe going ahead and exporting and using all the getters and setters for these objects is the route. Figure out what the best syntax would be for that route, then use that to figure out a convenient one-line call to handle most use cases with minimal options spec. Maybe guided by the vml_cube script. Sorry, this is a ramble. Certainly I'm not clear on what's best to do to accomodate all styles.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/286#issuecomment-189699831
https://github.com/psi4/psi4/pull/286#issuecomment-189700565:258,Energy Efficiency,energy,energy,258,"I do agree on most counts. Although, I think its worth pointing out that properties through OEProp are quite trivial; however, any other properties are going require linear response in some way or another which divorces itself quite radically from standard `energy` calls.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/286#issuecomment-189700565
https://github.com/psi4/psi4/issues/289#issuecomment-189698585:78,Integrability,depend,dependency,78,"Huh, haven't tried `psi4 -t` in ages. Well, I've added ncurses to the runtime dependency list for the conda package. Should appear in tomorrow's build. Thanks for the report.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/289#issuecomment-189698585
https://github.com/psi4/psi4/issues/290#issuecomment-189916188:145,Availability,robust,robust,145,"Okay, I think (hope) I sorted it out. My test was checking the last computed energy, not the last converged IRC point. The latter should be more robust. The mechanism that checks for a minimum runs on the first step of the next IRC-point optimization -- that was the energy being compared. Since the gradient is small so near the minimum, I guess it isn't surprising that that step direction isn't well-defined. My changes are [here](https://github.com/avcopan/psi4/commit/ab07fd3e1c5242ca58bba12230ce7f1077392102). If tests pass on my machine and you approve (@loriab), I'll do a pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/290#issuecomment-189916188
https://github.com/psi4/psi4/issues/290#issuecomment-189916188:77,Energy Efficiency,energy,energy,77,"Okay, I think (hope) I sorted it out. My test was checking the last computed energy, not the last converged IRC point. The latter should be more robust. The mechanism that checks for a minimum runs on the first step of the next IRC-point optimization -- that was the energy being compared. Since the gradient is small so near the minimum, I guess it isn't surprising that that step direction isn't well-defined. My changes are [here](https://github.com/avcopan/psi4/commit/ab07fd3e1c5242ca58bba12230ce7f1077392102). If tests pass on my machine and you approve (@loriab), I'll do a pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/290#issuecomment-189916188
https://github.com/psi4/psi4/issues/290#issuecomment-189916188:267,Energy Efficiency,energy,energy,267,"Okay, I think (hope) I sorted it out. My test was checking the last computed energy, not the last converged IRC point. The latter should be more robust. The mechanism that checks for a minimum runs on the first step of the next IRC-point optimization -- that was the energy being compared. Since the gradient is small so near the minimum, I guess it isn't surprising that that step direction isn't well-defined. My changes are [here](https://github.com/avcopan/psi4/commit/ab07fd3e1c5242ca58bba12230ce7f1077392102). If tests pass on my machine and you approve (@loriab), I'll do a pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/290#issuecomment-189916188
https://github.com/psi4/psi4/issues/290#issuecomment-189916188:238,Performance,optimiz,optimization,238,"Okay, I think (hope) I sorted it out. My test was checking the last computed energy, not the last converged IRC point. The latter should be more robust. The mechanism that checks for a minimum runs on the first step of the next IRC-point optimization -- that was the energy being compared. Since the gradient is small so near the minimum, I guess it isn't surprising that that step direction isn't well-defined. My changes are [here](https://github.com/avcopan/psi4/commit/ab07fd3e1c5242ca58bba12230ce7f1077392102). If tests pass on my machine and you approve (@loriab), I'll do a pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/290#issuecomment-189916188
https://github.com/psi4/psi4/issues/290#issuecomment-189916188:41,Testability,test,test,41,"Okay, I think (hope) I sorted it out. My test was checking the last computed energy, not the last converged IRC point. The latter should be more robust. The mechanism that checks for a minimum runs on the first step of the next IRC-point optimization -- that was the energy being compared. Since the gradient is small so near the minimum, I guess it isn't surprising that that step direction isn't well-defined. My changes are [here](https://github.com/avcopan/psi4/commit/ab07fd3e1c5242ca58bba12230ce7f1077392102). If tests pass on my machine and you approve (@loriab), I'll do a pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/290#issuecomment-189916188
https://github.com/psi4/psi4/issues/290#issuecomment-189916188:519,Testability,test,tests,519,"Okay, I think (hope) I sorted it out. My test was checking the last computed energy, not the last converged IRC point. The latter should be more robust. The mechanism that checks for a minimum runs on the first step of the next IRC-point optimization -- that was the energy being compared. Since the gradient is small so near the minimum, I guess it isn't surprising that that step direction isn't well-defined. My changes are [here](https://github.com/avcopan/psi4/commit/ab07fd3e1c5242ca58bba12230ce7f1077392102). If tests pass on my machine and you approve (@loriab), I'll do a pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/290#issuecomment-189916188
https://github.com/psi4/psi4/issues/291#issuecomment-190004493:257,Energy Efficiency,energy,energy,257,"Thanks for the analysis. After the wavefunction pass, I haven't revisited sow/reap operation at all, and I don't actually expect any of them to be working. Since you've obliged with an official ticket, I'll make a list of things to do :-); - [ ] grad by fd energy s/r; - [ ] freq by fd energy s/r; - [ ] freq by fd gradient s/r (new capability); - [ ] in opt by fd energy, make sure optdata is being carried along, rather than opt restarting from step 1 everytime.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/291#issuecomment-190004493
https://github.com/psi4/psi4/issues/291#issuecomment-190004493:286,Energy Efficiency,energy,energy,286,"Thanks for the analysis. After the wavefunction pass, I haven't revisited sow/reap operation at all, and I don't actually expect any of them to be working. Since you've obliged with an official ticket, I'll make a list of things to do :-); - [ ] grad by fd energy s/r; - [ ] freq by fd energy s/r; - [ ] freq by fd gradient s/r (new capability); - [ ] in opt by fd energy, make sure optdata is being carried along, rather than opt restarting from step 1 everytime.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/291#issuecomment-190004493
https://github.com/psi4/psi4/issues/291#issuecomment-190004493:365,Energy Efficiency,energy,energy,365,"Thanks for the analysis. After the wavefunction pass, I haven't revisited sow/reap operation at all, and I don't actually expect any of them to be working. Since you've obliged with an official ticket, I'll make a list of things to do :-); - [ ] grad by fd energy s/r; - [ ] freq by fd energy s/r; - [ ] freq by fd gradient s/r (new capability); - [ ] in opt by fd energy, make sure optdata is being carried along, rather than opt restarting from step 1 everytime.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/291#issuecomment-190004493
https://github.com/psi4/psi4/pull/292#issuecomment-189992984:515,Availability,reliab,reliable,515,"Thanks, @avcopan. On my system, your changes make it an order of magnitude closer to the check. If I back the compare_values up to 4, it passes. ```; Energy of last IRC point: computed value (-92.874363) does not match (-92.874374) to 5 decimal places.; ```. The only other thing that concerns me is `thisenergy = old_wfn.energy()`. Though `.energy()` is definitely the future, preferable way, right now `thisenergy = psi4.get_variable('CURRENT ENERGY')`, as you see right above at the gradient() call, is far more reliable, as so few methods properly set the energy member datum of Wavefunction. So if the `4` and `CURRENT ENERGY` changes sound good to you, go ahead and make them. If you put ""fixes psi4/psi4#290"" in the commit message, it'll close the ticket when it gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/292#issuecomment-189992984
https://github.com/psi4/psi4/pull/292#issuecomment-189992984:150,Energy Efficiency,Energy,Energy,150,"Thanks, @avcopan. On my system, your changes make it an order of magnitude closer to the check. If I back the compare_values up to 4, it passes. ```; Energy of last IRC point: computed value (-92.874363) does not match (-92.874374) to 5 decimal places.; ```. The only other thing that concerns me is `thisenergy = old_wfn.energy()`. Though `.energy()` is definitely the future, preferable way, right now `thisenergy = psi4.get_variable('CURRENT ENERGY')`, as you see right above at the gradient() call, is far more reliable, as so few methods properly set the energy member datum of Wavefunction. So if the `4` and `CURRENT ENERGY` changes sound good to you, go ahead and make them. If you put ""fixes psi4/psi4#290"" in the commit message, it'll close the ticket when it gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/292#issuecomment-189992984
https://github.com/psi4/psi4/pull/292#issuecomment-189992984:322,Energy Efficiency,energy,energy,322,"Thanks, @avcopan. On my system, your changes make it an order of magnitude closer to the check. If I back the compare_values up to 4, it passes. ```; Energy of last IRC point: computed value (-92.874363) does not match (-92.874374) to 5 decimal places.; ```. The only other thing that concerns me is `thisenergy = old_wfn.energy()`. Though `.energy()` is definitely the future, preferable way, right now `thisenergy = psi4.get_variable('CURRENT ENERGY')`, as you see right above at the gradient() call, is far more reliable, as so few methods properly set the energy member datum of Wavefunction. So if the `4` and `CURRENT ENERGY` changes sound good to you, go ahead and make them. If you put ""fixes psi4/psi4#290"" in the commit message, it'll close the ticket when it gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/292#issuecomment-189992984
https://github.com/psi4/psi4/pull/292#issuecomment-189992984:342,Energy Efficiency,energy,energy,342,"Thanks, @avcopan. On my system, your changes make it an order of magnitude closer to the check. If I back the compare_values up to 4, it passes. ```; Energy of last IRC point: computed value (-92.874363) does not match (-92.874374) to 5 decimal places.; ```. The only other thing that concerns me is `thisenergy = old_wfn.energy()`. Though `.energy()` is definitely the future, preferable way, right now `thisenergy = psi4.get_variable('CURRENT ENERGY')`, as you see right above at the gradient() call, is far more reliable, as so few methods properly set the energy member datum of Wavefunction. So if the `4` and `CURRENT ENERGY` changes sound good to you, go ahead and make them. If you put ""fixes psi4/psi4#290"" in the commit message, it'll close the ticket when it gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/292#issuecomment-189992984
https://github.com/psi4/psi4/pull/292#issuecomment-189992984:445,Energy Efficiency,ENERGY,ENERGY,445,"Thanks, @avcopan. On my system, your changes make it an order of magnitude closer to the check. If I back the compare_values up to 4, it passes. ```; Energy of last IRC point: computed value (-92.874363) does not match (-92.874374) to 5 decimal places.; ```. The only other thing that concerns me is `thisenergy = old_wfn.energy()`. Though `.energy()` is definitely the future, preferable way, right now `thisenergy = psi4.get_variable('CURRENT ENERGY')`, as you see right above at the gradient() call, is far more reliable, as so few methods properly set the energy member datum of Wavefunction. So if the `4` and `CURRENT ENERGY` changes sound good to you, go ahead and make them. If you put ""fixes psi4/psi4#290"" in the commit message, it'll close the ticket when it gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/292#issuecomment-189992984
https://github.com/psi4/psi4/pull/292#issuecomment-189992984:560,Energy Efficiency,energy,energy,560,"Thanks, @avcopan. On my system, your changes make it an order of magnitude closer to the check. If I back the compare_values up to 4, it passes. ```; Energy of last IRC point: computed value (-92.874363) does not match (-92.874374) to 5 decimal places.; ```. The only other thing that concerns me is `thisenergy = old_wfn.energy()`. Though `.energy()` is definitely the future, preferable way, right now `thisenergy = psi4.get_variable('CURRENT ENERGY')`, as you see right above at the gradient() call, is far more reliable, as so few methods properly set the energy member datum of Wavefunction. So if the `4` and `CURRENT ENERGY` changes sound good to you, go ahead and make them. If you put ""fixes psi4/psi4#290"" in the commit message, it'll close the ticket when it gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/292#issuecomment-189992984
https://github.com/psi4/psi4/pull/292#issuecomment-189992984:624,Energy Efficiency,ENERGY,ENERGY,624,"Thanks, @avcopan. On my system, your changes make it an order of magnitude closer to the check. If I back the compare_values up to 4, it passes. ```; Energy of last IRC point: computed value (-92.874363) does not match (-92.874374) to 5 decimal places.; ```. The only other thing that concerns me is `thisenergy = old_wfn.energy()`. Though `.energy()` is definitely the future, preferable way, right now `thisenergy = psi4.get_variable('CURRENT ENERGY')`, as you see right above at the gradient() call, is far more reliable, as so few methods properly set the energy member datum of Wavefunction. So if the `4` and `CURRENT ENERGY` changes sound good to you, go ahead and make them. If you put ""fixes psi4/psi4#290"" in the commit message, it'll close the ticket when it gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/292#issuecomment-189992984
https://github.com/psi4/psi4/pull/292#issuecomment-189992984:730,Integrability,message,message,730,"Thanks, @avcopan. On my system, your changes make it an order of magnitude closer to the check. If I back the compare_values up to 4, it passes. ```; Energy of last IRC point: computed value (-92.874363) does not match (-92.874374) to 5 decimal places.; ```. The only other thing that concerns me is `thisenergy = old_wfn.energy()`. Though `.energy()` is definitely the future, preferable way, right now `thisenergy = psi4.get_variable('CURRENT ENERGY')`, as you see right above at the gradient() call, is far more reliable, as so few methods properly set the energy member datum of Wavefunction. So if the `4` and `CURRENT ENERGY` changes sound good to you, go ahead and make them. If you put ""fixes psi4/psi4#290"" in the commit message, it'll close the ticket when it gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/292#issuecomment-189992984
https://github.com/psi4/psi4/pull/292#issuecomment-190452935:304,Integrability,message,message,304,"Unfortunately it looks like you just repushed the same changes. . First run, `git rebase -i HEAD~7`. You should see all of your changes plus a few more. Change all of your commits from ""pick"" to ""squash"" _except_ for your very first one where you want to switch to ""reword"" so that you can rephrase this message. Save this file, you will then get a chance to reword the squashed commits (I would). You can then run `git log --oneline` to make sure the history looks right. Also, examine a few files to make sure the correct changes are there. When you are ready to push, `git push origin master --force` will overwrite the history on the remote. If something goes wrong before you push you can reset these changes by `git reset --hard origin/master`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/292#issuecomment-190452935
https://github.com/psi4/psi4/pull/292#issuecomment-190452935:420,Testability,log,log,420,"Unfortunately it looks like you just repushed the same changes. . First run, `git rebase -i HEAD~7`. You should see all of your changes plus a few more. Change all of your commits from ""pick"" to ""squash"" _except_ for your very first one where you want to switch to ""reword"" so that you can rephrase this message. Save this file, you will then get a chance to reword the squashed commits (I would). You can then run `git log --oneline` to make sure the history looks right. Also, examine a few files to make sure the correct changes are there. When you are ready to push, `git push origin master --force` will overwrite the history on the remote. If something goes wrong before you push you can reset these changes by `git reset --hard origin/master`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/292#issuecomment-190452935
https://github.com/psi4/psi4/pull/296#issuecomment-192782077:131,Energy Efficiency,efficient,efficient,131,"@fevangelista, @andysim : It would be great if all post-HF codes relied on DPD. This way, we could replace IWL with something more efficient easily.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/296#issuecomment-192782077
https://github.com/psi4/psi4/pull/296#issuecomment-208381486:120,Energy Efficiency,reduce,reduce,120,"Sorry for not checking the PRs for a few days. Yes, this is ready to go and I think it should be merged because it does reduce the MRPT memory usage. The transition from IWL that we mentioned should be done at some point for consistency with other codes, but it won't gain any new functionality.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/296#issuecomment-208381486
https://github.com/psi4/psi4/issues/298#issuecomment-191455202:102,Availability,error,errors,102,"Im guessing this is due to the fact that the DF JK algorithm runs in C1 symmetry. . It looks like the errors are exceedingly small, can we just resymmetrize the molecule using built in functions after a optking step to retain the symmetry?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191455202
https://github.com/psi4/psi4/issues/298#issuecomment-191455933:89,Availability,error,errors,89,"Yeah, this is likely numerical noise in the eigendecomposition stages of; DF-SCF. As the errors are exceedingly small, I'd recommend just explicitly; symmetrizing the gradient to the desired point group externally. -Rob. On Wed, Mar 2, 2016 at 2:08 PM, Daniel Smith notifications@github.com; wrote:. > Im guessing this is due to the fact that the DF JK algorithm runs in C1; > symmetry.; > ; > It looks like the errors are exceedingly small, can we just resymmetrize; > the molecule using built in functions after a optking step to retain the; > symmetry?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/298#issuecomment-191455202.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191455933
https://github.com/psi4/psi4/issues/298#issuecomment-191455933:412,Availability,error,errors,412,"Yeah, this is likely numerical noise in the eigendecomposition stages of; DF-SCF. As the errors are exceedingly small, I'd recommend just explicitly; symmetrizing the gradient to the desired point group externally. -Rob. On Wed, Mar 2, 2016 at 2:08 PM, Daniel Smith notifications@github.com; wrote:. > Im guessing this is due to the fact that the DF JK algorithm runs in C1; > symmetry.; > ; > It looks like the errors are exceedingly small, can we just resymmetrize; > the molecule using built in functions after a optking step to retain the; > symmetry?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/298#issuecomment-191455202.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191455933
https://github.com/psi4/psi4/issues/298#issuecomment-191456427:142,Availability,fault,fault,142,"Yes, the gradient itself should get symmetrized. So I know any deviations; that occur from a symmetric structure within optking are optking's fault; not simply amplification of an input asymmetry. On Wed, Mar 2, 2016 at 4:11 PM, Rob Parrish notifications@github.com; wrote:. > Yeah, this is likely numerical noise in the eigendecomposition stages of; > DF-SCF. As the errors are exceedingly small, I'd recommend just explicitly; > symmetrizing the gradient to the desired point group externally.; > ; > -Rob; > ; > On Wed, Mar 2, 2016 at 2:08 PM, Daniel Smith notifications@github.com; > wrote:; > ; > > Im guessing this is due to the fact that the DF JK algorithm runs in C1; > > symmetry.; > > ; > > It looks like the errors are exceedingly small, can we just resymmetrize; > > the molecule using built in functions after a optking step to retain the; > > symmetry?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/298#issuecomment-191455202.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/298#issuecomment-191455933.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191456427
https://github.com/psi4/psi4/issues/298#issuecomment-191456427:368,Availability,error,errors,368,"Yes, the gradient itself should get symmetrized. So I know any deviations; that occur from a symmetric structure within optking are optking's fault; not simply amplification of an input asymmetry. On Wed, Mar 2, 2016 at 4:11 PM, Rob Parrish notifications@github.com; wrote:. > Yeah, this is likely numerical noise in the eigendecomposition stages of; > DF-SCF. As the errors are exceedingly small, I'd recommend just explicitly; > symmetrizing the gradient to the desired point group externally.; > ; > -Rob; > ; > On Wed, Mar 2, 2016 at 2:08 PM, Daniel Smith notifications@github.com; > wrote:; > ; > > Im guessing this is due to the fact that the DF JK algorithm runs in C1; > > symmetry.; > > ; > > It looks like the errors are exceedingly small, can we just resymmetrize; > > the molecule using built in functions after a optking step to retain the; > > symmetry?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/298#issuecomment-191455202.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/298#issuecomment-191455933.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191456427
https://github.com/psi4/psi4/issues/298#issuecomment-191456427:720,Availability,error,errors,720,"Yes, the gradient itself should get symmetrized. So I know any deviations; that occur from a symmetric structure within optking are optking's fault; not simply amplification of an input asymmetry. On Wed, Mar 2, 2016 at 4:11 PM, Rob Parrish notifications@github.com; wrote:. > Yeah, this is likely numerical noise in the eigendecomposition stages of; > DF-SCF. As the errors are exceedingly small, I'd recommend just explicitly; > symmetrizing the gradient to the desired point group externally.; > ; > -Rob; > ; > On Wed, Mar 2, 2016 at 2:08 PM, Daniel Smith notifications@github.com; > wrote:; > ; > > Im guessing this is due to the fact that the DF JK algorithm runs in C1; > > symmetry.; > > ; > > It looks like the errors are exceedingly small, can we just resymmetrize; > > the molecule using built in functions after a optking step to retain the; > > symmetry?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/298#issuecomment-191455202.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/298#issuecomment-191455933.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191456427
https://github.com/psi4/psi4/issues/298#issuecomment-191456427:153,Usability,simpl,simply,153,"Yes, the gradient itself should get symmetrized. So I know any deviations; that occur from a symmetric structure within optking are optking's fault; not simply amplification of an input asymmetry. On Wed, Mar 2, 2016 at 4:11 PM, Rob Parrish notifications@github.com; wrote:. > Yeah, this is likely numerical noise in the eigendecomposition stages of; > DF-SCF. As the errors are exceedingly small, I'd recommend just explicitly; > symmetrizing the gradient to the desired point group externally.; > ; > -Rob; > ; > On Wed, Mar 2, 2016 at 2:08 PM, Daniel Smith notifications@github.com; > wrote:; > ; > > Im guessing this is due to the fact that the DF JK algorithm runs in C1; > > symmetry.; > > ; > > It looks like the errors are exceedingly small, can we just resymmetrize; > > the molecule using built in functions after a optking step to retain the; > > symmetry?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/298#issuecomment-191455202.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/298#issuecomment-191455933.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191456427
https://github.com/psi4/psi4/issues/298#issuecomment-191456694:16,Usability,simpl,simple,16,It should be as simple as calling code like [this](https://github.com/psi4/psi4/blob/master/src/lib/libmints/deriv.cc#L753-L782).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191456694
https://github.com/psi4/psi4/issues/298#issuecomment-191456874:121,Usability,simpl,simple,121,"Nice one Andy!. -Rob. On Wed, Mar 2, 2016 at 2:14 PM, Andy Simmonett notifications@github.com; wrote:. > It should be as simple as calling code like this; > https://github.com/psi4/psi4/blob/master/src/lib/libmints/deriv.cc#L753-L782; > .; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/298#issuecomment-191456694.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191456874
https://github.com/psi4/psi4/issues/298#issuecomment-191476636:150,Usability,simpl,simplest,150,"Well, at least our post-SCF gradients have the right symmetry. SCF is its own module... Making a new Deriv object seems a bit of waste so I think the simplest thing to do is just to duplicate the function in `src/scfgrad`. Duplication is not my favorite thing, but certainly the simplest. I guess we are guaranteed to be in standard orientation unlike the [molecule](https://github.com/psi4/psi4/blob/master/src/lib/libmints/molecule.cc#L2787) version? Seems like yes, but good to be sure while were looking at it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191476636
https://github.com/psi4/psi4/issues/298#issuecomment-191476636:279,Usability,simpl,simplest,279,"Well, at least our post-SCF gradients have the right symmetry. SCF is its own module... Making a new Deriv object seems a bit of waste so I think the simplest thing to do is just to duplicate the function in `src/scfgrad`. Duplication is not my favorite thing, but certainly the simplest. I guess we are guaranteed to be in standard orientation unlike the [molecule](https://github.com/psi4/psi4/blob/master/src/lib/libmints/molecule.cc#L2787) version? Seems like yes, but good to be sure while were looking at it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191476636
https://github.com/psi4/psi4/issues/298#issuecomment-191938284:223,Availability,toler,tolerant,223,"@dgasmith and I were discussing this and realizing that if we start guaranteeing symmetrized output that there are many arrays as plausible targets: Hessian, components of gradient, MOs, properties. That is, every symmetry tolerant code is going to have to shove its output through a symmetrizer, or parts that need symmetrized input (e.g., optking) could it into targeted (e.g., gradient-only) symmetrizers. For general planning, functions like these probably belong in the driver alongside functions (various of which I have) for manipulating mol, dipole, grad, hess by translation, rotation, atom-exchange, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191938284
https://github.com/psi4/psi4/issues/298#issuecomment-191943783:33,Availability,robust,robustness,33,"For future reference and for the robustness of https://github.com/psi4/psi4/pull/301, I'd like to know the answer to the standard orientation question in https://github.com/psi4/psi4/issues/298#issuecomment-191476636, if anyone in the know can supply it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191943783
https://github.com/psi4/psi4/issues/298#issuecomment-191950504:234,Safety,safe,safe,234,"I didn't know about the molecule member, but I vote that we go with the algorithm that assumes nothing about the orientation. We don't use symmetry unless the molecule is in the standard orientation, but I still think it's best to be safe. Especially when that safety comes without any extra computational cost. I think you're right about having a central location to handle this for gradients, hessians, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191950504
https://github.com/psi4/psi4/issues/298#issuecomment-191950504:261,Safety,safe,safety,261,"I didn't know about the molecule member, but I vote that we go with the algorithm that assumes nothing about the orientation. We don't use symmetry unless the molecule is in the standard orientation, but I still think it's best to be safe. Especially when that safety comes without any extra computational cost. I think you're right about having a central location to handle this for gradients, hessians, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191950504
https://github.com/psi4/psi4/issues/298#issuecomment-191991936:18,Availability,toler,tolerant,18,"I think ""symmetry tolerant"" is an odd description to apply to a method that; takes a symmetrical input and produces an asymmetrical output (e.g., the; DF-SCF gradient generating asymmetrical noise in the 9th decimal). If; numerical approximation is introducing the asymmetry, isn't the; symmetrization, if done evenly, likely to improve the accuracy of the; result, besides avoiding the risk of collateral damage? I appreciate; symmetrizing other types of objects may not be as simple. On Thu, Mar 3, 2016 at 2:47 PM, Justin Turney notifications@github.com; wrote:. > Yeah, the one in molecule used to be like the one in deriv when I; > originally wrote it 5 years ago. Then @psi-rking; > https://github.com/psi-rking expanded on it to assume non-standard; > orientation. A centralized one sounds good since I just found another on in; > matrix.cc.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/298#issuecomment-191955685.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191991936
https://github.com/psi4/psi4/issues/298#issuecomment-191991936:374,Safety,avoid,avoiding,374,"I think ""symmetry tolerant"" is an odd description to apply to a method that; takes a symmetrical input and produces an asymmetrical output (e.g., the; DF-SCF gradient generating asymmetrical noise in the 9th decimal). If; numerical approximation is introducing the asymmetry, isn't the; symmetrization, if done evenly, likely to improve the accuracy of the; result, besides avoiding the risk of collateral damage? I appreciate; symmetrizing other types of objects may not be as simple. On Thu, Mar 3, 2016 at 2:47 PM, Justin Turney notifications@github.com; wrote:. > Yeah, the one in molecule used to be like the one in deriv when I; > originally wrote it 5 years ago. Then @psi-rking; > https://github.com/psi-rking expanded on it to assume non-standard; > orientation. A centralized one sounds good since I just found another on in; > matrix.cc.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/298#issuecomment-191955685.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191991936
https://github.com/psi4/psi4/issues/298#issuecomment-191991936:387,Safety,risk,risk,387,"I think ""symmetry tolerant"" is an odd description to apply to a method that; takes a symmetrical input and produces an asymmetrical output (e.g., the; DF-SCF gradient generating asymmetrical noise in the 9th decimal). If; numerical approximation is introducing the asymmetry, isn't the; symmetrization, if done evenly, likely to improve the accuracy of the; result, besides avoiding the risk of collateral damage? I appreciate; symmetrizing other types of objects may not be as simple. On Thu, Mar 3, 2016 at 2:47 PM, Justin Turney notifications@github.com; wrote:. > Yeah, the one in molecule used to be like the one in deriv when I; > originally wrote it 5 years ago. Then @psi-rking; > https://github.com/psi-rking expanded on it to assume non-standard; > orientation. A centralized one sounds good since I just found another on in; > matrix.cc.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/298#issuecomment-191955685.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191991936
https://github.com/psi4/psi4/issues/298#issuecomment-191991936:478,Usability,simpl,simple,478,"I think ""symmetry tolerant"" is an odd description to apply to a method that; takes a symmetrical input and produces an asymmetrical output (e.g., the; DF-SCF gradient generating asymmetrical noise in the 9th decimal). If; numerical approximation is introducing the asymmetry, isn't the; symmetrization, if done evenly, likely to improve the accuracy of the; result, besides avoiding the risk of collateral damage? I appreciate; symmetrizing other types of objects may not be as simple. On Thu, Mar 3, 2016 at 2:47 PM, Justin Turney notifications@github.com; wrote:. > Yeah, the one in molecule used to be like the one in deriv when I; > originally wrote it 5 years ago. Then @psi-rking; > https://github.com/psi-rking expanded on it to assume non-standard; > orientation. A centralized one sounds good since I just found another on in; > matrix.cc.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/298#issuecomment-191955685.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191991936
https://github.com/psi4/psi4/issues/298#issuecomment-191996440:354,Integrability,wrap,wrap,354,"It's a technical term :-) (http://forum.psicode.org/t/managed-methods-feedback-required/130/4?u=loriab), @psi-rking . Thanks for the answers, @jturney and @andysim, I'd feel better, too, if we assume less about the orientation, so long as there's no reason to the contrary. I believe @dgasmith is already adding the off-diagonals to #301, so that should wrap up this issue. And we're agreed on where such function should live in future, as they materialize.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191996440
https://github.com/psi4/psi4/issues/298#issuecomment-191996440:70,Usability,feedback,feedback-required,70,"It's a technical term :-) (http://forum.psicode.org/t/managed-methods-feedback-required/130/4?u=loriab), @psi-rking . Thanks for the answers, @jturney and @andysim, I'd feel better, too, if we assume less about the orientation, so long as there's no reason to the contrary. I believe @dgasmith is already adding the off-diagonals to #301, so that should wrap up this issue. And we're agreed on where such function should live in future, as they materialize.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/298#issuecomment-191996440
https://github.com/psi4/psi4/pull/299#issuecomment-191801305:376,Safety,avoid,avoided,376,"It is the molecule's job to make sure that its member data are; internally consistent. In the scenario you painted, the pg should be; recomputed every time you change the molecule, or it should be computed; on the fly. Either way it will remain consistent with the actual state; of the molecule. Not copying member data in a copy operation is counter intuitive and; should be avoided. Honestly, I don't think I have ever seen a scenario; in which it makes sense. On Thu, 2016-03-03 at 06:53 -0800, David Sherrill wrote:. > Right, unless you wanted to do a CP correction, so you copied the; > dimer; > molecule, then in the copy you turned some atoms from ""real"" atoms to; > ""ghost"" atoms.; > ; > Don't know if we ever do / would do that, just speculating about why; > someone would have come up with the idea that copying pg is bad.; > ; > On Thu, Mar 3, 2016 at 9:48 AM, Ryan Richard; > notifications@github.com; > wrote:; > ; > > Not copying pg seems somewhat silly because if you are making a copy; > > there; > > should be no way that the copy doesn't have the same symmetry, even; > > factoring in ghost atoms, since both molecules have the same ghost; > > atoms.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/pull/299#issuecomment-191796461.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-191801305
https://github.com/psi4/psi4/pull/299#issuecomment-191801305:351,Usability,intuit,intuitive,351,"It is the molecule's job to make sure that its member data are; internally consistent. In the scenario you painted, the pg should be; recomputed every time you change the molecule, or it should be computed; on the fly. Either way it will remain consistent with the actual state; of the molecule. Not copying member data in a copy operation is counter intuitive and; should be avoided. Honestly, I don't think I have ever seen a scenario; in which it makes sense. On Thu, 2016-03-03 at 06:53 -0800, David Sherrill wrote:. > Right, unless you wanted to do a CP correction, so you copied the; > dimer; > molecule, then in the copy you turned some atoms from ""real"" atoms to; > ""ghost"" atoms.; > ; > Don't know if we ever do / would do that, just speculating about why; > someone would have come up with the idea that copying pg is bad.; > ; > On Thu, Mar 3, 2016 at 9:48 AM, Ryan Richard; > notifications@github.com; > wrote:; > ; > > Not copying pg seems somewhat silly because if you are making a copy; > > there; > > should be no way that the copy doesn't have the same symmetry, even; > > factoring in ghost atoms, since both molecules have the same ghost; > > atoms.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/pull/299#issuecomment-191796461.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-191801305
https://github.com/psi4/psi4/pull/299#issuecomment-191806383:232,Security,access,access,232,"Ok the previous code somewhat makes sense if, for some reason, the PG wasn't copied on purpose, but I don't know why that wouldn't be. Conceptually, a copy is a copy. Hence the bug, I suppose. Segfaults probably come from trying to access the symmetry info (which are null pointers) based on what you thought the symmetry was, although I would hope there are checks for that",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-191806383
https://github.com/psi4/psi4/pull/299#issuecomment-191822729:220,Testability,test,test,220,"I left a code note above on perhaps why the `pg_` wasn't copied. But Ben's changes look like sensible ones to have always existed, and I think this is fundamental enough that if it broke something, it would show up in a test case. So if all the tests pass and we can replace the `new_mol = psi4.Molecule.create_molecule_from_string(mol.create_psi4_string_from_molecule())` in the driver with clones again, I'd say go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-191822729
https://github.com/psi4/psi4/pull/299#issuecomment-191822729:245,Testability,test,tests,245,"I left a code note above on perhaps why the `pg_` wasn't copied. But Ben's changes look like sensible ones to have always existed, and I think this is fundamental enough that if it broke something, it would show up in a test case. So if all the tests pass and we can replace the `new_mol = psi4.Molecule.create_molecule_from_string(mol.create_psi4_string_from_molecule())` in the driver with clones again, I'd say go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-191822729
https://github.com/psi4/psi4/pull/299#issuecomment-191828792:231,Deployability,update,update,231,"I just compiled this branch and it looks like the test that I have still doesn't work. I think I remember trying to flip this as well and eventually concluded that the issue was ""something weird"" because `update_geometry` _should_ update the symmetry information.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-191828792
https://github.com/psi4/psi4/pull/299#issuecomment-191828792:50,Testability,test,test,50,"I just compiled this branch and it looks like the test that I have still doesn't work. I think I remember trying to flip this as well and eventually concluded that the issue was ""something weird"" because `update_geometry` _should_ update the symmetry information.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-191828792
https://github.com/psi4/psi4/pull/299#issuecomment-191841132:157,Testability,test,test,157,"Looks like it is because `lock_frame_` is set to true. Try setting it to false right before the call to `update_geometry`. That also seems to make the small test work. Edit: it is set to whatever the rhs is set to, which would usually be true.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-191841132
https://github.com/psi4/psi4/pull/299#issuecomment-193477050:182,Deployability,update,update,182,"I did have a PR, but it didn't seem to work in you case. The alternate change (not in addition to my PR, but instead of it) was to force lock_frame_ to false just before the call to update geometry. I don't know if you attempted that yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-193477050
https://github.com/psi4/psi4/pull/299#issuecomment-193482535:51,Deployability,update,update,51,"It does work if you copy the PG directly like your update has done. Since this seems kosher and we have explained away the `update_geometry` issues I think everything is fine. So if you can replace those lines and run it through travis id say we have covered the primary issue. If it doesn't fix everything we can come back to it, but at least we can make some improvement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-193482535
https://github.com/psi4/psi4/pull/299#issuecomment-196887129:179,Availability,fault,fault,179,"Looks like this still doesn't quite work. We did not copy the point group originally because a molecule does not have a PG until `update_geometry` is called. This can cause a seg fault as is. Also, it appears we are missing some symmetry information. I think we are going to have to unlock the frame and allow for a full update to get this to work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-196887129
https://github.com/psi4/psi4/pull/299#issuecomment-196887129:321,Deployability,update,update,321,"Looks like this still doesn't quite work. We did not copy the point group originally because a molecule does not have a PG until `update_geometry` is called. This can cause a seg fault as is. Also, it appears we are missing some symmetry information. I think we are going to have to unlock the frame and allow for a full update to get this to work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-196887129
https://github.com/psi4/psi4/pull/299#issuecomment-196890030:27,Usability,simpl,simplest,27,"I agree. It's probably the simplest change that (might) work. Should this PR be closed then, and a new one opened?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-196890030
https://github.com/psi4/psi4/pull/299#issuecomment-196895842:135,Testability,test,tests,135,"You can always pop the previous commit with rebase and make a new change to molecule.cc. Would keep my changes to the python side that tests this. Up to you. Cheers,; Daniel Smith. > On Mar 15, 2016, at 11:48 AM, Ben Pritchard notifications@github.com wrote:; > ; > I agree. It's probably the simplest change that (might) work. Should this PR be closed then, and a new one opened?; > ; > —; > You are receiving this because you commented.; > Reply to this email directly or view it on GitHub:; > https://github.com/psi4/psi4/pull/299#issuecomment-196890030 https://github.com/psi4/psi4/pull/299#issuecomment-196890030",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-196895842
https://github.com/psi4/psi4/pull/299#issuecomment-196895842:293,Usability,simpl,simplest,293,"You can always pop the previous commit with rebase and make a new change to molecule.cc. Would keep my changes to the python side that tests this. Up to you. Cheers,; Daniel Smith. > On Mar 15, 2016, at 11:48 AM, Ben Pritchard notifications@github.com wrote:; > ; > I agree. It's probably the simplest change that (might) work. Should this PR be closed then, and a new one opened?; > ; > —; > You are receiving this because you commented.; > Reply to this email directly or view it on GitHub:; > https://github.com/psi4/psi4/pull/299#issuecomment-196890030 https://github.com/psi4/psi4/pull/299#issuecomment-196890030",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-196895842
https://github.com/psi4/psi4/pull/299#issuecomment-197417318:35,Testability,test,test,35,"@bennybp Ran this through the full test suite also, everything checks out. Ill merge it in when travis passes. Flare added because we can...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-197417318
https://github.com/psi4/psi4/issues/302#issuecomment-192282809:79,Energy Efficiency,adapt,adapt,79,"Hey,. Q1: The current code can only perturb along the specified axis. We could adapt it to handle rotations we'd just have to be careful with symmetry; it shouldn't be difficult. Q2: Any code that uses the `MintsHelper::so_potential` (not `MintsHelper::ao_potential`) will have the perturbation applied. I had tested this a few years ago for MP2 and CCSD. Might be a good idea to make sure there's a test included for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/302#issuecomment-192282809
https://github.com/psi4/psi4/issues/302#issuecomment-192282809:79,Modifiability,adapt,adapt,79,"Hey,. Q1: The current code can only perturb along the specified axis. We could adapt it to handle rotations we'd just have to be careful with symmetry; it shouldn't be difficult. Q2: Any code that uses the `MintsHelper::so_potential` (not `MintsHelper::ao_potential`) will have the perturbation applied. I had tested this a few years ago for MP2 and CCSD. Might be a good idea to make sure there's a test included for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/302#issuecomment-192282809
https://github.com/psi4/psi4/issues/302#issuecomment-192282809:310,Testability,test,tested,310,"Hey,. Q1: The current code can only perturb along the specified axis. We could adapt it to handle rotations we'd just have to be careful with symmetry; it shouldn't be difficult. Q2: Any code that uses the `MintsHelper::so_potential` (not `MintsHelper::ao_potential`) will have the perturbation applied. I had tested this a few years ago for MP2 and CCSD. Might be a good idea to make sure there's a test included for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/302#issuecomment-192282809
https://github.com/psi4/psi4/issues/302#issuecomment-192282809:400,Testability,test,test,400,"Hey,. Q1: The current code can only perturb along the specified axis. We could adapt it to handle rotations we'd just have to be careful with symmetry; it shouldn't be difficult. Q2: Any code that uses the `MintsHelper::so_potential` (not `MintsHelper::ao_potential`) will have the perturbation applied. I had tested this a few years ago for MP2 and CCSD. Might be a good idea to make sure there's a test included for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/302#issuecomment-192282809
https://github.com/psi4/psi4/pull/304#issuecomment-192756982:242,Availability,error,error,242,"Elsewhere, I've added builds of all the `--new-plugin plugname +template` templates, so we'll know if they ever break. . Here (https://github.com/psi4/psi4/pull/304/files#diff-960310e869df2437e6e4b4ad1fa11867R1799) is there any more specific error to catch, or is it one of those c-side psi-exceptions that can't be caught with specificity?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/304#issuecomment-192756982
https://github.com/psi4/psi4/pull/304#issuecomment-192756982:47,Modifiability,plugin,plugin,47,"Elsewhere, I've added builds of all the `--new-plugin plugname +template` templates, so we'll know if they ever break. . Here (https://github.com/psi4/psi4/pull/304/files#diff-960310e869df2437e6e4b4ad1fa11867R1799) is there any more specific error to catch, or is it one of those c-side psi-exceptions that can't be caught with specificity?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/304#issuecomment-192756982
https://github.com/psi4/psi4/issues/307#issuecomment-194417745:148,Availability,down,down,148,"@Konjkov could you show some of the output above the `PSIO_ERROR`? I am not sure that DF integrals is the culprit here. It would be easier to track down if I could see where in the second exited state it is failing. I ran the input you posted but I don't see the same PSIO_ERROR. It is strange that the first excited state would be able to run if the integrals were incompatible. Also, the file number 128 is a temporary file used by the CC codes to store things with a short lifetime. If the integrals were the source of the problem I would expect this kind of error to show up when trying to read some persistent quantity, which would then be used to compute the values that would go into file 128. . @kannon92 do you have an input that will cause the `PSIO_ERROR` if DF is used? The driver should probably soft-fail with a warning to turn DF off in these cases. It would be very frustrating for a job to run this far just to fail.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194417745
https://github.com/psi4/psi4/issues/307#issuecomment-194417745:562,Availability,error,error,562,"@Konjkov could you show some of the output above the `PSIO_ERROR`? I am not sure that DF integrals is the culprit here. It would be easier to track down if I could see where in the second exited state it is failing. I ran the input you posted but I don't see the same PSIO_ERROR. It is strange that the first excited state would be able to run if the integrals were incompatible. Also, the file number 128 is a temporary file used by the CC codes to store things with a short lifetime. If the integrals were the source of the problem I would expect this kind of error to show up when trying to read some persistent quantity, which would then be used to compute the values that would go into file 128. . @kannon92 do you have an input that will cause the `PSIO_ERROR` if DF is used? The driver should probably soft-fail with a warning to turn DF off in these cases. It would be very frustrating for a job to run this far just to fail.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194417745
https://github.com/psi4/psi4/issues/307#issuecomment-194423967:536,Availability,error,error,536,"I note that our EOM-CC3 test cases do not include one in which states of; different symmetries are obtained in the same job, so this seems likely to; be a genuine bug (though I could have sworn that we had such calculations; working initially). The EOM-CC3 algorithm we use computes one state at a; time, but the scratch quantities are likely to be different sizes for; different irreps. To get around this for now, I suggest simply running the two states in; separate jobs. -TDC. P.S. I removed the scf_type keyword and reproduced the error, so that's not; the problem. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Wed, Mar 9, 2016 at 12:40 PM, Andrew James notifications@github.com; wrote:. > @Konjkov https://github.com/Konjkov could you show some of the output; > above the PSIO_ERROR? I am not sure that DF integrals is the culprit; > here. It would be easier to track down if I could see where in the second; > exited state it is failing. I ran the input you posted but I don't see the; > same PSIO_ERROR.; > ; > It is strange that the first excited state would be able to run if the; > integrals were incompatible. Also, the file number 128 is a temporary file; > used by the CC codes to store things with a short lifetime. If the; > integrals were the source of the problem I would expect this kind of error; > to show up when trying to read some persistent quantity, which would then; > be used to compute the values that would go into file 128.; > ; > @kannon92 https://github.com/kannon92 do you have an input that will; > cause the PSIO_ERROR if DF is used? The driver should probably soft-fail; > with a warning to turn DF off in these cases. It would be very frustrating; > for a job to run this far just to fail.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/307#issuecomment-194417745.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194423967
https://github.com/psi4/psi4/issues/307#issuecomment-194423967:879,Availability,down,down,879,"I note that our EOM-CC3 test cases do not include one in which states of; different symmetries are obtained in the same job, so this seems likely to; be a genuine bug (though I could have sworn that we had such calculations; working initially). The EOM-CC3 algorithm we use computes one state at a; time, but the scratch quantities are likely to be different sizes for; different irreps. To get around this for now, I suggest simply running the two states in; separate jobs. -TDC. P.S. I removed the scf_type keyword and reproduced the error, so that's not; the problem. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Wed, Mar 9, 2016 at 12:40 PM, Andrew James notifications@github.com; wrote:. > @Konjkov https://github.com/Konjkov could you show some of the output; > above the PSIO_ERROR? I am not sure that DF integrals is the culprit; > here. It would be easier to track down if I could see where in the second; > exited state it is failing. I ran the input you posted but I don't see the; > same PSIO_ERROR.; > ; > It is strange that the first excited state would be able to run if the; > integrals were incompatible. Also, the file number 128 is a temporary file; > used by the CC codes to store things with a short lifetime. If the; > integrals were the source of the problem I would expect this kind of error; > to show up when trying to read some persistent quantity, which would then; > be used to compute the values that would go into file 128.; > ; > @kannon92 https://github.com/kannon92 do you have an input that will; > cause the PSIO_ERROR if DF is used? The driver should probably soft-fail; > with a warning to turn DF off in these cases. It would be very frustrating; > for a job to run this far just to fail.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/307#issuecomment-194417745.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194423967
https://github.com/psi4/psi4/issues/307#issuecomment-194423967:1315,Availability,error,error,1315,"I note that our EOM-CC3 test cases do not include one in which states of; different symmetries are obtained in the same job, so this seems likely to; be a genuine bug (though I could have sworn that we had such calculations; working initially). The EOM-CC3 algorithm we use computes one state at a; time, but the scratch quantities are likely to be different sizes for; different irreps. To get around this for now, I suggest simply running the two states in; separate jobs. -TDC. P.S. I removed the scf_type keyword and reproduced the error, so that's not; the problem. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Wed, Mar 9, 2016 at 12:40 PM, Andrew James notifications@github.com; wrote:. > @Konjkov https://github.com/Konjkov could you show some of the output; > above the PSIO_ERROR? I am not sure that DF integrals is the culprit; > here. It would be easier to track down if I could see where in the second; > exited state it is failing. I ran the input you posted but I don't see the; > same PSIO_ERROR.; > ; > It is strange that the first excited state would be able to run if the; > integrals were incompatible. Also, the file number 128 is a temporary file; > used by the CC codes to store things with a short lifetime. If the; > integrals were the source of the problem I would expect this kind of error; > to show up when trying to read some persistent quantity, which would then; > be used to compute the values that would go into file 128.; > ; > @kannon92 https://github.com/kannon92 do you have an input that will; > cause the PSIO_ERROR if DF is used? The driver should probably soft-fail; > with a warning to turn DF off in these cases. It would be very frustrating; > for a job to run this far just to fail.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/307#issuecomment-194417745.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194423967
https://github.com/psi4/psi4/issues/307#issuecomment-194423967:24,Testability,test,test,24,"I note that our EOM-CC3 test cases do not include one in which states of; different symmetries are obtained in the same job, so this seems likely to; be a genuine bug (though I could have sworn that we had such calculations; working initially). The EOM-CC3 algorithm we use computes one state at a; time, but the scratch quantities are likely to be different sizes for; different irreps. To get around this for now, I suggest simply running the two states in; separate jobs. -TDC. P.S. I removed the scf_type keyword and reproduced the error, so that's not; the problem. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Wed, Mar 9, 2016 at 12:40 PM, Andrew James notifications@github.com; wrote:. > @Konjkov https://github.com/Konjkov could you show some of the output; > above the PSIO_ERROR? I am not sure that DF integrals is the culprit; > here. It would be easier to track down if I could see where in the second; > exited state it is failing. I ran the input you posted but I don't see the; > same PSIO_ERROR.; > ; > It is strange that the first excited state would be able to run if the; > integrals were incompatible. Also, the file number 128 is a temporary file; > used by the CC codes to store things with a short lifetime. If the; > integrals were the source of the problem I would expect this kind of error; > to show up when trying to read some persistent quantity, which would then; > be used to compute the values that would go into file 128.; > ; > @kannon92 https://github.com/kannon92 do you have an input that will; > cause the PSIO_ERROR if DF is used? The driver should probably soft-fail; > with a warning to turn DF off in these cases. It would be very frustrating; > for a job to run this far just to fail.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/307#issuecomment-194417745.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194423967
https://github.com/psi4/psi4/issues/307#issuecomment-194423967:426,Usability,simpl,simply,426,"I note that our EOM-CC3 test cases do not include one in which states of; different symmetries are obtained in the same job, so this seems likely to; be a genuine bug (though I could have sworn that we had such calculations; working initially). The EOM-CC3 algorithm we use computes one state at a; time, but the scratch quantities are likely to be different sizes for; different irreps. To get around this for now, I suggest simply running the two states in; separate jobs. -TDC. P.S. I removed the scf_type keyword and reproduced the error, so that's not; the problem. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Wed, Mar 9, 2016 at 12:40 PM, Andrew James notifications@github.com; wrote:. > @Konjkov https://github.com/Konjkov could you show some of the output; > above the PSIO_ERROR? I am not sure that DF integrals is the culprit; > here. It would be easier to track down if I could see where in the second; > exited state it is failing. I ran the input you posted but I don't see the; > same PSIO_ERROR.; > ; > It is strange that the first excited state would be able to run if the; > integrals were incompatible. Also, the file number 128 is a temporary file; > used by the CC codes to store things with a short lifetime. If the; > integrals were the source of the problem I would expect this kind of error; > to show up when trying to read some persistent quantity, which would then; > be used to compute the values that would go into file 128.; > ; > @kannon92 https://github.com/kannon92 do you have an input that will; > cause the PSIO_ERROR if DF is used? The driver should probably soft-fail; > with a warning to turn DF off in these cases. It would be very frustrating; > for a job to run this far just to fail.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/307#issuecomment-194417745.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194423967
https://github.com/psi4/psi4/issues/307#issuecomment-194431083:22,Availability,error,errors,22,"@amjames, I get these errors when I am using my plugins. I usually don't get it when I am running psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194431083
https://github.com/psi4/psi4/issues/307#issuecomment-194431083:48,Modifiability,plugin,plugins,48,"@amjames, I get these errors when I am using my plugins. I usually don't get it when I am running psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194431083
https://github.com/psi4/psi4/issues/307#issuecomment-194435312:106,Availability,error,error,106,@kannon92 These issues are solved in the driver. Please let us know if you encounter a PSIO 33 or 35 file error in Psi4 proper.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194435312
https://github.com/psi4/psi4/issues/307#issuecomment-258625079:94,Testability,test,tests,94,Closing this since the original problem seems to be resolved. . #502 addresses that there are tests missing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-258625079
https://github.com/psi4/psi4/issues/308#issuecomment-194479817:58,Modifiability,plugin,plugin,58,"I'm troubled by your steps 1 & 2. The command `psi4 --new-plugin myplugin +mointegrals` (which can be executed anywhere in your filesystem– in or out of the psi4 repo clone doesn't matter) _creates_ a new directory `myplugin` already populated by various files, which you should be able to cd into and execute `make` within. Steps 1 & 2 shouldn't be necessary. They might be interfering b/c the name of the directory is bound up in the name of the plugin, which requirement the `--new-plugin` automatically satisfies. That is, once you're done with the experimentation stage, choose your name `myplugin` carefully, because it's a bother to switch out later. Or are you generating a plugin from the conda binary? That requires a little different procedure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194479817
https://github.com/psi4/psi4/issues/308#issuecomment-194479817:448,Modifiability,plugin,plugin,448,"I'm troubled by your steps 1 & 2. The command `psi4 --new-plugin myplugin +mointegrals` (which can be executed anywhere in your filesystem– in or out of the psi4 repo clone doesn't matter) _creates_ a new directory `myplugin` already populated by various files, which you should be able to cd into and execute `make` within. Steps 1 & 2 shouldn't be necessary. They might be interfering b/c the name of the directory is bound up in the name of the plugin, which requirement the `--new-plugin` automatically satisfies. That is, once you're done with the experimentation stage, choose your name `myplugin` carefully, because it's a bother to switch out later. Or are you generating a plugin from the conda binary? That requires a little different procedure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194479817
https://github.com/psi4/psi4/issues/308#issuecomment-194479817:485,Modifiability,plugin,plugin,485,"I'm troubled by your steps 1 & 2. The command `psi4 --new-plugin myplugin +mointegrals` (which can be executed anywhere in your filesystem– in or out of the psi4 repo clone doesn't matter) _creates_ a new directory `myplugin` already populated by various files, which you should be able to cd into and execute `make` within. Steps 1 & 2 shouldn't be necessary. They might be interfering b/c the name of the directory is bound up in the name of the plugin, which requirement the `--new-plugin` automatically satisfies. That is, once you're done with the experimentation stage, choose your name `myplugin` carefully, because it's a bother to switch out later. Or are you generating a plugin from the conda binary? That requires a little different procedure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194479817
https://github.com/psi4/psi4/issues/308#issuecomment-194479817:682,Modifiability,plugin,plugin,682,"I'm troubled by your steps 1 & 2. The command `psi4 --new-plugin myplugin +mointegrals` (which can be executed anywhere in your filesystem– in or out of the psi4 repo clone doesn't matter) _creates_ a new directory `myplugin` already populated by various files, which you should be able to cd into and execute `make` within. Steps 1 & 2 shouldn't be necessary. They might be interfering b/c the name of the directory is bound up in the name of the plugin, which requirement the `--new-plugin` automatically satisfies. That is, once you're done with the experimentation stage, choose your name `myplugin` carefully, because it's a bother to switch out later. Or are you generating a plugin from the conda binary? That requires a little different procedure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194479817
https://github.com/psi4/psi4/issues/308#issuecomment-194606794:49,Modifiability,plugin,plugin,49,"Thank you for answer. ; ""Or are you generating a plugin from the conda binary?"". I am unsure about that but I bet no. I get the plug-in from https://github.com/psi4/psi4/tree/master/plugins/mointegrals , my psi4 version is packaged in the official Ubuntu repository (in a .deb file).; The command `psi4 --new-plugin myplugin +mointegrals` created the new directory. This is the new directory where I tried the `make` command without success.; For clarity it is the complete steps please see this PasteBin link http://pastebin.com/qMSc8yq4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194606794
https://github.com/psi4/psi4/issues/308#issuecomment-194606794:128,Modifiability,plug-in,plug-in,128,"Thank you for answer. ; ""Or are you generating a plugin from the conda binary?"". I am unsure about that but I bet no. I get the plug-in from https://github.com/psi4/psi4/tree/master/plugins/mointegrals , my psi4 version is packaged in the official Ubuntu repository (in a .deb file).; The command `psi4 --new-plugin myplugin +mointegrals` created the new directory. This is the new directory where I tried the `make` command without success.; For clarity it is the complete steps please see this PasteBin link http://pastebin.com/qMSc8yq4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194606794
https://github.com/psi4/psi4/issues/308#issuecomment-194606794:182,Modifiability,plugin,plugins,182,"Thank you for answer. ; ""Or are you generating a plugin from the conda binary?"". I am unsure about that but I bet no. I get the plug-in from https://github.com/psi4/psi4/tree/master/plugins/mointegrals , my psi4 version is packaged in the official Ubuntu repository (in a .deb file).; The command `psi4 --new-plugin myplugin +mointegrals` created the new directory. This is the new directory where I tried the `make` command without success.; For clarity it is the complete steps please see this PasteBin link http://pastebin.com/qMSc8yq4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194606794
https://github.com/psi4/psi4/issues/308#issuecomment-194606794:309,Modifiability,plugin,plugin,309,"Thank you for answer. ; ""Or are you generating a plugin from the conda binary?"". I am unsure about that but I bet no. I get the plug-in from https://github.com/psi4/psi4/tree/master/plugins/mointegrals , my psi4 version is packaged in the official Ubuntu repository (in a .deb file).; The command `psi4 --new-plugin myplugin +mointegrals` created the new directory. This is the new directory where I tried the `make` command without success.; For clarity it is the complete steps please see this PasteBin link http://pastebin.com/qMSc8yq4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194606794
https://github.com/psi4/psi4/issues/308#issuecomment-194615624:633,Availability,error,error,633,"I see. Yes, you can forget the conda binary question. Interesting that you're using psi4 from the Ubuntu repository. I think you're the first report we've had of someone actually doing that. Unfortunately, it means you're using the beta5 version that's two years old and pre GnuMake --> CMake transition. And the plugin system I wouldn't expect to work from the Ubuntu repo. You see, the plugin Makefile relies on info about the build conditions and unless whoever packaged psi up for Ubuntu/Debian (not us) knew about that aspect and planned for it, that build condition info is not going to be in the distribution you've got. Your error involving ""MakeVars"" reflects this. I'd strongly recommend cloning from GitHub (you'll get a far newer version of the code), building psi4, and _then_ creating a new plugin. https://github.com/psi4/psi4/wiki/1_Obtaining#clone-from-public-github-repository. If you're not comfortable with compiling, there's another way that I know to work, but its a bit experimental.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194615624
https://github.com/psi4/psi4/issues/308#issuecomment-194615624:313,Modifiability,plugin,plugin,313,"I see. Yes, you can forget the conda binary question. Interesting that you're using psi4 from the Ubuntu repository. I think you're the first report we've had of someone actually doing that. Unfortunately, it means you're using the beta5 version that's two years old and pre GnuMake --> CMake transition. And the plugin system I wouldn't expect to work from the Ubuntu repo. You see, the plugin Makefile relies on info about the build conditions and unless whoever packaged psi up for Ubuntu/Debian (not us) knew about that aspect and planned for it, that build condition info is not going to be in the distribution you've got. Your error involving ""MakeVars"" reflects this. I'd strongly recommend cloning from GitHub (you'll get a far newer version of the code), building psi4, and _then_ creating a new plugin. https://github.com/psi4/psi4/wiki/1_Obtaining#clone-from-public-github-repository. If you're not comfortable with compiling, there's another way that I know to work, but its a bit experimental.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194615624
https://github.com/psi4/psi4/issues/308#issuecomment-194615624:388,Modifiability,plugin,plugin,388,"I see. Yes, you can forget the conda binary question. Interesting that you're using psi4 from the Ubuntu repository. I think you're the first report we've had of someone actually doing that. Unfortunately, it means you're using the beta5 version that's two years old and pre GnuMake --> CMake transition. And the plugin system I wouldn't expect to work from the Ubuntu repo. You see, the plugin Makefile relies on info about the build conditions and unless whoever packaged psi up for Ubuntu/Debian (not us) knew about that aspect and planned for it, that build condition info is not going to be in the distribution you've got. Your error involving ""MakeVars"" reflects this. I'd strongly recommend cloning from GitHub (you'll get a far newer version of the code), building psi4, and _then_ creating a new plugin. https://github.com/psi4/psi4/wiki/1_Obtaining#clone-from-public-github-repository. If you're not comfortable with compiling, there's another way that I know to work, but its a bit experimental.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194615624
https://github.com/psi4/psi4/issues/308#issuecomment-194615624:805,Modifiability,plugin,plugin,805,"I see. Yes, you can forget the conda binary question. Interesting that you're using psi4 from the Ubuntu repository. I think you're the first report we've had of someone actually doing that. Unfortunately, it means you're using the beta5 version that's two years old and pre GnuMake --> CMake transition. And the plugin system I wouldn't expect to work from the Ubuntu repo. You see, the plugin Makefile relies on info about the build conditions and unless whoever packaged psi up for Ubuntu/Debian (not us) knew about that aspect and planned for it, that build condition info is not going to be in the distribution you've got. Your error involving ""MakeVars"" reflects this. I'd strongly recommend cloning from GitHub (you'll get a far newer version of the code), building psi4, and _then_ creating a new plugin. https://github.com/psi4/psi4/wiki/1_Obtaining#clone-from-public-github-repository. If you're not comfortable with compiling, there's another way that I know to work, but its a bit experimental.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194615624
https://github.com/psi4/psi4/issues/308#issuecomment-194954608:1275,Availability,error,error,1275,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608
https://github.com/psi4/psi4/issues/308#issuecomment-194954608:1462,Availability,Error,Error,1462,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608
https://github.com/psi4/psi4/issues/308#issuecomment-194954608:31,Deployability,install,install,31,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608
https://github.com/psi4/psi4/issues/308#issuecomment-194954608:112,Energy Efficiency,Power,Power,112,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608
https://github.com/psi4/psi4/issues/308#issuecomment-194954608:767,Integrability,interface,interfaces,767,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608
https://github.com/psi4/psi4/issues/308#issuecomment-194954608:130,Modifiability,plugin,pluginintegrales,130,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608
https://github.com/psi4/psi4/issues/308#issuecomment-194954608:1116,Modifiability,plugin,pluginintegrales,1116,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608
https://github.com/psi4/psi4/issues/308#issuecomment-194954608:1137,Modifiability,plugin,pluginintegrales,1137,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608
https://github.com/psi4/psi4/issues/308#issuecomment-194954608:1195,Modifiability,plugin,pluginintegrales,1195,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608
https://github.com/psi4/psi4/issues/308#issuecomment-194954608:1213,Modifiability,plugin,pluginintegrales,1213,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608
https://github.com/psi4/psi4/issues/308#issuecomment-194954608:1248,Modifiability,plugin,pluginintegrales,1248,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608
https://github.com/psi4/psi4/issues/308#issuecomment-194954608:1442,Modifiability,plugin,pluginintegrales,1442,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608
https://github.com/psi4/psi4/issues/308#issuecomment-194993406:101,Availability,error,error,101,"Ah, we recently changed some Psi4 infrastructure and there is no longer a global wavefunction as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406
https://github.com/psi4/psi4/issues/308#issuecomment-194993406:1763,Availability,error,error,1763,"ion as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/308#issuecomment-194954608.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406
https://github.com/psi4/psi4/issues/308#issuecomment-194993406:1957,Availability,Error,Error,1957,"ion as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/308#issuecomment-194954608.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406
https://github.com/psi4/psi4/issues/308#issuecomment-194993406:363,Deployability,update,update,363,"Ah, we recently changed some Psi4 infrastructure and there is no longer a global wavefunction as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406
https://github.com/psi4/psi4/issues/308#issuecomment-194993406:510,Deployability,install,install,510,"Ah, we recently changed some Psi4 infrastructure and there is no longer a global wavefunction as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406
https://github.com/psi4/psi4/issues/308#issuecomment-194993406:594,Energy Efficiency,Power,Power,594,"Ah, we recently changed some Psi4 infrastructure and there is no longer a global wavefunction as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406
https://github.com/psi4/psi4/issues/308#issuecomment-194993406:1251,Integrability,interface,interfaces,1251,"Ah, we recently changed some Psi4 infrastructure and there is no longer a global wavefunction as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406
https://github.com/psi4/psi4/issues/308#issuecomment-194993406:239,Modifiability,plugin,plugin,239,"Ah, we recently changed some Psi4 infrastructure and there is no longer a global wavefunction as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406
https://github.com/psi4/psi4/issues/308#issuecomment-194993406:612,Modifiability,plugin,pluginintegrales,612,"Ah, we recently changed some Psi4 infrastructure and there is no longer a global wavefunction as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406
https://github.com/psi4/psi4/issues/308#issuecomment-194993406:1600,Modifiability,plugin,pluginintegrales,1600,"ion as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/308#issuecomment-194954608.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406
https://github.com/psi4/psi4/issues/308#issuecomment-194993406:1623,Modifiability,plugin,pluginintegrales,1623,"ion as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/308#issuecomment-194954608.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406
https://github.com/psi4/psi4/issues/308#issuecomment-194993406:1681,Modifiability,plugin,pluginintegrales,1681,"ion as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/308#issuecomment-194954608.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406
https://github.com/psi4/psi4/issues/308#issuecomment-194993406:1699,Modifiability,plugin,pluginintegrales,1699,"ion as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/308#issuecomment-194954608.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406
https://github.com/psi4/psi4/issues/308#issuecomment-194993406:1736,Modifiability,plugin,pluginintegrales,1736,"ion as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/308#issuecomment-194954608.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406
https://github.com/psi4/psi4/issues/308#issuecomment-194993406:1937,Modifiability,plugin,pluginintegrales,1937,"ion as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/308#issuecomment-194954608.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406
https://github.com/psi4/psi4/issues/308#issuecomment-195050556:58,Modifiability,plugin,plugins,58,"Thank you dgasmith. I've just seen that loriab fixed some plugins including the one I need (https://github.com/loriab/psi4/commit/1b6328cdae9895ca1cabfb31656710fa8f00e30c), so thank you very much again loriab. I will try this new version soon, when I have access to my office PC. Cheers,. Hernán",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195050556
https://github.com/psi4/psi4/issues/308#issuecomment-195050556:256,Security,access,access,256,"Thank you dgasmith. I've just seen that loriab fixed some plugins including the one I need (https://github.com/loriab/psi4/commit/1b6328cdae9895ca1cabfb31656710fa8f00e30c), so thank you very much again loriab. I will try this new version soon, when I have access to my office PC. Cheers,. Hernán",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195050556
https://github.com/psi4/psi4/issues/308#issuecomment-195054956:128,Availability,error,error,128,"Yes, sorry, we've been doing a lot of infrastructure changes lately related to that `Wavefunction` object you saw in the `make` error message, and that mointegrals plugin template had escaped updating. I don't know how familiar you are with GitHub, so I'll warn you that that commit with the fixes is in a pull request to my forked repository. Right now tests are running to check if that commit is safe to merge into this main repository. The only impact that this has on you is that `git pull`ing _this_ repository won't get that new commit at this moment. So if you want to try it out on your plugin before the commit gets merged, just edit the file by hand according to the pattern you see in the commit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195054956
https://github.com/psi4/psi4/issues/308#issuecomment-195054956:134,Integrability,message,message,134,"Yes, sorry, we've been doing a lot of infrastructure changes lately related to that `Wavefunction` object you saw in the `make` error message, and that mointegrals plugin template had escaped updating. I don't know how familiar you are with GitHub, so I'll warn you that that commit with the fixes is in a pull request to my forked repository. Right now tests are running to check if that commit is safe to merge into this main repository. The only impact that this has on you is that `git pull`ing _this_ repository won't get that new commit at this moment. So if you want to try it out on your plugin before the commit gets merged, just edit the file by hand according to the pattern you see in the commit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195054956
https://github.com/psi4/psi4/issues/308#issuecomment-195054956:164,Modifiability,plugin,plugin,164,"Yes, sorry, we've been doing a lot of infrastructure changes lately related to that `Wavefunction` object you saw in the `make` error message, and that mointegrals plugin template had escaped updating. I don't know how familiar you are with GitHub, so I'll warn you that that commit with the fixes is in a pull request to my forked repository. Right now tests are running to check if that commit is safe to merge into this main repository. The only impact that this has on you is that `git pull`ing _this_ repository won't get that new commit at this moment. So if you want to try it out on your plugin before the commit gets merged, just edit the file by hand according to the pattern you see in the commit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195054956
https://github.com/psi4/psi4/issues/308#issuecomment-195054956:596,Modifiability,plugin,plugin,596,"Yes, sorry, we've been doing a lot of infrastructure changes lately related to that `Wavefunction` object you saw in the `make` error message, and that mointegrals plugin template had escaped updating. I don't know how familiar you are with GitHub, so I'll warn you that that commit with the fixes is in a pull request to my forked repository. Right now tests are running to check if that commit is safe to merge into this main repository. The only impact that this has on you is that `git pull`ing _this_ repository won't get that new commit at this moment. So if you want to try it out on your plugin before the commit gets merged, just edit the file by hand according to the pattern you see in the commit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195054956
https://github.com/psi4/psi4/issues/308#issuecomment-195054956:399,Safety,safe,safe,399,"Yes, sorry, we've been doing a lot of infrastructure changes lately related to that `Wavefunction` object you saw in the `make` error message, and that mointegrals plugin template had escaped updating. I don't know how familiar you are with GitHub, so I'll warn you that that commit with the fixes is in a pull request to my forked repository. Right now tests are running to check if that commit is safe to merge into this main repository. The only impact that this has on you is that `git pull`ing _this_ repository won't get that new commit at this moment. So if you want to try it out on your plugin before the commit gets merged, just edit the file by hand according to the pattern you see in the commit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195054956
https://github.com/psi4/psi4/issues/308#issuecomment-195054956:354,Testability,test,tests,354,"Yes, sorry, we've been doing a lot of infrastructure changes lately related to that `Wavefunction` object you saw in the `make` error message, and that mointegrals plugin template had escaped updating. I don't know how familiar you are with GitHub, so I'll warn you that that commit with the fixes is in a pull request to my forked repository. Right now tests are running to check if that commit is safe to merge into this main repository. The only impact that this has on you is that `git pull`ing _this_ repository won't get that new commit at this moment. So if you want to try it out on your plugin before the commit gets merged, just edit the file by hand according to the pattern you see in the commit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195054956
https://github.com/psi4/psi4/issues/308#issuecomment-195784330:70,Modifiability,plug-in,plug-in,70,"Hello. Thank you for explain me. I still have some problems with this plug-in, it seems like I am doing something wrong or the plugin does not work yet. I make a complete pastebin to make it simpler to analyze: http://pastebin.com/4EAjU7CC. Cheers,. Hernán",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195784330
https://github.com/psi4/psi4/issues/308#issuecomment-195784330:127,Modifiability,plugin,plugin,127,"Hello. Thank you for explain me. I still have some problems with this plug-in, it seems like I am doing something wrong or the plugin does not work yet. I make a complete pastebin to make it simpler to analyze: http://pastebin.com/4EAjU7CC. Cheers,. Hernán",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195784330
https://github.com/psi4/psi4/issues/308#issuecomment-195784330:191,Usability,simpl,simpler,191,"Hello. Thank you for explain me. I still have some problems with this plug-in, it seems like I am doing something wrong or the plugin does not work yet. I make a complete pastebin to make it simpler to analyze: http://pastebin.com/4EAjU7CC. Cheers,. Hernán",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195784330
https://github.com/psi4/psi4/issues/308#issuecomment-195795181:176,Availability,error,error,176,"I don't think you've pulled from github since the plugin fix was added. As long as your `printmo.cc` has `Process::environment.wavefunction();` in it, you'll keep getting this error. This (https://github.com/psi4/psi4/blob/master/share/plugin/mointegrals.cc.template) is the corrected template.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195795181
https://github.com/psi4/psi4/issues/308#issuecomment-195795181:50,Modifiability,plugin,plugin,50,"I don't think you've pulled from github since the plugin fix was added. As long as your `printmo.cc` has `Process::environment.wavefunction();` in it, you'll keep getting this error. This (https://github.com/psi4/psi4/blob/master/share/plugin/mointegrals.cc.template) is the corrected template.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195795181
https://github.com/psi4/psi4/issues/308#issuecomment-195795181:236,Modifiability,plugin,plugin,236,"I don't think you've pulled from github since the plugin fix was added. As long as your `printmo.cc` has `Process::environment.wavefunction();` in it, you'll keep getting this error. This (https://github.com/psi4/psi4/blob/master/share/plugin/mointegrals.cc.template) is the corrected template.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195795181
https://github.com/psi4/psi4/issues/308#issuecomment-195957592:440,Availability,error,error,440,"Thank you again loriab. Finally it was possible to me compile the plugin . I had some issues. After your last comment I get insecure about if I used the corrected code previously (before I tried from the link (https://github.com/loriab/psi4/commit/1b6328cdae9895ca1cabfb31656710fa8f00e30c), so I used the link you shared in the last message. I clean the directory and started again with the new code. The `make` command gave again the same error message. `grep` does not return matches in the original `.cc` file so I inspected the automatically generated `.cc` file. I noticed some differences (many of them seems to be intentionally changed) but not all of them. In essence, by comparing with the file you edited, I replaced in the new `.cc` file `wfn` with `ref_wfn`few times and add `SharedWavefunction ref_wfn` as the first argument of the function `printmo` (the name of my plugin). The final result is: http://pastebin.com/bX9jDxi5 .; I do not know if the above is because a bug of the generator of files for the plugin or just me, as I found very extraneous the changes between files, but inspecting the files I really do not find in the original `cc` file what appeared in the generated one, and I cleaned everything to avoid versions problems . The original is: http://pastebin.com/Yb4pLq6j .; Excuse because of the long message but I tried to put my grain of sand. Now I'll try the plugin :-) , thank you very much again",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195957592
https://github.com/psi4/psi4/issues/308#issuecomment-195957592:333,Integrability,message,message,333,"Thank you again loriab. Finally it was possible to me compile the plugin . I had some issues. After your last comment I get insecure about if I used the corrected code previously (before I tried from the link (https://github.com/loriab/psi4/commit/1b6328cdae9895ca1cabfb31656710fa8f00e30c), so I used the link you shared in the last message. I clean the directory and started again with the new code. The `make` command gave again the same error message. `grep` does not return matches in the original `.cc` file so I inspected the automatically generated `.cc` file. I noticed some differences (many of them seems to be intentionally changed) but not all of them. In essence, by comparing with the file you edited, I replaced in the new `.cc` file `wfn` with `ref_wfn`few times and add `SharedWavefunction ref_wfn` as the first argument of the function `printmo` (the name of my plugin). The final result is: http://pastebin.com/bX9jDxi5 .; I do not know if the above is because a bug of the generator of files for the plugin or just me, as I found very extraneous the changes between files, but inspecting the files I really do not find in the original `cc` file what appeared in the generated one, and I cleaned everything to avoid versions problems . The original is: http://pastebin.com/Yb4pLq6j .; Excuse because of the long message but I tried to put my grain of sand. Now I'll try the plugin :-) , thank you very much again",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195957592
https://github.com/psi4/psi4/issues/308#issuecomment-195957592:446,Integrability,message,message,446,"Thank you again loriab. Finally it was possible to me compile the plugin . I had some issues. After your last comment I get insecure about if I used the corrected code previously (before I tried from the link (https://github.com/loriab/psi4/commit/1b6328cdae9895ca1cabfb31656710fa8f00e30c), so I used the link you shared in the last message. I clean the directory and started again with the new code. The `make` command gave again the same error message. `grep` does not return matches in the original `.cc` file so I inspected the automatically generated `.cc` file. I noticed some differences (many of them seems to be intentionally changed) but not all of them. In essence, by comparing with the file you edited, I replaced in the new `.cc` file `wfn` with `ref_wfn`few times and add `SharedWavefunction ref_wfn` as the first argument of the function `printmo` (the name of my plugin). The final result is: http://pastebin.com/bX9jDxi5 .; I do not know if the above is because a bug of the generator of files for the plugin or just me, as I found very extraneous the changes between files, but inspecting the files I really do not find in the original `cc` file what appeared in the generated one, and I cleaned everything to avoid versions problems . The original is: http://pastebin.com/Yb4pLq6j .; Excuse because of the long message but I tried to put my grain of sand. Now I'll try the plugin :-) , thank you very much again",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195957592
https://github.com/psi4/psi4/issues/308#issuecomment-195957592:1331,Integrability,message,message,1331,"Thank you again loriab. Finally it was possible to me compile the plugin . I had some issues. After your last comment I get insecure about if I used the corrected code previously (before I tried from the link (https://github.com/loriab/psi4/commit/1b6328cdae9895ca1cabfb31656710fa8f00e30c), so I used the link you shared in the last message. I clean the directory and started again with the new code. The `make` command gave again the same error message. `grep` does not return matches in the original `.cc` file so I inspected the automatically generated `.cc` file. I noticed some differences (many of them seems to be intentionally changed) but not all of them. In essence, by comparing with the file you edited, I replaced in the new `.cc` file `wfn` with `ref_wfn`few times and add `SharedWavefunction ref_wfn` as the first argument of the function `printmo` (the name of my plugin). The final result is: http://pastebin.com/bX9jDxi5 .; I do not know if the above is because a bug of the generator of files for the plugin or just me, as I found very extraneous the changes between files, but inspecting the files I really do not find in the original `cc` file what appeared in the generated one, and I cleaned everything to avoid versions problems . The original is: http://pastebin.com/Yb4pLq6j .; Excuse because of the long message but I tried to put my grain of sand. Now I'll try the plugin :-) , thank you very much again",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195957592
https://github.com/psi4/psi4/issues/308#issuecomment-195957592:66,Modifiability,plugin,plugin,66,"Thank you again loriab. Finally it was possible to me compile the plugin . I had some issues. After your last comment I get insecure about if I used the corrected code previously (before I tried from the link (https://github.com/loriab/psi4/commit/1b6328cdae9895ca1cabfb31656710fa8f00e30c), so I used the link you shared in the last message. I clean the directory and started again with the new code. The `make` command gave again the same error message. `grep` does not return matches in the original `.cc` file so I inspected the automatically generated `.cc` file. I noticed some differences (many of them seems to be intentionally changed) but not all of them. In essence, by comparing with the file you edited, I replaced in the new `.cc` file `wfn` with `ref_wfn`few times and add `SharedWavefunction ref_wfn` as the first argument of the function `printmo` (the name of my plugin). The final result is: http://pastebin.com/bX9jDxi5 .; I do not know if the above is because a bug of the generator of files for the plugin or just me, as I found very extraneous the changes between files, but inspecting the files I really do not find in the original `cc` file what appeared in the generated one, and I cleaned everything to avoid versions problems . The original is: http://pastebin.com/Yb4pLq6j .; Excuse because of the long message but I tried to put my grain of sand. Now I'll try the plugin :-) , thank you very much again",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195957592
https://github.com/psi4/psi4/issues/308#issuecomment-195957592:880,Modifiability,plugin,plugin,880,"Thank you again loriab. Finally it was possible to me compile the plugin . I had some issues. After your last comment I get insecure about if I used the corrected code previously (before I tried from the link (https://github.com/loriab/psi4/commit/1b6328cdae9895ca1cabfb31656710fa8f00e30c), so I used the link you shared in the last message. I clean the directory and started again with the new code. The `make` command gave again the same error message. `grep` does not return matches in the original `.cc` file so I inspected the automatically generated `.cc` file. I noticed some differences (many of them seems to be intentionally changed) but not all of them. In essence, by comparing with the file you edited, I replaced in the new `.cc` file `wfn` with `ref_wfn`few times and add `SharedWavefunction ref_wfn` as the first argument of the function `printmo` (the name of my plugin). The final result is: http://pastebin.com/bX9jDxi5 .; I do not know if the above is because a bug of the generator of files for the plugin or just me, as I found very extraneous the changes between files, but inspecting the files I really do not find in the original `cc` file what appeared in the generated one, and I cleaned everything to avoid versions problems . The original is: http://pastebin.com/Yb4pLq6j .; Excuse because of the long message but I tried to put my grain of sand. Now I'll try the plugin :-) , thank you very much again",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195957592
https://github.com/psi4/psi4/issues/308#issuecomment-195957592:1020,Modifiability,plugin,plugin,1020,"Thank you again loriab. Finally it was possible to me compile the plugin . I had some issues. After your last comment I get insecure about if I used the corrected code previously (before I tried from the link (https://github.com/loriab/psi4/commit/1b6328cdae9895ca1cabfb31656710fa8f00e30c), so I used the link you shared in the last message. I clean the directory and started again with the new code. The `make` command gave again the same error message. `grep` does not return matches in the original `.cc` file so I inspected the automatically generated `.cc` file. I noticed some differences (many of them seems to be intentionally changed) but not all of them. In essence, by comparing with the file you edited, I replaced in the new `.cc` file `wfn` with `ref_wfn`few times and add `SharedWavefunction ref_wfn` as the first argument of the function `printmo` (the name of my plugin). The final result is: http://pastebin.com/bX9jDxi5 .; I do not know if the above is because a bug of the generator of files for the plugin or just me, as I found very extraneous the changes between files, but inspecting the files I really do not find in the original `cc` file what appeared in the generated one, and I cleaned everything to avoid versions problems . The original is: http://pastebin.com/Yb4pLq6j .; Excuse because of the long message but I tried to put my grain of sand. Now I'll try the plugin :-) , thank you very much again",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195957592
https://github.com/psi4/psi4/issues/308#issuecomment-195957592:1393,Modifiability,plugin,plugin,1393,"Thank you again loriab. Finally it was possible to me compile the plugin . I had some issues. After your last comment I get insecure about if I used the corrected code previously (before I tried from the link (https://github.com/loriab/psi4/commit/1b6328cdae9895ca1cabfb31656710fa8f00e30c), so I used the link you shared in the last message. I clean the directory and started again with the new code. The `make` command gave again the same error message. `grep` does not return matches in the original `.cc` file so I inspected the automatically generated `.cc` file. I noticed some differences (many of them seems to be intentionally changed) but not all of them. In essence, by comparing with the file you edited, I replaced in the new `.cc` file `wfn` with `ref_wfn`few times and add `SharedWavefunction ref_wfn` as the first argument of the function `printmo` (the name of my plugin). The final result is: http://pastebin.com/bX9jDxi5 .; I do not know if the above is because a bug of the generator of files for the plugin or just me, as I found very extraneous the changes between files, but inspecting the files I really do not find in the original `cc` file what appeared in the generated one, and I cleaned everything to avoid versions problems . The original is: http://pastebin.com/Yb4pLq6j .; Excuse because of the long message but I tried to put my grain of sand. Now I'll try the plugin :-) , thank you very much again",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195957592
https://github.com/psi4/psi4/issues/308#issuecomment-195957592:1229,Safety,avoid,avoid,1229,"Thank you again loriab. Finally it was possible to me compile the plugin . I had some issues. After your last comment I get insecure about if I used the corrected code previously (before I tried from the link (https://github.com/loriab/psi4/commit/1b6328cdae9895ca1cabfb31656710fa8f00e30c), so I used the link you shared in the last message. I clean the directory and started again with the new code. The `make` command gave again the same error message. `grep` does not return matches in the original `.cc` file so I inspected the automatically generated `.cc` file. I noticed some differences (many of them seems to be intentionally changed) but not all of them. In essence, by comparing with the file you edited, I replaced in the new `.cc` file `wfn` with `ref_wfn`few times and add `SharedWavefunction ref_wfn` as the first argument of the function `printmo` (the name of my plugin). The final result is: http://pastebin.com/bX9jDxi5 .; I do not know if the above is because a bug of the generator of files for the plugin or just me, as I found very extraneous the changes between files, but inspecting the files I really do not find in the original `cc` file what appeared in the generated one, and I cleaned everything to avoid versions problems . The original is: http://pastebin.com/Yb4pLq6j .; Excuse because of the long message but I tried to put my grain of sand. Now I'll try the plugin :-) , thank you very much again",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195957592
https://github.com/psi4/psi4/issues/308#issuecomment-196390208:8,Modifiability,plugin,plugin,8,"All the plugin templates are working now (I tried them myself last week). I think those last issues you had were from lingering files or mixing plugins/mointegrals/ with share/plugins/mointegrals.cc_template . If you have more code concerns repost here or for general questions, please try the forum (http://forum.psicode.org/)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-196390208
https://github.com/psi4/psi4/issues/308#issuecomment-196390208:144,Modifiability,plugin,plugins,144,"All the plugin templates are working now (I tried them myself last week). I think those last issues you had were from lingering files or mixing plugins/mointegrals/ with share/plugins/mointegrals.cc_template . If you have more code concerns repost here or for general questions, please try the forum (http://forum.psicode.org/)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-196390208
https://github.com/psi4/psi4/issues/308#issuecomment-196390208:176,Modifiability,plugin,plugins,176,"All the plugin templates are working now (I tried them myself last week). I think those last issues you had were from lingering files or mixing plugins/mointegrals/ with share/plugins/mointegrals.cc_template . If you have more code concerns repost here or for general questions, please try the forum (http://forum.psicode.org/)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-196390208
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:2136,Energy Efficiency,Energy,Energy,2136,"> ; > # the gradient that any fully optimized molecule should match, more or less; > ; > zerograd = psi4.Matrix(5,3); > refgrad = [; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0]]; > zerograd.set(refgrad); > ; > # this is the first system, a fluoromethane that looks pretty good to the eye; > ; > # zmat version, normz; > ; > molecule normz {; > C; > H 1 1.2; > H 1 1.2 2 104; > H 1 1.2 2 105 3 120; > F 1 1.3 2 106 4 121; > }; > ; > # reference start NRE, E, G; > ; > norm_nre_start = 37.6824945882 # Q-Chem; > norm_e_start = -139.5307182946 # Q-Chem; > norm_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; > [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; > [ -0.06715450, 0.05113530, -0.00508959, -0.00643364, 0.02754243]]; > norm_g_start.set(zip(*contents)); > norm_rmsg_start = 0.041309 # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 -0.04900557 -0.00240633 0.05677652 -0.03006882 0.02470420; > ; > # 2 0.07990533 0.00642920 0.00348020 -0.04874047 -0.04107426; > ; > # 3 -0.06715450 0.05113530 -0.00508959 -0.00643364 0.02754243; > ; > # reference optimized NRE, E (G should be 0); > ; > nre_opt = 37.5276022922 # Q-Chem; > e_opt = -139.5573922 # Q-Chem; > #norm_g_opt # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; > ; > # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; > ; > # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003; > ; > def test_norm_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); > compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); > compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); > compa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:2567,Energy Efficiency,Energy,Energy,2567,"H 1 1.2 2 104; > H 1 1.2 2 105 3 120; > F 1 1.3 2 106 4 121; > }; > ; > # reference start NRE, E, G; > ; > norm_nre_start = 37.6824945882 # Q-Chem; > norm_e_start = -139.5307182946 # Q-Chem; > norm_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; > [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; > [ -0.06715450, 0.05113530, -0.00508959, -0.00643364, 0.02754243]]; > norm_g_start.set(zip(*contents)); > norm_rmsg_start = 0.041309 # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 -0.04900557 -0.00240633 0.05677652 -0.03006882 0.02470420; > ; > # 2 0.07990533 0.00642920 0.00348020 -0.04874047 -0.04107426; > ; > # 3 -0.06715450 0.05113530 -0.00508959 -0.00643364 0.02754243; > ; > # reference optimized NRE, E (G should be 0); > ; > nre_opt = 37.5276022922 # Q-Chem; > e_opt = -139.5573922 # Q-Chem; > #norm_g_opt # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; > ; > # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; > ; > # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003; > ; > def test_norm_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); > compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); > compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(norm_g_start, g0, 3, 'start grad'); > ; > def test_zero_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); > compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); > compare_matrices(zerograd, g, 3, 'opt ZERO grad'); > ; > def test_odd_start(mol):; > g0 = grad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:3015,Energy Efficiency,ENERGY,ENERGY,3015,"0643364, 0.02754243]]; > norm_g_start.set(zip(*contents)); > norm_rmsg_start = 0.041309 # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 -0.04900557 -0.00240633 0.05677652 -0.03006882 0.02470420; > ; > # 2 0.07990533 0.00642920 0.00348020 -0.04874047 -0.04107426; > ; > # 3 -0.06715450 0.05113530 -0.00508959 -0.00643364 0.02754243; > ; > # reference optimized NRE, E (G should be 0); > ; > nre_opt = 37.5276022922 # Q-Chem; > e_opt = -139.5573922 # Q-Chem; > #norm_g_opt # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; > ; > # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; > ; > # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003; > ; > def test_norm_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); > compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); > compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(norm_g_start, g0, 3, 'start grad'); > ; > def test_zero_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); > compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); > compare_matrices(zerograd, g, 3, 'opt ZERO grad'); > ; > def test_odd_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); > compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); > compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(odd_g_start, g0, 3, 'start grad'); > ; > def test_badodd_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(odd_nre_op",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:3412,Energy Efficiency,ENERGY,ENERGY,3412," # Q-Chem; > e_opt = -139.5573922 # Q-Chem; > #norm_g_opt # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; > ; > # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; > ; > # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003; > ; > def test_norm_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); > compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); > compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(norm_g_start, g0, 3, 'start grad'); > ; > def test_zero_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); > compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); > compare_matrices(zerograd, g, 3, 'opt ZERO grad'); > ; > def test_odd_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); > compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); > compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(odd_g_start, g0, 3, 'start grad'); > ; > def test_badodd_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); > compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); > compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'); > ; > test_norm_start(normz); > test_zero_grad(normz); > ; > # And behold, the initial gradient matches Q-Chem, the optimization; > ; > # progresses nicely, the RMS Force column goes to zero, and the gradient; > ; > # at the end is zero.; > ; > # start nre....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:3693,Energy Efficiency,ENERGY,ENERGY,3693,"> # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; > ; > # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003; > ; > def test_norm_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); > compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); > compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(norm_g_start, g0, 3, 'start grad'); > ; > def test_zero_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); > compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); > compare_matrices(zerograd, g, 3, 'opt ZERO grad'); > ; > def test_odd_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); > compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); > compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(odd_g_start, g0, 3, 'start grad'); > ; > def test_badodd_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); > compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); > compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'); > ; > test_norm_start(normz); > test_zero_grad(normz); > ; > # And behold, the initial gradient matches Q-Chem, the optimization; > ; > # progresses nicely, the RMS Force column goes to zero, and the gradient; > ; > # at the end is zero.; > ; > # start nre.........................................................PASSED; > ; > # start ene.........................................................PASSED; > ; > # start rms grad...................................................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:4105,Energy Efficiency,ENERGY,ENERGY,4105,", 'start rms grad'); > compare_matrices(norm_g_start, g0, 3, 'start grad'); > ; > def test_zero_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); > compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); > compare_matrices(zerograd, g, 3, 'opt ZERO grad'); > ; > def test_odd_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); > compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); > compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(odd_g_start, g0, 3, 'start grad'); > ; > def test_badodd_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); > compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); > compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'); > ; > test_norm_start(normz); > test_zero_grad(normz); > ; > # And behold, the initial gradient matches Q-Chem, the optimization; > ; > # progresses nicely, the RMS Force column goes to zero, and the gradient; > ; > # at the end is zero.; > ; > # start nre.........................................................PASSED; > ; > # start ene.........................................................PASSED; > ; > # start rms grad....................................................PASSED; > ; > # start grad........................................................PASSED; > ; > #Optimizer: Optimization complete!; > ; > # opt nre...........................................................PASSED; > ; > # opt ene...........................................................PASSED; > ; > # opt ZERO grad.....................................................PASSED; > ; > # -------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:5197,Energy Efficiency,Energy,Energy,5197,"rt(normz); > test_zero_grad(normz); > ; > # And behold, the initial gradient matches Q-Chem, the optimization; > ; > # progresses nicely, the RMS Force column goes to zero, and the gradient; > ; > # at the end is zero.; > ; > # start nre.........................................................PASSED; > ; > # start ene.........................................................PASSED; > ; > # start rms grad....................................................PASSED; > ; > # start grad........................................................PASSED; > ; > #Optimizer: Optimization complete!; > ; > # opt nre...........................................................PASSED; > ; > # opt ene...........................................................PASSED; > ; > # opt ZERO grad.....................................................PASSED; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # 1 -139.530718293045 -139.530718293045 0.05695995 0.03625240 0.19767161 0.12159384 ~; > ; > # 2 -139.555614729326 -0.024896436281 0.02341593 0.00968824 0.06857406 0.03977721 ~; > ; > # 3 -139.556998324542 -0.001383595215 0.00950087 0.00516674 0.02878292 0.01662559 ~; > ; > # 4 -139.557349947407 -0.000351622866 0.00371412 0.00163364 0.01005622 0.00527025 ~; > ; > # 5 -139.557391640737 -0.000041693330 0.00051457 0.00018711 0.00138018 0.00067210 ~; > ; > # 6 -139.557392223903 -0.000000583166 0.00004140 0.00002031 0.00028542 0.00012144 ~; > ; > # 7 -139.557392234146 -0.000000010243 0.00001186 0.00000566 0.00004411 0.00002377 ~; > ; > # 8 -139.557392234594 -0.000000000448 0.00000420 0.00000194 0.00001643 0.00000834 ~; > ; > # 9 -139.557392234645 -0.000000000051 0.00000176 0.00000074 0.00000686 0.00000306 ~; > ; > # 10 -139.557392",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:6797,Energy Efficiency,Energy,Energy,6797,"000041693330 0.00051457 0.00018711 0.00138018 0.00067210 ~; > ; > # 6 -139.557392223903 -0.000000583166 0.00004140 0.00002031 0.00028542 0.00012144 ~; > ; > # 7 -139.557392234146 -0.000000010243 0.00001186 0.00000566 0.00004411 0.00002377 ~; > ; > # 8 -139.557392234594 -0.000000000448 0.00000420 0.00000194 0.00001643 0.00000834 ~; > ; > # 9 -139.557392234645 -0.000000000051 0.00000176 0.00000074 0.00000686 0.00000306 ~; > ; > # 10 -139.557392234661 -0.000000000016 0.00000071 0.00000029 0.00000278 0.00000118 ~; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # Second system, a not-right by eye but still plausible geometry, oddz; > ; > molecule oddz {; > C; > H 1 1.792; > H 1 1.792 2 59.4; > H 1 1.089 2 136.7 3 -127.3; > F 1 2.089 2 101.7 4 -135.9; > }; > ; > # reference start NRE, E, G for this geometry; > ; > odd_nre_start = 25.7790014493 # Q-Chem; > odd_e_start = -139.1749807824 # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 -0.06704124 0.03019136 0.05220334 -0.00529778 -0.01005568; > ; > # 2 0.09718540 -0.00309814 -0.00309734 -0.00009178 -0.09089814; > ; > # 3 -0.11760428 0.07849561 0.06595344 -0.00926729 -0.01757747; > ; > odd_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.09718540, 0.00309814, 0.00309734, 0.00009178, 0.09089814],; > [ -0.06704124, 0.03019136, 0.05220334, -0.00529778, -0.01005568],; > [ -0.11760428, 0.07849561, 0.06595344, -0.00926729, -0.01757747]]; > odd_g_start.set(zip(*contents)); > odd_rmsg_start = 0.058156; > ; > # optimized reference should be same as norm, but in practice is this; > ; > odd_nre_opt = 33.838291620; > odd_e_opt = -139.301327453; > odd_rmsg_opt = 0.0422103431176; > ; > # should be able to pass starting gradient at new geometry, then zero grad final structure.; > ; > test_odd_start(oddz) # works; > #test_zero_grad(oddz) # should work; > test_badodd_grad(odd",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:9212,Energy Efficiency,Energy,Energy,9212," local; > ; > # minimum as the total gradient wouldn't be so large. It's not too distorted a; > ; > # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; > ; > # symmetry constrained, as it's c1. I'm at a loss.; > ; > # for oddz; > ; > # start; > ; > # 25.7790013416; > ; > # -139.174980786; > ; > # 0.0581560524872; > ; > # Optimizer: Optimization complete!; > ; > # opt; > ; > # 33.8382916197; > ; > # -139.301327453; > ; > # 0.0422103431176; > ; > #gradient = [; > ; > # [ -0.01135649578523, -0.02871892445843, -0.05475995417434],; > ; > # [ 0.00216387360216, 0.04113784938512, 0.07821983299617],; > ; > # [ 0.00215642675781, 0.04114952366672, 0.07824201651882],; > ; > # [ 0.00563414370780, -0.03413386327141, -0.06481576207381],; > ; > # [ 0.00140205171291, -0.01943458532669, -0.03688613326736]]; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # 1 -139.174980785934 -139.174980785934 0.08977532 0.06906505 0.39164409 0.25000003 ~; > ; > # 2 -139.237253751032 -0.062272965098 0.08963832 0.05551392 0.44053120 0.25000000 ~; > ; > # 3 -139.282037341604 -0.044783590572 0.06072927 0.03180855 0.57480436 0.30215430 ~; > ; > # 4 -139.291415380240 -0.009378038636 0.07020602 0.04747338 0.40870734 0.23074492 ~; > ; > # 5 -139.289103767764 0.002311612476 0.06272061 0.03636254 0.31265835 0.16807142 ~; > ; > # 6 -139.299937489944 -0.010833722180 0.02206926 0.01444069 0.08604223 0.05017704 ~; > ; > # 7 -139.301130513523 -0.001193023579 0.00601199 0.00414213 0.03851787 0.02297290 ~; > ; > # 8 -139.301272108227 -0.000141594704 0.00392137 0.00273882 0.01100483 0.00820114 ~; > ; > # 9 -139.301322123849 -0.000050015621 0.00099031 0.00070170 0.00667642 0.00454418 ~; > ; > # 10 -139.30",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:4,Performance,optimiz,optimizer,4,"The optimizer is not creating covalent bond coordinates for the C-H; distances which in the latter geometry are 1.8 Angstroms. The optimizer; tried to loosen the criterian for bonding until everything was bonded to; something, but not successfully coordinating the full system. So the; system is underdetermined in internal coordinates (take a look at the; coordinate list in the output). If one wants to add bonds for unusual distances you can do it with, in this; case,. covalent_connect 1.8 # default is 1.3. For more detailed control, the intco file can be modified. On Sat, Mar 12, 2016 at 2:32 AM, Lori A. Burns notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking, why is my gradient non-zero at; > the end of a successful geometry optimization, please? Below is runable; > input file with details of problem.; > ; > # these are the conditions, a purely conventional (we're going to be; > ; > # comparing to Q-Chem) MP2/cc-pVTZ optimization; > ; > set basis cc-pvtz; > set g_convergence gau_verytight; > set scf_type pk; > set mp2_type conv; > set guess sad; > set freeze_core false; > ; > # the gradient that any fully optimized molecule should match, more or less; > ; > zerograd = psi4.Matrix(5,3); > refgrad = [; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0]]; > zerograd.set(refgrad); > ; > # this is the first system, a fluoromethane that looks pretty good to the eye; > ; > # zmat version, normz; > ; > molecule normz {; > C; > H 1 1.2; > H 1 1.2 2 104; > H 1 1.2 2 105 3 120; > F 1 1.3 2 106 4 121; > }; > ; > # reference start NRE, E, G; > ; > norm_nre_start = 37.6824945882 # Q-Chem; > norm_e_start = -139.5307182946 # Q-Chem; > norm_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; > [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; > [ -0.06715450, 0.05113530, -0.00508959, -0.0064",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:131,Performance,optimiz,optimizer,131,"The optimizer is not creating covalent bond coordinates for the C-H; distances which in the latter geometry are 1.8 Angstroms. The optimizer; tried to loosen the criterian for bonding until everything was bonded to; something, but not successfully coordinating the full system. So the; system is underdetermined in internal coordinates (take a look at the; coordinate list in the output). If one wants to add bonds for unusual distances you can do it with, in this; case,. covalent_connect 1.8 # default is 1.3. For more detailed control, the intco file can be modified. On Sat, Mar 12, 2016 at 2:32 AM, Lori A. Burns notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking, why is my gradient non-zero at; > the end of a successful geometry optimization, please? Below is runable; > input file with details of problem.; > ; > # these are the conditions, a purely conventional (we're going to be; > ; > # comparing to Q-Chem) MP2/cc-pVTZ optimization; > ; > set basis cc-pvtz; > set g_convergence gau_verytight; > set scf_type pk; > set mp2_type conv; > set guess sad; > set freeze_core false; > ; > # the gradient that any fully optimized molecule should match, more or less; > ; > zerograd = psi4.Matrix(5,3); > refgrad = [; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0]]; > zerograd.set(refgrad); > ; > # this is the first system, a fluoromethane that looks pretty good to the eye; > ; > # zmat version, normz; > ; > molecule normz {; > C; > H 1 1.2; > H 1 1.2 2 104; > H 1 1.2 2 105 3 120; > F 1 1.3 2 106 4 121; > }; > ; > # reference start NRE, E, G; > ; > norm_nre_start = 37.6824945882 # Q-Chem; > norm_e_start = -139.5307182946 # Q-Chem; > norm_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; > [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; > [ -0.06715450, 0.05113530, -0.00508959, -0.0064",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:762,Performance,optimiz,optimization,762,"The optimizer is not creating covalent bond coordinates for the C-H; distances which in the latter geometry are 1.8 Angstroms. The optimizer; tried to loosen the criterian for bonding until everything was bonded to; something, but not successfully coordinating the full system. So the; system is underdetermined in internal coordinates (take a look at the; coordinate list in the output). If one wants to add bonds for unusual distances you can do it with, in this; case,. covalent_connect 1.8 # default is 1.3. For more detailed control, the intco file can be modified. On Sat, Mar 12, 2016 at 2:32 AM, Lori A. Burns notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking, why is my gradient non-zero at; > the end of a successful geometry optimization, please? Below is runable; > input file with details of problem.; > ; > # these are the conditions, a purely conventional (we're going to be; > ; > # comparing to Q-Chem) MP2/cc-pVTZ optimization; > ; > set basis cc-pvtz; > set g_convergence gau_verytight; > set scf_type pk; > set mp2_type conv; > set guess sad; > set freeze_core false; > ; > # the gradient that any fully optimized molecule should match, more or less; > ; > zerograd = psi4.Matrix(5,3); > refgrad = [; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0]]; > zerograd.set(refgrad); > ; > # this is the first system, a fluoromethane that looks pretty good to the eye; > ; > # zmat version, normz; > ; > molecule normz {; > C; > H 1 1.2; > H 1 1.2 2 104; > H 1 1.2 2 105 3 120; > F 1 1.3 2 106 4 121; > }; > ; > # reference start NRE, E, G; > ; > norm_nre_start = 37.6824945882 # Q-Chem; > norm_e_start = -139.5307182946 # Q-Chem; > norm_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; > [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; > [ -0.06715450, 0.05113530, -0.00508959, -0.0064",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:958,Performance,optimiz,optimization,958," covalent bond coordinates for the C-H; distances which in the latter geometry are 1.8 Angstroms. The optimizer; tried to loosen the criterian for bonding until everything was bonded to; something, but not successfully coordinating the full system. So the; system is underdetermined in internal coordinates (take a look at the; coordinate list in the output). If one wants to add bonds for unusual distances you can do it with, in this; case,. covalent_connect 1.8 # default is 1.3. For more detailed control, the intco file can be modified. On Sat, Mar 12, 2016 at 2:32 AM, Lori A. Burns notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking, why is my gradient non-zero at; > the end of a successful geometry optimization, please? Below is runable; > input file with details of problem.; > ; > # these are the conditions, a purely conventional (we're going to be; > ; > # comparing to Q-Chem) MP2/cc-pVTZ optimization; > ; > set basis cc-pvtz; > set g_convergence gau_verytight; > set scf_type pk; > set mp2_type conv; > set guess sad; > set freeze_core false; > ; > # the gradient that any fully optimized molecule should match, more or less; > ; > zerograd = psi4.Matrix(5,3); > refgrad = [; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0]]; > zerograd.set(refgrad); > ; > # this is the first system, a fluoromethane that looks pretty good to the eye; > ; > # zmat version, normz; > ; > molecule normz {; > C; > H 1 1.2; > H 1 1.2 2 104; > H 1 1.2 2 105 3 120; > F 1 1.3 2 106 4 121; > }; > ; > # reference start NRE, E, G; > ; > norm_nre_start = 37.6824945882 # Q-Chem; > norm_e_start = -139.5307182946 # Q-Chem; > norm_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; > [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; > [ -0.06715450, 0.05113530, -0.00508959, -0.00643364, 0.02754243]]; > norm_g",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:1150,Performance,optimiz,optimized,1150," covalent bond coordinates for the C-H; distances which in the latter geometry are 1.8 Angstroms. The optimizer; tried to loosen the criterian for bonding until everything was bonded to; something, but not successfully coordinating the full system. So the; system is underdetermined in internal coordinates (take a look at the; coordinate list in the output). If one wants to add bonds for unusual distances you can do it with, in this; case,. covalent_connect 1.8 # default is 1.3. For more detailed control, the intco file can be modified. On Sat, Mar 12, 2016 at 2:32 AM, Lori A. Burns notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking, why is my gradient non-zero at; > the end of a successful geometry optimization, please? Below is runable; > input file with details of problem.; > ; > # these are the conditions, a purely conventional (we're going to be; > ; > # comparing to Q-Chem) MP2/cc-pVTZ optimization; > ; > set basis cc-pvtz; > set g_convergence gau_verytight; > set scf_type pk; > set mp2_type conv; > set guess sad; > set freeze_core false; > ; > # the gradient that any fully optimized molecule should match, more or less; > ; > zerograd = psi4.Matrix(5,3); > refgrad = [; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0],; > [ 0.0, 0.0, 0.0]]; > zerograd.set(refgrad); > ; > # this is the first system, a fluoromethane that looks pretty good to the eye; > ; > # zmat version, normz; > ; > molecule normz {; > C; > H 1 1.2; > H 1 1.2 2 104; > H 1 1.2 2 105 3 120; > F 1 1.3 2 106 4 121; > }; > ; > # reference start NRE, E, G; > ; > norm_nre_start = 37.6824945882 # Q-Chem; > norm_e_start = -139.5307182946 # Q-Chem; > norm_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; > [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; > [ -0.06715450, 0.05113530, -0.00508959, -0.00643364, 0.02754243]]; > norm_g",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:2396,Performance,optimiz,optimized,2396,"m, a fluoromethane that looks pretty good to the eye; > ; > # zmat version, normz; > ; > molecule normz {; > C; > H 1 1.2; > H 1 1.2 2 104; > H 1 1.2 2 105 3 120; > F 1 1.3 2 106 4 121; > }; > ; > # reference start NRE, E, G; > ; > norm_nre_start = 37.6824945882 # Q-Chem; > norm_e_start = -139.5307182946 # Q-Chem; > norm_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; > [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; > [ -0.06715450, 0.05113530, -0.00508959, -0.00643364, 0.02754243]]; > norm_g_start.set(zip(*contents)); > norm_rmsg_start = 0.041309 # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 -0.04900557 -0.00240633 0.05677652 -0.03006882 0.02470420; > ; > # 2 0.07990533 0.00642920 0.00348020 -0.04874047 -0.04107426; > ; > # 3 -0.06715450 0.05113530 -0.00508959 -0.00643364 0.02754243; > ; > # reference optimized NRE, E (G should be 0); > ; > nre_opt = 37.5276022922 # Q-Chem; > e_opt = -139.5573922 # Q-Chem; > #norm_g_opt # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; > ; > # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; > ; > # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003; > ; > def test_norm_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); > compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); > compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(norm_g_start, g0, 3, 'start grad'); > ; > def test_zero_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); > compare_values(e_opt, get_variable('CURRE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:3206,Performance,optimiz,optimize,3206," > ; > # 1 -0.04900557 -0.00240633 0.05677652 -0.03006882 0.02470420; > ; > # 2 0.07990533 0.00642920 0.00348020 -0.04874047 -0.04107426; > ; > # 3 -0.06715450 0.05113530 -0.00508959 -0.00643364 0.02754243; > ; > # reference optimized NRE, E (G should be 0); > ; > nre_opt = 37.5276022922 # Q-Chem; > e_opt = -139.5573922 # Q-Chem; > #norm_g_opt # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; > ; > # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; > ; > # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003; > ; > def test_norm_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); > compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); > compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(norm_g_start, g0, 3, 'start grad'); > ; > def test_zero_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); > compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); > compare_matrices(zerograd, g, 3, 'opt ZERO grad'); > ; > def test_odd_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); > compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); > compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(odd_g_start, g0, 3, 'start grad'); > ; > def test_badodd_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); > compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); > compare_values(odd_rmsg_opt, g.rm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:3884,Performance,optimiz,optimize,3884,"gradient('mp2', molecule=mol); > compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); > compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); > compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(norm_g_start, g0, 3, 'start grad'); > ; > def test_zero_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); > compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); > compare_matrices(zerograd, g, 3, 'opt ZERO grad'); > ; > def test_odd_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); > compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); > compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(odd_g_start, g0, 3, 'start grad'); > ; > def test_badodd_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); > compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); > compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'); > ; > test_norm_start(normz); > test_zero_grad(normz); > ; > # And behold, the initial gradient matches Q-Chem, the optimization; > ; > # progresses nicely, the RMS Force column goes to zero, and the gradient; > ; > # at the end is zero.; > ; > # start nre.........................................................PASSED; > ; > # start ene.........................................................PASSED; > ; > # start rms grad....................................................PASSED; > ; > # start grad........................................................PASSED; > ; > #Optimizer: Optimization complete!; > ; > # opt nre.........................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:4316,Performance,optimiz,optimization,4316,"values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); > compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); > compare_matrices(zerograd, g, 3, 'opt ZERO grad'); > ; > def test_odd_start(mol):; > g0 = gradient('mp2', molecule=mol); > compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); > compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); > compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); > compare_matrices(odd_g_start, g0, 3, 'start grad'); > ; > def test_badodd_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); > compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); > compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'); > ; > test_norm_start(normz); > test_zero_grad(normz); > ; > # And behold, the initial gradient matches Q-Chem, the optimization; > ; > # progresses nicely, the RMS Force column goes to zero, and the gradient; > ; > # at the end is zero.; > ; > # start nre.........................................................PASSED; > ; > # start ene.........................................................PASSED; > ; > # start rms grad....................................................PASSED; > ; > # start grad........................................................PASSED; > ; > #Optimizer: Optimization complete!; > ; > # opt nre...........................................................PASSED; > ; > # opt ene...........................................................PASSED; > ; > # opt ZERO grad.....................................................PASSED; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > ; > # -------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:4774,Performance,Optimiz,Optimizer,4774,"re_matrices(odd_g_start, g0, 3, 'start grad'); > ; > def test_badodd_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); > compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); > compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'); > ; > test_norm_start(normz); > test_zero_grad(normz); > ; > # And behold, the initial gradient matches Q-Chem, the optimization; > ; > # progresses nicely, the RMS Force column goes to zero, and the gradient; > ; > # at the end is zero.; > ; > # start nre.........................................................PASSED; > ; > # start ene.........................................................PASSED; > ; > # start rms grad....................................................PASSED; > ; > # start grad........................................................PASSED; > ; > #Optimizer: Optimization complete!; > ; > # opt nre...........................................................PASSED; > ; > # opt ene...........................................................PASSED; > ; > # opt ZERO grad.....................................................PASSED; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # 1 -139.530718293045 -139.530718293045 0.05695995 0.03625240 0.19767161 0.12159384 ~; > ; > # 2 -139.555614729326 -0.024896436281 0.02341593 0.00968824 0.06857406 0.03977721 ~; > ; > # 3 -139.556998324542 -0.001383595215 0.00950087 0.00516674 0.02878292 0.01662559 ~; > ; > # 4 -139.557349947407 -0.000351622866 0.00371412 0.00163364 0.01005622 0.00527025 ~; > ; > # 5 -139.557391640737 -0.000041693330 0.0005",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:4785,Performance,Optimiz,Optimization,4785,"re_matrices(odd_g_start, g0, 3, 'start grad'); > ; > def test_badodd_grad(mol):; > e, wfn = optimize('mp2', return_wfn=True, molecule=mol); > g = wfn.gradient(); > g.print_out(); > compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); > compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); > compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'); > ; > test_norm_start(normz); > test_zero_grad(normz); > ; > # And behold, the initial gradient matches Q-Chem, the optimization; > ; > # progresses nicely, the RMS Force column goes to zero, and the gradient; > ; > # at the end is zero.; > ; > # start nre.........................................................PASSED; > ; > # start ene.........................................................PASSED; > ; > # start rms grad....................................................PASSED; > ; > # start grad........................................................PASSED; > ; > #Optimizer: Optimization complete!; > ; > # opt nre...........................................................PASSED; > ; > # opt ene...........................................................PASSED; > ; > # opt ZERO grad.....................................................PASSED; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # 1 -139.530718293045 -139.530718293045 0.05695995 0.03625240 0.19767161 0.12159384 ~; > ; > # 2 -139.555614729326 -0.024896436281 0.02341593 0.00968824 0.06857406 0.03977721 ~; > ; > # 3 -139.556998324542 -0.001383595215 0.00950087 0.00516674 0.02878292 0.01662559 ~; > ; > # 4 -139.557349947407 -0.000351622866 0.00371412 0.00163364 0.01005622 0.00527025 ~; > ; > # 5 -139.557391640737 -0.000041693330 0.0005",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:7411,Performance,optimiz,optimized,7411," eye but still plausible geometry, oddz; > ; > molecule oddz {; > C; > H 1 1.792; > H 1 1.792 2 59.4; > H 1 1.089 2 136.7 3 -127.3; > F 1 2.089 2 101.7 4 -135.9; > }; > ; > # reference start NRE, E, G for this geometry; > ; > odd_nre_start = 25.7790014493 # Q-Chem; > odd_e_start = -139.1749807824 # Q-Chem; > ; > # Full Analytical Gradient of MP2 Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 -0.06704124 0.03019136 0.05220334 -0.00529778 -0.01005568; > ; > # 2 0.09718540 -0.00309814 -0.00309734 -0.00009178 -0.09089814; > ; > # 3 -0.11760428 0.07849561 0.06595344 -0.00926729 -0.01757747; > ; > odd_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.09718540, 0.00309814, 0.00309734, 0.00009178, 0.09089814],; > [ -0.06704124, 0.03019136, 0.05220334, -0.00529778, -0.01005568],; > [ -0.11760428, 0.07849561, 0.06595344, -0.00926729, -0.01757747]]; > odd_g_start.set(zip(*contents)); > odd_rmsg_start = 0.058156; > ; > # optimized reference should be same as norm, but in practice is this; > ; > odd_nre_opt = 33.838291620; > odd_e_opt = -139.301327453; > odd_rmsg_opt = 0.0422103431176; > ; > # should be able to pass starting gradient at new geometry, then zero grad final structure.; > ; > test_odd_start(oddz) # works; > #test_zero_grad(oddz) # should work; > test_badodd_grad(oddz) # works b/c I'm testing against the bad results; > ; > # qu-est-ce que c-est? By RMS Force the optimization looks to proceed; > ; > # nicely. But look at that final gradient with unmoveable large gradient; > ; > # components. It's not orientation, as input is zmat and it's the same with cartesian; > ; > # coordinates in a couple orientations. It's not corruption associated; > ; > # with wavefunction pass, as I've tested an older version. It's not a local; > ; > # minimum as the total gradient wouldn't be so large. It's not too distorted a; > ; > # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; > ; > # symmetry constrained",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:7872,Performance,optimiz,optimization,7872," Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 -0.06704124 0.03019136 0.05220334 -0.00529778 -0.01005568; > ; > # 2 0.09718540 -0.00309814 -0.00309734 -0.00009178 -0.09089814; > ; > # 3 -0.11760428 0.07849561 0.06595344 -0.00926729 -0.01757747; > ; > odd_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.09718540, 0.00309814, 0.00309734, 0.00009178, 0.09089814],; > [ -0.06704124, 0.03019136, 0.05220334, -0.00529778, -0.01005568],; > [ -0.11760428, 0.07849561, 0.06595344, -0.00926729, -0.01757747]]; > odd_g_start.set(zip(*contents)); > odd_rmsg_start = 0.058156; > ; > # optimized reference should be same as norm, but in practice is this; > ; > odd_nre_opt = 33.838291620; > odd_e_opt = -139.301327453; > odd_rmsg_opt = 0.0422103431176; > ; > # should be able to pass starting gradient at new geometry, then zero grad final structure.; > ; > test_odd_start(oddz) # works; > #test_zero_grad(oddz) # should work; > test_badodd_grad(oddz) # works b/c I'm testing against the bad results; > ; > # qu-est-ce que c-est? By RMS Force the optimization looks to proceed; > ; > # nicely. But look at that final gradient with unmoveable large gradient; > ; > # components. It's not orientation, as input is zmat and it's the same with cartesian; > ; > # coordinates in a couple orientations. It's not corruption associated; > ; > # with wavefunction pass, as I've tested an older version. It's not a local; > ; > # minimum as the total gradient wouldn't be so large. It's not too distorted a; > ; > # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; > ; > # symmetry constrained, as it's c1. I'm at a loss.; > ; > # for oddz; > ; > # start; > ; > # 25.7790013416; > ; > # -139.174980786; > ; > # 0.0581560524872; > ; > # Optimizer: Optimization complete!; > ; > # opt; > ; > # 33.8382916197; > ; > # -139.301327453; > ; > # 0.0422103431176; > ; > #gradient = [; > ; > # [ -0.01135649578523, -0.02871892445843, -0.0547599541743",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:8592,Performance,Optimiz,Optimizer,8592,"tarting gradient at new geometry, then zero grad final structure.; > ; > test_odd_start(oddz) # works; > #test_zero_grad(oddz) # should work; > test_badodd_grad(oddz) # works b/c I'm testing against the bad results; > ; > # qu-est-ce que c-est? By RMS Force the optimization looks to proceed; > ; > # nicely. But look at that final gradient with unmoveable large gradient; > ; > # components. It's not orientation, as input is zmat and it's the same with cartesian; > ; > # coordinates in a couple orientations. It's not corruption associated; > ; > # with wavefunction pass, as I've tested an older version. It's not a local; > ; > # minimum as the total gradient wouldn't be so large. It's not too distorted a; > ; > # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; > ; > # symmetry constrained, as it's c1. I'm at a loss.; > ; > # for oddz; > ; > # start; > ; > # 25.7790013416; > ; > # -139.174980786; > ; > # 0.0581560524872; > ; > # Optimizer: Optimization complete!; > ; > # opt; > ; > # 33.8382916197; > ; > # -139.301327453; > ; > # 0.0422103431176; > ; > #gradient = [; > ; > # [ -0.01135649578523, -0.02871892445843, -0.05475995417434],; > ; > # [ 0.00216387360216, 0.04113784938512, 0.07821983299617],; > ; > # [ 0.00215642675781, 0.04114952366672, 0.07824201651882],; > ; > # [ 0.00563414370780, -0.03413386327141, -0.06481576207381],; > ; > # [ 0.00140205171291, -0.01943458532669, -0.03688613326736]]; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # 1 -139.174980785934 -139.174980785934 0.08977532 0.06906505 0.39164409 0.25000003 ~; > ; > # 2 -139.237253751032 -0.062272965098 0.08963832 0.05551392 0.44053120 0.25000000 ~; > ; > # 3 -139.282037341604 -0.0447",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:8603,Performance,Optimiz,Optimization,8603,"tarting gradient at new geometry, then zero grad final structure.; > ; > test_odd_start(oddz) # works; > #test_zero_grad(oddz) # should work; > test_badodd_grad(oddz) # works b/c I'm testing against the bad results; > ; > # qu-est-ce que c-est? By RMS Force the optimization looks to proceed; > ; > # nicely. But look at that final gradient with unmoveable large gradient; > ; > # components. It's not orientation, as input is zmat and it's the same with cartesian; > ; > # coordinates in a couple orientations. It's not corruption associated; > ; > # with wavefunction pass, as I've tested an older version. It's not a local; > ; > # minimum as the total gradient wouldn't be so large. It's not too distorted a; > ; > # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; > ; > # symmetry constrained, as it's c1. I'm at a loss.; > ; > # for oddz; > ; > # start; > ; > # 25.7790013416; > ; > # -139.174980786; > ; > # 0.0581560524872; > ; > # Optimizer: Optimization complete!; > ; > # opt; > ; > # 33.8382916197; > ; > # -139.301327453; > ; > # 0.0422103431176; > ; > #gradient = [; > ; > # [ -0.01135649578523, -0.02871892445843, -0.05475995417434],; > ; > # [ 0.00216387360216, 0.04113784938512, 0.07821983299617],; > ; > # [ 0.00215642675781, 0.04114952366672, 0.07824201651882],; > ; > # [ 0.00563414370780, -0.03413386327141, -0.06481576207381],; > ; > # [ 0.00140205171291, -0.01943458532669, -0.03688613326736]]; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # 1 -139.174980785934 -139.174980785934 0.08977532 0.06906505 0.39164409 0.25000003 ~; > ; > # 2 -139.237253751032 -0.062272965098 0.08963832 0.05551392 0.44053120 0.25000000 ~; > ; > # 3 -139.282037341604 -0.0447",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:7793,Testability,test,testing,7793," Energy (in au.); > ; > # 1 2 3 4 5; > ; > # 1 -0.06704124 0.03019136 0.05220334 -0.00529778 -0.01005568; > ; > # 2 0.09718540 -0.00309814 -0.00309734 -0.00009178 -0.09089814; > ; > # 3 -0.11760428 0.07849561 0.06595344 -0.00926729 -0.01757747; > ; > odd_g_start = psi4.Matrix(5, 3) # Q-Chem; > contents = [ # have to swap x & y, and -x; > [ -0.09718540, 0.00309814, 0.00309734, 0.00009178, 0.09089814],; > [ -0.06704124, 0.03019136, 0.05220334, -0.00529778, -0.01005568],; > [ -0.11760428, 0.07849561, 0.06595344, -0.00926729, -0.01757747]]; > odd_g_start.set(zip(*contents)); > odd_rmsg_start = 0.058156; > ; > # optimized reference should be same as norm, but in practice is this; > ; > odd_nre_opt = 33.838291620; > odd_e_opt = -139.301327453; > odd_rmsg_opt = 0.0422103431176; > ; > # should be able to pass starting gradient at new geometry, then zero grad final structure.; > ; > test_odd_start(oddz) # works; > #test_zero_grad(oddz) # should work; > test_badodd_grad(oddz) # works b/c I'm testing against the bad results; > ; > # qu-est-ce que c-est? By RMS Force the optimization looks to proceed; > ; > # nicely. But look at that final gradient with unmoveable large gradient; > ; > # components. It's not orientation, as input is zmat and it's the same with cartesian; > ; > # coordinates in a couple orientations. It's not corruption associated; > ; > # with wavefunction pass, as I've tested an older version. It's not a local; > ; > # minimum as the total gradient wouldn't be so large. It's not too distorted a; > ; > # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; > ; > # symmetry constrained, as it's c1. I'm at a loss.; > ; > # for oddz; > ; > # start; > ; > # 25.7790013416; > ; > # -139.174980786; > ; > # 0.0581560524872; > ; > # Optimizer: Optimization complete!; > ; > # opt; > ; > # 33.8382916197; > ; > # -139.301327453; > ; > # 0.0422103431176; > ; > #gradient = [; > ; > # [ -0.01135649578523, -0.02871892445843, -0.0547599541743",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195966638:8194,Testability,test,tested,8194,"9734, 0.00009178, 0.09089814],; > [ -0.06704124, 0.03019136, 0.05220334, -0.00529778, -0.01005568],; > [ -0.11760428, 0.07849561, 0.06595344, -0.00926729, -0.01757747]]; > odd_g_start.set(zip(*contents)); > odd_rmsg_start = 0.058156; > ; > # optimized reference should be same as norm, but in practice is this; > ; > odd_nre_opt = 33.838291620; > odd_e_opt = -139.301327453; > odd_rmsg_opt = 0.0422103431176; > ; > # should be able to pass starting gradient at new geometry, then zero grad final structure.; > ; > test_odd_start(oddz) # works; > #test_zero_grad(oddz) # should work; > test_badodd_grad(oddz) # works b/c I'm testing against the bad results; > ; > # qu-est-ce que c-est? By RMS Force the optimization looks to proceed; > ; > # nicely. But look at that final gradient with unmoveable large gradient; > ; > # components. It's not orientation, as input is zmat and it's the same with cartesian; > ; > # coordinates in a couple orientations. It's not corruption associated; > ; > # with wavefunction pass, as I've tested an older version. It's not a local; > ; > # minimum as the total gradient wouldn't be so large. It's not too distorted a; > ; > # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; > ; > # symmetry constrained, as it's c1. I'm at a loss.; > ; > # for oddz; > ; > # start; > ; > # 25.7790013416; > ; > # -139.174980786; > ; > # 0.0581560524872; > ; > # Optimizer: Optimization complete!; > ; > # opt; > ; > # 33.8382916197; > ; > # -139.301327453; > ; > # 0.0422103431176; > ; > #gradient = [; > ; > # [ -0.01135649578523, -0.02871892445843, -0.05475995417434],; > ; > # [ 0.00216387360216, 0.04113784938512, 0.07821983299617],; > ; > # [ 0.00215642675781, 0.04114952366672, 0.07824201651882],; > ; > # [ 0.00563414370780, -0.03413386327141, -0.06481576207381],; > ; > # [ 0.00140205171291, -0.01943458532669, -0.03688613326736]]; > ; > # --------------------------------------------------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638
https://github.com/psi4/psi4/issues/310#issuecomment-195987054:124,Performance,optimiz,optimizer,124,Shouldn't the mismatch between the total gradient rms (0.04) and the gradient it's decided to consider (1e-7) signal to the optimizer that it doesn't have the full picture? Throw in some Cartesian steps or whatever others do?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195987054
https://github.com/psi4/psi4/issues/310#issuecomment-196005999:198,Availability,error,error,198,"Agreed, this should be improved. However, there are various reasons why; someone might want to optimize only along a restricted set of coordinates,; so I am not sure this should go automatically to error mode (switching to; cartesians, etc.). Certainly, I should add a WARNING at the end that the; full space wasn't optimized. On Sun, Mar 13, 2016 at 11:01 AM, Lori A. Burns notifications@github.com; wrote:. > Shouldn't the mismatch between the total gradient rms (0.04) and the; > gradient it's decided to consider (1e-7) signal to the optimizer that it; > doesn't have the full picture? Throw in some Cartesian steps or whatever; > others do?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-195987054.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196005999
https://github.com/psi4/psi4/issues/310#issuecomment-196005999:95,Performance,optimiz,optimize,95,"Agreed, this should be improved. However, there are various reasons why; someone might want to optimize only along a restricted set of coordinates,; so I am not sure this should go automatically to error mode (switching to; cartesians, etc.). Certainly, I should add a WARNING at the end that the; full space wasn't optimized. On Sun, Mar 13, 2016 at 11:01 AM, Lori A. Burns notifications@github.com; wrote:. > Shouldn't the mismatch between the total gradient rms (0.04) and the; > gradient it's decided to consider (1e-7) signal to the optimizer that it; > doesn't have the full picture? Throw in some Cartesian steps or whatever; > others do?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-195987054.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196005999
https://github.com/psi4/psi4/issues/310#issuecomment-196005999:316,Performance,optimiz,optimized,316,"Agreed, this should be improved. However, there are various reasons why; someone might want to optimize only along a restricted set of coordinates,; so I am not sure this should go automatically to error mode (switching to; cartesians, etc.). Certainly, I should add a WARNING at the end that the; full space wasn't optimized. On Sun, Mar 13, 2016 at 11:01 AM, Lori A. Burns notifications@github.com; wrote:. > Shouldn't the mismatch between the total gradient rms (0.04) and the; > gradient it's decided to consider (1e-7) signal to the optimizer that it; > doesn't have the full picture? Throw in some Cartesian steps or whatever; > others do?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-195987054.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196005999
https://github.com/psi4/psi4/issues/310#issuecomment-196005999:538,Performance,optimiz,optimizer,538,"Agreed, this should be improved. However, there are various reasons why; someone might want to optimize only along a restricted set of coordinates,; so I am not sure this should go automatically to error mode (switching to; cartesians, etc.). Certainly, I should add a WARNING at the end that the; full space wasn't optimized. On Sun, Mar 13, 2016 at 11:01 AM, Lori A. Burns notifications@github.com; wrote:. > Shouldn't the mismatch between the total gradient rms (0.04) and the; > gradient it's decided to consider (1e-7) signal to the optimizer that it; > doesn't have the full picture? Throw in some Cartesian steps or whatever; > others do?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-195987054.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196005999
https://github.com/psi4/psi4/issues/310#issuecomment-196021110:55,Energy Efficiency,reduce,reduced,55,"Certainly the flexibility of the optimizer oughtn't be reduced. In the absence of fixed/frozen keywords or user supplied/edited intco (do you need a keyword to signal do-read-intco instead of accepting any it finds?), it's probably reasonable to assume a full optimization is desired. Maybe `grep '~'` needs to catch a `gradient.rms()`, too, next to the optking-active rms gradient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196021110
https://github.com/psi4/psi4/issues/310#issuecomment-196021110:33,Performance,optimiz,optimizer,33,"Certainly the flexibility of the optimizer oughtn't be reduced. In the absence of fixed/frozen keywords or user supplied/edited intco (do you need a keyword to signal do-read-intco instead of accepting any it finds?), it's probably reasonable to assume a full optimization is desired. Maybe `grep '~'` needs to catch a `gradient.rms()`, too, next to the optking-active rms gradient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196021110
https://github.com/psi4/psi4/issues/310#issuecomment-196021110:260,Performance,optimiz,optimization,260,"Certainly the flexibility of the optimizer oughtn't be reduced. In the absence of fixed/frozen keywords or user supplied/edited intco (do you need a keyword to signal do-read-intco instead of accepting any it finds?), it's probably reasonable to assume a full optimization is desired. Maybe `grep '~'` needs to catch a `gradient.rms()`, too, next to the optking-active rms gradient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196021110
https://github.com/psi4/psi4/issues/310#issuecomment-196036551:343,Energy Efficiency,reduce,reduced,343,"The current code detected 4 different fragments for the extended CH3F.; Then it tried to connect them. It really should have been able to do so.; I don't see why it didn't work, and I'm looking for a bug. On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; wrote:. > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > probably reasonable to assume a full optimization is desired. Maybe grep; > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > gradient.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196036551
https://github.com/psi4/psi4/issues/310#issuecomment-196036551:56,Modifiability,extend,extended,56,"The current code detected 4 different fragments for the extended CH3F.; Then it tried to connect them. It really should have been able to do so.; I don't see why it didn't work, and I'm looking for a bug. On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; wrote:. > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > probably reasonable to assume a full optimization is desired. Maybe grep; > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > gradient.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196036551
https://github.com/psi4/psi4/issues/310#issuecomment-196036551:321,Performance,optimiz,optimizer,321,"The current code detected 4 different fragments for the extended CH3F.; Then it tried to connect them. It really should have been able to do so.; I don't see why it didn't work, and I'm looking for a bug. On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; wrote:. > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > probably reasonable to assume a full optimization is desired. Maybe grep; > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > gradient.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196036551
https://github.com/psi4/psi4/issues/310#issuecomment-196036551:557,Performance,optimiz,optimization,557,"The current code detected 4 different fragments for the extended CH3F.; Then it tried to connect them. It really should have been able to do so.; I don't see why it didn't work, and I'm looking for a bug. On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; wrote:. > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > probably reasonable to assume a full optimization is desired. Maybe grep; > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > gradient.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196036551
https://github.com/psi4/psi4/issues/310#issuecomment-196036551:17,Safety,detect,detected,17,"The current code detected 4 different fragments for the extended CH3F.; Then it tried to connect them. It really should have been able to do so.; I don't see why it didn't work, and I'm looking for a bug. On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; wrote:. > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > probably reasonable to assume a full optimization is desired. Maybe grep; > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > gradient.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196036551
https://github.com/psi4/psi4/issues/310#issuecomment-196087369:137,Availability,error,error,137,"I have fixed the code that connects the initial, separated fragments in; optking. The CH3F case now runs fine. The code was very much in error. I; will submit the correction whenever the main psi4 trunk runs again. At the; moment, the python there seems broken. On Sun, Mar 13, 2016 at 2:52 PM, Rollin King rking@bethel.edu wrote:. > The current code detected 4 different fragments for the extended CH3F.; > Then it tried to connect them. It really should have been able to do so.; > I don't see why it didn't work, and I'm looking for a bug.; > ; > On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > > probably reasonable to assume a full optimization is desired. Maybe grep; > > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > > gradient.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196087369
https://github.com/psi4/psi4/issues/310#issuecomment-196087369:696,Energy Efficiency,reduce,reduced,696,"I have fixed the code that connects the initial, separated fragments in; optking. The CH3F case now runs fine. The code was very much in error. I; will submit the correction whenever the main psi4 trunk runs again. At the; moment, the python there seems broken. On Sun, Mar 13, 2016 at 2:52 PM, Rollin King rking@bethel.edu wrote:. > The current code detected 4 different fragments for the extended CH3F.; > Then it tried to connect them. It really should have been able to do so.; > I don't see why it didn't work, and I'm looking for a bug.; > ; > On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > > probably reasonable to assume a full optimization is desired. Maybe grep; > > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > > gradient.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196087369
https://github.com/psi4/psi4/issues/310#issuecomment-196087369:390,Modifiability,extend,extended,390,"I have fixed the code that connects the initial, separated fragments in; optking. The CH3F case now runs fine. The code was very much in error. I; will submit the correction whenever the main psi4 trunk runs again. At the; moment, the python there seems broken. On Sun, Mar 13, 2016 at 2:52 PM, Rollin King rking@bethel.edu wrote:. > The current code detected 4 different fragments for the extended CH3F.; > Then it tried to connect them. It really should have been able to do so.; > I don't see why it didn't work, and I'm looking for a bug.; > ; > On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > > probably reasonable to assume a full optimization is desired. Maybe grep; > > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > > gradient.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196087369
https://github.com/psi4/psi4/issues/310#issuecomment-196087369:674,Performance,optimiz,optimizer,674,"I have fixed the code that connects the initial, separated fragments in; optking. The CH3F case now runs fine. The code was very much in error. I; will submit the correction whenever the main psi4 trunk runs again. At the; moment, the python there seems broken. On Sun, Mar 13, 2016 at 2:52 PM, Rollin King rking@bethel.edu wrote:. > The current code detected 4 different fragments for the extended CH3F.; > Then it tried to connect them. It really should have been able to do so.; > I don't see why it didn't work, and I'm looking for a bug.; > ; > On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > > probably reasonable to assume a full optimization is desired. Maybe grep; > > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > > gradient.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196087369
https://github.com/psi4/psi4/issues/310#issuecomment-196087369:916,Performance,optimiz,optimization,916,"I have fixed the code that connects the initial, separated fragments in; optking. The CH3F case now runs fine. The code was very much in error. I; will submit the correction whenever the main psi4 trunk runs again. At the; moment, the python there seems broken. On Sun, Mar 13, 2016 at 2:52 PM, Rollin King rking@bethel.edu wrote:. > The current code detected 4 different fragments for the extended CH3F.; > Then it tried to connect them. It really should have been able to do so.; > I don't see why it didn't work, and I'm looking for a bug.; > ; > On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > > probably reasonable to assume a full optimization is desired. Maybe grep; > > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > > gradient.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196087369
https://github.com/psi4/psi4/issues/310#issuecomment-196087369:351,Safety,detect,detected,351,"I have fixed the code that connects the initial, separated fragments in; optking. The CH3F case now runs fine. The code was very much in error. I; will submit the correction whenever the main psi4 trunk runs again. At the; moment, the python there seems broken. On Sun, Mar 13, 2016 at 2:52 PM, Rollin King rking@bethel.edu wrote:. > The current code detected 4 different fragments for the extended CH3F.; > Then it tried to connect them. It really should have been able to do so.; > I don't see why it didn't work, and I'm looking for a bug.; > ; > On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > > probably reasonable to assume a full optimization is desired. Maybe grep; > > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > > gradient.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196087369
https://github.com/psi4/psi4/issues/310#issuecomment-196104469:71,Testability,test,test,71,The current head (0.4.156 / 7783818 / 0.5.92) works fine for me on the test case above and on all the usual test cases. What is the nature of your broken python?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196104469
https://github.com/psi4/psi4/issues/310#issuecomment-196104469:108,Testability,test,test,108,The current head (0.4.156 / 7783818 / 0.5.92) works fine for me on the test case above and on all the usual test cases. What is the nature of your broken python?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196104469
https://github.com/psi4/psi4/issues/310#issuecomment-196157987:3,Availability,error,error,3,"An error has occurred. Traceback:. <class 'Boost.Python.ArgumentError'>: Python argument types in. ```; psi4.scf(NoneType, NoneType); ```. did not match C++ signature:. ```; scf(boost::shared_ptr<psi::Wavefunction>, _object*, _object*): File; ```. ""<string>"", line 47, in <module>. This is, for example, from the opt1 test case, but all jobs fail. I; already tried removing my objdir completely and recompiling. On Sun, Mar 13, 2016 at 8:58 PM, Lori A. Burns notifications@github.com; wrote:. > The current head (0.4.156 / 7783818; > https://github.com/psi4/psi4/commit/77838182dbdf260e7f39e4e554b64ee3c05a0da7; > / 0.5.92) works fine for me on the test case above and on all the usual; > test cases. What is the nature of your broken python?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196104469.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196157987
https://github.com/psi4/psi4/issues/310#issuecomment-196157987:318,Testability,test,test,318,"An error has occurred. Traceback:. <class 'Boost.Python.ArgumentError'>: Python argument types in. ```; psi4.scf(NoneType, NoneType); ```. did not match C++ signature:. ```; scf(boost::shared_ptr<psi::Wavefunction>, _object*, _object*): File; ```. ""<string>"", line 47, in <module>. This is, for example, from the opt1 test case, but all jobs fail. I; already tried removing my objdir completely and recompiling. On Sun, Mar 13, 2016 at 8:58 PM, Lori A. Burns notifications@github.com; wrote:. > The current head (0.4.156 / 7783818; > https://github.com/psi4/psi4/commit/77838182dbdf260e7f39e4e554b64ee3c05a0da7; > / 0.5.92) works fine for me on the test case above and on all the usual; > test cases. What is the nature of your broken python?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196104469.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196157987
https://github.com/psi4/psi4/issues/310#issuecomment-196157987:649,Testability,test,test,649,"An error has occurred. Traceback:. <class 'Boost.Python.ArgumentError'>: Python argument types in. ```; psi4.scf(NoneType, NoneType); ```. did not match C++ signature:. ```; scf(boost::shared_ptr<psi::Wavefunction>, _object*, _object*): File; ```. ""<string>"", line 47, in <module>. This is, for example, from the opt1 test case, but all jobs fail. I; already tried removing my objdir completely and recompiling. On Sun, Mar 13, 2016 at 8:58 PM, Lori A. Burns notifications@github.com; wrote:. > The current head (0.4.156 / 7783818; > https://github.com/psi4/psi4/commit/77838182dbdf260e7f39e4e554b64ee3c05a0da7; > / 0.5.92) works fine for me on the test case above and on all the usual; > test cases. What is the nature of your broken python?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196104469.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196157987
https://github.com/psi4/psi4/issues/310#issuecomment-196157987:689,Testability,test,test,689,"An error has occurred. Traceback:. <class 'Boost.Python.ArgumentError'>: Python argument types in. ```; psi4.scf(NoneType, NoneType); ```. did not match C++ signature:. ```; scf(boost::shared_ptr<psi::Wavefunction>, _object*, _object*): File; ```. ""<string>"", line 47, in <module>. This is, for example, from the opt1 test case, but all jobs fail. I; already tried removing my objdir completely and recompiling. On Sun, Mar 13, 2016 at 8:58 PM, Lori A. Burns notifications@github.com; wrote:. > The current head (0.4.156 / 7783818; > https://github.com/psi4/psi4/commit/77838182dbdf260e7f39e4e554b64ee3c05a0da7; > / 0.5.92) works fine for me on the test case above and on all the usual; > test cases. What is the nature of your broken python?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196104469.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196157987
https://github.com/psi4/psi4/issues/310#issuecomment-196158996:125,Availability,error,error,125,"Have we changed what PSIDATADIR should point to?. On Mon, Mar 14, 2016 at 1:00 AM, Rollin King rking@bethel.edu wrote:. > An error has occurred. Traceback:; > ; > <class 'Boost.Python.ArgumentError'>: Python argument types in; > ; > ```; > psi4.scf(NoneType, NoneType); > ```; > ; > did not match C++ signature:; > ; > ```; > scf(boost::shared_ptr<psi::Wavefunction>, _object*, _object*): File; > ```; > ; > ""<string>"", line 47, in <module>; > ; > This is, for example, from the opt1 test case, but all jobs fail. I; > already tried removing my objdir completely and recompiling.; > ; > On Sun, Mar 13, 2016 at 8:58 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > The current head (0.4.156 / 7783818; > > https://github.com/psi4/psi4/commit/77838182dbdf260e7f39e4e554b64ee3c05a0da7; > > / 0.5.92) works fine for me on the test case above and on all the usual; > > test cases. What is the nature of your broken python?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196104469.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196158996
https://github.com/psi4/psi4/issues/310#issuecomment-196158996:484,Testability,test,test,484,"Have we changed what PSIDATADIR should point to?. On Mon, Mar 14, 2016 at 1:00 AM, Rollin King rking@bethel.edu wrote:. > An error has occurred. Traceback:; > ; > <class 'Boost.Python.ArgumentError'>: Python argument types in; > ; > ```; > psi4.scf(NoneType, NoneType); > ```; > ; > did not match C++ signature:; > ; > ```; > scf(boost::shared_ptr<psi::Wavefunction>, _object*, _object*): File; > ```; > ; > ""<string>"", line 47, in <module>; > ; > This is, for example, from the opt1 test case, but all jobs fail. I; > already tried removing my objdir completely and recompiling.; > ; > On Sun, Mar 13, 2016 at 8:58 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > The current head (0.4.156 / 7783818; > > https://github.com/psi4/psi4/commit/77838182dbdf260e7f39e4e554b64ee3c05a0da7; > > / 0.5.92) works fine for me on the test case above and on all the usual; > > test cases. What is the nature of your broken python?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196104469.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196158996
https://github.com/psi4/psi4/issues/310#issuecomment-196158996:836,Testability,test,test,836,"Have we changed what PSIDATADIR should point to?. On Mon, Mar 14, 2016 at 1:00 AM, Rollin King rking@bethel.edu wrote:. > An error has occurred. Traceback:; > ; > <class 'Boost.Python.ArgumentError'>: Python argument types in; > ; > ```; > psi4.scf(NoneType, NoneType); > ```; > ; > did not match C++ signature:; > ; > ```; > scf(boost::shared_ptr<psi::Wavefunction>, _object*, _object*): File; > ```; > ; > ""<string>"", line 47, in <module>; > ; > This is, for example, from the opt1 test case, but all jobs fail. I; > already tried removing my objdir completely and recompiling.; > ; > On Sun, Mar 13, 2016 at 8:58 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > The current head (0.4.156 / 7783818; > > https://github.com/psi4/psi4/commit/77838182dbdf260e7f39e4e554b64ee3c05a0da7; > > / 0.5.92) works fine for me on the test case above and on all the usual; > > test cases. What is the nature of your broken python?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196104469.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196158996
https://github.com/psi4/psi4/issues/310#issuecomment-196158996:878,Testability,test,test,878,"Have we changed what PSIDATADIR should point to?. On Mon, Mar 14, 2016 at 1:00 AM, Rollin King rking@bethel.edu wrote:. > An error has occurred. Traceback:; > ; > <class 'Boost.Python.ArgumentError'>: Python argument types in; > ; > ```; > psi4.scf(NoneType, NoneType); > ```; > ; > did not match C++ signature:; > ; > ```; > scf(boost::shared_ptr<psi::Wavefunction>, _object*, _object*): File; > ```; > ; > ""<string>"", line 47, in <module>; > ; > This is, for example, from the opt1 test case, but all jobs fail. I; > already tried removing my objdir completely and recompiling.; > ; > On Sun, Mar 13, 2016 at 8:58 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > The current head (0.4.156 / 7783818; > > https://github.com/psi4/psi4/commit/77838182dbdf260e7f39e4e554b64ee3c05a0da7; > > / 0.5.92) works fine for me on the test case above and on all the usual; > > test cases. What is the nature of your broken python?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196104469.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196158996
https://github.com/psi4/psi4/issues/310#issuecomment-196160600:57,Availability,error,error,57,"With. setenv PSIDATADIR /home/rking/psi4public/share. An error has occurred. Traceback:. <type 'exceptions.SyntaxError'>: ('invalid syntax',; ('/home/rking/psi4public/share/python/qcdb/dbwrap.py', 1455, 47, '; return {db: odb.integer_reactions() for db, odb in; self.dbdict.items()}\n')): File ""<string>"", line 7, in <module>. On Mon, Mar 14, 2016 at 1:02 AM, Rollin King rking@bethel.edu wrote:. > Have we changed what PSIDATADIR should point to?; > ; > On Mon, Mar 14, 2016 at 1:00 AM, Rollin King rking@bethel.edu wrote:; > ; > > An error has occurred. Traceback:; > > ; > > <class 'Boost.Python.ArgumentError'>: Python argument types in; > > ; > > ```; > > psi4.scf(NoneType, NoneType); > > ```; > > ; > > did not match C++ signature:; > > ; > > ```; > > scf(boost::shared_ptr<psi::Wavefunction>, _object*, _object*): File; > > ```; > > ; > > ""<string>"", line 47, in <module>; > > ; > > This is, for example, from the opt1 test case, but all jobs fail. I; > > already tried removing my objdir completely and recompiling.; > > ; > > On Sun, Mar 13, 2016 at 8:58 PM, Lori A. Burns notifications@github.com; > > wrote:; > > ; > > > The current head (0.4.156 / 7783818; > > > https://github.com/psi4/psi4/commit/77838182dbdf260e7f39e4e554b64ee3c05a0da7; > > > / 0.5.92) works fine for me on the test case above and on all the usual; > > > test cases. What is the nature of your broken python?; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4/issues/310#issuecomment-196104469.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196160600
https://github.com/psi4/psi4/issues/310#issuecomment-196160600:536,Availability,error,error,536,"With. setenv PSIDATADIR /home/rking/psi4public/share. An error has occurred. Traceback:. <type 'exceptions.SyntaxError'>: ('invalid syntax',; ('/home/rking/psi4public/share/python/qcdb/dbwrap.py', 1455, 47, '; return {db: odb.integer_reactions() for db, odb in; self.dbdict.items()}\n')): File ""<string>"", line 7, in <module>. On Mon, Mar 14, 2016 at 1:02 AM, Rollin King rking@bethel.edu wrote:. > Have we changed what PSIDATADIR should point to?; > ; > On Mon, Mar 14, 2016 at 1:00 AM, Rollin King rking@bethel.edu wrote:; > ; > > An error has occurred. Traceback:; > > ; > > <class 'Boost.Python.ArgumentError'>: Python argument types in; > > ; > > ```; > > psi4.scf(NoneType, NoneType); > > ```; > > ; > > did not match C++ signature:; > > ; > > ```; > > scf(boost::shared_ptr<psi::Wavefunction>, _object*, _object*): File; > > ```; > > ; > > ""<string>"", line 47, in <module>; > > ; > > This is, for example, from the opt1 test case, but all jobs fail. I; > > already tried removing my objdir completely and recompiling.; > > ; > > On Sun, Mar 13, 2016 at 8:58 PM, Lori A. Burns notifications@github.com; > > wrote:; > > ; > > > The current head (0.4.156 / 7783818; > > > https://github.com/psi4/psi4/commit/77838182dbdf260e7f39e4e554b64ee3c05a0da7; > > > / 0.5.92) works fine for me on the test case above and on all the usual; > > > test cases. What is the nature of your broken python?; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4/issues/310#issuecomment-196104469.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196160600
https://github.com/psi4/psi4/issues/310#issuecomment-196160600:927,Testability,test,test,927,"With. setenv PSIDATADIR /home/rking/psi4public/share. An error has occurred. Traceback:. <type 'exceptions.SyntaxError'>: ('invalid syntax',; ('/home/rking/psi4public/share/python/qcdb/dbwrap.py', 1455, 47, '; return {db: odb.integer_reactions() for db, odb in; self.dbdict.items()}\n')): File ""<string>"", line 7, in <module>. On Mon, Mar 14, 2016 at 1:02 AM, Rollin King rking@bethel.edu wrote:. > Have we changed what PSIDATADIR should point to?; > ; > On Mon, Mar 14, 2016 at 1:00 AM, Rollin King rking@bethel.edu wrote:; > ; > > An error has occurred. Traceback:; > > ; > > <class 'Boost.Python.ArgumentError'>: Python argument types in; > > ; > > ```; > > psi4.scf(NoneType, NoneType); > > ```; > > ; > > did not match C++ signature:; > > ; > > ```; > > scf(boost::shared_ptr<psi::Wavefunction>, _object*, _object*): File; > > ```; > > ; > > ""<string>"", line 47, in <module>; > > ; > > This is, for example, from the opt1 test case, but all jobs fail. I; > > already tried removing my objdir completely and recompiling.; > > ; > > On Sun, Mar 13, 2016 at 8:58 PM, Lori A. Burns notifications@github.com; > > wrote:; > > ; > > > The current head (0.4.156 / 7783818; > > > https://github.com/psi4/psi4/commit/77838182dbdf260e7f39e4e554b64ee3c05a0da7; > > > / 0.5.92) works fine for me on the test case above and on all the usual; > > > test cases. What is the nature of your broken python?; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4/issues/310#issuecomment-196104469.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196160600
https://github.com/psi4/psi4/issues/310#issuecomment-196160600:1295,Testability,test,test,1295,"With. setenv PSIDATADIR /home/rking/psi4public/share. An error has occurred. Traceback:. <type 'exceptions.SyntaxError'>: ('invalid syntax',; ('/home/rking/psi4public/share/python/qcdb/dbwrap.py', 1455, 47, '; return {db: odb.integer_reactions() for db, odb in; self.dbdict.items()}\n')): File ""<string>"", line 7, in <module>. On Mon, Mar 14, 2016 at 1:02 AM, Rollin King rking@bethel.edu wrote:. > Have we changed what PSIDATADIR should point to?; > ; > On Mon, Mar 14, 2016 at 1:00 AM, Rollin King rking@bethel.edu wrote:; > ; > > An error has occurred. Traceback:; > > ; > > <class 'Boost.Python.ArgumentError'>: Python argument types in; > > ; > > ```; > > psi4.scf(NoneType, NoneType); > > ```; > > ; > > did not match C++ signature:; > > ; > > ```; > > scf(boost::shared_ptr<psi::Wavefunction>, _object*, _object*): File; > > ```; > > ; > > ""<string>"", line 47, in <module>; > > ; > > This is, for example, from the opt1 test case, but all jobs fail. I; > > already tried removing my objdir completely and recompiling.; > > ; > > On Sun, Mar 13, 2016 at 8:58 PM, Lori A. Burns notifications@github.com; > > wrote:; > > ; > > > The current head (0.4.156 / 7783818; > > > https://github.com/psi4/psi4/commit/77838182dbdf260e7f39e4e554b64ee3c05a0da7; > > > / 0.5.92) works fine for me on the test case above and on all the usual; > > > test cases. What is the nature of your broken python?; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4/issues/310#issuecomment-196104469.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196160600
https://github.com/psi4/psi4/issues/310#issuecomment-196160600:1339,Testability,test,test,1339,"With. setenv PSIDATADIR /home/rking/psi4public/share. An error has occurred. Traceback:. <type 'exceptions.SyntaxError'>: ('invalid syntax',; ('/home/rking/psi4public/share/python/qcdb/dbwrap.py', 1455, 47, '; return {db: odb.integer_reactions() for db, odb in; self.dbdict.items()}\n')): File ""<string>"", line 7, in <module>. On Mon, Mar 14, 2016 at 1:02 AM, Rollin King rking@bethel.edu wrote:. > Have we changed what PSIDATADIR should point to?; > ; > On Mon, Mar 14, 2016 at 1:00 AM, Rollin King rking@bethel.edu wrote:; > ; > > An error has occurred. Traceback:; > > ; > > <class 'Boost.Python.ArgumentError'>: Python argument types in; > > ; > > ```; > > psi4.scf(NoneType, NoneType); > > ```; > > ; > > did not match C++ signature:; > > ; > > ```; > > scf(boost::shared_ptr<psi::Wavefunction>, _object*, _object*): File; > > ```; > > ; > > ""<string>"", line 47, in <module>; > > ; > > This is, for example, from the opt1 test case, but all jobs fail. I; > > already tried removing my objdir completely and recompiling.; > > ; > > On Sun, Mar 13, 2016 at 8:58 PM, Lori A. Burns notifications@github.com; > > wrote:; > > ; > > > The current head (0.4.156 / 7783818; > > > https://github.com/psi4/psi4/commit/77838182dbdf260e7f39e4e554b64ee3c05a0da7; > > > / 0.5.92) works fine for me on the test case above and on all the usual; > > > test cases. What is the nature of your broken python?; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4/issues/310#issuecomment-196104469.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196160600
https://github.com/psi4/psi4/issues/310#issuecomment-196346044:282,Availability,error,errors,282,"Oh bother, python 2.6 doesn't have dictionary comprehensions. I updated qcdb within the last couple weeks with accumulated improvements and python 3.5 prep. It doesn't look like I use dictionary comprehensions all that much, so you can try the following, then report any subsequent errors. ```; return {db: odb.integer_reactions() for db, odb in self.dbdict.items()} # replace this; return dict((db, odb.integer_reactions()) for db, odb in self.dbdict.items()) # with this; ```. Or, would you like to give python 2.7 a try? Do the binary instructions (http://psicode.org/psi4manual/master/conda.html#quick-installation) through the `conda update` step (replace ""Linux"" with ""MacOSX"" in installer file name, if on Mac), be sure your `which python` points to 2.7, then compile psi4 with `--python $MINICONDA/bin/python`. When we get around to supporting python3.5, python2.6 support may go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196346044
https://github.com/psi4/psi4/issues/310#issuecomment-196346044:64,Deployability,update,updated,64,"Oh bother, python 2.6 doesn't have dictionary comprehensions. I updated qcdb within the last couple weeks with accumulated improvements and python 3.5 prep. It doesn't look like I use dictionary comprehensions all that much, so you can try the following, then report any subsequent errors. ```; return {db: odb.integer_reactions() for db, odb in self.dbdict.items()} # replace this; return dict((db, odb.integer_reactions()) for db, odb in self.dbdict.items()) # with this; ```. Or, would you like to give python 2.7 a try? Do the binary instructions (http://psicode.org/psi4manual/master/conda.html#quick-installation) through the `conda update` step (replace ""Linux"" with ""MacOSX"" in installer file name, if on Mac), be sure your `which python` points to 2.7, then compile psi4 with `--python $MINICONDA/bin/python`. When we get around to supporting python3.5, python2.6 support may go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196346044
https://github.com/psi4/psi4/issues/310#issuecomment-196346044:606,Deployability,install,installation,606,"Oh bother, python 2.6 doesn't have dictionary comprehensions. I updated qcdb within the last couple weeks with accumulated improvements and python 3.5 prep. It doesn't look like I use dictionary comprehensions all that much, so you can try the following, then report any subsequent errors. ```; return {db: odb.integer_reactions() for db, odb in self.dbdict.items()} # replace this; return dict((db, odb.integer_reactions()) for db, odb in self.dbdict.items()) # with this; ```. Or, would you like to give python 2.7 a try? Do the binary instructions (http://psicode.org/psi4manual/master/conda.html#quick-installation) through the `conda update` step (replace ""Linux"" with ""MacOSX"" in installer file name, if on Mac), be sure your `which python` points to 2.7, then compile psi4 with `--python $MINICONDA/bin/python`. When we get around to supporting python3.5, python2.6 support may go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196346044
https://github.com/psi4/psi4/issues/310#issuecomment-196346044:639,Deployability,update,update,639,"Oh bother, python 2.6 doesn't have dictionary comprehensions. I updated qcdb within the last couple weeks with accumulated improvements and python 3.5 prep. It doesn't look like I use dictionary comprehensions all that much, so you can try the following, then report any subsequent errors. ```; return {db: odb.integer_reactions() for db, odb in self.dbdict.items()} # replace this; return dict((db, odb.integer_reactions()) for db, odb in self.dbdict.items()) # with this; ```. Or, would you like to give python 2.7 a try? Do the binary instructions (http://psicode.org/psi4manual/master/conda.html#quick-installation) through the `conda update` step (replace ""Linux"" with ""MacOSX"" in installer file name, if on Mac), be sure your `which python` points to 2.7, then compile psi4 with `--python $MINICONDA/bin/python`. When we get around to supporting python3.5, python2.6 support may go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196346044
https://github.com/psi4/psi4/issues/310#issuecomment-196346044:686,Deployability,install,installer,686,"Oh bother, python 2.6 doesn't have dictionary comprehensions. I updated qcdb within the last couple weeks with accumulated improvements and python 3.5 prep. It doesn't look like I use dictionary comprehensions all that much, so you can try the following, then report any subsequent errors. ```; return {db: odb.integer_reactions() for db, odb in self.dbdict.items()} # replace this; return dict((db, odb.integer_reactions()) for db, odb in self.dbdict.items()) # with this; ```. Or, would you like to give python 2.7 a try? Do the binary instructions (http://psicode.org/psi4manual/master/conda.html#quick-installation) through the `conda update` step (replace ""Linux"" with ""MacOSX"" in installer file name, if on Mac), be sure your `which python` points to 2.7, then compile psi4 with `--python $MINICONDA/bin/python`. When we get around to supporting python3.5, python2.6 support may go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196346044
https://github.com/psi4/psi4/issues/310#issuecomment-196569625:435,Availability,error,errors,435,"OK, switched to python 2.7 and all is fine.; -Rollin. On Mon, Mar 14, 2016 at 9:48 AM, Lori A. Burns notifications@github.com; wrote:. > Oh bother, python 2.6 doesn't have dictionary comprehensions. I updated; > qcdb within the last couple weeks with accumulated improvements and python; > 3.5 prep.; > ; > It doesn't look like I use dictionary comprehensions all that much, so you; > can try the following, then report any subsequent errors.; > ; > ```; > return {db: odb.integer_reactions() for db, odb in self.dbdict.items()} # replace this; > return dict((db, odb.integer_reactions()) for db, odb in self.dbdict.items()) # with this; > ```; > ; > Or, would you like to give python 2.7 a try? Do the binary instructions (; > http://psicode.org/psi4manual/master/conda.html#quick-installation); > through the conda update step (replace ""Linux"" with ""MacOSX"" in installer; > file name, if on Mac), be sure your which python points to 2.7, then; > compile psi4 with --python $MINICONDA/bin/python. When we get around to; > supporting python3.5, python2.6 support may go.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196346044.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196569625
https://github.com/psi4/psi4/issues/310#issuecomment-196569625:201,Deployability,update,updated,201,"OK, switched to python 2.7 and all is fine.; -Rollin. On Mon, Mar 14, 2016 at 9:48 AM, Lori A. Burns notifications@github.com; wrote:. > Oh bother, python 2.6 doesn't have dictionary comprehensions. I updated; > qcdb within the last couple weeks with accumulated improvements and python; > 3.5 prep.; > ; > It doesn't look like I use dictionary comprehensions all that much, so you; > can try the following, then report any subsequent errors.; > ; > ```; > return {db: odb.integer_reactions() for db, odb in self.dbdict.items()} # replace this; > return dict((db, odb.integer_reactions()) for db, odb in self.dbdict.items()) # with this; > ```; > ; > Or, would you like to give python 2.7 a try? Do the binary instructions (; > http://psicode.org/psi4manual/master/conda.html#quick-installation); > through the conda update step (replace ""Linux"" with ""MacOSX"" in installer; > file name, if on Mac), be sure your which python points to 2.7, then; > compile psi4 with --python $MINICONDA/bin/python. When we get around to; > supporting python3.5, python2.6 support may go.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196346044.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196569625
https://github.com/psi4/psi4/issues/310#issuecomment-196569625:782,Deployability,install,installation,782,"OK, switched to python 2.7 and all is fine.; -Rollin. On Mon, Mar 14, 2016 at 9:48 AM, Lori A. Burns notifications@github.com; wrote:. > Oh bother, python 2.6 doesn't have dictionary comprehensions. I updated; > qcdb within the last couple weeks with accumulated improvements and python; > 3.5 prep.; > ; > It doesn't look like I use dictionary comprehensions all that much, so you; > can try the following, then report any subsequent errors.; > ; > ```; > return {db: odb.integer_reactions() for db, odb in self.dbdict.items()} # replace this; > return dict((db, odb.integer_reactions()) for db, odb in self.dbdict.items()) # with this; > ```; > ; > Or, would you like to give python 2.7 a try? Do the binary instructions (; > http://psicode.org/psi4manual/master/conda.html#quick-installation); > through the conda update step (replace ""Linux"" with ""MacOSX"" in installer; > file name, if on Mac), be sure your which python points to 2.7, then; > compile psi4 with --python $MINICONDA/bin/python. When we get around to; > supporting python3.5, python2.6 support may go.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196346044.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196569625
https://github.com/psi4/psi4/issues/310#issuecomment-196569625:817,Deployability,update,update,817,"OK, switched to python 2.7 and all is fine.; -Rollin. On Mon, Mar 14, 2016 at 9:48 AM, Lori A. Burns notifications@github.com; wrote:. > Oh bother, python 2.6 doesn't have dictionary comprehensions. I updated; > qcdb within the last couple weeks with accumulated improvements and python; > 3.5 prep.; > ; > It doesn't look like I use dictionary comprehensions all that much, so you; > can try the following, then report any subsequent errors.; > ; > ```; > return {db: odb.integer_reactions() for db, odb in self.dbdict.items()} # replace this; > return dict((db, odb.integer_reactions()) for db, odb in self.dbdict.items()) # with this; > ```; > ; > Or, would you like to give python 2.7 a try? Do the binary instructions (; > http://psicode.org/psi4manual/master/conda.html#quick-installation); > through the conda update step (replace ""Linux"" with ""MacOSX"" in installer; > file name, if on Mac), be sure your which python points to 2.7, then; > compile psi4 with --python $MINICONDA/bin/python. When we get around to; > supporting python3.5, python2.6 support may go.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196346044.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196569625
https://github.com/psi4/psi4/issues/310#issuecomment-196569625:863,Deployability,install,installer,863,"OK, switched to python 2.7 and all is fine.; -Rollin. On Mon, Mar 14, 2016 at 9:48 AM, Lori A. Burns notifications@github.com; wrote:. > Oh bother, python 2.6 doesn't have dictionary comprehensions. I updated; > qcdb within the last couple weeks with accumulated improvements and python; > 3.5 prep.; > ; > It doesn't look like I use dictionary comprehensions all that much, so you; > can try the following, then report any subsequent errors.; > ; > ```; > return {db: odb.integer_reactions() for db, odb in self.dbdict.items()} # replace this; > return dict((db, odb.integer_reactions()) for db, odb in self.dbdict.items()) # with this; > ```; > ; > Or, would you like to give python 2.7 a try? Do the binary instructions (; > http://psicode.org/psi4manual/master/conda.html#quick-installation); > through the conda update step (replace ""Linux"" with ""MacOSX"" in installer; > file name, if on Mac), be sure your which python points to 2.7, then; > compile psi4 with --python $MINICONDA/bin/python. When we get around to; > supporting python3.5, python2.6 support may go.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196346044.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196569625
https://github.com/psi4/psi4/issues/310#issuecomment-196683371:55,Integrability,message,message,55,"Thanks! fyi, if you include ""fixes #310"" in the commit message, it'll close the issue when the PR gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196683371
https://github.com/psi4/psi4/issues/311#issuecomment-195804600:1843,Deployability,toggle,toggle,1843,". Ugur matches Q-Chem. Molpro is fairly close to Q-Chem, though I'm really not sure about that input. ""rccsd"" ""calls spin-restricted open-shell coupled cluster program"" according to the manual, but this route through the code is not labeled enough for me to be confident of it. So detci is the odd one out, but good news is that its reference is sound.; > ; > program fc scf singles mp2corl mp2tot; > occ fc -25.94361432 -0.00068837 -0.05940725 -26.00302157; > detci fc -25.94361432 -0.06094168 -26.00455600; > qchem fc -25.94361432 -0.00068837 -0.05940725 -26.00302157; > molpro fc -25.94361432 -0.00054735 -0.05936497 -26.00297929; > $molecule; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > $end; > ; > $rem; > JOBTYPE sp; > unrestricted false; > n_frozen_core fc; > scf_guess sad; > BASIS cc-pVdZ; > basis2 6-31g; > correlation mp2; > THRESH 12; > SCF_CONVERGENCE 8; > SYM_IGNORE TRUE; > SYMMETRY FALSE; > MEM_TOTAL 1600; > MEM_STATIC 512; > INTEGRALS_BUFFER 512; > MAX_SCF_CYCLES 200; > $end; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type pk; > set mp2_type conv; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > set reference rohf; > ; > set qc_module detci # toggle detci/occ; > energy('mp2'); > memory,200,m; > nosym; > noorient; > angstrom; > geometry={; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > GTHRESH,ZERO=1.e-14,ONEINT=1.e-14,TWOINT=1.e-14,ENERGY=1.e-9; > ; > SET,CHARGE=1; > SET,SPIN=1; > ; > basis=cc-pVDZ; > ; > rhf; > rccsd; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/311.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-195804600
https://github.com/psi4/psi4/issues/311#issuecomment-195804600:1863,Energy Efficiency,energy,energy,1863,". Ugur matches Q-Chem. Molpro is fairly close to Q-Chem, though I'm really not sure about that input. ""rccsd"" ""calls spin-restricted open-shell coupled cluster program"" according to the manual, but this route through the code is not labeled enough for me to be confident of it. So detci is the odd one out, but good news is that its reference is sound.; > ; > program fc scf singles mp2corl mp2tot; > occ fc -25.94361432 -0.00068837 -0.05940725 -26.00302157; > detci fc -25.94361432 -0.06094168 -26.00455600; > qchem fc -25.94361432 -0.00068837 -0.05940725 -26.00302157; > molpro fc -25.94361432 -0.00054735 -0.05936497 -26.00297929; > $molecule; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > $end; > ; > $rem; > JOBTYPE sp; > unrestricted false; > n_frozen_core fc; > scf_guess sad; > BASIS cc-pVdZ; > basis2 6-31g; > correlation mp2; > THRESH 12; > SCF_CONVERGENCE 8; > SYM_IGNORE TRUE; > SYMMETRY FALSE; > MEM_TOTAL 1600; > MEM_STATIC 512; > INTEGRALS_BUFFER 512; > MAX_SCF_CYCLES 200; > $end; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type pk; > set mp2_type conv; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > set reference rohf; > ; > set qc_module detci # toggle detci/occ; > energy('mp2'); > memory,200,m; > nosym; > noorient; > angstrom; > geometry={; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > GTHRESH,ZERO=1.e-14,ONEINT=1.e-14,TWOINT=1.e-14,ENERGY=1.e-9; > ; > SET,CHARGE=1; > SET,SPIN=1; > ; > basis=cc-pVDZ; > ; > rhf; > rccsd; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/311.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-195804600
https://github.com/psi4/psi4/issues/311#issuecomment-195804600:2154,Energy Efficiency,ENERGY,ENERGY,2154,". Ugur matches Q-Chem. Molpro is fairly close to Q-Chem, though I'm really not sure about that input. ""rccsd"" ""calls spin-restricted open-shell coupled cluster program"" according to the manual, but this route through the code is not labeled enough for me to be confident of it. So detci is the odd one out, but good news is that its reference is sound.; > ; > program fc scf singles mp2corl mp2tot; > occ fc -25.94361432 -0.00068837 -0.05940725 -26.00302157; > detci fc -25.94361432 -0.06094168 -26.00455600; > qchem fc -25.94361432 -0.00068837 -0.05940725 -26.00302157; > molpro fc -25.94361432 -0.00054735 -0.05936497 -26.00297929; > $molecule; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > $end; > ; > $rem; > JOBTYPE sp; > unrestricted false; > n_frozen_core fc; > scf_guess sad; > BASIS cc-pVdZ; > basis2 6-31g; > correlation mp2; > THRESH 12; > SCF_CONVERGENCE 8; > SYM_IGNORE TRUE; > SYMMETRY FALSE; > MEM_TOTAL 1600; > MEM_STATIC 512; > INTEGRALS_BUFFER 512; > MAX_SCF_CYCLES 200; > $end; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type pk; > set mp2_type conv; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > set reference rohf; > ; > set qc_module detci # toggle detci/occ; > energy('mp2'); > memory,200,m; > nosym; > noorient; > angstrom; > geometry={; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > GTHRESH,ZERO=1.e-14,ONEINT=1.e-14,TWOINT=1.e-14,ENERGY=1.e-9; > ; > SET,CHARGE=1; > SET,SPIN=1; > ; > basis=cc-pVDZ; > ; > rhf; > rccsd; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/311.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-195804600
https://github.com/psi4/psi4/issues/311#issuecomment-195804600:2178,Energy Efficiency,CHARGE,CHARGE,2178,". Ugur matches Q-Chem. Molpro is fairly close to Q-Chem, though I'm really not sure about that input. ""rccsd"" ""calls spin-restricted open-shell coupled cluster program"" according to the manual, but this route through the code is not labeled enough for me to be confident of it. So detci is the odd one out, but good news is that its reference is sound.; > ; > program fc scf singles mp2corl mp2tot; > occ fc -25.94361432 -0.00068837 -0.05940725 -26.00302157; > detci fc -25.94361432 -0.06094168 -26.00455600; > qchem fc -25.94361432 -0.00068837 -0.05940725 -26.00302157; > molpro fc -25.94361432 -0.00054735 -0.05936497 -26.00297929; > $molecule; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > $end; > ; > $rem; > JOBTYPE sp; > unrestricted false; > n_frozen_core fc; > scf_guess sad; > BASIS cc-pVdZ; > basis2 6-31g; > correlation mp2; > THRESH 12; > SCF_CONVERGENCE 8; > SYM_IGNORE TRUE; > SYMMETRY FALSE; > MEM_TOTAL 1600; > MEM_STATIC 512; > INTEGRALS_BUFFER 512; > MAX_SCF_CYCLES 200; > $end; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type pk; > set mp2_type conv; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > set reference rohf; > ; > set qc_module detci # toggle detci/occ; > energy('mp2'); > memory,200,m; > nosym; > noorient; > angstrom; > geometry={; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > GTHRESH,ZERO=1.e-14,ONEINT=1.e-14,TWOINT=1.e-14,ENERGY=1.e-9; > ; > SET,CHARGE=1; > SET,SPIN=1; > ; > basis=cc-pVDZ; > ; > rhf; > rccsd; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/311.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-195804600
https://github.com/psi4/psi4/issues/311#issuecomment-195804600:543,Integrability,rout,route,543,"How far back can you run the ROHF MP2 code with DETCI? It might be good to double check that I have not broken anything in the past 6 months+. Cheers,; Daniel Smith. > On Mar 12, 2016, at 3:08 PM, Lori A. Burns notifications@github.com wrote:; > ; > @CDSherrill https://github.com/CDSherrill, here's the rohf mp2 results from a few programs. Ugur matches Q-Chem. Molpro is fairly close to Q-Chem, though I'm really not sure about that input. ""rccsd"" ""calls spin-restricted open-shell coupled cluster program"" according to the manual, but this route through the code is not labeled enough for me to be confident of it. So detci is the odd one out, but good news is that its reference is sound.; > ; > program fc scf singles mp2corl mp2tot; > occ fc -25.94361432 -0.00068837 -0.05940725 -26.00302157; > detci fc -25.94361432 -0.06094168 -26.00455600; > qchem fc -25.94361432 -0.00068837 -0.05940725 -26.00302157; > molpro fc -25.94361432 -0.00054735 -0.05936497 -26.00297929; > $molecule; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > $end; > ; > $rem; > JOBTYPE sp; > unrestricted false; > n_frozen_core fc; > scf_guess sad; > BASIS cc-pVdZ; > basis2 6-31g; > correlation mp2; > THRESH 12; > SCF_CONVERGENCE 8; > SYM_IGNORE TRUE; > SYMMETRY FALSE; > MEM_TOTAL 1600; > MEM_STATIC 512; > INTEGRALS_BUFFER 512; > MAX_SCF_CYCLES 200; > $end; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type pk; > set mp2_type conv; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > set reference rohf; > ; > set qc_module detci # toggle detci/occ; > energy('mp2'); > memory,200,m; > nosym; > noorient; > angstrom; > geometry={; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.0000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-195804600
https://github.com/psi4/psi4/issues/311#issuecomment-195805223:172,Security,secur,secure,172,"With some python-wrangling, I revived a beta5 (c. mid 2013), and detci is the same. You're exonerated, @dgasmith . (Note to anyone trying this, you'll have to run a mp4 to secure access to detci, since this was way before `qc_module`.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-195805223
https://github.com/psi4/psi4/issues/311#issuecomment-195805223:179,Security,access,access,179,"With some python-wrangling, I revived a beta5 (c. mid 2013), and detci is the same. You're exonerated, @dgasmith . (Note to anyone trying this, you'll have to run a mp4 to secure access to detci, since this was way before `qc_module`.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-195805223
https://github.com/psi4/psi4/issues/311#issuecomment-597618813:68,Energy Efficiency,efficient,efficient,68,"@andysim The Molpro devs claim their choice is more computationally efficient, see the bottom of this page: [https://www.molpro.net/info/2015.1/doc/manual/node374.html](url)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-597618813
https://github.com/psi4/psi4/issues/311#issuecomment-597662949:258,Energy Efficiency,Energy,Energy,258,"detci is the odd one out for all-electron, too. `detci`:; ```; ==> Starting MPn CI Computation <==. CalcInfo_->escf = -25.943614318544544; CalcInfo_->e0 = -20.206929918475634; CalcInfo_->enuc = 4.919538206883576; CalcInfo_->e1 = -10.656222606952486. n Corr. Energy E(MPn) n Corr. Energy E(MPn). 0 0.000000000000000 -15.287391711592058; 1 -10.656222606952486 -25.943614318544544; 1 -10.656222606954266 -25.943614318546324; 2 -0.062024390690629 -26.005638709235175 2 -0.062024390690629 -26.005638709235175; 3 -0.014835841878215 -26.020474551113388. MP2 energy saved. EMPn = -26.0056387092352. ==> Energetics <==. SCF energy = -25.943614318544544; Total MP energy = -26.005638709235175; ```. `CFOUR` (semicanonical default):; ```; ' ------------------------------------------------\n'; ' E(SCF) = -25.943614318546 a.u.\n'; ' E2(AA) = -0.001912085148 a.u.\n'; ' E2(BB) = -0.000092824531 a.u.\n'; ' E2(AB) = -0.057779155613 a.u.\n'; ' E2(SINGLE) = -0.000694049865 a.u.\n'; ' E2(TOT) = -0.059784065292 a.u.\n'; ' Total MP2 energy = -26.004092433703 a.u.\n'; ' ------------------------------------------------\n'; ```. `CFOUR` (forced standard orbitals):; ```; ' ------------------------------------------------\n'; ' E(SCF) = -25.943614318546 a.u.\n'; ' E2(AA) = -0.001908947129 a.u.\n'; ' E2(BB) = -0.000092848566 a.u.\n'; ' E2(AB) = -0.057404620910 a.u.\n'; ' E2(SINGLE) = -0.000687431838 a.u.\n'; ' E2(TOT) = -0.059406416605 a.u.\n'; ' Total MP2 energy = -26.003708166988 a.u.\n'; ' ------------------------------------------------\n'; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-597662949
https://github.com/psi4/psi4/issues/311#issuecomment-597662949:280,Energy Efficiency,Energy,Energy,280,"detci is the odd one out for all-electron, too. `detci`:; ```; ==> Starting MPn CI Computation <==. CalcInfo_->escf = -25.943614318544544; CalcInfo_->e0 = -20.206929918475634; CalcInfo_->enuc = 4.919538206883576; CalcInfo_->e1 = -10.656222606952486. n Corr. Energy E(MPn) n Corr. Energy E(MPn). 0 0.000000000000000 -15.287391711592058; 1 -10.656222606952486 -25.943614318544544; 1 -10.656222606954266 -25.943614318546324; 2 -0.062024390690629 -26.005638709235175 2 -0.062024390690629 -26.005638709235175; 3 -0.014835841878215 -26.020474551113388. MP2 energy saved. EMPn = -26.0056387092352. ==> Energetics <==. SCF energy = -25.943614318544544; Total MP energy = -26.005638709235175; ```. `CFOUR` (semicanonical default):; ```; ' ------------------------------------------------\n'; ' E(SCF) = -25.943614318546 a.u.\n'; ' E2(AA) = -0.001912085148 a.u.\n'; ' E2(BB) = -0.000092824531 a.u.\n'; ' E2(AB) = -0.057779155613 a.u.\n'; ' E2(SINGLE) = -0.000694049865 a.u.\n'; ' E2(TOT) = -0.059784065292 a.u.\n'; ' Total MP2 energy = -26.004092433703 a.u.\n'; ' ------------------------------------------------\n'; ```. `CFOUR` (forced standard orbitals):; ```; ' ------------------------------------------------\n'; ' E(SCF) = -25.943614318546 a.u.\n'; ' E2(AA) = -0.001908947129 a.u.\n'; ' E2(BB) = -0.000092848566 a.u.\n'; ' E2(AB) = -0.057404620910 a.u.\n'; ' E2(SINGLE) = -0.000687431838 a.u.\n'; ' E2(TOT) = -0.059406416605 a.u.\n'; ' Total MP2 energy = -26.003708166988 a.u.\n'; ' ------------------------------------------------\n'; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-597662949
https://github.com/psi4/psi4/issues/311#issuecomment-597662949:551,Energy Efficiency,energy,energy,551,"detci is the odd one out for all-electron, too. `detci`:; ```; ==> Starting MPn CI Computation <==. CalcInfo_->escf = -25.943614318544544; CalcInfo_->e0 = -20.206929918475634; CalcInfo_->enuc = 4.919538206883576; CalcInfo_->e1 = -10.656222606952486. n Corr. Energy E(MPn) n Corr. Energy E(MPn). 0 0.000000000000000 -15.287391711592058; 1 -10.656222606952486 -25.943614318544544; 1 -10.656222606954266 -25.943614318546324; 2 -0.062024390690629 -26.005638709235175 2 -0.062024390690629 -26.005638709235175; 3 -0.014835841878215 -26.020474551113388. MP2 energy saved. EMPn = -26.0056387092352. ==> Energetics <==. SCF energy = -25.943614318544544; Total MP energy = -26.005638709235175; ```. `CFOUR` (semicanonical default):; ```; ' ------------------------------------------------\n'; ' E(SCF) = -25.943614318546 a.u.\n'; ' E2(AA) = -0.001912085148 a.u.\n'; ' E2(BB) = -0.000092824531 a.u.\n'; ' E2(AB) = -0.057779155613 a.u.\n'; ' E2(SINGLE) = -0.000694049865 a.u.\n'; ' E2(TOT) = -0.059784065292 a.u.\n'; ' Total MP2 energy = -26.004092433703 a.u.\n'; ' ------------------------------------------------\n'; ```. `CFOUR` (forced standard orbitals):; ```; ' ------------------------------------------------\n'; ' E(SCF) = -25.943614318546 a.u.\n'; ' E2(AA) = -0.001908947129 a.u.\n'; ' E2(BB) = -0.000092848566 a.u.\n'; ' E2(AB) = -0.057404620910 a.u.\n'; ' E2(SINGLE) = -0.000687431838 a.u.\n'; ' E2(TOT) = -0.059406416605 a.u.\n'; ' Total MP2 energy = -26.003708166988 a.u.\n'; ' ------------------------------------------------\n'; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-597662949
https://github.com/psi4/psi4/issues/311#issuecomment-597662949:615,Energy Efficiency,energy,energy,615,"detci is the odd one out for all-electron, too. `detci`:; ```; ==> Starting MPn CI Computation <==. CalcInfo_->escf = -25.943614318544544; CalcInfo_->e0 = -20.206929918475634; CalcInfo_->enuc = 4.919538206883576; CalcInfo_->e1 = -10.656222606952486. n Corr. Energy E(MPn) n Corr. Energy E(MPn). 0 0.000000000000000 -15.287391711592058; 1 -10.656222606952486 -25.943614318544544; 1 -10.656222606954266 -25.943614318546324; 2 -0.062024390690629 -26.005638709235175 2 -0.062024390690629 -26.005638709235175; 3 -0.014835841878215 -26.020474551113388. MP2 energy saved. EMPn = -26.0056387092352. ==> Energetics <==. SCF energy = -25.943614318544544; Total MP energy = -26.005638709235175; ```. `CFOUR` (semicanonical default):; ```; ' ------------------------------------------------\n'; ' E(SCF) = -25.943614318546 a.u.\n'; ' E2(AA) = -0.001912085148 a.u.\n'; ' E2(BB) = -0.000092824531 a.u.\n'; ' E2(AB) = -0.057779155613 a.u.\n'; ' E2(SINGLE) = -0.000694049865 a.u.\n'; ' E2(TOT) = -0.059784065292 a.u.\n'; ' Total MP2 energy = -26.004092433703 a.u.\n'; ' ------------------------------------------------\n'; ```. `CFOUR` (forced standard orbitals):; ```; ' ------------------------------------------------\n'; ' E(SCF) = -25.943614318546 a.u.\n'; ' E2(AA) = -0.001908947129 a.u.\n'; ' E2(BB) = -0.000092848566 a.u.\n'; ' E2(AB) = -0.057404620910 a.u.\n'; ' E2(SINGLE) = -0.000687431838 a.u.\n'; ' E2(TOT) = -0.059406416605 a.u.\n'; ' Total MP2 energy = -26.003708166988 a.u.\n'; ' ------------------------------------------------\n'; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-597662949
https://github.com/psi4/psi4/issues/311#issuecomment-597662949:654,Energy Efficiency,energy,energy,654,"detci is the odd one out for all-electron, too. `detci`:; ```; ==> Starting MPn CI Computation <==. CalcInfo_->escf = -25.943614318544544; CalcInfo_->e0 = -20.206929918475634; CalcInfo_->enuc = 4.919538206883576; CalcInfo_->e1 = -10.656222606952486. n Corr. Energy E(MPn) n Corr. Energy E(MPn). 0 0.000000000000000 -15.287391711592058; 1 -10.656222606952486 -25.943614318544544; 1 -10.656222606954266 -25.943614318546324; 2 -0.062024390690629 -26.005638709235175 2 -0.062024390690629 -26.005638709235175; 3 -0.014835841878215 -26.020474551113388. MP2 energy saved. EMPn = -26.0056387092352. ==> Energetics <==. SCF energy = -25.943614318544544; Total MP energy = -26.005638709235175; ```. `CFOUR` (semicanonical default):; ```; ' ------------------------------------------------\n'; ' E(SCF) = -25.943614318546 a.u.\n'; ' E2(AA) = -0.001912085148 a.u.\n'; ' E2(BB) = -0.000092824531 a.u.\n'; ' E2(AB) = -0.057779155613 a.u.\n'; ' E2(SINGLE) = -0.000694049865 a.u.\n'; ' E2(TOT) = -0.059784065292 a.u.\n'; ' Total MP2 energy = -26.004092433703 a.u.\n'; ' ------------------------------------------------\n'; ```. `CFOUR` (forced standard orbitals):; ```; ' ------------------------------------------------\n'; ' E(SCF) = -25.943614318546 a.u.\n'; ' E2(AA) = -0.001908947129 a.u.\n'; ' E2(BB) = -0.000092848566 a.u.\n'; ' E2(AB) = -0.057404620910 a.u.\n'; ' E2(SINGLE) = -0.000687431838 a.u.\n'; ' E2(TOT) = -0.059406416605 a.u.\n'; ' Total MP2 energy = -26.003708166988 a.u.\n'; ' ------------------------------------------------\n'; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-597662949
https://github.com/psi4/psi4/issues/311#issuecomment-597662949:1017,Energy Efficiency,energy,energy,1017,"detci is the odd one out for all-electron, too. `detci`:; ```; ==> Starting MPn CI Computation <==. CalcInfo_->escf = -25.943614318544544; CalcInfo_->e0 = -20.206929918475634; CalcInfo_->enuc = 4.919538206883576; CalcInfo_->e1 = -10.656222606952486. n Corr. Energy E(MPn) n Corr. Energy E(MPn). 0 0.000000000000000 -15.287391711592058; 1 -10.656222606952486 -25.943614318544544; 1 -10.656222606954266 -25.943614318546324; 2 -0.062024390690629 -26.005638709235175 2 -0.062024390690629 -26.005638709235175; 3 -0.014835841878215 -26.020474551113388. MP2 energy saved. EMPn = -26.0056387092352. ==> Energetics <==. SCF energy = -25.943614318544544; Total MP energy = -26.005638709235175; ```. `CFOUR` (semicanonical default):; ```; ' ------------------------------------------------\n'; ' E(SCF) = -25.943614318546 a.u.\n'; ' E2(AA) = -0.001912085148 a.u.\n'; ' E2(BB) = -0.000092824531 a.u.\n'; ' E2(AB) = -0.057779155613 a.u.\n'; ' E2(SINGLE) = -0.000694049865 a.u.\n'; ' E2(TOT) = -0.059784065292 a.u.\n'; ' Total MP2 energy = -26.004092433703 a.u.\n'; ' ------------------------------------------------\n'; ```. `CFOUR` (forced standard orbitals):; ```; ' ------------------------------------------------\n'; ' E(SCF) = -25.943614318546 a.u.\n'; ' E2(AA) = -0.001908947129 a.u.\n'; ' E2(BB) = -0.000092848566 a.u.\n'; ' E2(AB) = -0.057404620910 a.u.\n'; ' E2(SINGLE) = -0.000687431838 a.u.\n'; ' E2(TOT) = -0.059406416605 a.u.\n'; ' Total MP2 energy = -26.003708166988 a.u.\n'; ' ------------------------------------------------\n'; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-597662949
https://github.com/psi4/psi4/issues/311#issuecomment-597662949:1443,Energy Efficiency,energy,energy,1443,"detci is the odd one out for all-electron, too. `detci`:; ```; ==> Starting MPn CI Computation <==. CalcInfo_->escf = -25.943614318544544; CalcInfo_->e0 = -20.206929918475634; CalcInfo_->enuc = 4.919538206883576; CalcInfo_->e1 = -10.656222606952486. n Corr. Energy E(MPn) n Corr. Energy E(MPn). 0 0.000000000000000 -15.287391711592058; 1 -10.656222606952486 -25.943614318544544; 1 -10.656222606954266 -25.943614318546324; 2 -0.062024390690629 -26.005638709235175 2 -0.062024390690629 -26.005638709235175; 3 -0.014835841878215 -26.020474551113388. MP2 energy saved. EMPn = -26.0056387092352. ==> Energetics <==. SCF energy = -25.943614318544544; Total MP energy = -26.005638709235175; ```. `CFOUR` (semicanonical default):; ```; ' ------------------------------------------------\n'; ' E(SCF) = -25.943614318546 a.u.\n'; ' E2(AA) = -0.001912085148 a.u.\n'; ' E2(BB) = -0.000092824531 a.u.\n'; ' E2(AB) = -0.057779155613 a.u.\n'; ' E2(SINGLE) = -0.000694049865 a.u.\n'; ' E2(TOT) = -0.059784065292 a.u.\n'; ' Total MP2 energy = -26.004092433703 a.u.\n'; ' ------------------------------------------------\n'; ```. `CFOUR` (forced standard orbitals):; ```; ' ------------------------------------------------\n'; ' E(SCF) = -25.943614318546 a.u.\n'; ' E2(AA) = -0.001908947129 a.u.\n'; ' E2(BB) = -0.000092848566 a.u.\n'; ' E2(AB) = -0.057404620910 a.u.\n'; ' E2(SINGLE) = -0.000687431838 a.u.\n'; ' E2(TOT) = -0.059406416605 a.u.\n'; ' Total MP2 energy = -26.003708166988 a.u.\n'; ' ------------------------------------------------\n'; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-597662949
https://github.com/psi4/psi4/issues/311#issuecomment-597669953:78,Usability,clear,clear,78,"Interesting find, @Diazonium. I'm probably being very slow here, but it's not clear to me why the core orbitals will need to be transformed in either version of the algorithm. *If* they are neglected in both algorithm, the only efficiency gain would be the neglect of the frozen orbitals in the diagonalization, which would be negligible. @loriab Steven Wheeler wrote an arbitrary order ZAPT (z averaged perturbation theory) implementation for DETCI back in the day. I wonder if that's what's being activated? That method doesn't break the alpha-beta symmetry and is quite different to semicanonical ROMP theory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-597669953
https://github.com/psi4/psi4/issues/311#issuecomment-597871392:69,Energy Efficiency,energy,energy,69,"Yes, that's a handy Molpro page to keep bookmarked, thanks!. sadly, `energy('zapt2')` is a different call with a different answer. . ``` ==> Starting MPn CI Computation <==. CalcInfo_->escf = -25.943614318544558; CalcInfo_->e0 = -20.492192306874799; CalcInfo_->enuc = 4.919538206883576; CalcInfo_->e1 = -10.370960218553336. n Corr. Energy E(ZAPTn) n Corr. Energy E(ZAPTn). 0 0.000000000000000 -15.572654099991222; 1 -10.370960218553336 -25.943614318544558; 1 -10.370960218555073 -25.943614318546295; 2 -0.059970897144711 -26.003585215689270 2 -0.059970897144711 -26.003585215689270; 3 -0.015564779310290 -26.019149994999559. ZAPT2 energy saved. EZAPTn = -26.0035852156893; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-597871392
https://github.com/psi4/psi4/issues/311#issuecomment-597871392:332,Energy Efficiency,Energy,Energy,332,"Yes, that's a handy Molpro page to keep bookmarked, thanks!. sadly, `energy('zapt2')` is a different call with a different answer. . ``` ==> Starting MPn CI Computation <==. CalcInfo_->escf = -25.943614318544558; CalcInfo_->e0 = -20.492192306874799; CalcInfo_->enuc = 4.919538206883576; CalcInfo_->e1 = -10.370960218553336. n Corr. Energy E(ZAPTn) n Corr. Energy E(ZAPTn). 0 0.000000000000000 -15.572654099991222; 1 -10.370960218553336 -25.943614318544558; 1 -10.370960218555073 -25.943614318546295; 2 -0.059970897144711 -26.003585215689270 2 -0.059970897144711 -26.003585215689270; 3 -0.015564779310290 -26.019149994999559. ZAPT2 energy saved. EZAPTn = -26.0035852156893; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-597871392
https://github.com/psi4/psi4/issues/311#issuecomment-597871392:356,Energy Efficiency,Energy,Energy,356,"Yes, that's a handy Molpro page to keep bookmarked, thanks!. sadly, `energy('zapt2')` is a different call with a different answer. . ``` ==> Starting MPn CI Computation <==. CalcInfo_->escf = -25.943614318544558; CalcInfo_->e0 = -20.492192306874799; CalcInfo_->enuc = 4.919538206883576; CalcInfo_->e1 = -10.370960218553336. n Corr. Energy E(ZAPTn) n Corr. Energy E(ZAPTn). 0 0.000000000000000 -15.572654099991222; 1 -10.370960218553336 -25.943614318544558; 1 -10.370960218555073 -25.943614318546295; 2 -0.059970897144711 -26.003585215689270 2 -0.059970897144711 -26.003585215689270; 3 -0.015564779310290 -26.019149994999559. ZAPT2 energy saved. EZAPTn = -26.0035852156893; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-597871392
https://github.com/psi4/psi4/issues/311#issuecomment-597871392:631,Energy Efficiency,energy,energy,631,"Yes, that's a handy Molpro page to keep bookmarked, thanks!. sadly, `energy('zapt2')` is a different call with a different answer. . ``` ==> Starting MPn CI Computation <==. CalcInfo_->escf = -25.943614318544558; CalcInfo_->e0 = -20.492192306874799; CalcInfo_->enuc = 4.919538206883576; CalcInfo_->e1 = -10.370960218553336. n Corr. Energy E(ZAPTn) n Corr. Energy E(ZAPTn). 0 0.000000000000000 -15.572654099991222; 1 -10.370960218553336 -25.943614318544558; 1 -10.370960218555073 -25.943614318546295; 2 -0.059970897144711 -26.003585215689270 2 -0.059970897144711 -26.003585215689270; 3 -0.015564779310290 -26.019149994999559. ZAPT2 energy saved. EZAPTn = -26.0035852156893; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-597871392
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:2065,Availability,Error,Errors,2065,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:155,Testability,test,tests,155,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:200,Testability,test,tests,200,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:216,Testability,test,tests,216,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:289,Testability,test,tests,289,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:325,Testability,test,tests,325,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:356,Testability,test,tests,356,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:386,Testability,test,tests,386,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:417,Testability,test,tests,417,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:446,Testability,test,tests,446,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:473,Testability,test,test,473,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:502,Testability,test,tests,502,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:535,Testability,test,test,535,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:566,Testability,test,tests,566,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:596,Testability,test,tests,596,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:626,Testability,test,test,626,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:660,Testability,test,test,660,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:690,Testability,test,test,690,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:720,Testability,test,test,720,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:755,Testability,test,test,755,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:787,Testability,test,test,787,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:818,Testability,test,test,818,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:849,Testability,test,test,849,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:879,Testability,test,tests,879,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:910,Testability,test,tests,910,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:943,Testability,test,tests,943,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:974,Testability,test,tests,974,"Thank you very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1005,Testability,test,test,1005," very much! I've passed -DBUILD_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1035,Testability,test,tests,1035,"D_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywra",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1064,Testability,test,tests,1064,"p script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Erro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1093,Testability,test,tests,1093,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1126,Testability,test,tests,1126,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1157,Testability,test,tests,1157,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1186,Testability,test,test,1186,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1220,Testability,test,tests,1220,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1251,Testability,test,tests,1251,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1288,Testability,test,tests,1288,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1318,Testability,test,tests,1318,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1349,Testability,test,tests,1349,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1381,Testability,test,tests,1381,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1412,Testability,test,tests,1412,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1443,Testability,test,tests,1443,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1473,Testability,test,tests,1473,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1504,Testability,test,tests,1504,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1540,Testability,test,tests,1540,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1573,Testability,test,tests,1573,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1606,Testability,test,tests,1606,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1639,Testability,test,tests,1639,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1677,Testability,test,tests,1677,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1708,Testability,test,tests,1708,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1740,Testability,test,tests,1740,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1771,Testability,test,tests,1771,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1811,Testability,test,tests,1811,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1843,Testability,test,tests,1843,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1877,Testability,test,tests,1877,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1911,Testability,test,tests,1911,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1939,Testability,test,tests,1939,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1959,Testability,Test,Test,1959,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196383757:2011,Testability,test,tests,2011,"on and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywrap-opt-sowreap (Failed); > Errors while running CTest",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757
https://github.com/psi4/psi4/issues/312#issuecomment-196388183:100,Deployability,update,updated,100,"We recently overhauled large tracks of Psi4, this test should fail at the moment as we have not yet updated it to align with the new changes. Glad everything compiles now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196388183
https://github.com/psi4/psi4/issues/312#issuecomment-196388183:50,Testability,test,test,50,"We recently overhauled large tracks of Psi4, this test should fail at the moment as we have not yet updated it to align with the new changes. Glad everything compiles now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196388183
https://github.com/psi4/psi4/issues/313#issuecomment-196520712:749,Modifiability,Config,ConfigBoost,749,"I don't have a solution, but thanks for the nice exposition of the problem. I'm a little troubled that your ""... after this point if hombrew boost is unlinked"" output doesn't have python. If any of `filesystem python regex serialization system timer chrono thread` are missing, it'll trigger building the prepackaged. Would you check again that _all_ those are present as `.a` in your anaconda package? I have gotten psi4 to link against pre-built boost conda packages before on Linux, so the problem is definitely not purely that (though it sounds like it could be an affinity to frameworks thing that crops up on Mac). If you don't have all those `.a`s but do have the `.so`s, you could try toggling https://github.com/psi4/psi4/blob/master/cmake/ConfigBoost.cmake#L14 . If the above comes up clean, would you want to try; `-DBoost_ADDITIONAL_VERSIONS=1.59 -DBOOST_ROOT=$HOME/anaconda/envs/psi4-py2.7` ? There's no particular reason it'd work, but it's covering a couple more bases.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-196520712
https://github.com/psi4/psi4/issues/313#issuecomment-196536537:180,Deployability,toggle,toggled,180,@loriab ah! I didn't even check for `.a`s vs `.so`s. It looks like the conda recipe passes the shared flag to `b2` so I only had the `.dylib`s for almost all of the libraries. . I toggled the `Boost_USE_STATIC_LIBS` flag in `ConfigBoost.cmake` and the paths appear to be set correctly to find the `.dylib`s in `$HOME/anaconda/envs/psi4-py2.7`. I am checking to make sure that compiles fine now. ( I have to admit I don't really know what the difference between `.so` and `.dylib` is but CMake seems to think the `.dylib`s are okay. . I also modified the recipe so I can build the `.a`s as well. I report back later this evening after I check these options with hombrew boost linked/unlinked to see if having the .`a`s in the search path stops CMake from using the home-brew binaries. . Thanks for the help.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-196536537
https://github.com/psi4/psi4/issues/313#issuecomment-196536537:225,Modifiability,Config,ConfigBoost,225,@loriab ah! I didn't even check for `.a`s vs `.so`s. It looks like the conda recipe passes the shared flag to `b2` so I only had the `.dylib`s for almost all of the libraries. . I toggled the `Boost_USE_STATIC_LIBS` flag in `ConfigBoost.cmake` and the paths appear to be set correctly to find the `.dylib`s in `$HOME/anaconda/envs/psi4-py2.7`. I am checking to make sure that compiles fine now. ( I have to admit I don't really know what the difference between `.so` and `.dylib` is but CMake seems to think the `.dylib`s are okay. . I also modified the recipe so I can build the `.a`s as well. I report back later this evening after I check these options with hombrew boost linked/unlinked to see if having the .`a`s in the search path stops CMake from using the home-brew binaries. . Thanks for the help.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-196536537
https://github.com/psi4/psi4/issues/313#issuecomment-198164795:674,Availability,error,error,674,"I can build+link against my local install of boost successfully, using the modified conda recipe to build the static libs, but only if the hombrew boost is unlinked at setup, _and_ compile time.. . If the homebrew boost is linked at the time I run the `setup` script I will end up with the same issue where the local (boost 1.59.0) headers are in the boost inc paths, but the homebrew (1.60.0) libraries end up in the boost lib paths. . If hombrew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible ver",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795
https://github.com/psi4/psi4/issues/313#issuecomment-198164795:978,Availability,error,errors,978,"I can build+link against my local install of boost successfully, using the modified conda recipe to build the static libs, but only if the hombrew boost is unlinked at setup, _and_ compile time.. . If the homebrew boost is linked at the time I run the `setup` script I will end up with the same issue where the local (boost 1.59.0) headers are in the boost inc paths, but the homebrew (1.60.0) libraries end up in the boost lib paths. . If hombrew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible ver",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795
https://github.com/psi4/psi4/issues/313#issuecomment-198164795:34,Deployability,install,install,34,"I can build+link against my local install of boost successfully, using the modified conda recipe to build the static libs, but only if the hombrew boost is unlinked at setup, _and_ compile time.. . If the homebrew boost is linked at the time I run the `setup` script I will end up with the same issue where the local (boost 1.59.0) headers are in the boost inc paths, but the homebrew (1.60.0) libraries end up in the boost lib paths. . If hombrew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible ver",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795
https://github.com/psi4/psi4/issues/313#issuecomment-198164795:576,Deployability,install,install,576,"I can build+link against my local install of boost successfully, using the modified conda recipe to build the static libs, but only if the hombrew boost is unlinked at setup, _and_ compile time.. . If the homebrew boost is linked at the time I run the `setup` script I will end up with the same issue where the local (boost 1.59.0) headers are in the boost inc paths, but the homebrew (1.60.0) libraries end up in the boost lib paths. . If hombrew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible ver",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795
https://github.com/psi4/psi4/issues/313#issuecomment-198164795:877,Deployability,install,installed,877,"I can build+link against my local install of boost successfully, using the modified conda recipe to build the static libs, but only if the hombrew boost is unlinked at setup, _and_ compile time.. . If the homebrew boost is linked at the time I run the `setup` script I will end up with the same issue where the local (boost 1.59.0) headers are in the boost inc paths, but the homebrew (1.60.0) libraries end up in the boost lib paths. . If hombrew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible ver",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795
https://github.com/psi4/psi4/issues/313#issuecomment-198164795:994,Deployability,install,installs,994,"st successfully, using the modified conda recipe to build the static libs, but only if the hombrew boost is unlinked at setup, _and_ compile time.. . If the homebrew boost is linked at the time I run the `setup` script I will end up with the same issue where the local (boost 1.59.0) headers are in the boost inc paths, but the homebrew (1.60.0) libraries end up in the boost lib paths. . If hombrew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible version of boost was detected it may have detected",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795
https://github.com/psi4/psi4/issues/313#issuecomment-198164795:1208,Deployability,install,installed,1208,"n the `setup` script I will end up with the same issue where the local (boost 1.59.0) headers are in the boost inc paths, but the homebrew (1.60.0) libraries end up in the boost lib paths. . If hombrew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible version of boost was detected it may have detected the desired headers, but not the correct binaries. because homebrew has installed boost 1.60.0 in `/usr/local`. Try running `brew unlink boost boost-python` and running setup/make again. . This may",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795
https://github.com/psi4/psi4/issues/313#issuecomment-198164795:1274,Deployability,install,install,1274,"n the `setup` script I will end up with the same issue where the local (boost 1.59.0) headers are in the boost inc paths, but the homebrew (1.60.0) libraries end up in the boost lib paths. . If hombrew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible version of boost was detected it may have detected the desired headers, but not the correct binaries. because homebrew has installed boost 1.60.0 in `/usr/local`. Try running `brew unlink boost boost-python` and running setup/make again. . This may",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795
https://github.com/psi4/psi4/issues/313#issuecomment-198164795:1422,Deployability,install,installed,1422,"f hombrew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible version of boost was detected it may have detected the desired headers, but not the correct binaries. because homebrew has installed boost 1.60.0 in `/usr/local`. Try running `brew unlink boost boost-python` and running setup/make again. . This may be related to the issue linked by @bennybp. It seems it has something to do with cmake find package on osx. I haven't seen any problems come up switching between different versions of python t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795
https://github.com/psi4/psi4/issues/313#issuecomment-198164795:1601,Deployability,install,installation,1601,"ew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible version of boost was detected it may have detected the desired headers, but not the correct binaries. because homebrew has installed boost 1.60.0 in `/usr/local`. Try running `brew unlink boost boost-python` and running setup/make again. . This may be related to the issue linked by @bennybp. It seems it has something to do with cmake find package on osx. I haven't seen any problems come up switching between different versions of python though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795
https://github.com/psi4/psi4/issues/313#issuecomment-198164795:1904,Deployability,install,installed,1904,"ew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible version of boost was detected it may have detected the desired headers, but not the correct binaries. because homebrew has installed boost 1.60.0 in `/usr/local`. Try running `brew unlink boost boost-python` and running setup/make again. . This may be related to the issue linked by @bennybp. It seems it has something to do with cmake find package on osx. I haven't seen any problems come up switching between different versions of python though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795
https://github.com/psi4/psi4/issues/313#issuecomment-198164795:2121,Deployability,install,installed,2121,"ew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible version of boost was detected it may have detected the desired headers, but not the correct binaries. because homebrew has installed boost 1.60.0 in `/usr/local`. Try running `brew unlink boost boost-python` and running setup/make again. . This may be related to the issue linked by @bennybp. It seems it has something to do with cmake find package on osx. I haven't seen any problems come up switching between different versions of python though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795
https://github.com/psi4/psi4/issues/313#issuecomment-198164795:1794,Safety,predict,predictable,1794,"ew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible version of boost was detected it may have detected the desired headers, but not the correct binaries. because homebrew has installed boost 1.60.0 in `/usr/local`. Try running `brew unlink boost boost-python` and running setup/make again. . This may be related to the issue linked by @bennybp. It seems it has something to do with cmake find package on osx. I haven't seen any problems come up switching between different versions of python though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795
https://github.com/psi4/psi4/issues/313#issuecomment-198164795:2019,Safety,detect,detected,2019,"ew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible version of boost was detected it may have detected the desired headers, but not the correct binaries. because homebrew has installed boost 1.60.0 in `/usr/local`. Try running `brew unlink boost boost-python` and running setup/make again. . This may be related to the issue linked by @bennybp. It seems it has something to do with cmake find package on osx. I haven't seen any problems come up switching between different versions of python though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795
https://github.com/psi4/psi4/issues/313#issuecomment-198164795:2040,Safety,detect,detected,2040,"ew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible version of boost was detected it may have detected the desired headers, but not the correct binaries. because homebrew has installed boost 1.60.0 in `/usr/local`. Try running `brew unlink boost boost-python` and running setup/make again. . This may be related to the issue linked by @bennybp. It seems it has something to do with cmake find package on osx. I haven't seen any problems come up switching between different versions of python though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795
https://github.com/psi4/psi4/pull/315#issuecomment-197012335:148,Deployability,update,updated,148,"I checked all the optimization tests. I saw no major problems. A few of the cases now converge a bit faster. . opt-lindep-change/input.dat could be updated to the current energy after 3 steps, but this is not essential as we don't fully optimize this case. for opt10: we've changed basis sets, which is the reason for the different energy in the new output.ref. For some of the older cases, the testing criterion should be tightened. Specifically for ; opt1, opt1-fd, opt4, and opt5. The default SCF algorithm changed from PK->DF, and these output's are older. So I expect someone simply reduced the checking to only 3 decimals to maintain a PASS. We should tighten this up and be able to get 6 decimals in the energy - at least 5 - in a full optimization, at least. Note for tests such as opt 2, pk is specified and 6 decimals are checked already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-197012335
https://github.com/psi4/psi4/pull/315#issuecomment-197012335:171,Energy Efficiency,energy,energy,171,"I checked all the optimization tests. I saw no major problems. A few of the cases now converge a bit faster. . opt-lindep-change/input.dat could be updated to the current energy after 3 steps, but this is not essential as we don't fully optimize this case. for opt10: we've changed basis sets, which is the reason for the different energy in the new output.ref. For some of the older cases, the testing criterion should be tightened. Specifically for ; opt1, opt1-fd, opt4, and opt5. The default SCF algorithm changed from PK->DF, and these output's are older. So I expect someone simply reduced the checking to only 3 decimals to maintain a PASS. We should tighten this up and be able to get 6 decimals in the energy - at least 5 - in a full optimization, at least. Note for tests such as opt 2, pk is specified and 6 decimals are checked already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-197012335
https://github.com/psi4/psi4/pull/315#issuecomment-197012335:332,Energy Efficiency,energy,energy,332,"I checked all the optimization tests. I saw no major problems. A few of the cases now converge a bit faster. . opt-lindep-change/input.dat could be updated to the current energy after 3 steps, but this is not essential as we don't fully optimize this case. for opt10: we've changed basis sets, which is the reason for the different energy in the new output.ref. For some of the older cases, the testing criterion should be tightened. Specifically for ; opt1, opt1-fd, opt4, and opt5. The default SCF algorithm changed from PK->DF, and these output's are older. So I expect someone simply reduced the checking to only 3 decimals to maintain a PASS. We should tighten this up and be able to get 6 decimals in the energy - at least 5 - in a full optimization, at least. Note for tests such as opt 2, pk is specified and 6 decimals are checked already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-197012335
https://github.com/psi4/psi4/pull/315#issuecomment-197012335:588,Energy Efficiency,reduce,reduced,588,"I checked all the optimization tests. I saw no major problems. A few of the cases now converge a bit faster. . opt-lindep-change/input.dat could be updated to the current energy after 3 steps, but this is not essential as we don't fully optimize this case. for opt10: we've changed basis sets, which is the reason for the different energy in the new output.ref. For some of the older cases, the testing criterion should be tightened. Specifically for ; opt1, opt1-fd, opt4, and opt5. The default SCF algorithm changed from PK->DF, and these output's are older. So I expect someone simply reduced the checking to only 3 decimals to maintain a PASS. We should tighten this up and be able to get 6 decimals in the energy - at least 5 - in a full optimization, at least. Note for tests such as opt 2, pk is specified and 6 decimals are checked already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-197012335
https://github.com/psi4/psi4/pull/315#issuecomment-197012335:711,Energy Efficiency,energy,energy,711,"I checked all the optimization tests. I saw no major problems. A few of the cases now converge a bit faster. . opt-lindep-change/input.dat could be updated to the current energy after 3 steps, but this is not essential as we don't fully optimize this case. for opt10: we've changed basis sets, which is the reason for the different energy in the new output.ref. For some of the older cases, the testing criterion should be tightened. Specifically for ; opt1, opt1-fd, opt4, and opt5. The default SCF algorithm changed from PK->DF, and these output's are older. So I expect someone simply reduced the checking to only 3 decimals to maintain a PASS. We should tighten this up and be able to get 6 decimals in the energy - at least 5 - in a full optimization, at least. Note for tests such as opt 2, pk is specified and 6 decimals are checked already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-197012335
https://github.com/psi4/psi4/pull/315#issuecomment-197012335:18,Performance,optimiz,optimization,18,"I checked all the optimization tests. I saw no major problems. A few of the cases now converge a bit faster. . opt-lindep-change/input.dat could be updated to the current energy after 3 steps, but this is not essential as we don't fully optimize this case. for opt10: we've changed basis sets, which is the reason for the different energy in the new output.ref. For some of the older cases, the testing criterion should be tightened. Specifically for ; opt1, opt1-fd, opt4, and opt5. The default SCF algorithm changed from PK->DF, and these output's are older. So I expect someone simply reduced the checking to only 3 decimals to maintain a PASS. We should tighten this up and be able to get 6 decimals in the energy - at least 5 - in a full optimization, at least. Note for tests such as opt 2, pk is specified and 6 decimals are checked already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-197012335
https://github.com/psi4/psi4/pull/315#issuecomment-197012335:237,Performance,optimiz,optimize,237,"I checked all the optimization tests. I saw no major problems. A few of the cases now converge a bit faster. . opt-lindep-change/input.dat could be updated to the current energy after 3 steps, but this is not essential as we don't fully optimize this case. for opt10: we've changed basis sets, which is the reason for the different energy in the new output.ref. For some of the older cases, the testing criterion should be tightened. Specifically for ; opt1, opt1-fd, opt4, and opt5. The default SCF algorithm changed from PK->DF, and these output's are older. So I expect someone simply reduced the checking to only 3 decimals to maintain a PASS. We should tighten this up and be able to get 6 decimals in the energy - at least 5 - in a full optimization, at least. Note for tests such as opt 2, pk is specified and 6 decimals are checked already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-197012335
https://github.com/psi4/psi4/pull/315#issuecomment-197012335:743,Performance,optimiz,optimization,743,"I checked all the optimization tests. I saw no major problems. A few of the cases now converge a bit faster. . opt-lindep-change/input.dat could be updated to the current energy after 3 steps, but this is not essential as we don't fully optimize this case. for opt10: we've changed basis sets, which is the reason for the different energy in the new output.ref. For some of the older cases, the testing criterion should be tightened. Specifically for ; opt1, opt1-fd, opt4, and opt5. The default SCF algorithm changed from PK->DF, and these output's are older. So I expect someone simply reduced the checking to only 3 decimals to maintain a PASS. We should tighten this up and be able to get 6 decimals in the energy - at least 5 - in a full optimization, at least. Note for tests such as opt 2, pk is specified and 6 decimals are checked already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-197012335
https://github.com/psi4/psi4/pull/315#issuecomment-197012335:31,Testability,test,tests,31,"I checked all the optimization tests. I saw no major problems. A few of the cases now converge a bit faster. . opt-lindep-change/input.dat could be updated to the current energy after 3 steps, but this is not essential as we don't fully optimize this case. for opt10: we've changed basis sets, which is the reason for the different energy in the new output.ref. For some of the older cases, the testing criterion should be tightened. Specifically for ; opt1, opt1-fd, opt4, and opt5. The default SCF algorithm changed from PK->DF, and these output's are older. So I expect someone simply reduced the checking to only 3 decimals to maintain a PASS. We should tighten this up and be able to get 6 decimals in the energy - at least 5 - in a full optimization, at least. Note for tests such as opt 2, pk is specified and 6 decimals are checked already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-197012335
https://github.com/psi4/psi4/pull/315#issuecomment-197012335:395,Testability,test,testing,395,"I checked all the optimization tests. I saw no major problems. A few of the cases now converge a bit faster. . opt-lindep-change/input.dat could be updated to the current energy after 3 steps, but this is not essential as we don't fully optimize this case. for opt10: we've changed basis sets, which is the reason for the different energy in the new output.ref. For some of the older cases, the testing criterion should be tightened. Specifically for ; opt1, opt1-fd, opt4, and opt5. The default SCF algorithm changed from PK->DF, and these output's are older. So I expect someone simply reduced the checking to only 3 decimals to maintain a PASS. We should tighten this up and be able to get 6 decimals in the energy - at least 5 - in a full optimization, at least. Note for tests such as opt 2, pk is specified and 6 decimals are checked already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-197012335
https://github.com/psi4/psi4/pull/315#issuecomment-197012335:776,Testability,test,tests,776,"I checked all the optimization tests. I saw no major problems. A few of the cases now converge a bit faster. . opt-lindep-change/input.dat could be updated to the current energy after 3 steps, but this is not essential as we don't fully optimize this case. for opt10: we've changed basis sets, which is the reason for the different energy in the new output.ref. For some of the older cases, the testing criterion should be tightened. Specifically for ; opt1, opt1-fd, opt4, and opt5. The default SCF algorithm changed from PK->DF, and these output's are older. So I expect someone simply reduced the checking to only 3 decimals to maintain a PASS. We should tighten this up and be able to get 6 decimals in the energy - at least 5 - in a full optimization, at least. Note for tests such as opt 2, pk is specified and 6 decimals are checked already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-197012335
https://github.com/psi4/psi4/pull/315#issuecomment-197012335:581,Usability,simpl,simply,581,"I checked all the optimization tests. I saw no major problems. A few of the cases now converge a bit faster. . opt-lindep-change/input.dat could be updated to the current energy after 3 steps, but this is not essential as we don't fully optimize this case. for opt10: we've changed basis sets, which is the reason for the different energy in the new output.ref. For some of the older cases, the testing criterion should be tightened. Specifically for ; opt1, opt1-fd, opt4, and opt5. The default SCF algorithm changed from PK->DF, and these output's are older. So I expect someone simply reduced the checking to only 3 decimals to maintain a PASS. We should tighten this up and be able to get 6 decimals in the energy - at least 5 - in a full optimization, at least. Note for tests such as opt 2, pk is specified and 6 decimals are checked already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-197012335
https://github.com/psi4/psi4/pull/315#issuecomment-202633405:62,Testability,test,test,62,@andysim @lothian @edeprince3 @bozkaya Can you check off your test cases or refer someone who can review them?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-202633405
https://github.com/psi4/psi4/pull/315#issuecomment-205091286:146,Security,validat,validated,146,"Sorry for the delay. The DCFT tests look good to me. I think we can also check of the CC tests; if I remember correctly, those tests are actually validated by comparing the output to the reference using a separate Perl script. If the tests run successfully, it means that the output is present and correct, or Perl wouldn't be able to parse it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205091286
https://github.com/psi4/psi4/pull/315#issuecomment-205091286:30,Testability,test,tests,30,"Sorry for the delay. The DCFT tests look good to me. I think we can also check of the CC tests; if I remember correctly, those tests are actually validated by comparing the output to the reference using a separate Perl script. If the tests run successfully, it means that the output is present and correct, or Perl wouldn't be able to parse it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205091286
https://github.com/psi4/psi4/pull/315#issuecomment-205091286:89,Testability,test,tests,89,"Sorry for the delay. The DCFT tests look good to me. I think we can also check of the CC tests; if I remember correctly, those tests are actually validated by comparing the output to the reference using a separate Perl script. If the tests run successfully, it means that the output is present and correct, or Perl wouldn't be able to parse it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205091286
https://github.com/psi4/psi4/pull/315#issuecomment-205091286:127,Testability,test,tests,127,"Sorry for the delay. The DCFT tests look good to me. I think we can also check of the CC tests; if I remember correctly, those tests are actually validated by comparing the output to the reference using a separate Perl script. If the tests run successfully, it means that the output is present and correct, or Perl wouldn't be able to parse it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205091286
https://github.com/psi4/psi4/pull/315#issuecomment-205091286:234,Testability,test,tests,234,"Sorry for the delay. The DCFT tests look good to me. I think we can also check of the CC tests; if I remember correctly, those tests are actually validated by comparing the output to the reference using a separate Perl script. If the tests run successfully, it means that the output is present and correct, or Perl wouldn't be able to parse it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205091286
https://github.com/psi4/psi4/pull/315#issuecomment-205094545:520,Security,validat,validated,520,"As a note: not all CC tests are tested through Perl. Actually looking at the output has caught a few bugs so far, although it does require someone intimately familiar with the tests to do so. I would be happy if we could get eyes on every test, but if it doesn’t happen its not a big deal. > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com wrote:; > ; > Sorry for the delay. The DCFT tests look good to me. I think we can also check of the CC tests; if I remember correctly, those tests are actually validated by comparing the output to the reference using a separate Perl script. If the tests run successfully, it means that the output is present and correct, or Perl wouldn't be able to parse it.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/pull/315#issuecomment-205091286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205094545
https://github.com/psi4/psi4/pull/315#issuecomment-205094545:22,Testability,test,tests,22,"As a note: not all CC tests are tested through Perl. Actually looking at the output has caught a few bugs so far, although it does require someone intimately familiar with the tests to do so. I would be happy if we could get eyes on every test, but if it doesn’t happen its not a big deal. > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com wrote:; > ; > Sorry for the delay. The DCFT tests look good to me. I think we can also check of the CC tests; if I remember correctly, those tests are actually validated by comparing the output to the reference using a separate Perl script. If the tests run successfully, it means that the output is present and correct, or Perl wouldn't be able to parse it.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/pull/315#issuecomment-205091286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205094545
https://github.com/psi4/psi4/pull/315#issuecomment-205094545:32,Testability,test,tested,32,"As a note: not all CC tests are tested through Perl. Actually looking at the output has caught a few bugs so far, although it does require someone intimately familiar with the tests to do so. I would be happy if we could get eyes on every test, but if it doesn’t happen its not a big deal. > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com wrote:; > ; > Sorry for the delay. The DCFT tests look good to me. I think we can also check of the CC tests; if I remember correctly, those tests are actually validated by comparing the output to the reference using a separate Perl script. If the tests run successfully, it means that the output is present and correct, or Perl wouldn't be able to parse it.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/pull/315#issuecomment-205091286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205094545
https://github.com/psi4/psi4/pull/315#issuecomment-205094545:176,Testability,test,tests,176,"As a note: not all CC tests are tested through Perl. Actually looking at the output has caught a few bugs so far, although it does require someone intimately familiar with the tests to do so. I would be happy if we could get eyes on every test, but if it doesn’t happen its not a big deal. > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com wrote:; > ; > Sorry for the delay. The DCFT tests look good to me. I think we can also check of the CC tests; if I remember correctly, those tests are actually validated by comparing the output to the reference using a separate Perl script. If the tests run successfully, it means that the output is present and correct, or Perl wouldn't be able to parse it.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/pull/315#issuecomment-205091286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205094545
https://github.com/psi4/psi4/pull/315#issuecomment-205094545:239,Testability,test,test,239,"As a note: not all CC tests are tested through Perl. Actually looking at the output has caught a few bugs so far, although it does require someone intimately familiar with the tests to do so. I would be happy if we could get eyes on every test, but if it doesn’t happen its not a big deal. > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com wrote:; > ; > Sorry for the delay. The DCFT tests look good to me. I think we can also check of the CC tests; if I remember correctly, those tests are actually validated by comparing the output to the reference using a separate Perl script. If the tests run successfully, it means that the output is present and correct, or Perl wouldn't be able to parse it.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/pull/315#issuecomment-205091286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205094545
https://github.com/psi4/psi4/pull/315#issuecomment-205094545:404,Testability,test,tests,404,"As a note: not all CC tests are tested through Perl. Actually looking at the output has caught a few bugs so far, although it does require someone intimately familiar with the tests to do so. I would be happy if we could get eyes on every test, but if it doesn’t happen its not a big deal. > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com wrote:; > ; > Sorry for the delay. The DCFT tests look good to me. I think we can also check of the CC tests; if I remember correctly, those tests are actually validated by comparing the output to the reference using a separate Perl script. If the tests run successfully, it means that the output is present and correct, or Perl wouldn't be able to parse it.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/pull/315#issuecomment-205091286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205094545
https://github.com/psi4/psi4/pull/315#issuecomment-205094545:463,Testability,test,tests,463,"As a note: not all CC tests are tested through Perl. Actually looking at the output has caught a few bugs so far, although it does require someone intimately familiar with the tests to do so. I would be happy if we could get eyes on every test, but if it doesn’t happen its not a big deal. > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com wrote:; > ; > Sorry for the delay. The DCFT tests look good to me. I think we can also check of the CC tests; if I remember correctly, those tests are actually validated by comparing the output to the reference using a separate Perl script. If the tests run successfully, it means that the output is present and correct, or Perl wouldn't be able to parse it.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/pull/315#issuecomment-205091286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205094545
https://github.com/psi4/psi4/pull/315#issuecomment-205094545:501,Testability,test,tests,501,"As a note: not all CC tests are tested through Perl. Actually looking at the output has caught a few bugs so far, although it does require someone intimately familiar with the tests to do so. I would be happy if we could get eyes on every test, but if it doesn’t happen its not a big deal. > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com wrote:; > ; > Sorry for the delay. The DCFT tests look good to me. I think we can also check of the CC tests; if I remember correctly, those tests are actually validated by comparing the output to the reference using a separate Perl script. If the tests run successfully, it means that the output is present and correct, or Perl wouldn't be able to parse it.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/pull/315#issuecomment-205091286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205094545
https://github.com/psi4/psi4/pull/315#issuecomment-205094545:608,Testability,test,tests,608,"As a note: not all CC tests are tested through Perl. Actually looking at the output has caught a few bugs so far, although it does require someone intimately familiar with the tests to do so. I would be happy if we could get eyes on every test, but if it doesn’t happen its not a big deal. > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com wrote:; > ; > Sorry for the delay. The DCFT tests look good to me. I think we can also check of the CC tests; if I remember correctly, those tests are actually validated by comparing the output to the reference using a separate Perl script. If the tests run successfully, it means that the output is present and correct, or Perl wouldn't be able to parse it.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/pull/315#issuecomment-205091286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205094545
https://github.com/psi4/psi4/pull/315#issuecomment-205097386:10,Deployability,update,update,10,"I need to update the test for cc5, which is currently failing even though; it's not run automagically. It seems that the reference output was; overwritten by an output from a failed calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Apr 3, 2016 at 9:10 PM, Daniel Smith notifications@github.com; wrote:. > As a note: not all CC tests are tested through Perl. Actually looking at; > the output has caught a few bugs so far, although it does require someone; > intimately familiar with the tests to do so.; > ; > I would be happy if we could get eyes on every test, but if it doesn’t; > happen its not a big deal.; > ; > > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com; > > wrote:; > > ; > > Sorry for the delay. The DCFT tests look good to me. I think we can also; > > check of the CC tests; if I remember correctly, those tests are actually; > > validated by comparing the output to the reference using a separate Perl; > > script. If the tests run successfully, it means that the output is present; > > and correct, or Perl wouldn't be able to parse it.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/pull/315#issuecomment-205091286>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205094545",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205097386
https://github.com/psi4/psi4/pull/315#issuecomment-205097386:891,Security,validat,validated,891,"I need to update the test for cc5, which is currently failing even though; it's not run automagically. It seems that the reference output was; overwritten by an output from a failed calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Apr 3, 2016 at 9:10 PM, Daniel Smith notifications@github.com; wrote:. > As a note: not all CC tests are tested through Perl. Actually looking at; > the output has caught a few bugs so far, although it does require someone; > intimately familiar with the tests to do so.; > ; > I would be happy if we could get eyes on every test, but if it doesn’t; > happen its not a big deal.; > ; > > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com; > > wrote:; > > ; > > Sorry for the delay. The DCFT tests look good to me. I think we can also; > > check of the CC tests; if I remember correctly, those tests are actually; > > validated by comparing the output to the reference using a separate Perl; > > script. If the tests run successfully, it means that the output is present; > > and correct, or Perl wouldn't be able to parse it.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/pull/315#issuecomment-205091286>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205094545",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205097386
https://github.com/psi4/psi4/pull/315#issuecomment-205097386:21,Testability,test,test,21,"I need to update the test for cc5, which is currently failing even though; it's not run automagically. It seems that the reference output was; overwritten by an output from a failed calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Apr 3, 2016 at 9:10 PM, Daniel Smith notifications@github.com; wrote:. > As a note: not all CC tests are tested through Perl. Actually looking at; > the output has caught a few bugs so far, although it does require someone; > intimately familiar with the tests to do so.; > ; > I would be happy if we could get eyes on every test, but if it doesn’t; > happen its not a big deal.; > ; > > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com; > > wrote:; > > ; > > Sorry for the delay. The DCFT tests look good to me. I think we can also; > > check of the CC tests; if I remember correctly, those tests are actually; > > validated by comparing the output to the reference using a separate Perl; > > script. If the tests run successfully, it means that the output is present; > > and correct, or Perl wouldn't be able to parse it.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/pull/315#issuecomment-205091286>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205094545",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205097386
https://github.com/psi4/psi4/pull/315#issuecomment-205097386:351,Testability,test,tests,351,"I need to update the test for cc5, which is currently failing even though; it's not run automagically. It seems that the reference output was; overwritten by an output from a failed calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Apr 3, 2016 at 9:10 PM, Daniel Smith notifications@github.com; wrote:. > As a note: not all CC tests are tested through Perl. Actually looking at; > the output has caught a few bugs so far, although it does require someone; > intimately familiar with the tests to do so.; > ; > I would be happy if we could get eyes on every test, but if it doesn’t; > happen its not a big deal.; > ; > > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com; > > wrote:; > > ; > > Sorry for the delay. The DCFT tests look good to me. I think we can also; > > check of the CC tests; if I remember correctly, those tests are actually; > > validated by comparing the output to the reference using a separate Perl; > > script. If the tests run successfully, it means that the output is present; > > and correct, or Perl wouldn't be able to parse it.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/pull/315#issuecomment-205091286>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205094545",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205097386
https://github.com/psi4/psi4/pull/315#issuecomment-205097386:361,Testability,test,tested,361,"I need to update the test for cc5, which is currently failing even though; it's not run automagically. It seems that the reference output was; overwritten by an output from a failed calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Apr 3, 2016 at 9:10 PM, Daniel Smith notifications@github.com; wrote:. > As a note: not all CC tests are tested through Perl. Actually looking at; > the output has caught a few bugs so far, although it does require someone; > intimately familiar with the tests to do so.; > ; > I would be happy if we could get eyes on every test, but if it doesn’t; > happen its not a big deal.; > ; > > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com; > > wrote:; > > ; > > Sorry for the delay. The DCFT tests look good to me. I think we can also; > > check of the CC tests; if I remember correctly, those tests are actually; > > validated by comparing the output to the reference using a separate Perl; > > script. If the tests run successfully, it means that the output is present; > > and correct, or Perl wouldn't be able to parse it.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/pull/315#issuecomment-205091286>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205094545",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205097386
https://github.com/psi4/psi4/pull/315#issuecomment-205097386:511,Testability,test,tests,511,"I need to update the test for cc5, which is currently failing even though; it's not run automagically. It seems that the reference output was; overwritten by an output from a failed calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Apr 3, 2016 at 9:10 PM, Daniel Smith notifications@github.com; wrote:. > As a note: not all CC tests are tested through Perl. Actually looking at; > the output has caught a few bugs so far, although it does require someone; > intimately familiar with the tests to do so.; > ; > I would be happy if we could get eyes on every test, but if it doesn’t; > happen its not a big deal.; > ; > > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com; > > wrote:; > > ; > > Sorry for the delay. The DCFT tests look good to me. I think we can also; > > check of the CC tests; if I remember correctly, those tests are actually; > > validated by comparing the output to the reference using a separate Perl; > > script. If the tests run successfully, it means that the output is present; > > and correct, or Perl wouldn't be able to parse it.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/pull/315#issuecomment-205091286>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205094545",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205097386
https://github.com/psi4/psi4/pull/315#issuecomment-205097386:581,Testability,test,test,581,"I need to update the test for cc5, which is currently failing even though; it's not run automagically. It seems that the reference output was; overwritten by an output from a failed calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Apr 3, 2016 at 9:10 PM, Daniel Smith notifications@github.com; wrote:. > As a note: not all CC tests are tested through Perl. Actually looking at; > the output has caught a few bugs so far, although it does require someone; > intimately familiar with the tests to do so.; > ; > I would be happy if we could get eyes on every test, but if it doesn’t; > happen its not a big deal.; > ; > > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com; > > wrote:; > > ; > > Sorry for the delay. The DCFT tests look good to me. I think we can also; > > check of the CC tests; if I remember correctly, those tests are actually; > > validated by comparing the output to the reference using a separate Perl; > > script. If the tests run successfully, it means that the output is present; > > and correct, or Perl wouldn't be able to parse it.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/pull/315#issuecomment-205091286>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205094545",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205097386
https://github.com/psi4/psi4/pull/315#issuecomment-205097386:765,Testability,test,tests,765,"I need to update the test for cc5, which is currently failing even though; it's not run automagically. It seems that the reference output was; overwritten by an output from a failed calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Apr 3, 2016 at 9:10 PM, Daniel Smith notifications@github.com; wrote:. > As a note: not all CC tests are tested through Perl. Actually looking at; > the output has caught a few bugs so far, although it does require someone; > intimately familiar with the tests to do so.; > ; > I would be happy if we could get eyes on every test, but if it doesn’t; > happen its not a big deal.; > ; > > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com; > > wrote:; > > ; > > Sorry for the delay. The DCFT tests look good to me. I think we can also; > > check of the CC tests; if I remember correctly, those tests are actually; > > validated by comparing the output to the reference using a separate Perl; > > script. If the tests run successfully, it means that the output is present; > > and correct, or Perl wouldn't be able to parse it.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/pull/315#issuecomment-205091286>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205094545",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205097386
https://github.com/psi4/psi4/pull/315#issuecomment-205097386:829,Testability,test,tests,829,"I need to update the test for cc5, which is currently failing even though; it's not run automagically. It seems that the reference output was; overwritten by an output from a failed calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Apr 3, 2016 at 9:10 PM, Daniel Smith notifications@github.com; wrote:. > As a note: not all CC tests are tested through Perl. Actually looking at; > the output has caught a few bugs so far, although it does require someone; > intimately familiar with the tests to do so.; > ; > I would be happy if we could get eyes on every test, but if it doesn’t; > happen its not a big deal.; > ; > > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com; > > wrote:; > > ; > > Sorry for the delay. The DCFT tests look good to me. I think we can also; > > check of the CC tests; if I remember correctly, those tests are actually; > > validated by comparing the output to the reference using a separate Perl; > > script. If the tests run successfully, it means that the output is present; > > and correct, or Perl wouldn't be able to parse it.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/pull/315#issuecomment-205091286>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205094545",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205097386
https://github.com/psi4/psi4/pull/315#issuecomment-205097386:867,Testability,test,tests,867,"I need to update the test for cc5, which is currently failing even though; it's not run automagically. It seems that the reference output was; overwritten by an output from a failed calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Apr 3, 2016 at 9:10 PM, Daniel Smith notifications@github.com; wrote:. > As a note: not all CC tests are tested through Perl. Actually looking at; > the output has caught a few bugs so far, although it does require someone; > intimately familiar with the tests to do so.; > ; > I would be happy if we could get eyes on every test, but if it doesn’t; > happen its not a big deal.; > ; > > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com; > > wrote:; > > ; > > Sorry for the delay. The DCFT tests look good to me. I think we can also; > > check of the CC tests; if I remember correctly, those tests are actually; > > validated by comparing the output to the reference using a separate Perl; > > script. If the tests run successfully, it means that the output is present; > > and correct, or Perl wouldn't be able to parse it.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/pull/315#issuecomment-205091286>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205094545",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205097386
https://github.com/psi4/psi4/pull/315#issuecomment-205097386:984,Testability,test,tests,984,"I need to update the test for cc5, which is currently failing even though; it's not run automagically. It seems that the reference output was; overwritten by an output from a failed calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Apr 3, 2016 at 9:10 PM, Daniel Smith notifications@github.com; wrote:. > As a note: not all CC tests are tested through Perl. Actually looking at; > the output has caught a few bugs so far, although it does require someone; > intimately familiar with the tests to do so.; > ; > I would be happy if we could get eyes on every test, but if it doesn’t; > happen its not a big deal.; > ; > > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com; > > wrote:; > > ; > > Sorry for the delay. The DCFT tests look good to me. I think we can also; > > check of the CC tests; if I remember correctly, those tests are actually; > > validated by comparing the output to the reference using a separate Perl; > > script. If the tests run successfully, it means that the output is present; > > and correct, or Perl wouldn't be able to parse it.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/pull/315#issuecomment-205091286>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205094545",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205097386
https://github.com/psi4/psi4/pull/315#issuecomment-205295386:60,Testability,test,tests,60,Sorry for my late response. It looks okay for OCC and DFOCC tests.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205295386
https://github.com/psi4/psi4/pull/315#issuecomment-205297042:81,Deployability,update,updated,81,"@lothian I fixed cc5 in this branch. cc5 now runs, passes, and the output.ref is updated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205297042
https://github.com/psi4/psi4/pull/315#issuecomment-205307609:265,Deployability,update,updated,265,"What was the bug in cc5?. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Mon, Apr 4, 2016 at 9:32 AM, Daniel Smith notifications@github.com; wrote:. > @lothian https://github.com/lothian I fixed cc5 in this branch. cc5 now; > runs, passes, and the output.ref is updated.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205297042",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205307609
https://github.com/psi4/psi4/pull/315#issuecomment-205318258:62,Availability,error,error,62,"The job did not have enough memory and failed due to a TOCLEN error. I shot you a gchat about this awhile back, but did not receive a response and consequently forgot about it. > On Apr 4, 2016, at 10:03 AM, T. Daniel Crawford notifications@github.com wrote:; > ; > What was the bug in cc5?; > ; > ## ; > ; > Prof. T. Daniel Crawford; > crawdad@vt.edu; > ; > On Mon, Apr 4, 2016 at 9:32 AM, Daniel Smith notifications@github.com; > wrote:; > ; > > @lothian https://github.com/lothian I fixed cc5 in this branch. cc5 now; > > runs, passes, and the output.ref is updated.; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/pull/315#issuecomment-205297042; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/pull/315#issuecomment-205307609",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205318258
https://github.com/psi4/psi4/pull/315#issuecomment-205318258:561,Deployability,update,updated,561,"The job did not have enough memory and failed due to a TOCLEN error. I shot you a gchat about this awhile back, but did not receive a response and consequently forgot about it. > On Apr 4, 2016, at 10:03 AM, T. Daniel Crawford notifications@github.com wrote:; > ; > What was the bug in cc5?; > ; > ## ; > ; > Prof. T. Daniel Crawford; > crawdad@vt.edu; > ; > On Mon, Apr 4, 2016 at 9:32 AM, Daniel Smith notifications@github.com; > wrote:; > ; > > @lothian https://github.com/lothian I fixed cc5 in this branch. cc5 now; > > runs, passes, and the output.ref is updated.; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/pull/315#issuecomment-205297042; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/pull/315#issuecomment-205307609",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205318258
https://github.com/psi4/psi4/pull/315#issuecomment-205319180:240,Availability,error,error,240,"Oh, sorry I missed the message about the TOCLEN. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Mon, Apr 4, 2016 at 10:21 AM, Daniel Smith notifications@github.com; wrote:. > The job did not have enough memory and failed due to a TOCLEN error. I; > shot you a gchat about this awhile back, but did not receive a response and; > consequently forgot about it.; > ; > > On Apr 4, 2016, at 10:03 AM, T. Daniel Crawford <; > > notifications@github.com> wrote:; > > ; > > What was the bug in cc5?; > > ; > > ## ; > > ; > > Prof. T. Daniel Crawford; > > crawdad@vt.edu; > > ; > > On Mon, Apr 4, 2016 at 9:32 AM, Daniel Smith notifications@github.com; > > wrote:; > > ; > > > @lothian https://github.com/lothian I fixed cc5 in this branch. cc5; > > > now; > > > runs, passes, and the output.ref is updated.; > > > ; > > > —; > > > You are receiving this because you were mentioned.; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4/pull/315#issuecomment-205297042; > > > ; > > > —; > > > You are receiving this because you authored the thread.; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4/pull/315#issuecomment-205307609>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205318258",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205319180
https://github.com/psi4/psi4/pull/315#issuecomment-205319180:793,Deployability,update,updated,793,"Oh, sorry I missed the message about the TOCLEN. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Mon, Apr 4, 2016 at 10:21 AM, Daniel Smith notifications@github.com; wrote:. > The job did not have enough memory and failed due to a TOCLEN error. I; > shot you a gchat about this awhile back, but did not receive a response and; > consequently forgot about it.; > ; > > On Apr 4, 2016, at 10:03 AM, T. Daniel Crawford <; > > notifications@github.com> wrote:; > > ; > > What was the bug in cc5?; > > ; > > ## ; > > ; > > Prof. T. Daniel Crawford; > > crawdad@vt.edu; > > ; > > On Mon, Apr 4, 2016 at 9:32 AM, Daniel Smith notifications@github.com; > > wrote:; > > ; > > > @lothian https://github.com/lothian I fixed cc5 in this branch. cc5; > > > now; > > > runs, passes, and the output.ref is updated.; > > > ; > > > —; > > > You are receiving this because you were mentioned.; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4/pull/315#issuecomment-205297042; > > > ; > > > —; > > > You are receiving this because you authored the thread.; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4/pull/315#issuecomment-205307609>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205318258",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205319180
https://github.com/psi4/psi4/pull/315#issuecomment-205319180:23,Integrability,message,message,23,"Oh, sorry I missed the message about the TOCLEN. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Mon, Apr 4, 2016 at 10:21 AM, Daniel Smith notifications@github.com; wrote:. > The job did not have enough memory and failed due to a TOCLEN error. I; > shot you a gchat about this awhile back, but did not receive a response and; > consequently forgot about it.; > ; > > On Apr 4, 2016, at 10:03 AM, T. Daniel Crawford <; > > notifications@github.com> wrote:; > > ; > > What was the bug in cc5?; > > ; > > ## ; > > ; > > Prof. T. Daniel Crawford; > > crawdad@vt.edu; > > ; > > On Mon, Apr 4, 2016 at 9:32 AM, Daniel Smith notifications@github.com; > > wrote:; > > ; > > > @lothian https://github.com/lothian I fixed cc5 in this branch. cc5; > > > now; > > > runs, passes, and the output.ref is updated.; > > > ; > > > —; > > > You are receiving this because you were mentioned.; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4/pull/315#issuecomment-205297042; > > > ; > > > —; > > > You are receiving this because you authored the thread.; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4/pull/315#issuecomment-205307609>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205318258",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205319180
https://github.com/psi4/psi4/pull/315#issuecomment-205340495:53,Deployability,update,updated,53,"@lothian I am just happy that I remembered this! . I updated some CC output printing to align a bit better and checked over a few CC test cases. I think everything looks ok, but if someone else could eye ball a couple that would be great.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205340495
https://github.com/psi4/psi4/pull/315#issuecomment-205340495:133,Testability,test,test,133,"@lothian I am just happy that I remembered this! . I updated some CC output printing to align a bit better and checked over a few CC test cases. I think everything looks ok, but if someone else could eye ball a couple that would be great.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205340495
https://github.com/psi4/psi4/pull/316#issuecomment-198779346:5,Testability,test,test,5,What test case is used to check this?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/316#issuecomment-198779346
https://github.com/psi4/psi4/issues/317#issuecomment-197550795:169,Availability,failure,failure,169,"Hmm, so either; - the case of running higher-order SAPT on heavy atoms was never considered, in which case the `DF_BASIS_ELST` code needs copying over; - the heavy atom failure mode doesn't appear in higher-order SAPT b/c higher-order terms compensate or because the larger basis-sets targeted do their job (RI > JK for higher-zeta basis sets). Actually, this may have been what @tparker36 was recalling.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-197550795
https://github.com/psi4/psi4/issues/317#issuecomment-197551790:415,Availability,failure,failure,415,"I suspect we just never got around to adapting the higher order codes. But; maybe @tparker36 has numerical evidence that it's not as big a deal as we; thought?. On Wednesday, March 16, 2016, Lori A. Burns notifications@github.com; wrote:. > Hmm, so either; > - the case of running higher-order SAPT on heavy atoms was never; > considered, in which case the DF_BASIS_ELST code needs copying over; > - the heavy atom failure mode doesn't appear in higher-order SAPT b/c; > higher-order terms compensate or because the larger basis-sets targeted do; > their job (RI > JK for higher-zeta basis sets). Actually, this may have; > been what @tparker36 https://github.com/tparker36 was recalling.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/317#issuecomment-197550795",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-197551790
https://github.com/psi4/psi4/issues/317#issuecomment-197551790:38,Energy Efficiency,adapt,adapting,38,"I suspect we just never got around to adapting the higher order codes. But; maybe @tparker36 has numerical evidence that it's not as big a deal as we; thought?. On Wednesday, March 16, 2016, Lori A. Burns notifications@github.com; wrote:. > Hmm, so either; > - the case of running higher-order SAPT on heavy atoms was never; > considered, in which case the DF_BASIS_ELST code needs copying over; > - the heavy atom failure mode doesn't appear in higher-order SAPT b/c; > higher-order terms compensate or because the larger basis-sets targeted do; > their job (RI > JK for higher-zeta basis sets). Actually, this may have; > been what @tparker36 https://github.com/tparker36 was recalling.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/317#issuecomment-197550795",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-197551790
https://github.com/psi4/psi4/issues/317#issuecomment-197551790:38,Modifiability,adapt,adapting,38,"I suspect we just never got around to adapting the higher order codes. But; maybe @tparker36 has numerical evidence that it's not as big a deal as we; thought?. On Wednesday, March 16, 2016, Lori A. Burns notifications@github.com; wrote:. > Hmm, so either; > - the case of running higher-order SAPT on heavy atoms was never; > considered, in which case the DF_BASIS_ELST code needs copying over; > - the heavy atom failure mode doesn't appear in higher-order SAPT b/c; > higher-order terms compensate or because the larger basis-sets targeted do; > their job (RI > JK for higher-zeta basis sets). Actually, this may have; > been what @tparker36 https://github.com/tparker36 was recalling.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/317#issuecomment-197550795",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-197551790
https://github.com/psi4/psi4/issues/317#issuecomment-197560102:45,Availability,failure,failure,45,Ew. Does someone have an example case of the failure?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-197560102
https://github.com/psi4/psi4/issues/317#issuecomment-250948669:713,Energy Efficiency,efficient,efficient,713,"I'm adding the caution below to the SAPT docs. Together with the caution @robparrish included at the end of the FISAPT docs, it should clarify the situation, as well as summarize this thread. I'm going to close this ticket and add higher-order SAPT to a general Cholesky wishlist ticket. Speak up if there are any objections. ```; .. caution:: To density fit the dispersion terms in SAPT, the RI auxiliary basis ; controlled through |sapt__df_basis_sapt| set performs well. For Fock-type; terms (*i.e.*, electrostatics, exchange, induction, and core Fock matrix; elements in exchange-dispersion), the density-fitting auxiliary basis in; the :ref:`SAPT module<sec:sapt>` (both SAPT0 and higher-order) is RI (more; efficient for the small basis sets at which SAPT0 performs best) while the; :ref:`FISAPT module<sec:fisapt>` uses the more appropriate JKFIT. For; heavier elements (*i.e.*, second-row and beyond), the RI is unsound; (insufficiently flexible). For SAPT0 in the :ref:`SAPT module<sec:sapt>`,; a workaround is to set |sapt__df_basis_elst| (which controls Elst10 and; Exch10 terms) to a JKFIT basis. For higher-order methods in :ref:`SAPT; module<sec:sapt>`, there is no workaround; on-the-fly construction of an; auxiliary basis through Cholesky decomposition (not implemented) is the; long-term solution.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-250948669
https://github.com/psi4/psi4/issues/317#issuecomment-250948669:945,Modifiability,flexible,flexible,945,"I'm adding the caution below to the SAPT docs. Together with the caution @robparrish included at the end of the FISAPT docs, it should clarify the situation, as well as summarize this thread. I'm going to close this ticket and add higher-order SAPT to a general Cholesky wishlist ticket. Speak up if there are any objections. ```; .. caution:: To density fit the dispersion terms in SAPT, the RI auxiliary basis ; controlled through |sapt__df_basis_sapt| set performs well. For Fock-type; terms (*i.e.*, electrostatics, exchange, induction, and core Fock matrix; elements in exchange-dispersion), the density-fitting auxiliary basis in; the :ref:`SAPT module<sec:sapt>` (both SAPT0 and higher-order) is RI (more; efficient for the small basis sets at which SAPT0 performs best) while the; :ref:`FISAPT module<sec:fisapt>` uses the more appropriate JKFIT. For; heavier elements (*i.e.*, second-row and beyond), the RI is unsound; (insufficiently flexible). For SAPT0 in the :ref:`SAPT module<sec:sapt>`,; a workaround is to set |sapt__df_basis_elst| (which controls Elst10 and; Exch10 terms) to a JKFIT basis. For higher-order methods in :ref:`SAPT; module<sec:sapt>`, there is no workaround; on-the-fly construction of an; auxiliary basis through Cholesky decomposition (not implemented) is the; long-term solution.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-250948669
https://github.com/psi4/psi4/issues/317#issuecomment-250948669:459,Performance,perform,performs,459,"I'm adding the caution below to the SAPT docs. Together with the caution @robparrish included at the end of the FISAPT docs, it should clarify the situation, as well as summarize this thread. I'm going to close this ticket and add higher-order SAPT to a general Cholesky wishlist ticket. Speak up if there are any objections. ```; .. caution:: To density fit the dispersion terms in SAPT, the RI auxiliary basis ; controlled through |sapt__df_basis_sapt| set performs well. For Fock-type; terms (*i.e.*, electrostatics, exchange, induction, and core Fock matrix; elements in exchange-dispersion), the density-fitting auxiliary basis in; the :ref:`SAPT module<sec:sapt>` (both SAPT0 and higher-order) is RI (more; efficient for the small basis sets at which SAPT0 performs best) while the; :ref:`FISAPT module<sec:fisapt>` uses the more appropriate JKFIT. For; heavier elements (*i.e.*, second-row and beyond), the RI is unsound; (insufficiently flexible). For SAPT0 in the :ref:`SAPT module<sec:sapt>`,; a workaround is to set |sapt__df_basis_elst| (which controls Elst10 and; Exch10 terms) to a JKFIT basis. For higher-order methods in :ref:`SAPT; module<sec:sapt>`, there is no workaround; on-the-fly construction of an; auxiliary basis through Cholesky decomposition (not implemented) is the; long-term solution.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-250948669
https://github.com/psi4/psi4/issues/317#issuecomment-250948669:763,Performance,perform,performs,763,"I'm adding the caution below to the SAPT docs. Together with the caution @robparrish included at the end of the FISAPT docs, it should clarify the situation, as well as summarize this thread. I'm going to close this ticket and add higher-order SAPT to a general Cholesky wishlist ticket. Speak up if there are any objections. ```; .. caution:: To density fit the dispersion terms in SAPT, the RI auxiliary basis ; controlled through |sapt__df_basis_sapt| set performs well. For Fock-type; terms (*i.e.*, electrostatics, exchange, induction, and core Fock matrix; elements in exchange-dispersion), the density-fitting auxiliary basis in; the :ref:`SAPT module<sec:sapt>` (both SAPT0 and higher-order) is RI (more; efficient for the small basis sets at which SAPT0 performs best) while the; :ref:`FISAPT module<sec:fisapt>` uses the more appropriate JKFIT. For; heavier elements (*i.e.*, second-row and beyond), the RI is unsound; (insufficiently flexible). For SAPT0 in the :ref:`SAPT module<sec:sapt>`,; a workaround is to set |sapt__df_basis_elst| (which controls Elst10 and; Exch10 terms) to a JKFIT basis. For higher-order methods in :ref:`SAPT; module<sec:sapt>`, there is no workaround; on-the-fly construction of an; auxiliary basis through Cholesky decomposition (not implemented) is the; long-term solution.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-250948669
https://github.com/psi4/psi4/pull/319#issuecomment-198355431:93,Safety,avoid,avoid,93,@ryanmrichard Is this something that can be fixed with the parallel printer so that we might avoid this in the future?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/319#issuecomment-198355431
https://github.com/psi4/psi4/issues/321#issuecomment-198592985:45,Performance,optimiz,optimization,45,Awesome. Does turning off XHOST and compiler optimization help?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198592985
https://github.com/psi4/psi4/issues/321#issuecomment-198595581:374,Performance,optimiz,optimization,374,"Holy cow. I wonder if there's some problem with the passing of character; references between C++ and Fortran in the new compilers that could explain; why some DGEMM cases work and others don't. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Fri, Mar 18, 2016 at 8:26 PM, Daniel Smith notifications@github.com; wrote:. > Awesome. Does turning off XHOST and compiler optimization help?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/321#issuecomment-198592985",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198595581
https://github.com/psi4/psi4/issues/321#issuecomment-198596617:210,Deployability,release,release,210,"This was on a i7-4790 Haswell-DT. And it's an architecture we've seen some anomalies on. I'll try a 3930 and toggling xHost next. Good to know you've been building psi4 w/2016 compilers w/o disaster, @bennybp. release 1 or 2? This is with 16.0.2 20160204 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198596617
https://github.com/psi4/psi4/issues/321#issuecomment-198597715:13,Deployability,release,release,13,"This is with release 2, mkl 11.3 update 2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198597715
https://github.com/psi4/psi4/issues/321#issuecomment-198597715:33,Deployability,update,update,33,"This is with release 2, mkl 11.3 update 2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198597715
https://github.com/psi4/psi4/issues/321#issuecomment-198619829:50,Deployability,install,installed,50,"Wonder if it matters to this behavior what gcc is installed. On Friday, March 18, 2016, Ben Pritchard notifications@github.com wrote:. > This is with release 2, mkl 11.3 update 2.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/321#issuecomment-198597715",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198619829
https://github.com/psi4/psi4/issues/321#issuecomment-198619829:150,Deployability,release,release,150,"Wonder if it matters to this behavior what gcc is installed. On Friday, March 18, 2016, Ben Pritchard notifications@github.com wrote:. > This is with release 2, mkl 11.3 update 2.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/321#issuecomment-198597715",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198619829
https://github.com/psi4/psi4/issues/321#issuecomment-198619829:170,Deployability,update,update,170,"Wonder if it matters to this behavior what gcc is installed. On Friday, March 18, 2016, Ben Pritchard notifications@github.com wrote:. > This is with release 2, mkl 11.3 update 2.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/321#issuecomment-198597715",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198619829
https://github.com/psi4/psi4/issues/321#issuecomment-198621819:22,Deployability,update,update,22,"all are with mkl 11.3 update 2; all tests run in serial; all with gcc (GCC) 4.8.5 20150623; - i7-3930K, Sandy Bridge-E; - xhost on (default), release: **Good**; - i7-4790K, Haswell-DT; - xhost on (default), release: **Bad**; - xhost off, release: **Bad**; - xhost on (default), debug: **Bad**",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198621819
https://github.com/psi4/psi4/issues/321#issuecomment-198621819:142,Deployability,release,release,142,"all are with mkl 11.3 update 2; all tests run in serial; all with gcc (GCC) 4.8.5 20150623; - i7-3930K, Sandy Bridge-E; - xhost on (default), release: **Good**; - i7-4790K, Haswell-DT; - xhost on (default), release: **Bad**; - xhost off, release: **Bad**; - xhost on (default), debug: **Bad**",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198621819
https://github.com/psi4/psi4/issues/321#issuecomment-198621819:207,Deployability,release,release,207,"all are with mkl 11.3 update 2; all tests run in serial; all with gcc (GCC) 4.8.5 20150623; - i7-3930K, Sandy Bridge-E; - xhost on (default), release: **Good**; - i7-4790K, Haswell-DT; - xhost on (default), release: **Bad**; - xhost off, release: **Bad**; - xhost on (default), debug: **Bad**",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198621819
https://github.com/psi4/psi4/issues/321#issuecomment-198621819:238,Deployability,release,release,238,"all are with mkl 11.3 update 2; all tests run in serial; all with gcc (GCC) 4.8.5 20150623; - i7-3930K, Sandy Bridge-E; - xhost on (default), release: **Good**; - i7-4790K, Haswell-DT; - xhost on (default), release: **Bad**; - xhost off, release: **Bad**; - xhost on (default), debug: **Bad**",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198621819
https://github.com/psi4/psi4/issues/321#issuecomment-198621819:110,Integrability,Bridg,Bridge-E,110,"all are with mkl 11.3 update 2; all tests run in serial; all with gcc (GCC) 4.8.5 20150623; - i7-3930K, Sandy Bridge-E; - xhost on (default), release: **Good**; - i7-4790K, Haswell-DT; - xhost on (default), release: **Bad**; - xhost off, release: **Bad**; - xhost on (default), debug: **Bad**",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198621819
https://github.com/psi4/psi4/issues/321#issuecomment-198621819:36,Testability,test,tests,36,"all are with mkl 11.3 update 2; all tests run in serial; all with gcc (GCC) 4.8.5 20150623; - i7-3930K, Sandy Bridge-E; - xhost on (default), release: **Good**; - i7-4790K, Haswell-DT; - xhost on (default), release: **Bad**; - xhost off, release: **Bad**; - xhost on (default), debug: **Bad**",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198621819
https://github.com/psi4/psi4/issues/321#issuecomment-198626795:20,Testability,test,test,20,Is there a specific test that fails? It seems ok on my test machine; (Intel Xeon E5-2698 v3 Haswell) with GCC 4.8.5,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198626795
https://github.com/psi4/psi4/issues/321#issuecomment-198626795:55,Testability,test,test,55,Is there a specific test that fails? It seems ok on my test machine; (Intel Xeon E5-2698 v3 Haswell) with GCC 4.8.5,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198626795
https://github.com/psi4/psi4/issues/321#issuecomment-198629513:170,Energy Efficiency,energy,energy,170,"Most (83%) fail. I've been using tu1 and scf5 in particular. Of all the test cases, only mrcc-ccsdt, mrcc-ccsdt_q_, psimrcc-pt2, cc36, cc55, dcft[12348], docs-*, fd-freq-energy, fd-freq-gradient, matrix1, mints[23459], mcscf1, mcscf3, mom, mp2-grad1, omp2-1, omp2-grad1, props1, psithon1, various pywraps, rasci-h2o, rasscf-sp, pubchem1, scf[34], zaptn-nh2 _do_ pass. And that's _with_ the aforementioned commenting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198629513
https://github.com/psi4/psi4/issues/321#issuecomment-198629513:72,Testability,test,test,72,"Most (83%) fail. I've been using tu1 and scf5 in particular. Of all the test cases, only mrcc-ccsdt, mrcc-ccsdt_q_, psimrcc-pt2, cc36, cc55, dcft[12348], docs-*, fd-freq-energy, fd-freq-gradient, matrix1, mints[23459], mcscf1, mcscf3, mom, mp2-grad1, omp2-1, omp2-grad1, props1, psithon1, various pywraps, rasci-h2o, rasscf-sp, pubchem1, scf[34], zaptn-nh2 _do_ pass. And that's _with_ the aforementioned commenting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198629513
https://github.com/psi4/psi4/issues/321#issuecomment-198631685:190,Energy Efficiency,energy,energy,190,"Last request for the night: Can you take scf5 and run it a bunch of times in a row (maybe 20 times)? On my Ivy Bridge machine, it will sometimes pass, sometimes fail.... ```; Singlet PK UHF energy: computed value (-149.6484410) does not match (-149.5905972) to 6 decimal places; ```. Is this what you're seeing? Or is this an unrelated problem?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198631685
https://github.com/psi4/psi4/issues/321#issuecomment-198631685:111,Integrability,Bridg,Bridge,111,"Last request for the night: Can you take scf5 and run it a bunch of times in a row (maybe 20 times)? On my Ivy Bridge machine, it will sometimes pass, sometimes fail.... ```; Singlet PK UHF energy: computed value (-149.6484410) does not match (-149.5905972) to 6 decimal places; ```. Is this what you're seeing? Or is this an unrelated problem?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198631685
https://github.com/psi4/psi4/issues/321#issuecomment-198705736:113,Integrability,rout,routinely,113,I'm using 16.0.2 with no problems on my workstation. Didn't know about the `ENABLE_XHOST` configure option but I routinely use `setup --vectorization` with no issues. I'll give xhost a try shortly. Though I'm having trouble getting cfour running on my new cluster using 16.0.2 with my flags from the old cluster (with older Intel compiler). I'm wondering now if this is related.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198705736
https://github.com/psi4/psi4/issues/321#issuecomment-198705736:90,Modifiability,config,configure,90,I'm using 16.0.2 with no problems on my workstation. Didn't know about the `ENABLE_XHOST` configure option but I routinely use `setup --vectorization` with no issues. I'll give xhost a try shortly. Though I'm having trouble getting cfour running on my new cluster using 16.0.2 with my flags from the old cluster (with older Intel compiler). I'm wondering now if this is related.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198705736
https://github.com/psi4/psi4/issues/321#issuecomment-198705828:56,Testability,test,test,56,@bennybp This is something we have seen before for this test case (I think its in an issue somewhere). Not entirely sure why this happens yet.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198705828
https://github.com/psi4/psi4/issues/321#issuecomment-198786718:467,Availability,down,down,467,"@bennybp , I ran it 40 times today, and it passed consistently. But @dgasmith is right that I've seen it before. Now that it's not just me, I've made a ticket #322. But that was with 2015 compilers, so it is an unrelated issue. @jturney, usually I only alter `xHost` for the generic linux binary, but yes, I can see it being necessary for deploying to a heterogenous cluster when not compiling on the oldest machine. I admit it's suspicious that no matter how I back down optimization on the Haswell box, nothing helps the situation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198786718
https://github.com/psi4/psi4/issues/321#issuecomment-198786718:339,Deployability,deploy,deploying,339,"@bennybp , I ran it 40 times today, and it passed consistently. But @dgasmith is right that I've seen it before. Now that it's not just me, I've made a ticket #322. But that was with 2015 compilers, so it is an unrelated issue. @jturney, usually I only alter `xHost` for the generic linux binary, but yes, I can see it being necessary for deploying to a heterogenous cluster when not compiling on the oldest machine. I admit it's suspicious that no matter how I back down optimization on the Haswell box, nothing helps the situation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198786718
https://github.com/psi4/psi4/issues/321#issuecomment-198786718:472,Performance,optimiz,optimization,472,"@bennybp , I ran it 40 times today, and it passed consistently. But @dgasmith is right that I've seen it before. Now that it's not just me, I've made a ticket #322. But that was with 2015 compilers, so it is an unrelated issue. @jturney, usually I only alter `xHost` for the generic linux binary, but yes, I can see it being necessary for deploying to a heterogenous cluster when not compiling on the oldest machine. I admit it's suspicious that no matter how I back down optimization on the Haswell box, nothing helps the situation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198786718
https://github.com/psi4/psi4/issues/321#issuecomment-198800148:98,Security,access,access,98,"If that's the case, everything looks ok on my Haswell machine. Would it be possible for me to get access to problematic box sometime next week?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198800148
https://github.com/psi4/psi4/issues/321#issuecomment-198809968:29,Security,access,access,29,"Sure thing, Ryan can get you access next week.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198809968
https://github.com/psi4/psi4/issues/321#issuecomment-199094163:48,Deployability,install,install,48,Culprit identified: Boost. So _some_ non-custom-install boost libraries on _some_ architectures go haywire on _some_ DGEMMs. I'd feel better if such things announced themselves at link-time rather than run-time. My apologies for raising an overly general alarm.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-199094163
https://github.com/psi4/psi4/issues/321#issuecomment-199094320:12,Safety,detect,detective,12,Outstanding detective work. I bet that was a nightmare to figure out. It's not obvious to me how Boost is related to DGEMMs; what am I overlooking?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-199094320
https://github.com/psi4/psi4/issues/321#issuecomment-199547946:343,Deployability,release,release,343,"The DGEMM-killing Boost is a Continuum/default channel conda package 1.57 that had been serving me well for months. It can be found in the lib subdir of the metapackage-dir in the setup line below. (metapackage-dir specifies location of python, boost, chemps2, pcmsolver, zlib, hdf5, gsl.). ```; ../setup --cc icc --cxx icpc --fc ifort --type release --plugins on --prefix $INSTALL --max-am-eri 5 --metapackage-dir /theoryfs2/ds/cdsgroup/miniconda/envs/p4buildenv --cmake /theoryfs2/ds/cdsgroup/miniconda/bin/cmake -DSPHINX_ROOT=/theoryfs2/ds/cdsgroup/miniconda/envs/p4buildenv #-DENABLE_XHOST=OFF; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-199547946
https://github.com/psi4/psi4/issues/321#issuecomment-199547946:374,Deployability,INSTALL,INSTALL,374,"The DGEMM-killing Boost is a Continuum/default channel conda package 1.57 that had been serving me well for months. It can be found in the lib subdir of the metapackage-dir in the setup line below. (metapackage-dir specifies location of python, boost, chemps2, pcmsolver, zlib, hdf5, gsl.). ```; ../setup --cc icc --cxx icpc --fc ifort --type release --plugins on --prefix $INSTALL --max-am-eri 5 --metapackage-dir /theoryfs2/ds/cdsgroup/miniconda/envs/p4buildenv --cmake /theoryfs2/ds/cdsgroup/miniconda/bin/cmake -DSPHINX_ROOT=/theoryfs2/ds/cdsgroup/miniconda/envs/p4buildenv #-DENABLE_XHOST=OFF; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-199547946
https://github.com/psi4/psi4/issues/321#issuecomment-199547946:353,Modifiability,plugin,plugins,353,"The DGEMM-killing Boost is a Continuum/default channel conda package 1.57 that had been serving me well for months. It can be found in the lib subdir of the metapackage-dir in the setup line below. (metapackage-dir specifies location of python, boost, chemps2, pcmsolver, zlib, hdf5, gsl.). ```; ../setup --cc icc --cxx icpc --fc ifort --type release --plugins on --prefix $INSTALL --max-am-eri 5 --metapackage-dir /theoryfs2/ds/cdsgroup/miniconda/envs/p4buildenv --cmake /theoryfs2/ds/cdsgroup/miniconda/bin/cmake -DSPHINX_ROOT=/theoryfs2/ds/cdsgroup/miniconda/envs/p4buildenv #-DENABLE_XHOST=OFF; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-199547946
https://github.com/psi4/psi4/issues/321#issuecomment-202602008:76,Availability,down,down,76,"Well, this is a boost issue. I don't think anyone is actually going to hunt down why this particular pre-compiled boost is killing DGEMM. Probably something very strange. Anyhow, we can change our build strategy for now and link to an updated boost in the future. Let this be a warning when using pre-compiled boost.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-202602008
https://github.com/psi4/psi4/issues/321#issuecomment-202602008:235,Deployability,update,updated,235,"Well, this is a boost issue. I don't think anyone is actually going to hunt down why this particular pre-compiled boost is killing DGEMM. Probably something very strange. Anyhow, we can change our build strategy for now and link to an updated boost in the future. Let this be a warning when using pre-compiled boost.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-202602008
https://github.com/psi4/psi4/issues/322#issuecomment-200629470:129,Availability,error,error,129,"@dgasmith, fyi that the scf5 problem has surfaced on your box with 2016 compilers. Sometimes fails on Singlet PK UHF, like above error. Sometimes passes. Below is diff of the key SCF with new (failing) on L, output.ref on R. Further below is diff of the key SCF with new (passing) on L, output.ref on R. Note the changing occupancies. ```; ==> Iterations <== ==> Iterations <==. Total Energy Delta E RMS |[F,P]| | Total Energy Delta E Density RMS. > Forming PK and K matrices.; > @UHF iter 1: -130.87953989478825 -1.78522e+01 0.00000e+00 ; Occupation by irrep: Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ] | DOCC [ 3, 0, 1, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ] | SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; | @UHF iter 2: -140.04253152363862 -9.16299e+00 2.20869e-01 DIIS; @UHF iter 1: -130.87953989478828 -1.30880e+02 3.53419e-01 | @UHF iter 3: -149.17635355329770 -9.13382e+00 2.03083e-01 DIIS; @UHF iter 2: -140.07431434746931 -9.19477e+00 1.82031e-01 DIIS | @UHF iter 4: -149.57809876181395 -4.01745e-01 1.46708e-02 DIIS; @UHF iter 3: -149.23552613462837 -9.16121e+00 4.96906e-02 DIIS | @UHF iter 5: -149.59038744607500 -1.22887e-02 3.98344e-03 DIIS; @UHF iter 4: -149.63524139545771 -3.99715e-01 7.44669e-03 DIIS | @UHF iter 6: -149.59059079586575 -2.03350e-04 4.93283e-04 DIIS; @UHF iter 5: -149.64817974336708 -1.29383e-02 9.02194e-04 DIIS | @UHF iter 7: -149.59059711351466 -6.31765e-06 9.62861e-05 DIIS; @UHF iter 6: -149.64843348113254 -2.53738e-04 1.48299e-04 DIIS | @UHF iter 8: -149.59059723201250 -1.18498e-07 1.30989e-05 DIIS; @UHF iter 7: -149.64844078492737 -7.30379e-06 2.61364e-05 DIIS | @UHF iter 9: -149.59059723617770 -4.16520e-09 2.01100e-06 DIIS; @UHF iter 8: -149.64844097370053 -1.88773e-07 5.78597e-06 DIIS | @UHF iter 10: -149.59059723621087 -3.31681e-11 1.77929e-07 DIIS; @UHF iter 9: -149.64844098588614 -1.21856e-08 1.04113e-06 DIIS | @UHF iter 11: -149.59059723621158 -7.10543e-13 3.00170e-08 DIIS",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/322#issuecomment-200629470
https://github.com/psi4/psi4/issues/322#issuecomment-200629470:385,Energy Efficiency,Energy,Energy,385,"@dgasmith, fyi that the scf5 problem has surfaced on your box with 2016 compilers. Sometimes fails on Singlet PK UHF, like above error. Sometimes passes. Below is diff of the key SCF with new (failing) on L, output.ref on R. Further below is diff of the key SCF with new (passing) on L, output.ref on R. Note the changing occupancies. ```; ==> Iterations <== ==> Iterations <==. Total Energy Delta E RMS |[F,P]| | Total Energy Delta E Density RMS. > Forming PK and K matrices.; > @UHF iter 1: -130.87953989478825 -1.78522e+01 0.00000e+00 ; Occupation by irrep: Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ] | DOCC [ 3, 0, 1, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ] | SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; | @UHF iter 2: -140.04253152363862 -9.16299e+00 2.20869e-01 DIIS; @UHF iter 1: -130.87953989478828 -1.30880e+02 3.53419e-01 | @UHF iter 3: -149.17635355329770 -9.13382e+00 2.03083e-01 DIIS; @UHF iter 2: -140.07431434746931 -9.19477e+00 1.82031e-01 DIIS | @UHF iter 4: -149.57809876181395 -4.01745e-01 1.46708e-02 DIIS; @UHF iter 3: -149.23552613462837 -9.16121e+00 4.96906e-02 DIIS | @UHF iter 5: -149.59038744607500 -1.22887e-02 3.98344e-03 DIIS; @UHF iter 4: -149.63524139545771 -3.99715e-01 7.44669e-03 DIIS | @UHF iter 6: -149.59059079586575 -2.03350e-04 4.93283e-04 DIIS; @UHF iter 5: -149.64817974336708 -1.29383e-02 9.02194e-04 DIIS | @UHF iter 7: -149.59059711351466 -6.31765e-06 9.62861e-05 DIIS; @UHF iter 6: -149.64843348113254 -2.53738e-04 1.48299e-04 DIIS | @UHF iter 8: -149.59059723201250 -1.18498e-07 1.30989e-05 DIIS; @UHF iter 7: -149.64844078492737 -7.30379e-06 2.61364e-05 DIIS | @UHF iter 9: -149.59059723617770 -4.16520e-09 2.01100e-06 DIIS; @UHF iter 8: -149.64844097370053 -1.88773e-07 5.78597e-06 DIIS | @UHF iter 10: -149.59059723621087 -3.31681e-11 1.77929e-07 DIIS; @UHF iter 9: -149.64844098588614 -1.21856e-08 1.04113e-06 DIIS | @UHF iter 11: -149.59059723621158 -7.10543e-13 3.00170e-08 DIIS",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/322#issuecomment-200629470
https://github.com/psi4/psi4/issues/322#issuecomment-200629470:420,Energy Efficiency,Energy,Energy,420,"@dgasmith, fyi that the scf5 problem has surfaced on your box with 2016 compilers. Sometimes fails on Singlet PK UHF, like above error. Sometimes passes. Below is diff of the key SCF with new (failing) on L, output.ref on R. Further below is diff of the key SCF with new (passing) on L, output.ref on R. Note the changing occupancies. ```; ==> Iterations <== ==> Iterations <==. Total Energy Delta E RMS |[F,P]| | Total Energy Delta E Density RMS. > Forming PK and K matrices.; > @UHF iter 1: -130.87953989478825 -1.78522e+01 0.00000e+00 ; Occupation by irrep: Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ] | DOCC [ 3, 0, 1, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ] | SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; | @UHF iter 2: -140.04253152363862 -9.16299e+00 2.20869e-01 DIIS; @UHF iter 1: -130.87953989478828 -1.30880e+02 3.53419e-01 | @UHF iter 3: -149.17635355329770 -9.13382e+00 2.03083e-01 DIIS; @UHF iter 2: -140.07431434746931 -9.19477e+00 1.82031e-01 DIIS | @UHF iter 4: -149.57809876181395 -4.01745e-01 1.46708e-02 DIIS; @UHF iter 3: -149.23552613462837 -9.16121e+00 4.96906e-02 DIIS | @UHF iter 5: -149.59038744607500 -1.22887e-02 3.98344e-03 DIIS; @UHF iter 4: -149.63524139545771 -3.99715e-01 7.44669e-03 DIIS | @UHF iter 6: -149.59059079586575 -2.03350e-04 4.93283e-04 DIIS; @UHF iter 5: -149.64817974336708 -1.29383e-02 9.02194e-04 DIIS | @UHF iter 7: -149.59059711351466 -6.31765e-06 9.62861e-05 DIIS; @UHF iter 6: -149.64843348113254 -2.53738e-04 1.48299e-04 DIIS | @UHF iter 8: -149.59059723201250 -1.18498e-07 1.30989e-05 DIIS; @UHF iter 7: -149.64844078492737 -7.30379e-06 2.61364e-05 DIIS | @UHF iter 9: -149.59059723617770 -4.16520e-09 2.01100e-06 DIIS; @UHF iter 8: -149.64844097370053 -1.88773e-07 5.78597e-06 DIIS | @UHF iter 10: -149.59059723621087 -3.31681e-11 1.77929e-07 DIIS; @UHF iter 9: -149.64844098588614 -1.21856e-08 1.04113e-06 DIIS | @UHF iter 11: -149.59059723621158 -7.10543e-13 3.00170e-08 DIIS",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/322#issuecomment-200629470
https://github.com/psi4/psi4/issues/322#issuecomment-200629470:2125,Energy Efficiency,Energy,Energy,2125,"-02 DIIS | @UHF iter 5: -149.59038744607500 -1.22887e-02 3.98344e-03 DIIS; @UHF iter 4: -149.63524139545771 -3.99715e-01 7.44669e-03 DIIS | @UHF iter 6: -149.59059079586575 -2.03350e-04 4.93283e-04 DIIS; @UHF iter 5: -149.64817974336708 -1.29383e-02 9.02194e-04 DIIS | @UHF iter 7: -149.59059711351466 -6.31765e-06 9.62861e-05 DIIS; @UHF iter 6: -149.64843348113254 -2.53738e-04 1.48299e-04 DIIS | @UHF iter 8: -149.59059723201250 -1.18498e-07 1.30989e-05 DIIS; @UHF iter 7: -149.64844078492737 -7.30379e-06 2.61364e-05 DIIS | @UHF iter 9: -149.59059723617770 -4.16520e-09 2.01100e-06 DIIS; @UHF iter 8: -149.64844097370053 -1.88773e-07 5.78597e-06 DIIS | @UHF iter 10: -149.59059723621087 -3.31681e-11 1.77929e-07 DIIS; @UHF iter 9: -149.64844098588614 -1.21856e-08 1.04113e-06 DIIS | @UHF iter 11: -149.59059723621158 -7.10543e-13 3.00170e-08 DIIS; @UHF iter 10: -149.64844098626756 -3.81419e-10 9.88051e-08 DIIS <; ```. ```; ==> Iterations <== ==> Iterations <==. Total Energy Delta E RMS |[F,P]| | Total Energy Delta E Density RMS. > Forming PK and K matrices.; > @UHF iter 1: -130.87953989478825 -1.78522e+01 0.00000e+00 ; Occupation by irrep: Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 3, 0, 0, 1, 0, 2, 1, 1 ] | DOCC [ 3, 0, 1, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ] SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; | @UHF iter 2: -140.04253152363862 -9.16299e+00 2.20869e-01 DIIS; @UHF iter 1: -130.87953989478828 -1.30880e+02 3.53419e-01 | @UHF iter 3: -149.17635355329770 -9.13382e+00 2.03083e-01 DIIS; @UHF iter 2: -140.04253152363808 -9.16299e+00 1.82082e-01 DIIS | @UHF iter 4: -149.57809876181395 -4.01745e-01 1.46708e-02 DIIS; @UHF iter 3: -149.17635355329767 -9.13382e+00 4.97312e-02 DIIS | @UHF iter 5: -149.59038744607500 -1.22887e-02 3.98344e-03 DIIS; @UHF iter 4: -149.57809876181389 -4.01745e-01 7.26620e-03 DIIS | @UHF iter 6: -149.59059079586575 -2.03350e-04 4.93283e-04 DIIS; @UHF iter 5: -149.59038744607483 -1.22887e-02 8.24815e-04 D",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/322#issuecomment-200629470
https://github.com/psi4/psi4/issues/322#issuecomment-200629470:2160,Energy Efficiency,Energy,Energy,2160,"-02 DIIS | @UHF iter 5: -149.59038744607500 -1.22887e-02 3.98344e-03 DIIS; @UHF iter 4: -149.63524139545771 -3.99715e-01 7.44669e-03 DIIS | @UHF iter 6: -149.59059079586575 -2.03350e-04 4.93283e-04 DIIS; @UHF iter 5: -149.64817974336708 -1.29383e-02 9.02194e-04 DIIS | @UHF iter 7: -149.59059711351466 -6.31765e-06 9.62861e-05 DIIS; @UHF iter 6: -149.64843348113254 -2.53738e-04 1.48299e-04 DIIS | @UHF iter 8: -149.59059723201250 -1.18498e-07 1.30989e-05 DIIS; @UHF iter 7: -149.64844078492737 -7.30379e-06 2.61364e-05 DIIS | @UHF iter 9: -149.59059723617770 -4.16520e-09 2.01100e-06 DIIS; @UHF iter 8: -149.64844097370053 -1.88773e-07 5.78597e-06 DIIS | @UHF iter 10: -149.59059723621087 -3.31681e-11 1.77929e-07 DIIS; @UHF iter 9: -149.64844098588614 -1.21856e-08 1.04113e-06 DIIS | @UHF iter 11: -149.59059723621158 -7.10543e-13 3.00170e-08 DIIS; @UHF iter 10: -149.64844098626756 -3.81419e-10 9.88051e-08 DIIS <; ```. ```; ==> Iterations <== ==> Iterations <==. Total Energy Delta E RMS |[F,P]| | Total Energy Delta E Density RMS. > Forming PK and K matrices.; > @UHF iter 1: -130.87953989478825 -1.78522e+01 0.00000e+00 ; Occupation by irrep: Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 3, 0, 0, 1, 0, 2, 1, 1 ] | DOCC [ 3, 0, 1, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ] SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; | @UHF iter 2: -140.04253152363862 -9.16299e+00 2.20869e-01 DIIS; @UHF iter 1: -130.87953989478828 -1.30880e+02 3.53419e-01 | @UHF iter 3: -149.17635355329770 -9.13382e+00 2.03083e-01 DIIS; @UHF iter 2: -140.04253152363808 -9.16299e+00 1.82082e-01 DIIS | @UHF iter 4: -149.57809876181395 -4.01745e-01 1.46708e-02 DIIS; @UHF iter 3: -149.17635355329767 -9.13382e+00 4.97312e-02 DIIS | @UHF iter 5: -149.59038744607500 -1.22887e-02 3.98344e-03 DIIS; @UHF iter 4: -149.57809876181389 -4.01745e-01 7.26620e-03 DIIS | @UHF iter 6: -149.59059079586575 -2.03350e-04 4.93283e-04 DIIS; @UHF iter 5: -149.59038744607483 -1.22887e-02 8.24815e-04 D",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/322#issuecomment-200629470
https://github.com/psi4/psi4/issues/322#issuecomment-227418754:102,Energy Efficiency,energy,energy,102,"I'm using icpc 16.0.1 and I get the same failing test, scf5 with:. ```; PsiException: Singlet PK CUHF energy: computed value (-149.6304503) does not match (-149.5905972) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/322#issuecomment-227418754
https://github.com/psi4/psi4/issues/322#issuecomment-227418754:49,Testability,test,test,49,"I'm using icpc 16.0.1 and I get the same failing test, scf5 with:. ```; PsiException: Singlet PK CUHF energy: computed value (-149.6304503) does not match (-149.5905972) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/322#issuecomment-227418754
https://github.com/psi4/psi4/issues/322#issuecomment-260082001:33,Safety,avoid,avoid,33,"Tweaked the geometry slightly to avoid a crossing a bit ago. Appears to have worked, closing for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/322#issuecomment-260082001
https://github.com/psi4/psi4/pull/323#issuecomment-201110783:507,Availability,avail,available,507,"Great to see this capability added! A pdf in doc/external can probably be linked to from Sphinx docs, though it won't be searchable. If Stone isn't keen on the subdir of Psi4 scheme, we could arrange so that his code stays on his website, a conda recipe (or cmake Add_External_Project) curls it from the web, a patch converts it to build as a lib rather than an exe, and so libgdma.so stays outside psi4. Then the interface code between gdma and libmints stays in psi4. Would like to make the built library available from our conda channel, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201110783
https://github.com/psi4/psi4/pull/323#issuecomment-201110783:311,Deployability,patch,patch,311,"Great to see this capability added! A pdf in doc/external can probably be linked to from Sphinx docs, though it won't be searchable. If Stone isn't keen on the subdir of Psi4 scheme, we could arrange so that his code stays on his website, a conda recipe (or cmake Add_External_Project) curls it from the web, a patch converts it to build as a lib rather than an exe, and so libgdma.so stays outside psi4. Then the interface code between gdma and libmints stays in psi4. Would like to make the built library available from our conda channel, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201110783
https://github.com/psi4/psi4/pull/323#issuecomment-201110783:414,Integrability,interface,interface,414,"Great to see this capability added! A pdf in doc/external can probably be linked to from Sphinx docs, though it won't be searchable. If Stone isn't keen on the subdir of Psi4 scheme, we could arrange so that his code stays on his website, a conda recipe (or cmake Add_External_Project) curls it from the web, a patch converts it to build as a lib rather than an exe, and so libgdma.so stays outside psi4. Then the interface code between gdma and libmints stays in psi4. Would like to make the built library available from our conda channel, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201110783
https://github.com/psi4/psi4/pull/323#issuecomment-201122403:202,Deployability,update,updated,202,"Excellent idea about the Conda distribution, Lori. I emailed Prof. Stone yesterday, but haven't heard back. He is retired now, so I don't know if his Cambridge email is active; his seminal red book was updated last year so I think he's still doing some work. I doubt he will object to our distribution idea; I think he would've chosen a different license to GPL if he didn't want his code to be used in this way. Regardless, I think we should wait a week to hear back and merge the PR if we don't get a response. He deserves to have a say in how we handle his code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201122403
https://github.com/psi4/psi4/pull/323#issuecomment-201297358:534,Deployability,update,updated,534,"I'm ok with linking to a PDF manual or external website for GDMA, but I; think we would also at least need a little paragraph in our manual; explaining that the capability is there, and giving any Psi keywords that; are used to access GDMA. On Thu, Mar 24, 2016 at 11:38 PM, Andy Simmonett notifications@github.com; wrote:. > Excellent idea about the Conda distribution, Lori. I emailed Prof. Stone; > yesterday, but haven't heard back. He is retired now, so I don't know if; > his Cambridge email is active; his seminal red book was updated last year; > so I think he's still doing some work. I doubt he will object to our; > distribution idea; I think he would've chosen a different license to GPL if; > he didn't want his code to be used in this way. Regardless, I think we; > should wait a week to hear back and merge the PR if we don't get a; > response. He deserves to have a say in how we handle his code.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/323#issuecomment-201122403",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201297358
https://github.com/psi4/psi4/pull/323#issuecomment-201297358:228,Security,access,access,228,"I'm ok with linking to a PDF manual or external website for GDMA, but I; think we would also at least need a little paragraph in our manual; explaining that the capability is there, and giving any Psi keywords that; are used to access GDMA. On Thu, Mar 24, 2016 at 11:38 PM, Andy Simmonett notifications@github.com; wrote:. > Excellent idea about the Conda distribution, Lori. I emailed Prof. Stone; > yesterday, but haven't heard back. He is retired now, so I don't know if; > his Cambridge email is active; his seminal red book was updated last year; > so I think he's still doing some work. I doubt he will object to our; > distribution idea; I think he would've chosen a different license to GPL if; > he didn't want his code to be used in this way. Regardless, I think we; > should wait a week to hear back and merge the PR if we don't get a; > response. He deserves to have a say in how we handle his code.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/323#issuecomment-201122403",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201297358
https://github.com/psi4/psi4/pull/323#issuecomment-201394449:457,Availability,avail,available,457,"I added full Sphinx documentation for both the FCHK writer and for GDMA, in commit f2aca76, @CDSherrill. I heard back from Prof. Stone and he has kindly agreed to allow us to use GDMA in the way that we want to, so this PR is ready to go. In his message, he raised the issue of our output providing only kcal/mol units, and mentioned that he would like to have kJ/mol units too, in line with IUPAC guidelines. We certainly should make the hartree to kJ/mol available directly in physconst (instead of having to go through kcal/mol), but what do think about having both units available in the SAPT output?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201394449
https://github.com/psi4/psi4/pull/323#issuecomment-201394449:575,Availability,avail,available,575,"I added full Sphinx documentation for both the FCHK writer and for GDMA, in commit f2aca76, @CDSherrill. I heard back from Prof. Stone and he has kindly agreed to allow us to use GDMA in the way that we want to, so this PR is ready to go. In his message, he raised the issue of our output providing only kcal/mol units, and mentioned that he would like to have kJ/mol units too, in line with IUPAC guidelines. We certainly should make the hartree to kJ/mol available directly in physconst (instead of having to go through kcal/mol), but what do think about having both units available in the SAPT output?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201394449
https://github.com/psi4/psi4/pull/323#issuecomment-201394449:246,Integrability,message,message,246,"I added full Sphinx documentation for both the FCHK writer and for GDMA, in commit f2aca76, @CDSherrill. I heard back from Prof. Stone and he has kindly agreed to allow us to use GDMA in the way that we want to, so this PR is ready to go. In his message, he raised the issue of our output providing only kcal/mol units, and mentioned that he would like to have kJ/mol units too, in line with IUPAC guidelines. We certainly should make the hartree to kJ/mol available directly in physconst (instead of having to go through kcal/mol), but what do think about having both units available in the SAPT output?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201394449
https://github.com/psi4/psi4/pull/323#issuecomment-201394449:398,Usability,guid,guidelines,398,"I added full Sphinx documentation for both the FCHK writer and for GDMA, in commit f2aca76, @CDSherrill. I heard back from Prof. Stone and he has kindly agreed to allow us to use GDMA in the way that we want to, so this PR is ready to go. In his message, he raised the issue of our output providing only kcal/mol units, and mentioned that he would like to have kJ/mol units too, in line with IUPAC guidelines. We certainly should make the hartree to kJ/mol available directly in physconst (instead of having to go through kcal/mol), but what do think about having both units available in the SAPT output?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201394449
https://github.com/psi4/psi4/pull/328#issuecomment-202633222:66,Testability,test,tests,66,"@psi-rking Just to double check, did you run this through all opt tests as well as quick tests?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/328#issuecomment-202633222
https://github.com/psi4/psi4/pull/328#issuecomment-202633222:89,Testability,test,tests,89,"@psi-rking Just to double check, did you run this through all opt tests as well as quick tests?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/328#issuecomment-202633222
https://github.com/psi4/psi4/pull/328#issuecomment-202667624:35,Performance,optimiz,optimizer,35,"When I've only made changes to the optimizer, I always do a 'ctest -L opt'. So, yes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/328#issuecomment-202667624
https://github.com/psi4/psi4/pull/330#issuecomment-205082377:73,Deployability,update,update,73,Everything looks good to me for the SAPT output. Do you think we need to update the SAPT tests reference output files so that they look the same than the new output format ?; (And the example in the SAPT doc ?); It's only minor changes so we may just leave these alone.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/330#issuecomment-205082377
https://github.com/psi4/psi4/pull/330#issuecomment-205082377:89,Testability,test,tests,89,Everything looks good to me for the SAPT output. Do you think we need to update the SAPT tests reference output files so that they look the same than the new output format ?; (And the example in the SAPT doc ?); It's only minor changes so we may just leave these alone.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/330#issuecomment-205082377
https://github.com/psi4/psi4/pull/330#issuecomment-205086828:134,Testability,test,tests,134,"Sorry I'm late to the party; I've been traveling again. I don't think there are any problems with the new scheme. We have a number of tests that have list options, such as SOCC, so if they pass we're all good.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/330#issuecomment-205086828
https://github.com/psi4/psi4/pull/331#issuecomment-205807773:97,Availability,avail,available,97,"Yes, that's how they are tagged. I don't think that the corresponding RI or JK-FIT basis set are available. In any case I merged the basis sets with those in cc-pwCVXZ.gbs so if we want to go with the uniform name they are ready.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/331#issuecomment-205807773
https://github.com/psi4/psi4/pull/331#issuecomment-205812617:176,Availability,failure,failure,176,I should have been clear. We want this tagged in the same BasisSet family even though there are no corresponding DF/RI basis for those particular atoms so that we get a better failure message.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/331#issuecomment-205812617
https://github.com/psi4/psi4/pull/331#issuecomment-205812617:184,Integrability,message,message,184,I should have been clear. We want this tagged in the same BasisSet family even though there are no corresponding DF/RI basis for those particular atoms so that we get a better failure message.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/331#issuecomment-205812617
https://github.com/psi4/psi4/pull/331#issuecomment-205812617:19,Usability,clear,clear,19,I should have been clear. We want this tagged in the same BasisSet family even though there are no corresponding DF/RI basis for those particular atoms so that we get a better failure message.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/331#issuecomment-205812617
https://github.com/psi4/psi4/issues/332#issuecomment-204210196:15,Availability,error,error,15,"Admittedly the error message should be updated to be more informative, but; the short answer is a single atom doesn't have a vibrational frequency. More generally any molecular system has 3 times the number of atoms, total; degrees of freedom; the difference between that and the number of external; degrees of freedom is the internal degrees of freedom, i.e. the; vibrations. An atom has three external degrees of freedom and thus in turn; has 0 internal degrees of freedom. Hope that helps.; On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:. > Attempting frequency() on atomic species fails irrespective of charge,; > multiplicity, and reference type.; > ; > Typical error message:; > ; > 1 displacements needed.; > 1; > ; > An error has occurred. Traceback:; > : basic_string::replace: File """", line 26, in; > ; > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > frequency; > psi4.thermo(wfn, wfn.frequencies()); > ; > Thanks,; > -drhaney, -- that's ""D. R."", not Doctor.; > ; > Typical input file attached (C atom, neutral triplet).; > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204210196
https://github.com/psi4/psi4/issues/332#issuecomment-204210196:687,Availability,error,error,687,"Admittedly the error message should be updated to be more informative, but; the short answer is a single atom doesn't have a vibrational frequency. More generally any molecular system has 3 times the number of atoms, total; degrees of freedom; the difference between that and the number of external; degrees of freedom is the internal degrees of freedom, i.e. the; vibrations. An atom has three external degrees of freedom and thus in turn; has 0 internal degrees of freedom. Hope that helps.; On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:. > Attempting frequency() on atomic species fails irrespective of charge,; > multiplicity, and reference type.; > ; > Typical error message:; > ; > 1 displacements needed.; > 1; > ; > An error has occurred. Traceback:; > : basic_string::replace: File """", line 26, in; > ; > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > frequency; > psi4.thermo(wfn, wfn.frequencies()); > ; > Thanks,; > -drhaney, -- that's ""D. R."", not Doctor.; > ; > Typical input file attached (C atom, neutral triplet).; > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204210196
https://github.com/psi4/psi4/issues/332#issuecomment-204210196:748,Availability,error,error,748,"Admittedly the error message should be updated to be more informative, but; the short answer is a single atom doesn't have a vibrational frequency. More generally any molecular system has 3 times the number of atoms, total; degrees of freedom; the difference between that and the number of external; degrees of freedom is the internal degrees of freedom, i.e. the; vibrations. An atom has three external degrees of freedom and thus in turn; has 0 internal degrees of freedom. Hope that helps.; On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:. > Attempting frequency() on atomic species fails irrespective of charge,; > multiplicity, and reference type.; > ; > Typical error message:; > ; > 1 displacements needed.; > 1; > ; > An error has occurred. Traceback:; > : basic_string::replace: File """", line 26, in; > ; > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > frequency; > psi4.thermo(wfn, wfn.frequencies()); > ; > Thanks,; > -drhaney, -- that's ""D. R."", not Doctor.; > ; > Typical input file attached (C atom, neutral triplet).; > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204210196
https://github.com/psi4/psi4/issues/332#issuecomment-204210196:39,Deployability,update,updated,39,"Admittedly the error message should be updated to be more informative, but; the short answer is a single atom doesn't have a vibrational frequency. More generally any molecular system has 3 times the number of atoms, total; degrees of freedom; the difference between that and the number of external; degrees of freedom is the internal degrees of freedom, i.e. the; vibrations. An atom has three external degrees of freedom and thus in turn; has 0 internal degrees of freedom. Hope that helps.; On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:. > Attempting frequency() on atomic species fails irrespective of charge,; > multiplicity, and reference type.; > ; > Typical error message:; > ; > 1 displacements needed.; > 1; > ; > An error has occurred. Traceback:; > : basic_string::replace: File """", line 26, in; > ; > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > frequency; > psi4.thermo(wfn, wfn.frequencies()); > ; > Thanks,; > -drhaney, -- that's ""D. R."", not Doctor.; > ; > Typical input file attached (C atom, neutral triplet).; > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204210196
https://github.com/psi4/psi4/issues/332#issuecomment-204210196:627,Energy Efficiency,charge,charge,627,"Admittedly the error message should be updated to be more informative, but; the short answer is a single atom doesn't have a vibrational frequency. More generally any molecular system has 3 times the number of atoms, total; degrees of freedom; the difference between that and the number of external; degrees of freedom is the internal degrees of freedom, i.e. the; vibrations. An atom has three external degrees of freedom and thus in turn; has 0 internal degrees of freedom. Hope that helps.; On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:. > Attempting frequency() on atomic species fails irrespective of charge,; > multiplicity, and reference type.; > ; > Typical error message:; > ; > 1 displacements needed.; > 1; > ; > An error has occurred. Traceback:; > : basic_string::replace: File """", line 26, in; > ; > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > frequency; > psi4.thermo(wfn, wfn.frequencies()); > ; > Thanks,; > -drhaney, -- that's ""D. R."", not Doctor.; > ; > Typical input file attached (C atom, neutral triplet).; > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204210196
https://github.com/psi4/psi4/issues/332#issuecomment-204210196:21,Integrability,message,message,21,"Admittedly the error message should be updated to be more informative, but; the short answer is a single atom doesn't have a vibrational frequency. More generally any molecular system has 3 times the number of atoms, total; degrees of freedom; the difference between that and the number of external; degrees of freedom is the internal degrees of freedom, i.e. the; vibrations. An atom has three external degrees of freedom and thus in turn; has 0 internal degrees of freedom. Hope that helps.; On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:. > Attempting frequency() on atomic species fails irrespective of charge,; > multiplicity, and reference type.; > ; > Typical error message:; > ; > 1 displacements needed.; > 1; > ; > An error has occurred. Traceback:; > : basic_string::replace: File """", line 26, in; > ; > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > frequency; > psi4.thermo(wfn, wfn.frequencies()); > ; > Thanks,; > -drhaney, -- that's ""D. R."", not Doctor.; > ; > Typical input file attached (C atom, neutral triplet).; > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204210196
https://github.com/psi4/psi4/issues/332#issuecomment-204210196:693,Integrability,message,message,693,"Admittedly the error message should be updated to be more informative, but; the short answer is a single atom doesn't have a vibrational frequency. More generally any molecular system has 3 times the number of atoms, total; degrees of freedom; the difference between that and the number of external; degrees of freedom is the internal degrees of freedom, i.e. the; vibrations. An atom has three external degrees of freedom and thus in turn; has 0 internal degrees of freedom. Hope that helps.; On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:. > Attempting frequency() on atomic species fails irrespective of charge,; > multiplicity, and reference type.; > ; > Typical error message:; > ; > 1 displacements needed.; > 1; > ; > An error has occurred. Traceback:; > : basic_string::replace: File """", line 26, in; > ; > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > frequency; > psi4.thermo(wfn, wfn.frequencies()); > ; > Thanks,; > -drhaney, -- that's ""D. R."", not Doctor.; > ; > Typical input file attached (C atom, neutral triplet).; > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204210196
https://github.com/psi4/psi4/issues/332#issuecomment-204212411:175,Availability,error,error,175,"Yeah, we should put a catch in the code to not allow frequency() on an atom. On Thu, Mar 31, 2016 at 10:15 PM, Ryan Richard notifications@github.com; wrote:. > Admittedly the error message should be updated to be more informative, but; > the short answer is a single atom doesn't have a vibrational frequency.; > ; > More generally any molecular system has 3 times the number of atoms, total; > degrees of freedom; the difference between that and the number of external; > degrees of freedom is the internal degrees of freedom, i.e. the; > vibrations. An atom has three external degrees of freedom and thus in turn; > has 0 internal degrees of freedom.; > ; > Hope that helps.; > On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:; > ; > > Attempting frequency() on atomic species fails irrespective of charge,; > > multiplicity, and reference type.; > > ; > > Typical error message:; > > ; > > 1 displacements needed.; > > 1; > > ; > > An error has occurred. Traceback:; > > : basic_string::replace: File """", line 26, in; > > ; > > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > > frequency; > > psi4.thermo(wfn, wfn.frequencies()); > > ; > > Thanks,; > > -drhaney, -- that's ""D. R."", not Doctor.; > > ; > > Typical input file attached (C atom, neutral triplet).; > > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/332; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332#issuecomment-204210196",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204212411
https://github.com/psi4/psi4/issues/332#issuecomment-204212411:885,Availability,error,error,885,"Yeah, we should put a catch in the code to not allow frequency() on an atom. On Thu, Mar 31, 2016 at 10:15 PM, Ryan Richard notifications@github.com; wrote:. > Admittedly the error message should be updated to be more informative, but; > the short answer is a single atom doesn't have a vibrational frequency.; > ; > More generally any molecular system has 3 times the number of atoms, total; > degrees of freedom; the difference between that and the number of external; > degrees of freedom is the internal degrees of freedom, i.e. the; > vibrations. An atom has three external degrees of freedom and thus in turn; > has 0 internal degrees of freedom.; > ; > Hope that helps.; > On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:; > ; > > Attempting frequency() on atomic species fails irrespective of charge,; > > multiplicity, and reference type.; > > ; > > Typical error message:; > > ; > > 1 displacements needed.; > > 1; > > ; > > An error has occurred. Traceback:; > > : basic_string::replace: File """", line 26, in; > > ; > > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > > frequency; > > psi4.thermo(wfn, wfn.frequencies()); > > ; > > Thanks,; > > -drhaney, -- that's ""D. R."", not Doctor.; > > ; > > Typical input file attached (C atom, neutral triplet).; > > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/332; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332#issuecomment-204210196",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204212411
https://github.com/psi4/psi4/issues/332#issuecomment-204212411:956,Availability,error,error,956,"Yeah, we should put a catch in the code to not allow frequency() on an atom. On Thu, Mar 31, 2016 at 10:15 PM, Ryan Richard notifications@github.com; wrote:. > Admittedly the error message should be updated to be more informative, but; > the short answer is a single atom doesn't have a vibrational frequency.; > ; > More generally any molecular system has 3 times the number of atoms, total; > degrees of freedom; the difference between that and the number of external; > degrees of freedom is the internal degrees of freedom, i.e. the; > vibrations. An atom has three external degrees of freedom and thus in turn; > has 0 internal degrees of freedom.; > ; > Hope that helps.; > On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:; > ; > > Attempting frequency() on atomic species fails irrespective of charge,; > > multiplicity, and reference type.; > > ; > > Typical error message:; > > ; > > 1 displacements needed.; > > 1; > > ; > > An error has occurred. Traceback:; > > : basic_string::replace: File """", line 26, in; > > ; > > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > > frequency; > > psi4.thermo(wfn, wfn.frequencies()); > > ; > > Thanks,; > > -drhaney, -- that's ""D. R."", not Doctor.; > > ; > > Typical input file attached (C atom, neutral triplet).; > > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/332; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332#issuecomment-204210196",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204212411
https://github.com/psi4/psi4/issues/332#issuecomment-204212411:199,Deployability,update,updated,199,"Yeah, we should put a catch in the code to not allow frequency() on an atom. On Thu, Mar 31, 2016 at 10:15 PM, Ryan Richard notifications@github.com; wrote:. > Admittedly the error message should be updated to be more informative, but; > the short answer is a single atom doesn't have a vibrational frequency.; > ; > More generally any molecular system has 3 times the number of atoms, total; > degrees of freedom; the difference between that and the number of external; > degrees of freedom is the internal degrees of freedom, i.e. the; > vibrations. An atom has three external degrees of freedom and thus in turn; > has 0 internal degrees of freedom.; > ; > Hope that helps.; > On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:; > ; > > Attempting frequency() on atomic species fails irrespective of charge,; > > multiplicity, and reference type.; > > ; > > Typical error message:; > > ; > > 1 displacements needed.; > > 1; > > ; > > An error has occurred. Traceback:; > > : basic_string::replace: File """", line 26, in; > > ; > > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > > frequency; > > psi4.thermo(wfn, wfn.frequencies()); > > ; > > Thanks,; > > -drhaney, -- that's ""D. R."", not Doctor.; > > ; > > Typical input file attached (C atom, neutral triplet).; > > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/332; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332#issuecomment-204210196",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204212411
https://github.com/psi4/psi4/issues/332#issuecomment-204212411:819,Energy Efficiency,charge,charge,819,"Yeah, we should put a catch in the code to not allow frequency() on an atom. On Thu, Mar 31, 2016 at 10:15 PM, Ryan Richard notifications@github.com; wrote:. > Admittedly the error message should be updated to be more informative, but; > the short answer is a single atom doesn't have a vibrational frequency.; > ; > More generally any molecular system has 3 times the number of atoms, total; > degrees of freedom; the difference between that and the number of external; > degrees of freedom is the internal degrees of freedom, i.e. the; > vibrations. An atom has three external degrees of freedom and thus in turn; > has 0 internal degrees of freedom.; > ; > Hope that helps.; > On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:; > ; > > Attempting frequency() on atomic species fails irrespective of charge,; > > multiplicity, and reference type.; > > ; > > Typical error message:; > > ; > > 1 displacements needed.; > > 1; > > ; > > An error has occurred. Traceback:; > > : basic_string::replace: File """", line 26, in; > > ; > > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > > frequency; > > psi4.thermo(wfn, wfn.frequencies()); > > ; > > Thanks,; > > -drhaney, -- that's ""D. R."", not Doctor.; > > ; > > Typical input file attached (C atom, neutral triplet).; > > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/332; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332#issuecomment-204210196",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204212411
https://github.com/psi4/psi4/issues/332#issuecomment-204212411:181,Integrability,message,message,181,"Yeah, we should put a catch in the code to not allow frequency() on an atom. On Thu, Mar 31, 2016 at 10:15 PM, Ryan Richard notifications@github.com; wrote:. > Admittedly the error message should be updated to be more informative, but; > the short answer is a single atom doesn't have a vibrational frequency.; > ; > More generally any molecular system has 3 times the number of atoms, total; > degrees of freedom; the difference between that and the number of external; > degrees of freedom is the internal degrees of freedom, i.e. the; > vibrations. An atom has three external degrees of freedom and thus in turn; > has 0 internal degrees of freedom.; > ; > Hope that helps.; > On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:; > ; > > Attempting frequency() on atomic species fails irrespective of charge,; > > multiplicity, and reference type.; > > ; > > Typical error message:; > > ; > > 1 displacements needed.; > > 1; > > ; > > An error has occurred. Traceback:; > > : basic_string::replace: File """", line 26, in; > > ; > > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > > frequency; > > psi4.thermo(wfn, wfn.frequencies()); > > ; > > Thanks,; > > -drhaney, -- that's ""D. R."", not Doctor.; > > ; > > Typical input file attached (C atom, neutral triplet).; > > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/332; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332#issuecomment-204210196",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204212411
https://github.com/psi4/psi4/issues/332#issuecomment-204212411:891,Integrability,message,message,891,"Yeah, we should put a catch in the code to not allow frequency() on an atom. On Thu, Mar 31, 2016 at 10:15 PM, Ryan Richard notifications@github.com; wrote:. > Admittedly the error message should be updated to be more informative, but; > the short answer is a single atom doesn't have a vibrational frequency.; > ; > More generally any molecular system has 3 times the number of atoms, total; > degrees of freedom; the difference between that and the number of external; > degrees of freedom is the internal degrees of freedom, i.e. the; > vibrations. An atom has three external degrees of freedom and thus in turn; > has 0 internal degrees of freedom.; > ; > Hope that helps.; > On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:; > ; > > Attempting frequency() on atomic species fails irrespective of charge,; > > multiplicity, and reference type.; > > ; > > Typical error message:; > > ; > > 1 displacements needed.; > > 1; > > ; > > An error has occurred. Traceback:; > > : basic_string::replace: File """", line 26, in; > > ; > > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > > frequency; > > psi4.thermo(wfn, wfn.frequencies()); > > ; > > Thanks,; > > -drhaney, -- that's ""D. R."", not Doctor.; > > ; > > Typical input file attached (C atom, neutral triplet).; > > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/332; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332#issuecomment-204210196",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204212411
https://github.com/psi4/psi4/issues/332#issuecomment-204230882:1067,Energy Efficiency,energy,energy,1067,"Mac's Beer & Wine confirms that they will happily reserve gift cards for you at the register, and you developers need to do better if you want that beer. Usually, a QC app 'fails' gracefully on atomic systems.; By 'fail', I mean that it should: **_handle stupid requests gracefully._**. In practice, the app returns ZPE, Ethermal, Hthermal = 0.0,0.0,0.0, and a reasonable total entropy 30 < S <40 cal/mol-K. Granted, Stotal = Strans and may be of little value. The user adds in some Boltzmann kT multiples to internal E,H as needed. Total energies and enthalpies of atoms are needed for calculating molecular enthalpies of formation by the atomization method. I want this because I'm writing composite method modules for Psi4 with the goal of replicating Gaussian and GAMESS results. It may be invidious to point out that Gaussian, GAMESS, and Nwchem are all well-behaved on the atomic cases, but those applications are why I'm here. [rant on egregious software licenses and general dislike of Fortran redacted]. Next up: CCSD(T) and the H2 molecule, MP2 correlation energy of the hydrogen atom. (joke!); Thanks to all.; -drh",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204230882
https://github.com/psi4/psi4/issues/332#issuecomment-204388708:260,Availability,failure,failure,260,"I agree with the point that the code should go through and report zeros, so; we can do database stuff, etc. I think the thermo code can easily be fixed for this (in fact Brandon has a; new version that has already been tested for atoms). Looks like the first; failure we're hitting is in finite differences. @psi-rking should give; that some thought. David. On Thu, Mar 31, 2016 at 11:31 PM, drhaney notifications@github.com wrote:. > Mac's Beer & Wine confirms that they will happily reserve gift cards for; > you at the register, and you developers need to do better if you want that; > beer.; > ; > Usually, a QC app 'fails' gracefully on atomic systems.; > By 'fail', I mean that it should: _handle stupid requests gracefully._; > ; > In practice, the app returns ZPE, Ethermal, Hthermal = 0.0,0.0,0.0, and a; > reasonable total entropy 30 < S <40 cal/mol-K. Granted, Stotal = Strans and; > may be of little value. The user adds in some Boltzmann kT multiples to; > internal E,H as needed.; > ; > Total energies and enthalpies of atoms are needed for calculating; > molecular enthalpies of formation by the atomization method. I want this; > because I'm writing composite method modules for Psi4 with the goal of; > replicating Gaussian and GAMESS results.; > ; > It may be invidious to point out that Gaussian, GAMESS, and Nwchem are all; > well-behaved on the atomic cases, but those applications are why I'm here.; > [rant on egregious software licenses and general dislike of Fortran; > redacted]; > ; > Next up: CCSD(T) and the H2 molecule, MP2 correlation energy of the; > hydrogen atom. (joke!); > Thanks to all.; > -drh; > ; > —; > You are receiving this because you commented.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332#issuecomment-204230882",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204388708
https://github.com/psi4/psi4/issues/332#issuecomment-204388708:1566,Energy Efficiency,energy,energy,1566,"I agree with the point that the code should go through and report zeros, so; we can do database stuff, etc. I think the thermo code can easily be fixed for this (in fact Brandon has a; new version that has already been tested for atoms). Looks like the first; failure we're hitting is in finite differences. @psi-rking should give; that some thought. David. On Thu, Mar 31, 2016 at 11:31 PM, drhaney notifications@github.com wrote:. > Mac's Beer & Wine confirms that they will happily reserve gift cards for; > you at the register, and you developers need to do better if you want that; > beer.; > ; > Usually, a QC app 'fails' gracefully on atomic systems.; > By 'fail', I mean that it should: _handle stupid requests gracefully._; > ; > In practice, the app returns ZPE, Ethermal, Hthermal = 0.0,0.0,0.0, and a; > reasonable total entropy 30 < S <40 cal/mol-K. Granted, Stotal = Strans and; > may be of little value. The user adds in some Boltzmann kT multiples to; > internal E,H as needed.; > ; > Total energies and enthalpies of atoms are needed for calculating; > molecular enthalpies of formation by the atomization method. I want this; > because I'm writing composite method modules for Psi4 with the goal of; > replicating Gaussian and GAMESS results.; > ; > It may be invidious to point out that Gaussian, GAMESS, and Nwchem are all; > well-behaved on the atomic cases, but those applications are why I'm here.; > [rant on egregious software licenses and general dislike of Fortran; > redacted]; > ; > Next up: CCSD(T) and the H2 molecule, MP2 correlation energy of the; > hydrogen atom. (joke!); > Thanks to all.; > -drh; > ; > —; > You are receiving this because you commented.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332#issuecomment-204230882",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204388708
https://github.com/psi4/psi4/issues/332#issuecomment-204388708:219,Testability,test,tested,219,"I agree with the point that the code should go through and report zeros, so; we can do database stuff, etc. I think the thermo code can easily be fixed for this (in fact Brandon has a; new version that has already been tested for atoms). Looks like the first; failure we're hitting is in finite differences. @psi-rking should give; that some thought. David. On Thu, Mar 31, 2016 at 11:31 PM, drhaney notifications@github.com wrote:. > Mac's Beer & Wine confirms that they will happily reserve gift cards for; > you at the register, and you developers need to do better if you want that; > beer.; > ; > Usually, a QC app 'fails' gracefully on atomic systems.; > By 'fail', I mean that it should: _handle stupid requests gracefully._; > ; > In practice, the app returns ZPE, Ethermal, Hthermal = 0.0,0.0,0.0, and a; > reasonable total entropy 30 < S <40 cal/mol-K. Granted, Stotal = Strans and; > may be of little value. The user adds in some Boltzmann kT multiples to; > internal E,H as needed.; > ; > Total energies and enthalpies of atoms are needed for calculating; > molecular enthalpies of formation by the atomization method. I want this; > because I'm writing composite method modules for Psi4 with the goal of; > replicating Gaussian and GAMESS results.; > ; > It may be invidious to point out that Gaussian, GAMESS, and Nwchem are all; > well-behaved on the atomic cases, but those applications are why I'm here.; > [rant on egregious software licenses and general dislike of Fortran; > redacted]; > ; > Next up: CCSD(T) and the H2 molecule, MP2 correlation energy of the; > hydrogen atom. (joke!); > Thanks to all.; > -drh; > ; > —; > You are receiving this because you commented.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332#issuecomment-204230882",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204388708
https://github.com/psi4/psi4/issues/332#issuecomment-204475629:85,Energy Efficiency,energy,energy,85,"Sounds good. Check for natom==1, and if true assume for rovibrations only 1 state/no energy or entropy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204475629
https://github.com/psi4/psi4/issues/332#issuecomment-204559936:268,Energy Efficiency,Energy,Energy,268,"Returning 0.0 works fine for the interrim, however the issue will need to be revisited eventually. The following are excerpts from Hessian runs from two other QM apps. **Nwchem** reports the following for atomic Boron as a neutral doublet:. > Zero-Point correction to Energy = 0.000 kcal/mol ( 0.000000 au); > Thermal correction to Energy = 0.888 kcal/mol ( 0.001416 au); > Thermal correction to Enthalpy = 1.481 kcal/mol ( 0.002359 au); > ; > Total Entropy = 33.126 cal/mol-K; > - Translational = 33.126 cal/mol-K (mol. weight = 11.0093); > - Rotational = 0.000 cal/mol-K (symmetry # = 1); > - Vibrational = 0.000 cal/mol-K; > ; > Cv (constant volume heat capacity) = 2.979 cal/mol-K; > - Translational = 2.979 cal/mol-K; > - Rotational = 0.000 cal/mol-K; > - Vibrational = 0.000 cal/mol-K. **GAMESS'** authors include electronic properties. Kcal and cal/mol-K units are omitted since the markdown can't handle them easily. . | | E | H | G | CV | CP | S |; | --- | --- | --- | --- | --- | --- | --- |; | ELEC. | 0.000 | 0.000 | -0.411 | 0.000 | 0.000 | 1.377 |; | TRANS. | 0.889 | 1.481 | -8.400 | 2.981 | 4.968 | 33.141 |; | ROT. | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 |; | VIB. | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 |; | TOTAL | 0.889 | 1.481 | -8.810 | 2.981 | 4.968 | 34.518 |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204559936
https://github.com/psi4/psi4/issues/332#issuecomment-204559936:332,Energy Efficiency,Energy,Energy,332,"Returning 0.0 works fine for the interrim, however the issue will need to be revisited eventually. The following are excerpts from Hessian runs from two other QM apps. **Nwchem** reports the following for atomic Boron as a neutral doublet:. > Zero-Point correction to Energy = 0.000 kcal/mol ( 0.000000 au); > Thermal correction to Energy = 0.888 kcal/mol ( 0.001416 au); > Thermal correction to Enthalpy = 1.481 kcal/mol ( 0.002359 au); > ; > Total Entropy = 33.126 cal/mol-K; > - Translational = 33.126 cal/mol-K (mol. weight = 11.0093); > - Rotational = 0.000 cal/mol-K (symmetry # = 1); > - Vibrational = 0.000 cal/mol-K; > ; > Cv (constant volume heat capacity) = 2.979 cal/mol-K; > - Translational = 2.979 cal/mol-K; > - Rotational = 0.000 cal/mol-K; > - Vibrational = 0.000 cal/mol-K. **GAMESS'** authors include electronic properties. Kcal and cal/mol-K units are omitted since the markdown can't handle them easily. . | | E | H | G | CV | CP | S |; | --- | --- | --- | --- | --- | --- | --- |; | ELEC. | 0.000 | 0.000 | -0.411 | 0.000 | 0.000 | 1.377 |; | TRANS. | 0.889 | 1.481 | -8.400 | 2.981 | 4.968 | 33.141 |; | ROT. | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 |; | VIB. | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 | 0.000 |; | TOTAL | 0.889 | 1.481 | -8.810 | 2.981 | 4.968 | 34.518 |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204559936
