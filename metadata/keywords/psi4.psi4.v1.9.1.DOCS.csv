quality_attribute,keyword,matched_word,sentence,source,filename,author,repo,version,wiki,url
Availability,avail,available,"html (for the CMake adept, see [CMakeLists.txt](CMakeLists.txt#L27). * **Manual** [http://bit.ly/psi4manual](https://psicode.org/psi4manual/master/index.html) (built nightly from master branch) or https://psicode.org/psi4manual/1.4.0/index.html (last release). * **Tutorial** https://psicode.org/psi4manual/master/tutorial.html for Psithon (``psi4 job.in``), https://psicode.org/psi4manual/master/psiapi.html for PsiAPI (``python job.py``). * **Forum** http://forum.psicode.org. * **Communication & Support** https://psicode.org/psi4manual/master/introduction.html#technical-support. * **GitHub** https://github.com/psi4/psi4 (authoritative repository). * **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1/master.svg?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) on Linux and Windows. * **Anaconda** https://anaconda.org/psi4 (binary available for Linux, Mac, Mac Silicon, Windows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/ma",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
Deployability,release,release,"# <img src=""https://github.com/psi4/psi4media/blob/master/logos-psi4/psi4square.png"" height=150>. | **Status** | [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) [![Codecov coverage](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | ",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
Energy Efficiency,green,green,"dge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.com/installs/latest) [![Conda](https://img.shields.io/conda/v/conda-forge/psi4.svg)](https://anaconda.org/conda-forge/psi4) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/psi4/badges/latest_release_relative_date.svg)](https://anaconda.org/conda-forge/psi4) |; | **Demo** | [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/psi4/psi4/56fbc7787af67dabdf1897d0dfe4263d8d97e241?urlpath=lab%2Ftree%2Fdoc%2Fsphinxman%2Fsource%2Fpsiapi.ipynb) |. <!-- -->; <!-- [![Last release date](https://img.shields.io/github/release-date/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) -->; <!-- [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/version.svg)](https://anaconda.org/psi4/psi4) -->. <!--<a href=""https://psi4.slack.com/messages""> <img src=""https://img.shields.io/badge/dev_chat-on_slack-808493.svg"" /></a>; <a href=""mailto:psi4aiqc+slackinvite@gmail.com?subject=request slack invite (incl. who, where, ",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
Integrability,message,messages,"03.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.com/installs/latest) [![Conda](https://img.shields.io/conda/v/conda-forge/psi4.svg)](https://anaconda.org/conda-forge/psi4) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/psi4/badges/latest_release_relative_date.svg)](https://anaconda.org/conda-forge/psi4) |; | **Demo** | [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/psi4/psi4/56fbc7787af67dabdf1897d0dfe4263d8d97e241?urlpath=lab%2Ftree%2Fdoc%2Fsphinxman%2Fsource%2Fpsiapi.ipynb) |. <!-- -->; <!-- [![Last release date](https://img.shields.io/github/release-date/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) -->; <!-- [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/version.svg)](https://anaconda.org/psi4/psi4) -->. <!--<a href=""https://psi4.slack.com/messages""> <img src=""https://img.shields.io/badge/dev_chat-on_slack-808493.svg"" /></a>; <a href=""mailto:psi4aiqc+slackinvite@gmail.com?subject=request slack invite (incl. who, where, email)""> <img src=""https://img.shields.io/badge/dev_chat-invite-808493.svg"" /></a> -->. <!--[![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/installer/conda.svg)](https://anaconda.org/psi4/psi4) ; [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/platforms.svg)](https://anaconda.org/psi4/psi4) -->. <!--; | **PR Activity** | ; [![commit activity](https://img.shields.io/github/commit-activity/y/psi4/psi4.svg)](https://github.com/psi4/psi4/graphs/contributors) ; [![issues-pr-closed](https://img.shields.io/github/issues-pr-closed-raw/psi4/psi4.svg)](https://github.com/psi4/psi4/pulls); -->. Psi4 is an open-source suite of *ab initio* quantum chemistry programs; designed for efficient, high-accuracy simulations of; molecular properties. We routinely perform computations with >2500 basis functions ",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
Modifiability,flexible,flexible,"ject=request slack invite (incl. who, where, email)""> <img src=""https://img.shields.io/badge/dev_chat-invite-808493.svg"" /></a> -->. <!--[![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/installer/conda.svg)](https://anaconda.org/psi4/psi4) ; [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/platforms.svg)](https://anaconda.org/psi4/psi4) -->. <!--; | **PR Activity** | ; [![commit activity](https://img.shields.io/github/commit-activity/y/psi4/psi4.svg)](https://github.com/psi4/psi4/graphs/contributors) ; [![issues-pr-closed](https://img.shields.io/github/issues-pr-closed-raw/psi4/psi4.svg)](https://github.com/psi4/psi4/pulls); -->. Psi4 is an open-source suite of *ab initio* quantum chemistry programs; designed for efficient, high-accuracy simulations of; molecular properties. We routinely perform computations with >2500 basis functions on multi-core machines. With computationally demanding portions written in C++, exports; of many C++ classes into Python via Pybind11, and a flexible Python driver, Psi4; strives to be friendly to both users and developers. * **Users' Website** www.psicode.org. * **Downloading and Installing Psi4** https://psicode.org/psi4manual/master/build_faq.html (for the CMake adept, see [CMakeLists.txt](CMakeLists.txt#L27). * **Manual** [http://bit.ly/psi4manual](https://psicode.org/psi4manual/master/index.html) (built nightly from master branch) or https://psicode.org/psi4manual/1.4.0/index.html (last release). * **Tutorial** https://psicode.org/psi4manual/master/tutorial.html for Psithon (``psi4 job.in``), https://psicode.org/psi4manual/master/psiapi.html for PsiAPI (``python job.py``). * **Forum** http://forum.psicode.org. * **Communication & Support** https://psicode.org/psi4manual/master/introduction.html#technical-support. * **GitHub** https://github.com/psi4/psi4 (authoritative repository). * **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
Performance,perform,perform,".com/messages""> <img src=""https://img.shields.io/badge/dev_chat-on_slack-808493.svg"" /></a>; <a href=""mailto:psi4aiqc+slackinvite@gmail.com?subject=request slack invite (incl. who, where, email)""> <img src=""https://img.shields.io/badge/dev_chat-invite-808493.svg"" /></a> -->. <!--[![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/installer/conda.svg)](https://anaconda.org/psi4/psi4) ; [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/platforms.svg)](https://anaconda.org/psi4/psi4) -->. <!--; | **PR Activity** | ; [![commit activity](https://img.shields.io/github/commit-activity/y/psi4/psi4.svg)](https://github.com/psi4/psi4/graphs/contributors) ; [![issues-pr-closed](https://img.shields.io/github/issues-pr-closed-raw/psi4/psi4.svg)](https://github.com/psi4/psi4/pulls); -->. Psi4 is an open-source suite of *ab initio* quantum chemistry programs; designed for efficient, high-accuracy simulations of; molecular properties. We routinely perform computations with >2500 basis functions on multi-core machines. With computationally demanding portions written in C++, exports; of many C++ classes into Python via Pybind11, and a flexible Python driver, Psi4; strives to be friendly to both users and developers. * **Users' Website** www.psicode.org. * **Downloading and Installing Psi4** https://psicode.org/psi4manual/master/build_faq.html (for the CMake adept, see [CMakeLists.txt](CMakeLists.txt#L27). * **Manual** [http://bit.ly/psi4manual](https://psicode.org/psi4manual/master/index.html) (built nightly from master branch) or https://psicode.org/psi4manual/1.4.0/index.html (last release). * **Tutorial** https://psicode.org/psi4manual/master/tutorial.html for Psithon (``psi4 job.in``), https://psicode.org/psi4manual/master/psiapi.html for PsiAPI (``python job.py``). * **Forum** http://forum.psicode.org. * **Communication & Support** https://psicode.org/psi4manual/master/introduction.html#technical-support. * **GitHub** https://github.com/psi4/psi4 (author",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
Testability,log,logos-,"# <img src=""https://github.com/psi4/psi4media/blob/master/logos-psi4/psi4square.png"" height=150>. | **Status** | [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) [![Codecov coverage](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | ",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
Deployability,continuous,continuous,"g.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](http://www.contribution-guide.org); * [Thinkful PR example](http://www.thinkful.com/learn/github-pull-request-tutorial/#Time-to-Submit-Your-First-PR). ",MatchSource.DOCS,.github/CONTRIBUTING.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md
Integrability,integrat,integration,"g.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](http://www.contribution-guide.org); * [Thinkful PR example](http://www.thinkful.com/learn/github-pull-request-tutorial/#Time-to-Submit-Your-First-PR). ",MatchSource.DOCS,.github/CONTRIBUTING.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md
Security,validat,validated," [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-forkpsi4public).; and [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](ht",MatchSource.DOCS,.github/CONTRIBUTING.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md
Testability,test,test," [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-forkpsi4public).; and [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](ht",MatchSource.DOCS,.github/CONTRIBUTING.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md
Usability,learn,learn,"# How to contribute. We welcome contributions from external contributors, and this document; describes how to merge code changes into Psi4. As of February 2016, the; procedure for contributing code is exactly the same for the core development; team and for external contributors. **Working on your first Pull Request?** You can learn how from; this *free* series [How to Contribute to an Open Source Project on; GitHub](https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github). ## Getting Started. * Make sure you have a [GitHub account](https://github.com/signup/free).; * [Fork](https://help.github.com/articles/fork-a-repo/) the; [psi4/psi4](https://github.com/psi4/psi4) repository on GitHub.; * On your local machine,; [clone](https://help.github.com/articles/cloning-a-repository/) your fork of; the Psi4 repository.; * More detailed instructions for interacting with your Psi4 fork can be found; [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-forkpsi4public).; and [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the P",MatchSource.DOCS,.github/CONTRIBUTING.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md
Deployability,release,release,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge; ",MatchSource.DOCS,.github/PULL_REQUEST_TEMPLATE.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/PULL_REQUEST_TEMPLATE.md
Testability,test,tests,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge; ",MatchSource.DOCS,.github/PULL_REQUEST_TEMPLATE.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/PULL_REQUEST_TEMPLATE.md
Availability,reliab,reliability,"The Psi4 package is distributed for free and without any; guarantee of reliability, accuracy, or suitability for any; particular purpose. No obligation to provide technical support is; expressed or implied. As time allows, the developers will attempt; to answer inquiries on the [forum](http://forum.psicode.org>) or; [GitHub](https://github.com/psi4/psi4/issues/new). For bug reports,; specific and detailed information, with example inputs and `psi4; --version`, would be appreciated. #### Where-to-post summary. * How do I? -- [ask the forum](http://forum.psicode.org). * I got this error, why? -- [ask the forum](http://forum.psicode.org). * I got this error and I'm sure it's a bug -- [file a GitHub issue](https://github.com/psi4/psi4/issues/new). * Can I open a discussion on this bit of code? -- [file a GitHub issue](https://github.com/psi4/psi4/issues/new). * I have an idea/request and a plan -- [file a GitHub issue](https://github.com/psi4/psi4/issues/new). * I have an idea/request -- [ask the forum](http://forum.psicode.org). * Why do you? -- [ask the forum](http://forum.psicode.org). * When will you? -- [ask the forum](http://forum.psicode.org). * I have an experience that can improve the documentation -- [inform the forum](http://forum.psicode.org) or [edit the docs via the little pencil](http://psicode.org/psi4manual/master/index.html) or [add to the documentation itself](doc/sphinxman/source). * Anything you want to share privately -- psi4aiqc+help at gmail.com. ",MatchSource.DOCS,.github/SUPPORT.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/SUPPORT.md
Safety,avoid,avoid,"[LAB 10-19-2016]. * Majority of logos detached from main Psi4 repo into https://github.com/psi4/psi4media . [LAB 9-29-2016]. * See doc/sphinxman/source/psi4doc/themes/psi4doc/theme.conf; for Psi4 colors and customary icon linking. [LAB 2-18-2015]. * Text ""SI"" in ""PSI4"" changed to 82% size of ""P"" & ""4""; 54 pt for banner; files. This should avoid the ""Public School 14"" issue, while not looking; so lopsided as genuine small-caps font. [LAB 11-18-2014]. * Text ""Ab Initio"" changed to ""Open-Source"". [LAB 4-20-2012]. * Text ""PSI4"" is Optima Regular at 66 pt in CMYK = [100, 95, 0, 0]. * Text ""Ab Initio Quantum Chemistry"" is Optima Bold at 16 pt; in CMYK = [0, 0, 0, 100] with 100 (AI units) spacing stretch. * The difference between ""vector"" and other files in this directory is in; the trimming of self-interference at the tips of the psi graphic. This; process turns the psi into a raster object, so the color and 3D effects; are no longer editable. * All transparencies are set such that these can be placed over any color; background. ",MatchSource.DOCS,media/README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/media/README.md
Testability,log,logos,"[LAB 10-19-2016]. * Majority of logos detached from main Psi4 repo into https://github.com/psi4/psi4media . [LAB 9-29-2016]. * See doc/sphinxman/source/psi4doc/themes/psi4doc/theme.conf; for Psi4 colors and customary icon linking. [LAB 2-18-2015]. * Text ""SI"" in ""PSI4"" changed to 82% size of ""P"" & ""4""; 54 pt for banner; files. This should avoid the ""Public School 14"" issue, while not looking; so lopsided as genuine small-caps font. [LAB 11-18-2014]. * Text ""Ab Initio"" changed to ""Open-Source"". [LAB 4-20-2012]. * Text ""PSI4"" is Optima Regular at 66 pt in CMYK = [100, 95, 0, 0]. * Text ""Ab Initio Quantum Chemistry"" is Optima Bold at 16 pt; in CMYK = [0, 0, 0, 100] with 100 (AI units) spacing stretch. * The difference between ""vector"" and other files in this directory is in; the trimming of self-interference at the tips of the psi graphic. This; process turns the psi into a raster object, so the color and 3D effects; are no longer editable. * All transparencies are set such that these can be placed over any color; background. ",MatchSource.DOCS,media/README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/media/README.md
Availability,down,download,"# GHA for Psi4. ## [docs.yml](./docs.yml). * Since: April 2021; * Runs on: push to master; * Goals:; * get CI warning if doxygen docs compile broken; * get CI warning if sphinx docs compile broken, or compile with warnings, or compile with unreachable links, or can't compile nit-picky""; * publish nightly-build docs promptly and automatically; * get CI warning if psi4 compile broken with conda-forge environment (as opposed to the usual defaults-based environment); * Results:; * automated commit of built HTML docs to psi4/psi4docs:master, which in turn is served up by netlify to https://psi4manual.netlify.app/, which in turn is [redirected by psicode](https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml) into https://psicode.org/psi4manual/master/index.html. ----. ## [ecosystem.yml](./ecosystem.yml). * Since: March 2022; * Runs on: PR, push to master; * Goals:; * get CI warning if PR breaks addons hosted by psi4 channel or by conda-forge chanel; * show CI model of how to build Psi4 on Linux, macOS, and Windows platforms, including tweaks to the build environment, and emphasizing the minor differences between platforms; * show how to run with the maximal ecosystem (less proprietary addons, gpu addons, and addons I haven't packaged), as the environment can be tricky; * show what addon packages to get from what channel, especially during shift from defaults-based to conda-forge-based; * Results:; * None. ----. ## [docs-pr.yml](./docs-pr.yml). * Since: June 2022; * Runs on: PR; * Goals; * provide CI warning to author if PR changes break sphinx docs compile, or compile with warnings, or compile with unreachable links, or can't compile nit-picky""; * Results; * archived tarball of HTML docs (download from Actions, Archives, then unpack and view in browser). ",MatchSource.DOCS,.github/workflows/README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/workflows/README.md
Modifiability,variab,variable,". Where does CMake search math libraries if you specify --blas/lapack=auto?; -------------------------------------------------------------------------. CMake will look in the environment variable MATH_ROOT. For instance my .bashrc contains::. source /opt/intel/bin/compilervars.sh intel64; export MATH_ROOT=/opt/intel/mkl. Order of math libraries; -----------------------. Order is set by MATH_LIB_SEARCH_ORDER in MathLibs.cmake.; You can override this order by setting BLAS_TYPE and/or LAPACK_TYPE; for example to ATLAS or some other library that you prefer. What to edit if your math library is not found although you have set MATH_ROOT?; -------------------------------------------------------------------------------. Normally you only need to edit MathLibs.cmake to add new libraries; or edit existing ones. Since a vendor can provide libraries with different ""fingerprints""; (example MKL), you can define different combinations (up to 9), for instance::. set(MKL_BLAS_LIBS ...); set(MKL_BLAS_LIBS2 ...); set(MKL_BLAS_LIBS3 ...); set(MKL_BLAS_LIBS4 ...); set(MKL_BLAS_LIBS5 ...). Then CMake will first try MKL_BLAS_LIBS, then MKL_BLAS_LIBS2, etc.; The first pattern that will match will be linked against.; ",MatchSource.DOCS,cmake/math/README.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/cmake/math/README.rst
Availability,avail,available,"ve; depend on the ADC level employed. With this also the computational cost changes.; The key computational step, namely the formation of the matrix-vector products; scales as :math:`{\cal O}(N^5)` for ADC(2) and :math:`{\cal O}(N^6)`; for ADC(2)-x and ADC(3). Several additional approximations,; such as frozen-core, frozen-virtual; may be applied to reduce the cost of the problem.; Using the core-valence separation (CVS) approximation; one may specifically target core-valence-excitations; at a substantial reduction in cost.; With the spin-flip modification few-reference ground states can; be tackled starting from a triplet reference by simultaneously; exciting an electron and flipping its spin.; A more detailed overview of such modifications gives [Dreuw:2014:82]_; and the `adcc theory documentation <https://adc-connect.org/latest/theory.html>`_. Available ADC methods; ---------------------; .. sectionauthor:: Michael F. Herbst. Several ADC methods are available in |PSIfour| for the computation of excited states,; see :ref:`table:adcsummary`.; The methods are available via an interface to the `adcc <https://adc-connect.org>`_ python module.; After a more general introduction, specific aspects of the implementation will be highlighted; in section :ref:`sec:interfaceadcc`. .. _`table:adcsummary`:. .. table:: ADC capabilities of Psi4. +---------------+------------+---------------+-------+------------------------------------+; | Method | References | Exc. Energies | Props | Supported values for kind keyword |; +===============+============+===============+=======+====================================+; | ADC(1) | RHF, UHF | yes | yes | any, singlet, triplet, spin_flip |; +---------------+------------+---------------+-------+------------------------------------+; | ADC(2) | RHF, UHF | yes | yes | any, singlet, triplet, spin_flip |; +---------------+------------+---------------+-------+------------------------------------+; | ADC(2)-x | RHF, UHF | yes | yes | any, singlet,",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
Energy Efficiency,reduce,reduce," to the single and *D* to the double excitation manifolds.; This matrix is typically sparse and thus may be diagonalised iteratively,; for example using Davidson's method [Dreuw:2014:82]_. An alternative viewpoint; has been addressed for example in [Haettig:2002]_, where ADC(2) is related; to other response theories such as CC2-LR, CIS(D) and CIS(D\ :math:`_n`).; In this sense one may consider the ADC matrix the correlated response matrix; to a response problem based on CIS; and apply the simultaneous expansion method (SEM),; in which the |sigma|-vectors (ADC matrix-vector products); are constructed several times. The structure and order of the blocks in the equation above; depend on the ADC level employed. With this also the computational cost changes.; The key computational step, namely the formation of the matrix-vector products; scales as :math:`{\cal O}(N^5)` for ADC(2) and :math:`{\cal O}(N^6)`; for ADC(2)-x and ADC(3). Several additional approximations,; such as frozen-core, frozen-virtual; may be applied to reduce the cost of the problem.; Using the core-valence separation (CVS) approximation; one may specifically target core-valence-excitations; at a substantial reduction in cost.; With the spin-flip modification few-reference ground states can; be tackled starting from a triplet reference by simultaneously; exciting an electron and flipping its spin.; A more detailed overview of such modifications gives [Dreuw:2014:82]_; and the `adcc theory documentation <https://adc-connect.org/latest/theory.html>`_. Available ADC methods; ---------------------; .. sectionauthor:: Michael F. Herbst. Several ADC methods are available in |PSIfour| for the computation of excited states,; see :ref:`table:adcsummary`.; The methods are available via an interface to the `adcc <https://adc-connect.org>`_ python module.; After a more general introduction, specific aspects of the implementation will be highlighted; in section :ref:`sec:interfaceadcc`. .. _`table:adcsummary`:. .. ta",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
Integrability,depend,depend,"bf{A}`, the eigenproblem can be written; in terms of several blocks. .. math:: \begin{pmatrix}; \mathbf{A_{SS}} & \mathbf{A_{SD}}\\; \mathbf{A_{DS}} & \mathbf{A_{DD}}; \end{pmatrix}; \begin{pmatrix}; \mathbf{X_S}\\; \mathbf{X_D}; \end{pmatrix}; =\omega; \begin{pmatrix}; \mathbf{X_S}\\; \mathbf{X_D}; \end{pmatrix}. where *S* refers to the single and *D* to the double excitation manifolds.; This matrix is typically sparse and thus may be diagonalised iteratively,; for example using Davidson's method [Dreuw:2014:82]_. An alternative viewpoint; has been addressed for example in [Haettig:2002]_, where ADC(2) is related; to other response theories such as CC2-LR, CIS(D) and CIS(D\ :math:`_n`).; In this sense one may consider the ADC matrix the correlated response matrix; to a response problem based on CIS; and apply the simultaneous expansion method (SEM),; in which the |sigma|-vectors (ADC matrix-vector products); are constructed several times. The structure and order of the blocks in the equation above; depend on the ADC level employed. With this also the computational cost changes.; The key computational step, namely the formation of the matrix-vector products; scales as :math:`{\cal O}(N^5)` for ADC(2) and :math:`{\cal O}(N^6)`; for ADC(2)-x and ADC(3). Several additional approximations,; such as frozen-core, frozen-virtual; may be applied to reduce the cost of the problem.; Using the core-valence separation (CVS) approximation; one may specifically target core-valence-excitations; at a substantial reduction in cost.; With the spin-flip modification few-reference ground states can; be tackled starting from a triplet reference by simultaneously; exciting an electron and flipping its spin.; A more detailed overview of such modifications gives [Dreuw:2014:82]_; and the `adcc theory documentation <https://adc-connect.org/latest/theory.html>`_. Available ADC methods; ---------------------; .. sectionauthor:: Michael F. Herbst. Several ADC methods are available in |PSIfour| ",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
Modifiability,variab,variables," as; |globals__freeze_core| and |globals__num_frozen_uocc|; are supported with all ADC methods using the adcc backend. Currently adcc is only capable of performing in-core calculations,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computations and tensor storage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed. More detailed documentation about adcc and its features can be found; at `<https://adc-connect.org>`_,; especially the `theory section <https://adc-connect.org/latest/theory.html>`_.; If you are using adcc from |PSIfour| for your calculations,; please cite both |PSIfour| as well as adcc [Herbst2020]_; in your published work. **The ADC wavefunction object.**; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned :py:class:`~psi4.core.Wavefunction`; in case they are computed.; In the following the ``<method>`` prefix refers to the ADC method (such as ``adc(1)``,; ``adc(3)``, ``cvs-adc(2)-x``). * Ground state energy terms like ``MP2 correlation energy``, ``MP3 correlation energy``,; ``MP2 total energy``, ``MP3 total energy``, ``current correlation energy`` and ``current energy``.; * ``MP2 dipole X`` and the other components: Ground state dipole moments at MP(2) level.; * ``number of iterations``: The number of iterations the iterative solver required to converge.; * ``number of excited states``: The number of excited states, which were computed.; * More variables are summarized in :ref:`apdx:psivariables_alpha`. The following attribute is set on returned wavefunctions:. * ``adcc_state``: The `adcc.ExcitedStates <https://adc-connect.org/q/excitedstates>`_; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the for",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
Performance,perform,performed,"roots_per_irrep|,; which is an array with the number of excited states desired; for each irreducible representation. Most ADC methods; are only supported at C1 symmetry at the moment, such that; this option should in most cases be set to an array with a single; element only. For example one can run an ADC(2) calculation for 10; (singlet) excited states using::. set roots_per_irrep [10]; properties('adc(2)', properties=[""oscillator_strength""]). where the ``molecule`` section was dropped for brevity. **Selecting the excitation manifold.**; To select between the possible excitation manifolds,; use the |adc__kind| keyword. For restricted references; by default only singlet excited states are computed,; corresponding to the keyword value ``'singlet'``.; To compute triplet states, select ``'triplet'``.; To compute both without making a spin distinction, select ``'any'``.; The latter is default for unrestricted references. The special |adc__kind| value ``'spin_flip'`` selects; a spin-flip computation where a simultaneous flip of spin; and excitation is performed. This is only available; for unrestricted references and not for ``CVS-ADC(n)`` methods,; see table :ref:`table:adcsummary`. **Using the core-valence separation.**; For tackling core-valence excitations using the ``CVS-ADC(n)``; methods, the keyword argument |adc__num_core_orbitals|; is additionally required. It is used to specify the number of; (spatial) orbitals to put into the core space and thus select; as target orbitals for a core-valence excitation process.; A value of ``2`` indicates, for example,; that the two lowest-energy :math:`\alpha` and the two; lowest-energy :math:`\beta` orbitals are placed in the core space.; Since the implemented ADC procedures tackle the; lowest-energy excitations, the value should be specified; such that the targeted core orbital is just inside the core space. *Example:* Consider furane, :math:`C_4H_4O`. In order to tackle; the oxygen 1s edge, *i.e* simulate a O 1s XAS spectrum,",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
Security,access,access,"unning the ADC calculation in adcc, the interface code sets; a number of variables in the returned :py:class:`~psi4.core.Wavefunction`; in case they are computed.; In the following the ``<method>`` prefix refers to the ADC method (such as ``adc(1)``,; ``adc(3)``, ``cvs-adc(2)-x``). * Ground state energy terms like ``MP2 correlation energy``, ``MP3 correlation energy``,; ``MP2 total energy``, ``MP3 total energy``, ``current correlation energy`` and ``current energy``.; * ``MP2 dipole X`` and the other components: Ground state dipole moments at MP(2) level.; * ``number of iterations``: The number of iterations the iterative solver required to converge.; * ``number of excited states``: The number of excited states, which were computed.; * More variables are summarized in :ref:`apdx:psivariables_alpha`. The following attribute is set on returned wavefunctions:. * ``adcc_state``: The `adcc.ExcitedStates <https://adc-connect.org/q/excitedstates>`_; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example ``adcc_state.plot_spectrum()`` plots a broadened excited states spectrum; in matplotlib. See the `adcc calculations documentation <https://adc-connect.org/latest/calculations.html>`_; for details. **Tips for convergence issues.**; If you encounter convergence issues inside adcc, the following parameters; are worth tweaking:. * |adc__max_num_vecs|: Specifies the maximal number of subspace vectors; in the Jacobi-Davidson scheme before a restart occurs. The defaults are usually; good, but do not be shy to increase this value if you encounter convergence problems.; * |adc__num_guesses|: By default adcc uses twice as many guess vectors as; states to be computed. Sometimes increasing this value by a few vectors can be helpful.; If you encounter a convergence to zero eigenvalues, than decreasing this parameter might; solve the problems.; ",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
Usability,simpl,simply,"-----------+-------+------------------------------------+; | ADC(3) | RHF, UHF | yes | yes | any, singlet, triplet, spin_flip |; +---------------+------------+---------------+--------------------------------------------+; | CVS-ADC(1) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(2) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(2)-x | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(3) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+. The leftmost column of table :ref:`table:adcsummary` provides the supported ADC methods.; If only excitation energies are desired, one can simply pass one; of the listed method strings to the function :py:func:`~psi4.driver.energy`.; For example, ``energy('adc(2)-x')`` will compute; excitation energies at ADC(2)-x level.; Properties such as oscillator strengths, transition or state dipole moments; are available by calling the function :py:func:`~psi4.driver.properties`; with appropriate arguments.; Most commonly users will want to compute at least oscillator strengths; along with the excitation energies,; resulting in a call like ``properties('adc(2)', properties=[""oscillator_strength""])``. Running ADC calculations; ------------------------; .. sectionauthor:: Michael F. Herbst. Running an ADC calculation with |PSIfour| requires; the call to :py:func:`~psi4.driver.properties` as discussed above; as well as one or more mandatory keyword arguments. The most important keyword argument is |adc__roots_per_irrep|,; which is an array with the number of excited states desired; for each irreducible representation. Most ADC methods; are only sup",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
Availability,avail,available,"r>`. .. image:: https://img.shields.io/badge/home-adcc-informational.svg; :target: https://code.adc-connect.org. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://adc-connect.org/latest. |PSIfour| contains code to interface to the adcc python module developed; by M. F. Herbst *et. al.*. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for ",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
Deployability,configurat,configuration,"r General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: adcc, ADC. .. _`sec:adcc`:. Interface to adcc by M. F. Herbst and M. Scheurer; =================================================. .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. *Module:* :ref:`Keywords <apdx:adc>`, :ref:`PSI Variables <apdx:adc_psivar>`. .. image:: https://img.shields.io/badge/home-adcc-informational.svg; :target: https://code.adc-connect.org. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://adc-connect.org/latest. |PSIfour| contains code to interface to the adcc python module developed; by M. F. Herbst *et. al.*. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makev",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
Integrability,interface,interface,"arranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: adcc, ADC. .. _`sec:adcc`:. Interface to adcc by M. F. Herbst and M. Scheurer; =================================================. .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. *Module:* :ref:`Keywords <apdx:adc>`, :ref:`PSI Variables <apdx:adc_psivar>`. .. image:: https://img.shields.io/badge/home-adcc-informational.svg; :target: https://code.adc-connect.org. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://adc-connect.org/latest. |PSIfour| contains code to interface to the adcc python module developed; by M. F. Herbst *et. al.*. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can b",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
Modifiability,config,configuration,"r General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: adcc, ADC. .. _`sec:adcc`:. Interface to adcc by M. F. Herbst and M. Scheurer; =================================================. .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. *Module:* :ref:`Keywords <apdx:adc>`, :ref:`PSI Variables <apdx:adc_psivar>`. .. image:: https://img.shields.io/badge/home-adcc-informational.svg; :target: https://code.adc-connect.org. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://adc-connect.org/latest. |PSIfour| contains code to interface to the adcc python module developed; by M. F. Herbst *et. al.*. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makev",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
Safety,detect,detect," the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for adcc; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/adc__cutoff_amps_print.rst; .. include:: autodir_options_c/adc__kind.rst; .. include:: autodir_options_c/adc__max_num_vecs.rst; .. include:: autodir_options_c/adc__maxiter.rst; .. include:: autodir_options_c/adc__num_core_orbitals.rst; .. include:: autodir_options_c/adc__num_guesses.rst; .. include:: autodir_options_c/adc__r_convergence.rst; .. include:: autodir_op",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
Availability,mainten,maintenance," A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :sourc",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
Deployability,install,installed,"it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speakin",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
Energy Efficiency,energy,energy,"e test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMak",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
Integrability,integrat,integration,"o fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS li",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
Modifiability,refactor,refactoring," A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :sourc",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
Performance,load,load-balancing,"added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modification",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
Safety,detect,detect,"# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.;",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
Security,validat,validation,"""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with undersc",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
Testability,test,test,"; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying librari",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
Usability,simpl,simple,"PI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
Testability,test,testsuite,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:appendices`:. ==========; Appendices; ==========. Keywords; ========. .. toctree::; :maxdepth: 2. autodoc_glossary_options_c; autodoc_options_c_bymodule. Basis Sets; ==========. .. toctree::; :maxdepth: 2. basissets_tables; basissets_byelement; basissets_byfamily. .. _`sec:appendices:qcvars`:. QCVariables (aka PSI Variables); ===============================. .. toctree::; :maxdepth: 2. glossary_psivariables; autodoc_psivariables_bymodule. Miscellaneous; =============. .. toctree::; :maxdepth: 2. testsuite; dft_byfunctional; autodoc_psifiles; autodoc_physconst; bibliography. ",MatchSource.DOCS,doc/sphinxman/source/appendices.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/appendices.rst
Availability,avail,available,"===. Basis sets in |PSIfour| are Gaussian functions (not Slater-type functions or plane waves),; all-electron [no effective core potentials (ECPs)],; and of Gaussian94 format (for ease of export from `EMSL <https://bse.pnl.gov/bse/portal>`_).; Both spherical harmonic (5D/7F) and Cartesian (6D/10F) Gaussian functions are supported,; but their mixtures are not, neither within a basis set (*e.g.*, 6D/7F) nor within a calculation; (*e.g.*, cartesian for the orbital basis and spherical for the fitting basis).; For built-in basis sets, the correct ``spherical``/``cartesian`` value for |globals__puream|; is set internally from the orbital basis. * :ref:`sec:basisBuiltIn`; * :ref:`Specifying basis sets <sec:jobControl>`; * :ref:`Built-in basis sets by family <apdx:basisTables>`; * :ref:`Built-in basis sets by element <apdx:basisElement>`; * :ref:`User-Defined basis sets <sec:basisUserDefined>`; * :ref:`Auxiliary bases for built-in orbital basis sets <apdx:basisFamily>`. .. index:: basis set; available by family; .. _`sec:basisBuiltIn`:. Built-In Basis Sets; ===================. A wide range of orbital basis sets are built into |PSIfour|. These are; summarized in Tables :ref:`Pople <table:basisPopleOrbital>`,; :ref:`Dunning <table:basisDunningOrbital>`, ; :ref:`Dunning (Douglas-Kroll) <table:basisDunningDK>`, ; :ref:`Karlsruhe <table:basisKarlsruhe>`,; :ref:`Jensen <table:basisJensen>`,; and :ref:`Other <table:basisOther>` in Appendix :ref:`apdx:basisTables`.; These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the :math:`X\;=\zeta` levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar's [Papajak:2011:10]_ calendar; truncations described in Table :ref:`Months Bases <table:basisMonths>`. Fi",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
Energy Efficiency,energy,energy,"belled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled ``C1``. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable. In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from :math:`D_{6h}` to :math:`C_{2v}`; |PSIfour| will detect this; automatically and run in the appropriate point group. Basis blocks can also be named, *e.g.*, :samp:`basis; {optional_basis_name} \\{...\\}` and the basis defined by it later; applied to another molecule. ::. # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the ``basis {...}`` block may also be used; for defining basis sets, as detailed in :ref:`sec:basisUserDefined`. .. index:: basis set; auxiliary. Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the |mints__basis| keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to :ref:`apdx:basisFamily`,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
Integrability,depend,dependence,".py#L762`.; Note that if |mints__basis| is known to be larger than quad-zeta,; |PSIfour| *will not* attempt to fall back on the def2 fitting bases. The same basis ""block"" syntax can be; used to specify basis sets other than that used to define orbitals. For; example, ::. set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used::. df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. .. _`sec:basisDecontracted`:. Decontracted Basis Sets; =======================. Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add ""-decon"" to the name; of the primary basis set (*e.g.* :srcsample:`decontract`). ::. 	set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the :ref:`X2C Hamiltonian <sec:relativistic>`. .. index::; pair: basis set; adding new. .. _`sec:basisUserDefined`: . User-Defined Basis Sets; =======================. .. note:: No recompile of the PSI program is necessary for changes made to; files in ``$PSIDATADIR``, including those described below. There are three routes by which a basis set in G94 format can be introduced to |PSIfours| notice. .. rubric:: (1) Install new basis set file into |PSIfour| basis library. Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word ``spherical`` or ``cartesian`` to indicate; whether the basis set will run in (5D/7F) or (6D/10F). ::. cartesian; ****; H 0; S 3 1.00",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
Modifiability,variab,variable,".15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a ``.gbs`` extension,; after applying the following transformations. * All letters lowercase; * Replace all ``*`` with ``s``; * Replace all ``+`` with ``p``; * Replace all ``(`` ``)`` ``,`` with ``_`` (underscores replace parentheses and commas). For example, basis 6-31++G** is stored in :source:`psi4/share/psi4/basis/6-31ppgss.gbs`,; and cc-pV(D+d)Z is stored in :source:`psi4/share/psi4/basis/cc-pv_dpd_z.gbs`.; Only one basis set may be specified per file.; Copy the new basis set file into :source:`psi4/share/psi4/basis`.; Request the new basis set in an input file in the usual manner. ::. set basis new_basis_name. .. rubric:: (2) Use new basis set file in arbitrary location. Prepare a basis set file exactly as above. Append the directory; containing the basis set file to the environment variable; :envvar:`PSIPATH`. If the directory is the current working directory,; |PSIfour| will find it automatically, and the directory does not need; to be added to :envvar:`PSIPATH`. Request the new basis set in an input file in the usual manner. ::. set basis new_basis_name. .. rubric:: (3) Include new basis set in input file. Construct for a basis set a section like the one below that includes; ``[basis name]``, |globals__puream| value, and element basis set; specifications. Hash signs denote comments. This format is exactly like; the stand-alone basis file except for the addition of the basis name in; brackets. ::. [ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a |PSIf",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
Performance,perform,performs,"or keyword |globals__puream|, consult; Appendix :ref:`apdx:basisElement`. |PSIfour| uses the angular momentum convention below that; skips the letter ``J``. Note that Gaussian94 convention is; *not* to skip this letter.; |PSIfour| can use either convention for ``.gbs`` import (assuming; angular momentum levels are not skipped), but it will always output; in the ``HIK`` sequence. Another portion of the G94 format, labeling; angular momentum with :samp:`L={l}` syntax is newly (August 2020); implemented, and this is preferred for ``L=7`` and above to; avoid ambiguity. ::. L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... .. index:: basis set; multiple within molecule; .. _`sec:psithonBasissets`:. Mixing Basis Sets; =================. While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis ""block"" can be used. We use a snippet from the :srcsample:`mints2` sample; input file, which performs a benzene SCF computation, to demonstrate this; feature. ::. basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as ``H1`` are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled ``C1``. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable. In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from :math:`D_{6h}` to :math:`C_{2v}`; |",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
Safety,avoid,avoid,"ilable for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting :math:`(oo|`\ -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting :math:`(ov|`\ -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at :source:`psi4/share/psi4/basis` in the source. For basis set availability by; element and the default value for keyword |globals__puream|, consult; Appendix :ref:`apdx:basisElement`. |PSIfour| uses the angular momentum convention below that; skips the letter ``J``. Note that Gaussian94 convention is; *not* to skip this letter.; |PSIfour| can use either convention for ``.gbs`` import (assuming; angular momentum levels are not skipped), but it will always output; in the ``HIK`` sequence. Another portion of the G94 format, labeling; angular momentum with :samp:`L={l}` syntax is newly (August 2020); implemented, and this is preferred for ``L=7`` and above to; avoid ambiguity. ::. L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... .. index:: basis set; multiple within molecule; .. _`sec:psithonBasissets`:. Mixing Basis Sets; =================. While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis ""block"" can be used. We use a snippet from the :srcsample:`mints2` sample; input file, which performs a benzene SCF computation, to demonstrate this; feature. ::. basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as ``H1`` are given the STO-3G basis set, leaving t",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
Testability,test,test,"32814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a |PSIfour| input file and surround it with the; command ``basis {...}``, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use ``assign`` statements to actually request the basis set. This; ``basis {...}`` section replaces the usual ``set basis XXX`` line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax ``basis mybas {...}``,; and then the basis can be recalled later as ``set basis mybas``.; To use a custom basis set as described in this section, it must be ; defined prior to its use in a function that performs a computation. ::. basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case :srcsample:`mints2` provides a complete example of ; user-specified basis sets. .. _`sec:basissets-ecps`:. Inputting effective core potentials (ECPs); ==========================================. For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; :ref:`sec:scf-ecps` for more information about using ECPs and the; :source:`Def2-TZVP <psi4/share/psi4/basis/def2-tzvp.gbs>` basis set definition; for an example of their input syntax.; ",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
Usability,simpl,simply," input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to |PSIfour|,; the auxiliary basis will fall back on `def2 quad-zeta fitting bases; :source:`psi4/driver/qcdb/libmintsbasisset.py#L762`.; Note that if |mints__basis| is known to be larger than quad-zeta,; |PSIfour| *will not* attempt to fall back on the def2 fitting bases. The same basis ""block"" syntax can be; used to specify basis sets other than that used to define orbitals. For; example, ::. set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used::. df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. .. _`sec:basisDecontracted`:. Decontracted Basis Sets; =======================. Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add ""-decon"" to the name; of the primary basis set (*e.g.* :srcsample:`decontract`). ::. 	set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the :ref:`X2C Hamiltonian <sec:relativistic>`. .. index::; pair: basis set; adding new. .. _`sec:basisUserDefined`: . User-Defined Basis Sets; =======================. .. note:: No recompile of the PSI program is necessary for changes made to; files in ``$PSIDATADIR``, including those described below. There are three routes by which a basis set in G94 format can be introduced to |PSIfours| notice. .. rubric:: (1) Install new basis set file into |PSIfour| basis library. Copy the basis set definitions for all ele",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
Availability,avail,available,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: basis set; available by element; .. _`apdx:basisElement`:. Basis Sets by Element; =====================. |; |. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_psi4bases. .. include:: autodoc_psi4bases.rst. ",MatchSource.DOCS,doc/sphinxman/source/basissets_byelement.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_byelement.rst
Availability,avail,available,"e package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: basis set; available by family; .. _`apdx:basisTables`:. ====================; Basis Sets by Family; ====================. Tables :ref:`Pople <table:basisPopleOrbital>`,; :ref:`Dunning <table:basisDunningOrbital>`, ; :ref:`Dunning (Douglas-Kroll) <table:basisDunningDK>`, ; :ref:`Dunning (F12) <table:basisDunningF12>`, ; :ref:`Karlsruhe <table:basisKarlsruhe>`,; :ref:`Jensen <table:basisJensen>`,; :ref:`Petersson <table:basisPetersson>`,; and :ref:`Other <table:basisOther>` summarize the orbital basis sets available in; |PSIfour|. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the :math:`X\;=\zeta` levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar's [Papajak:2011:10]_ calendar; truncations described in T",MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
Testability,stub,stub,"----------+-------+------------------+; | basis set | no diffuse | augmented | tight | augmented, tight |; +===============+==============+===========+=======+==================+; | pcseg-N | 01234 [#f5]_ | | | |; +---------------+--------------+-----------+-------+------------------+; | aug-pcseg-N | | 01234 | | |; +---------------+--------------+-----------+-------+------------------+; | pcSseg-N | | | 01234 | |; +---------------+--------------+-----------+-------+------------------+; | aug-pcSseg-N | | | | 01234 |; +---------------+--------------+-----------+-------+------------------+. |; |. .. _`table:basisPetersson`:. .. table:: Summary of Petersson orbital basis sets available in |PSIfour|. +---------------+--------------+-----+; | basis set | augmented, tight |; +===============+==============+=====+; | nZaPa-NR | 234567 |; +---------------+--------------+-----+. |; |. .. _`table:basisOther`:. .. table:: Summary of other orbital basis sets available in |PSIfour|. +----------------+; | DZP |; +----------------+; | TZ2P |; +----------------+; | TZ2PF |; +----------------+; | Sadlej-LPol-ds |; +----------------+; | Sadlej-LPol-dl |; +----------------+; | Sadlej-LPol-fs |; +----------------+; | Sadlej-LPol-fl |; +----------------+. |; |. .. rubric:: Footnotes. .. [#f1] Corresponding basis set filenames have star replaced by ""s"", plus replaced by ""p"", and parenthesis and comma replaced by ""_"".; .. [#f2] The heavy-aug-cc-\ *stub* and jul-cc-\ *stub* basis sets are identical.; .. [#f3] The JKFIT basis sets are designed in the cc-\ *stub*\ (X+d)Z ; framework that includes an additional set of; *d*-functions for second-row *p*-block elements. Identical basis sets; with the cc-\ *stub*\ XZ-JKFIT label are provided for convenience.; .. [#f4] D\ :math:`\zeta` has :math:`\ell_{max}=2` or d.; T\ :math:`\zeta` has :math:`\ell_{max}=3` or f.; Q\ :math:`\zeta` has :math:`\ell_{max}=4` or g, *etc*.; .. [#f5] *N* in Jensen basis sets corresponds to :math:`N+1\zeta` basis set. ",MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
Energy Efficiency,charge,charge,"Hansen; *Chem. Phys.* **356**, 98-109 (2009). .. [Izsak:2011:144105]; R. Izs\ |a_acute|\ k and F. Neese; *J. Chem. Phys.* **135**, 144105 (2011). .. [Smith:2018:3504]; 10.1021/acs.jctc.8b00286,; ""PSI4NUMPY: An Interactive Quantum Chemistry Programming Environment for Reference Implementations and Rapid Development"",; D. G. A. Smith, L. A. Burns, D. A. Sirianni, D. R. Nascimento, A. Kumar, A. M. James, J. B. Schriber, T. Zhang, B. Zhang, A. S. Abbott, E. J. Berquist, M. H. Lechner, L. A. Cunha, A. G. Heide, J. M. Waldrop, T. Y. Takeshita, A. Alenaizan, D. Neuhauser, R. A. King, A. C. Simmonett, J. M. Turney, H. F. Schaefer III, F. A. Evangelista, A. E. DePrince, T. D. Crawford, K. Patkowski, and C. D. Sherrill; *J. Chem. Theory Comput.* **14**, 3504-3511 (2018). .. [Schriber:2021:234107]; J. B. Schriber, D. A. Sirianni, D. G. A. Smith, L. A. Burns, D. Sitkoff, D. L. Cheney, C. D. Sherrill; *J. Chem. Phys.* **154**, 234107 (2021). .. [Caldeweyher:2019:154122]; ""A generally applicable atomic-charge dependent London dispersion correction"",; E. Caldeweyher, S. Ehlert, A. Hansen, H. Neugebauer, S. Spicher, C. Bannwarth, and S. Grimme,; *J. Chem. Phys.* **150**, 154122 (2019).; https://doi.org/10.1063/1.5090222. .. [Haser:1989:104]; M. Haser and R. Ahlrichs,; *J. Comp. Chem.* **10(1)**, 104 (1989).; https://doi.org/10.1002/jcc.540100111. .. [Thompson:2017:144101]; T. H. Thompson and C. Ochsenfeld; *J. Chem. Phys.* **147**, 144101 (2017).; https://doi.org/10.1063/1.4994190. .. [Smith:2020:184108]; ""PSI4 1.4: Open-source software for high-throughput quantum chemistry"",; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov, K. Patkowski, A. E. DePrince",MatchSource.DOCS,doc/sphinxman/source/bibliography.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/bibliography.rst
Integrability,depend,dependent,"Hansen; *Chem. Phys.* **356**, 98-109 (2009). .. [Izsak:2011:144105]; R. Izs\ |a_acute|\ k and F. Neese; *J. Chem. Phys.* **135**, 144105 (2011). .. [Smith:2018:3504]; 10.1021/acs.jctc.8b00286,; ""PSI4NUMPY: An Interactive Quantum Chemistry Programming Environment for Reference Implementations and Rapid Development"",; D. G. A. Smith, L. A. Burns, D. A. Sirianni, D. R. Nascimento, A. Kumar, A. M. James, J. B. Schriber, T. Zhang, B. Zhang, A. S. Abbott, E. J. Berquist, M. H. Lechner, L. A. Cunha, A. G. Heide, J. M. Waldrop, T. Y. Takeshita, A. Alenaizan, D. Neuhauser, R. A. King, A. C. Simmonett, J. M. Turney, H. F. Schaefer III, F. A. Evangelista, A. E. DePrince, T. D. Crawford, K. Patkowski, and C. D. Sherrill; *J. Chem. Theory Comput.* **14**, 3504-3511 (2018). .. [Schriber:2021:234107]; J. B. Schriber, D. A. Sirianni, D. G. A. Smith, L. A. Burns, D. Sitkoff, D. L. Cheney, C. D. Sherrill; *J. Chem. Phys.* **154**, 234107 (2021). .. [Caldeweyher:2019:154122]; ""A generally applicable atomic-charge dependent London dispersion correction"",; E. Caldeweyher, S. Ehlert, A. Hansen, H. Neugebauer, S. Spicher, C. Bannwarth, and S. Grimme,; *J. Chem. Phys.* **150**, 154122 (2019).; https://doi.org/10.1063/1.5090222. .. [Haser:1989:104]; M. Haser and R. Ahlrichs,; *J. Comp. Chem.* **10(1)**, 104 (1989).; https://doi.org/10.1002/jcc.540100111. .. [Thompson:2017:144101]; T. H. Thompson and C. Ochsenfeld; *J. Chem. Phys.* **147**, 144101 (2017).; https://doi.org/10.1063/1.4994190. .. [Smith:2020:184108]; ""PSI4 1.4: Open-source software for high-throughput quantum chemistry"",; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov, K. Patkowski, A. E. DePrince",MatchSource.DOCS,doc/sphinxman/source/bibliography.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/bibliography.rst
Modifiability,adapt,adapted,"89:104]; M. Haser and R. Ahlrichs,; *J. Comp. Chem.* **10(1)**, 104 (1989).; https://doi.org/10.1002/jcc.540100111. .. [Thompson:2017:144101]; T. H. Thompson and C. Ochsenfeld; *J. Chem. Phys.* **147**, 144101 (2017).; https://doi.org/10.1063/1.4994190. .. [Smith:2020:184108]; ""PSI4 1.4: Open-source software for high-throughput quantum chemistry"",; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov, K. Patkowski, A. E. DePrince III, U. Bozkaya, R. King, F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill; *J. Chem. Phys.* **152**, 184108 (2020).; https://doi.org/10.1063/5.0006002. .. [Waldrop:2021:024103]; ""Nonapproximated third-order exchange induction energy in symmetry-adapted perturbation theory"",; J. M. Waldrop and K. Patkowski; *J. Chem. Phys.* **154**, 024103 (2021).; https://doi.org/10.1063/1.4994190. .. [Ochsenfeld:1998:1663]; C. Ochsenfeld, C. A. White, M. Head-Gordon; *J. Chem. Phys.* **109**, 1663 (1998); https://doi.org/10.1063/1.476741. .. [Behnle:2019:REMP]; ""REMP: A hybrid perturbation theory providing improved electronic wavefunctions and properties"",; S. Behnle and R. F. Fink,; *J. Chem. Phys.* **150**, 1241077 (2019).; https://doi.org/10.1063/1.5086168. .. [Behnle:2021:OREMP]; ""OO-REMP: Approaching Chemical Accuracy with Second-Order Perturbation Theory"",; S. Behnle and R. F. Fink,; *J. Chem. Theory Comput.* **17**, 3259 (2021).; https://doi.org/10.1021/acs.jctc.1c00280. .. [Behnle:2022:OREMP]; ""UREMP, RO-REMP, and OO-REMP: Hybrid perturbation theories for open-shell electronic structure calculations"",; S. Behnle and R. F. Fink; *J. Chem. Phys.* **156**, 124103 (2022).; https://doi.org/10.1063/5.0081285. .",MatchSource.DOCS,doc/sphinxman/source/bibliography.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/bibliography.rst
Performance,throughput,throughput,", D. Neuhauser, R. A. King, A. C. Simmonett, J. M. Turney, H. F. Schaefer III, F. A. Evangelista, A. E. DePrince, T. D. Crawford, K. Patkowski, and C. D. Sherrill; *J. Chem. Theory Comput.* **14**, 3504-3511 (2018). .. [Schriber:2021:234107]; J. B. Schriber, D. A. Sirianni, D. G. A. Smith, L. A. Burns, D. Sitkoff, D. L. Cheney, C. D. Sherrill; *J. Chem. Phys.* **154**, 234107 (2021). .. [Caldeweyher:2019:154122]; ""A generally applicable atomic-charge dependent London dispersion correction"",; E. Caldeweyher, S. Ehlert, A. Hansen, H. Neugebauer, S. Spicher, C. Bannwarth, and S. Grimme,; *J. Chem. Phys.* **150**, 154122 (2019).; https://doi.org/10.1063/1.5090222. .. [Haser:1989:104]; M. Haser and R. Ahlrichs,; *J. Comp. Chem.* **10(1)**, 104 (1989).; https://doi.org/10.1002/jcc.540100111. .. [Thompson:2017:144101]; T. H. Thompson and C. Ochsenfeld; *J. Chem. Phys.* **147**, 144101 (2017).; https://doi.org/10.1063/1.4994190. .. [Smith:2020:184108]; ""PSI4 1.4: Open-source software for high-throughput quantum chemistry"",; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov, K. Patkowski, A. E. DePrince III, U. Bozkaya, R. King, F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill; *J. Chem. Phys.* **152**, 184108 (2020).; https://doi.org/10.1063/5.0006002. .. [Waldrop:2021:024103]; ""Nonapproximated third-order exchange induction energy in symmetry-adapted perturbation theory"",; J. M. Waldrop and K. Patkowski; *J. Chem. Phys.* **154**, 024103 (2021).; https://doi.org/10.1063/1.4994190. .. [Ochsenfeld:1998:1663]; C. Ochsenfeld, C. A. White, M. Head-Gordon; *J. Chem. Phys.* **109**, 1663 (1998); https://doi.org/10.1063/1.476741. .. [Beh",MatchSource.DOCS,doc/sphinxman/source/bibliography.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/bibliography.rst
Availability,avail,available,"nse as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BrianQC; .. _`sec:brianqc`:. Interface to the BrianQC GPU module by the BrianQC team; =======================================================. .. codeauthor:: Gergely Kis; .. sectionauthor:: Gergely Kis. |PSIfour| contains code to interface to the BrianQC GPU module developed; by the `BrianQC team <https://www.brianqc.com/team>`_, which is available after a license agreement from; `https://brianqc.com/ <https://brianqc.com/>`_. Installing BrianQC; ~~~~~~~~~~~~~~~~~~. Please contact BrianQC at `https://brianqc.com/ <https://brianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. c",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
Deployability,install,installed,"; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BrianQC; .. _`sec:brianqc`:. Interface to the BrianQC GPU module by the BrianQC team; =======================================================. .. codeauthor:: Gergely Kis; .. sectionauthor:: Gergely Kis. |PSIfour| contains code to interface to the BrianQC GPU module developed; by the `BrianQC team <https://www.brianqc.com/team>`_, which is available after a license agreement from; `https://brianqc.com/ <https://brianqc.com/>`_. Installing BrianQC; ~~~~~~~~~~~~~~~~~~. Please contact BrianQC at `https://brianqc.com/ <https://brianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. cod",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
Integrability,interface,interface,"e; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BrianQC; .. _`sec:brianqc`:. Interface to the BrianQC GPU module by the BrianQC team; =======================================================. .. codeauthor:: Gergely Kis; .. sectionauthor:: Gergely Kis. |PSIfour| contains code to interface to the BrianQC GPU module developed; by the `BrianQC team <https://www.brianqc.com/team>`_, which is available after a license agreement from; `https://brianqc.com/ <https://brianqc.com/>`_. Installing BrianQC; ~~~~~~~~~~~~~~~~~~. Please contact BrianQC at `https://brianqc.com/ <https://brianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PS",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
Modifiability,variab,variable,".. include:: autodoc_abbr_options_c.rst. .. index:: BrianQC; .. _`sec:brianqc`:. Interface to the BrianQC GPU module by the BrianQC team; =======================================================. .. codeauthor:: Gergely Kis; .. sectionauthor:: Gergely Kis. |PSIfour| contains code to interface to the BrianQC GPU module developed; by the `BrianQC team <https://www.brianqc.com/team>`_, which is available after a license agreement from; `https://brianqc.com/ <https://brianqc.com/>`_. Installing BrianQC; ~~~~~~~~~~~~~~~~~~. Please contact BrianQC at `https://brianqc.com/ <https://brianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; b",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
Performance,perform,performed,"g |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake variable to `1`; and set the :makevar:`BrianQC_DIR` CMake variable to the path where BrianQC's; components have been built (usually `<brianqc_install_path>/build`), then build |PSIfour| normally. Using BrianQC from |PSIfour|; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. To use BrianQC, the :envvar:`BRIANQC_INSTALL_PATH` environment variable; must be set to the full path of your BrianQC installation. There are two ways to enable BrianQC for a specific calculation:. * setting the |globals__brianqc_enable| input option to `True`;. * setting the :envvar:`BRIANQC_ENABLE` environment variable to `1`. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC; """""""""""""""""""""""""""""""""""""""""""". The operation of BrianQC is transparent from a user's point of view; every; internal computation is either performed by |PSIfour| (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of |PSIfour|'s usual precision; parameters, like |scf__ints_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and DFT single point energies. * HF and DFT geometry optimizations. * HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values; """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. * BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which ",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
Safety,detect,detect,"n over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of |PSIfour|'s usual precision; parameters, like |scf__ints_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and DFT single point energies. * HF and DFT geometry optimizations. * HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values; """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. * BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which |PSIfour| would detect by default), the; input geometry must contain the line ``symmetry c1`` to force |PSIfour| to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. * By default, |PSIfour| uses density-fitted preiterations for SCF, which BrianQC; doesn't handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting |scf__df_scf_guess| to `False`.; * By default, |PSIfour| uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set |globals__scf_type| to `direct`. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__brianqc_enable.rst. Environment Variables; ~~~~~~~~~~~~~~~~~~~~~. .. envvar:: BRIANQC_SDK_INSTALL. Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. .. envvar:: BRIANQC_INSTALL_PATH. Location of BrianQC instal",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
Testability,test,tested,"rianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake variable to `1`; and set the :makevar:`BrianQC_DIR` CMake variable to the path where BrianQC's; components have been built (usually `<brianqc_install_path>/build`), then build |PSIfour| normally. Using BrianQC from |PSIfour|; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. To use BrianQC, the :envvar:`BRIANQC_INSTALL_PATH` environment variable; must be set to",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
Availability,down,downloads,"ify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:buildrunfaq`:. ===============; Build & Run FAQ; ===============. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. Obtaining and Updating |PSIfour|; --------------------------------. #. :ref:`faq:obtainpsi4`; #. :ref:`faq:quiz`; #. :ref:`faq:binary`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public`; #. :ref:`faq:tarballpsi4public`; #. :ref:`faq:recompile`. .. #. :ref:`faq:psi3sourceforge`. Configuring and Installing |PSIfour| via Binary; -----------------------------------------------. #. :ref:`faq:psicodedownload`; #. :ref:`sec:psi4conda`; #. :ref:`faq:psi4pkg`; #. :ref:`faq:updatepsi4`; #. :ref:`faq:psi4deps`; #. :ref:`sec:condadetails`; #. :ref:`faq:condamaxameri`. Configuring, Building, and Installing |PSIfour| via Source; ----------------------------------------------------------. #. :ref:`faq:cmakeviasetup`; #. :ref:`faq:buildquick`; #. :ref:`faq:builddetailed`. #. :ref:`faq:setuphelp`; #. :ref:`faq:chooseobjdir`; #. :ref:`faq:setupprefix`; #. :ref:`faq:condapsi4dev`; #. :ref:`faq:setupmaxameri`; #. :ref:`faq:cmakeverbose`; #. :ref:`fa",MatchSource.DOCS,doc/sphinxman/source/build_faq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst
Deployability,install,install," .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:buildrunfaq`:. ===============; Build & Run FAQ; ===============. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. Obtaining and Updating |PSIfour|; --------------------------------. #. :ref:`faq:obtainpsi4`; #. :ref:`faq:quiz`; #. :ref:`faq:binary`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public`; #. :ref:`faq:tarballpsi4public`; #. :ref:`faq:recompile`. .. #. :ref:`faq:psi3sourceforge`. Configuring and Installing |PSIfour| via Binary; -----------------------------------------------. #. :ref:`faq:psicodedownload`; #. :ref:`sec:psi4conda`; #. :ref:`faq:psi4pkg`; #. :ref:`faq:updatepsi4`; #. :ref:`faq:psi4deps`; #. :ref:`sec:condadetails`; #. :ref:`faq:condamaxameri`. Configuring, Building, and Installing |PSIfour| via Source; ----------------------------------------------------------. #. :ref:`faq:cmakeviasetup`; #. :ref:`faq:buildquick`; #. :ref:`faq:builddetailed`. #. :ref:`faq:setuphelp`; #. :ref:`faq:chooseobjdir`; #. :ref:`faq:setuppre",MatchSource.DOCS,doc/sphinxman/source/build_faq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst
Modifiability,variab,variables,setupprefix`; #. :ref:`faq:condapsi4dev`; #. :ref:`faq:setupmaxameri`; #. :ref:`faq:cmakeverbose`; #. :ref:`faq:doconfigure`; #. :ref:`faq:cray`. Non-QC Dependencies; -------------------. #. :ref:`faq:coredepend`; #. :ref:`cmake:python`; #. :ref:`faq:libmwcondapy`; #. :ref:`cmake:lapack`; #. :ref:`cmake:cxx`; #. :ref:`faq:approvedcxx`; #. :ref:`faq:modgcc`; #. :ref:`faq:macxcode`; #. :ref:`cmake:fortran`; #. :ref:`faq:approvedfc`; #. :ref:`faq:macgfortran`. QC Dependencies and Extensions; ------------------------------. #. :ref:`faq:addondepend`; #. :ref:`faq:localaddon`; #. :ref:`cmake:chemps2`; #. :ref:`faq:chemps2gccflto`; #. :ref:`cmake:dkh`; #. :ref:`cmake:libefp`; #. :ref:`cmake:erd`; #. :ref:`cmake:gdma`; #. :ref:`cmake:libint`; #. :ref:`cmake:pcmsolver`. Testing ; -------. #. :ref:`faq:testsoutput`; #. :ref:`faq:subsettests`; #. :ref:`faq:minutetests`; #. :ref:`faq:pytest`. Runtime Setup; -------------. #. :ref:`faq:runordinaryexe`; #. :ref:`faq:runordinarymodule`; #. :ref:`faq:runfrombinary`; #. :ref:`faq:inplace`; #. :ref:`faq:psi4scratch`; #. :ref:`faq:psidatadir`; #. :ref:`faq:psi4psiapipath`; #. :ref:`faq:modulenotfounderror`. Running |PSIfour|; -----------------. #. :ref:`What command line options does Psi4 have <sec:commandLineOptions>`; #. :ref:`What environment variables affect Psi4 <sec:environmentVariables>`; #. :ref:`faq:runtimepython`; #. :ref:`faq:psi4version`; #. :ref:`faq:psi4PBS`; #. :ref:`faq:psi4fileretention`; #. :ref:`faq:logging`; #. :ref:`faq:findexemod`. Runtime Errors and Debugging; ----------------------------. #. :ref:`faq:gdblldb`; #. :ref:`faq:setuptype`; #. :ref:`faq:wrongpyfalse`. Managing Code; -------------. #. :ref:`faq:dirlayoutinstall`; #. :ref:`faq:githubworkflow`; #. :ref:`faq:vigitmerge`. Miscellaneous; -------------. #. :ref:`faq:writepsi4`; #. :ref:`faq:psi4logos`. .. #. :ref:`faq:getversion`; .. #. :ref:`faq:binarypackage`; .. #. :ref:`faq:getting-and-using-the-psi4dependencies-package`; .. #. :ref:`faq:erroreriam`. ,MatchSource.DOCS,doc/sphinxman/source/build_faq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst
Testability,test,testsoutput,-----------------------------------------. #. :ref:`faq:cmakeviasetup`; #. :ref:`faq:buildquick`; #. :ref:`faq:builddetailed`. #. :ref:`faq:setuphelp`; #. :ref:`faq:chooseobjdir`; #. :ref:`faq:setupprefix`; #. :ref:`faq:condapsi4dev`; #. :ref:`faq:setupmaxameri`; #. :ref:`faq:cmakeverbose`; #. :ref:`faq:doconfigure`; #. :ref:`faq:cray`. Non-QC Dependencies; -------------------. #. :ref:`faq:coredepend`; #. :ref:`cmake:python`; #. :ref:`faq:libmwcondapy`; #. :ref:`cmake:lapack`; #. :ref:`cmake:cxx`; #. :ref:`faq:approvedcxx`; #. :ref:`faq:modgcc`; #. :ref:`faq:macxcode`; #. :ref:`cmake:fortran`; #. :ref:`faq:approvedfc`; #. :ref:`faq:macgfortran`. QC Dependencies and Extensions; ------------------------------. #. :ref:`faq:addondepend`; #. :ref:`faq:localaddon`; #. :ref:`cmake:chemps2`; #. :ref:`faq:chemps2gccflto`; #. :ref:`cmake:dkh`; #. :ref:`cmake:libefp`; #. :ref:`cmake:erd`; #. :ref:`cmake:gdma`; #. :ref:`cmake:libint`; #. :ref:`cmake:pcmsolver`. Testing ; -------. #. :ref:`faq:testsoutput`; #. :ref:`faq:subsettests`; #. :ref:`faq:minutetests`; #. :ref:`faq:pytest`. Runtime Setup; -------------. #. :ref:`faq:runordinaryexe`; #. :ref:`faq:runordinarymodule`; #. :ref:`faq:runfrombinary`; #. :ref:`faq:inplace`; #. :ref:`faq:psi4scratch`; #. :ref:`faq:psidatadir`; #. :ref:`faq:psi4psiapipath`; #. :ref:`faq:modulenotfounderror`. Running |PSIfour|; -----------------. #. :ref:`What command line options does Psi4 have <sec:commandLineOptions>`; #. :ref:`What environment variables affect Psi4 <sec:environmentVariables>`; #. :ref:`faq:runtimepython`; #. :ref:`faq:psi4version`; #. :ref:`faq:psi4PBS`; #. :ref:`faq:psi4fileretention`; #. :ref:`faq:logging`; #. :ref:`faq:findexemod`. Runtime Errors and Debugging; ----------------------------. #. :ref:`faq:gdblldb`; #. :ref:`faq:setuptype`; #. :ref:`faq:wrongpyfalse`. Managing Code; -------------. #. :ref:`faq:dirlayoutinstall`; #. :ref:`faq:githubworkflow`; #. :ref:`faq:vigitmerge`. Miscellaneous; -------------. #. :ref:`faq:,MatchSource.DOCS,doc/sphinxman/source/build_faq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst
Usability,guid,guides,"ify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:buildrunfaq`:. ===============; Build & Run FAQ; ===============. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. Obtaining and Updating |PSIfour|; --------------------------------. #. :ref:`faq:obtainpsi4`; #. :ref:`faq:quiz`; #. :ref:`faq:binary`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public`; #. :ref:`faq:tarballpsi4public`; #. :ref:`faq:recompile`. .. #. :ref:`faq:psi3sourceforge`. Configuring and Installing |PSIfour| via Binary; -----------------------------------------------. #. :ref:`faq:psicodedownload`; #. :ref:`sec:psi4conda`; #. :ref:`faq:psi4pkg`; #. :ref:`faq:updatepsi4`; #. :ref:`faq:psi4deps`; #. :ref:`sec:condadetails`; #. :ref:`faq:condamaxameri`. Configuring, Building, and Installing |PSIfour| via Source; ----------------------------------------------------------. #. :ref:`faq:cmakeviasetup`; #. :ref:`faq:buildquick`; #. :ref:`faq:builddetailed`. #. :ref:`faq:setuphelp`; #. :ref:`faq:chooseobjdir`; #. :ref:`faq:setupprefix`; #. :ref:`faq:condapsi4dev`; #. :ref:`faq:setupmaxameri`; #. :ref:`faq:cmakeverbose`; #. :ref:`fa",MatchSource.DOCS,doc/sphinxman/source/build_faq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst
Availability,down,downloads,"t and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. ===================; Obtaining |PSIfour|; ===================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. _`faq:obtainpsi4`:. How to obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good,",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
Deployability,install,install,"iles.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. ===================; Obtaining |PSIfour|; ===================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. _`faq:obtainpsi4`:. How to obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Pyth",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
Modifiability,plugin,plugin,"nda package. |w---w| :ref:`Goto Binary-Package; <faq:binarypackage>`. * I just want a |PSIfour| installer. |w---w| :ref:`Goto; Binary-Installer <faq:binary>`. * I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. * I'm willing to have minimal dealings with git (e.g., commands ``git; clone`` and ``git pull``) in return for easy access in future to new; features and bug fixes. |w---w| :ref:`Goto Clone-from-GitHub; <faq:clonepsi4public>`. * I don't want to deal with this newfangled git, just give me a; tarball of the source code |w---w| :ref:`Goto Tarball-from-GitHub; <faq:tarballpsi4public>`. * I want to run *and* develop in |PSIfour|. * In keeping with the open-source philosophy, I don't mind my code being; as public as Psi4 itself during the development process. |w---w|; :ref:`Goto Fork-from-GitHub <faq:forkpsi4public>`. * I want to develop *using* |PSIfour| infrastructure and libraries, not; *on* them; I think a plugin might do. * I've got a |PSIfour| compilation. Use it, then consult :ref:`plugins; <sec:newplugins>`. * I'd rather not compile |PSIfour| or I don't have compilers |w---w|; :ref:`Goto Binary-Package <faq:binarypackage>` then consult; :ref:`plugins through conda <sec:condaplugins>`. * I really like parentheses and/or DBOC, so I want Psi3. |w---w|; Psi3 is available from `sourceforge <https://sourceforge.net/projects/psicode/files/psi/3.4.0/>`_, but you're on your own. .. comment * I am a core |PSIfour| developer, yet I'm still taking this quiz.; .. comment ; .. comment * I have minions whose Psi4 development work I want to supervise through this repository instance. Preferably, [Goto Fork-from-GitHub](#forkpsi4public); otherwise [Goto Fork-from-GitHub-Private](#forkpsi4private); .. comment ; .. comment * Just give me a repository to commit to directly. Preferably, [Goto Clone-from-GitHub](#clonepsi4public); otherwise [Goto Clone-from-GitHub-Pr",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
Performance,optimiz,optimization,"obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I'm willing to forgo; architecture tuning wizardry to avoid compiling it myself. * I'm on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). * I'm familiar with conda and want to manage |PSIfour| as an; ordinary conda package. |w---w| :ref:`Goto Binary-Package; <faq:binarypackage>`. * I just want a |PSIfour| installer. |w---w| :ref:`Goto; Binary-Installer <faq:binary>`. * I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. * I'm willing to have minimal dealings with git (e.g., commands ``git; clone`` and ``git pull``) in return for easy access in future to new; features and bug fixes. |w---w| :ref:`Goto Clone-from-GitHub; <faq:clonepsi4public>`. * I don't want to deal with this newfangled git, just give me a; tarball of the source code |w---w| :ref:`Goto Tarball-from-GitHub; <faq:tarballpsi4public>`. * I want to run ",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
Safety,avoid,avoid,"obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I'm willing to forgo; architecture tuning wizardry to avoid compiling it myself. * I'm on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). * I'm familiar with conda and want to manage |PSIfour| as an; ordinary conda package. |w---w| :ref:`Goto Binary-Package; <faq:binarypackage>`. * I just want a |PSIfour| installer. |w---w| :ref:`Goto; Binary-Installer <faq:binary>`. * I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. * I'm willing to have minimal dealings with git (e.g., commands ``git; clone`` and ``git pull``) in return for easy access in future to new; features and bug fixes. |w---w| :ref:`Goto Clone-from-GitHub; <faq:clonepsi4public>`. * I don't want to deal with this newfangled git, just give me a; tarball of the source code |w---w| :ref:`Goto Tarball-from-GitHub; <faq:tarballpsi4public>`. * I want to run ",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
Security,access,access,"t :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I'm willing to forgo; architecture tuning wizardry to avoid compiling it myself. * I'm on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). * I'm familiar with conda and want to manage |PSIfour| as an; ordinary conda package. |w---w| :ref:`Goto Binary-Package; <faq:binarypackage>`. * I just want a |PSIfour| installer. |w---w| :ref:`Goto; Binary-Installer <faq:binary>`. * I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. * I'm willing to have minimal dealings with git (e.g., commands ``git; clone`` and ``git pull``) in return for easy access in future to new; features and bug fixes. |w---w| :ref:`Goto Clone-from-GitHub; <faq:clonepsi4public>`. * I don't want to deal with this newfangled git, just give me a; tarball of the source code |w---w| :ref:`Goto Tarball-from-GitHub; <faq:tarballpsi4public>`. * I want to run *and* develop in |PSIfour|. * In keeping with the open-source philosophy, I don't mind my code being; as public as Psi4 itself during the development process. |w---w|; :ref:`Goto Fork-from-GitHub <faq:forkpsi4public>`. * I want to develop *using* |PSIfour| infrastructure and libraries, not; *on* them; I think a plugin might do. * I've got a |PSIfour| compilation. Use it, then consult :ref:`plugins; <sec:newplugins>`. * I'd rather not compile |PSIfour| or I don't have compilers |w---w|; :ref:`Goto Binary-Package <faq:binarypackage>` then consult; :ref:`plugins through conda <sec:condaplugins>`. * I really like parentheses and/or DBOC, so I want Psi3. |w---w|; Psi3 is available from `sourceforge <http",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
Usability,guid,guides,"t and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. ===================; Obtaining |PSIfour|; ===================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. _`faq:obtainpsi4`:. How to obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good,",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
Availability,down,downloads,"HOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
Deployability,install,installing," open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; perfo",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
Energy Efficiency,energy,energy,"e-packages`` (conda); * :envvar:`PSIDATADIR` pointing to ``share/psi4``. .. _`faq:runordinaryexe`:. How to run Psi4 as executable after compilation; -----------------------------------------------. Substituting the full installation directory :samp:`{prefix}` and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your ""rc"" file and open a new terminal. (To; use a staged installation directory, substitute; :samp:`{objdir}/stage` for :samp:`{prefix}`.). .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run |PSIfour|. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. .. _`faq:modulenotfounderror`:. How to solve ``ModuleNotFoundError: No module named 'psi4'``; ------------------------------------------------------------. You're using |PSIfour| in PsiAPI mode (``python input.py`` where; ``input.py`` contains ``import psi4``) but the Python interpreter; can't find the |PSIfour| Python module. Follow the directions at; :ref:`faq:psi4psiapipath`. .. _`faq:psi4psiapipath`:. How to configure paths for PsiAPI; ---------------------------------. If you know the location of the |PSIfour| executable (``bin/psi4``); for Psithon mode and want to know the corresponding location to add to; :envvar:`PYTHONPATH` for PsiAPI mode, execute ``psi4 --psiapi``. It; will return bash commands to set :envvar:`PATH` (for correct python; interpreter) and :envvar:`PYTHONPATH` (to find psi4 module) co",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
Integrability,depend,dependencies,"king builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:.",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
Modifiability,config,configure," nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildq",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
Performance,perform,performance-tuned," Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`,",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
Safety,detect,detect,", well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
Security,access,accessed,"_LIBRARIES} ${BLAS_LIBRARIES}``. * Sometimes the CMake's library search capabilites falter at SONAMEs; (*e.g.*, ``libblas.so.3`` *vs.* ``libblas.so``), extensions (static; *vs.* dynamic), or suffixes (*e.g.*, ``libacml_mp.so`` *vs.*; ``libacml.so``). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``mkl.h``; header defines additional functionality; it must be located to use; BLAS threading. .. _`cmake:python`:. How to configure Python for building Psi4; -----------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language. * Downstream Dependencies |w---w| |PSIfour| |dr| Python Interpreter. **CMake Variables**. Note that in v1.4, |PSIfour| switched from Numpy-written CMake Python; detection to new CMake-written CMake Python detection. Usually only; :makevar:`Python_EXECUTABLE` is now needed to hint Python's location. See; https://cmake.org/cmake/help/latest/module/FindPython.html for full; guidance. * :makevar:`Python_EXECUTABLE` |w---w| specify name or full path to Python interpreter.; * :makevar:`Python_LIBRARY` |w---w| specify path to Python library.; * :makevar:`Python_INCLUDE_DIR` |w---w| specify directory of Python headers. Contains ``Python.h``. **Examples**. A. Build with detected Python from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific Python. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=/path/to/interp/python3.9. C. Build with full Python specification to root directory ``${PFXC}``. .",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
Testability,test,tested," Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`,",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
Usability,guid,guides,"HOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
Availability,avail,available,"ARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:mtd_capabilities`:. Capabilities and Alternate Implementations; ==========================================. Depending on the reference (e.g., RHF, UHF, ROHF), the integral treatment; (conventional CONV, density-fitted DF, and Cholesky-decomposed CD),; active orbitals, and derivative level, computational methods are; sometimes assembled from implementations by multiple coders. Conversely,; some capabilities may be implemented multiple times. Capabilities,; modules, algorithm types, and defaults are detailed for many ground-state; methods at Table :ref:`Module Capabilities <table:managedmethods>`. Its; analogous summary table (with modules collapsed) is at :ref:`Summary; Capabilities <table:stdsuite>`. |PSIfour| transparently selects the; most efficient implementation, so one generally needn't consult this; table. However, to understand the details of what combinations are; accessible or what alternate implementations are available, read on. Note that HF, DFT, and MPn (n<=3); default to density-fitted integrals, while all higher methods default to; conventional integrals. Therefore, for a closed-shell molecule::. # runs MP2 with default algorithm type ``DF`` with default implementation DFMP2; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with default implementation OCC; set mp2_type conv; energy('mp2'). # runs MP2 with default algorithm type ``DF`` with implementation OCC; set qc_module occ; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with implementation FNOCC; set mp2_type conv; set qc_module fnocc; energy('mp2'). .. include:: autodoc_capabilities_details.rst. ",MatchSource.DOCS,doc/sphinxman/source/capabilities.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/capabilities.rst
Energy Efficiency,efficient,efficient,"ARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:mtd_capabilities`:. Capabilities and Alternate Implementations; ==========================================. Depending on the reference (e.g., RHF, UHF, ROHF), the integral treatment; (conventional CONV, density-fitted DF, and Cholesky-decomposed CD),; active orbitals, and derivative level, computational methods are; sometimes assembled from implementations by multiple coders. Conversely,; some capabilities may be implemented multiple times. Capabilities,; modules, algorithm types, and defaults are detailed for many ground-state; methods at Table :ref:`Module Capabilities <table:managedmethods>`. Its; analogous summary table (with modules collapsed) is at :ref:`Summary; Capabilities <table:stdsuite>`. |PSIfour| transparently selects the; most efficient implementation, so one generally needn't consult this; table. However, to understand the details of what combinations are; accessible or what alternate implementations are available, read on. Note that HF, DFT, and MPn (n<=3); default to density-fitted integrals, while all higher methods default to; conventional integrals. Therefore, for a closed-shell molecule::. # runs MP2 with default algorithm type ``DF`` with default implementation DFMP2; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with default implementation OCC; set mp2_type conv; energy('mp2'). # runs MP2 with default algorithm type ``DF`` with implementation OCC; set qc_module occ; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with implementation FNOCC; set mp2_type conv; set qc_module fnocc; energy('mp2'). .. include:: autodoc_capabilities_details.rst. ",MatchSource.DOCS,doc/sphinxman/source/capabilities.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/capabilities.rst
Security,access,accessible,"ARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:mtd_capabilities`:. Capabilities and Alternate Implementations; ==========================================. Depending on the reference (e.g., RHF, UHF, ROHF), the integral treatment; (conventional CONV, density-fitted DF, and Cholesky-decomposed CD),; active orbitals, and derivative level, computational methods are; sometimes assembled from implementations by multiple coders. Conversely,; some capabilities may be implemented multiple times. Capabilities,; modules, algorithm types, and defaults are detailed for many ground-state; methods at Table :ref:`Module Capabilities <table:managedmethods>`. Its; analogous summary table (with modules collapsed) is at :ref:`Summary; Capabilities <table:stdsuite>`. |PSIfour| transparently selects the; most efficient implementation, so one generally needn't consult this; table. However, to understand the details of what combinations are; accessible or what alternate implementations are available, read on. Note that HF, DFT, and MPn (n<=3); default to density-fitted integrals, while all higher methods default to; conventional integrals. Therefore, for a closed-shell molecule::. # runs MP2 with default algorithm type ``DF`` with default implementation DFMP2; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with default implementation OCC; set mp2_type conv; energy('mp2'). # runs MP2 with default algorithm type ``DF`` with implementation OCC; set qc_module occ; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with implementation FNOCC; set mp2_type conv; set qc_module fnocc; energy('mp2'). .. include:: autodoc_capabilities_details.rst. ",MatchSource.DOCS,doc/sphinxman/source/capabilities.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/capabilities.rst
Availability,avail,available,"he aggregate model chemistry requested through cbs(). Then,; since, for example, an ``energy('ccsd(t)')`` yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run. ::. Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this section must be dotted with the weightings in column Wt; to get the total cbs energy. Finally, in the CBS section, are listed the results for each stage; of the cbs procedure. The stage energies of this section sum outright to the total cbs energy. ::. ==> Components <==; ; ----------------------------------------------------------------------------------; Method / Basis Rqd Energy [H] Variable; ----------------------------------------------------------------------------------; scf / aug-cc-pvqz * -1.11916375 SCF TOTAL ENERGY; mp2 / aug-cc-pvqz * -0.03407997 MP2 CORRELATION ENERGY; scf / aug-cc-pvdz -1.11662884 SCF TOTAL ENERGY; mp2 / aug-cc-pvdz * -0.02881480 MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz * -0.03893812 CCSD(T) CORRELATION ENERGY; ccsd / aug-cc-pvdz -0.03893812 CCSD CORRELATION ENERGY; scf / aug-cc-pvtz ",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
Energy Efficiency,power,powerful,".. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; cbs(); see: complete_basis_set(); cbs(); single: basis set; delta correction. .. _`sec:cbs()`:. Complete Basis Set; ==================. .. toctree::; :hidden:. cbs_eqn. .. codeauthor:: Lori A. Burns, Daniel G. A. Smith and Peter Kraus; .. sectionauthor:: Lori A. Burns and Peter Kraus. The :py:func:`psi4.driver.cbs` function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; :py:func:`psi4.driver.energy`, :py:func:`psi4.driver.gradient`, *etc.* For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second or third items. * ``energy('mp2/cc-pv[dt]z')``. * ``energy(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[dt]z')``. * ``energy(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": ""corl_xtpl_helgaker_2""}])``. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes lik",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
Integrability,wrap,wrapper,"unc:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like :py:func:`psi4.driver.aliases.sherrill_gold_standard`; and :py:func:`psi4.driver.aliases.allen_focal_point` in the old way; passed the Python function directly, whereas the new way uses the; string of the function name. A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can also be accessed through the first item below more; conveniently than the equivalent second and third items. * ``optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz')``. * ``optimize(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz')``. * ``optimize(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvqz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvdz""}])``. Many examples can be found at :srcsample:`cbs-xtpl-energy`,; :srcsample:`cbs-xtpl-gradient`, :srcsample:`cbs-xtpl-opt`,; :srcsample:`cbs-xtpl-freq`, :srcsample:`cbs-xtpl-func`,; :srcsample:`cbs-xtpl-wrapper`, :srcsample:`cbs-xtpl-dict`. .. autofunction:: psi4.cbs(name [, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, cbs_metadata]); :noindex:. .. note:: As of October 2018, only two explicit ```deltaN_[wfn,basis,scheme]``` sets of options are active; if more delta functions are required, use the ```cbs_metadata``` interface. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn't affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. .. index::; pair: cbs(); output. Output; ^^^^^^. At the beginning of a cbs() job is print",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
Performance,optimiz,optimization,"wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": ""corl_xtpl_helgaker_2""}])``. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like :py:func:`psi4.driver.aliases.sherrill_gold_standard`; and :py:func:`psi4.driver.aliases.allen_focal_point` in the old way; passed the Python function directly, whereas the new way uses the; string of the function name. A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can also be accessed through the first item below more; conveniently than the equivalent second and third items. * ``optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz')``. * ``optimize(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz')``. * ``optimize(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvqz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvdz""}])``. Many examples can be found at :srcsample:`cbs-xtpl-energy`,; :srcsample:`cbs-xtpl-gradient`, :srcsample:`cbs-xtpl-opt`,; :srcsample:`cbs-xtpl-freq`, :srcsample:`cbs-xtpl-func`,; :srcsample:`cbs-xtpl-wrapper`, :srcsample:`cbs-xtpl-dict`. .. autofunction:: psi4.cbs(name [, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, cbs_metadata]); :noindex:. .. note:: As of October 2018, only two explicit ```deltaN_[wfn,basis,scheme]``` sets of options are active; if",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
Security,access,accessed,"e that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; cbs(); see: complete_basis_set(); cbs(); single: basis set; delta correction. .. _`sec:cbs()`:. Complete Basis Set; ==================. .. toctree::; :hidden:. cbs_eqn. .. codeauthor:: Lori A. Burns, Daniel G. A. Smith and Peter Kraus; .. sectionauthor:: Lori A. Burns and Peter Kraus. The :py:func:`psi4.driver.cbs` function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; :py:func:`psi4.driver.energy`, :py:func:`psi4.driver.gradient`, *etc.* For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second or third items. * ``energy('mp2/cc-pv[dt]z')``. * ``energy(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[dt]z')``. * ``energy(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": ""corl_xtpl_helgaker_2""}])``. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.d",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
Energy Efficiency,energy,energy," PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: ; pair: cbs(); theory. .. _`eq:cbs`:. .. math:: E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}. Here, :math:`\mathcal{F}` is an energy or energy extrapolation scheme, and the following also hold. .. math:: \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn}}^{\textbf{delta_basis}}\right) - \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn_lesser}}^{\textbf{delta_basis}}\right). .. math:: \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; = \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn}}^{\textbf{delta2_basis}}\right) - \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn_lesser}}^{\textbf{delta2_basis}}\right). .. math:: \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; = \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right). .. math:: \delta_{\textbf{delt",MatchSource.DOCS,doc/sphinxman/source/cbs_eqn.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs_eqn.rst
Availability,reliab,reliable,"e:: autodoc_abbr_options_c.rst. .. index::; single: CC, coupled cluster; pair: CC; theory. .. _`sec:cc`:. CC: Coupled Cluster Theory; ==========================. .. codeauthor:: T. Daniel Crawford; .. sectionauthor:: T. Daniel Crawford. *Module:* :ref:`PSI Variables <apdx:ccenergy_psivar>`. *Module:* :ref:`Keywords <apdx:ccenergy>`, :source:`CCENERGY <psi4/src/psi4/cc/ccenergy>`. *Module:* :ref:`Keywords <apdx:cceom>`, :source:`CCEOM <psi4/src/psi4/cc/cceom>`. *Module:* :ref:`Keywords <apdx:ccresponse>`, :source:`CCRESPONSE <psi4/src/psi4/cc/ccresponse>`. *Module:* :ref:`Keywords <apdx:cctriples>`, :source:`CCTRIPLES <psi4/src/psi4/cc/cctriples>`. *Module:* :ref:`Keywords <apdx:ccdensity>`, :source:`CCDENSITY <psi4/src/psi4/cc/ccdensity>`. *Module:* :ref:`Keywords <apdx:cchbar>`, :source:`CCHBAR <psi4/src/psi4/cc/cchbar>`. *Module:* :ref:`Keywords <apdx:cclambda>`, :source:`CCLAMBDA <psi4/src/psi4/cc/cclambda>`. The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuration; interaction, coupled cluster uses an exponential expansion,. .. math::; :label: CCexpansion. | \Psi \rangle &= e^{\hat{T}} | \Phi_0 \rangle \\; &= \left( 1 + {\hat{T}} + \frac{1}{2} {\hat{T}}^2 + \frac{1}{3!}{\hat{T}}^3 + \cdots \right) | \Phi_0 \rangle,. where the cluster operator :math:`{\hat{T}}` is written as a sum of operators that; generate singly-excited, doubly-excited, *etc.*, determinants:. .. math:: {\hat{T}} = {\hat{T}_1} + {\hat{T}_2} + {\hat{T}_3} + \cdots + {\hat{T}_N},. with. .. math::. {\hat T}_1 | \Phi_0 \rangle &= \sum_{i}^{\rm occ} \sum_a^{\rm vir} t_i^a | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,. *etc.* The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982]_ truncates the expansion at :math:`{\hat{T}} = {\",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
Deployability,configurat,configuration,"=================. .. codeauthor:: T. Daniel Crawford; .. sectionauthor:: T. Daniel Crawford. *Module:* :ref:`PSI Variables <apdx:ccenergy_psivar>`. *Module:* :ref:`Keywords <apdx:ccenergy>`, :source:`CCENERGY <psi4/src/psi4/cc/ccenergy>`. *Module:* :ref:`Keywords <apdx:cceom>`, :source:`CCEOM <psi4/src/psi4/cc/cceom>`. *Module:* :ref:`Keywords <apdx:ccresponse>`, :source:`CCRESPONSE <psi4/src/psi4/cc/ccresponse>`. *Module:* :ref:`Keywords <apdx:cctriples>`, :source:`CCTRIPLES <psi4/src/psi4/cc/cctriples>`. *Module:* :ref:`Keywords <apdx:ccdensity>`, :source:`CCDENSITY <psi4/src/psi4/cc/ccdensity>`. *Module:* :ref:`Keywords <apdx:cchbar>`, :source:`CCHBAR <psi4/src/psi4/cc/cchbar>`. *Module:* :ref:`Keywords <apdx:cclambda>`, :source:`CCLAMBDA <psi4/src/psi4/cc/cclambda>`. The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuration; interaction, coupled cluster uses an exponential expansion,. .. math::; :label: CCexpansion. | \Psi \rangle &= e^{\hat{T}} | \Phi_0 \rangle \\; &= \left( 1 + {\hat{T}} + \frac{1}{2} {\hat{T}}^2 + \frac{1}{3!}{\hat{T}}^3 + \cdots \right) | \Phi_0 \rangle,. where the cluster operator :math:`{\hat{T}}` is written as a sum of operators that; generate singly-excited, doubly-excited, *etc.*, determinants:. .. math:: {\hat{T}} = {\hat{T}_1} + {\hat{T}_2} + {\hat{T}_3} + \cdots + {\hat{T}_N},. with. .. math::. {\hat T}_1 | \Phi_0 \rangle &= \sum_{i}^{\rm occ} \sum_a^{\rm vir} t_i^a | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,. *etc.* The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982]_ truncates the expansion at :math:`{\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}`. This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves up",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
Energy Efficiency,energy,energy,"gle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,. *etc.* The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982]_ truncates the expansion at :math:`{\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}`. This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (*e.g.*, the term :math:`{\hat{T}_2}^2` approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods *size extensive*, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as :math:`{\cal{O}}(o^2 v^4)`, where; :math:`o` is the number of occupied orbitals and :math:`v` is the number of virtual; orbitals. Improving upon CCSD, the CCSD(T) method [Raghavachari:1989]_ includes; a perturbative estimate of the energy contributed by the :math:`{\hat{T}_3}`; operator. The computational cost of this additional term scales as; :math:`{\cal{O}}(o^3 v^4)`, making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases. |PSIfour| is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; :ref:`CC Methods <table:ccsummary>` summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within |PSIfour|.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, |PSIfour|; can interface to K\ |a_acute|\ llay's MRCC code (see :ref:`MRCC <sec:mrcc>`). Sol",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
Integrability,depend,dependent,"}^2` approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods *size extensive*, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as :math:`{\cal{O}}(o^2 v^4)`, where; :math:`o` is the number of occupied orbitals and :math:`v` is the number of virtual; orbitals. Improving upon CCSD, the CCSD(T) method [Raghavachari:1989]_ includes; a perturbative estimate of the energy contributed by the :math:`{\hat{T}_3}`; operator. The computational cost of this additional term scales as; :math:`{\cal{O}}(o^3 v^4)`, making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases. |PSIfour| is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; :ref:`CC Methods <table:ccsummary>` summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within |PSIfour|.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, |PSIfour|; can interface to K\ |a_acute|\ llay's MRCC code (see :ref:`MRCC <sec:mrcc>`). Solvent effects on energies can be taken into account using the polarizable; continuum model (PCM) in the PTE approximation [Cammi:2009:164104]_, see; :ref:`PCM <sec:pcmsolver>`. The following wavefunctions are currently recognized by |PSIfour| as arguments; to functions like :py:func:`~psi4.driver.energy`: ``'ccsd'``, ``'ccsd(t)'``, ``'a-ccsd(t)'``, ``'cc2'``,; ``'cc3'``, ``'bccd'`` (CCD with Brueckner orbitals), ``'bccd(t)'`` (CCD(T) with; Brueckner orbitals), ``'eom-ccsd'``, ``'eom-cc2'`` (CC2 for excited states),; ``'eo",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
Modifiability,config,configuration,"=================. .. codeauthor:: T. Daniel Crawford; .. sectionauthor:: T. Daniel Crawford. *Module:* :ref:`PSI Variables <apdx:ccenergy_psivar>`. *Module:* :ref:`Keywords <apdx:ccenergy>`, :source:`CCENERGY <psi4/src/psi4/cc/ccenergy>`. *Module:* :ref:`Keywords <apdx:cceom>`, :source:`CCEOM <psi4/src/psi4/cc/cceom>`. *Module:* :ref:`Keywords <apdx:ccresponse>`, :source:`CCRESPONSE <psi4/src/psi4/cc/ccresponse>`. *Module:* :ref:`Keywords <apdx:cctriples>`, :source:`CCTRIPLES <psi4/src/psi4/cc/cctriples>`. *Module:* :ref:`Keywords <apdx:ccdensity>`, :source:`CCDENSITY <psi4/src/psi4/cc/ccdensity>`. *Module:* :ref:`Keywords <apdx:cchbar>`, :source:`CCHBAR <psi4/src/psi4/cc/cchbar>`. *Module:* :ref:`Keywords <apdx:cclambda>`, :source:`CCLAMBDA <psi4/src/psi4/cc/cclambda>`. The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuration; interaction, coupled cluster uses an exponential expansion,. .. math::; :label: CCexpansion. | \Psi \rangle &= e^{\hat{T}} | \Phi_0 \rangle \\; &= \left( 1 + {\hat{T}} + \frac{1}{2} {\hat{T}}^2 + \frac{1}{3!}{\hat{T}}^3 + \cdots \right) | \Phi_0 \rangle,. where the cluster operator :math:`{\hat{T}}` is written as a sum of operators that; generate singly-excited, doubly-excited, *etc.*, determinants:. .. math:: {\hat{T}} = {\hat{T}_1} + {\hat{T}_2} + {\hat{T}_3} + \cdots + {\hat{T}_N},. with. .. math::. {\hat T}_1 | \Phi_0 \rangle &= \sum_{i}^{\rm occ} \sum_a^{\rm vir} t_i^a | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,. *etc.* The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982]_ truncates the expansion at :math:`{\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}`. This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves up",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
Performance,cache,cacheing,"clude:: autodir_options_c/ccenergy__cachelevel.rst; .. include:: autodir_options_c/ccenergy__cachetype.rst; .. include:: autodir_options_c/ccenergy__num_amps_print.rst; .. include:: autodir_options_c/ccenergy__mp2_amps_print.rst. Larger Calculations; ^^^^^^^^^^^^^^^^^^^. Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with |PSIfour|:. * In most cases it is reasonable to set the ``memory`` keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should *not* specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the ``memory`` keyword to a value less than 16 GB. * Set the |ccenergy__cachelevel| keyword to ``0``.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists. * Set the |globals__print| keyword to ``2``. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. .. _`sec:eomcc`:. Excited State Coupled Cluster Calculations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. A complete list of keywords related to; coupled cluster linear response is provided in Appendix :ref:`apdx:cceom`.; The most important keywords associated with EOM-CC calculations are:. .. include:: autodir_options_c/cceom__roots_per_irrep.rst; .. include:: autodir_options_c/cceom__e_convergence.rst; .. include:: autodir_options_c/cceom__singles_print.rst; .. include:: autodir_options_c/cceom__schmidt_add_residual_tolerance.rst; .. include:: autodir_options_c/cceom__eom_guess.rst. Linear Response (CCLR) Calculations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Linear response computations are invoked like ``properties('ccsd')``; or ``properties('cc2')``, along with a li",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
Availability,avail,available,"ll be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Cfour; .. _`sec:cfour`:. Interface to CFOUR by J. Stanton & J. Gauss; ===========================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:cfour>`, :ref:`PSI Variables <apdx:cfour_psivar>`, :ref:`Samples <apdx:testSuitecfour>`. |PSIfour| contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and J\ |u_dots|\ rgen Gauss (U. Mainz),; which is available after a license agreement from ; `http://www.cfour.de/ <http://www.cfour.de/>`_. Installation; ~~~~~~~~~~~~. Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by |PSIfour|, the program; binary (:program:`xcfour`) must be found in your :envvar:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. pyt",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
Deployability,install,install,"# GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Cfour; .. _`sec:cfour`:. Interface to CFOUR by J. Stanton & J. Gauss; ===========================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:cfour>`, :ref:`PSI Variables <apdx:cfour_psivar>`, :ref:`Samples <apdx:testSuitecfour>`. |PSIfour| contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and J\ |u_dots|\ rgen Gauss (U. Mainz),; which is available after a license agreement from ; `http://www.cfour.de/ <http://www.cfour.de/>`_. Installation; ~~~~~~~~~~~~. Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by |PSIfour|, the program; binary (:program:`xcfour`) must be found in your :envvar:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcd",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
Energy Efficiency,adapt,adapted,"var:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases). * Set the task as usual, indicating Cfour as the intended code by; prepending ""c4-"" to the method argument. So ``energy('scf')`` becomes; ``energy('c4-scf')`` and ``optimize('ccsd(t)')`` becomes; ``optimize('c4-ccsd(t)')``. Find available methods for; :py:func:`~psi4.driver.energy` at :ref:`Energy (CFOUR) <table:energy_cfour>`; and for :py:func:`~psi4.driver.optimize` at :ref:`Gradient (CFOUR); <table:grad_cfour>`. * Generally, the p4c4 interface will handle best practices for path of; execution: ``vcc``/``ecc``, derivative type, *etc.* The user is still; responsible for setting convergence, frozen core, guess, diis, *etc.*; For the moment, so-called ""best-practices"" keywords are summarized at; :ref:`Best Practices <table:cfour_cc_program>`. * For the type of ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
Integrability,interface,interface,"eneral Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Cfour; .. _`sec:cfour`:. Interface to CFOUR by J. Stanton & J. Gauss; ===========================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:cfour>`, :ref:`PSI Variables <apdx:cfour_psivar>`, :ref:`Samples <apdx:testSuitecfour>`. |PSIfour| contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and J\ |u_dots|\ rgen Gauss (U. Mainz),; which is available after a license agreement from ; `http://www.cfour.de/ <http://www.cfour.de/>`_. Installation; ~~~~~~~~~~~~. Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by |PSIfour|, the program; binary (:program:`xcfour`) must be found in your :envvar:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
Modifiability,adapt,adapted,"var:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases). * Set the task as usual, indicating Cfour as the intended code by; prepending ""c4-"" to the method argument. So ``energy('scf')`` becomes; ``energy('c4-scf')`` and ``optimize('ccsd(t)')`` becomes; ``optimize('c4-ccsd(t)')``. Find available methods for; :py:func:`~psi4.driver.energy` at :ref:`Energy (CFOUR) <table:energy_cfour>`; and for :py:func:`~psi4.driver.optimize` at :ref:`Gradient (CFOUR); <table:grad_cfour>`. * Generally, the p4c4 interface will handle best practices for path of; execution: ``vcc``/``ecc``, derivative type, *etc.* The user is still; responsible for setting convergence, frozen core, guess, diis, *etc.*; For the moment, so-called ""best-practices"" keywords are summarized at; :ref:`Best Practices <table:cfour_cc_program>`. * For the type of ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
Performance,optimiz,optimize,"ported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases). * Set the task as usual, indicating Cfour as the intended code by; prepending ""c4-"" to the method argument. So ``energy('scf')`` becomes; ``energy('c4-scf')`` and ``optimize('ccsd(t)')`` becomes; ``optimize('c4-ccsd(t)')``. Find available methods for; :py:func:`~psi4.driver.energy` at :ref:`Energy (CFOUR) <table:energy_cfour>`; and for :py:func:`~psi4.driver.optimize` at :ref:`Gradient (CFOUR); <table:grad_cfour>`. * Generally, the p4c4 interface will handle best practices for path of; execution: ``vcc``/``ecc``, derivative type, *etc.* The user is still; responsible for setting convergence, frozen core, guess, diis, *etc.*; For the moment, so-called ""best-practices"" keywords are summarized at; :ref:`Best Practices <table:cfour_cc_program>`. * For the type of computation intended, find appropriate options at; :ref:`Keywords <apdx:cfour>`. These keyword summaries contain the same; information as the `proper CFOUR options list; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.ListOfKeywordsInAlphabeticalOrder>`_; plus notes on keyword relevance when run through |PSIfour|. Information; at the `CFOUR manual; <http://slater.chemie.uni-mainz.de",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
Safety,avoid,avoid,"artesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See :ref:`sec:moleculeSpecification` for details and; :srcsample:`cfour/mints5` for examples. When a |PSIfour|-style molecule is; supplied, its geometry is written to ``ZMAT`` in Cartesian form and the; |cfour__cfour_coordinates|\ =CARTESIAN, |cfour__cfour_units|\ =ANGSTROM,; |cfour__cfour_charge|, and |cfour__cfour_multiplicity| keywords are set; appropriately in the ``*CFOUR(...)`` directive. .. warning:: There exist molecules (*e.g.*, allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with ""Axis unreconcilable between; QC programs"". I will get to this soon. Whenever the molecule is supplied in |PSIfour| format, the job control; keywords must be too. All :ref:`Cfour keywords <apdx:cfour>` are the usual; ones, prepended by ``cfour_`` to avoid any possible name conflicts. As; detailed in :ref:`sec:jobControl`, setting keywords is flexible in; format. The previous example translates to::. # UHF-SCF energy calculation . molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; }; ; set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }; ; energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; :ref:`booleans <op_c_boolean>` have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in :source:`tests/cfour/` starting w",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
Security,access,access,"utodoc_abbr_options_c.rst. .. index:: Cfour; .. _`sec:cfour`:. Interface to CFOUR by J. Stanton & J. Gauss; ===========================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:cfour>`, :ref:`PSI Variables <apdx:cfour_psivar>`, :ref:`Samples <apdx:testSuitecfour>`. |PSIfour| contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and J\ |u_dots|\ rgen Gauss (U. Mainz),; which is available after a license agreement from ; `http://www.cfour.de/ <http://www.cfour.de/>`_. Installation; ~~~~~~~~~~~~. Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by |PSIfour|, the program; binary (:program:`xcfour`) must be found in your :envvar:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour on",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
Testability,test,testSuitecfour,"i4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Cfour; .. _`sec:cfour`:. Interface to CFOUR by J. Stanton & J. Gauss; ===========================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:cfour>`, :ref:`PSI Variables <apdx:cfour_psivar>`, :ref:`Samples <apdx:testSuitecfour>`. |PSIfour| contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and J\ |u_dots|\ rgen Gauss (U. Mainz),; which is available after a license agreement from ; `http://www.cfour.de/ <http://www.cfour.de/>`_. Installation; ~~~~~~~~~~~~. Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by |PSIfour|, the program; binary (:program:`xcfour`) must be found in your :envvar:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
Usability,simpl,simplest,"|PSIfour|. Information; at the `CFOUR manual; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.Manual>`_ may; also be useful, as may the many samples at :source:`samples/cfour`. * Set Cfour keywords just like |PSIfour| keywords. The names of keywords; are unchanged beyond a prepended ""cfour\_"". (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; |cfour__cfour_calc_level| and |cfour__cfour_reference| when used in; |PSIfour|.). * In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; |scf__reference| will appropriately set |cfour__cfour_reference|. For a; list of applicable keywords, see source of; muster_psi4options. * Consult :ref:`sec:cfourFunctionality` for information on what Cfour; functionality is accessible through |PSIfour|. |PSIfour| for Cfour Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. In the simplest use of the Psi4/Cfour interface, a |PSIfour| input file; can simply ""wrap"" a ``ZMAT`` file and execute :program:`xcfour`. This is; illustrated in the following example::. cfour {; UHF-SCF energy calculation ; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; ; *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }; ; energy('cfour'). Here, the contents of the ``cfour {...}`` block are written directly to a; ``ZMAT`` file. This is joined by a default ``GENBAS`` file; (:source:`psi4/share/psi4/basis/GENBAS`). To preferentially use your own ``GENBAS``,; place it in :envvar:`PATH` or :envvar:`PSIPATH`. The line calling; :py:func:`~psi4.driver.energy` with argument ``'cfour'`` invokes; :program:`xcfour`. After execution of the ``energy('cfour')`` line completes, Cfour results; are read back into |PSIfour| format and are thereafter accessible for; further processing in the input file. See :ref:`sec:cfourOutput` for; details. This storage of results in variables and arrays *in memory* for; the duration o",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
Availability,avail,available,". library of S. Wouters, which is based at `GitHub; .. <https://github.com/SebWouters/CheMPS2>`_. Consult the excellent; .. `documentation <http://sebwouters.github.io/CheMPS2/>`_ for using and; .. `citing <http://sebwouters.github.io/CheMPS2/publications.html>`_ the library. .. image:: https://img.shields.io/badge/home-CheMPS2-5077AB.svg; :target: https://github.com/SebWouters/CheMPS2. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://sebwouters.github.io/CheMPS2/index.html. .. note:: As of late June 2016, DMRG keywords in |PSIfour| have been; realigned with those of the chemps2 executable, plus a; ""dmrg\_"" prefix. The only exceptions are the orbital space; |PSIfour| keywords |globals__restricted_docc| (formerly; CheMPS2 used |globals__frozen_docc|, contrary to its; definition) and |globals__active| which are passed along to; CheMPS2 keywords ``NOCC`` and ``NACT``. A `translation table; <https://github.com/psi4/psi4/issues/150#issuecomment-228951911>`_; is available. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://img.shields.io/badge/Anaconda%20Cloud-1.7.1-5077AB.svg; :target: https://anaconda.org/psi4/chemps2. * CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CheMPS2 has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CheMPS2 can be obtained through ``conda install chemps2``.; Then enable it as a feature with :makevar:`ENABLE_CheMPS2`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect CheMPS2 and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove chemps2``. **Source**. * .. image:: https://img.shields.io/github/tag/Seb",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
Deployability,install,installed,".svg; :target: https://github.com/SebWouters/CheMPS2. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://sebwouters.github.io/CheMPS2/index.html. .. note:: As of late June 2016, DMRG keywords in |PSIfour| have been; realigned with those of the chemps2 executable, plus a; ""dmrg\_"" prefix. The only exceptions are the orbital space; |PSIfour| keywords |globals__restricted_docc| (formerly; CheMPS2 used |globals__frozen_docc|, contrary to its; definition) and |globals__active| which are passed along to; CheMPS2 keywords ``NOCC`` and ``NACT``. A `translation table; <https://github.com/psi4/psi4/issues/150#issuecomment-228951911>`_; is available. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://img.shields.io/badge/Anaconda%20Cloud-1.7.1-5077AB.svg; :target: https://anaconda.org/psi4/chemps2. * CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CheMPS2 has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CheMPS2 can be obtained through ``conda install chemps2``.; Then enable it as a feature with :makevar:`ENABLE_CheMPS2`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect CheMPS2 and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove chemps2``. **Source**. * .. image:: https://img.shields.io/github/tag/SebWouters/chemps2.svg?maxAge=2592000; :target: https://github.com/SebWouters/chemps2. * If using |PSIfour| built from source and you want CheMPS2 built from; from source also,; enable it as a feature with :makevar:`ENABLE_CheMPS2`,; and let the build system fetch and build it and activate dependent code. Methods; ~~~~~~~. .. _`table:che",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
Integrability,interface,interface,"of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CheMPS2; .. _`sec:chemps2`:. Interface to CheMPS2 by S. Wouters; ==================================. .. codeauthor:: Sebastian Wouters; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:dmrg>`, :ref:`PSI Variables <apdx:dmrg_psivar>`, :ref:`Samples <apdx:testSuitechemps2>`. .. comment|PSIfour| contains code to interface to the CheMPS2; .. library of S. Wouters, which is based at `GitHub; .. <https://github.com/SebWouters/CheMPS2>`_. Consult the excellent; .. `documentation <http://sebwouters.github.io/CheMPS2/>`_ for using and; .. `citing <http://sebwouters.github.io/CheMPS2/publications.html>`_ the library. .. image:: https://img.shields.io/badge/home-CheMPS2-5077AB.svg; :target: https://github.com/SebWouters/CheMPS2. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://sebwouters.github.io/CheMPS2/index.html. .. note:: As of late June 2016, DMRG keywords in |PSIfour| have been; realigned with those of the chemps2 executable, plus a; ""dmrg\_"" prefix. The only exceptions are the orbital space; |PSIfour| keywords |globals__restricted_docc| (formerly; CheMPS2 used |globals__frozen_docc|, contrary to its; definition) and |globals__active| which are passed along to; CheMPS2 keywords ``NOCC`` and ``NACT``. A `translation table; <https://github.c",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
Modifiability,config,configuration,"move chemps2``. **Source**. * .. image:: https://img.shields.io/github/tag/SebWouters/chemps2.svg?maxAge=2592000; :target: https://github.com/SebWouters/chemps2. * If using |PSIfour| built from source and you want CheMPS2 built from; from source also,; enable it as a feature with :makevar:`ENABLE_CheMPS2`,; and let the build system fetch and build it and activate dependent code. Methods; ~~~~~~~. .. _`table:chemps2_calls`:. .. table:: Density matrix renormalization group capabilities of |PSIfour| through CheMPS2. +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | name | calls method | Energy | Gradient |; +=========================+==============================================================+======================+======================+; | dmrg-ci | DMRG configuration interaction (CI) | RHF/ROHF | --- |; +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | dmrg-scf | DMRG complete active space SCF (CASSCF) | RHF/ROHF | --- |; +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | dmrg-caspt2 | DMRG CAS with 2nd-order perturbation theory (CASPT2) | RHF/ROHF | --- |; +-------------------------+--------------------------------------------------------------+----------------------+----------------------+. DMRG Keywords; ~~~~~~~~~~~~~. .. include:: /autodir_options_c/dmrg__dmrg_caspt2_calc.rst; .. include:: /autodir_options_c/dmrg__dmrg_caspt2_imag.rst; .. include:: /autodir_options_c/dmrg__dmrg_caspt2_ipea.rst; .. include:: /autodir_options_c/dmrg__dmrg_caspt2_orbs.rst; .. include:: /autodir_options_c/dmrg__dmrg_diis.rst; .. include:: /autodir_options_c/dmrg__dmrg_diis_write.rst; .. include:: /autodir_options_c/dmrg__dmrg_excitation.rst; .. include:: /autodir_options_c/dmrg__dmrg_irrep.rst; .. include:: /autodir_",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
Performance,optimiz,optimization,"heMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E. Link against pre-built with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". F. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. .. _`faq:chemps2gccflto`:. How to fix ""``plugin needed to handle lto object``"" when building CheMPS2; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. For building with GCC, errors involving unresolved symbols or a message; ""plugin needed to handle lto object"" may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to ``setup`` or ``cmake``:; ``-DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar`` .; Details at https://github.com/psi4/psi4/issues/414. ",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
Safety,detect,detect,"\_"" prefix. The only exceptions are the orbital space; |PSIfour| keywords |globals__restricted_docc| (formerly; CheMPS2 used |globals__frozen_docc|, contrary to its; definition) and |globals__active| which are passed along to; CheMPS2 keywords ``NOCC`` and ``NACT``. A `translation table; <https://github.com/psi4/psi4/issues/150#issuecomment-228951911>`_; is available. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://img.shields.io/badge/Anaconda%20Cloud-1.7.1-5077AB.svg; :target: https://anaconda.org/psi4/chemps2. * CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CheMPS2 has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CheMPS2 can be obtained through ``conda install chemps2``.; Then enable it as a feature with :makevar:`ENABLE_CheMPS2`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect CheMPS2 and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove chemps2``. **Source**. * .. image:: https://img.shields.io/github/tag/SebWouters/chemps2.svg?maxAge=2592000; :target: https://github.com/SebWouters/chemps2. * If using |PSIfour| built from source and you want CheMPS2 built from; from source also,; enable it as a feature with :makevar:`ENABLE_CheMPS2`,; and let the build system fetch and build it and activate dependent code. Methods; ~~~~~~~. .. _`table:chemps2_calls`:. .. table:: Density matrix renormalization group capabilities of |PSIfour| through CheMPS2. +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | name | calls method | Energy | Gradient |; +=========================+============",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
Deployability,install,installed,"e Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:code_style`:. Code style conventions; ======================. It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; `clang-format <https://clang.llvm.org/docs/ClangFormat.html>`_ and `yapf <https://github.com/google/yapf>`_ can be used to format C++ and Python code,; respectively, according to a predefined style file.; |PSIfour| provides the :source:`.clang-format` and :source:`.style.yapf` files in the root; folder of the project.; It is **recommended** that modifications and/or new files checked into the; repository are formatted according to these style files using ``clang-format``; and ``yapf``. It is then helpful if these tools be part of your development toolchain.; Once ``clang-format`` and ``yapf`` are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. 1. By integrating the formatters into your editor.; 2. By installing Git hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be ",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
Energy Efficiency,power,powerful,"r; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit install. Pre-commit hooks will be run on every ``git commit``, but the ``--no-verify``; option can be used to skip their execution. Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. .. _`faq:manualcodestyle`:. How to run code-style tools `clang-format` and `yapf` manually; --------------------------------------------------------------. The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::; clang-format -style=file -i `git diff --relative --name-only HEAD -- *.cc *.h`; yapf -i `git diff --relative --name-only HEAD -- *.py`. How and when to *not* apply code styling to your contributions; --------------------------------------------------------------. TODO. ",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
Integrability,integrat,integrating,"SE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:code_style`:. Code style conventions; ======================. It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; `clang-format <https://clang.llvm.org/docs/ClangFormat.html>`_ and `yapf <https://github.com/google/yapf>`_ can be used to format C++ and Python code,; respectively, according to a predefined style file.; |PSIfour| provides the :source:`.clang-format` and :source:`.style.yapf` files in the root; folder of the project.; It is **recommended** that modifications and/or new files checked into the; repository are formatted according to these style files using ``clang-format``; and ``yapf``. It is then helpful if these tools be part of your development toolchain.; Once ``clang-format`` and ``yapf`` are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. 1. By integrating the formatters into your editor.; 2. By installing Git hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framewor",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
Modifiability,plugin,plugin,"redefined style file.; |PSIfour| provides the :source:`.clang-format` and :source:`.style.yapf` files in the root; folder of the project.; It is **recommended** that modifications and/or new files checked into the; repository are formatted according to these style files using ``clang-format``; and ``yapf``. It is then helpful if these tools be part of your development toolchain.; Once ``clang-format`` and ``yapf`` are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. 1. By integrating the formatters into your editor.; 2. By installing Git hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit install. Pre-commit hooks will be run on every ``git commit``, but the ``--no-verify``; option can be used to skip their e",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
Safety,avoid,avoid,"rom other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:code_style`:. Code style conventions; ======================. It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; `clang-format <https://clang.llvm.org/docs/ClangFormat.html>`_ and `yapf <https://github.com/google/yapf>`_ can be used to format C++ and Python code,; respectively, according to a predefined style file.; |PSIfour| provides the :source:`.clang-format` and :source:`.style.yapf` files in the root; folder of the project.; It is **recommended** that modifications and/or new files checked into the; repository are formatted according to these style files using ``clang-format``; and ``yapf``. It is then helpful if these tools be part of your development toolchain.; Once ``clang-format`` and ``yapf`` are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. 1. By integrating the formatters into your editor.; 2. By installing Git hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. Ho",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
Availability,down,downloads,"U Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:conda`:. Conda Binary Distribution; =========================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
Deployability,install,install,"; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:conda`:. Conda Binary Distribution; =========================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/c",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
Energy Efficiency,green,green,"able as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activat",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
Integrability,depend,dependencies,"c or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to :envvar:`PATH` and; :envvar:`PSI_SCRATCH` that it suggests at the end. Test with ``psi4; --test``. Configuration for this set-up is summarized at; :ref:`faq:runfrombinary`. **Details:**. * It is advised to place |PSIfour| into a conda; environment where its libraries can't interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (:samp:`{p4env}` above) can be; substituted. * The ``psi4-rt`` package can be added to the package list to get the; QC runtime add-ons; could say any combination of ``v2rdm_casscf snsmp2; resp`` etc. instead of ``psi4-rt``.; As of |PSIfour| v1.7, the ``psi4-rt`` package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like :source:`devtools/conda-envs` . * Grab a Miniconda through one of the below, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda updat",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
Modifiability,plugin,plugins,"architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that ",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
Performance,perform,performance,"2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
Safety,avoid,avoid,"ribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, pr",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
Security,access,access,"/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
Testability,test,test,"able as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activat",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
Usability,guid,guides,"U Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:conda`:. Conda Binary Distribution; =========================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no",MatchSource.DOCS,doc/sphinxman/source/conda.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst
Availability,down,downloads,"al Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CPPE, PE. .. _`sec:cppe`:. Interface to CPPE by M. Scheurer; =======================================. .. codeauthor:: Maximilian Scheurer; .. sectionauthor:: Maximilian Scheurer. *Module:* :ref:`Keywords <apdx:pe>`, :ref:`PSI Variables <apdx:pe_psivar>`. .. image:: https://img.shields.io/badge/home-cppe-informational.svg; :target: https://github.com/maxscheurer/cppe. .. .. raw:: html; .. ; .. <br>; .. ; .. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; .. :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to d",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
Deployability,configurat,configuration,"al Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CPPE, PE. .. _`sec:cppe`:. Interface to CPPE by M. Scheurer; =======================================. .. codeauthor:: Maximilian Scheurer; .. sectionauthor:: Maximilian Scheurer. *Module:* :ref:`Keywords <apdx:pe>`, :ref:`PSI Variables <apdx:pe_psivar>`. .. image:: https://img.shields.io/badge/home-cppe-informational.svg; :target: https://github.com/maxscheurer/cppe. .. .. raw:: html; .. ; .. <br>; .. ; .. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; .. :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to d",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
Energy Efficiency,energy,energy,"LE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to detect CPPE and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. cppe from conda without thinking, consult. * To remove a conda installation, ``conda remove cppe``. **Source**. * .. image:: https://img.shields.io/github/tag-date/maxscheurer/cppe.svg?maxAge=2592000; :target: https://github.com/maxscheurer/cppe. * If using |PSIfour| built from source and you want CPPE built from; from source also,; enable it as a feature with :makevar:`ENABLE_cppe`,; and let the build system fetch and build it and activate dependent code. .. index:: PE; Using PE. .. _`sec:usingPE`:. Using the polarizable embedding model; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The inclusion of a PE description of the solvent into your calculation; is achieved by setting |globals__pe| ``true`` in your input file. .. note:: At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. .. warning:: The CPPE library **cannot** exploit molecular point group symmetry. .. .. warning:: Analytic gradients and Hessians **are not** available with PE. Finite differences will be used; .. regardless of the ``dertype`` passed to the ``optimize`` function.; .. See :srcsample:`pcmsolver/opt-fd` for a sample input. .. The PCM model and molecular cavity are specified in a ``pcm`` section that has; .. to be explicitly typed in by the user. This additional section follows a syntax; .. that is slightly different from that of |Psifour| and is fully documented; .. `here <http://pcmsolver.readthedocs.io/en/latest/users/input.html>`_. A typical input for a Hartree--Fock calculation with PE would look like the follo",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
Integrability,interface,interface,". # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CPPE, PE. .. _`sec:cppe`:. Interface to CPPE by M. Scheurer; =======================================. .. codeauthor:: Maximilian Scheurer; .. sectionauthor:: Maximilian Scheurer. *Module:* :ref:`Keywords <apdx:pe>`, :ref:`PSI Variables <apdx:pe_psivar>`. .. image:: https://img.shields.io/badge/home-cppe-informational.svg; :target: https://github.com/maxscheurer/cppe. .. .. raw:: html; .. ; .. <br>; .. ; .. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; .. :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
Modifiability,config,configuration,"al Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CPPE, PE. .. _`sec:cppe`:. Interface to CPPE by M. Scheurer; =======================================. .. codeauthor:: Maximilian Scheurer; .. sectionauthor:: Maximilian Scheurer. *Module:* :ref:`Keywords <apdx:pe>`, :ref:`PSI Variables <apdx:pe_psivar>`. .. image:: https://img.shields.io/badge/home-cppe-informational.svg; :target: https://github.com/maxscheurer/cppe. .. .. raw:: html; .. ; .. <br>; .. ; .. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; .. :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to d",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
Performance,perform,perform,"-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CPPE, PE. .. _`sec:cppe`:. Interface to CPPE by M. Scheurer; =======================================. .. codeauthor:: Maximilian Scheurer; .. sectionauthor:: Maximilian Scheurer. *Module:* :ref:`Keywords <apdx:pe>`, :ref:`PSI Variables <apdx:pe_psivar>`. .. image:: https://img.shields.io/badge/home-cppe-informational.svg; :target: https://github.com/maxscheurer/cppe. .. .. raw:: html; .. ; .. <br>; .. ; .. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; .. :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to detect CPPE and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. cppe from conda without thinking, consult. * To remove a conda installation, ``conda remove cppe``. **Source**. * .. image:: https://img",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
Safety,detect,detect,"eurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to detect CPPE and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. cppe from conda without thinking, consult. * To remove a conda installation, ``conda remove cppe``. **Source**. * .. image:: https://img.shields.io/github/tag-date/maxscheurer/cppe.svg?maxAge=2592000; :target: https://github.com/maxscheurer/cppe. * If using |PSIfour| built from source and you want CPPE built from; from source also,; enable it as a feature with :makevar:`ENABLE_cppe`,; and let the build system fetch and build it and activate dependent code. .. index:: PE; Using PE. .. _`sec:usingPE`:. Using the polarizable embedding model; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The inclusion of a PE description of the solvent into your calculation; is achieved by setting |globals__pe| ``true`` in your input file. .. note:: At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in t",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
Testability,test,tests,"rom that of |Psifour| and is fully documented; .. `here <http://pcmsolver.readthedocs.io/en/latest/users/input.html>`_. A typical input for a Hartree--Fock calculation with PE would look like the following: ::. molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200 0.99500; C 7.65300 2.34500 0.05500; C 7.73200 2.03100 -1.29200; H 10.18300 -0.30900 -1.16400; H 10.04400 0.25200 1.24700; H 6.94200 3.08900 0.38900; H 7.09700 2.51500 -2.01800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.11000 -3.46600; H 7.74900 2.71100 2.65200; H 8.99100 1.57500 2.99500; symmetry c1; no_reorient; no_com; }. set {; basis sto-3g; pe true; e_convergence 10; d_convergence 10; scf_type pk; }. set pe {; potfile pna_6w.pot; }. scf_energy, wfn = energy('scf', return_wfn=True). The corresponding potential file `pna_6w.pot` can be downloaded; `here <https://raw.githubusercontent.com/maxscheurer/cppe/master/tests/potfiles/pna_6w.pot>`_. Keywords for CPPE; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/globals__pe.rst; .. include:: autodir_options_c/pe__potfile.rst; .. include:: autodir_options_c/pe__isotropic_pol.rst; .. include:: autodir_options_c/pe__induced_convergence.rst; .. include:: autodir_options_c/pe__maxiter.rst; .. include:: autodir_options_c/pe__border.rst; .. include:: autodir_options_c/pe__border_type.rst; .. include:: autodir_options_c/pe__border_n_redist.rst; .. include:: autodir_options_c/pe__border_redist_order.rst; .. include:: autodir_options_c/pe__border_rmin.rst; .. include:: autodir_options_c/pe__border_rmin_unit.rst; .. include:: autodir_options_c/pe__border_redist_pol.rst. .. _`cmake:cppe`:. How to configure CPPE for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling). * Downstream Dependencies |",MatchSource.DOCS,doc/sphinxman/source/cppe.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst
Availability,avail,available," irrep.; The file ``Psi_a_5_1-B1.cube`` begins with two comment lines::. Psi4 Gaussian Cube File.; Property: Psi_a_5_1-B1. Isocontour range for 85% of the density: (0.0787495,-0.0787495). The second line reports the isocontour values that capture 85% of the probability density using; the least amount of grid points. This quantity is determined for orbitals and densities. The; fraction of the density captured by the isocontour values is by default 0.85, but can; be changed via the option |globals__cubeprop_isocontour_threshold|. .. note:: If your cube plots are too coarse, try to decrease the grid spacing via; the option |globals__cubic_grid_spacing|. If the edges of your plot are cut then; increase the size of the grid via the option |globals__cubic_grid_overage|. Cubeprop Tasks; --------------. The cubeprop utility can be provided a list of tasks to perform.; Tasks are specified by the |globals__cubeprop_tasks| option, which is a list of strings; that identify the tasks. Several tasks are available. These include:. ORBITALS [Default if |globals__cubeprop_tasks| is not specified]; Produces cube representations of the molecular orbitals; :math:`\psi_q(\mathbf{r})`. Orbitals are sorted according to increasing; orbital energy ignoring symmetry.; FRONTIER_ORBITALS; Produces cube representations of the frontier molecular orbitals. For closed shell; species, the highest occupied (HOMO) and the lowest unoccupied (LUMO) alpha orbitals (ie. ; :math:`\psi_{\alpha}(\mathbf{r})`) are printed, while for open shell species a total ; of :math:`(4 + M_s)` orbitals are printed (:math:`\alpha` and :math:`\beta` ; spin for both lowest virtual (LVMO) and highest doubly occupied; orbitals (DOMO), along with all :math:`\alpha` singly occupied (SOMO) orbitals).; DENSITY; This task can be used to obtain the alpha and beta electron densities,; :math:`\rho_\alpha(\mathbf{r})` and :math:`\rho_\beta(\mathbf{r})`, together; with the total density; :math:`\rho(\mathbf{r}) = \rho_\alpha(\mathbf{r}",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
Deployability,install,installed,"200 basis functions, the cube; files for all the orbitals occupy more than half a GB. Keywords; --------. .. include:: autodir_options_c/globals__cubeprop_tasks.rst; .. include:: autodir_options_c/globals__cubeprop_filepath.rst; .. include:: autodir_options_c/globals__cubeprop_orbitals.rst; .. include:: autodir_options_c/globals__cubeprop_basis_functions.rst; .. include:: autodir_options_c/globals__cubic_grid_spacing.rst; .. include:: autodir_options_c/globals__cubic_grid_overage.rst. Orbital Visualization with VMD; ==============================. Included in |PSIfour| is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in :source:`psi4/share/psi4/scripts/vmd_cube.py`. Script Prerequisites; --------------------. 1. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as :envvar:`VMDPATH`. VMDPATH must be defined as; an environment variable. 2. To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php . 3. With ImageMagick installed, an environment variable called :envvar:`MONTAGE` needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. .. envvar:: VMDPATH. Filesystem path to the VMD executable. .. envvar:: MONTAGE. Filesystem path to the Montage executable of ImageMagick. Running the Script; ------------------. 1. Run a |PSIfour| calculation, generating .cube files as detailed in the above documentation. 2. Add vmd_cube.py to your path. Call vmd",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
Energy Efficiency,energy,energy,"sec:cubeprop`:. Generation of Cube Files |w---w| :py:func:`~psi4.driver.cubeprop`; =================================================================. .. codeauthor:: Robert M. Parrish, Francesco A. Evangelista and Peter Kraus; .. sectionauthor:: Francesco A. Evangelista and Peter Kraus. .. autofunction:: psi4.cubeprop(wfn); :noindex:. Introduction; ------------. |PSIfour| has the ability to export cube files that store information about; basis functions, molecular orbitals, the electron density, and; the electrostatic potential (ESP). Cube files store the value of a scalar; quantity on a regular Cartesian grid, and can be visualized with several; visualization programs, some of which are free, like VMD; (http://www.ks.uiuc.edu/Research/vmd/). An example utilization of the code is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True; set cubeprop_tasks ['orbitals']; set cubeprop_orbitals [5,6,-5,-6]. E, wfn = energy('scf', return_wfn=True); cubeprop(wfn). In this example, the :py:func:`~psi4.driver.cubeprop`; call after the ``energy('scf')`` command; executes the cubeprop code. The array |globals__cubeprop_tasks| specifies which; tasks should be executed. In this case the task ``'orbitals'`` generates cube; files for orbitals. The |globals__cubeprop_orbitals| option specifies that cube files; should be generated only for alpha orbitals 5 (HOMO) and 6 (LUMO) and; beta orbitals 5 (indicated as -5) and 6.; If the option |globals__cubeprop_orbitals| is not provided, then cube files are; generated for all orbitals.; After running, the above input will generate four files: ``Psi_a_5_1-B1.cube``,; ``Psi_a_6_4-A1.cube``, ``Psi_a_5_1-B1.cube``, and ``Psi_a_6_4-A1.cube``. The subscript ``a`` in; ``Psi_a_5_1-B1.cube`` indicates an alpha orbital. The first number (``5``) is the index of the; orbital while ``1-B1`` indicates that this is the first orbital that belongs to the B1 irrep.; The file ``Psi_a_5_1-B1.cube`` begi",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
Integrability,message,message,": 100%; :alt: Alpha MOs	. Script Options; --------------. The help for ``vmd_cube.py`` can be obtained from the console::. >>> ./vmd_cube.py --help; usage: vmd_cube.py [-h] [--color1 [<integer>]] [--color2 [<integer>]]; [--iso [<isovalue>]] [--rx [<angle>]] [--ry [<angle>]]; [--rz [<angle>]] [--tx [<length>]] [--ty [<length>]]; [--tz [<length>]] [--opacity [<opacity>]]; [--scale [<factor>]] [--no-montage] [--no-labels]; [--imagesize [<integer>]] [--imagew [<integer>]]; [--imageh [<integer>]] [--fontsize [<integer>]]; [--interactive] [--gzip] [--national_scheme]; [--silver_scheme] [--bright_scheme] [--electron_scheme]; [<cubefile dir>]. vmd_cube is a script to render cube files with vmd. To generate cube files; with Psi4 add the command cubeprop() at the end of your input file. positional arguments:; <cubefile dir> The directory containing the cube files. optional arguments:; -h, --help show this help message and exit; --color1 [<integer>] the color ID of surface 1 (integer, default = 3); --color2 [<integer>] the color ID of surface 2 (integer, default = 23); --iso [<isovalue>] the isosurface value (float, default = 0.05); --rx [<angle>] the x-axis rotation angle (float, default = 30.0); --ry [<angle>] the y-axis rotation angle (float, default = 40.0); --rz [<angle>] the z-axis rotation angle (float, default = 15.0); --tx [<length>] the x-axis translation (float, default = 0.0); --ty [<length>] the y-axis translation (float, default = 0.0); --tz [<length>] the z-axis translation (float, default = 0.0); --opacity [<opacity>]; opacity of the isosurface (float, default = 1.0); --scale [<factor>] the scaling factor (float, default = 1.0); --no-montage call montage to combine images. (string, default =; false); --no-labels do not add labels to images. (string, default = false); --imagesize [<integer>]; the size of each image (integer, default = 250); --imagew [<integer>] the width of images (integer, default = 250); --imageh [<integer>] the height of images (integer, defau",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
Modifiability,variab,variable,"cubeprop_filepath.rst; .. include:: autodir_options_c/globals__cubeprop_orbitals.rst; .. include:: autodir_options_c/globals__cubeprop_basis_functions.rst; .. include:: autodir_options_c/globals__cubic_grid_spacing.rst; .. include:: autodir_options_c/globals__cubic_grid_overage.rst. Orbital Visualization with VMD; ==============================. Included in |PSIfour| is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in :source:`psi4/share/psi4/scripts/vmd_cube.py`. Script Prerequisites; --------------------. 1. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as :envvar:`VMDPATH`. VMDPATH must be defined as; an environment variable. 2. To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php . 3. With ImageMagick installed, an environment variable called :envvar:`MONTAGE` needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. .. envvar:: VMDPATH. Filesystem path to the VMD executable. .. envvar:: MONTAGE. Filesystem path to the Montage executable of ImageMagick. Running the Script; ------------------. 1. Run a |PSIfour| calculation, generating .cube files as detailed in the above documentation. 2. Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument::; 	; 	python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is ca",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
Performance,perform,perform,"` indicates an alpha orbital. The first number (``5``) is the index of the; orbital while ``1-B1`` indicates that this is the first orbital that belongs to the B1 irrep.; The file ``Psi_a_5_1-B1.cube`` begins with two comment lines::. Psi4 Gaussian Cube File.; Property: Psi_a_5_1-B1. Isocontour range for 85% of the density: (0.0787495,-0.0787495). The second line reports the isocontour values that capture 85% of the probability density using; the least amount of grid points. This quantity is determined for orbitals and densities. The; fraction of the density captured by the isocontour values is by default 0.85, but can; be changed via the option |globals__cubeprop_isocontour_threshold|. .. note:: If your cube plots are too coarse, try to decrease the grid spacing via; the option |globals__cubic_grid_spacing|. If the edges of your plot are cut then; increase the size of the grid via the option |globals__cubic_grid_overage|. Cubeprop Tasks; --------------. The cubeprop utility can be provided a list of tasks to perform.; Tasks are specified by the |globals__cubeprop_tasks| option, which is a list of strings; that identify the tasks. Several tasks are available. These include:. ORBITALS [Default if |globals__cubeprop_tasks| is not specified]; Produces cube representations of the molecular orbitals; :math:`\psi_q(\mathbf{r})`. Orbitals are sorted according to increasing; orbital energy ignoring symmetry.; FRONTIER_ORBITALS; Produces cube representations of the frontier molecular orbitals. For closed shell; species, the highest occupied (HOMO) and the lowest unoccupied (LUMO) alpha orbitals (ie. ; :math:`\psi_{\alpha}(\mathbf{r})`) are printed, while for open shell species a total ; of :math:`(4 + M_s)` orbitals are printed (:math:`\alpha` and :math:`\beta` ; spin for both lowest virtual (LVMO) and highest doubly occupied; orbitals (DOMO), along with all :math:`\alpha` singly occupied (SOMO) orbitals).; DENSITY; This task can be used to obtain the alpha and beta electron ",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
Safety,avoid,avoid,"rho_\beta(\mathbf{r})`.; BASIS_FUNCTIONS; This task is useful to produce cube files of the atomic orbital basis; functions :math:`\chi_\mu(\mathbf{r})`.; ESP; Calculates the total (nuclear + electronic) electrostatic potential; :math:`V(\mathbf{r})`.; DUAL_DESCRIPTOR; Calculates the dual descriptor from frontier orbitals:; :math:`f^2(\mathbf{r})=\rho_{\mathrm{LUMO}}(\mathbf{r})-\rho_{\mathrm{HOMO}}(\mathbf{r})`.; The dual descriptor is a good measure of nucleophilicity and electrophilicity,; containing information essentially equivalent to both Fukui functions combined. ; More details on the dual descriptor itself can be found in [Morell:2005:205]_, ; while the current implementation is described in [Martinez-Araya:2015:451]_. ; This feature is currently only supported for closed shell systems. .. note:: The ``ESP`` task requires the user to specify a density-fitting basis; via the |scf__df_basis_scf| keyword. .. warning:: It is important to specify the |globals__cubeprop_orbitals| option when; dealing with large molecules to avoid running out of disk space.; For example, using the default grid spacing of; 0.2 |Angstrom|, the size of a single cube file for a molecule like water; is of the order of 1.4 MB. For a molecule with 200 basis functions, the cube; files for all the orbitals occupy more than half a GB. Keywords; --------. .. include:: autodir_options_c/globals__cubeprop_tasks.rst; .. include:: autodir_options_c/globals__cubeprop_filepath.rst; .. include:: autodir_options_c/globals__cubeprop_orbitals.rst; .. include:: autodir_options_c/globals__cubeprop_basis_functions.rst; .. include:: autodir_options_c/globals__cubic_grid_spacing.rst; .. include:: autodir_options_c/globals__cubic_grid_overage.rst. Orbital Visualization with VMD; ==============================. Included in |PSIfour| is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files",MatchSource.DOCS,doc/sphinxman/source/cubeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst
Security,access,accessible,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:customizing`:. =======================================; Customization: Adding Simple Extensions; =======================================. |PSIfour| has been designed to be easily extensible. There are several; customizations accessible to any user, no programming experience or; recompilation required. * :ref:`sec:basisUserDefined`. .. toctree::; :maxdepth: 2. quickaddalias; quickadddatabase. * https://github.com/dgasmith/psi4numpy. ",MatchSource.DOCS,doc/sphinxman/source/customizing.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/customizing.rst
Availability,error,error,"ed.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers. ::. RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is ; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, *e.g.*, BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword ``tabulate``, in this case the total SCF energy and the number; of atoms in each reagent. ::. ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt; -----------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
Energy Efficiency,energy,energy,"c.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; database(); see: db(); database(); single: database(). .. _`sec:db()`:. Database |w---w| :py:func:`~psi4.driver.wrapper_database.database`; ==================================================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. .. autofunction:: psi4.driver.wrapper_database.database(name, db_name [, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset]). .. index:: ; pair: database(); output. Output; ^^^^^^. At the beginning of a database job is printed a listing of the individual system ; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers. ::. RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is ; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, *e.g.*, BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; thr",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
Integrability,wrap,wrapper,"c.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; database(); see: db(); database(); single: database(). .. _`sec:db()`:. Database |w---w| :py:func:`~psi4.driver.wrapper_database.database`; ==================================================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. .. autofunction:: psi4.driver.wrapper_database.database(name, db_name [, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset]). .. index:: ; pair: database(); output. Output; ^^^^^^. At the beginning of a database job is printed a listing of the individual system ; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers. ::. RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is ; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, *e.g.*, BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; thr",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
Modifiability,variab,variable,"ed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers. ::. RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is ; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, *e.g.*, BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword ``tabulate``, in this case the total SCF energy and the number; of atoms in each reagent. ::. ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reac",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
Performance,perform,performed,"warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; database(); see: db(); database(); single: database(). .. _`sec:db()`:. Database |w---w| :py:func:`~psi4.driver.wrapper_database.database`; ==================================================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. .. autofunction:: psi4.driver.wrapper_database.database(name, db_name [, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset]). .. index:: ; pair: database(); output. Output; ^^^^^^. At the beginning of a database job is printed a listing of the individual system ; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers. ::. RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the data",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
Testability,benchmark,benchmark,"ee Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; database(); see: db(); database(); single: database(). .. _`sec:db()`:. Database |w---w| :py:func:`~psi4.driver.wrapper_database.database`; ==================================================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. .. autofunction:: psi4.driver.wrapper_database.database(name, db_name [, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset]). .. index:: ; pair: database(); output. Output; ^^^^^^. At the beginning of a database job is printed a listing of the individual system ; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers. ::. RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is c",MatchSource.DOCS,doc/sphinxman/source/db.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst
Availability,avail,available," construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; :math:`\boldsymbol{\gamma_2}`. In order to obtain the DCT energy, two conditions must be satisfied:. 1) The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods). 2) The energy must be stationary with respect to the variation of the density; cumulant :math:`\boldsymbol{\lambda_2}`, constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; :ref:`Iterative Algorithms <sec:dctalgorithms>` for details). . Publications resulting from the use of the DCT code should cite contributions; listed :ref:`here <intro:dctcitations>`. .. _`sec:dctmethods`:. Methods; ~~~~~~~. Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The first four ; methods use approximate N-representability conditions derived from ; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part :math:`\boldsymbol{\tau}` of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods :math:`\boldsymbol{\tau}` is derived from the density cumulant; in an approximate way (labelled by '06'), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by '12'). The corresponding DC and ODC methods; have similar description of the :",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
Deployability,update,update,"representability conditions derived from ; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part :math:`\boldsymbol{\tau}` of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods :math:`\boldsymbol{\tau}` is derived from the density cumulant; in an approximate way (labelled by '06'), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by '12'). The corresponding DC and ODC methods; have similar description of the :math:`\boldsymbol{\gamma_1}` N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12. ; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution :math:`\boldsymbol{\tau}`, respectively,; and the orbitals are variationally optimized. ; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [:math:`\mbox{ODC-13$(\lambda_3)$}`] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our :ref:`publications <intro:dctcitations>`. The DCT functional can be specified by the |dct__dct_functional| option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the :math:`(\la",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
Energy Efficiency,energy,energy,"ULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: DCT; pair: DCT; theory. .. _`sec:dct`:. DCT: Density Cumulant Theory; =============================. .. codeauthor:: Alexander Yu. Sokolov, Andrew C. Simmonett, and Xiao Wang; .. sectionauthor:: Alexander Yu. Sokolov. *Module:* :ref:`Keywords <apdx:dct>`, :ref:`PSI Variables <apdx:dct_psivar>`, :source:`DCT <psi4/src/psi4/dct>`. .. _`sec:dcttheory`:. Theory; ~~~~~~. Density cumulant theory (DCT) is a density-based *ab initio* theory; that can compute electronic energies without the use of a wavefunction. The; theory starts by writing the exact energy expression in terms of the one- and; two-particle density matrices (:math:`\boldsymbol{\gamma_1}` and :math:`\boldsymbol{\gamma_2}`):. .. math:: . E = h_p^q \gamma_q^p + \frac{1}{2} g_{pq}^{rs} \gamma_{rs}^{pq}. Here we used Einstein convention for the summation over the repeated indices.; :math:`h_p^q` and :math:`g_{pq}^{rs}` are the standard one- and two-electron integrals, and; :math:`\gamma_p^q` and :math:`\gamma_{pq}^{rs}` are the elements of :math:`\boldsymbol{\gamma_1}` and :math:`\boldsymbol{\gamma_2}`,; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements :math:`\gamma_p^q` and; :math:`\gamma_{pq}^{rs}` cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, *i.e.*; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability ",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
Integrability,rout,route,"`g_{pq}^{rs}` are the standard one- and two-electron integrals, and; :math:`\gamma_p^q` and :math:`\gamma_{pq}^{rs}` are the elements of :math:`\boldsymbol{\gamma_1}` and :math:`\boldsymbol{\gamma_2}`,; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements :math:`\gamma_p^q` and; :math:`\gamma_{pq}^{rs}` cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, *i.e.*; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces :math:`\boldsymbol{\gamma_2}` in favor of its two-particle density cumulant:. .. math:: . \lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r. The one-particle density matrix is separated into its idempotent part; :math:`\boldsymbol{\kappa}` and a correction :math:`\boldsymbol{\tau}`:. .. math:: . \gamma_p^q = \kappa_p^q + \tau_p^q. The idempotent part of :math:`\boldsymbol{\gamma_1}` corresponds to a mean-field Hartree--Fock-like density,; while the non-idempotent correction :math:`\boldsymbol{\tau}`; depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. .. math:: . E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}. where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. .. math:: . \bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}. .. math",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
Modifiability,coupling,coupling,"using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below :math:`10^{-7}`. The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive :math:`{\cal O}(N^5)` integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive :math:`{\cal O}(N^6)`; cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; :math:`(vv|vv)` and",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
Performance,optimiz,optimization,"and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods). 2) The energy must be stationary with respect to the variation of the density; cumulant :math:`\boldsymbol{\lambda_2}`, constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; :ref:`Iterative Algorithms <sec:dctalgorithms>` for details). . Publications resulting from the use of the DCT code should cite contributions; listed :ref:`here <intro:dctcitations>`. .. _`sec:dctmethods`:. Methods; ~~~~~~~. Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The first four ; methods use approximate N-representability conditions derived from ; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part :math:`\boldsymbol{\tau}` of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods :math:`\boldsymbol{\tau}` is derived from the density cumulant; in an approximate way (labelled by '06'), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by '12'). The corresponding DC and ODC methods; have similar description of the :math:`\boldsymbol{\gamma_1}` N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12. ; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
Safety,avoid,avoiding," elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below :math:`10^{-7}`. The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive :math:`{\cal O}(N^5)` integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive :math:`{\cal O}(N^6)`; cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; :math:`(vv|vv)` and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the |dct__ao_basis| option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; :ref:`Recommendations <sec:dctrecommend>`. .. _`sec:dctgradients`:. Analytic Gradients; ~~~~~~~~~~~~~~~~~~. Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: ``TWOSTEP`` (default) and ``SIMULTANEOUS``. These algorithms are similar to those; described for the orbital and cumulant updates in the :ref:`Iterative Algorithms <sec:dctalgorithms>`; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the |dct__response_algorithm| option. For the DC-12 method the; analytic g",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
Usability,simpl,simple,"rticle density matrices (:math:`\boldsymbol{\gamma_1}` and :math:`\boldsymbol{\gamma_2}`):. .. math:: . E = h_p^q \gamma_q^p + \frac{1}{2} g_{pq}^{rs} \gamma_{rs}^{pq}. Here we used Einstein convention for the summation over the repeated indices.; :math:`h_p^q` and :math:`g_{pq}^{rs}` are the standard one- and two-electron integrals, and; :math:`\gamma_p^q` and :math:`\gamma_{pq}^{rs}` are the elements of :math:`\boldsymbol{\gamma_1}` and :math:`\boldsymbol{\gamma_2}`,; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements :math:`\gamma_p^q` and; :math:`\gamma_{pq}^{rs}` cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, *i.e.*; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces :math:`\boldsymbol{\gamma_2}` in favor of its two-particle density cumulant:. .. math:: . \lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r. The one-particle density matrix is separated into its idempotent part; :math:`\boldsymbol{\kappa}` and a correction :math:`\boldsymbol{\tau}`:. .. math:: . \gamma_p^q = \kappa_p^q + \tau_p^q. The idempotent part of :math:`\boldsymbol{\gamma_1}` corresponds to a mean-field Hartree--Fock-like density,; while the non-idempotent correction :math:`\boldsymbol{\tau}`; depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. .. math:: . E_{DCT} = \frac{1}{2} \left( h_p^q",MatchSource.DOCS,doc/sphinxman/source/dct.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst
Availability,avail,available,"dge/docs-latest-5077AB.svg; :target: https://ddsolvation.github.io/ddX/. |PSIfour| contains code to interface to the ddx FORTRAN library developed; by A. Mikhalev *et. al.*. The library provides a linear-scaling implementation; of standard continuum solvation models using a domain-decomposition ansatz; [Cances:2013:054111]_ [Stamm:2016:054101]_.; Currently the conductor-like screening model (COSMO) [Klamt:1993:799]_ [Lipparini:2014:184108]_,; the polarisable continuum model (PCM) [Tomasi:2005:2999]_ [Nottoli:2019:6061]_; and the linearized poisson-boltzmann model (LPB) [Lu:2008:973]_ [Jha:2023:104105]_ are supported.; No additional licence or configuration is required to use ddx with Psi4. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/conda-forge/pyddx/badges/version.svg; :target: https://anaconda.org/conda-forge/pyddx. * .. image:: https://img.shields.io/pypi/v/pyddx; :target: https://pypi.org/project/pyddx. * ddx is available for Linux and macOS in form of the ``pyddx`` package; on conda-forge and on pypi. * To install from conda run ``conda install pyddx -c conda-forge``. * To remove a conda installation, ``conda remove pyddx``. **Source**. * .. image:: https://img.shields.io/github/tag-date/ddsolvation/ddx.svg?maxAge=2592000; :target: https://github.com/ddsolvation/ddx. * If using |PSIfour| built from source and you want ddx installed as well,; enable it as a feature with :makevar:`ENABLE_ddx`,; and let the build system fetch and install it. .. _`sec:usingDDX`:. Using dd-based continum solvation models; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In |PSIfour| two option to enable continuum solvation models; are currently implemented using either the PCMSolver or ddx package.; PCMSolver is based on a boundary-element discretisation [Cances:1998:309]_,; while ddx is based on a domain decomposition approach; [Cances:2013:054111]_ making it linear scaling.; For more details about PCMSolver see the :ref:`section on PCMsolver <sec:pcmsolver>`.",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
Deployability,configurat,configuration,"================. .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. *Module:* :ref:`Keywords <apdx:ddx>`, :ref:`PSI Variables <apdx:ddx_psivar>`. .. image:: https://img.shields.io/badge/home-ddx-informational.svg; :target: https://github.com/ddsolvation/ddX. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://ddsolvation.github.io/ddX/. |PSIfour| contains code to interface to the ddx FORTRAN library developed; by A. Mikhalev *et. al.*. The library provides a linear-scaling implementation; of standard continuum solvation models using a domain-decomposition ansatz; [Cances:2013:054111]_ [Stamm:2016:054101]_.; Currently the conductor-like screening model (COSMO) [Klamt:1993:799]_ [Lipparini:2014:184108]_,; the polarisable continuum model (PCM) [Tomasi:2005:2999]_ [Nottoli:2019:6061]_; and the linearized poisson-boltzmann model (LPB) [Lu:2008:973]_ [Jha:2023:104105]_ are supported.; No additional licence or configuration is required to use ddx with Psi4. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/conda-forge/pyddx/badges/version.svg; :target: https://anaconda.org/conda-forge/pyddx. * .. image:: https://img.shields.io/pypi/v/pyddx; :target: https://pypi.org/project/pyddx. * ddx is available for Linux and macOS in form of the ``pyddx`` package; on conda-forge and on pypi. * To install from conda run ``conda install pyddx -c conda-forge``. * To remove a conda installation, ``conda remove pyddx``. **Source**. * .. image:: https://img.shields.io/github/tag-date/ddsolvation/ddx.svg?maxAge=2592000; :target: https://github.com/ddsolvation/ddx. * If using |PSIfour| built from source and you want ddx installed as well,; enable it as a feature with :makevar:`ENABLE_ddx`,; and let the build system fetch and install it. .. _`sec:usingDDX`:. Using dd-based continum solvation models; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In |PSIfour| two option to enable continuum solvation mode",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
Energy Efficiency,energy,energy,"ddx package.; PCMSolver is based on a boundary-element discretisation [Cances:1998:309]_,; while ddx is based on a domain decomposition approach; [Cances:2013:054111]_ making it linear scaling.; For more details about PCMSolver see the :ref:`section on PCMsolver <sec:pcmsolver>`.; For a concise introduction to the; `theory behind ddx <https://ddsolvation.github.io/ddX/md_docs_theory.html>`_; or further `literature references <https://ddsolvation.github.io/ddX/label_references.html>`_; see the ddx documentation. The usage of ddx-based solvation models is enabled; by specifying |globals__ddx| ``true`` in your input file.; The solvation model itself is selected using the |ddx__ddx_model| parameter.; Additionally the definition of the solvent and solute cavity is required; and further parameters allow to influence details of discretisation,; numerical integration and iterative solvers,; see the next sections for details. .. note:: At present PCM can only be used for energy calculations with SCF; wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. .. warning:: Currently the ddx interface **cannot** exploit molecular point group symmetry. .. warning:: Analytic gradients and Hessians are currently **not available**; with dd-based solvation models. A minimal input for a Hartree--Fock calculation with dd-based PCM would look like; the following: ::. import psi4; nh3 = psi4.geometry(""""""; N -0.0000000001 -0.1040380466 0.0000000000; H -0.9015844116 0.4818470201 -1.5615900098; H -0.9015844116 0.4818470201 1.5615900098; H 1.8031688251 0.4818470204 0.0000000000; symmetry c1; no_reorient; no_com; units bohr; """"""). psi4.set_options({; ""basis"": ""sto-3g"",; ""scf_type"": ""pk"",; ""ddx"": True,; ""ddx_model"": ""pcm"",; ""ddx_solvent"": ""water"",; ""ddx_radii_set"": ""uff"",; }). scf_e = psi4.en",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
Integrability,interface,interface,"the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ddx, COSMO, PCM, continuum solvation. .. _`sec:ddx`:. Interface to ddx by A. Mikhalev, A. Jha, M. Nottoli and M. F. Herbst; ====================================================================. .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. *Module:* :ref:`Keywords <apdx:ddx>`, :ref:`PSI Variables <apdx:ddx_psivar>`. .. image:: https://img.shields.io/badge/home-ddx-informational.svg; :target: https://github.com/ddsolvation/ddX. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://ddsolvation.github.io/ddX/. |PSIfour| contains code to interface to the ddx FORTRAN library developed; by A. Mikhalev *et. al.*. The library provides a linear-scaling implementation; of standard continuum solvation models using a domain-decomposition ansatz; [Cances:2013:054111]_ [Stamm:2016:054101]_.; Currently the conductor-like screening model (COSMO) [Klamt:1993:799]_ [Lipparini:2014:184108]_,; the polarisable continuum model (PCM) [Tomasi:2005:2999]_ [Nottoli:2019:6061]_; and the linearized poisson-boltzmann model (LPB) [Lu:2008:973]_ [Jha:2023:104105]_ are supported.; No additional licence or configuration is required to use ddx with Psi4. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/conda-forge/pyddx/badges/version.svg; :target: https://anaconda.org/conda-forge/pyddx. * .. image:: https://img.shields.io/pypi/v/pyddx; :target: https://pypi.org/project/pyddx. * ddx is available for Linux and macOS in form of the ``pyddx`` package; on conda-forge and on pypi. * To install from conda run ``conda install pyddx -c conda-fo",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
Modifiability,config,configuration,"================. .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. *Module:* :ref:`Keywords <apdx:ddx>`, :ref:`PSI Variables <apdx:ddx_psivar>`. .. image:: https://img.shields.io/badge/home-ddx-informational.svg; :target: https://github.com/ddsolvation/ddX. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://ddsolvation.github.io/ddX/. |PSIfour| contains code to interface to the ddx FORTRAN library developed; by A. Mikhalev *et. al.*. The library provides a linear-scaling implementation; of standard continuum solvation models using a domain-decomposition ansatz; [Cances:2013:054111]_ [Stamm:2016:054101]_.; Currently the conductor-like screening model (COSMO) [Klamt:1993:799]_ [Lipparini:2014:184108]_,; the polarisable continuum model (PCM) [Tomasi:2005:2999]_ [Nottoli:2019:6061]_; and the linearized poisson-boltzmann model (LPB) [Lu:2008:973]_ [Jha:2023:104105]_ are supported.; No additional licence or configuration is required to use ddx with Psi4. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/conda-forge/pyddx/badges/version.svg; :target: https://anaconda.org/conda-forge/pyddx. * .. image:: https://img.shields.io/pypi/v/pyddx; :target: https://pypi.org/project/pyddx. * ddx is available for Linux and macOS in form of the ``pyddx`` package; on conda-forge and on pypi. * To install from conda run ``conda install pyddx -c conda-forge``. * To remove a conda installation, ``conda remove pyddx``. **Source**. * .. image:: https://img.shields.io/github/tag-date/ddsolvation/ddx.svg?maxAge=2592000; :target: https://github.com/ddsolvation/ddx. * If using |PSIfour| built from source and you want ddx installed as well,; enable it as a feature with :makevar:`ENABLE_ddx`,; and let the build system fetch and install it. .. _`sec:usingDDX`:. Using dd-based continum solvation models; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In |PSIfour| two option to enable continuum solvation mode",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
Performance,perform,performed,"silon.rst; .. include:: autodir_options_c/ddx__ddx_solvent.rst; .. include:: autodir_options_c/ddx__ddx_solvent_kappa.rst. Numerical integration and discretisation parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation. |ddx__ddx_solute_radial_points| and |ddx__ddx_solute_spherical_points| influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed. |ddx__ddx_lmax| and |ddx__ddx_n_lebedev| determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. |ddx__ddx_lmax|; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and |ddx__ddx_n_lebedev| determines the; number of points of the Lebedev angular grid used for integration on the spheres.; |ddx__ddx_n_lebedev| should be chosen higher than |ddx__ddx_solute_spherical_points|; and the defaults are usually good. .. include:: autodir_options_c/ddx__ddx_solute_radial_points.rst; .. include:: autodir_options_c/ddx__ddx_solute_spherical_points.rst; .. include:: autodir_options_c/ddx__ddx_lmax.rst; .. include:: autodir_options_c/ddx__ddx_n_lebedev.rst. Iterative solver parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters determine how the forward and adjoint linear systems; of the solvation model are solved. Usually these parameters do not need; to be changed. Occasionally |ddx__ddx_solvation_convergence| might need to be adapted,; e.g. i",MatchSource.DOCS,doc/sphinxman/source/ddx.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst
Availability,avail,available,"form approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a ; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in :ref:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc.*,; with the common name for that CI wavefunction, like ``energy('cisd')`` ; for a CISD single-point energy. The Python driver; recognizes ``cisd``, ``cisdt``, and ``cisdtq``. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a ; CISD computation, and ``energy('cisd')`` by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set |globals__qc_module| = DETCI. . Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ``ci6``. A full; CI can be specified by ``fci``. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; modu",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
Deployability,configurat,configuration,"r more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CI. .. index::; pair: CI; theory. .. _`sec:ci`:. CI: Configuration Interaction; =============================. .. codeauthor:: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; .. sectionauthor:: Daniel G. A. Smith and C. David Sherrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. Configuration interaction (CI) is one of the most general ways to; improve upon Hartree--Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a ""single-reference"" CI based; on reference function :math:`| \Phi_0 \rangle`, we can write the CI expansion as; follows:. .. math:: | \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab} ; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots; :label: CIexpansion. The simplest standard CI method that improves upon Hartree--Fock is a CI; that adds all singly :math:`| \Phi_i^a \rangle` and doubly ; :math:`| \Phi_{ij}^{ab} \rangle`; substituted determinants (CISD) to the reference determinant; :math:`| \Phi_0 \rangle`. The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
Energy Efficiency,adapt,adapted,"r more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CI. .. index::; pair: CI; theory. .. _`sec:ci`:. CI: Configuration Interaction; =============================. .. codeauthor:: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; .. sectionauthor:: Daniel G. A. Smith and C. David Sherrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. Configuration interaction (CI) is one of the most general ways to; improve upon Hartree--Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a ""single-reference"" CI based; on reference function :math:`| \Phi_0 \rangle`, we can write the CI expansion as; follows:. .. math:: | \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab} ; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots; :label: CIexpansion. The simplest standard CI method that improves upon Hartree--Fock is a CI; that adds all singly :math:`| \Phi_i^a \rangle` and doubly ; :math:`| \Phi_{ij}^{ab} \rangle`; substituted determinants (CISD) to the reference determinant; :math:`| \Phi_0 \rangle`. The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
Integrability,interface,interface,"opriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions. For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; ``energy('mp10')`` sets |detci__mpn| to TRUE.; The program uses the Wigner (2n+1) rule by default; (|detci__mpn_wigner| = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. *This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to*; :ref:`Kallay's MRCC <sec:mrcc>` *code.*. The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216]_, or of Olsen [Olsen:2000:7140]_.; Notably, the approach in DETCI also allows arbitrary-order ; *active space* coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by K\ |a_acute|\ llay, to which |PSIfour| can interface (see Section; :ref:`sec:mrcc`); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103]_",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
Modifiability,adapt,adapted,"r more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CI. .. index::; pair: CI; theory. .. _`sec:ci`:. CI: Configuration Interaction; =============================. .. codeauthor:: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; .. sectionauthor:: Daniel G. A. Smith and C. David Sherrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. Configuration interaction (CI) is one of the most general ways to; improve upon Hartree--Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a ""single-reference"" CI based; on reference function :math:`| \Phi_0 \rangle`, we can write the CI expansion as; follows:. .. math:: | \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab} ; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots; :label: CIexpansion. The simplest standard CI method that improves upon Hartree--Fock is a CI; that adds all singly :math:`| \Phi_i^a \rangle` and doubly ; :math:`| \Phi_{ij}^{ab} \rangle`; substituted determinants (CISD) to the reference determinant; :math:`| \Phi_0 \rangle`. The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
Performance,optimiz,optimized,"The simplest standard CI method that improves upon Hartree--Fock is a CI; that adds all singly :math:`| \Phi_i^a \rangle` and doubly ; :math:`| \Phi_{ij}^{ab} \rangle`; substituted determinants (CISD) to the reference determinant; :math:`| \Phi_0 \rangle`. The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results. The CI code in |PSIfour| is described in detail in ; [Sherrill:1999:CI]_. For the reasons stated above, the CI code in; |PSIfour| is not optimized for CISD computations, and it uses data structures; that are particularly inefficient for CISD and may result in the program; running out of memory and crashing for CISD except on very small molecules.; Instead, DETCI was designed to be efficient; in handling more highly correlated CI wavefunctions that can be helpful in more ; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]_. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]_. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI's. A RAS CI selects determinants for the; model space as those which have no more than :math:`n` holes in the lowest set; of orbitals (called RAS I) and no more than :math:`m` electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
Safety,avoid,avoided,"nant-based codes like DETCI do; not necessarily enforce the correct spin :math:`S`. For example, diagonalizing the; Hamiltonian in a space spanned by determinants with :math:`M_s = 0` can yield ; both singlet and triplet solutions, because triplets (:math:`S = 1`) also have an; :math:`M_s = 0` component. (Indeed, even higher spin multiplicities may be encountered; if the excitation level is high enough). For closed-shell references with :math:`M_s = 0`,; the program will assume by default that a singlet (:math:`S = 0`) computation is desired,; and will utilize alpha/beta interchange symmetries to speed up the computation ; (this is controlled by the advanced keyword |detci__ms0|, which defaults to ``TRUE``).; Thus, if a user requests multiple roots (|detci__num_roots| = :math:`n`), the program; will typically return singlets and not triplets. However, if enough roots are sought,; higher-multiplicities may enter in. This can be avoided by ensuring that all the guess; vectors have the correct spin multiplicity, by setting |detci__calc_s_squared| to ``TRUE``).; It is also possible to ask DETCI to compute roots of higher multiplicities. The desired value of spin may be; provided by setting |detci__S| = :math:`S`. Typically, it would be a good idea in this context to also set; |detci__calc_s_squared| to ``TRUE`` to ensure the guess roots have the right spin. However, be advised that; seeking these higher roots may cause convergence problems, because roundoff may allow the lower-lying; roots of lower multiplicities to re-enter the computation (reducing convergence criteria may help). For open-shell systems, the |detci__ms0| keyword is typically not relevant, and there; is no control over spin multiplicities of higher roots unless|detci__calc_s_squared| is; used. .. index:: ; pair: CI; arbitrary-order perturbation theory. .. _`sec:arbpt`:. Arbitrary Order Perturbation Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The DETCI module is capable of computing energies for arbitrar",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
Testability,test,testing," order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. *This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to*; :ref:`Kallay's MRCC <sec:mrcc>` *code.*. The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216]_, or of Olsen [Olsen:2000:7140]_.; Notably, the approach in DETCI also allows arbitrary-order ; *active space* coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by K\ |a_acute|\ llay, to which |PSIfour| can interface (see Section; :ref:`sec:mrcc`); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103]_. To perform arbitrary-order coupled-cluster, set the DETCI; option |detci__cc| to TRUE, and set; |detci__cc_ex_level| (note: not |detci__ex_level|); to the desired coupled-cluster excitation level, and invoke ; ``energy('detci')``. Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix :ref:`apdx:detci`.; ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
Usability,simpl,simplest,"iguration interaction (CI) is one of the most general ways to; improve upon Hartree--Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a ""single-reference"" CI based; on reference function :math:`| \Phi_0 \rangle`, we can write the CI expansion as; follows:. .. math:: | \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab} ; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots; :label: CIexpansion. The simplest standard CI method that improves upon Hartree--Fock is a CI; that adds all singly :math:`| \Phi_i^a \rangle` and doubly ; :math:`| \Phi_{ij}^{ab} \rangle`; substituted determinants (CISD) to the reference determinant; :math:`| \Phi_0 \rangle`. The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results. The CI code in |PSIfour| is described in detail in ; [Sherrill:1999:CI]_. For the reasons stated above, the CI code in; |PSIfour| is not optimized for CISD computations, and it uses data structures; that are particularly inefficient for CISD and may result in the program; running out of memory and crashing for CISD except on very small ",MatchSource.DOCS,doc/sphinxman/source/detci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst
Availability,robust,robust,"--------. Second-order |MollerPlesset| Perturbation Theory (MP2) occupies a unique role; in quantum chemistry due to its small-prefactor :math:`{\cal O}(N^5)` treatment of; dynamic electron correlation. This unusually cheap; *ab initio* treatment of electron correlation may be made even more; efficient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic :math:`ov` products in the; bra- and ket- of the :math:`(ov|ov)`\ -type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in |PSIfour| for all single; reference types available in the SCF module.; MP2 defaults in |PSIfour| to the density-fitted code. The support for MP2 by the DFMP2 module in |Psifour| is detailed in; Table :ref:`DFMP2 Capabilities <table:dfmp2_stdsuite>`. Even without; ``set qc_module dfmp2``, methods will default to this module, but; alternate implementations and use of |globals__mp2_type| for performing; a MP2 with conventional integrals can be seen at :ref:`other modules; <table:managedmethods>`. .. include:: autodoc_capabilities_dfmp2.rst. An example utilization of the code is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }; ; set basis cc-pvdz; set scf_type df; set freeze_core True; ; en",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
Deployability,integrat,integration,"s is at the second order:. .. math:: E_{\mathrm{MBPT}}^{(2)} = - \frac{1}{4} \frac{\langle ij|ab\rangle^2}{\epsilon_a + ; \epsilon_b - \epsilon_i - \epsilon_j}. In the DFMP2 module, the first-order contribution, or ""singles energy"" is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements :math:`f_{ia}` are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF |scf__e_convergence| and/or |scf__d_convergence| keywords; and try again. . To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme's Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist's integrals over spatial orbitals). .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia|jb)(ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{[(ia|jb)-(ib|ja)](ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia^\alpha|jb^\beta)(ia^\alpha|jb^\beta)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{1}{2}\frac{[(ia^\alpha|jb^\alpha)-(ib^\alpha|ja^\alpha)](ia^\alpha|jb",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
Energy Efficiency,efficient,efficient,"re Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: DF-MP2; pair: MP2; density-fitting. .. _`sec:dfmp2`:. DF-MP2: Density-Fitted 2nd-Order |MollerPlesset| Perturbation Theory; ====================================================================. .. codeauthor:: Robert M. Parrish; .. sectionauthor:: Robert M. Parrish. *Module:* :ref:`Keywords <apdx:dfmp2>`, :ref:`PSI Variables <apdx:dfmp2_psivar>`, :source:`DFMP2 <psi4/src/psi4/dfmp2>`. Introduction; ------------. Second-order |MollerPlesset| Perturbation Theory (MP2) occupies a unique role; in quantum chemistry due to its small-prefactor :math:`{\cal O}(N^5)` treatment of; dynamic electron correlation. This unusually cheap; *ab initio* treatment of electron correlation may be made even more; efficient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic :math:`ov` products in the; bra- and ket- of the :math:`(ov|ov)`\ -type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in |PSIfour| for all single; reference types available in the SCF module.; MP2 defaults in |PSIfour| to the density-fitte",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
Integrability,integrat,integration,"s is at the second order:. .. math:: E_{\mathrm{MBPT}}^{(2)} = - \frac{1}{4} \frac{\langle ij|ab\rangle^2}{\epsilon_a + ; \epsilon_b - \epsilon_i - \epsilon_j}. In the DFMP2 module, the first-order contribution, or ""singles energy"" is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements :math:`f_{ia}` are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF |scf__e_convergence| and/or |scf__d_convergence| keywords; and try again. . To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme's Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist's integrals over spatial orbitals). .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia|jb)(ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{[(ia|jb)-(ib|ja)](ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia^\alpha|jb^\beta)(ia^\alpha|jb^\beta)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{1}{2}\frac{[(ia^\alpha|jb^\alpha)-(ib^\alpha|ja^\alpha)](ia^\alpha|jb",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
Modifiability,variab,variable,"pe RI or MP2FIT auxiliary; basis sets, *not* the -JKFIT basis sets. The automatic basis selector; should work fine for most all bases (exceptions are less common elements; at higher than quadruple-zeta). Generally, it is always better to specify; only the orbital basis set and let the auxiliary bases be chosen; automatically. If you want to specify manually, use the; |dfmp2__df_basis_mp2| keyword. * DFMP2 likes memory. At a minimum, :math:`2Q^2` doubles are required,; where :math:`Q` is the size of the auxiliary basis set. However, there is; one disk transpose of the :math:`(Q|ov)` tensor in the RHF-MP2 algorithm; [two for UHF-MP2 and ROHF-MBPT(2)], so more memory will reduce seek times.; If you notice DFMP2 using more memory than allowed, it is possible that; the threaded three-index ERI computers are using too much overhead memory.; Set the |dfmp2__DF_ints_num_threads| to a smaller number to prevent this; in this section (does not affect threaded efficiency in the rest of the; code). * DFMP2 likes disk. At a minimum, :math:`2Qov` doubles are required for; RHF-MP2, and :math:`4Qov` doubles are required for UHF-MP2. * DFMP2 likes threads. Some of the formation of the :math:`(Q|ov)` tensor; relies on threaded BLAS (such as MKL) for efficiency. The main; :math:`{\cal O}(N^5)` step is done via small/medium-sized DGEMMs inside of; OpenMP, so make sure to set the :envvar:`OMP_NESTED` environment variable; to ``FALSE`` to prevent thread thrash (or just as well, do not define; :envvar:`OMP_NESTED` at all). * Freezing core is good for both efficiency and correctness purposes.; Freezing virtuals is not recommended. The DFMP2 module will remind you how; many frozen/active orbitals it is using in a section just below the title. * ROHF-MBPT(2) may be preferred to UHF-MP2, as the latter can suffer from; severe spin contamination in some cases. * MP2 is not suitable for systems with multireference character. The; orbital energies will come together and an explosion will occur. . ",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
Performance,perform,performing,"he MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in |PSIfour| for all single; reference types available in the SCF module.; MP2 defaults in |PSIfour| to the density-fitted code. The support for MP2 by the DFMP2 module in |Psifour| is detailed in; Table :ref:`DFMP2 Capabilities <table:dfmp2_stdsuite>`. Even without; ``set qc_module dfmp2``, methods will default to this module, but; alternate implementations and use of |globals__mp2_type| for performing; a MP2 with conventional integrals can be seen at :ref:`other modules; <table:managedmethods>`. .. include:: autodoc_capabilities_dfmp2.rst. An example utilization of the code is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }; ; set basis cc-pvdz; set scf_type df; set freeze_core True; ; energy('mp2'). The ``energy('mp2')`` call to :py:func:`~psi4.driver.energy` executes; the predefined DF-MP2 procedure, first calling; the SCF module with a default RHF reference and DF algorithm for the; two-electron integrals. When the orbitals are converged, the DF-MP2 module is; launched, which forms the density-fitted :math:`(Q|ov)` integrals and then builds the; full :math:`(ov|ov)` tensor in blocks, evaluating the contributions to the MP2 energy; as it goes. A RHF-MP2 wavefunction is selected automatically due to the RHF; reference. In this example, we freeze the core, both for efficiency and; because split-valence bases like cc-pVDZ do not contain core correl",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
Usability,simpl,simplification,"s is at the second order:. .. math:: E_{\mathrm{MBPT}}^{(2)} = - \frac{1}{4} \frac{\langle ij|ab\rangle^2}{\epsilon_a + ; \epsilon_b - \epsilon_i - \epsilon_j}. In the DFMP2 module, the first-order contribution, or ""singles energy"" is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements :math:`f_{ia}` are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF |scf__e_convergence| and/or |scf__d_convergence| keywords; and try again. . To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme's Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist's integrals over spatial orbitals). .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia|jb)(ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{[(ia|jb)-(ib|ja)](ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia^\alpha|jb^\beta)(ia^\alpha|jb^\beta)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{1}{2}\frac{[(ia^\alpha|jb^\alpha)-(ib^\alpha|ja^\alpha)](ia^\alpha|jb",MatchSource.DOCS,doc/sphinxman/source/dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst
Availability,failure,failures,"nalized to form the Kohn--Sham orbitals in the same manner as in; Hartree--Fock. In practice the local functional kernel :math:`f_{\mathrm{xc}}` and its required; partial derivatives are exceedingly complex and are not analytically; integrable. In this case, atom-centered numerical quadratures are used to; evaluate the Kohn--Sham potentials and energies to a high degree of accuracy. The; evaluation of these numerical integrals can be made to be linear scaling with a; reasonable amount of cleverness (mostly related to the fact that the basis; functions decay exponentially), meaning that the Coulomb and diagonalization; steps become rate limiting. This enormous potential speed gain over Hartree--Fock; with potentially exact treatment of electron correlation for ""free"" was one of; the primary motivations for KS-DFT's adoption by chemists in the late 1980s and; early 1990s. Unfortunately, local KS-DFT exhibits several spectacular failures, most of which; stem from the exponential decay of the local Kohn--Sham potential, which cannot; encapsulate long-range information in the exchange and correlation holes. In the; exchange hole, this manifests as the problem of Many-Electron Self-Interaction; Error (MSIE), which presents as spurious low-lying charge transfer states in; excited-state calculations, eventual metallic breakdown in extended insulators,; poor thermochemistry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions. Generalized Kohn--Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as ""implicit"" density; functionals, as the orbitals are themselves functionals of the Kohn",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
Deployability,update,updated,"ee Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: DFT; pair: DFT; theory. .. _`sec:dft`:. DFT: Density Functional Theory; ==============================. .. codeauthor:: Robert M. Parrish, Justin M. Turney, and Daniel G. A. Smith; .. sectionauthor:: Robert M. Parrish. *Module:* :ref:`Keywords <apdx:scfdft>`, :ref:`PSI Variables <apdx:scf_psivar>`, :source:`LIBFUNCTIONAL <psi4/src/psi4/libfunctional>`, :source:`LIBFOCK <psi4/src/psi4/libfock>`, :source:`LIBSCF_SOLVER <psi4/src/psi4/libscf_solver>`. Both density functional theory and Hartree--Fock theory are controlled; through the SCF module, and the :ref:`SCF Introduction <sec:scfintro>`; section is also relevant here. .. note:: Starting version 1.5, the |scf__wcombine| option is temporarily disabled. .. note:: Starting version 1.4 (tag v1.4a1 in the development repository), |PSIfour| uses an updated and extended (to 104 elements) set; of Bragg-Slater radii. This leads to minimal deviations in absolute energies (1E-06 au) and; relative energies (below 0.002 kcal/mol for S22), depending also on the applied grid, compared; to older versions. We advise not to mix absolute energies absolute energies from before and after this change for the; calculation of relative energies. .. note:: After May 2017 (anytime after the v1.1 release), |PSIfour|; switched from hand- (+Matlab) coded functionals to Libxc. Thus; many DFT results will be slightly different. Functionals more than; slightly different are B97-D, wB97X (note, *not* wB97X-D), SOGGA,; DFDL, and M05. Theory; ~~~~~~. Generalized Kohn--Sham Density Functional Theory (KS-DFT) [Kohn:1965:A1133]_ [Parr:1989]_ is one of the primary; workhorses of modern computational chemistry due to its phenomenal accuracy/cost; ratio. Pure Kohn--Sham DFT is built on the Hohenberg--Kohn theorems [Hohenberg:1964:136]_ which states: A) the energy is a un",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
Energy Efficiency,energy,energy,"lute energies (1E-06 au) and; relative energies (below 0.002 kcal/mol for S22), depending also on the applied grid, compared; to older versions. We advise not to mix absolute energies absolute energies from before and after this change for the; calculation of relative energies. .. note:: After May 2017 (anytime after the v1.1 release), |PSIfour|; switched from hand- (+Matlab) coded functionals to Libxc. Thus; many DFT results will be slightly different. Functionals more than; slightly different are B97-D, wB97X (note, *not* wB97X-D), SOGGA,; DFDL, and M05. Theory; ~~~~~~. Generalized Kohn--Sham Density Functional Theory (KS-DFT) [Kohn:1965:A1133]_ [Parr:1989]_ is one of the primary; workhorses of modern computational chemistry due to its phenomenal accuracy/cost; ratio. Pure Kohn--Sham DFT is built on the Hohenberg--Kohn theorems [Hohenberg:1964:136]_ which states: A) the energy is a universal; functional of the one-particle electronic density and B) there exists a set of; noninteracting quasiparticles with the same density as the true set of; electrons, with the quasiparticle states determined as eigenvectors of an; effective one-body potential encapsulating the true :math:`N`\ -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for the; treatment of the troublesome kinetic energy term via the implicit one-body; Kohn--Sham orbitals. KS-DFT borrows much of the machinery of Hartree--Fock, as is; evident by looking at the energy expression,. .. math::. E_{\mathrm{KS}}; &= \sum_{i} \langle i | \hat h | i \rangle; + \frac 1 2 \sum_{i,j} [ii|jj] + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta] \\; &= D_{\mu\nu}^{\mathrm{T}}\left(T_{\mu\nu} +; V_{\mu\nu}\right) + \frac{1}{2} D_{\mu\nu}^{\mathrm{T}}; D_{\lambda\sigma}^{\mathrm{T}} (\mu\nu|\lambda\sigma) + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta]. Here, :math:`T` is the noninteracting quasiparticle kinetic energy operat",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
Integrability,depend,depending,"FT; theory. .. _`sec:dft`:. DFT: Density Functional Theory; ==============================. .. codeauthor:: Robert M. Parrish, Justin M. Turney, and Daniel G. A. Smith; .. sectionauthor:: Robert M. Parrish. *Module:* :ref:`Keywords <apdx:scfdft>`, :ref:`PSI Variables <apdx:scf_psivar>`, :source:`LIBFUNCTIONAL <psi4/src/psi4/libfunctional>`, :source:`LIBFOCK <psi4/src/psi4/libfock>`, :source:`LIBSCF_SOLVER <psi4/src/psi4/libscf_solver>`. Both density functional theory and Hartree--Fock theory are controlled; through the SCF module, and the :ref:`SCF Introduction <sec:scfintro>`; section is also relevant here. .. note:: Starting version 1.5, the |scf__wcombine| option is temporarily disabled. .. note:: Starting version 1.4 (tag v1.4a1 in the development repository), |PSIfour| uses an updated and extended (to 104 elements) set; of Bragg-Slater radii. This leads to minimal deviations in absolute energies (1E-06 au) and; relative energies (below 0.002 kcal/mol for S22), depending also on the applied grid, compared; to older versions. We advise not to mix absolute energies absolute energies from before and after this change for the; calculation of relative energies. .. note:: After May 2017 (anytime after the v1.1 release), |PSIfour|; switched from hand- (+Matlab) coded functionals to Libxc. Thus; many DFT results will be slightly different. Functionals more than; slightly different are B97-D, wB97X (note, *not* wB97X-D), SOGGA,; DFDL, and M05. Theory; ~~~~~~. Generalized Kohn--Sham Density Functional Theory (KS-DFT) [Kohn:1965:A1133]_ [Parr:1989]_ is one of the primary; workhorses of modern computational chemistry due to its phenomenal accuracy/cost; ratio. Pure Kohn--Sham DFT is built on the Hohenberg--Kohn theorems [Hohenberg:1964:136]_ which states: A) the energy is a universal; functional of the one-particle electronic density and B) there exists a set of; noninteracting quasiparticles with the same density as the true set of; electrons, with the quasiparticle states ",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
Modifiability,extend,extended,"ee Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: DFT; pair: DFT; theory. .. _`sec:dft`:. DFT: Density Functional Theory; ==============================. .. codeauthor:: Robert M. Parrish, Justin M. Turney, and Daniel G. A. Smith; .. sectionauthor:: Robert M. Parrish. *Module:* :ref:`Keywords <apdx:scfdft>`, :ref:`PSI Variables <apdx:scf_psivar>`, :source:`LIBFUNCTIONAL <psi4/src/psi4/libfunctional>`, :source:`LIBFOCK <psi4/src/psi4/libfock>`, :source:`LIBSCF_SOLVER <psi4/src/psi4/libscf_solver>`. Both density functional theory and Hartree--Fock theory are controlled; through the SCF module, and the :ref:`SCF Introduction <sec:scfintro>`; section is also relevant here. .. note:: Starting version 1.5, the |scf__wcombine| option is temporarily disabled. .. note:: Starting version 1.4 (tag v1.4a1 in the development repository), |PSIfour| uses an updated and extended (to 104 elements) set; of Bragg-Slater radii. This leads to minimal deviations in absolute energies (1E-06 au) and; relative energies (below 0.002 kcal/mol for S22), depending also on the applied grid, compared; to older versions. We advise not to mix absolute energies absolute energies from before and after this change for the; calculation of relative energies. .. note:: After May 2017 (anytime after the v1.1 release), |PSIfour|; switched from hand- (+Matlab) coded functionals to Libxc. Thus; many DFT results will be slightly different. Functionals more than; slightly different are B97-D, wB97X (note, *not* wB97X-D), SOGGA,; DFDL, and M05. Theory; ~~~~~~. Generalized Kohn--Sham Density Functional Theory (KS-DFT) [Kohn:1965:A1133]_ [Parr:1989]_ is one of the primary; workhorses of modern computational chemistry due to its phenomenal accuracy/cost; ratio. Pure Kohn--Sham DFT is built on the Hohenberg--Kohn theorems [Hohenberg:1964:136]_ which states: A) the energy is a un",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
Performance,optimiz,optimization,"as the; generic form,. .. math::; E_{\mathrm{xc}} = (1-\alpha) \int_{\mathrm{R}^3}; f_{\mathrm{xc}}; \left(; \rho_{\alpha} (\vec r_1),; \rho_{\beta} (\vec r_1),; \gamma_{\alpha\alpha} (\vec r_1),; \gamma_{\alpha\beta} (\vec r_1),; \gamma_{\beta\beta} (\vec r_1),; \tau_{\alpha} (\vec r_1),; \tau_{\beta} (\vec r_1); ; \omega \right) \ \mathrm{d} ^3 r_1. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} \alpha \iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{1}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} (1-\alpha)\iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{\mathrm{erf}(\omega r_{12})}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. For LRC functionals, the choice of range-separation parameter :math:`\omega` has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of ""gap; fitting"" or ""optimal tuning"" or simply ""tuning."" The most popular tuned-LRC; approach is IP-fitting, in which the :math:`\omega` is varied until the; Koopman's IP (the opposite of the HOMO energy) matches the true IP (the; difference between :math:`N-1`\ -electron and :math:`N`\ -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{tuned-LRC}} (r) = -; \frac{1}{r} + I_{\mathrm{IP}} +; \epsilon_{\mathrm{HOMO}}. Note that LRC functionals with default :math:`\omega` only capture the; :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{LRC}} (r) = -; \frac{1}{r},. hybrid functionals only capture part of the :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
Safety,avoid,avoid,"pan a larger extent in space. The atomic weighting scheme is controlled by the |scf__dft_nuclear_scheme|; option, which may be one of ``TREUTLER``, ``BECKE``, ``STRATMANN``, ``NAIVE``,; or ``SBECKE``. The last is a smoother variant of the BECKE scheme recently introduced ; by Laqua [Laqua:2018:204111]_ that should behave better for weak interactions. Pruning of the quadrature grid is controlled by the |scf__dft_pruning_scheme|; option. The options ``ROBUST`` and ``TREUTLER`` divide the grid into spherical regions; based on the Bragg-Slater radius of each atom and apply different orders to them.; The ``ROBUST`` scheme is a less aggressive variant of the ``TREUTLER`` approach and; suitable for benchmark-level quality (MAD < 0.002 kcal/mol for the S22 with PBE/aug-cc-pVTZ; for pruned versus unpruned grid). Our implementation of the ``TREUTLER`` scheme shows an ; error of 0.02 kcal/mol for the same benchmark. Both also reduce the grid order by 1 for H ; and He atoms and avoid any pruning of heavy atoms (Z >= 36) Other schemes mentioned in ; the keyword documentation (e.g. P_SLATER) are experimental and should be considered expert-only. Once the molecular quadrature grid is built, the points are partitioned into; blocks of points which are spatially close to each other. We use an octree; algorithm for this procedure, which produces a good balance between spatial; compactness of each block (which helps achieve linear scaling due to the; exponential decay of the basis functions), and retaining a large number of; points in each block (which helps keep the FLOP rate up by allowing for a; reasonably large amount of BLAS3/BLAS2 work to form the densities and potentials; in each block). For each block, a united set of significant basis functions is; determined by the cutoff radius of each shell of basis functions. The size of; this cutoff radius (and thereby the accuracy of the density/potential; evaluation) can be varied by setting the |scf__dft_basis_tolerance|, which; defaul",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
Security,access,accessed,"s follows,. * Use DF for the ERI algorithm wherever possible.; * |PSIfour| is a ""tight"" code, meaning we've set the default numerical cutoffs; for integrals, grids, and convergence criteria in such a way that you will often; get many more digits of precision than needed. You may be able to realize; additional speed gains by loosening some of these thresholds. See; :ref:`SCF Convergence <table:conv_scf>` for default convergence criteria.; * Read the literature to determine which functional technology to use. The world; contains far too many papers using B3LYP on noncovalent interactions without a -D. The ""best-practice"" input file for KS-DFT is::. memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('b3lyp'). .. _`sec:dftdictbuilder`:. Advanced Functional Use and Manipulation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. New DFT functionals can be created from scratch from within the input; file and accessed using the ``dft_functional`` keyword argument in the; energy call::. # DFT Custom Functional. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis sto-3g; dft_spherical_points 302; dft_radial_points 99; reference rks; }. pbe0 = {; ""name"": ""my_PBE0"",; ""x_functionals"": {""GGA_X_PBE"": {""alpha"": 0.75}},; ""x_hf"": {""alpha"": 0.25},; ""c_functionals"": {""GGA_C_PBE"": {}}; }. func_call = energy('SCF', dft_functional=pbe0). # as PBE0 is a pre-defined functional, the call above is equivalent to both below:; func_call = energy('SCF', dft_functional=""PBE0""); func_call = energy('PBE0'). Supported keywords include:. - `name`: string, name of the functional. for custom defined functionals used for printing only.; - `xc_functionals`: dict, definition of a complete (X + C) functional based in LibXC name; - `x_functionals`: dict, definition of exchange functionals using LibXC names; - `c_functionals`: dict, definition of correlation functionals using LibXC names; - `x_hf`: dict, param",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
Testability,test,test,"as the; generic form,. .. math::; E_{\mathrm{xc}} = (1-\alpha) \int_{\mathrm{R}^3}; f_{\mathrm{xc}}; \left(; \rho_{\alpha} (\vec r_1),; \rho_{\beta} (\vec r_1),; \gamma_{\alpha\alpha} (\vec r_1),; \gamma_{\alpha\beta} (\vec r_1),; \gamma_{\beta\beta} (\vec r_1),; \tau_{\alpha} (\vec r_1),; \tau_{\beta} (\vec r_1); ; \omega \right) \ \mathrm{d} ^3 r_1. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} \alpha \iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{1}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} (1-\alpha)\iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{\mathrm{erf}(\omega r_{12})}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. For LRC functionals, the choice of range-separation parameter :math:`\omega` has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of ""gap; fitting"" or ""optimal tuning"" or simply ""tuning."" The most popular tuned-LRC; approach is IP-fitting, in which the :math:`\omega` is varied until the; Koopman's IP (the opposite of the HOMO energy) matches the true IP (the; difference between :math:`N-1`\ -electron and :math:`N`\ -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{tuned-LRC}} (r) = -; \frac{1}{r} + I_{\mathrm{IP}} +; \epsilon_{\mathrm{HOMO}}. Note that LRC functionals with default :math:`\omega` only capture the; :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{LRC}} (r) = -; \frac{1}{r},. hybrid functionals only capture part of the :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
Usability,simpl,simply,"some kinetic energy term via the implicit one-body; Kohn--Sham orbitals. KS-DFT borrows much of the machinery of Hartree--Fock, as is; evident by looking at the energy expression,. .. math::. E_{\mathrm{KS}}; &= \sum_{i} \langle i | \hat h | i \rangle; + \frac 1 2 \sum_{i,j} [ii|jj] + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta] \\; &= D_{\mu\nu}^{\mathrm{T}}\left(T_{\mu\nu} +; V_{\mu\nu}\right) + \frac{1}{2} D_{\mu\nu}^{\mathrm{T}}; D_{\lambda\sigma}^{\mathrm{T}} (\mu\nu|\lambda\sigma) + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta]. Here, :math:`T` is the noninteracting quasiparticle kinetic energy operator,; :math:`V` is the nucleus-electron attraction potential, :math:`D^{\mathrm{T}}`; is the total electron density matrix, and :math:`E_{\mathrm{xc}} [\rho_\alpha,; \rho_\beta]` is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence :math:`E_{\mathrm{xc}}` is often referred to; as simply the exchange-correlation functional (exchange *and* correlation, not; just exchange-type correlation). In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; :math:`\rho_\alpha` or :math:`\rho_\beta`\ ,. .. math:: \rho_\sigma (\vec r_1) = D_{\mu\nu}^{\sigma} \phi_{\mu} (\vec r_1); \phi_\nu (\vec r_1). The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; :math:`\gamma_{\alpha\alpha}`, :math:`\gamma_{\alpha\beta}` or; :math:`\gamma_{\beta\beta}` to build an inhomogeneity; parameter. .. math:: \gamma_{\alpha\alpha} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \c",MatchSource.DOCS,doc/sphinxman/source/dft.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst
Availability,avail,available,"ken-center/software/gcp/gcp_v202.tar.gz | classic |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``conda-forge::gcp-correction`` | ``bin/mctc-gcp`` | nyi | preferred | ``gcp_engine=""mctc-gcp""`` | https://github.com/grimme-lab/gcp | mctc |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dftd3/badges/version.svg; :target: https://anaconda.org/psi4/dftd3. * There are two implementations of DFTD3; see :ref:`table:empdispimpl` . The newer; ""s-dftd3"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""s-dftd3"" is supported, though the ""classic"" continues to work for many applications. * DFTD3 is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, DFTD3 has already been installed alongside. * If using the |PSIfour| conda package, the classic dftd3 conda package can; be obtained through ``conda install dftd3 -c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-cente",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
Deployability,install,installer,"-------+----------+; | ``conda-forge::gcp-correction`` | ``bin/mctc-gcp`` | nyi | preferred | ``gcp_engine=""mctc-gcp""`` | https://github.com/grimme-lab/gcp | mctc |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dftd3/badges/version.svg; :target: https://anaconda.org/psi4/dftd3. * There are two implementations of DFTD3; see :ref:`table:empdispimpl` . The newer; ""s-dftd3"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""s-dftd3"" is supported, though the ""classic"" continues to work for many applications. * DFTD3 is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, DFTD3 has already been installed alongside. * If using the |PSIfour| conda package, the classic dftd3 conda package can; be obtained through ``conda install dftd3 -c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack ",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
Energy Efficiency,energy,energy,"ilation, simply adjust its; position in the path environment variables. .. >>> cd dftd3; .. >>> ls; .. dftd3.tar; .. patch_grimme_dftd3.3.0.2; .. >>> tar -xvf dftd3.tar; .. copyc6.f; .. dftd3.f; .. Makefile; .. man.pdf; .. pars.f; .. param; .. >>> patch < patch_grimme_dftd3.3.0.2; .. patching file dftd3.f; .. >>> make; .. making dftd3.o from dftd3.f; .. ifort -O -c dftd3.f -o dftd3.o; .. making copyc6.o from copyc6.f; .. ifort -O -c copyc6.f -o copyc6.o; .. ifort dftd3.o copyc6.o -o ./dftd3; .. >>> ls; .. Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.3.0.2; .. copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory; ~~~~~~. The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515]_ and assiduously developed by Grimme, [Grimme:2004:1463]_; [Grimme:2006:1787]_ [Grimme:2010:154104]_ the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, :math:`E_{disp} = -C_6/R^6; -C_8/R^8 -C_{10}/R^{10}-\cdots`. The DFT-D2 [Grimme:2006:1787]_ variant; takes the explicit form below. Here, dispersion coefficients,; :math:`C_6^{ij}`, obtained from the geometric mean of tabulated elemental; values, are summed over interatomic distances, :math:`R_{ij}`, modulated; by a damping function, :math:`f_{damp}(R_{ij})`, that gradually activates; the dispersion correction (at a rate characterized by :math:`\alpha_6`); over a distance characterized by the sum of the two atomic vdW radii,; :math:`R_{vdW}`, while an overall scaling term, :math:`s_6`, is optimized; to be unique to each :math:`E_{xc}` functional. (:math:`\alpha_6` is; sometimes allowed to vary as well.). .. math:: E_{disp}^{\text{D2}}=-s_6 \sum_{i,j>i}^{N_{at}} \frac{C_6^{ij}}{(R_{ij})^6} f_{damp}(R_{ij}); :label: DFTD2. .. math:: f_{damp}(R_{ij}) = \frac{1}{1 + e^{- \alpha",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
Integrability,interface,interfaces,"11:1456]_. The parameters; fit for individual functionals are now :math:`s_6`, :math:`s_8`,; :math:`a_1`, and :math:`a_2`. .. math:: E_{disp}^{\text{D3BJ}}=-\sum_{n=6,8} s_n \sum_{i,j>i}^{N_{at}} ; \frac{C_n^{ij}}{(R_{ij})^n + (f_{damp})^n}. .. math:: f_{damp} = a_1 \sqrt{\frac{C_8^{ij}}{C_6^{ij}}} + a_2. All parameters characterizing the dispersion correction are taken from; `Grimme's website <https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3>`_; or else from the literature.; With s-dftd3, parameters are also tabulated in the program source. Running DFTD3 or DFTD4; ~~~~~~~~~~~~~~~~~~~~~~. A number of *a posteriori* dispersion corrections are available in; |PSIfour|. While some are computed within |PSIfours| codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 or -D4 corrections and their variants are; available only through the ``DFTD3`` or ``DFTD4`` programs. Once installed, the; ``dftd3``/|PSIfour| and ``dftd4``/|PSIfour| interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant wor",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
Modifiability,variab,variables,"hon``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONPATH`; so QCEngine can detect it. Check if and where found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. .. >>> cd dftd3; .. >>> ls; .. dftd3.tar; .. patch_grimme_dftd3.3.0.2; .. >>> tar -xvf dftd3.tar; .. copyc6.f; .. dftd3.f; .. Makefile; .. man.pdf; .. pars.f; .. param; .. >>> patch < patch_grimme_dftd3.3.0.2; .. patching file dftd3.f; .. >>> make; .. making dftd3.o from dftd3.f; .. ifort -O -c dftd3.f -o dftd3.o; .. making copyc6.o from copyc6.f; .. ifort -O -c copyc6.f -o copyc6.o; .. ifort dftd3.o copyc6.o -o ./dftd3; .. >>> ls; .. Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.3.0.2; .. copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory; ~~~~~~. The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515]_ and assiduously developed by Grimme, [Grimme:2004:1463]_; [Grimme:2006:1787]_ [Grimme:2010:154104]_ the DFT+Dispersion method; appends to the ",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
Performance,optimiz,optimized," .. Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.3.0.2; .. copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory; ~~~~~~. The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515]_ and assiduously developed by Grimme, [Grimme:2004:1463]_; [Grimme:2006:1787]_ [Grimme:2010:154104]_ the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, :math:`E_{disp} = -C_6/R^6; -C_8/R^8 -C_{10}/R^{10}-\cdots`. The DFT-D2 [Grimme:2006:1787]_ variant; takes the explicit form below. Here, dispersion coefficients,; :math:`C_6^{ij}`, obtained from the geometric mean of tabulated elemental; values, are summed over interatomic distances, :math:`R_{ij}`, modulated; by a damping function, :math:`f_{damp}(R_{ij})`, that gradually activates; the dispersion correction (at a rate characterized by :math:`\alpha_6`); over a distance characterized by the sum of the two atomic vdW radii,; :math:`R_{vdW}`, while an overall scaling term, :math:`s_6`, is optimized; to be unique to each :math:`E_{xc}` functional. (:math:`\alpha_6` is; sometimes allowed to vary as well.). .. math:: E_{disp}^{\text{D2}}=-s_6 \sum_{i,j>i}^{N_{at}} \frac{C_6^{ij}}{(R_{ij})^6} f_{damp}(R_{ij}); :label: DFTD2. .. math:: f_{damp}(R_{ij}) = \frac{1}{1 + e^{- \alpha_6 (R_{ij}/R_{vdW} - 1)}}. Grimme recently presented a refined method, DFT-D3, [Grimme:2010:154104]_; which incorporates an additional :math:`R^{-8}` term in the dispersion; series and adjusts the :math:`C_{6}^{ij}` combination formula and damping; function. The individual atomic :math:`C_6^i` are interpolated from; several reference values based upon coordination numbers extracted from; the molecular structure, rather than assigned solely by atomic identity as; in DFT-D2, and thereby incorporate some ",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
Safety,detect,detect,"lready been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONPATH`; so QCEngine can detect it. Check if and where found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. .. >>> cd dftd3; .. >>> ls; .. dftd3.tar; .. patch_grimme_dftd3.3.0.2; .. >>> tar -xvf dftd3.tar; .. copyc6.f; .. dftd3.f; .. Makefile; .. man.pdf; .. pars.f; .. param; .. >>> patch < patch_grimme_dftd3.3.0.2; .. patching file dftd3.f; .. >>> make; .. making dftd3.o from dftd3.f; .. ifort -O -c dftd3.f -o dftd3.o; .. making copyc6.o from copyc6.f; .. ifort -O -c copyc6.f -o copyc6.o; .. ifort dftd3.o copyc6.o -o ./dftd3; .. >>> ls; .. Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.3.0.2; .. copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory; ~~~~~~. The local or semilocal character of conventional density functionals; necessarily leads to neglect o",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
Testability,test,tested,". .. math:: f_{damp} = a_1 \sqrt{\frac{C_8^{ij}}{C_6^{ij}}} + a_2. All parameters characterizing the dispersion correction are taken from; `Grimme's website <https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3>`_; or else from the literature.; With s-dftd3, parameters are also tabulated in the program source. Running DFTD3 or DFTD4; ~~~~~~~~~~~~~~~~~~~~~~. A number of *a posteriori* dispersion corrections are available in; |PSIfour|. While some are computed within |PSIfours| codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 or -D4 corrections and their variants are; available only through the ``DFTD3`` or ``DFTD4`` programs. Once installed, the; ``dftd3``/|PSIfour| and ``dftd4``/|PSIfour| interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3');",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
Usability,simpl,simple-,"====+===========================+==================================================================================+==========+; | D3 | | | | | | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``psi4::dftd3`` | ``bin/dftd3`` | preferred | works | ``engine=""dftd3""`` | https://github.com/loriab/dftd3 | classic |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``conda-forge::dftd3-python`` | ``import dftd3`` | nyi | preferred | ``engine=""s-dftd3""`` | https://github.com/dftd3/simple-dftd3 | s-dftd3 |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | (dep) ``conda-forge::simple-dftd3`` | ``bin/simple-dftd3`` | | | | https://github.com/dftd3/simple-dftd3 | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | D4 | | | | | | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``psi4::dftd4`` | ``bin/dftd4``, ``import dftd4`` | preferred | works | ``engine=""dftd4""`` | https://github.com/dftd4/dftd4 | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+-------------------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/dftd3.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst
Availability,avail,available,"l be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DFTNL; .. _`sec:dftnl`:. DFT-NL; ======. .. codeauthor:: Daniel G. A. Smith and Holger Kruse; .. sectionauthor:: Holger Kruse. Non-local (NL), density based correlation energy from the VV10 kernel can be added; to arbitrary functionals. .. math:: E_{DFT-NL}=E_{DFT}+E_{NL}. For pre-defined functionals (see Functional overview in :ref:`this Table <table:dft_all>` ) it is sufficient to add `-NL` to; the functional name::. energy('b3lyp-nl'). Modification of the parameters `b` and `C` is done setting |scf__dft_vv10_b| and |scf__dft_vv10_c|. The `C` is usually left unchanged and the originally proposed; value of `C=0.0093` is used. Adding |scf__dft_vv10_b| to any functional activates the calculation of the VV10 kernel. A BLYP-NL calculation can be set as follows::. set DFT_VV10_B 4.0; energy('blyp'). The default `C` parameter will be used. Similar to |scf__dft_dispersion_parameters| the tuple |scf__nl_dispersion_parameters| can used::. set NL_DISPERSION_PARAMTERS [4.0]; energy('blyp'). which is equivalent to the example above. Further examples can be found in the respective :source:`regression test <tests/dft-vv10/input.dat>`. post-SCF time savings; ~~~~~~~~~~~~~~~~~~~~~. Substantial time-savings for energy calculations are available by evaluating the VV10 kernel only at the converged electron density, i.e. in a post-SCF fashion.; The deviations from the fully self-consistent treatment are usually minimal. To activate this set |scf__dft_vv10_postscf| to `true`.; ",MatchSource.DOCS,doc/sphinxman/source/dftnl.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst
Energy Efficiency,energy,energy,"les.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DFTNL; .. _`sec:dftnl`:. DFT-NL; ======. .. codeauthor:: Daniel G. A. Smith and Holger Kruse; .. sectionauthor:: Holger Kruse. Non-local (NL), density based correlation energy from the VV10 kernel can be added; to arbitrary functionals. .. math:: E_{DFT-NL}=E_{DFT}+E_{NL}. For pre-defined functionals (see Functional overview in :ref:`this Table <table:dft_all>` ) it is sufficient to add `-NL` to; the functional name::. energy('b3lyp-nl'). Modification of the parameters `b` and `C` is done setting |scf__dft_vv10_b| and |scf__dft_vv10_c|. The `C` is usually left unchanged and the originally proposed; value of `C=0.0093` is used. Adding |scf__dft_vv10_b| to any functional activates the calculation of the VV10 kernel. A BLYP-NL calculation can be set as follows::. set DFT_VV10_B 4.0; energy('blyp'). The default `C` parameter will be used. Similar to |scf__dft_dispersion_parameters| the tuple |scf__nl_dispersion_parameters| can used::. set NL_DISPERSION_PARAMTERS [4.0]; energy('blyp'). which is equivalent to the example above. Further examples can be found in the respective :source:`regression test <tests/dft-vv10/input.dat>`. post-SCF time savings; ~~~~~~~~~~~~~~~~~~",MatchSource.DOCS,doc/sphinxman/source/dftnl.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst
Testability,test,test,"l be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DFTNL; .. _`sec:dftnl`:. DFT-NL; ======. .. codeauthor:: Daniel G. A. Smith and Holger Kruse; .. sectionauthor:: Holger Kruse. Non-local (NL), density based correlation energy from the VV10 kernel can be added; to arbitrary functionals. .. math:: E_{DFT-NL}=E_{DFT}+E_{NL}. For pre-defined functionals (see Functional overview in :ref:`this Table <table:dft_all>` ) it is sufficient to add `-NL` to; the functional name::. energy('b3lyp-nl'). Modification of the parameters `b` and `C` is done setting |scf__dft_vv10_b| and |scf__dft_vv10_c|. The `C` is usually left unchanged and the originally proposed; value of `C=0.0093` is used. Adding |scf__dft_vv10_b| to any functional activates the calculation of the VV10 kernel. A BLYP-NL calculation can be set as follows::. set DFT_VV10_B 4.0; energy('blyp'). The default `C` parameter will be used. Similar to |scf__dft_dispersion_parameters| the tuple |scf__nl_dispersion_parameters| can used::. set NL_DISPERSION_PARAMTERS [4.0]; energy('blyp'). which is equivalent to the example above. Further examples can be found in the respective :source:`regression test <tests/dft-vv10/input.dat>`. post-SCF time savings; ~~~~~~~~~~~~~~~~~~~~~. Substantial time-savings for energy calculations are available by evaluating the VV10 kernel only at the converged electron density, i.e. in a post-SCF fashion.; The deviations from the fully self-consistent treatment are usually minimal. To activate this set |scf__dft_vv10_postscf| to `true`.; ",MatchSource.DOCS,doc/sphinxman/source/dftnl.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst
Availability,avail,available,"4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: DFT; available functionals; .. _`apdx:dftFunctionals`:. DFT Functionals; ===============. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:; :glob:. autodoc_dft_*. .. _`table:dft_all`:. All Available; -------------. .. include:: autodoc_dft_all.rst. .. _`table:dft_gga`:. GGA; ---. .. include:: autodoc_dft_gga.rst. .. _`table:dft_meta`:. Meta; ----. .. include:: autodoc_dft_meta.rst. .. _`table:dft_lrc`:. Long-Range Corrected; --------------------. .. include:: autodoc_dft_lrc.rst. .. _`table:dft_hybrid`:. Hybrid; ------. .. include:: autodoc_dft_hybrid.rst. .. _`table:dft_dhybrid`:. Double-Hybrid; -------------. .. include:: autodoc_dft_dhybrid.rst. .. _`table:dft_scsdhybrid`:. SCS Double-Hybrid; -----------------. .. comment .. include:: autodoc_dft_scsdhybrid.rst # commented until populated again to appease Sphinx. .. _`table:dft_disp`:. Dispersion-Corrected; --------------------. .. include:: autodoc_df",MatchSource.DOCS,doc/sphinxman/source/dft_byfunctional.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft_byfunctional.rst
Availability,avail,available,"NU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DKH; .. _`sec:DKH`:. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; ======================================================. .. codeauthor:: Justin M. Turney; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <sec:dkhkeywords>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-dkh-5077AB.svg; :target: https://github.com/psi4/dkh. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www.reiher.ethz.ch/software/dkh-x2c.html. .. _`sec:dkhinstall`:. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dkh/badges/version.svg; :target: https://anaconda.org/psi4/dkh. * DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, dkh has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; dkh can be obtained through ``conda install dkh -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. dkh from conda without thinking, consult. * To remove a conda installation, ``conda remove dkh``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/dkh.svg?maxAge=2592000; :target: https://github.com/psi4/dkh. * If using |PSIfour| built from source and you want dkh built from; from source also,; enable it as a feature with :makevar:`ENABLE_dkh`,; and let the build system fetch and build it and activate depend",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
Deployability,install,installed,"are Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DKH; .. _`sec:DKH`:. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; ======================================================. .. codeauthor:: Justin M. Turney; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <sec:dkhkeywords>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-dkh-5077AB.svg; :target: https://github.com/psi4/dkh. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www.reiher.ethz.ch/software/dkh-x2c.html. .. _`sec:dkhinstall`:. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dkh/badges/version.svg; :target: https://anaconda.org/psi4/dkh. * DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, dkh has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; dkh can be obtained through ``conda install dkh -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. dkh from conda without thinking, consult. * To remove a conda installation, ``conda remove dkh``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/dkh.svg?maxAge=2592000; :target: https://github.com/psi4/dkh. * If using |PSIfour| built from source and you want dkh built from; from source also,; enable it as a feature with :makevar:`ENABLE_dkh`,; and let the build system fetch and build it and activate dependent code. .. _`sec:dkhinput`:. Input; ~~~~~. For all electron calculations one can use ",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
Energy Efficiency,energy,energy,".; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. dkh from conda without thinking, consult. * To remove a conda installation, ``conda remove dkh``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/dkh.svg?maxAge=2592000; :target: https://github.com/psi4/dkh. * If using |PSIfour| built from source and you want dkh built from; from source also,; enable it as a feature with :makevar:`ENABLE_dkh`,; and let the build system fetch and build it and activate dependent code. .. _`sec:dkhinput`:. Input; ~~~~~. For all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects. Minimal input for DKH single-point computation looks like this::. molecule {; Mg; }. set basis aug-cc-pvdz-dk; set relativistic dkh. energy('scf'). By default a 2nd-order DKH calculation is performed. To change the default; order use the |globals__dkh_order| option. The version of the code found in; |Psifour| is capable of up to 4th-order DKH calculations. .. _`sec:dkhkeywords`:. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__relativistic.rst; .. include:: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream D",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
Integrability,depend,dependent,"Justin M. Turney; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <sec:dkhkeywords>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-dkh-5077AB.svg; :target: https://github.com/psi4/dkh. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www.reiher.ethz.ch/software/dkh-x2c.html. .. _`sec:dkhinstall`:. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dkh/badges/version.svg; :target: https://anaconda.org/psi4/dkh. * DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, dkh has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; dkh can be obtained through ``conda install dkh -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. dkh from conda without thinking, consult. * To remove a conda installation, ``conda remove dkh``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/dkh.svg?maxAge=2592000; :target: https://github.com/psi4/dkh. * If using |PSIfour| built from source and you want dkh built from; from source also,; enable it as a feature with :makevar:`ENABLE_dkh`,; and let the build system fetch and build it and activate dependent code. .. _`sec:dkhinput`:. Input; ~~~~~. For all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects. Minimal input for DKH single-point computation looks like this::. molecule {; Mg; }. set basis aug-cc-pvdz-dk; set relativistic dkh. energy('scf'). By default a 2nd-order DKH calculation is performed. To change the default; order",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
Modifiability,config,configure,"or all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects. Minimal input for DKH single-point computation looks like this::. molecule {; Mg; }. set basis aug-cc-pvdz-dk; set relativistic dkh. energy('scf'). By default a 2nd-order DKH calculation is performed. To change the default; order use the |globals__dkh_order| option. The version of the code found in; |Psifour| is capable of up to 4th-order DKH calculations. .. _`sec:dkhkeywords`:. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__relativistic.rst; .. include:: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream Dependencies |w---w| dkh |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_dkh` |w---w| CMake variable toggling whether Psi4 builds with dkh; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing ``include/DKH/DKH_MANGLE.h``; * :makevar:`dkh_DIR` |w---w| CMake variable to specify where pre-built dkh can be found. Set to installation directory containing ``share/cmake/dkh/dkhConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_dkh` |w---w| CMake variable to force internal build of dkh instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_dkh` |w---w| CMake variable to force detecting pre-",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
Performance,perform,performed,"h :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. dkh from conda without thinking, consult. * To remove a conda installation, ``conda remove dkh``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/dkh.svg?maxAge=2592000; :target: https://github.com/psi4/dkh. * If using |PSIfour| built from source and you want dkh built from; from source also,; enable it as a feature with :makevar:`ENABLE_dkh`,; and let the build system fetch and build it and activate dependent code. .. _`sec:dkhinput`:. Input; ~~~~~. For all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects. Minimal input for DKH single-point computation looks like this::. molecule {; Mg; }. set basis aug-cc-pvdz-dk; set relativistic dkh. energy('scf'). By default a 2nd-order DKH calculation is performed. To change the default; order use the |globals__dkh_order| option. The version of the code found in; |Psifour| is capable of up to 4th-order DKH calculations. .. _`sec:dkhkeywords`:. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__relativistic.rst; .. include:: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream Dependencies |w---w| dkh |dr| Fortr",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
Safety,detect,detect,"Justin M. Turney; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <sec:dkhkeywords>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-dkh-5077AB.svg; :target: https://github.com/psi4/dkh. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www.reiher.ethz.ch/software/dkh-x2c.html. .. _`sec:dkhinstall`:. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dkh/badges/version.svg; :target: https://anaconda.org/psi4/dkh. * DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, dkh has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; dkh can be obtained through ``conda install dkh -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. dkh from conda without thinking, consult. * To remove a conda installation, ``conda remove dkh``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/dkh.svg?maxAge=2592000; :target: https://github.com/psi4/dkh. * If using |PSIfour| built from source and you want dkh built from; from source also,; enable it as a feature with :makevar:`ENABLE_dkh`,; and let the build system fetch and build it and activate dependent code. .. _`sec:dkhinput`:. Input; ~~~~~. For all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects. Minimal input for DKH single-point computation looks like this::. molecule {; Mg; }. set basis aug-cc-pvdz-dk; set relativistic dkh. energy('scf'). By default a 2nd-order DKH calculation is performed. To change the default; order",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
Testability,test,testSuitedkh,"s free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DKH; .. _`sec:DKH`:. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; ======================================================. .. codeauthor:: Justin M. Turney; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <sec:dkhkeywords>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-dkh-5077AB.svg; :target: https://github.com/psi4/dkh. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www.reiher.ethz.ch/software/dkh-x2c.html. .. _`sec:dkhinstall`:. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dkh/badges/version.svg; :target: https://anaconda.org/psi4/dkh. * DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, dkh has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; dkh can be obtained through ``conda install dkh -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * ",MatchSource.DOCS,doc/sphinxman/source/dkh.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst
Availability,error,errors,"onauthor:: Zach Glick. *Module:* :ref:`Keywords <apdx:dlpno>`, :ref:`PSI Variables <apdx:dlpno_psivar>`, :source:`DLPNOMP2 <psi4/src/psi4/dlpno>`. Introduction; ------------. The steep polynomial scaling (in both time and memory) of post-HF dynamic; correlation methods prohibits calculations on large systems, even for efficient; codes like |PSIfours| :ref:`DF-MP2 <sec:dfmp2>`. This poor scaling is in part; due to the use of canonical HF orbitals, which are entirely delocalized across; the molecule. Canonical orbitals are commonly used because of mathematical; convenience. Another possible choice is localized orbitals. Any two orbitals; localized to separate regions of a molecule can be treated as non-interacting; to a good approximation. Thus, when working with localized orbitals, the number; of interacting orbital pairs (and triples, quadruples, etc.) scales linearly; with system size. If carefully implemented, programs that exploit this sparsity; can be made to scale linearly (or else with lower order than their canonical; counterparts) at the cost of of modest, controllable errors. This is the; defining insight of DLPNO-MP2 and all related ""local correlation"" methods. The DLPNO-MP2 code is a linear-scaling alternative to the :ref:`DF-MP2 <sec:dfmp2>`; code, and is intended for use with large systems for which DF-MP2 is intractable.; When running DLPNO-MP2 with default settings, approximately 99.9% of the DF-MP2 ; correlation energy is recovered. The general outline of the method is as follows:. (1) Localize the active occupied MOs (with the Foster-Boys method); (2) Construct projected AOs (PAOs) from the virtual MOs; (3) Calculate three-index integrals in the (sparse) LMO/PAO basis; (4) Perform local density fitting to construct (sparse) exchange integrals; (5) Transform local virtuals from PAOs to pair natural orbitals (PNOs), and truncate; (6) Solve the iterative local MP2 equations in the LMO/PNO basis. An example input file is::. molecule h2o {; 0 1; O; H 1 1",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
Energy Efficiency,efficient,efficient,"hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: DLPNO-MP2. .. _`sec:dlpnomp2`:. DLPNO-MP2: Domain-Based Local Pair Natural Orbital MP2; ======================================================. .. codeauthor:: Zach Glick ; .. sectionauthor:: Zach Glick. *Module:* :ref:`Keywords <apdx:dlpno>`, :ref:`PSI Variables <apdx:dlpno_psivar>`, :source:`DLPNOMP2 <psi4/src/psi4/dlpno>`. Introduction; ------------. The steep polynomial scaling (in both time and memory) of post-HF dynamic; correlation methods prohibits calculations on large systems, even for efficient; codes like |PSIfours| :ref:`DF-MP2 <sec:dfmp2>`. This poor scaling is in part; due to the use of canonical HF orbitals, which are entirely delocalized across; the molecule. Canonical orbitals are commonly used because of mathematical; convenience. Another possible choice is localized orbitals. Any two orbitals; localized to separate regions of a molecule can be treated as non-interacting; to a good approximation. Thus, when working with localized orbitals, the number; of interacting orbital pairs (and triples, quadruples, etc.) scales linearly; with system size. If carefully implemented, programs that exploit this sparsity; can be made to scale linearly (or else with lower order than their canonical; counterparts) at the cost of of modest, controllable errors. This is the; defining insight of DLPNO-MP2 and all related ""local correlation"" methods. The DLPNO-MP2 code is a linear-scaling alternative to the :ref:`DF-MP2 <sec:dfmp2>`; co",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
Integrability,depend,depends,"cy. Instead, the virtual space is transformed; into the much more compact pair natural orbital representation. The (approximate); PNOs diagonalize the virtual-virtual block of the (approximate) MP2 density matrix:. .. math::; :label: PNOs. D_{ij}^{ab} = \frac{1}{1 + \delta_{ij}}[\tilde{t}_{ij}^{\dagger}t_{ij} + \tilde{t}_{ij}t_{ij}^{\dagger}]^{ab}. which is constructed from semicanonical amplitudes:. .. math::; :label: Amplitudes. t_{ij}^{ab} &= - \frac{(iajb)}{\epsilon_{a} + \epsilon_{b} - \epsilon_{i} - \epsilon_{j}}, \\; \tilde{t}_{ij}^{ab} &= 2t_{ij}^{ab} - t_{ij}^{ba}. PNOs with small occupation numbers are discarded, and the local MP2 equations are; solved in the LMO/PNO basis. Recommendations; ---------------. Some practical notes on running the code:. * DLPNO-MP2 is not a drop-in replacement for DF-MP2. Instead, it should be used for; large calculations that cannot reasonably be performed with DF-MP2. The crossover; point between DF-MP2 and DLPNO-MP2 depends on details of both the calculation and; the hardware, but can be as low as 2,000 basis functions. * The accuracy of DLPNO-MP2 (relative to DF-MP2) can be controlled with the; |dlpno__pno_convergence| keyword according to recommendation by Liakos et al.; [Liakos:2015:1525]_. For non-covalent interactions ``TIGHT`` is highly recommended. ; ; * The greater the spatial sparsity of a molecular system, the smaller the pair; domains and consequently the faster the calculation. DLPNO-MP2 is much faster; for linear alkanes than for globular proteins, all else constant. * Similar to molecular sparsity, the sparsity of the orbital basis affects runtime.; Diffuse functions increase the size of the pair domains and therefore lead to ; longer calculations. * All aspects of DLPNO-MP2 run in core; no disk is required. As a result, the; code exhibits very good intra-node parallelism, and benefits from many threads.; The amount of memory needed scales linearly with system size. * DLPNO-MP2 is not symmetry aware. This shou",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
Performance,perform,performed,"ctions.; Solving the iterative local MP2 equations in the LMO/PAO basis requires large PAO; domains to achieve reasonable accuracy. Instead, the virtual space is transformed; into the much more compact pair natural orbital representation. The (approximate); PNOs diagonalize the virtual-virtual block of the (approximate) MP2 density matrix:. .. math::; :label: PNOs. D_{ij}^{ab} = \frac{1}{1 + \delta_{ij}}[\tilde{t}_{ij}^{\dagger}t_{ij} + \tilde{t}_{ij}t_{ij}^{\dagger}]^{ab}. which is constructed from semicanonical amplitudes:. .. math::; :label: Amplitudes. t_{ij}^{ab} &= - \frac{(iajb)}{\epsilon_{a} + \epsilon_{b} - \epsilon_{i} - \epsilon_{j}}, \\; \tilde{t}_{ij}^{ab} &= 2t_{ij}^{ab} - t_{ij}^{ba}. PNOs with small occupation numbers are discarded, and the local MP2 equations are; solved in the LMO/PNO basis. Recommendations; ---------------. Some practical notes on running the code:. * DLPNO-MP2 is not a drop-in replacement for DF-MP2. Instead, it should be used for; large calculations that cannot reasonably be performed with DF-MP2. The crossover; point between DF-MP2 and DLPNO-MP2 depends on details of both the calculation and; the hardware, but can be as low as 2,000 basis functions. * The accuracy of DLPNO-MP2 (relative to DF-MP2) can be controlled with the; |dlpno__pno_convergence| keyword according to recommendation by Liakos et al.; [Liakos:2015:1525]_. For non-covalent interactions ``TIGHT`` is highly recommended. ; ; * The greater the spatial sparsity of a molecular system, the smaller the pair; domains and consequently the faster the calculation. DLPNO-MP2 is much faster; for linear alkanes than for globular proteins, all else constant. * Similar to molecular sparsity, the sparsity of the orbital basis affects runtime.; Diffuse functions increase the size of the pair domains and therefore lead to ; longer calculations. * All aspects of DLPNO-MP2 run in core; no disk is required. As a result, the; code exhibits very good intra-node parallelism, and benefit",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
Safety,recover,recovered,"als, which are entirely delocalized across; the molecule. Canonical orbitals are commonly used because of mathematical; convenience. Another possible choice is localized orbitals. Any two orbitals; localized to separate regions of a molecule can be treated as non-interacting; to a good approximation. Thus, when working with localized orbitals, the number; of interacting orbital pairs (and triples, quadruples, etc.) scales linearly; with system size. If carefully implemented, programs that exploit this sparsity; can be made to scale linearly (or else with lower order than their canonical; counterparts) at the cost of of modest, controllable errors. This is the; defining insight of DLPNO-MP2 and all related ""local correlation"" methods. The DLPNO-MP2 code is a linear-scaling alternative to the :ref:`DF-MP2 <sec:dfmp2>`; code, and is intended for use with large systems for which DF-MP2 is intractable.; When running DLPNO-MP2 with default settings, approximately 99.9% of the DF-MP2 ; correlation energy is recovered. The general outline of the method is as follows:. (1) Localize the active occupied MOs (with the Foster-Boys method); (2) Construct projected AOs (PAOs) from the virtual MOs; (3) Calculate three-index integrals in the (sparse) LMO/PAO basis; (4) Perform local density fitting to construct (sparse) exchange integrals; (5) Transform local virtuals from PAOs to pair natural orbitals (PNOs), and truncate; (6) Solve the iterative local MP2 equations in the LMO/PNO basis. An example input file is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c1; }; ; set basis cc-pvdz; set scf_type df; set freeze_core True; set pno_convergence normal; ; energy('dlpno-mp2'). The main difference between this input and a DF-MP2 input is the ``energy('dlpno-mp2')``; call to :py:func:`~psi4.driver.energy`. The only other addition is the |dlpno__pno_convergence|; keyword, which determines the accuracy of the local approximations underlying ; the DLPNO-MP2 method. Note that ",MatchSource.DOCS,doc/sphinxman/source/dlpnomp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst
Availability,avail,available,"n redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:documentation`:. Updating the |PSIfour| Users' and Programmers' Manual; =====================================================. |PSIfours| documentation is generated by `Sphinx <https://www.sphinx-doc.org/>`_; and lives in :source:`doc/sphinxman`. It is available online at; `<http://psicode.org/psi4manual/master/index.html>`_; for the latest development branch. Installing Sphinx; ^^^^^^^^^^^^^^^^^. Installing Sphinx is only necessary to build the documentation ; yourself, locally. The docs are served from; from psicode, so most users and developers won't need Sphinx; installed. Nevertheless, installation is easy.; Math is rendered through MathJax, so LaTeX and dvipng are no longer needed.; The sphinx executable should be in your path at CMake configure time for; documentation targets to be available. * Binary: ``conda install sphinx``; * Binary: ``conda env create -f devtools/conda-envs/docs-cf.yaml``; * Binary: ``pip install -U Sphinx``; * Source: https://pypi.org/project/Sphinx/. * Check:. >>> which sphinx-build; //anaconda/bin/sphinx-build; >>> sphinx-build --version # needs >= 3.5; Sphinx (sphinx-build) 3.5.3; >>> cmake; ...; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); ... Documentatio",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
Deployability,install,installed,"out even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:documentation`:. Updating the |PSIfour| Users' and Programmers' Manual; =====================================================. |PSIfours| documentation is generated by `Sphinx <https://www.sphinx-doc.org/>`_; and lives in :source:`doc/sphinxman`. It is available online at; `<http://psicode.org/psi4manual/master/index.html>`_; for the latest development branch. Installing Sphinx; ^^^^^^^^^^^^^^^^^. Installing Sphinx is only necessary to build the documentation ; yourself, locally. The docs are served from; from psicode, so most users and developers won't need Sphinx; installed. Nevertheless, installation is easy.; Math is rendered through MathJax, so LaTeX and dvipng are no longer needed.; The sphinx executable should be in your path at CMake configure time for; documentation targets to be available. * Binary: ``conda install sphinx``; * Binary: ``conda env create -f devtools/conda-envs/docs-cf.yaml``; * Binary: ``pip install -U Sphinx``; * Source: https://pypi.org/project/Sphinx/. * Check:. >>> which sphinx-build; //anaconda/bin/sphinx-build; >>> sphinx-build --version # needs >= 3.5; Sphinx (sphinx-build) 3.5.3; >>> cmake; ...; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); ... Documentation Structure; ^^^^^^^^^^^^^^^^^^^^^^^. Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in the same; format, hyperlinking within and to external websites, and generating; documentat",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
Integrability,depend,dependency,"obal and Wfn variables; * All of these show up in referenceable appendices like ``apdx:detci_psivar``; * Plugins: ``doc.rst`` text, \*.py modules, and C++ keywords in ``psi4/tests/plugin_*`` plugin directories (disabled at the moment); * PSI Files: scratch file names and numbers in :source:`psi4/include/psi4/psifiles.h`. Some documentation is even extracted from |PSIfour| objects at runtime. * psi4: docstrings for the C++ submodule ``psi4.core`` and the Python submodule ``psi4.driver`` that comprise |PSIfour|. C++ docstrings from ""core"" and ""export"" files in :source:`psi4/src/`, and Py docstrings from :source:`psi4/driver/`.; * DFT: functional availability and characteristics as encoded in :source:`psi4/driver/procrouting/dft`; * BasisFamily: fitting basis sets for each orbital basis as encoded in :source:`psi4/driver/qcdb/basislistdunning.py` and :source:`psi4/driver/qcdb/basislistother.py`. Building all the documentation takes ~10 minutes. There is now good; dependency structure built into the :source:`doc/sphinxman/CMakeLists.txt`; , so very long builds should be infrequent (unless you're touching; :source:`psi4/src/read_options.cc` or the driver. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) ``doc/sphinxman`` and start from scratch. Even ~10 minutes of build time can be annoying when developing; documentation and testing ``rst`` files. In that situation, use the target; below which builds only the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^^^^^. Sphinx files are written in reStructuredText (\*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.ht",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
Modifiability,config,configure,"General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:documentation`:. Updating the |PSIfour| Users' and Programmers' Manual; =====================================================. |PSIfours| documentation is generated by `Sphinx <https://www.sphinx-doc.org/>`_; and lives in :source:`doc/sphinxman`. It is available online at; `<http://psicode.org/psi4manual/master/index.html>`_; for the latest development branch. Installing Sphinx; ^^^^^^^^^^^^^^^^^. Installing Sphinx is only necessary to build the documentation ; yourself, locally. The docs are served from; from psicode, so most users and developers won't need Sphinx; installed. Nevertheless, installation is easy.; Math is rendered through MathJax, so LaTeX and dvipng are no longer needed.; The sphinx executable should be in your path at CMake configure time for; documentation targets to be available. * Binary: ``conda install sphinx``; * Binary: ``conda env create -f devtools/conda-envs/docs-cf.yaml``; * Binary: ``pip install -U Sphinx``; * Source: https://pypi.org/project/Sphinx/. * Check:. >>> which sphinx-build; //anaconda/bin/sphinx-build; >>> sphinx-build --version # needs >= 3.5; Sphinx (sphinx-build) 3.5.3; >>> cmake; ...; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); ... Documentation Structure; ^^^^^^^^^^^^^^^^^^^^^^^. Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in the same; format, hyperlinking within and to external websites, and generating; documentation in different formats from the same source. |PSIfours|; documentation is a unified document covering information for both users; and programmers in separate sections. From the top-level object directory,; build the f",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
Testability,test,tests,"n; * Scraper looks for ``Process::environment.globals``, ``set_array_variable``, ``variables_``, etc. lines and comments in the C++ code; * C-side, the module for the variable is determined by the directory where it's found.; * Scraper looks for ``set_variable`` together with ``# P::e MODULE`` lines and comments in the Python code; * Py-side, the module for the variable is specified by ``MODULE`` in the comment; * When a variable is set by code in either language, e.g., ``variables_[varname.str()]`` rather than plain string, ``variables_[""FCI TOTAL ENERGY""]``, add a plain string line as a single-line comment, so the scraper can find it.; * Add new places to scrape for variables to :source:`doc/sphinxman/document_psivariables.pl`; * For now, we're scraping both global and Wfn variables; * All of these show up in referenceable appendices like ``apdx:detci_psivar``; * Plugins: ``doc.rst`` text, \*.py modules, and C++ keywords in ``psi4/tests/plugin_*`` plugin directories (disabled at the moment); * PSI Files: scratch file names and numbers in :source:`psi4/include/psi4/psifiles.h`. Some documentation is even extracted from |PSIfour| objects at runtime. * psi4: docstrings for the C++ submodule ``psi4.core`` and the Python submodule ``psi4.driver`` that comprise |PSIfour|. C++ docstrings from ""core"" and ""export"" files in :source:`psi4/src/`, and Py docstrings from :source:`psi4/driver/`.; * DFT: functional availability and characteristics as encoded in :source:`psi4/driver/procrouting/dft`; * BasisFamily: fitting basis sets for each orbital basis as encoded in :source:`psi4/driver/qcdb/basislistdunning.py` and :source:`psi4/driver/qcdb/basislistother.py`. Building all the documentation takes ~10 minutes. There is now good; dependency structure built into the :source:`doc/sphinxman/CMakeLists.txt`; , so very long builds should be infrequent (unless you're touching; :source:`psi4/src/read_options.cc` or the driver. Note that not all dependencies are; encoded (PSI variables",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
Usability,guid,guide,"ly the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^^^^^. Sphinx files are written in reStructuredText (\*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html>`_; *vs.* `source test document <http://svn.python.org/projects/external/docutils-0.5/docs/user/rst/demo.txt>`_; * `Sphinx Docs <https://www.sphinx-doc.org/en/master/contents.html>`_. .. * `Another reStructuredText <http://people.ee.ethz.ch/~creller/web/tricks/reST.html>`_; .. * `LaTeX that Sphinx can handle <ftp://ftp.ams.org/ams/doc/amsmath/short-math-guide.pdf>`_. Math in the Codebase; ^^^^^^^^^^^^^^^^^^^^. It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the ``#! comment`` comments at the top of test case; input files, the ``/*- comment -*/`` comments in; :source:`psi4/src/read_options.cc`, and the ``r"""""" comment """"""``; docstrings in python modules. (That ``r""""""`` makes the string read; literally, so your LaTeX symbols aren't confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special substitution ``@@`` for; subscripting underscore). The autodoc script has been trained to convert; inline LaTeX math to reST math, provided the expression within dollar; signs is offset from other text. That is, expressions of the form; :regexp:`^ $latex math$[., ]$` (pseudo-regex) are good, while ``H$_2$O`` and LaTeX tables; are not translated correctly. Python docstrings a",MatchSource.DOCS,doc/sphinxman/source/documentation.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst
Availability,avail,available," Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: LibECPInt, ecpint; .. _`sec:ecpint`:. Interface to LibECPInt by R. Shaw; =================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Lori A. Burns. .. image:: https://img.shields.io/badge/home-LibECPInt-5077AB.svg; :target: https://github.com/robashaw/libecpint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://libecpint.readthedocs.io/en/latest/index.html. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libecpint/badges/version.svg; :target: https://anaconda.org/psi4/libecpint. * .. image:: https://anaconda.org/conda-forge/libecpint/badges/version.svg; :target: https://anaconda.org/conda-forge/libecpint. * LibECPInt is available as a conda package for Linux and macOS. * If using the |PSIfour| binary, LibECPInt has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; LibECPInt can be obtained through ``conda install libecpint``.; Then enable it as a feature with :makevar:`ENABLE_ecpint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect LibECPInt and activate dependent code. * To remove a conda installation, ``conda remove libecpint``. **Source**. * .. image:: https://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
Deployability,install,installed," Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: LibECPInt, ecpint; .. _`sec:ecpint`:. Interface to LibECPInt by R. Shaw; =================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Lori A. Burns. .. image:: https://img.shields.io/badge/home-LibECPInt-5077AB.svg; :target: https://github.com/robashaw/libecpint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://libecpint.readthedocs.io/en/latest/index.html. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libecpint/badges/version.svg; :target: https://anaconda.org/psi4/libecpint. * .. image:: https://anaconda.org/conda-forge/libecpint/badges/version.svg; :target: https://anaconda.org/conda-forge/libecpint. * LibECPInt is available as a conda package for Linux and macOS. * If using the |PSIfour| binary, LibECPInt has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; LibECPInt can be obtained through ``conda install libecpint``.; Then enable it as a feature with :makevar:`ENABLE_ecpint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect LibECPInt and activate dependent code. * To remove a conda installation, ``conda remove libecpint``. **Source**. * .. image:: https://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Rol",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
Integrability,depend,dependent,"Lori A. Burns. .. image:: https://img.shields.io/badge/home-LibECPInt-5077AB.svg; :target: https://github.com/robashaw/libecpint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://libecpint.readthedocs.io/en/latest/index.html. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libecpint/badges/version.svg; :target: https://anaconda.org/psi4/libecpint. * .. image:: https://anaconda.org/conda-forge/libecpint/badges/version.svg; :target: https://anaconda.org/conda-forge/libecpint. * LibECPInt is available as a conda package for Linux and macOS. * If using the |PSIfour| binary, LibECPInt has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; LibECPInt can be obtained through ``conda install libecpint``.; Then enable it as a feature with :makevar:`ENABLE_ecpint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect LibECPInt and activate dependent code. * To remove a conda installation, ``conda remove libecpint``. **Source**. * .. image:: https://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whethe",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
Modifiability,config,configure,"s a conda package for Linux and macOS. * If using the |PSIfour| binary, LibECPInt has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; LibECPInt can be obtained through ``conda install libecpint``.; Then enable it as a feature with :makevar:`ENABLE_ecpint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect LibECPInt and activate dependent code. * To remove a conda installation, ``conda remove libecpint``. **Source**. * .. image:: https://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing ``include/libecpint.hpp``; * :makevar:`ecpint_DIR` |w---w| CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing ``lib/cmake/ecpint/ecpint-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_ecpint` |w---w| CMake variable to force internal build of ecpint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_ecpin",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
Safety,detect,detect,"Lori A. Burns. .. image:: https://img.shields.io/badge/home-LibECPInt-5077AB.svg; :target: https://github.com/robashaw/libecpint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://libecpint.readthedocs.io/en/latest/index.html. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libecpint/badges/version.svg; :target: https://anaconda.org/psi4/libecpint. * .. image:: https://anaconda.org/conda-forge/libecpint/badges/version.svg; :target: https://anaconda.org/conda-forge/libecpint. * LibECPInt is available as a conda package for Linux and macOS. * If using the |PSIfour| binary, LibECPInt has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; LibECPInt can be obtained through ``conda install libecpint``.; Then enable it as a feature with :makevar:`ENABLE_ecpint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect LibECPInt and activate dependent code. * To remove a conda installation, ``conda remove libecpint``. **Source**. * .. image:: https://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whethe",MatchSource.DOCS,doc/sphinxman/source/ecpint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst
Energy Efficiency,energy,energy,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: single-point, energy(); triple: setting; keywords; energy(). .. _`sec:energy()`:. Single-Point Energy |w---w| :py:func:`~psi4.driver.energy`; ==========================================================. * :ref:`Psi4 Native Energy Methods <table:energy_gen>`; * :ref:`Psi4 Native DFT Energy Methods <table:energy_dft>`; * :ref:`MRCC Interfaced Energy Methods <table:energy_mrcc>`; * :ref:`CFOUR Interfaced Energy Methods <table:energy_cfour>`. .. autofunction:: psi4.energy(name [, molecule, return_wfn, restart_file]); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/energy.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/energy.rst
Availability,fault,faulty,"sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:dkh>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-erd-5077AB.svg; :target: https://github.com/psi4/erd. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://onlinelibrary.wiley.com/doi/10.1002/jcc.21018/abstract. .. _`sec:erdinstall`:. These are the AcesIII electron repulsion integrals that have; been partially interfaced into libmints. Enabling erd and adding; ``set integral_package erd`` (do this in ``~/.psi4rc`` for universal; effect) runs libderiv from Libint for derivative integrals and erd for; non-derivative integrals. .. warning:: The interface between erd and libderiv is not fully; debugged. So analytic gradients, particularly density-fitted ones,; are wrong, as are ESP calculations and some energies for long-range; corrected (""omega"") functionals. Insofar as faulty answers are; anticipated with |globals__integral_package| ``erd``, |PSIfour| will; throw an error if you try to execute that class of computation. But; there may be more, so use with caution. .. warning:: erd seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/erd/badges/version.svg; :target: https://anaconda.org/psi4/erd. * ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). .. * If using the |PSIfour| binary, erd has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; erd can be obtained through ``conda install erd -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_erd`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect erd and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source a",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
Deployability,install,installed,"egral_package erd`` (do this in ``~/.psi4rc`` for universal; effect) runs libderiv from Libint for derivative integrals and erd for; non-derivative integrals. .. warning:: The interface between erd and libderiv is not fully; debugged. So analytic gradients, particularly density-fitted ones,; are wrong, as are ESP calculations and some energies for long-range; corrected (""omega"") functionals. Insofar as faulty answers are; anticipated with |globals__integral_package| ``erd``, |PSIfour| will; throw an error if you try to execute that class of computation. But; there may be more, so use with caution. .. warning:: erd seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/erd/badges/version.svg; :target: https://anaconda.org/psi4/erd. * ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). .. * If using the |PSIfour| binary, erd has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; erd can be obtained through ``conda install erd -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_erd`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect erd and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. erd from conda without thinking, consult. * To remove a conda installation, ``conda remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building P",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
Integrability,interface,interfaced,"RPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ERD; .. _`sec:erd`:. Interface to ERD by N. Flocke and V. Lotrich; ============================================. .. codeauthor:: Andrew C. Simmonett and Benjamin P. Pritchard; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:dkh>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-erd-5077AB.svg; :target: https://github.com/psi4/erd. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://onlinelibrary.wiley.com/doi/10.1002/jcc.21018/abstract. .. _`sec:erdinstall`:. These are the AcesIII electron repulsion integrals that have; been partially interfaced into libmints. Enabling erd and adding; ``set integral_package erd`` (do this in ``~/.psi4rc`` for universal; effect) runs libderiv from Libint for derivative integrals and erd for; non-derivative integrals. .. warning:: The interface between erd and libderiv is not fully; debugged. So analytic gradients, particularly density-fitted ones,; are wrong, as are ESP calculations and some energies for long-range; corrected (""omega"") functionals. Insofar as faulty answers are; anticipated with |globals__integral_package| ``erd``, |PSIfour| will; throw an error if you try to execute that class of computation. But; there may be more, so use with caution. .. warning:: erd seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/erd/badges/version.svg; :target: https://anaconda.org/psi4/erd. * ERD is available as a conda package for Linux and ",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
Modifiability,config,configure,"already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; erd can be obtained through ``conda install erd -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_erd`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect erd and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. erd from conda without thinking, consult. * To remove a conda installation, ``conda remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---w| CMake variable toggling whether |PSIfour| builds with erd; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing ``include/ERD/ERD_MANGLE.h``; * :makevar:`erd_DIR` |w---w| CMake variable to specify where pre-built erd can be found. Set to installation directory containing ``share/cmake/erd/erdConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_erd` |w---w| CMake variable to force internal build of erd instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_erd` |w---w| CMake variable to force detecting pre-built erd and not falling back on inter",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
Safety,detect,detect,"ations and some energies for long-range; corrected (""omega"") functionals. Insofar as faulty answers are; anticipated with |globals__integral_package| ``erd``, |PSIfour| will; throw an error if you try to execute that class of computation. But; there may be more, so use with caution. .. warning:: erd seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/erd/badges/version.svg; :target: https://anaconda.org/psi4/erd. * ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). .. * If using the |PSIfour| binary, erd has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; erd can be obtained through ``conda install erd -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_erd`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect erd and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. erd from conda without thinking, consult. * To remove a conda installation, ``conda remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
Testability,test,testSuitedkh," software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ERD; .. _`sec:erd`:. Interface to ERD by N. Flocke and V. Lotrich; ============================================. .. codeauthor:: Andrew C. Simmonett and Benjamin P. Pritchard; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:dkh>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-erd-5077AB.svg; :target: https://github.com/psi4/erd. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://onlinelibrary.wiley.com/doi/10.1002/jcc.21018/abstract. .. _`sec:erdinstall`:. These are the AcesIII electron repulsion integrals that have; been partially interfaced into libmints. Enabling erd and adding; ``set integral_package erd`` (do this in ``~/.psi4rc`` for universal; effect) runs libderiv from Libint for derivative integrals and erd for; non-derivative integrals. .. warning:: The interface between erd and libderiv is not fully; debugged. So analytic gradients, particularly density-fitted ones,; are wrong, as are ESP calculations and some energies for long-range; corrected (""omega"") functionals. Insofar as faulty answers are; anticipated with |globals__integral_package| ``erd``, |PSIfour| will; throw an error if you try to execute that class of",MatchSource.DOCS,doc/sphinxman/source/erd.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst
Availability,down,down,"ser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. ======================================; Installation and Runtime Configuration; ======================================. .. toctree::; :maxdepth: 2. FAQ <build_faq>; build_obtaining; build_planning; Installing from Binary <conda>. .. index:: scratch files, restart; .. _`sec:Scratch`:. Scratch Files; =============. One very important part of user configuration at the end of the; installation process; is to tell |PSIfour| where to write its temporary; (""scratch"") files. Electronic structure packages like |PSIfour| can; create rather large temporary disk files. It is very important to ; ensure that |PSIfour| is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, |PSIfour| will write temporary files to ``/tmp``, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB--1TB or more, depending on the size of; the molecules to be studied) and (b) tell |PSIfour| the path to this; directory. Scratch file location can be specified through the ; :envvar:`PSI_SCRATCH` environment variable or through the |psirc| file; (see section :ref:`sec:psirc`). Most of the time, :envvar:`PSI_SCRATCH`; is preferred, and it overrides any existing |psirc| setting. You can set up ; :envvar:`PSI_SCRATCH` by issuing the following commands in a terminal,; or including them in the appropriate ``rc`` file. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. .. code-block:: bash. # sh, bash:",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
Deployability,configurat,configuration,".. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. ======================================; Installation and Runtime Configuration; ======================================. .. toctree::; :maxdepth: 2. FAQ <build_faq>; build_obtaining; build_planning; Installing from Binary <conda>. .. index:: scratch files, restart; .. _`sec:Scratch`:. Scratch Files; =============. One very important part of user configuration at the end of the; installation process; is to tell |PSIfour| where to write its temporary; (""scratch"") files. Electronic structure packages like |PSIfour| can; create rather large temporary disk files. It is very important to ; ensure that |PSIfour| is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, |PSIfour| will write temporary files to ``/tmp``, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB--1TB or more, depending on the size of; the molecules to be studied) and (b) tell |PSIfour| the path to this; directory. Scratch file location can be specified through the ; :envvar:`PSI_SCRATCH` environment variable or through the |psirc| file; (see section :ref:`sec:psirc`). Most of the time, :envvar:`PSI_SCRATCH`; is preferred, and it ov",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
Energy Efficiency,energy,energy,"s; accomplished by the commands below::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). A guide to the contents of individual scratch files may be found at :ref:`apdx:psiFiles`.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the |PSIfour| instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. Elementary Restart; ==================. The |PSIfour| intermediate files use the following naming scheme ::. psi.PID.name.filenumber. where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in :ref:`content <apdx:psiFiles>`. For those modules providing restart capabilities, the previous file can; be provided through the``restart_file`` option ::. energy('scf',restart_file='./psi.PID.name.filenumber'). Only the filenumber is necessary for the driver to appropriately rename the; file and copy it to the scratch directory where |PSIfour| will expect it.; The restart capabilities of a specific method (if any) are found in that method's documentation. To provide multiple files, pass them as arguments of a Python list ::. energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the ``restart_file`` options is only available for energy procedures as of now. Executing |PSIfour| with the :option:`psi4 -m` (for; messy) flag will prevent files being deleted at the end of the run::. psi4 -m. The mechanism for restarting HF/DFT calculations is described in details :ref:`here <sec:scfrestart>`. .. _`sec:save_wfn`:. Saving the Wavefunction; =======================. A core object of |PSIfour| is the Wavefunction (short ``wfn``) object ::. energy, wfn = energy('scf',return_wfn=True). This C++/Python object (:py:class:`psi4.core.Wavefu",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
Integrability,depend,depending,"n and Runtime Configuration; ======================================. .. toctree::; :maxdepth: 2. FAQ <build_faq>; build_obtaining; build_planning; Installing from Binary <conda>. .. index:: scratch files, restart; .. _`sec:Scratch`:. Scratch Files; =============. One very important part of user configuration at the end of the; installation process; is to tell |PSIfour| where to write its temporary; (""scratch"") files. Electronic structure packages like |PSIfour| can; create rather large temporary disk files. It is very important to ; ensure that |PSIfour| is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, |PSIfour| will write temporary files to ``/tmp``, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB--1TB or more, depending on the size of; the molecules to be studied) and (b) tell |PSIfour| the path to this; directory. Scratch file location can be specified through the ; :envvar:`PSI_SCRATCH` environment variable or through the |psirc| file; (see section :ref:`sec:psirc`). Most of the time, :envvar:`PSI_SCRATCH`; is preferred, and it overrides any existing |psirc| setting. You can set up ; :envvar:`PSI_SCRATCH` by issuing the following commands in a terminal,; or including them in the appropriate ``rc`` file. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files. |PSIfour| has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, ",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
Modifiability,config,configuration,".. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. ======================================; Installation and Runtime Configuration; ======================================. .. toctree::; :maxdepth: 2. FAQ <build_faq>; build_obtaining; build_planning; Installing from Binary <conda>. .. index:: scratch files, restart; .. _`sec:Scratch`:. Scratch Files; =============. One very important part of user configuration at the end of the; installation process; is to tell |PSIfour| where to write its temporary; (""scratch"") files. Electronic structure packages like |PSIfour| can; create rather large temporary disk files. It is very important to ; ensure that |PSIfour| is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, |PSIfour| will write temporary files to ``/tmp``, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB--1TB or more, depending on the size of; the molecules to be studied) and (b) tell |PSIfour| the path to this; directory. Scratch file location can be specified through the ; :envvar:`PSI_SCRATCH` environment variable or through the |psirc| file; (see section :ref:`sec:psirc`). Most of the time, :envvar:`PSI_SCRATCH`; is preferred, and it ov",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
Performance,queue,queue,"|PSIfour| has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch :ref:`numbered by content <apdx:psiFiles>` and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user. A Python callable handle to the |PSIfour| I/O management routines is available,; and is called ``psi4_io``. To instruct the I/O manager to send all files to; another location, say ``/scratch/user``, add the following command to your input; file: ::. psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case ``$MYSCRATCH``) to set the scratch directory;; the following code will do that::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 12; contains information about the internal coordiantes of a geometry optimization.; The user may want to retain this in the working directory; (*i.e.*, where |PSIfour| was launched from) to analyze the optimization. This is; accomplished by the commands below::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). A guide to the contents of individual scratch files may be found at :ref:`apdx:psiFiles`.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the |PSIfour| instance is incorporated into the full file; nam",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
Safety,safe,safe,"t to use an; environmental variable (in this case ``$MYSCRATCH``) to set the scratch directory;; the following code will do that::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 12; contains information about the internal coordiantes of a geometry optimization.; The user may want to retain this in the working directory; (*i.e.*, where |PSIfour| was launched from) to analyze the optimization. This is; accomplished by the commands below::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). A guide to the contents of individual scratch files may be found at :ref:`apdx:psiFiles`.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the |PSIfour| instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. Elementary Restart; ==================. The |PSIfour| intermediate files use the following naming scheme ::. psi.PID.name.filenumber. where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in :ref:`content <apdx:psiFiles>`. For those modules providing restart capabilities, the previous file can; be provided through the``restart_file`` option ::. energy('scf',restart_file='./psi.PID.name.filenumber'). Only the filenumber is necessary for the driver to appropriately rename the; file and copy it to the scratch directory where |PSIfour| will expect it.; The restart capabilities of a specific method (if any) are found in that method's documentation. To provide multiple files, pass them as arguments of a Python list ::. energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the ``restart_",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
Security,access,accessible,"::. psi4_io.set_default_path('/scratch/user'). To set up the scratch path from a variable ``$MYSCRATCH``::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the internal coordinate file and instruct |PSIfour| not to delete it::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). The Python interpreter will execute the contents of the; |psirc| file in the current user's home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the |psirc| file. During; execution, the |psirc| defaults will be loaded in first, but then the commands; in the input file will be executed. . The |psirc| file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every |PSIfour| instance. .. index:: parallel operation, threading; .. _`sec:threading`:. Threading; =========. Most new modules in |PSIfour| are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for |PSIfour|; involves using threaded BLAS/LAPACK (particularly Intel's excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; ``std::thread`` for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in |PSIfour| uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled |PSIfour| with OpenMP and MKL (Note that it is; possible to use g++",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
Testability,log,loglevel,">> psi4 -i input.dat -o output.dat; >>> psi4 input.dat output.dat. >>> psi4 descriptive_filename.in; >>> psi4 -i descriptive_filename.in -o descriptive_filename.out; >>> psi4 descriptive_filename.in descriptive_filename.out. Command-line arguments to |PSIfour| can be accessed through :option:`psi4 --help`. .. program:: psi4. .. option:: -a, --append. Append results to output file. Default: Truncate first. .. option:: -h, --help. Display the command-line options and usage information. .. option:: -i <filename>, --input <filename>. Input file name. Default: input.dat. .. option:: --inplace. Runs |PSIfour| with compiled code from <objdir> but driver code from source,; so no need to ``make`` between Python edits. Expert mode. .. option:: -k, --skip-preprocessor. Skips input preprocessing. Expert mode. .. option:: -l <name>, --psidatadir <name>. Overrides the value of; :envvar:`PSIDATADIR` and specifies the path to the Psi data; library (ends in ``share/psi4``). Expert mode. .. option:: --loglevel <int>. Sets logging level: WARN=30, INFO=20, DEBUG=10. .. option:: -m, --messy. Leave temporary files after the run is completed. .. option:: --memory <memory>. The amount of memory to use. Can be specified with units (e.g., '10MB') otherwise bytes is assumed. .. option:: --module. The location of the associated |PSIfour| Python module. .. option:: -n <threads>, --nthread <threads>. Number of threads to use (overrides :envvar:`OMP_NUM_THREADS`).; Also controls the testing parallelism with pytest. .. option:: -o <filename>, --output <filename>. Output file name. Use ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input ",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
Usability,guid,guide,"/scratch/user``, add the following command to your input; file: ::. psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case ``$MYSCRATCH``) to set the scratch directory;; the following code will do that::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 12; contains information about the internal coordiantes of a geometry optimization.; The user may want to retain this in the working directory; (*i.e.*, where |PSIfour| was launched from) to analyze the optimization. This is; accomplished by the commands below::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). A guide to the contents of individual scratch files may be found at :ref:`apdx:psiFiles`.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the |PSIfour| instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. Elementary Restart; ==================. The |PSIfour| intermediate files use the following naming scheme ::. psi.PID.name.filenumber. where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in :ref:`content <apdx:psiFiles>`. For those modules providing restart capabilities, the previous file can; be provided through the``restart_file`` option ::. energy('scf',restart_file='./psi.PID.name.filenumber'). Only the filenumber is necessary for the driver to appropriately rename the; file and copy it to the scratch directory where |PSIfour| will expect it.; The restart capabilities of a specific method (if any) are found in that method's docum",MatchSource.DOCS,doc/sphinxman/source/external.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst
Availability,checkpoint,checkpoint,"ic License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; FCHK; Gaussian Formatted Checkpoint. .. _`sec:fchk`:. Interface to programs through FCHK files |w---w| :py:func:`~psi4.driver.fchk()`; ===============================================================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. Many post-processing tools can read information from `Gaussian's formatted; checkpoint (FCHK) files <https://gaussian.com/formchk/>`_.; To allow interoperability with such tools, |PSIfour| includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function::. energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree--Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that",MatchSource.DOCS,doc/sphinxman/source/fchk.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst
Deployability,update,updated,"ANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; FCHK; Gaussian Formatted Checkpoint. .. _`sec:fchk`:. Interface to programs through FCHK files |w---w| :py:func:`~psi4.driver.fchk()`; ===============================================================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. Many post-processing tools can read information from `Gaussian's formatted; checkpoint (FCHK) files <https://gaussian.com/formchk/>`_.; To allow interoperability with such tools, |PSIfour| includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function::. energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree--Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately::. grad, wfn = gradient('mp2', return_wfn=True); fchk(wfn,'output.fchk'). .. autofunction:: psi4.fchk(wfn, filename); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/fchk.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst
Energy Efficiency,energy,energy,"ANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; FCHK; Gaussian Formatted Checkpoint. .. _`sec:fchk`:. Interface to programs through FCHK files |w---w| :py:func:`~psi4.driver.fchk()`; ===============================================================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. Many post-processing tools can read information from `Gaussian's formatted; checkpoint (FCHK) files <https://gaussian.com/formchk/>`_.; To allow interoperability with such tools, |PSIfour| includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function::. energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree--Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately::. grad, wfn = gradient('mp2', return_wfn=True); fchk(wfn,'output.fchk'). .. autofunction:: psi4.fchk(wfn, filename); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/fchk.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst
Integrability,interoperab,interoperability," will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; FCHK; Gaussian Formatted Checkpoint. .. _`sec:fchk`:. Interface to programs through FCHK files |w---w| :py:func:`~psi4.driver.fchk()`; ===============================================================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. Many post-processing tools can read information from `Gaussian's formatted; checkpoint (FCHK) files <https://gaussian.com/formchk/>`_.; To allow interoperability with such tools, |PSIfour| includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function::. energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree--Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately::. grad, wfn = gradient('mp2', return_wfn=True); fchk(wfn,'output.fchk'). .. autofunct",MatchSource.DOCS,doc/sphinxman/source/fchk.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst
Performance,optimiz,optimization,"ANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; FCHK; Gaussian Formatted Checkpoint. .. _`sec:fchk`:. Interface to programs through FCHK files |w---w| :py:func:`~psi4.driver.fchk()`; ===============================================================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. Many post-processing tools can read information from `Gaussian's formatted; checkpoint (FCHK) files <https://gaussian.com/formchk/>`_.; To allow interoperability with such tools, |PSIfour| includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function::. energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree--Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately::. grad, wfn = gradient('mp2', return_wfn=True); fchk(wfn,'output.fchk'). .. autofunction:: psi4.fchk(wfn, filename); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/fchk.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst
Usability,simpl,simply,"ANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; FCHK; Gaussian Formatted Checkpoint. .. _`sec:fchk`:. Interface to programs through FCHK files |w---w| :py:func:`~psi4.driver.fchk()`; ===============================================================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. Many post-processing tools can read information from `Gaussian's formatted; checkpoint (FCHK) files <https://gaussian.com/formchk/>`_.; To allow interoperability with such tools, |PSIfour| includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function::. energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree--Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately::. grad, wfn = gradient('mp2', return_wfn=True); fchk(wfn,'output.fchk'). .. autofunction:: psi4.fchk(wfn, filename); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/fchk.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst
Availability,avail,available,"e; deployed together in this module, yielding ""F/I-SAPT."" All F/I-SAPT computations; in |PSIfour| use density-fitted SAPT0 as the underlying SAPT methodology. Interested; users should consult the manual page for Ed Hohenstein's :ref:`SAPT0 <sec:sapt>` code; and the SAPT literature to understand the specifics of SAPT0 before beginning; with F/I-SAPT0. F-SAPT is detailed over two papers: [Parrish:2014:044115]_ on our much-earlier; ""atomic"" SAPT (A-SAPT) and [Parrish:2014:4417]_ on the finished ""functional; group"" SAPT (F-SAPT). An additional paper describes how to use F-SAPT to analyze; differences under functional group substitutions [Parrish:2014:17386]_. I-SAPT; is explained in [Parrish:2015:051103]_. There is also a reasonably-detailed; review of the aims of A/F/I-SAPT and the existing state-of-the-art in the field; in the introduction chapter on partitioned SAPT methods in `Parrish's thesis; <https://smartech.gatech.edu/handle/1853/53850>`_. .. A video tutorial series for the use of the FISAPT module is available `here; .. <https://www.youtube.com/playlist?list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Specific videos in the series include:; ..; .. - `F-SAPT#1; .. <https://www.youtube.com/watch?v=J22J0wh4mVo&index=1&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Describes the use of F-SAPT to analyze the; .. distribution of the intermolecular interaction energy components between the; .. various hydroxyl and phenyl moieties of the phenol dimer.; .. - `F-SAPT#2; .. <https://www.youtube.com/watch?v=fqlzXsayec0&index=2&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Discusses how to plot the order-1 F-SAPT analysis with PyMol and perform a; .. ""difference F-SAPT"" analysis; .. - `I-SAPT#1; .. <https://www.youtube.com/watch?v=fD6mu_tTG_c&index=3&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Describes the use of I-SAPT to analyze the interaction between the two phenol; .. groups in a 2,4-pentanediol molecule.; .. - `I-SAPT#2; .. <https://www.youtube.com/watch?v=hDbo",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
Deployability,deploy,deployed,".. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: FISAPT; pair: FISAPT; theory. .. _`sec:fisapt`:. F/I-SAPT: Functional Group and/or Intramolecular SAPT; =====================================================. .. codeauthor:: Robert M. Parrish; .. sectionauthor:: Robert M. Parrish. *Module:* :ref:`Keywords <apdx:fisapt>`, :ref:`PSI Variables; <apdx:fisapt_psivar>`, :source:`FISAPT <psi4/src/psi4/fisapt>`. The FISAPT module provides two extensions to standard SAPT theory to allow for; (1) an effective two-body partition of the various SAPT terms to localized; chemical functional groups (F-SAPT) and (2) a means to compute the SAPT; interaction between two moieties within the embedding field of a third body; (I-SAPT). F-SAPT is designed to provide additional insight into the chemical; origins of a noncovalent interaction, while I-SAPT allows for one to perform; a SAPT analysis for intramolecular interactions. F-SAPT and I-SAPT can be; deployed together in this module, yielding ""F/I-SAPT."" All F/I-SAPT computations; in |PSIfour| use density-fitted SAPT0 as the underlying SAPT methodology. Interested; users should consult the manual page for Ed Hohenstein's :ref:`SAPT0 <sec:sapt>` code; and the SAPT literature to understand the specifics of SAPT0 before beginning; with F/I-SAPT0. F-SAPT is detailed over two papers: [Parrish:2014:044115]_ on our much-earlier; ""atomic"" SAPT (A-SAPT) and [Parrish:2014:4417]_ on the finished ""functional; group"" SAPT (F-SAPT). An additional paper describes how to use F-SAPT to analyze; differences under functional group substitutions [Parrish:2014:17386]_. I-SAPT; is explained in [Parrish:2015:051103]_. There is also a reasonably-detailed; review of the aims of A/F/I-SAPT and the existing state-of-the-art in the field; in the introduction chapter on partitioned SAPT methods in `Parrish's thesis; <https://smartech.gatech.edu/handle/1853/53850>`_. .. A video tutorial series for the use of the FISAPT modu",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
Energy Efficiency,energy,energy,"er two papers: [Parrish:2014:044115]_ on our much-earlier; ""atomic"" SAPT (A-SAPT) and [Parrish:2014:4417]_ on the finished ""functional; group"" SAPT (F-SAPT). An additional paper describes how to use F-SAPT to analyze; differences under functional group substitutions [Parrish:2014:17386]_. I-SAPT; is explained in [Parrish:2015:051103]_. There is also a reasonably-detailed; review of the aims of A/F/I-SAPT and the existing state-of-the-art in the field; in the introduction chapter on partitioned SAPT methods in `Parrish's thesis; <https://smartech.gatech.edu/handle/1853/53850>`_. .. A video tutorial series for the use of the FISAPT module is available `here; .. <https://www.youtube.com/playlist?list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Specific videos in the series include:; ..; .. - `F-SAPT#1; .. <https://www.youtube.com/watch?v=J22J0wh4mVo&index=1&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Describes the use of F-SAPT to analyze the; .. distribution of the intermolecular interaction energy components between the; .. various hydroxyl and phenyl moieties of the phenol dimer.; .. - `F-SAPT#2; .. <https://www.youtube.com/watch?v=fqlzXsayec0&index=2&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Discusses how to plot the order-1 F-SAPT analysis with PyMol and perform a; .. ""difference F-SAPT"" analysis; .. - `I-SAPT#1; .. <https://www.youtube.com/watch?v=fD6mu_tTG_c&index=3&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Describes the use of I-SAPT to analyze the interaction between the two phenol; .. groups in a 2,4-pentanediol molecule.; .. - `I-SAPT#2; .. <https://www.youtube.com/watch?v=hDbonAOD5dY&index=4&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Discusses how to plot the density fields and ESPs of the various moieties of; .. the I-SAPT embedding scheme with PyMol; .. - `F/I-SAPT Options; .. <https://www.youtube.com/watch?v=KFkPKSUZVfI&index=5&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Details all of the more-advanced options in the F/I-SAPT cod",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
Modifiability,adapt,adapted,"in a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree--Fock-interacting moieties. We have developed a set of template; ``.pymol`` scripts to help with this process. These can be obtained by running::. >>> copy_pymol2.py. and then in PyMol::. >>> @run.pymol. This last command runs all of the individual ``.pymol`` files (*e.g.*,; ``DA.pymol``), which in turn load in the molecule and cube file data; (contained in the ``.cube`` file), set up the visualization, and render a; ``.png`` image of the scene. Generally the view orientation and some specific; details of the ``.pymol`` files require some small tweaks to permit; publication-quality renderings. .. image:: /VA.png; :align: center; :scale: 50%; :alt: ESP of monomer A. Adding Point Charges to F/I-SAPT Computations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. Citation: Alenaizan, A; Cheney, D. L.; Sherrill, C. D. Electrostatically embedded; .. symmetry adapted pertubration theory. In preparation. Point charges can be added to the interacting subsystems A and B as well; as to the ``linking`` fragment C. Briefly, the interaction between the point charges in A(B); and fragment B(A) enters the SAPT0 interaction energy. It explicitly affects the electrostatics; and induction components, and implicitly affects other SAPT0 components by polarizing the orbitals.; If point charges are present in both subsystems A and B, an additional charge-charge interaction; term is also added to the electrostatic energy. When point charges are assigned to subsystem C, the point; charges in C only polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; directly contribute to the SAPT0 interaction energy. Examples :srcsample:`fsapt-ext-abc` and :srcsample:`fsapt-ext-abc2`; illustrate the use of point charges in F/I-SAPT procedure. Link Orbital Partitioning in I-SAPT; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The assignment of the A-",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
Performance,perform,perform,"; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: FISAPT; pair: FISAPT; theory. .. _`sec:fisapt`:. F/I-SAPT: Functional Group and/or Intramolecular SAPT; =====================================================. .. codeauthor:: Robert M. Parrish; .. sectionauthor:: Robert M. Parrish. *Module:* :ref:`Keywords <apdx:fisapt>`, :ref:`PSI Variables; <apdx:fisapt_psivar>`, :source:`FISAPT <psi4/src/psi4/fisapt>`. The FISAPT module provides two extensions to standard SAPT theory to allow for; (1) an effective two-body partition of the various SAPT terms to localized; chemical functional groups (F-SAPT) and (2) a means to compute the SAPT; interaction between two moieties within the embedding field of a third body; (I-SAPT). F-SAPT is designed to provide additional insight into the chemical; origins of a noncovalent interaction, while I-SAPT allows for one to perform; a SAPT analysis for intramolecular interactions. F-SAPT and I-SAPT can be; deployed together in this module, yielding ""F/I-SAPT."" All F/I-SAPT computations; in |PSIfour| use density-fitted SAPT0 as the underlying SAPT methodology. Interested; users should consult the manual page for Ed Hohenstein's :ref:`SAPT0 <sec:sapt>` code; and the SAPT literature to understand the specifics of SAPT0 before beginning; with F/I-SAPT0. F-SAPT is detailed over two papers: [Parrish:2014:044115]_ on our much-earlier; ""atomic"" SAPT (A-SAPT) and [Parrish:2014:4417]_ on the finished ""functional; group"" SAPT (F-SAPT). An additional paper describes how to use F-SAPT to analyze; differences under functional group substitutions [Parrish:2014:17386]_. I-SAPT; is explained in [Parrish:2015:051103]_. There is also a reasonably-detailed; review of the aims of A/F/I-SAPT and the existing state-of-the-art in the field; in the introduction chapter on partitioned SAPT m",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
Usability,simpl,simple,"1 -0.362 -1.860 -2.040 -4.364; PH All -2.062 2.936 -0.140 -0.435 -3.074 -2.774; All OH -11.167 6.965 -0.730 -1.739 -1.923 -8.594; All PH 2.072 2.903 0.229 -0.556 -3.191 1.456; All All -9.095 9.867 -0.501 -2.295 -5.114 -7.138. Note that the assignment of linking sigma bond contributions is a small point of; ambiguity in F-SAPT. The ``fsapt.dat`` file presents the ""links-by-charge""; assignment at the top and the ""links by 50-50"" assignment at the bottom. We; generally prefer the latter, but both generally give qualitatively identical; energetic partitions. Users should check the files ``fragA.dat`` and ``fragB.dat`` to ensure that; there is not too much charge delocalization from one fragment to another. This; is presented in the ""Orbital Check"" section in these files |w--w| a value larger than; 0.1 docc is an indication that the picture of localizable functional groups may; be breaking down. We also *strongly discourage* the cutting of double,; triple, or aromatic bonding motifs when partitioning the molecule into fragments; |w--w| cuts across only simple sigma bonds are encouraged. .. caution:: November 2022, previous to QCEngine v0.26.0 and Psi4; v1.7.0, there was a scaling inconsistency in the pairwise analysis; such that :psivar:`2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS`; was doubled when generated from dftd3 compared to the output from other; programs (s-dftd3 and dftd4). This shows up in the QCVariable and in the; ``Empirical_Disp.dat`` file written during ``energy(""fisapt0-d3"")`` (all; -D3 variants). Fortunately, the ``fsapt.py`` script compensated; for dftd3 (by far the most used program for this task). Users of the; pairwise analysis should take care to use the new QCEngine; AND ``fsapt.py`` script distributed with NEW Psi4. ``fisapt0-d4`` run; with previous Psi4/fsapt.py will be wrong. ``fisapt0-d3`` run with previous; Psi4/fsapt.py but new QCEngine will be wrong. If you've got legacy; calculations, it is extremely easy to check or reanalyze them to; s",MatchSource.DOCS,doc/sphinxman/source/fisapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst
Availability,avail,available,"01. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table :ref:`FNOCC Methods <table:fnocc_methods>`. Full MP4 correlation; energies are also available. .. _`sec:fnocepa`:. Coupled electron pair approximation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the CISD or coupled-pair equations; requires fewer floating point operations than solving the CCSD. CISD,; CCSD, and the coupled-pair methods discussed below all scale formally with; the sixth power of system size, and, as with the QCISD method, CEPA; methods retain :math:`{\cal{O}}(o^2v^4)` complexity of the CCSD equations.; For a detailed discussion of the properties of various coupled-pair; methods, see [Wennmohs:2008:217]_\. What follows is a very basic description of the practical differences in; the equations that define each of the coupled-pair methods implemented in; |Psifour|. We begin with the CISD wave function. .. math::; :label: CIwfn. | \Psi \rangle = | \Psi_0 \rangle + \sum_i^{occ} \sum_a^{v",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
Deployability,configurat,configuration,"energies in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; |Psifour| can be found in [DePrince:2013:293]_\. FNO computations; are controlled through the keywords |fnocc__nat_orbs| and; |fnocc__occ_tolerance|, or by prepending a valid method name with ""fno"" in; the energy call as ::. energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword |fnocc__active_nat_orbs|. This keyword will override the ; keyword |fnocc__occ_tolerance|. QCISD(T), CCSD(T), MP4, and CEPA; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The FNOCC module in |Psifour| supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968]_\ was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]_\. Consider the set of equations defining CCSD:. .. math::; :label: CCSD. \langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\. where we have chosen the intermediate normalization, ; :math:`\langle \Psi_0| \Psi \rangle = 1`, and the symbols :math:`T_1` ; and :ma",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
Energy Efficiency,reduce,reduced,"nocc`:. FNOCC: Frozen natural orbitals for CCSD(T), QCISD(T), CEPA, and MP4; ===================================================================. .. codeauthor:: A. Eugene DePrince; .. sectionauthor:: A. Eugene DePrince. *Module:* :ref:`Keywords <apdx:fnocc>`, :ref:`PSI Variables <apdx:fnocc_psivar>`, :source:`FNOCC <psi4/src/psi4/fnocc>`. .. warning:: There is a known bug concerning the i7-5930 series combined; with the Intel 15 compilers and MKL 11.2.3. When |PsiFour| is compiled; under these conditions, parallel runs of the FNOCC code have experienced; nonsensical CCSD correlation energies (often several Hartrees lower; than the starting guess). At the moment, the only confirmed solutions; are running serially, using a different BLAS implementation, or upgrading; to Intel 16.0.2 and MKL 11.3.2. Frozen natural orbitals (FNO); ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The computational cost of the CCSD [Purvis:1982]_, CCSD(T); [Raghavachari:1989]_, and related methods be reduced by constructing a; compact representation of the virtual space based on the natural orbitals; of second-order perturbation theory [Sosa:1989:148]_. The most demanding; steps in the CCSD and (T) algorithms scale as :math:`{\cal{O}}(o^2v^4)`; and :math:`{\cal{O}}(o^3v^4)`, where :math:`o` and :math:`v` represent the; number of oribitals that are occupied and unoccupied (virtual) in the; reference function, respectively. By reducing the the size of the virtual; space, the cost of evaluating these terms reduces by a factor of :math:`(v; / v_{FNO})^4`, where :math:`v_{FNO}` represents the number of virtual; orbitals retained after the FNO truncation. The general outline for the FNO procedure in |Psifour| is:. (i) construct the virtual-virtual block of the unrelaxed MP2 one-particle density matrix (OPDM) ; (ii) diagonalize this block of the OPDM to obtain a set of natural virtual orbitals; (iii) based on some occupancy threshold, determine which orbitals are unimportant and may be discarded; (iv) project the",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
Integrability,depend,depend,"pf | :math:`\frac{2}{N} E_c` | :math:`\frac{2}{N} E_c` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+; | aqcc | :math:`[1-\frac{(N-3)(N-2)}{N(N-1)}]E_c` | :math:`[1-\frac{(N-3)(N-2)}{N(N-1)}]E_c` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+. .. comment | dci | :math:`E_c` | NA |; .. comment +-------------------------+------------------------------------------------------------+----------------------------------------------+. The pair correlation energy, :math:`\epsilon_{ij}`, is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. .. math::; :label: pair_energy. \epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba}). Methods whose shifts (:math:`\Delta_{ij}` and :math:`\Delta_i`) do not; explicitly depend on orbitals :math:`i` or :math:`j` (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in |Psifour|, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687]_\. The DF-CCSD(T) procedure ",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
Modifiability,config,configuration,"energies in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; |Psifour| can be found in [DePrince:2013:293]_\. FNO computations; are controlled through the keywords |fnocc__nat_orbs| and; |fnocc__occ_tolerance|, or by prepending a valid method name with ""fno"" in; the energy call as ::. energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword |fnocc__active_nat_orbs|. This keyword will override the ; keyword |fnocc__occ_tolerance|. QCISD(T), CCSD(T), MP4, and CEPA; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The FNOCC module in |Psifour| supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968]_\ was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]_\. Consider the set of equations defining CCSD:. .. math::; :label: CCSD. \langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\. where we have chosen the intermediate normalization, ; :math:`\langle \Psi_0| \Psi \rangle = 1`, and the symbols :math:`T_1` ; and :ma",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
Performance,optimiz,optimized,"ion (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in |Psifour|, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687]_\. The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that used in the SCF procedure, defined by the |scf__df_basis_scf|; keyword. If this keyword is not specified, an appropriate -JKFIT set is; automatically selected. This auxiliary set defines the ERIs used to; build the Fock matrix used in the DF-CCSD(T) procedure. The second; auxiliary set is used to approximate all other ERIs in the DF-CCSD(T); procedure. The choice of auxiliary basis is controlled by the keyword; |fnocc__df_basis_cc|. By default, |fnocc__df_basis_cc| is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.; For example, if the primary basis is aug-cc-pVDZ, the default; |fnocc__df_basis_cc| will be aug-cc-pVDZ-RI. Alternatively, the user can request that the DF-CCSD(T) procedure use a; set of vectors defined by the Cholesky decomposition of the ERI tensor as; the auxiliary basis. This feature is enabled by specifying |globals__cc_type| ``CD``.; CD methods can be enabled in the SCF; procedure as well, by specifying the |globals__scf_type| as ``CD``. The; accuracy of the decomposition can be controlled through the keyword; |fnocc__cholesky_tolerance|. .. comment This feature is enabled by specifying |fnocc__df_basis_cc| as ""CHOLESKY"". . The following input file sets up a DF-CCSD(T); computation using CD integrals ::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }; ; set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obt",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
Safety,avoid,avoid,"--+. The pair correlation energy, :math:`\epsilon_{ij}`, is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. .. math::; :label: pair_energy. \epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba}). Methods whose shifts (:math:`\Delta_{ij}` and :math:`\Delta_i`) do not; explicitly depend on orbitals :math:`i` or :math:`j` (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in |Psifour|, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687]_\. The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that used in the SCF procedure, defined by the |scf__df_basis_scf|; keyword. If this keyword is not specified, an appropriate -JKFIT set is; automatically selected. This auxiliary set defines the ERIs used to; build the Fock matrix used in the DF-CCSD(T) procedure. The second; auxiliary set is used to approximate all other ERIs in the DF-CCSD(T); procedure. The choice of auxiliary basis is controlled by the keyword; |fnocc__df_basis_cc|. By default, |fnocc__df_basis_cc| is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
Security,access,accessible,"ng CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if |fnocc__cholesky_tolerance| is; sufficiently small (*e.g.* ``1e-9``). .. _`sec:fnogn`:. Gn theory; ~~~~~~~~~. The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]_\. The G2 procedure may be called through the; :py:func:`~psi4.driver.energy` wrapper: ::. energy('gaussian-2'). Supported methods; ~~~~~~~~~~~~~~~~~. The various methods supported by the FNOCC module in |Psifour| are; summarized in Table :ref:`FNOCC Methods <table:fnocc_methods>`; and detailed (except FNO) in Table :ref:`FNOCC Capabilities; <table:fnocc_stdsuite>`. Note that these methods are implemented; for closed-shell reference only. Without ``set qc_module fnocc``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>`. .. _`table:fnocc_methods`:. .. table:: Theoretical methods accessible through FNOCC. +-------------------------+---------------------------------------------------------------+-------+-------+; | name | calls method | plain | FNO |; +=========================+===============================================================+=======+=======+; | mp3 | third-order MP perturbation theory | E | E |; +-------------------------+---------------------------------------------------------------+-------+-------+; | mp4(sdq) | fourth-order MP perturbation theory, less triples | E | E |; +-------------------------+---------------------------------------------------------------+-------+-------+; | mp4 | full fourth-order MP perturbation theory | E | E |; +-------------------------+---------------------------------------------------------------+-------+-------+; | cisd | configuration interaction singles and doubles | E | E |; +-------------------------+---------------------------------------------------------------+-------+-------+; | qcisd | quadratic confi",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
Usability,simpl,simplified,"fno"" in; the energy call as ::. energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword |fnocc__active_nat_orbs|. This keyword will override the ; keyword |fnocc__occ_tolerance|. QCISD(T), CCSD(T), MP4, and CEPA; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The FNOCC module in |Psifour| supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968]_\ was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]_\. Consider the set of equations defining CCSD:. .. math::; :label: CCSD. \langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\. where we have chosen the intermediate normalization, ; :math:`\langle \Psi_0| \Psi \rangle = 1`, and the symbols :math:`T_1` ; and :math:`T_2` represent single and double excitation operators. The ; QCISD equations can be obtained by omitting all but two terms that ; are nonlinear in :math:`T_1` and :math:`T_2`:. .. math::; :label: QCISD. \langle \Psi_0 | (H - E) (1 + T_1 + T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + T_1T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^",MatchSource.DOCS,doc/sphinxman/source/fnocc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst
Availability,avail,available," to access directly to perform frequency calculations. Behind; the scenes, :py:func:`~psi4.driver.frequency` is a light wrapper over; :py:func:`~psi4.driver.hessian` that computes the Hessian then adds a; thermochemical analysis. .. autofunction:: psi4.frequency(name [, molecule, return_wfn, func, mode, dertype, irrep]); :noindex:. .. autofunction:: psi4.hessian(name [, molecule, return_wfn, func, dertype, irrep]); :noindex:. It's handy to collect the wavefunction after a frequency; calculation through ``e, wfn = psi4.frequency(...,; return_wfn=True)`` as the frequencies can be accessed through; :py:func:`psi4.core.Wavefunction.frequencies()`, the Hessian through; :py:func:`psi4.core.Wavefunction.hessian()`, and much other computation; info through ``psi4.core.Wavefunction.frequency_analysis``; (note no parentheses). Examples of using this data; structure can be found :srcsample:`fd-freq-gradient` and; :source:`tests/pytests/test_vibanalysis.py`. Formatted printing of vibrational; results is available through :py:func:`psi4.driver.qcdb.vib.print_vibs`. .. _`table:frequency_analysis`:. .. table:: Results accessible through ``psi4.core.Wavefunction.frequency_analysis``. +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | ndarray(ndof) complex (real/imag) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | q | normal mode, normalized mass-weighted | a0 u^1/2 | ndarray(ndof, ndof) float |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | w | normal mode, un-mass-weighted | a0 | ndarray(ndof, nd",MatchSource.DOCS,doc/sphinxman/source/freq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst
Energy Efficiency,reduce,reduced," +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | x | normal mode, normalized un-mass-weighted | a0 | ndarray(ndof, ndof) float |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | degeneracy | degree of degeneracy | | ndarray(ndof) int |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | TRV | translation/rotation/vibration | | ndarray(ndof) str 'TR' or 'V' or '-' for partial |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | gamma | irreducible representation | | ndarray(ndof) str irrep or None if unclassifiable |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | mu | reduced mass | u | ndarray(ndof) float (+/+) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | k | force constant | mDyne/A | ndarray(ndof) float (+/-) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | DQ0 | RMS deviation v=0 | a0 u^1/2 | ndarray(ndof) float (+/0) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | Qtp0 | Turning point v=0 | a0 u^1/2 | ndarray(ndof) float (+/0) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | Xtp0 | Turning point v=0 | a0 | ndarray(ndof) float (+/0) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | theta_vib | char temp | K | ndarray(n",MatchSource.DOCS,doc/sphinxman/source/freq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst
Integrability,wrap,wrapper,"ndation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; frequency(); pair: vibrational analysis; function call; pair: hessian; function call; see: freq(); frequency();; see: frequencies(); frequency();. .. _`sec:freq()`:. Harmonic Vibrational Analysis and Visualization of Normal Modes |w---w| :py:func:`~psi4.driver.frequency` and :py:func:`~psi4.driver.hessian`; =============================================================================================================================================. * :ref:`Psi4 Native Hessian Methods <table:freq_gen>`. For further discussion of vibrational and thermochemical analysis,; see Sec. :ref:`sec:thermo`. :py:func:`~psi4.driver.frequency` is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, :py:func:`~psi4.driver.frequency` is a light wrapper over; :py:func:`~psi4.driver.hessian` that computes the Hessian then adds a; thermochemical analysis. .. autofunction:: psi4.frequency(name [, molecule, return_wfn, func, mode, dertype, irrep]); :noindex:. .. autofunction:: psi4.hessian(name [, molecule, return_wfn, func, dertype, irrep]); :noindex:. It's handy to collect the wavefunction after a frequency; calculation through ``e, wfn = psi4.frequency(...,; return_wfn=True)`` as the frequencies can be accessed through; :py:func:`psi4.core.Wavefunction.frequencies()`, the Hessian through; :py:func:`psi4.core.Wavefunction.hessian()`, and much other computation; info through ``psi4.core.Wavefunction.frequency_analysis``; (note no parentheses). Examples of using this data; structure can be found :srcsample:`fd-freq-gradient` and; :source:`tests/pytests/test_vibanalysis.py`. Formatted printing of vibrational; results is available through :py:func:`psi4.driver.qcdb.vib.print_vibs`. .. _`table:frequency_analysis`:. .. table:: Results acc",MatchSource.DOCS,doc/sphinxman/source/freq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst
Performance,perform,perform,"ld have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; frequency(); pair: vibrational analysis; function call; pair: hessian; function call; see: freq(); frequency();; see: frequencies(); frequency();. .. _`sec:freq()`:. Harmonic Vibrational Analysis and Visualization of Normal Modes |w---w| :py:func:`~psi4.driver.frequency` and :py:func:`~psi4.driver.hessian`; =============================================================================================================================================. * :ref:`Psi4 Native Hessian Methods <table:freq_gen>`. For further discussion of vibrational and thermochemical analysis,; see Sec. :ref:`sec:thermo`. :py:func:`~psi4.driver.frequency` is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, :py:func:`~psi4.driver.frequency` is a light wrapper over; :py:func:`~psi4.driver.hessian` that computes the Hessian then adds a; thermochemical analysis. .. autofunction:: psi4.frequency(name [, molecule, return_wfn, func, mode, dertype, irrep]); :noindex:. .. autofunction:: psi4.hessian(name [, molecule, return_wfn, func, dertype, irrep]); :noindex:. It's handy to collect the wavefunction after a frequency; calculation through ``e, wfn = psi4.frequency(...,; return_wfn=True)`` as the frequencies can be accessed through; :py:func:`psi4.core.Wavefunction.frequencies()`, the Hessian through; :py:func:`psi4.core.Wavefunction.hessian()`, and much other computation; info through ``psi4.core.Wavefunction.frequency_analysis``; (note no parentheses). Examples of using this data; structure can be found :srcsample:`fd-freq-gradient` and; :source:`tests/pytests/test_vibanalysis.py`. Formatted printing of vibrational; res",MatchSource.DOCS,doc/sphinxman/source/freq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst
Security,access,access,"ld have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; frequency(); pair: vibrational analysis; function call; pair: hessian; function call; see: freq(); frequency();; see: frequencies(); frequency();. .. _`sec:freq()`:. Harmonic Vibrational Analysis and Visualization of Normal Modes |w---w| :py:func:`~psi4.driver.frequency` and :py:func:`~psi4.driver.hessian`; =============================================================================================================================================. * :ref:`Psi4 Native Hessian Methods <table:freq_gen>`. For further discussion of vibrational and thermochemical analysis,; see Sec. :ref:`sec:thermo`. :py:func:`~psi4.driver.frequency` is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, :py:func:`~psi4.driver.frequency` is a light wrapper over; :py:func:`~psi4.driver.hessian` that computes the Hessian then adds a; thermochemical analysis. .. autofunction:: psi4.frequency(name [, molecule, return_wfn, func, mode, dertype, irrep]); :noindex:. .. autofunction:: psi4.hessian(name [, molecule, return_wfn, func, dertype, irrep]); :noindex:. It's handy to collect the wavefunction after a frequency; calculation through ``e, wfn = psi4.frequency(...,; return_wfn=True)`` as the frequencies can be accessed through; :py:func:`psi4.core.Wavefunction.frequencies()`, the Hessian through; :py:func:`psi4.core.Wavefunction.hessian()`, and much other computation; info through ``psi4.core.Wavefunction.frequency_analysis``; (note no parentheses). Examples of using this data; structure can be found :srcsample:`fd-freq-gradient` and; :source:`tests/pytests/test_vibanalysis.py`. Formatted printing of vibrational; res",MatchSource.DOCS,doc/sphinxman/source/freq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst
Testability,test,tests,"see Sec. :ref:`sec:thermo`. :py:func:`~psi4.driver.frequency` is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, :py:func:`~psi4.driver.frequency` is a light wrapper over; :py:func:`~psi4.driver.hessian` that computes the Hessian then adds a; thermochemical analysis. .. autofunction:: psi4.frequency(name [, molecule, return_wfn, func, mode, dertype, irrep]); :noindex:. .. autofunction:: psi4.hessian(name [, molecule, return_wfn, func, dertype, irrep]); :noindex:. It's handy to collect the wavefunction after a frequency; calculation through ``e, wfn = psi4.frequency(...,; return_wfn=True)`` as the frequencies can be accessed through; :py:func:`psi4.core.Wavefunction.frequencies()`, the Hessian through; :py:func:`psi4.core.Wavefunction.hessian()`, and much other computation; info through ``psi4.core.Wavefunction.frequency_analysis``; (note no parentheses). Examples of using this data; structure can be found :srcsample:`fd-freq-gradient` and; :source:`tests/pytests/test_vibanalysis.py`. Formatted printing of vibrational; results is available through :py:func:`psi4.driver.qcdb.vib.print_vibs`. .. _`table:frequency_analysis`:. .. table:: Results accessible through ``psi4.core.Wavefunction.frequency_analysis``. +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | ndarray(ndof) complex (real/imag) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | q | normal mode, normalized mass-weighted | a0 u^1/2 | ndarray(ndof, ndof) float |; +---------------+--------------------------------------------+-----------+--------",MatchSource.DOCS,doc/sphinxman/source/freq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst
Availability,down,downloads,".. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: gau2grid, collocation. .. _`sec:gau2grid`:. Interface to gau2grid by D. G. A. Smith; =======================================. .. codeauthor:: D. G. A. Smith; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-gau2grid-5077AB.svg; :target: https://github.com/dgasmith/gau2grid. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/dgasmith/gau2grid/blob/master/README.md. |PSIfour|, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* gau2grid. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gau2grid/badges/version.svg; :target: https://anaconda.org/psi4/gau2grid. * gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/g",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
Deployability,configurat,configuration,".. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: gau2grid, collocation. .. _`sec:gau2grid`:. Interface to gau2grid by D. G. A. Smith; =======================================. .. codeauthor:: D. G. A. Smith; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-gau2grid-5077AB.svg; :target: https://github.com/dgasmith/gau2grid. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/dgasmith/gau2grid/blob/master/README.md. |PSIfour|, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* gau2grid. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gau2grid/badges/version.svg; :target: https://anaconda.org/psi4/gau2grid. * gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/g",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
Integrability,depend,dependent,"://github.com/dgasmith/gau2grid. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/dgasmith/gau2grid/blob/master/README.md. |PSIfour|, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* gau2grid. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gau2grid/badges/version.svg; :target: https://anaconda.org/psi4/gau2grid. * gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
Modifiability,config,configuration,".. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: gau2grid, collocation. .. _`sec:gau2grid`:. Interface to gau2grid by D. G. A. Smith; =======================================. .. codeauthor:: D. G. A. Smith; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-gau2grid-5077AB.svg; :target: https://github.com/dgasmith/gau2grid. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/dgasmith/gau2grid/blob/master/README.md. |PSIfour|, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* gau2grid. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gau2grid/badges/version.svg; :target: https://anaconda.org/psi4/gau2grid. * gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/g",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
Safety,detect,detect,"://github.com/dgasmith/gau2grid. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/dgasmith/gau2grid/blob/master/README.md. |PSIfour|, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* gau2grid. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gau2grid/badges/version.svg; :target: https://anaconda.org/psi4/gau2grid. * gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to",MatchSource.DOCS,doc/sphinxman/source/gau2grid.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst
Availability,avail,available,"c.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: gCP; .. _`sec:gcp`:. Interface to gCP by S. Grimme; =============================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Samples <apdx:testSuitegcp>`. .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/manGCP.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gcp/badges/version.svg; :target: https://anaconda.org/psi4/gcp. * There are two implementations of gCP; see :ref:`table:empdispimpl` . The newer; ""mctc"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""mctc-gcp"" is supported, though the now untested; ""classic"" continues to work for many applications. * gCP is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |PSIfour| conda package, the classic gcp conda package can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
Deployability,install,installer,".. sectionauthor:: Lori A. Burns. *Module:* :ref:`Samples <apdx:testSuitegcp>`. .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/manGCP.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gcp/badges/version.svg; :target: https://anaconda.org/psi4/gcp. * There are two implementations of gCP; see :ref:`table:empdispimpl` . The newer; ""mctc"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""mctc-gcp"" is supported, though the now untested; ""classic"" continues to work for many applications. * gCP is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |PSIfour| conda package, the classic gcp conda package can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
Energy Efficiency,energy,energy,"p-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |PSIfour| will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to ""empty"" th",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
Integrability,interface,interface,"p-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |PSIfour| will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to ""empty"" th",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
Modifiability,variab,variables,"t :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |P",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
Performance,optimiz,optimization,"mited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |PSIfour| will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to ""empty"" the basis; option for the scope of the current calculation, ``energy(""hf3c/"")``. A few practical examples:. * HF-3c single point with default minix basis ::. energy('hf3c'). * PBEh-3c optimization with default def2-mSVP basis ::. optimize('pbeh3c'). * r2SCAN-3c with default basis after basis set ::. set basis cc-pvdz; energy('r2scan3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the ``gcp`` program can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_gcp`. (This function; is the same |PSIfour|/``gcp`` interface that is called during an scf job.); This route is much faster than running a HF or DFT energy. ::. molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). .. autofunction:: qcdb.Molecule.run_gcp. ",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
Safety,detect,detect,"kage can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
Testability,test,testSuitegcp,"sponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: gCP; .. _`sec:gcp`:. Interface to gCP by S. Grimme; =============================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Samples <apdx:testSuitegcp>`. .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/manGCP.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gcp/badges/version.svg; :target: https://anaconda.org/psi4/gcp. * There are two implementations of gCP; see :ref:`table:empdispimpl` . The newer; ""mctc"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""mctc-gcp"" is supported, though the now untested; ""classic"" continues to work for many applications. * gCP is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
Usability,simpl,simply,"t :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |P",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
Availability,avail,available," .. include:: autodoc_abbr_options_c.rst. .. index:: ; DMA; GDMA; Distributed Multipole Analysis. .. _`sec:gdma`:. Interface to GDMA Distributed Multipole Analysis by A. J. Stone |w---w| :py:func:`~psi4.driver.gdma`; ====================================================================================================. .. codeauthor:: Anthony J. Stone, Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. *Module:* :ref:`Keywords <apdx:gdma>`, :ref:`PSI Variables <apdx:gdma_psivar>`, :source:`GDMA_INTERFACE<psi4/src/psi4/gdma_interface>`. .. image:: https://img.shields.io/badge/home-gdma-5077AB.svg; :target: https://github.com/psi4/gdma. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www-stone.ch.cam.ac.uk/documentation/gdma/manual.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gdma/badges/version.svg; :target: https://anaconda.org/psi4/gdma. * GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gdma has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gdma can be obtained through ``conda install gdma -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_gdma`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and act",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
Deployability,install,installed,"Analysis. .. _`sec:gdma`:. Interface to GDMA Distributed Multipole Analysis by A. J. Stone |w---w| :py:func:`~psi4.driver.gdma`; ====================================================================================================. .. codeauthor:: Anthony J. Stone, Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. *Module:* :ref:`Keywords <apdx:gdma>`, :ref:`PSI Variables <apdx:gdma_psivar>`, :source:`GDMA_INTERFACE<psi4/src/psi4/gdma_interface>`. .. image:: https://img.shields.io/badge/home-gdma-5077AB.svg; :target: https://github.com/psi4/gdma. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www-stone.ch.cam.ac.uk/documentation/gdma/manual.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gdma/badges/version.svg; :target: https://anaconda.org/psi4/gdma. * GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gdma has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gdma can be obtained through ``conda install gdma -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_gdma`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, ",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
Integrability,depend,dependent,". *Module:* :ref:`Keywords <apdx:gdma>`, :ref:`PSI Variables <apdx:gdma_psivar>`, :source:`GDMA_INTERFACE<psi4/src/psi4/gdma_interface>`. .. image:: https://img.shields.io/badge/home-gdma-5077AB.svg; :target: https://github.com/psi4/gdma. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www-stone.ch.cam.ac.uk/documentation/gdma/manual.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gdma/badges/version.svg; :target: https://anaconda.org/psi4/gdma. * GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gdma has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gdma can be obtained through ``conda install gdma -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_gdma`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is available in |PSIfour|.; The current implementation simply embeds Stone's GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
Modifiability,config,configure,"UTED MULTIPOLES'); tot_results = get_array_variable('DMA TOTAL MULTIPOLES'). The first contains distributed multipoles, in units given by; |gdma__gdma_multipole_units|, with the row index corresponding to the site and; the column index referencing the multipole component. Both indices are zero; based, and the :math:`Q^l_m` components of the multipoles are ordered as; :math:`Q^0_0, Q^1_0, Q^1_{1c}, Q^1_{1s}, Q^2_0, Q^2_{1c}, Q^2_{1s}, Q^2_{2c},; Q^2_{2s}, \ldots` The second matrix returned has a single row, whose columns; are the total multipoles, translated to |gdma__gdma_origin|, and summed. .. autofunction:: psi4.gdma(wfn); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/gdma__gdma_limit.rst; .. include:: autodir_options_c/gdma__gdma_origin.rst; .. include:: autodir_options_c/gdma__gdma_multipole_units.rst; .. include:: autodir_options_c/gdma__gdma_radius.rst; .. include:: autodir_options_c/gdma__gdma_switch.rst. .. _`cmake:gdma`:. How to configure gdma for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) gdma. * Upstream Dependencies |w---w| gdma |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_gdma` |w---w| CMake variable toggling whether Psi4 builds with gdma; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing ``include/GDMA/GDMA_MANGLE.h``; * :makevar:`gdma_DIR` |w---w| CMake variable to specify where pre-built gdma can be found. Set to installation directory containing ``share/cmake/gdma/gdmaConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gdma` |w---w| CMake variable to force internal build of gdma instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gdma` |w---w| CMake variable to force ",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
Safety,detect,detect,". *Module:* :ref:`Keywords <apdx:gdma>`, :ref:`PSI Variables <apdx:gdma_psivar>`, :source:`GDMA_INTERFACE<psi4/src/psi4/gdma_interface>`. .. image:: https://img.shields.io/badge/home-gdma-5077AB.svg; :target: https://github.com/psi4/gdma. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www-stone.ch.cam.ac.uk/documentation/gdma/manual.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gdma/badges/version.svg; :target: https://anaconda.org/psi4/gdma. * GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gdma has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gdma can be obtained through ``conda install gdma -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_gdma`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is available in |PSIfour|.; The current implementation simply embeds Stone's GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
Security,access,accessed,"; :download:`GDMA manual <gdma-2.3.pdf>`. If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory |PSIfour|; is called from, and provide the file name as the datafile argument to the; :py:func:`~psi4.driver.gdma` routine. For example, if GDMA data file is called; *control.dma*, the GDMA code is called as follows::. grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by |globals__writer_file_label| (if set), or else by the name; of the output file plus the name of the current molecule, and the suffix will; be '.fchk'. This FCHK file name should be passed to the 'File' keyword in the; DGMA data file, to ensure that the GDMA code reads the correct wavefunction; information. After running, two matrices of results can be accessed::. dma_results = get_array_variable('DMA DISTRIBUTED MULTIPOLES'); tot_results = get_array_variable('DMA TOTAL MULTIPOLES'). The first contains distributed multipoles, in units given by; |gdma__gdma_multipole_units|, with the row index corresponding to the site and; the column index referencing the multipole component. Both indices are zero; based, and the :math:`Q^l_m` components of the multipoles are ordered as; :math:`Q^0_0, Q^1_0, Q^1_{1c}, Q^1_{1s}, Q^2_0, Q^2_{1c}, Q^2_{1s}, Q^2_{2c},; Q^2_{2s}, \ldots` The second matrix returned has a single row, whose columns; are the total multipoles, translated to |gdma__gdma_origin|, and summed. .. autofunction:: psi4.gdma(wfn); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/gdma__gdma_limit.rst; .. include:: autodir_options_c/gdma__gdma_origin.rst; .. include:: autodir_options_c/gdma__gdma_multipole_units.rst; .. include:: autodir_options_c/gdma__gdma_radius.rst; .. include:: autodir_options_c/gdma__g",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
Usability,simpl,simply,"-c psi4``.; Then enable it as a feature with :makevar:`ENABLE_gdma`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is available in |PSIfour|.; The current implementation simply embeds Stone's GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section :ref:`FCHK <sec:fchk>`) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the ; :download:`GDMA manual <gdma-2.3.pdf>`. If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory |PSIfour|; is called from, and provide the file name as the datafile argument to the; :py:func:`~psi4.driver.gdma` routine. For example, if GDMA data file is called; *control.dma*, the GDMA code is called as follows::. grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will hav",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
Availability,avail,available," ENERGY; CUSTOM SCS-LCCD TOTAL ENERGY; CUSTOM SCS-LCCD CORRELATION ENERGY; CUSTOM SCS-OMP2 TOTAL ENERGY; CUSTOM SCS-OMP2 CORRELATION ENERGY; CUSTOM SCS-OMP2.5 TOTAL ENERGY; CUSTOM SCS-OMP2.5 CORRELATION ENERGY; CUSTOM SCS-OMP3 TOTAL ENERGY; CUSTOM SCS-OMP3 CORRELATION ENERGY; CUSTOM SCS-OREMP2 TOTAL ENERGY; CUSTOM SCS-OREMP2 CORRELATION ENERGY; CUSTOM SCS-OLCCD TOTAL ENERGY; CUSTOM SCS-OLCCD CORRELATION ENERGY. Changeable quantities based on options.; The total electronic energy [E_h] and correlation energy component [E_h]; for the method formed by any reweighting of the named :samp:`{method} DOUBLES ENERGY`; for opposite-spin and same-spin contributions, with; any singles carried along.; Contrast with :samp`SCS-{method} TOTAL ENERGY`. .. psivar:: db_name DATABASE MEAN ABSOLUTE DEVIATION. The mean absolute deviation [\ |kcalpermol|\ ] of the requested method; *name* from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }. .. psivar:: db_name DATABASE MEAN SIGNED DEVIATION. The mean deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}. .. psivar:: db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. The rms deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}. .. psivar:: DCT LAMBDA ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 2-electron cumulant's contri",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
Deployability,configurat,configuration,"AL ENERGY; CCSDT(Q)/A CORRELATION ENERGY; CCSDT(Q)/B TOTAL ENERGY; CCSDT(Q)/B CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the modified CCSDT(Q) level of theory. .. psivar:: CEPA(0) DIPOLE. Dipole array [e a0] for the coupled electron pair approximation variant 0 level of theory, (3,). .. psivar:: CEPA(0) QUADRUPOLE. Redundant quadrupole array [e a0^2] for the coupled electron pair approximation variant 0 level of theory, (3, 3). .. psivar:: CEPA(0) TOTAL ENERGY; CEPA(0) CORRELATION ENERGY; CEPA(1) TOTAL ENERGY; CEPA(1) CORRELATION ENERGY; CEPA(2) TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
Energy Efficiency,energy,energy,"; the variable name that vary by root number, calculation order, etc.; See text for fuller description. .. psivar:: [T] CORRECTION ENERGY. The coupled-cluster bracket perturbative triples correction [E_h]. .. psivar:: (T) CORRECTION ENERGY. The coupled-cluster perturbative triples correction [E_h]. .. psivar:: (AT) CORRECTION ENERGY; A-(T) CORRECTION ENERGY. The coupled-cluster asymmetric perturbative triples correction [E_h]. .. psivar:: AAA (T) CORRECTION ENERGY; AAB (T) CORRECTION ENERGY; ABB (T) CORRECTION ENERGY; BBB (T) CORRECTION ENERGY. Spin components of the UHF-based coupled-cluster perturbative triples correction [E_h]. .. psivar:: ACPF DIPOLE. Dipole array [e a0] for the averaged coupled-pair functional level of theory, (3,). .. psivar:: ACPF QUADRUPOLE. Redundant quadrupole array [e a0^2] for the averaged coupled-pair functional level of theory, (3, 3). .. psivar:: ACPF TOTAL ENERGY; ACPF CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the averaged coupled-pair functional level of theory. .. psivar:: ADC ROOT 0 -> ROOT n EXCITATION ENERGY; TD-fctl ROOT 0 -> ROOT n EXCITATION ENERGY. The excitation energy [E_h] from ground state to root *n*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 (IN h) -> ROOT n (IN i) EXCITATION ENERGY; TD-fctl ROOT 0 (IN h) -> ROOT n (IN i) EXCITATION ENERGY. The excitation energy [E_h] from the ground state (which is of irrep *h*); to root *n* within irrep *i*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 (h) -> ROOT n (i) EXCITATION ENERGY; TD-fctl ROOT 0 (h) -> ROOT n (i) EXCITATION ENERGY. The excitation energy [E_h] from the ground state (which is of irrep *h*); to root *n* (which is of irrep *i*).; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 -> ROOT n EXCITATION ENERGY - h TRANSITION; TD-fctl ROOT 0 -> ROOT n EXCITATION ENERGY - h TRANSITION. The excitation energy [E_h] from the ground state to root *n*, and the; transition is",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
Integrability,depend,dependence,"its [(e^2 a0^3)/E_h] calculated at; the CC level for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 SPECIFIC ROTATION (LEN) @ xNM; CCSD SPECIFIC ROTATION (LEN) @ xNM. The specific rotation [deg/(dm (g/cm^3))] calculated at the CC level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 SPECIFIC ROTATION (VEL) @ xNM; CCSD SPECIFIC ROTATION (VEL) @ xNM. The specific rotation [deg/(dm (g/cm^3))] calculated at the CC level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 SPECIFIC ROTATION (MVG) @ xNM; CCSD SPECIFIC ROTATION (MVG) @ xNM. The specific rotation [deg/(dm (g/cm^3))] calculated at the CC level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 ROTATION (LEN) ORIGIN-DEPENDENCE @ xNM; CCSD ROTATION (LEN) ORIGIN-DEPENDENCE @ xNM. The origin-dependence of the CC specific rotation in deg/[dm (g/cm^3)]/bohr and the; length gauge, computed at (x) wavelength, (x) rounded to nearest integer. .. psivar:: CCD TOTAL ENERGY; CCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the coupled-cluster doubles level of theory. .. psivar:: CC ALPHA-ALPHA PAIR ENERGIES; CCSD ALPHA-ALPHA PAIR ENERGIES; CC2 ALPHA-ALPHA PAIR ENERGIES; CC3 ALPHA-ALPHA PAIR ENERGIES; MP2 ALPHA-ALPHA PAIR ENERGIES. Restricted-reference same-spin pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CC ALPHA-BETA PAIR ENERGIES; CCSD ALPHA-BETA PAIR ENERGIES; CC2 ALPHA-BETA PAIR ENERGIES; CC3 ALPHA-BETA PAIR ENERGIES; MP2 ALPHA-BETA PAIR ENERGIES. Restricted-reference opposite-spin (alpha first) pair energies for coupled-cluster; theories. Size number of active doubly occupied orbitals, square. .. psivar:: CC SINGLET PAIR ENERGIES; CCSD SINGLET PAIR ENERGIES; CC2 SINGLET PAIR ENERGIES; CC3 SINGLET PAIR ENERGIES; MP2 SINGLET ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
Modifiability,variab,variable,"3 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. * NOTES (LAB 3-26-2012); * Any PSI variable added to the codebase should be added to this list; (variables in the psi variable by module list will show up black; and un-clickable if an entry isn't present here).; * INCLUDE UNITS!; * ALPHABETIZE!. .. include:: autodoc_abbr_options_c.rst. .. _`apdx:psivariables_alpha`:. PSI Variables by Alpha; ======================. .. note:: Lowercase letters in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. .. psivar:: [T] CORRECTION ENERGY. The coupled-cluster bracket perturbative triples correction [E_h]. .. psivar:: (T) CORRECTION ENERGY. The coupled-cluster perturbative triples correction [E_h]. .. psivar:: (AT) CORRECTION ENERGY; A-(T) CORRECTION ENERGY. The coupled-cluster asymmetric perturbative triples correction [E_h]. .. psivar:: AAA (T) CORRECTION ENERGY; AAB (T) CORRECTION ENERGY; ABB (T) CORRECTION ENERGY; BBB (T) CORRECTION ENERGY. Spin components of the UHF-based coupled-cluster perturbative triples correction [E_h]. .. psivar:: ACPF DIPOLE. Di",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
Performance,perform,performs,"ional labeled if canonical. .. psivar:: ADC ROOT 0 -> ROOT n ROTATORY STRENGTH (VEL) - h TRANSITION; CCname ROOT m -> ROOT n ROTATORY STRENGTH (VEL) - h TRANSITION; TD-fctl ROOT 0 -> ROOT n ROTATORY STRENGTH (VEL) - h TRANSITION. The velocity-gauge oscillator strength of the transition from root *m* to root *n*,; and the transition is of irrep *h*.; DFT functional labeled if canonical. .. psivar:: AQCC DIPOLE. Dipole array [e a0] for the averaged quadratic coupled-cluster level of theory, (3,). .. psivar:: AQCC QUADRUPOLE. Redundant quadrupole array [e a0^2] for the averaged quadratic coupled-cluster level of theory, (3, 3). .. psivar:: AQCC TOTAL ENERGY; AQCC CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the averaged quadratic coupled-cluster level of theory.; .. psivar:: BRUECKNER CONVERGED. Value 1 (0) when the Brueckner orbitals have (have not) converged. .. psivar:: CBS NUMBER; NBODY NUMBER; FINDIF NUMBER. Number of tasks [] the named procedure performs. These are immediate; tasks, so if procedures are nested, the total number of tasks is; the product. .. psivar:: CBS TOTAL ENERGY; CBS CORRELATION ENERGY; CBS REFERENCE ENERGY. The total electronic energy [E_h] and its breakdown into reference total; energy [E_h] and correlation correction components [E_h] for the compound; method requested through cbs(). .. psivar:: CCname ROOT n TOTAL ENERGY; TD-fctl ROOT n TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) TOTAL ENERGY; TD-fctl ROOT n (IN h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* within irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (h) TOTAL ENERGY; TD-fctl ROOT n (h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n*, which is of irrep *h* (*n* starts at 0).;",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
Energy Efficiency,adapt,adapt,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. Psithon documentation master file, created by; sphinx-quickstart on Sun Feb 12 04:25:25 2012.; You can adapt this file completely to your liking, but it should at least; contain the root `toctree` directive. ==========================================; |PSIfour|\ : Open-Source Quantum Chemistry; ==========================================. .. toctree::; :maxdepth: 2; :caption: Contents:; ; introduction; external; index_tutorials; psithoninput; methods; interfacing; psithonfunc; customizing. .. toctree::; :maxdepth: 3. appendices. ===================; Programmers' Manual; ===================. .. toctree::; :maxdepth: 2. prog_intro; prog_newcode; prog_corelibs; prog_integrals; add_tests; prog_debug_profile; documentation; code_style; psipep; manage_index; psi4api; external_apis. * Indices. - :ref:`genindex`; - :ref:`modindex`; - :ref:`search`. .. comment autodoc_available_plugins; ",MatchSource.DOCS,doc/sphinxman/source/index.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/index.rst
Modifiability,adapt,adapt,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. Psithon documentation master file, created by; sphinx-quickstart on Sun Feb 12 04:25:25 2012.; You can adapt this file completely to your liking, but it should at least; contain the root `toctree` directive. ==========================================; |PSIfour|\ : Open-Source Quantum Chemistry; ==========================================. .. toctree::; :maxdepth: 2; :caption: Contents:; ; introduction; external; index_tutorials; psithoninput; methods; interfacing; psithonfunc; customizing. .. toctree::; :maxdepth: 3. appendices. ===================; Programmers' Manual; ===================. .. toctree::; :maxdepth: 2. prog_intro; prog_newcode; prog_corelibs; prog_integrals; add_tests; prog_debug_profile; documentation; code_style; psipep; manage_index; psi4api; external_apis. * Indices. - :ref:`genindex`; - :ref:`modindex`; - :ref:`search`. .. comment autodoc_available_plugins; ",MatchSource.DOCS,doc/sphinxman/source/index.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/index.rst
Energy Efficiency,energy,energy,"free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:intercalls`:. Function Intercalls; ===================. This topic is in transition. As of 1.0, the functionality provided by; ``cp()`` and ``cbs()`` should not be accessed directly. Instead, use the; ``cp`` kwarg and/or the extended method syntax like; ``'mp3/aug-cc-pv[dt]z'`` to ``energy()``, ``opt()``, *etc.*, respectively. For many of the |PSIfour| Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). .. _`table:intercalls`:. .. table:: Permitted nesting of Psithon functions. +-------------------------+-----+-----+-----+-----+--------+; | Caller | Callee |; +-------------------------+-----+-----+-----+-----+--------+; | | cp | db | opt | cbs | energy |; +=========================+=====+=====+=====+=====+========+; | :ref:`sec:cp()` | | --- | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:db()`",MatchSource.DOCS,doc/sphinxman/source/intercalls.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst
Modifiability,extend,extended,"free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:intercalls`:. Function Intercalls; ===================. This topic is in transition. As of 1.0, the functionality provided by; ``cp()`` and ``cbs()`` should not be accessed directly. Instead, use the; ``cp`` kwarg and/or the extended method syntax like; ``'mp3/aug-cc-pv[dt]z'`` to ``energy()``, ``opt()``, *etc.*, respectively. For many of the |PSIfour| Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). .. _`table:intercalls`:. .. table:: Permitted nesting of Psithon functions. +-------------------------+-----+-----+-----+-----+--------+; | Caller | Callee |; +-------------------------+-----+-----+-----+-----+--------+; | | cp | db | opt | cbs | energy |; +=========================+=====+=====+=====+=====+========+; | :ref:`sec:cp()` | | --- | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:db()`",MatchSource.DOCS,doc/sphinxman/source/intercalls.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst
Performance,optimiz,optimize,"hout even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:intercalls`:. Function Intercalls; ===================. This topic is in transition. As of 1.0, the functionality provided by; ``cp()`` and ``cbs()`` should not be accessed directly. Instead, use the; ``cp`` kwarg and/or the extended method syntax like; ``'mp3/aug-cc-pv[dt]z'`` to ``energy()``, ``opt()``, *etc.*, respectively. For many of the |PSIfour| Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). .. _`table:intercalls`:. .. table:: Permitted nesting of Psithon functions. +-------------------------+-----+-----+-----+-----+--------+; | Caller | Callee |; +-------------------------+-----+-----+-----+-----+--------+; | | cp | db | opt | cbs | energy |; +=========================+=====+=====+=====+=====+========+; | :ref:`sec:cp()` | | --- | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:db()` | --- | | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:opt()` | --- | --- | | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:cbs()` | --- | --- | --- | | Y |; +-------------------------+-----+-----+-----+--",MatchSource.DOCS,doc/sphinxman/source/intercalls.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst
Security,access,accessed,"ies are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:intercalls`:. Function Intercalls; ===================. This topic is in transition. As of 1.0, the functionality provided by; ``cp()`` and ``cbs()`` should not be accessed directly. Instead, use the; ``cp`` kwarg and/or the extended method syntax like; ``'mp3/aug-cc-pv[dt]z'`` to ``energy()``, ``opt()``, *etc.*, respectively. For many of the |PSIfour| Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). .. _`table:intercalls`:. .. table:: Permitted nesting of Psithon functions. +-------------------------+-----+-----+-----+-----+--------+; | Caller | Callee |; +-------------------------+-----+-----+-----+-----+--------+; | | cp | db | opt | cbs | energy |; +=========================+=====+=====+=====+=====+========+; | :ref:`sec",MatchSource.DOCS,doc/sphinxman/source/intercalls.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst
Availability,avail,available,"======; Introduction; ============. Overview; ========. |PSIfour| provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculations.; Sec. :ref:`Tutorial <sec:tutorial>` provides a brief tutorial to help new users; get started. Section :ref:`Psithon <sec:psithonInput>` offers further details int",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
Deployability,release,releases,"ere.; For the latest |PSIfour| documentation, check; `www.psicode.org <http://www.psicode.org>`_. Citing |PSIfour|; ================. Overall |PSIfour| Package; ^^^^^^^^^^^^^^^^^^^^^^^^^. The following citation should be used in any publication utilizing the; |PSIfour| program package:. * ""Psi4 1.4: Open-Source Software for High-Throughput Quantum Chemistry"",; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C.; Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A.; M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B.; Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O'Brien, J. M.; Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F.; Schaefer III, A. Yu. Sokolov, K. Patkowski, A. E. DePrince III, U.; Bozkaya, R. A. King, F. A. Evangelista, J. M. Turney, T. D. Crawford, C.; D. Sherrill, *J. Chem. Phys.* (2020).; (doi: `10.1063/5.0006002; <https://doi.org/10.1063/5.0006002>`_). The following citation covers |PSIfour| early stable releases:. * ""Psi4 1.1: An Open-Source Electronic Structure Program Emphasizing; Automation, Advanced Libraries, and Interoperability"", R. M. Parrish, L.; A. Burns, D. G. A. Smith, A. C. Simmonett, A. E. DePrince III, E. G.; Hohenstein, U. Bozkaya, A. Yu. Sokolov, R. Di Remigio, R. M. Richard, J.; F. Gonthier, A. M. James, H. R. McAlexander, A. Kumar, M. Saitow, X. Wang,; B. P. Pritchard, P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King,; E. F. Valeev, F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D.; Sherrill, *J. Chem. Theory Comput.*, **13(7)** 3185--3197 (2017).; (doi: `10.1021/acs.jctc.7b00174; <https://doi.org/10.1021/acs.jctc.7b00174>`_). The following citation covers |PSIfour| alpha and beta versions:. * ""Psi4: An open-source *ab initio* electronic structure program,""; J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein, F.; Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke, M. L.; Abrams, N. J. Russ, M. L. Leinin",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
Energy Efficiency,efficient,efficiently,"ware; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:introduction`:. ============; Introduction; ============. Overview; ========. |PSIfour| provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for e",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
Integrability,rout,routine,"on 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:introduction`:. ============; Introduction; ============. Overview; ========. |PSIfour| provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster ",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
Modifiability,adapt,adapted,"ficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculations.; Sec. :ref:`Tutorial <sec:tutorial>` provides a brief tutorial to help new users; get started. Section :ref:`Psithon <sec:psithonInput>` offers further details into the; structure of |PSIfour| input files and how Python can be mixed with; quantum chemistry directives in |PSIfour|. Section :ref:`Psithon Functions <sec:psithonFunc>`; provides more detail on the Python functions provided by |PSIfour|; and discuss",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
Performance,optimiz,optimized,"ple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculations.; Sec. :ref:`Tutorial <sec:tutorial>` provides a brief tutorial to help new users; get started. Section :ref:`Psithon <sec:psithonInput>` offers further details into the; structure of |PSIfour| input files and how Python can be mixed with; quantum chemistry directives in |PSIfour|. Section :ref:`Psithon Functions <sec:psithonFunc>`; provides more detail on the Python functions provided by |PSIfour|; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire d",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
Security,access,access,"odules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculations.; Sec. :ref:`Tutorial <sec:tutorial>` provides a brief tutorial to help new users; get started. Section :ref:`Psithon <sec:psithonInput>` offers further details into the; structure of |PSIfour| input files and how Python can be mixed with; quantum chemistry directives in |PSIfour|. Section :ref:`Psithon Functions <sec:psithonFunc>`; provides more detail on the Python functions provided by |PSIfour|; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using |PSIfour|; (*e.g.*, Hartree |--| Fock, MP2, coupled-cluster) and g",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
Testability,test,test,". # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:introduction`:. ============; Introduction; ============. Overview; ========. |PSIfour| provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculati",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
Usability,simpl,simple,"on 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:introduction`:. ============; Introduction; ============. Overview; ========. |PSIfour| provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster ",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
Availability,down,downloads," General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: LIBEFP, EFP. .. _`sec:libefp`:. Interface to LIBEFP by I. Kaliman; =================================. .. codeauthor:: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <psi4/driver/procrouting/solvent/efp.py>`. .. image:: https://img.shields.io/badge/home-libefp-5077AB.svg; :target: https://github.com/libefp2/libefp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/libefp2/libefp. |PSIfour| contains code to interface to the LIBEFP library developed; in L. Slipchenko's group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; |Psifour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libefp/badges/version.svg; :target: https://anaconda.org/psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. libefp from conda without thinking, consult. * To remove a conda installation, ``conda remove libefp``. **Sou",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
Deployability,configurat,configuration," General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: LIBEFP, EFP. .. _`sec:libefp`:. Interface to LIBEFP by I. Kaliman; =================================. .. codeauthor:: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <psi4/driver/procrouting/solvent/efp.py>`. .. image:: https://img.shields.io/badge/home-libefp-5077AB.svg; :target: https://github.com/libefp2/libefp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/libefp2/libefp. |PSIfour| contains code to interface to the LIBEFP library developed; in L. Slipchenko's group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; |Psifour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libefp/badges/version.svg; :target: https://anaconda.org/psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. libefp from conda without thinking, consult. * To remove a conda installation, ``conda remove libefp``. **Sou",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
Energy Efficiency,energy,energy,"or QM <sec:moleculeKeywords>`, the center of mass; coordinates in the XYZABC format and all coordinates in the POINTS format are; taken to be in Angstroms by default or in Bohr if ``units au`` is present.; Charge and multiplicity specifications are encoded in the fragment file; and so are not read from input. Any combination of EFP and QM fragments can be placed in a molecule; even; the oddity below is legitimate. Note that symmetry and reorientation are; automatically turned off when EFP fragments are present (``symmetry c1``; and ``no_com`` and ``no_reorient`` are implied). ::. molecule qmefp {; efp nh3 0.0 0.0 5.0 5 2 8; --; C 0.0 0.0 0.0; O 0.0 1.5 0.0; O 0.0 -1.5 0.0; --; efp h2o 5.0 0.0 0.0 5 2 8; --; He -3.0 4.0 4.0; He -4.0 5.0 4.0; --; efp ch3oh; 1.275 -2.447 -4.673; 0.709 -3.191 -3.592; 2.213 -1.978 -4.343; }. Running EFP ; ~~~~~~~~~~~~. EFP can be invoked in similar fashion as other theories provided in |PSIfour|.; For example, if you want to obtain the EFP interaction energy for benzene and two waters,; simply provide the following::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o 4.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. |PSIfour| can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; :ref:`SCF <sec:scf>` code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below. ::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0 ; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. .. warning:: Although the EFP geometry is specified alongside the QM; geometry in a ``molecule name {...}`` block, internally th",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
Integrability,interface,interface,"sser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: LIBEFP, EFP. .. _`sec:libefp`:. Interface to LIBEFP by I. Kaliman; =================================. .. codeauthor:: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <psi4/driver/procrouting/solvent/efp.py>`. .. image:: https://img.shields.io/badge/home-libefp-5077AB.svg; :target: https://github.com/libefp2/libefp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/libefp2/libefp. |PSIfour| contains code to interface to the LIBEFP library developed; in L. Slipchenko's group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; |Psifour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libefp/badges/version.svg; :target: https://anaconda.org/psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. li",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
Modifiability,config,configuration," General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: LIBEFP, EFP. .. _`sec:libefp`:. Interface to LIBEFP by I. Kaliman; =================================. .. codeauthor:: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <psi4/driver/procrouting/solvent/efp.py>`. .. image:: https://img.shields.io/badge/home-libefp-5077AB.svg; :target: https://github.com/libefp2/libefp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/libefp2/libefp. |PSIfour| contains code to interface to the LIBEFP library developed; in L. Slipchenko's group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; |Psifour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libefp/badges/version.svg; :target: https://anaconda.org/psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. libefp from conda without thinking, consult. * To remove a conda installation, ``conda remove libefp``. **Sou",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
Performance,perform,perform,"https://img.shields.io/github/tag/ilyak/libefp.svg?maxAge=2592000; :target: https://github.com/ilyak/libefp. * If using |PSIfour| built from source and you want libefp built from; from source also,; enable it as a feature with :makevar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed :ref:`here <sec:availableEFPFragments>`; with source https://github.com/libefp2/libefp/tree/master/fraglib. Any of these may be used directly in; a |PSIfour| input file as described :ref:`here <sec:usingEFPFragments>`. .. comment .. note:: The built-in fragment library distributed with Q-Chem (as of version 4.0.1) is *not*; .. comment equivalent to that distributed with LIBEFP. Although many of the same; .. comment molecules are present and should perform similarly in computations,; .. comment exact matches of fragment geometries or efp energies should not be; .. comment expected. See files in test case directories :source:`qchem-efp-sp; .. comment <tests/libefp/qchem-efp-sp>` and :source:`qchem-qmefp-sp; .. comment <tests/libefp/qchem-qmefp-sp>` for equivalent Q-Chem and |PSIfour|; .. comment EFP input files. Creating new efp fragments requires the `GAMESS; <https://www.msg.chem.iastate.edu/gamess/index.html>`_ quantum chemistry package.; Instructions on building new fragments are `here; <https://github.com/libefp2/libefp#how-to-create-custom-efp-fragment-types>`_.; Once your new fragment is ready, make it accessible to |PSIfour| by; including the directory in which the ``.efp`` file is located to the colon; separated environment variable :envvar:`PSIPATH`. Fragments are searched; for first in the current directory, next in the paths of :envvar:`PSIPATH`, and; finally in built-in library. If |PSIfour| is unable to find the; f",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
Safety,detect,detect,"befp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/libefp2/libefp. |PSIfour| contains code to interface to the LIBEFP library developed; in L. Slipchenko's group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; |Psifour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libefp/badges/version.svg; :target: https://anaconda.org/psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. libefp from conda without thinking, consult. * To remove a conda installation, ``conda remove libefp``. **Source**. * .. image:: https://img.shields.io/github/tag/ilyak/libefp.svg?maxAge=2592000; :target: https://github.com/ilyak/libefp. * If using |PSIfour| built from source and you want libefp built from; from source also,; enable it as a feature with :makevar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed :ref:`here <sec:availableEFPFragments>`; with source https://github.com/libefp2/libefp/tree/master/fraglib. Any of these may be used directly in; a |PS",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
Security,access,accessible,"ctly in; a |PSIfour| input file as described :ref:`here <sec:usingEFPFragments>`. .. comment .. note:: The built-in fragment library distributed with Q-Chem (as of version 4.0.1) is *not*; .. comment equivalent to that distributed with LIBEFP. Although many of the same; .. comment molecules are present and should perform similarly in computations,; .. comment exact matches of fragment geometries or efp energies should not be; .. comment expected. See files in test case directories :source:`qchem-efp-sp; .. comment <tests/libefp/qchem-efp-sp>` and :source:`qchem-qmefp-sp; .. comment <tests/libefp/qchem-qmefp-sp>` for equivalent Q-Chem and |PSIfour|; .. comment EFP input files. Creating new efp fragments requires the `GAMESS; <https://www.msg.chem.iastate.edu/gamess/index.html>`_ quantum chemistry package.; Instructions on building new fragments are `here; <https://github.com/libefp2/libefp#how-to-create-custom-efp-fragment-types>`_.; Once your new fragment is ready, make it accessible to |PSIfour| by; including the directory in which the ``.efp`` file is located to the colon; separated environment variable :envvar:`PSIPATH`. Fragments are searched; for first in the current directory, next in the paths of :envvar:`PSIPATH`, and; finally in built-in library. If |PSIfour| is unable to find the; fragment, an error will be reported. .. note:: When constructing new fragment files, the name of the name of the; file should be lowercase and have extension ``.efp``. The molecule name; within the file, *e.g.*, ``$NH3`` must correspond to the name of the; fragment file. .. index:: molecule; EFP; single: EFP; molecule specification. .. _`sec:usingEFPFragments`:. Molecule Specification; ~~~~~~~~~~~~~~~~~~~~~~. EFP fragment geometries are specified alongside the quantum mechanical; (QM) molecule and make use of the ``--`` fragment separation scheme; described :ref:`here <sec:fragments>`. Each EFP fragment has its own; fragment section that includes the label ``efp``, the name of the",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
Testability,test,test,"built from; from source also,; enable it as a feature with :makevar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed :ref:`here <sec:availableEFPFragments>`; with source https://github.com/libefp2/libefp/tree/master/fraglib. Any of these may be used directly in; a |PSIfour| input file as described :ref:`here <sec:usingEFPFragments>`. .. comment .. note:: The built-in fragment library distributed with Q-Chem (as of version 4.0.1) is *not*; .. comment equivalent to that distributed with LIBEFP. Although many of the same; .. comment molecules are present and should perform similarly in computations,; .. comment exact matches of fragment geometries or efp energies should not be; .. comment expected. See files in test case directories :source:`qchem-efp-sp; .. comment <tests/libefp/qchem-efp-sp>` and :source:`qchem-qmefp-sp; .. comment <tests/libefp/qchem-qmefp-sp>` for equivalent Q-Chem and |PSIfour|; .. comment EFP input files. Creating new efp fragments requires the `GAMESS; <https://www.msg.chem.iastate.edu/gamess/index.html>`_ quantum chemistry package.; Instructions on building new fragments are `here; <https://github.com/libefp2/libefp#how-to-create-custom-efp-fragment-types>`_.; Once your new fragment is ready, make it accessible to |PSIfour| by; including the directory in which the ``.efp`` file is located to the colon; separated environment variable :envvar:`PSIPATH`. Fragments are searched; for first in the current directory, next in the paths of :envvar:`PSIPATH`, and; finally in built-in library. If |PSIfour| is unable to find the; fragment, an error will be reported. .. note:: When constructing new fragment files, the name of the name of the; file should be lowercase and have extension ``.efp``. ",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
Usability,simpl,simply,"or QM <sec:moleculeKeywords>`, the center of mass; coordinates in the XYZABC format and all coordinates in the POINTS format are; taken to be in Angstroms by default or in Bohr if ``units au`` is present.; Charge and multiplicity specifications are encoded in the fragment file; and so are not read from input. Any combination of EFP and QM fragments can be placed in a molecule; even; the oddity below is legitimate. Note that symmetry and reorientation are; automatically turned off when EFP fragments are present (``symmetry c1``; and ``no_com`` and ``no_reorient`` are implied). ::. molecule qmefp {; efp nh3 0.0 0.0 5.0 5 2 8; --; C 0.0 0.0 0.0; O 0.0 1.5 0.0; O 0.0 -1.5 0.0; --; efp h2o 5.0 0.0 0.0 5 2 8; --; He -3.0 4.0 4.0; He -4.0 5.0 4.0; --; efp ch3oh; 1.275 -2.447 -4.673; 0.709 -3.191 -3.592; 2.213 -1.978 -4.343; }. Running EFP ; ~~~~~~~~~~~~. EFP can be invoked in similar fashion as other theories provided in |PSIfour|.; For example, if you want to obtain the EFP interaction energy for benzene and two waters,; simply provide the following::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o 4.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. |PSIfour| can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; :ref:`SCF <sec:scf>` code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below. ::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0 ; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. .. warning:: Although the EFP geometry is specified alongside the QM; geometry in a ``molecule name {...}`` block, internally th",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
Availability,down,downloads," received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Libint, integrals. .. _`sec:libint`:. Interface to Libint by E. Valeev; ================================. .. codeauthor:: Edward F. Valeev and Justin T. Fermann; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libint-5077AB.svg; :target: https://github.com/evaleev/libint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://evaleev.github.io/libint/. |PSIfour|, particularly libmints utterly relies upon the Libint library; developed by E. Valeev from early roots by J. Fermann. Libint requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libint. .. note:: As of Nov 2020 or release v1.4, |PSIfour| uses Libint2, not Libint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate depende",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
Deployability,configurat,configuration," received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Libint, integrals. .. _`sec:libint`:. Interface to Libint by E. Valeev; ================================. .. codeauthor:: Edward F. Valeev and Justin T. Fermann; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libint-5077AB.svg; :target: https://github.com/evaleev/libint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://evaleev.github.io/libint/. |PSIfour|, particularly libmints utterly relies upon the Libint library; developed by E. Valeev from early roots by J. Fermann. Libint requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libint. .. note:: As of Nov 2020 or release v1.4, |PSIfour| uses Libint2, not Libint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate depende",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
Integrability,depend,dependent,"y roots by J. Fermann. Libint requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libint. .. note:: As of Nov 2020 or release v1.4, |PSIfour| uses Libint2, not Libint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove libint2``. **Source**. * .. image:: https://img.shields.io/github/tag/evaleev/libint.svg?maxAge=2592000; :target: https://github.com/evaleev/libint/pull/233. Note that |PSIfour| uses v2 and a modified branch. * If using |PSIfour| built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and that the generation step (generator source to; library source) preceding the compilation step (library source to; built library) takes far longer than in Libint1 for production builds. .. _`cmake:libint`:. How to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Depe",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
Modifiability,config,configuration," received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Libint, integrals. .. _`sec:libint`:. Interface to Libint by E. Valeev; ================================. .. codeauthor:: Edward F. Valeev and Justin T. Fermann; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libint-5077AB.svg; :target: https://github.com/evaleev/libint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://evaleev.github.io/libint/. |PSIfour|, particularly libmints utterly relies upon the Libint library; developed by E. Valeev from early roots by J. Fermann. Libint requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libint. .. note:: As of Nov 2020 or release v1.4, |PSIfour| uses Libint2, not Libint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate depende",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
Safety,detect,detect,"y roots by J. Fermann. Libint requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libint. .. note:: As of Nov 2020 or release v1.4, |PSIfour| uses Libint2, not Libint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove libint2``. **Source**. * .. image:: https://img.shields.io/github/tag/evaleev/libint.svg?maxAge=2592000; :target: https://github.com/evaleev/libint/pull/233. Note that |PSIfour| uses v2 and a modified branch. * If using |PSIfour| built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and that the generation step (generator source to; library source) preceding the compilation step (library source to; built library) takes far longer than in Libint1 for production builds. .. _`cmake:libint`:. How to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Depe",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
Availability,down,downloads,"re details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Libxc, DFT, functionals. .. _`sec:libxc`:. Interface to Libxc by M. A. L. Marques; ======================================. .. codeauthor:: M. A. L. Marques and Micael Oliveira; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libxc-5077AB.svg; :target: https://gitlab.com/libxc/libxc. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.tddft.org/programs/libxc/manual/. |PSIfour|, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libxc. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libxc/badges/version.svg; :target: https://anaconda.org/psi4/libxc. * Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, Libxc has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAg",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
Deployability,configurat,configuration,"re details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Libxc, DFT, functionals. .. _`sec:libxc`:. Interface to Libxc by M. A. L. Marques; ======================================. .. codeauthor:: M. A. L. Marques and Micael Oliveira; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libxc-5077AB.svg; :target: https://gitlab.com/libxc/libxc. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.tddft.org/programs/libxc/manual/. |PSIfour|, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libxc. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libxc/badges/version.svg; :target: https://anaconda.org/psi4/libxc. * Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, Libxc has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAg",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
Integrability,depend,dependent,"img.shields.io/badge/home-libxc-5077AB.svg; :target: https://gitlab.com/libxc/libxc. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.tddft.org/programs/libxc/manual/. |PSIfour|, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libxc. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libxc/badges/version.svg; :target: https://anaconda.org/psi4/libxc. * Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, Libxc has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Up",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
Modifiability,config,configuration,"re details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Libxc, DFT, functionals. .. _`sec:libxc`:. Interface to Libxc by M. A. L. Marques; ======================================. .. codeauthor:: M. A. L. Marques and Micael Oliveira; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libxc-5077AB.svg; :target: https://gitlab.com/libxc/libxc. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.tddft.org/programs/libxc/manual/. |PSIfour|, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libxc. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libxc/badges/version.svg; :target: https://anaconda.org/psi4/libxc. * Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, Libxc has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAg",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
Safety,detect,detect,"img.shields.io/badge/home-libxc-5077AB.svg; :target: https://gitlab.com/libxc/libxc. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.tddft.org/programs/libxc/manual/. |PSIfour|, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libxc. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libxc/badges/version.svg; :target: https://anaconda.org/psi4/libxc. * Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, Libxc has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Up",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
Availability,error,errors,"l cases, put Add-Ons in alphabetic order, ignoring any ""lib"" in the name. * :source:`CMakeLists.txt`. * Add the :samp:`ENABLE_{AddOn_name}` line. * Add the :samp:`external_{addon_name}` dependency to the ``psi4-core`` external project. * Add the :samp:`{AddOn_name}_DIR` variable passing to the ``psi4-core`` external project. * :source:`psi4/CMakeLists.txt`. * Add a block imitating Libint if Add-On required or CheMPS2 if not; required. * If there are shared resources to the external that need; to be found by |PSIfour| in PSIDATADIR, follow the ``efpfrag``; pattern of libefp to symlink them in. * :source:`psi4/src/CMakeLists.txt`. * No changes should be required unless both (1) code in export_*; or core.cc needs the :samp:`USING_{AddOn_name}` definition or; AddOn header includes and (2) no binary |PSIfour| module (as; opposed to library |PSIfour| module with the AddOn target linked; is itself a direct dependency of target ``core``. Basically,; try to leave this file alone, but if there are compile errors,; add the definitions/headers as needed. * :source:`psi4/src/psi4/`. * If a module is needed to interface the AddOn to |PSIfour|, try to; put ""interface"" in the name. Follow the pattern of CheMPS2 or gdma.; If non-required, be sure to conditionalize it with ``if(TARGET; AddOn::addon)`` in CMake files or ``#ifdef USING_AddOn`` in; source files. * If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
Deployability,integrat,integrate,". For example:; ``libefp::efp``, ``CheMPS2::chemps2``, ``PCMSolver::pcm``,; ``v2rdm_casscf::v2rdm_casscf``. * Following the CMake project name (though not restricted to it --; |PSIfour| managment could change the pattern), the user flag to enable; an add-on is :samp:`ENABLE_{AddOn_name}`. Note that runtime-only; add-ons don't go through this enabling process. * Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; :samp:`{addon_name}`. * The `conda package <https://anaconda.org/psi4/repo>`_ and internal to; |PSIfour| (that is, the ExternalProject_Add, dummy libraries, and any; tests/ and external/ subdirectories) should all be lowercase,; :samp:`{addon_name}`. * Alternatively, you can do everything mentioned here lowercase and just; have a different capitalization for an advertising name. After all,; that's what |PSIfour| does. .. _`faq:addoncmake`:. How to integrate an Add-On into build, testing, and docs; --------------------------------------------------------. * In all cases, put Add-Ons in alphabetic order, ignoring any ""lib"" in the name. * :source:`CMakeLists.txt`. * Add the :samp:`ENABLE_{AddOn_name}` line. * Add the :samp:`external_{addon_name}` dependency to the ``psi4-core`` external project. * Add the :samp:`{AddOn_name}_DIR` variable passing to the ``psi4-core`` external project. * :source:`psi4/CMakeLists.txt`. * Add a block imitating Libint if Add-On required or CheMPS2 if not; required. * If there are shared resources to the external that need; to be found by |PSIfour| in PSIDATADIR, follow the ``efpfrag``; pattern of libefp to symlink them in. * :source:`psi4/src/CMakeLists.txt`. * No changes should be required unless both (1) code in export_*; or core.cc needs the :samp:`USING_{AddOn_name}` definition or; AddOn header includes and (2) no binary |PSIfour| module (as; opposed to library |PSIfour| module with the AddOn target linked; is itself a direct dependency of target ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
Energy Efficiency,energy,energy,"s and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANCE`` (not tol). * Convergence of a method should be governed by an ``E_CONVERGENCE`` for; energy and either a ``D_CONVERGENCE`` for density or a ``R_CONVERGENCE``; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format. * Diis should have a boolean ``DIIS`` (not do_diis, not use_diis) to turn; on/off diis extrapolation, a ``DIIS_MIN_VECS`` and ``DIIS_MAX_VECS`` for; minimum and maximum number of diis vectors to use, and a ``DIIS_START``; which is the iteration at which to start saving vectors for diis. Not all; modules conform to all these at present, but they're as standardized as; they can be without changing code. * ``AMPS`` (not amplitude, not amp) for amplitudes. * ``NUM_`` (not n) for number (e.g., ``NUM_AMPS_PRINT``, ``MAX_NUM_VECS``,; ``NUM_THREADS``). * Some names that could be split into multiple words are staying as one.; Use ``MAXITER``, ``CACHELEVEL``, ``PUREAM``, ``DERTYPE``. * ``INTS`` (not integrals), also ``OEI`` (not oe_integrals) for; one-electron integrals and ``TEI`` (not te_integrals) for two-electron; integ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
Integrability,integrat,integrate,". For example:; ``libefp::efp``, ``CheMPS2::chemps2``, ``PCMSolver::pcm``,; ``v2rdm_casscf::v2rdm_casscf``. * Following the CMake project name (though not restricted to it --; |PSIfour| managment could change the pattern), the user flag to enable; an add-on is :samp:`ENABLE_{AddOn_name}`. Note that runtime-only; add-ons don't go through this enabling process. * Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; :samp:`{addon_name}`. * The `conda package <https://anaconda.org/psi4/repo>`_ and internal to; |PSIfour| (that is, the ExternalProject_Add, dummy libraries, and any; tests/ and external/ subdirectories) should all be lowercase,; :samp:`{addon_name}`. * Alternatively, you can do everything mentioned here lowercase and just; have a different capitalization for an advertising name. After all,; that's what |PSIfour| does. .. _`faq:addoncmake`:. How to integrate an Add-On into build, testing, and docs; --------------------------------------------------------. * In all cases, put Add-Ons in alphabetic order, ignoring any ""lib"" in the name. * :source:`CMakeLists.txt`. * Add the :samp:`ENABLE_{AddOn_name}` line. * Add the :samp:`external_{addon_name}` dependency to the ``psi4-core`` external project. * Add the :samp:`{AddOn_name}_DIR` variable passing to the ``psi4-core`` external project. * :source:`psi4/CMakeLists.txt`. * Add a block imitating Libint if Add-On required or CheMPS2 if not; required. * If there are shared resources to the external that need; to be found by |PSIfour| in PSIDATADIR, follow the ``efpfrag``; pattern of libefp to symlink them in. * :source:`psi4/src/CMakeLists.txt`. * No changes should be required unless both (1) code in export_*; or core.cc needs the :samp:`USING_{AddOn_name}` definition or; AddOn header includes and (2) no binary |PSIfour| module (as; opposed to library |PSIfour| module with the AddOn target linked; is itself a direct dependency of target ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
Modifiability,variab,variables,"e:: autodoc_abbr_options_c.rst. .. _`sec:addAddOns`:. Adding Add-Ons; ==============. .. _`faq:addonname`:. How to use an Add-On's name in directory structure, build, and distribution; ---------------------------------------------------------------------------. * Select a name. May be mixed case with numerals and underscores; (*e.g.*, CheMPS2, libefp, PCMSolver, v2rdm_casscf). Shouldn't start with a; numeral. Needn't start with ""lib"", even if a library. * GitHub repository name should be :samp:`{AddOn_name}` or; :samp:`{AddOn_name}.lower()` (hereafter, :samp:`{addon_name}`. For example: CheMPS2, libefp, pcmsolver,; v2rdm_casscf. * CMake project name should be :samp:`{AddOn_name}`. For example:; ``project(libefp)``, ``project(CheMPS2)``, ``project(PCMSolver)``,; ``project(v2rdm_casscf)``. Namespacing in the directory structure used; to detect the addon should have this name (*e.g.*,; ``share/cmake/CheMPS2``). * Restricted by the CMake project name, add-ons return CMake variables; and compile definitions of :samp:`FOUND_{AddOn_name}` and; :samp:`USING_{AddOn_name}`. For example: ``FOUND_libefp``,; ``USING_CheMPS2``, ``PCMSolver_LIBRARIES``, ``USING_v2rdm_casscf``. * The CMake target(s) formed use the full add-on name as the namespace,; :samp:`{AddOn_name}::{lib_name_without_lib}.lower()`. For example:; ``libefp::efp``, ``CheMPS2::chemps2``, ``PCMSolver::pcm``,; ``v2rdm_casscf::v2rdm_casscf``. * Following the CMake project name (though not restricted to it --; |PSIfour| managment could change the pattern), the user flag to enable; an add-on is :samp:`ENABLE_{AddOn_name}`. Note that runtime-only; add-ons don't go through this enabling process. * Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; :samp:`{addon_name}`. * The `conda package <https://anaconda.org/psi4/repo>`_ and internal to; |PSIfour| (that is, the ExternalProject_Add, dummy libraries, and any; tests/ and external/ subdirecto",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
Performance,optimiz,optimizations,"teration at which to start saving vectors for diis. Not all; modules conform to all these at present, but they're as standardized as; they can be without changing code. * ``AMPS`` (not amplitude, not amp) for amplitudes. * ``NUM_`` (not n) for number (e.g., ``NUM_AMPS_PRINT``, ``MAX_NUM_VECS``,; ``NUM_THREADS``). * Some names that could be split into multiple words are staying as one.; Use ``MAXITER``, ``CACHELEVEL``, ``PUREAM``, ``DERTYPE``. * ``INTS`` (not integrals), also ``OEI`` (not oe_integrals) for; one-electron integrals and ``TEI`` (not te_integrals) for two-electron; integrals. * ``PERTURB`` (not pert) for perturbation. * Use ``PRINT`` options to indicate printing to output file. Use ``WRITE``; options to indicate printing to another file. This probably isn't; entirely valid now but should be observed in future. The complement to; ``WRITE`` is ``READ``. ``PRINT``, ``READ``, and ``WRITE`` will usually; be the last words in an option name. * Use ``FOLLOW_ROOT`` for the state to be followed in geometry optimizations. * ``WFN`` (not wavefunction). * You're welcome to use ``WFN`` and ``DERTYPE`` as internal options, but; plan to have these set by the python driver and mark them as ``!expert``; options. Really avoid using ``JOBTYPE``. * You're not welcome to add ``CHARGE`` or ``MULTP`` options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer. * Conform. Just grep ``'add' psi4/src/read_options.cc`` to get a list of; all the option names in |PSIfour| and try to match any conventions you; find. * If you have a quantity you'd like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it. * If its value is typically greater than ~0.001, give it a name with ``CUTOFF``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; inte",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
Safety,detect,detect,"ot, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:addAddOns`:. Adding Add-Ons; ==============. .. _`faq:addonname`:. How to use an Add-On's name in directory structure, build, and distribution; ---------------------------------------------------------------------------. * Select a name. May be mixed case with numerals and underscores; (*e.g.*, CheMPS2, libefp, PCMSolver, v2rdm_casscf). Shouldn't start with a; numeral. Needn't start with ""lib"", even if a library. * GitHub repository name should be :samp:`{AddOn_name}` or; :samp:`{AddOn_name}.lower()` (hereafter, :samp:`{addon_name}`. For example: CheMPS2, libefp, pcmsolver,; v2rdm_casscf. * CMake project name should be :samp:`{AddOn_name}`. For example:; ``project(libefp)``, ``project(CheMPS2)``, ``project(PCMSolver)``,; ``project(v2rdm_casscf)``. Namespacing in the directory structure used; to detect the addon should have this name (*e.g.*,; ``share/cmake/CheMPS2``). * Restricted by the CMake project name, add-ons return CMake variables; and compile definitions of :samp:`FOUND_{AddOn_name}` and; :samp:`USING_{AddOn_name}`. For example: ``FOUND_libefp``,; ``USING_CheMPS2``, ``PCMSolver_LIBRARIES``, ``USING_v2rdm_casscf``. * The CMake target(s) formed use the full add-on name as the namespace,; :samp:`{AddOn_name}::{lib_name_without_lib}.lower()`. For example:; ``libefp::efp``, ``CheMPS2::chemps2``, ``PCMSolver::pcm``,; ``v2rdm_casscf::v2rdm_casscf``. * Following the CMake project name (though not restricted to it --; |PSIfour| managment could change the pattern), the user flag to enable; an add-on is :samp:`ENABLE_{AddOn_name}`. Note that runtime-only; add-ons don't go through this enabling process. * Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; :samp:`{addon_name}`. * The `conda packa",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
Testability,test,tests," ``project(PCMSolver)``,; ``project(v2rdm_casscf)``. Namespacing in the directory structure used; to detect the addon should have this name (*e.g.*,; ``share/cmake/CheMPS2``). * Restricted by the CMake project name, add-ons return CMake variables; and compile definitions of :samp:`FOUND_{AddOn_name}` and; :samp:`USING_{AddOn_name}`. For example: ``FOUND_libefp``,; ``USING_CheMPS2``, ``PCMSolver_LIBRARIES``, ``USING_v2rdm_casscf``. * The CMake target(s) formed use the full add-on name as the namespace,; :samp:`{AddOn_name}::{lib_name_without_lib}.lower()`. For example:; ``libefp::efp``, ``CheMPS2::chemps2``, ``PCMSolver::pcm``,; ``v2rdm_casscf::v2rdm_casscf``. * Following the CMake project name (though not restricted to it --; |PSIfour| managment could change the pattern), the user flag to enable; an add-on is :samp:`ENABLE_{AddOn_name}`. Note that runtime-only; add-ons don't go through this enabling process. * Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; :samp:`{addon_name}`. * The `conda package <https://anaconda.org/psi4/repo>`_ and internal to; |PSIfour| (that is, the ExternalProject_Add, dummy libraries, and any; tests/ and external/ subdirectories) should all be lowercase,; :samp:`{addon_name}`. * Alternatively, you can do everything mentioned here lowercase and just; have a different capitalization for an advertising name. After all,; that's what |PSIfour| does. .. _`faq:addoncmake`:. How to integrate an Add-On into build, testing, and docs; --------------------------------------------------------. * In all cases, put Add-Ons in alphabetic order, ignoring any ""lib"" in the name. * :source:`CMakeLists.txt`. * Add the :samp:`ENABLE_{AddOn_name}` line. * Add the :samp:`external_{addon_name}` dependency to the ``psi4-core`` external project. * Add the :samp:`{AddOn_name}_DIR` variable passing to the ``psi4-core`` external project. * :source:`psi4/CMakeLists.txt`. * Add a block ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
Usability,guid,guidelines,"e |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANCE`` (not tol). * Convergence of a method should be governed by an ``E_CONVERGENCE`` for; energy and either a ``D_CONVERGENCE`` for density or a ``R_CONVERGENCE``; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format. * Diis should have a boolean ``DIIS`` (not do_diis, not use_diis) to turn; on/off diis extrapolation, a ``DIIS_MIN_VECS`` and ``DIIS_MAX_VECS`` for; minimum and maximum number of diis vectors to use, and a ``DIIS_START``; which is the iteration at which to start saving vectors for diis. Not all; modules conform to all these at present, but they're as standardized as; they can be without changing code. * ``AMPS`` (not amplitude, not amp) for amplitudes. * ``NUM_`` (not n) for number (e.g., ``NUM_AMPS_PRINT``, ``MAX_NUM_VECS``,; `",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
Availability,error,errors,"stein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; submitted. -----------------------------------------------------------------------. Psi4 started on: Friday, 28 April 2017 07:31PM. Process ID: 95107; PSIDATADIR: /Users/johndoe/psi4/objdir8/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1. >>> psi4.version_formatter(); '1.1rc2.dev17'; >>> psi4.version_formatter('all'); '1.1rc2.dev17 {condadoc} c852257 1.0.0.999 dirty 1.0 <-- 1.1rc2.dev17+c852257'; >>> psi4.version_formatter(""""""{{{branch}}} {versionlong}""""""); '{condadoc} 1.1rc2.dev17+c852257'. .. _`faq:grepascii`:. How to locate non-ascii characters in the codebase; --------------------------------------------------. Neither the Python interpreter nor Sphinx like non-ASCII characters one; bit, though the errors may be intermittant. Output files are usually ok,; so Jerome can live, for now. To aid in tracking down offenders, here's; the ``vi`` and ``grep`` search strings. In the docs, you want to use; the substitutions in :source:`doc/sphinxman/source/abbr_accents.rst`; instead of the actual characters. ::. # vim; :/[^\x00-\x7F]. # bash; grep -r --color='auto' -P -n ""[^\x00-\x7F]"" psi4/; ; .. _`faq:undefversion`:. How to fix ""Psi4 undefined"" version; -----------------------------------. When in a git repo, the versioner uses ``git describe`` and psi4/metadata.py; to compute the version. If you don't have all the latest tags, this mechanism; can't work. To solve, pull tags and remake. ::. # upstream in `git remote -v` points to github.com/psi4/psi4.git; >>> git fetch upstream 'refs/tags/*:refs/tags/*'; >>> make; # version healed; ; .. _`faq:cannotimportcoretlpd`:. How to fix ""cannot import name 'core' from {top-level-psi4-dir}; -----------------------------",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
Deployability,release,releases,"ed by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. .. _`sec:addAddOns`:. Git, Versioning; ===============. .. _`faq:versionbump`:. How to bump a version; ---------------------. 0. **ACT** to check everything in. 1. **OBSERVE** current versioning state. * Be on master of (i) a direct clone or (ii) clone-of-fork with master; up-to-date with upstream (including tags!!!) and with upstream as; remote. * https://github.com/psi4/psi4/releases says ``v1.1a1`` & ``007a9b6``. ::. >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbee32b. >>> git diff. * Observe that current latest tag matches metadata scipt and git; describe, that GitHub releases matches metadata script, that upcoming in; metadata script matches current versioner version. * Note that current tag is ``v1.1a1``. Decide on imminent tag, say ``v1.1rc1``. 2. **ACT** to bump tag in code. * Edit current & prospective tag in :source:`psi4/metadata.py`. Use your; decided-upon tag ``v1.1rc1`` and a speculative next tag, say ``v1.1rc2``,; and use 7 ""z""s for the part you ca",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
Integrability,interface,interface,"__version__ = '1.1rc1'; __version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> cat metadata.out.py | head -8; __version__ = '1.1rc2.dev1'; __version_branch_name = 'master'; __version_cmake = '1.0.0.999'; __version_is_clean = 'True'; __version_last_release = '1.0'; __version_long = '1.1rc2.dev1+4e0596e'; __version_prerelease = 'False'; __version_release = 'False'. >>> git log --oneline; 4e0596e Records tag for v1.1rc1; 6100822 v1.1rc1; cbee32b Fixes pcmsolver/scf for py3. Moves source for libefp upstream. 6. **ACT** to inform remote of bump. * Temporarily disengage ""Include administrators"" on protected master branch. ::. >>> git push origin master; >>> git push origin v1.1rc1. * Now https://github.com/psi4/psi4/releases says ``v1.1rc1`` & ``6100822``. .. _`faq:remotetag`:. How to create and remove an annotated Git tag on a remote; ---------------------------------------------------------. |PSIfour| versioning only works with *annotated* tags, not *lightweight*; tags as are created with the `GitHub interface; <https://github.com/psi4/psi4/releases/new>`_. * Create *annotated* tag::. >>> git tag -a v1.1a1 <git hash if not current> -m ""v1.1a1""; >>> git push origin v1.1a1. * Delete tag::. >>> git tag -d v1.1a1; >>> git push origin :refs/tags/v1.1a1. * Pull tags::. >>> git fetch <remote> 'refs/tags/*:refs/tags/*'. .. _`faq:psi4version`:. What Psi4 version is running; ----------------------------. * Psithon / from the executable::. >>> psi4 --version; 1.1rc2.dev17. * PsiAPI / from the library::. >>> python -c ""import psi4; print(psi4.__version__)""; 1.1rc2.dev17. * Output file header gives info like the ``print_header()`` below. * Function ``print_header()`` returns a summary of citation, version, and; git information about |PSIfour|. Function ``version_formatter()`` can; return version and git information in any desired format string. ::. >>> import psi4; >>> psi4.print_header(). ----------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
Modifiability,rewrite,rewrite,"indepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. .. _`faq:githubcodereview`:. How to do GitHub issue management and code review; -------------------------------------------------. a) Anyone, core-dev or not, is encouraged to review PRs. It's actually good practice for interacting with other open-source projects, where you don't have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn't. d) All main branches (master and `1.N.x` maintenance) are protected by GitHub, including administrators, so even with write access, no one can accidentally push (master) or rewrite the history (master and maintenance). e) PR owners who also have maintainer status can merge their PRs as GitHub enforces two external reviews. f) Unless there's been a lot of discussion on core-dev about merge order, generally the 2nd positive reviewer merges the PR. Also fine to add review and leave merge for later. g) Presently only Azure is set up as a required-to-merge service. Incomplete GHA Ecosystem or Docs won't block merging, but we do usually let it complete before merging unless it's a trivial PR. h) We don't enforce branches to be up to date before merging since that'd be a lot of extra CI time and coordination when merging several PRs in a day. So, if a PR hasn't been updated in a while, and a reviewer is nervous about PR interference, fine to ask submitter to rebase. Or, there's an update button on the PR -- but if this is used, warn the submitted that their remote and local branches will be out of sync. For this reaso",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
Safety,predict,predict,"om/psi4/psi4/releases says ``v1.1a1`` & ``007a9b6``. ::. >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbee32b. >>> git diff. * Observe that current latest tag matches metadata scipt and git; describe, that GitHub releases matches metadata script, that upcoming in; metadata script matches current versioner version. * Note that current tag is ``v1.1a1``. Decide on imminent tag, say ``v1.1rc1``. 2. **ACT** to bump tag in code. * Edit current & prospective tag in :source:`psi4/metadata.py`. Use your; decided-upon tag ``v1.1rc1`` and a speculative next tag, say ``v1.1rc2``,; and use 7 ""z""s for the part you can't predict. ::. >>> vi psi4/metadata.py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1"". 3. **OBSERVE** undefined version state. ::. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822. * Note 7-char git hash for the new commit, here ""6100822"". 4. **ACT** to bump tag in git, then bump git tag in code. * Use the decided-upon tag ``v1.1rc1`` and",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
Security,hash,hash,"source:`psi4/metadata.py`. Use your; decided-upon tag ``v1.1rc1`` and a speculative next tag, say ``v1.1rc2``,; and use 7 ""z""s for the part you can't predict. ::. >>> vi psi4/metadata.py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1"". 3. **OBSERVE** undefined version state. ::. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822. * Note 7-char git hash for the new commit, here ""6100822"". 4. **ACT** to bump tag in git, then bump git tag in code. * Use the decided-upon tag ``v1.1rc1`` and the observed hash ""6100822"" to; mint a new *annotated* tag, minding that ""v""s are present here. * Use the observed hash to edit :source:`psi4/metadata.py` and commit immediately. ::. >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1"". 5. **OBSERVE** current versioning state. * Nothing to make note of, this is just a snapshot. ::. >>> psi4/versioner.py; Defining development s",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
Testability,log,log,"ally happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1"". 5. **OBSERVE** current versioning state. * Nothing to make note of, this is just a snapshot. ::. >>> psi4/versioner.py; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1rc1-1-g4e0596e. >>> git describe --abbrev=7 --long --dirty; v1.1rc1-1-g4e0596e. >>> git tag; v1.0; v1.1a1; v1.1rc1. >>> cat psi4/metadata.py; __version__ = '1.1rc1'; __version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> cat metadata.out.py | head -8; __version__ = '1.1rc2.dev1'; __version_branch_name = 'master'; __version_cmake = '1.0.0.999'; __version_is_clean = 'True'; __version_last_release = '1.0'; __version_long = '1.1rc2.dev1+4e0596e'; __version_prerelease = 'False'; __version_release = 'False'. >>> git log --oneline; 4e0596e Records tag for v1.1rc1; 6100822 v1.1rc1; cbee32b Fixes pcmsolver/scf for py3. Moves source for libefp upstream. 6. **ACT** to inform remote of bump. * Temporarily disengage ""Include administrators"" on protected master branch. ::. >>> git push origin master; >>> git push origin v1.1rc1. * Now https://github.com/psi4/psi4/releases says ``v1.1rc1`` & ``6100822``. .. _`faq:remotetag`:. How to create and remove an annotated Git tag on a remote; ---------------------------------------------------------. |PSIfour| versioning only works with *annotated* tags, not *lightweight*; tags as are created with the `GitHub interface; <https://github.com/psi4/psi4/releases/new>`_. * Create *annotated* tag::. >>> git tag -a v1.1a1 <git hash if not current> -m ""v1.1a1""; >>> git push origin v1.1a1. * Delete tag::. >>> git tag -d v1.1a1; >>> git push origin :refs/tags/v1.1a1. * Pull tags::. >>> git fetch <remote> 'refs/tags/*:refs/tags/*'. .. _`faq:psi4version`:. What Psi4 version is running; -------",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
Usability,learn,learning," file, do ``sys.path.insert(0, {objdir}/stage/{prefix}/lib/{pymod_lib_dir}``. .. _`faq:findmissingoutputref`:. How to find tests without output.ref; ------------------------------------. Ideally, each new test or much-altered test should add its own; ``output.ref``. When that doesn't happen, this command helps. ::. find tests/ -mindepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. .. _`faq:githubcodereview`:. How to do GitHub issue management and code review; -------------------------------------------------. a) Anyone, core-dev or not, is encouraged to review PRs. It's actually good practice for interacting with other open-source projects, where you don't have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn't. d) All main branches (master and `1.N.x` maintenance) are protected by GitHub, including administrators, so even with write access, no one can accidentally push (master) or rewrite the history (master and maintenance). e) PR owners who also have maintainer status can merge their PRs as GitHub enforces two external reviews. f) Unless there's been a lot of discussion on core-dev about merge order, generally the 2nd positive reviewer merges the PR. Also fine to add review and leave merge for later. g) Presently only Azure is set up as a required-to-merge service. Incomplete GHA Ecosystem or Docs won't block merging, but we do usually let it complete before merging unless it's a trivial PR. h) We don't enforce branches to be up to date before merging since that'd be a lot of extra CI time a",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
Availability,down,download,"ed by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. Release Procedures; ==================. .. _`faq:annualprocedure`:. Annual; ------. * `On January first`_; * `Update copyright year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packa",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
Deployability,release,release,"ed by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. Release Procedures; ==================. .. _`faq:annualprocedure`:. Annual; ------. * `On January first`_; * `Update copyright year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packa",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
Integrability,depend,dependencies,"cess = output[""proc""].poll() == 0; assert success, output[""stdout""] + output[""stderr""]. * Run a full stdsuite tests to generate new capabilities tables for docs. Detailed instructions are; in :source:`psi4/share/psi4/scripts/merge_stdsuite.py` . Anticipate next release; -----------------------. * Bump version in ``codemeta.json``, :source:`codemeta.json#L9`; * Add to branch list in ``azure-pipelines.yml``, :source:`azure-pipelines.yml`. Build Conda ecosystem stack; ---------------------------. * By ""ecosystem stack"", we mean packages that are upstream, downstream, required, and optional for; a fully featured Psi4 build and which we have some role in packaging.; * These packages (e.g., ``libint``, ``gdma``) should already be updated and built on conda-forge.; Survey them to check version tick and other key PRs have been merged.; * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4; ``external/*/*/CMakeLists.txt`` files; * Edit any added or dropped dependencies in main :source:`CMakeLists.txt` and docs; :source:`doc/sphinxman/source/build_planning.rst` . .. Build Conda ecosystem stack (pre-Spring 2023); .. ---------------------------------------------; ..; .. By ""ecosystem stack"", mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we can't get from ""defaults"" or ""conda-forge"" channels.; ..; .. * Main directions are in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-nightly/kitandkapoodle.py); .. * A couple weeks before the first ""rc"" is planned, start going through L/LT in poodle, checking with upstream to see if new versions have been released. If good changes present, rebuild the packages, changing the version numbers in the respective recipes; .. * When L/LT all built and passed, edit the individual package version numbers in cbcy and increment to a new ``ltrtver",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
Modifiability,config,config,"y contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=Tr",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
Performance,tune,tune,"dividual package version numbers in cbcy and increment to a new ``ltrtver`` with updated version numbers and/or build numbers (only if code changes); .. * Build L/PSI4. If any trouble, edit psi4 code. Iterate until builds and passes. This stage is the only full ctest & pytest on Psi4+upstream; .. * Build L/RT-MP. If any trouble, edit code in L/RT and rebuild those package(s). Iterate until builds and passes. This stage is the only full ctest & pytest of Psi4+downstream; .. * Build L/DEV. If any trouble, edit psi4 build system, plugin system, or OpenMP setup. Iterate until builds and passes; .. * Build L/DOCS. If any trouble, edit the docs or the tests. Iterate until builds and passes; .. * Results of last should upload to psicode.org (docs) and codecov.io (coverage); .. * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4 ``external/*/*/CMakeLists.txt`` files; .. * Once everything's working on Linux, repeat on Mac; .. * At this point, ready to fine-tune builds of ""Psi4 stack"". Assemble postrelease changes; ----------------------------. * Collect PRs with ""backport"" label, and request other backport suggestions through slack.; * Be on the maintenance branch (e.g., ``1.8.x``). ``git fetch upstream`` or any other remotes you're; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. * Tag it (`Tag postrelease`_ for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; `Publish GitHub postrelease`_), it's ok to revise a tag (force push to maintenance branch). - Add or increment patch n",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
Safety,safe,safe,"- For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at runtime. If see a ""noarch"" package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; .. * If fetching times out, may have to run run.py several times. Clear out build/ in between. It's the fetching that takes a long time, not constucting; .. * In the end, should have several installers; ..; .. ::; ..; .. >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; .. -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; .. -rwxr-xr-x. 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ..; ..; .. * Upload installer files to vergil, ``scp -r build/Psi4*/Psi4*sh root@vergil.chemistry.gatech.edu:/var/www/html/psicode-download/``; .. * Log in to vergil root and make WindowsWSL symlinks. Build Psi4conda set; -------------------. Installers are build usi",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
Security,hash,hash,"Records tag for v1.3rc2. # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck admins ""Do not allow ..."" and Save changes. >>> git push upstream master. # re-engage admins ""Do not allow ..."" protections. Tag postrelease; ---------------. ::. # be on clean maintenance branch up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed. # see note at ""Tag (pre)release"" for why atomic commit needed. Collect docs from GHA artifacts. >>> git push --atomic upstream 1.3.x v1.3.1. Initialize release branch; -------------------------. * follow tagging procedure; * before re-engaging the admins ""Do not allow ..."" button, push a branch at the tag commit (not the records commit). ::. >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. * set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel; -------------------------------------------. Once upon a time, ""Psi4 stack"", meant packages ``psi4``, ``psi4-rt``, ``psi4-dev``, and ``psi4-docs``.; Package ``psi4-d",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
Testability,test,tests,"4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. Release Procedures; ==================. .. _`faq:annualprocedure`:. Annual; ------. * `On January first`_; * `Update copyright year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-websit",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
Usability,pause,pause,"tl;dr. ::. # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3rc2""; [master bc8d7f5] v1.3rc2. >>> git log --oneline | head -1; bc8d7f5 v1.3rc2; >>> git tag -a v1.3rc2 bc8d7f5 -m ""v1.3rc2"". # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck ""Do not allow bypassing the above settings"" for admins and Save changes. >>> git push --atomic upstream master v1.3rc2. # pause here and push to upstream and let Azure complete for an; # on-tag Windows conda package and docs, not tag+1.dev1 .; # the atomic flag below pushes commit and tag together so only one CI; # which is necessary for Windows conda package to compute the right version.; # After push, can temporarily re-engage admins ""Do not allow ..."" protections.; # also, grab the docs build from GHA artifacts. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version_long = '1.3rc2+zzzzzzz'; +__version_long = '1.3rc2+bc8d7f5'. >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.3rc2""; [master 16dbd3e] Records tag for v1.3rc2. # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck admins ""Do not allow ..."" and Save changes. >>> git push upstream master. # re-engage admins ""Do not allow ..."" protections. Tag postrelease; ---------------. ::. # be on clean maintenance branch up-to-date with upstream in both comm",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
Deployability,configurat,configurational,"ers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: MCSCF. .. index::; pair: MCSCF; theory. .. index::; pair: CI; multi-configurational self-consistent-field. .. _`sec:mcscf`:. MCSCF: Multi-Configurational Self-Consistent-Field; ==================================================. .. codeauthor:: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; .. sectionauthor:: Daniel G. A. Smith and C. David Sherrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. As the cost of Full CI scales exponentially with respect to the number of; active orbitals it is often advantageous to neglect orbitals that do not; exhibit strong correlation. These orbitals are variationally optimized; simultaneously with the CI coefficients and known as Multi-Configurational; Self-Consistent Field (MCSCF). The most commonly used MCSCF procedure is the; complete-active-space self-consistent-field (CASSCF) approach [Roos:1980]_,; which includes all possible determinants (with the proper symmetry) that can be; formed by distributing a set of active electrons ",MatchSource.DOCS,doc/sphinxman/source/mcscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst
Energy Efficiency,energy,energy,"ve) than CASSCF. Inactive orbitals in the MCSCF may be specified by the; |globals__restricted_docc| and |globals__restricted_uocc| keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively, in the; MCSCF wavefunction. However, the form of these orbitals will be optimized in; the MCSCF procedure. It is also possible to literally freeze inactive orbitals; in their original (SCF) form using the |globals__frozen_docc| and; |globals__frozen_uocc| keywords. This is not normally what one wishes to do in; an MCSCF computation (*e.g.*, it complicates the computation of gradients), but; it can make the computations faster and is helpful in some circumstances where; unphysical mixing of inactive and active occupied orbitals might occur.; Presently, it is not possible to mix the use of restricted and frozen orbitals; in |PSIfour|. An illustrative CASSCF example is as follows::. molecule {; O; H 1 1.00; H 1 1.00 2 103.1; }; ; set {; basis 6-31G**; restricted_docc [1, 0, 0, 0]; active [3, 0, 1, 2]; }; energy('casscf'). This input will compute the CASSCF energy of water where the 1s Oxygen orbital; and several virtual orbitals are not included in the CI expansion, but are; still optimized. The following is a full list of spaces within the various MCSCF; types. .. _`table:mcscf_spaces`:. .. table:: Orbital spaces for MCSCF computations. +----------------------------+----------------------------+; | RASSCF | CASSCF |; +============================+============================+; | |globals__frozen_uocc| | |globals__frozen_uocc| |; +----------------------------+----------------------------+; | |globals__restricted_uocc| | |globals__restricted_uocc| |; +----------------------------+----------------------------+; | |globals__ras4| | |globals__active| |; +----------------------------+ +; | |globals__ras3| | |; +----------------------------+ +; | |globals__ras2| | |; +----------------------------+ +; | |globals__ras1| | |; +----------------------------+------",MatchSource.DOCS,doc/sphinxman/source/mcscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst
Modifiability,config,configurational,"ers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: MCSCF. .. index::; pair: MCSCF; theory. .. index::; pair: CI; multi-configurational self-consistent-field. .. _`sec:mcscf`:. MCSCF: Multi-Configurational Self-Consistent-Field; ==================================================. .. codeauthor:: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; .. sectionauthor:: Daniel G. A. Smith and C. David Sherrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. As the cost of Full CI scales exponentially with respect to the number of; active orbitals it is often advantageous to neglect orbitals that do not; exhibit strong correlation. These orbitals are variationally optimized; simultaneously with the CI coefficients and known as Multi-Configurational; Self-Consistent Field (MCSCF). The most commonly used MCSCF procedure is the; complete-active-space self-consistent-field (CASSCF) approach [Roos:1980]_,; which includes all possible determinants (with the proper symmetry) that can be; formed by distributing a set of active electrons ",MatchSource.DOCS,doc/sphinxman/source/mcscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst
Performance,optimiz,optimized," Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: MCSCF. .. index::; pair: MCSCF; theory. .. index::; pair: CI; multi-configurational self-consistent-field. .. _`sec:mcscf`:. MCSCF: Multi-Configurational Self-Consistent-Field; ==================================================. .. codeauthor:: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; .. sectionauthor:: Daniel G. A. Smith and C. David Sherrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. As the cost of Full CI scales exponentially with respect to the number of; active orbitals it is often advantageous to neglect orbitals that do not; exhibit strong correlation. These orbitals are variationally optimized; simultaneously with the CI coefficients and known as Multi-Configurational; Self-Consistent Field (MCSCF). The most commonly used MCSCF procedure is the; complete-active-space self-consistent-field (CASSCF) approach [Roos:1980]_,; which includes all possible determinants (with the proper symmetry) that can be; formed by distributing a set of active electrons among a set of active; orbitals. The MCSCF module performs CASSCF optimization of molecular orbitals; via a two-step procedure in which the CI coefficients and orbitals are; optimized in an alternating manner. The program uses a fairly simple; approximate orbital Hessian [Chaban:1997:88]_ and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_. We have also implemented; the RASSCF method [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF; which is typically less complete (and less expensive) than CASSCF. Inactive orbitals in the MCSCF may be specified by the; |globals__restricted_docc| and |globals__restricted_uocc| keywords. Thes",MatchSource.DOCS,doc/sphinxman/source/mcscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst
Usability,simpl,simple,"rrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. As the cost of Full CI scales exponentially with respect to the number of; active orbitals it is often advantageous to neglect orbitals that do not; exhibit strong correlation. These orbitals are variationally optimized; simultaneously with the CI coefficients and known as Multi-Configurational; Self-Consistent Field (MCSCF). The most commonly used MCSCF procedure is the; complete-active-space self-consistent-field (CASSCF) approach [Roos:1980]_,; which includes all possible determinants (with the proper symmetry) that can be; formed by distributing a set of active electrons among a set of active; orbitals. The MCSCF module performs CASSCF optimization of molecular orbitals; via a two-step procedure in which the CI coefficients and orbitals are; optimized in an alternating manner. The program uses a fairly simple; approximate orbital Hessian [Chaban:1997:88]_ and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_. We have also implemented; the RASSCF method [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF; which is typically less complete (and less expensive) than CASSCF. Inactive orbitals in the MCSCF may be specified by the; |globals__restricted_docc| and |globals__restricted_uocc| keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively, in the; MCSCF wavefunction. However, the form of these orbitals will be optimized in; the MCSCF procedure. It is also possible to literally freeze inactive orbitals; in their original (SCF) form using the |globals__frozen_docc| and; |globals__frozen_uocc| keywords. This is not normally what one wishes to do in; an MCSCF computation (*e.g.*, it complicates the computation of gradients), but; it can make the computations faster and is helpful in some circumstances where; unphysical mixing of inactive and active occupied orbitals might occur.",MatchSource.DOCS,doc/sphinxman/source/mcscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst
Availability,avail,available,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:methods`:. ===============================; Theoretical Methods: SCF to FCI; ===============================. Several electronic structure methods are available in the |PSIfour|; package, from Hartree--Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; :ref:`apdx:options_c_module`. .. toctree::; :maxdepth: 2. capabilities; notes_c; scf; dft; dftnl; dct; dfmp2; dlpnomp2; cc; fnocc; occ; psimrcc; detci; mcscf; sapt; fisapt; adc; relativistic; optking; oeprop; thermo; tdscf; ",MatchSource.DOCS,doc/sphinxman/source/methods.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/methods.rst
Deployability,configurat,configuration,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:methods`:. ===============================; Theoretical Methods: SCF to FCI; ===============================. Several electronic structure methods are available in the |PSIfour|; package, from Hartree--Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; :ref:`apdx:options_c_module`. .. toctree::; :maxdepth: 2. capabilities; notes_c; scf; dft; dftnl; dct; dfmp2; dlpnomp2; cc; fnocc; occ; psimrcc; detci; mcscf; sapt; fisapt; adc; relativistic; optking; oeprop; thermo; tdscf; ",MatchSource.DOCS,doc/sphinxman/source/methods.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/methods.rst
Modifiability,config,configuration,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:methods`:. ===============================; Theoretical Methods: SCF to FCI; ===============================. Several electronic structure methods are available in the |PSIfour|; package, from Hartree--Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; :ref:`apdx:options_c_module`. .. toctree::; :maxdepth: 2. capabilities; notes_c; scf; dft; dftnl; dct; dfmp2; dlpnomp2; cc; fnocc; occ; psimrcc; detci; mcscf; sapt; fisapt; adc; relativistic; optking; oeprop; thermo; tdscf; ",MatchSource.DOCS,doc/sphinxman/source/methods.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/methods.rst
Availability,avail,available,"buted in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; Molden; WebMO; visualization. .. _`sec:molden`:. Interface to Molden |w---w| :py:func:`~psi4.driver.molden`; ==========================================================. .. codeauthor:: Justin M. Turney; .. sectionauthor:: C. David Sherrill. |PSIfour| contains an interface to the Molden program. Molden is a ; visualization program for electronic structure developed by Gijs Schaftenaar; at the University of of Nijmegen, Netherlands. It is available at ; https://www3.cmbi.umcn.nl/molden/ . Molden can; plot atomic orbitals, densities, electrostatic potentials (ESPs), etc.; |PSIfour| can create a file containing; atomic coordinates, basis set, and SCF orbital coefficients in the ; so-called Molden format. This file is; written by the SCF module (see Section :ref:`SCF <sec:scf>`) ; if the user sets the |scf__molden_write| keyword to true. This Molden file is ; also used to pass information between |PSIfour| and WebMO, if |PSIfour| ; computations are invoked using the WebMO GUI. The filename of the ; Molden file ends in "".molden"", and the prefix is determined by ; |globals__writer_file_label| (if set), or else by the name of the output; file plus the name of the current molecule. If |globals__molden_with_virtual|; is set to false, the unoccupied orbitals are not written to the Molden; file. .. autofunction:: psi4.molden(wfn, filename); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/scf__molden_write.rst; .. include:: autod",MatchSource.DOCS,doc/sphinxman/source/molden.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/molden.rst
Integrability,interface,interface,"edistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; Molden; WebMO; visualization. .. _`sec:molden`:. Interface to Molden |w---w| :py:func:`~psi4.driver.molden`; ==========================================================. .. codeauthor:: Justin M. Turney; .. sectionauthor:: C. David Sherrill. |PSIfour| contains an interface to the Molden program. Molden is a ; visualization program for electronic structure developed by Gijs Schaftenaar; at the University of of Nijmegen, Netherlands. It is available at ; https://www3.cmbi.umcn.nl/molden/ . Molden can; plot atomic orbitals, densities, electrostatic potentials (ESPs), etc.; |PSIfour| can create a file containing; atomic coordinates, basis set, and SCF orbital coefficients in the ; so-called Molden format. This file is; written by the SCF module (see Section :ref:`SCF <sec:scf>`) ; if the user sets the |scf__molden_write| keyword to true. This Molden file is ; also used to pass information between |PSIfour| and WebMO, if |PSIfour| ; computations are invoked using the WebMO GUI. The filename of the ; Molden file ends in "".molden"", and the prefix is determined by ; |globals__writer_file_label| (if set), or else by the name of the output; file plus the name of the current molecule. If |globals__molden_with_virtual|; is set to false, the unoccupied orbitals ",MatchSource.DOCS,doc/sphinxman/source/molden.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/molden.rst
Availability,error,error,"lin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: MRCC; .. _`sec:mrcc`:. Interface to MRCC by M. K\ |a_acute|\ llay; ==========================================. .. codeauthor:: Justin M. Turney and Andrew C. Simmonett; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <apdx:mrcc>`, :ref:`PSI Variables <apdx:mrcc_psivar>`, :source:`MRCC <psi4/src/psi4/mrcc>`, :ref:`Samples <apdx:testSuitemrcc>`. |PSIfour| contains code to interface to the MRCC program of M. K\ |a_acute|\ llay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mih\ |a_acute|\ ly K\ |a_acute|\ llay (`https://www.mrcc.hu/ <https://www.mrcc.hu/>`_). Installation; ~~~~~~~~~~~~. Follow the instructions provided with the source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with v",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
Energy Efficiency,energy,energy,"*Module:* :ref:`Keywords <apdx:mrcc>`, :ref:`PSI Variables <apdx:mrcc_psivar>`, :source:`MRCC <psi4/src/psi4/mrcc>`, :ref:`Samples <apdx:testSuitemrcc>`. |PSIfour| contains code to interface to the MRCC program of M. K\ |a_acute|\ llay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mih\ |a_acute|\ ly K\ |a_acute|\ llay (`https://www.mrcc.hu/ <https://www.mrcc.hu/>`_). Installation; ~~~~~~~~~~~~. Follow the instructions provided with the source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically gener",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
Integrability,interface,interface,"Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: MRCC; .. _`sec:mrcc`:. Interface to MRCC by M. K\ |a_acute|\ llay; ==========================================. .. codeauthor:: Justin M. Turney and Andrew C. Simmonett; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <apdx:mrcc>`, :ref:`PSI Variables <apdx:mrcc_psivar>`, :source:`MRCC <psi4/src/psi4/mrcc>`, :ref:`Samples <apdx:testSuitemrcc>`. |PSIfour| contains code to interface to the MRCC program of M. K\ |a_acute|\ llay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mih\ |a_acute|\ ly K\ |a_acute|\ llay (`https://www.mrcc.hu/ <https://www.mrcc.hu/>`_). Installation; ~~~~~~~~~~~~. Follow the instructions provided with the source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
Performance,perform,perform,"y (`https://www.mrcc.hu/ <https://www.mrcc.hu/>`_). Installation; ~~~~~~~~~~~~. Follow the instructions provided with the source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF i",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
Testability,test,testSuitemrcc,"t and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: MRCC; .. _`sec:mrcc`:. Interface to MRCC by M. K\ |a_acute|\ llay; ==========================================. .. codeauthor:: Justin M. Turney and Andrew C. Simmonett; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <apdx:mrcc>`, :ref:`PSI Variables <apdx:mrcc_psivar>`, :source:`MRCC <psi4/src/psi4/mrcc>`, :ref:`Samples <apdx:testSuitemrcc>`. |PSIfour| contains code to interface to the MRCC program of M. K\ |a_acute|\ llay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mih\ |a_acute|\ ly K\ |a_acute|\ llay (`https://www.mrcc.hu/ <https://www.mrcc.hu/>`_). Installation; ~~~~~~~~~~~~. Follow the instructions provided with the source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
Usability,simpl,simply,"var>`, :source:`MRCC <psi4/src/psi4/mrcc>`, :ref:`Samples <apdx:testSuitemrcc>`. |PSIfour| contains code to interface to the MRCC program of M. K\ |a_acute|\ llay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mih\ |a_acute|\ ly K\ |a_acute|\ llay (`https://www.mrcc.hu/ <https://www.mrcc.hu/>`_). Installation; ~~~~~~~~~~~~. Follow the instructions provided with the source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table belo",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
Energy Efficiency,energy,energy,"ut WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BSSE. .. index::; triple: setting; keywords; cp; triple: setting; keywords; vmfc; single: counterpoise correction. .. _`sec:cp()`:. Basis Set Superposition Corrections; ===================================. .. codeauthor:: Daniel G. A. Smith. .. autofunction:: psi4.driver.driver_nbody.nbody(func, method_string [, molecule, bsse_type, max_nbody, ptype, return_total_data]). The nbody function computes counterpoise-corrected (CP), non-CP (noCP), and Valiron-Mayer Function Counterpoise (VMFC) interaction energies for complexes composed of arbitrary numbers of monomers. **Examples :** ::. # Counterpoise corrected CCSD(T) energies for the Helium dimer; molecule mol {; He; --; He 1 3; }; # Calculate interaction energies only (skips monomers in monomer basis):; energy('CCSD(T)', bsse_type='cp'); # Calculate interaction and total energies, return interaction energies:; energy('CCSD(T)', bsse_type=['cp','nocp']); # Calculate and return counterpoise-corrected gradient; # Useful for e.g. CP-corrected geometry optimization; gradient('CCSD(T)', bsse_type='cp', return_total_data=True). # noCP, VMFC, and CP energy for a helium cluster, limited at 3 bodies; molecule mol {; He 0 0 0; --; He 0 0 4; --; He 0 4 0; --; He 4 0 0; }. # Returns the nocp energy as its first in the list; energy('CCSD(T)', bsse_type=['nocp', 'cp', 'vmfc'], max_nbody=3). API; ---. .. autoclass:: psi4.driver.driver_nbody.BsseEnum; :members:; :undoc-members:. .. autopydantic_model:: psi4.driver.driver_nbody.ManyBodyComputer. ",MatchSource.DOCS,doc/sphinxman/source/nbody.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst
Performance,optimiz,optimization,"ut WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BSSE. .. index::; triple: setting; keywords; cp; triple: setting; keywords; vmfc; single: counterpoise correction. .. _`sec:cp()`:. Basis Set Superposition Corrections; ===================================. .. codeauthor:: Daniel G. A. Smith. .. autofunction:: psi4.driver.driver_nbody.nbody(func, method_string [, molecule, bsse_type, max_nbody, ptype, return_total_data]). The nbody function computes counterpoise-corrected (CP), non-CP (noCP), and Valiron-Mayer Function Counterpoise (VMFC) interaction energies for complexes composed of arbitrary numbers of monomers. **Examples :** ::. # Counterpoise corrected CCSD(T) energies for the Helium dimer; molecule mol {; He; --; He 1 3; }; # Calculate interaction energies only (skips monomers in monomer basis):; energy('CCSD(T)', bsse_type='cp'); # Calculate interaction and total energies, return interaction energies:; energy('CCSD(T)', bsse_type=['cp','nocp']); # Calculate and return counterpoise-corrected gradient; # Useful for e.g. CP-corrected geometry optimization; gradient('CCSD(T)', bsse_type='cp', return_total_data=True). # noCP, VMFC, and CP energy for a helium cluster, limited at 3 bodies; molecule mol {; He 0 0 0; --; He 0 0 4; --; He 0 4 0; --; He 4 0 0; }. # Returns the nocp energy as its first in the list; energy('CCSD(T)', bsse_type=['nocp', 'cp', 'vmfc'], max_nbody=3). API; ---. .. autoclass:: psi4.driver.driver_nbody.BsseEnum; :members:; :undoc-members:. .. autopydantic_model:: psi4.driver.driver_nbody.ManyBodyComputer. ",MatchSource.DOCS,doc/sphinxman/source/nbody.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst
Usability,undo,undoc-members,"ut WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BSSE. .. index::; triple: setting; keywords; cp; triple: setting; keywords; vmfc; single: counterpoise correction. .. _`sec:cp()`:. Basis Set Superposition Corrections; ===================================. .. codeauthor:: Daniel G. A. Smith. .. autofunction:: psi4.driver.driver_nbody.nbody(func, method_string [, molecule, bsse_type, max_nbody, ptype, return_total_data]). The nbody function computes counterpoise-corrected (CP), non-CP (noCP), and Valiron-Mayer Function Counterpoise (VMFC) interaction energies for complexes composed of arbitrary numbers of monomers. **Examples :** ::. # Counterpoise corrected CCSD(T) energies for the Helium dimer; molecule mol {; He; --; He 1 3; }; # Calculate interaction energies only (skips monomers in monomer basis):; energy('CCSD(T)', bsse_type='cp'); # Calculate interaction and total energies, return interaction energies:; energy('CCSD(T)', bsse_type=['cp','nocp']); # Calculate and return counterpoise-corrected gradient; # Useful for e.g. CP-corrected geometry optimization; gradient('CCSD(T)', bsse_type='cp', return_total_data=True). # noCP, VMFC, and CP energy for a helium cluster, limited at 3 bodies; molecule mol {; He 0 0 0; --; He 0 0 4; --; He 0 4 0; --; He 4 0 0; }. # Returns the nocp energy as its first in the list; energy('CCSD(T)', bsse_type=['nocp', 'cp', 'vmfc'], max_nbody=3). API; ---. .. autoclass:: psi4.driver.driver_nbody.BsseEnum; :members:; :undoc-members:. .. autopydantic_model:: psi4.driver.driver_nbody.ManyBodyComputer. ",MatchSource.DOCS,doc/sphinxman/source/nbody.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst
Availability,toler,tolerance,"CENSE; .. #. .. include:: autodoc_abbr_options_c.rst. Notes on Options; ================. .. note:: The options referred to in the :ref:`sec:methods` section below; and indexed in :ref:`apdx:options_c_module` are placed in ``set`` blocks as; described in :ref:`sec:jobControl`, not as arguments to a Python function; (like ``energy()``). .. note:: All |PSIfour| keyword names and values are insensitive to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The few exceptions are documented for the :py:func:`~psi4.driver.wrapper_database.database` function,; where case structure must match the database file. .. _`op_c_bool`:; .. _`op_c_boolean`:; .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_c_conv`:; .. note:: Certain convergence and tolerance keywords, of type *double* (real numbers),; may be specified using either a real number or an integer; and integer *X* is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to :math:`10^{-6} E_h`, the user may set the ``e_convergence``; keyword to ``0.000001``, ``1.0e-6``, or ``6``. .. _`sec:psivarnotes`:. Notes on PSI Variables; ======================. .. note:: Starting in 1.6, there are three standard ways to access an excited state; property. We give examples below, but the method name and property name may change. * ``method ROOT 0 -> ROOT m property`` to get root ``m``.; * ``method ROOT 0 -> ROOT m property - h TRANSITION`` to get root m and; independently specify that the total transition symmetry is ``h``, e.g., A2.; * ``method ROOT 0 (h) -> ROOT m (i) property`` to get the transition; between two roots, specifying the symmetry of both states and the index of the target; roots among states of their own symmetry. For example, to target the second excited-state, which is also the lowest energ",MatchSource.DOCS,doc/sphinxman/source/notes_c.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_c.rst
Energy Efficiency,energy,energy,"ed in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. Notes on Options; ================. .. note:: The options referred to in the :ref:`sec:methods` section below; and indexed in :ref:`apdx:options_c_module` are placed in ``set`` blocks as; described in :ref:`sec:jobControl`, not as arguments to a Python function; (like ``energy()``). .. note:: All |PSIfour| keyword names and values are insensitive to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The few exceptions are documented for the :py:func:`~psi4.driver.wrapper_database.database` function,; where case structure must match the database file. .. _`op_c_bool`:; .. _`op_c_boolean`:; .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_c_conv`:; .. note:: Certain convergence and tolerance keywords, of type *double* (real numbers),; may be specified using either a real number or an integer; and integer *X* is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to :math:`10^{-6} E_h`, the user may set the ``e_conve",MatchSource.DOCS,doc/sphinxman/source/notes_c.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_c.rst
Integrability,interface,interface," and as Python function arguments.; The few exceptions are documented for the :py:func:`~psi4.driver.wrapper_database.database` function,; where case structure must match the database file. .. _`op_c_bool`:; .. _`op_c_boolean`:; .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_c_conv`:; .. note:: Certain convergence and tolerance keywords, of type *double* (real numbers),; may be specified using either a real number or an integer; and integer *X* is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to :math:`10^{-6} E_h`, the user may set the ``e_convergence``; keyword to ``0.000001``, ``1.0e-6``, or ``6``. .. _`sec:psivarnotes`:. Notes on PSI Variables; ======================. .. note:: Starting in 1.6, there are three standard ways to access an excited state; property. We give examples below, but the method name and property name may change. * ``method ROOT 0 -> ROOT m property`` to get root ``m``.; * ``method ROOT 0 -> ROOT m property - h TRANSITION`` to get root m and; independently specify that the total transition symmetry is ``h``, e.g., A2.; * ``method ROOT 0 (h) -> ROOT m (i) property`` to get the transition; between two roots, specifying the symmetry of both states and the index of the target; roots among states of their own symmetry. For example, to target the second excited-state, which is also the lowest energy state; of its irrep, the first two calls will take m = 2, while the last takes m = 0.; Methods that use this interface are: TD-fctl.; Note that numberings are associated with the calculation much more strongly than ; with the molecular system. Changing the number of roots sought, the symmetry ; subspace or the symmetry apportionment of roots under which the computation is run, ; or the excited state method are all likely to scramble root numberings. ",MatchSource.DOCS,doc/sphinxman/source/notes_c.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_c.rst
Security,access,access,"to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The few exceptions are documented for the :py:func:`~psi4.driver.wrapper_database.database` function,; where case structure must match the database file. .. _`op_c_bool`:; .. _`op_c_boolean`:; .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_c_conv`:; .. note:: Certain convergence and tolerance keywords, of type *double* (real numbers),; may be specified using either a real number or an integer; and integer *X* is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to :math:`10^{-6} E_h`, the user may set the ``e_convergence``; keyword to ``0.000001``, ``1.0e-6``, or ``6``. .. _`sec:psivarnotes`:. Notes on PSI Variables; ======================. .. note:: Starting in 1.6, there are three standard ways to access an excited state; property. We give examples below, but the method name and property name may change. * ``method ROOT 0 -> ROOT m property`` to get root ``m``.; * ``method ROOT 0 -> ROOT m property - h TRANSITION`` to get root m and; independently specify that the total transition symmetry is ``h``, e.g., A2.; * ``method ROOT 0 (h) -> ROOT m (i) property`` to get the transition; between two roots, specifying the symmetry of both states and the index of the target; roots among states of their own symmetry. For example, to target the second excited-state, which is also the lowest energy state; of its irrep, the first two calls will take m = 2, while the last takes m = 0.; Methods that use this interface are: TD-fctl.; Note that numberings are associated with the calculation much more strongly than ; with the molecular system. Changing the number of roots sought, the symmetry ; subspace or the symmetry apportionment of roots under which the computation is run, ; or the excited sta",MatchSource.DOCS,doc/sphinxman/source/notes_c.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_c.rst
Energy Efficiency,energy,energy," # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. Notes on Options; ================. .. comment warning:: Python naming practices of file_that_includes_function.function_name(); are followed below. In psi4 input files, it is only necessary to call the; function name alone. That is, use ``energy('scf')``, not ``driver.energy('scf')``. .. note:: The Python options referred to in the :ref:`sec:psithonFunc` section below; are placed as arguments to a Python; function (like ``energy()``), not in ``set`` blocks or commands.; .. comment and indexed in :ref:`apdx:options_py`. .. note:: All |PSIfour| keyword names and values are insensitive to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The one exception is documented for the *subset* option in the :py:func:`~psi4.driver.wrapper_database.database`; function, where case structure must match the database file. .. _`op_py_bool`:. .. _`op_py_boolean`:. .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_py_dertype`:. .. note:: The derivative level type for :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.frequency` functions can be specified by ``energ",MatchSource.DOCS,doc/sphinxman/source/notes_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst
Integrability,wrap,wrapped,":psithonFunc` section below; are placed as arguments to a Python; function (like ``energy()``), not in ``set`` blocks or commands.; .. comment and indexed in :ref:`apdx:options_py`. .. note:: All |PSIfour| keyword names and values are insensitive to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The one exception is documented for the *subset* option in the :py:func:`~psi4.driver.wrapper_database.database`; function, where case structure must match the database file. .. _`op_py_bool`:. .. _`op_py_boolean`:. .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_py_dertype`:. .. note:: The derivative level type for :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.frequency` functions can be specified by ``energy``, ``none``, or ``0`` for 0th derivative, ``gradient``, ``first``, or ``1`` for 1st derivative, and ``hessian``, ``second``, or ``2`` for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the :term:`POINTS <POINTS (FINDIF)>` option can be increased to ``5`` for greater accuracy at increased cost. .. _`op_py_function`:. .. note:: Function option for the Psithon function called by the current function;; the default is usually :py:func:`~psi4.driver.energy`. See Sec. :ref:`sec:intercalls`; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. .. _`op_py_molecule`:. .. note:: The molecule to be acted upon by the current function; the default is the; ""active"" molecule, which is the nearest preceeding molecule declared in a; ``molecule mymol {...}`` block or in an ``activate(mymol)`` statement. Note; that the value of this keyword (``mymol`` in the example) is a Python object; and so is not wrapped in quotes like a string. Technically, this is a; :py:class:`~psi4.core.Molecule` object. ",MatchSource.DOCS,doc/sphinxman/source/notes_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst
Performance,optimiz,optimize,"nly necessary to call the; function name alone. That is, use ``energy('scf')``, not ``driver.energy('scf')``. .. note:: The Python options referred to in the :ref:`sec:psithonFunc` section below; are placed as arguments to a Python; function (like ``energy()``), not in ``set`` blocks or commands.; .. comment and indexed in :ref:`apdx:options_py`. .. note:: All |PSIfour| keyword names and values are insensitive to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The one exception is documented for the *subset* option in the :py:func:`~psi4.driver.wrapper_database.database`; function, where case structure must match the database file. .. _`op_py_bool`:. .. _`op_py_boolean`:. .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_py_dertype`:. .. note:: The derivative level type for :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.frequency` functions can be specified by ``energy``, ``none``, or ``0`` for 0th derivative, ``gradient``, ``first``, or ``1`` for 1st derivative, and ``hessian``, ``second``, or ``2`` for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the :term:`POINTS <POINTS (FINDIF)>` option can be increased to ``5`` for greater accuracy at increased cost. .. _`op_py_function`:. .. note:: Function option for the Psithon function called by the current function;; the default is usually :py:func:`~psi4.driver.energy`. See Sec. :ref:`sec:intercalls`; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. .. _`op_py_molecule`:. .. note:: The molecule to be acted upon by the current function; the default is the; ""active"" molecule, which is the nearest preceeding molecule declared in a; ``molecule mymol {...}`` block or in an ``activate(mymol)`` statement. Note; that the value of this",MatchSource.DOCS,doc/sphinxman/source/notes_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst
Availability,error,errors,"brid NumPy and Psi4 can be found at the `Psi4Numpy; project <https://github.com/psi4/psi4numpy>`_. Currently only the Matrix; and Vector objects support NumPy interfacing. Let us begin with a simple; conversion from these objects to a NumPy array::. >>> import psi4; >>> import numpy as np. # Build the Psi4 data objects; >>> mat = psi4.core.Matrix(3, 3) ; >>> vec = psi4.core.Vector(3). # Convert to a NumPy array; >>> numpy_mat = np.array(mat); >>> numpy_vec = np.array(vec). Here the data is copied into new NumPy arrays. NumPy arrays can be converted; back to |PSIfour| objects using the ``from_array`` interface::. >>> new_mat = psi4.core.Matrix.from_array(mat); >>> new_vec = psi4.core.Vector.from_array(vec). NumPy Views; ~~~~~~~~~~~. Copying the data between NumPy and Psi4 objects can lead to excessive data; movement and convoluted code. Here we introduce the idea of ""Views"" where the; same data can be viewed by multiple objects. However, this can lead to very; subtle errors if used incorrectly and care needs to be taken when using these; views. Views can be created in two ways::. >>> numpy_mat_view = np.asarray(mat). # Access the NumPy object and set all values to 1 through broadcasting; >>> numpy_mat_view[:] = 1; ; >>> print(np.array(mat)); [[ 1. 1. 1.]; [ 1. 1. 1.]; [ 1. 1. 1.]]. Secondly, these objects have a ``.np`` attribute for easy access to the underlying data::. >>> mat.np[:] = 1. this operation is identical to the above. |PSIfour| Data Objects with Irreps; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| data objects natively support multiple :ref:`irreducible representations; <sec:symmetry>`; which is quite useful for Quantum Chemistry. However, this is not fundamental; to NumPy and some work around are required to natively support these; operations. Take the following irreped Matrix::. >>> dim = psi4.core.Dimension.from_list([1, 2, 3]); >>> irreped_mat = psi4.core.Matrix(""New Matrix"", dim, dim). # Create a list of Psi4 arrays; >>> list_of_arrays = irreped_ma",MatchSource.DOCS,doc/sphinxman/source/numpy.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst
Integrability,interface,interface," codeauthor:: Daniel G. A. Smith; .. sectionauthor:: Daniel G. A. Smith. *Module:* :source:`psi4/driver/p4util/numpy_helper.py`. Basics; ~~~~~~. Converting between the |PSIfour| Data classes and a NumPy array is easy through; various helper functions as detailed in this section. A quick overview NumPy; functionality can be found `here; <https://numpy.org/doc/stable/user/quickstart.html>`_. In addition,; numerous example of hybrid NumPy and Psi4 can be found at the `Psi4Numpy; project <https://github.com/psi4/psi4numpy>`_. Currently only the Matrix; and Vector objects support NumPy interfacing. Let us begin with a simple; conversion from these objects to a NumPy array::. >>> import psi4; >>> import numpy as np. # Build the Psi4 data objects; >>> mat = psi4.core.Matrix(3, 3) ; >>> vec = psi4.core.Vector(3). # Convert to a NumPy array; >>> numpy_mat = np.array(mat); >>> numpy_vec = np.array(vec). Here the data is copied into new NumPy arrays. NumPy arrays can be converted; back to |PSIfour| objects using the ``from_array`` interface::. >>> new_mat = psi4.core.Matrix.from_array(mat); >>> new_vec = psi4.core.Vector.from_array(vec). NumPy Views; ~~~~~~~~~~~. Copying the data between NumPy and Psi4 objects can lead to excessive data; movement and convoluted code. Here we introduce the idea of ""Views"" where the; same data can be viewed by multiple objects. However, this can lead to very; subtle errors if used incorrectly and care needs to be taken when using these; views. Views can be created in two ways::. >>> numpy_mat_view = np.asarray(mat). # Access the NumPy object and set all values to 1 through broadcasting; >>> numpy_mat_view[:] = 1; ; >>> print(np.array(mat)); [[ 1. 1. 1.]; [ 1. 1. 1.]; [ 1. 1. 1.]]. Secondly, these objects have a ``.np`` attribute for easy access to the underlying data::. >>> mat.np[:] = 1. this operation is identical to the above. |PSIfour| Data Objects with Irreps; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| data objects natively support multip",MatchSource.DOCS,doc/sphinxman/source/numpy.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst
Security,access,access," = psi4.core.Vector(3). # Convert to a NumPy array; >>> numpy_mat = np.array(mat); >>> numpy_vec = np.array(vec). Here the data is copied into new NumPy arrays. NumPy arrays can be converted; back to |PSIfour| objects using the ``from_array`` interface::. >>> new_mat = psi4.core.Matrix.from_array(mat); >>> new_vec = psi4.core.Vector.from_array(vec). NumPy Views; ~~~~~~~~~~~. Copying the data between NumPy and Psi4 objects can lead to excessive data; movement and convoluted code. Here we introduce the idea of ""Views"" where the; same data can be viewed by multiple objects. However, this can lead to very; subtle errors if used incorrectly and care needs to be taken when using these; views. Views can be created in two ways::. >>> numpy_mat_view = np.asarray(mat). # Access the NumPy object and set all values to 1 through broadcasting; >>> numpy_mat_view[:] = 1; ; >>> print(np.array(mat)); [[ 1. 1. 1.]; [ 1. 1. 1.]; [ 1. 1. 1.]]. Secondly, these objects have a ``.np`` attribute for easy access to the underlying data::. >>> mat.np[:] = 1. this operation is identical to the above. |PSIfour| Data Objects with Irreps; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| data objects natively support multiple :ref:`irreducible representations; <sec:symmetry>`; which is quite useful for Quantum Chemistry. However, this is not fundamental; to NumPy and some work around are required to natively support these; operations. Take the following irreped Matrix::. >>> dim = psi4.core.Dimension.from_list([1, 2, 3]); >>> irreped_mat = psi4.core.Matrix(""New Matrix"", dim, dim). # Create a list of Psi4 arrays; >>> list_of_arrays = irreped_mat.to_array(). # Or, use the .nph irreped accessor; >>> irreped_mat.nph[0][:] = 1. Where ``.nph`` is the irreped accessor form. If ``.np`` or ``np.array`` are; called on irreped Matrices or Vectors an error will be thrown; however, the; irreped form is always valid for non-irreped matrices. Array to Matrix; ~~~~~~~~~~~~~~~; A general function that converts |PSIfo",MatchSource.DOCS,doc/sphinxman/source/numpy.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst
Usability,simpl,simple,"uld have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; NumPy. .. _`sec:numpy`:. Interface to NumPy; ==================. .. codeauthor:: Daniel G. A. Smith; .. sectionauthor:: Daniel G. A. Smith. *Module:* :source:`psi4/driver/p4util/numpy_helper.py`. Basics; ~~~~~~. Converting between the |PSIfour| Data classes and a NumPy array is easy through; various helper functions as detailed in this section. A quick overview NumPy; functionality can be found `here; <https://numpy.org/doc/stable/user/quickstart.html>`_. In addition,; numerous example of hybrid NumPy and Psi4 can be found at the `Psi4Numpy; project <https://github.com/psi4/psi4numpy>`_. Currently only the Matrix; and Vector objects support NumPy interfacing. Let us begin with a simple; conversion from these objects to a NumPy array::. >>> import psi4; >>> import numpy as np. # Build the Psi4 data objects; >>> mat = psi4.core.Matrix(3, 3) ; >>> vec = psi4.core.Vector(3). # Convert to a NumPy array; >>> numpy_mat = np.array(mat); >>> numpy_vec = np.array(vec). Here the data is copied into new NumPy arrays. NumPy arrays can be converted; back to |PSIfour| objects using the ``from_array`` interface::. >>> new_mat = psi4.core.Matrix.from_array(mat); >>> new_vec = psi4.core.Vector.from_array(vec). NumPy Views; ~~~~~~~~~~~. Copying the data between NumPy and Psi4 objects can lead to excessive data; movement and convoluted code. Here we introduce the idea of ""Views"" where the; same data can be viewed by multiple objects. However, this can lead to very; subtle errors if used incorrectly and care needs to be taken when using these; views. Views can be created in two ways::. >>> numpy_mat_view = np.asarray(mat). # Access the NumPy object and set all values to 1 through broadcasting; >>> ",MatchSource.DOCS,doc/sphinxman/source/numpy.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst
Availability,avail,available," and its orbital-optimized variant OREMP2; are thus straightforward to implement in a (O)LCCD program by appropriate scaling of residual vector contributions and density matrices. * **OMP2** [Bozkaya:2011:omp2]_ and [Bozkaya:2013:omp2grad]_. * **OMP3** [Bozkaya:2011:omp3]_ , [Bozkaya:2013:omp3]_, and [Bozkaya:2013:omp3grad]_. * **OMP2.5** [Bozkaya:2011:omp3]_. * **OLCCD** [Bozkaya:2013:ocepa]_. * **LCCD** [Bozkaya:2013:ocepa]_. * **OREMP2** [Behnle:2021:OREMP]_, and [Behnle:2022:OREMP]_. Convergence Problems; ~~~~~~~~~~~~~~~~~~~~. For problematic open-shell systems, we recommend to use the ROHF or DFT orbitals as an initial guess for orbital-optimized methods. Both ROHF and ; DFT orbitals may provide better initial guesses than UHF orbitals, hence convergence may be significantly speeded up with ROHF or DFT orbitals. ; In order to use ROHF orbitals, simply ``set reference rohf``. For DFT orbitals, ``set reference uks`` and ``set dft_functional b3lyp``. Of; course users can use any DFT functional available in |PSIfour|. .. _`sec:occ_oo_mtds`:. Methods; ~~~~~~~. The various orbital-optimized methods supported by the OCC/DFOCC; modules in |Psifour| are summarized in Table :ref:`OCC OO; Methods <table:occ_oo_calls>` and detailed in Table :ref:`OCC; OO Capabilities <table:occ_stdsuite_oo>`. Note that while two; separate libraries OCC (conventional integrals ``CONV``) and DFOCC; (density-fitted ``DF`` and Cholesky-decomposed ``CD``) together provide; the methods described on this page, they are controlled through one; |globals__qc_module| value ``OCC``. Without ``set qc_module occ``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. .. _`table:occ_oo_calls`:. .. table:: Orbital-optimized theoretical methods accessible through OCC/DFOCC. +-------------------------+---------------------------------------------------------------+-------+; | name | calls method | OO |; +=========================+=",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
Energy Efficiency,energy,energy,"y (MBPT) equations. ; Further, computation of one-electron properties is easier because there are no response contributions to the particle ; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods ; [Krylov:2000:vod]_. Additionally, orbital-optimized coupled-cluster avoids spurious second-order ; poles in its response function, and its transition dipole moments are gauge invariant [Pedersen:1999:od]_. Another advantage is that the orbital-optimized methods do not suffer from artifactual symmetry-breaking ; instabilities [Crawford:1997:instability]_, [Sherrill:1998:od]_, [Bozkaya:2011:omp2]_, and [Bozkaya:2011:omp3]_.; Furthermore, Kurlancheek and Head-Gordon [Kurlancek:2009]_ demonstrated that first order properties such as ; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs. ; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation ; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further ; discussed that the orbital response equations generally have a singularity problem at the unrestriction point ; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or ; small eigenvalues of the one-particle density matrix (OPDM). These abnormal eigenvalues may lead to unphysical ; molecular properties such as vibrational frequencies. However, orbital-optimized MP2 (also MP3); will solve this N-representability problem by disregarding orbital response contribution of one-particle; density matrix. . Although the performance of coupled-cluster singles and doubles (CCSD) and orbital-optimized ; CCD (OD) is similar, the situation is different in the case of triples corrections, especially at stretched ; geometries [Bozkaya:2012:odtl]_. Bozkaya and Schaefer demonstrated that orbital-optimized coupled cluster based ; trip",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
Performance,optimiz,optimized,"undation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: Orbital-Optimized Methods, OMP2; single: Orbital-Optimized Methods, OMP3; single: Orbital-Optimized Methods, OMP2.5; single: Orbital-Optimized Methods, OLCCD. .. index::; pair: Orbital-Optimized Methods; theory; pair: OMP2; theory; pair: OMP3; theory; pair: OLCCD; theory. .. _`sec:occ_oo`:. OCC: Orbital-Optimized Coupled-Cluster and |MollerPlesset| Perturbation Theories; ================================================================================. .. codeauthor:: Ugur Bozkaya; .. sectionauthor:: Ugur Bozkaya. *Module:* :ref:`Keywords <apdx:occ>`, :ref:`PSI Variables <apdx:occ_psivar>`, :source:`OCC <psi4/src/psi4/occ>`. *Module:* :ref:`Keywords <apdx:dfocc>`, :ref:`PSI Variables <apdx:dfocc_psivar>`, :source:`DFOCC <psi4/src/psi4//dfocc>`. Introduction; ~~~~~~~~~~~~. Orbital-optimized methods have several advantages over their non-optimized counterparts. ; Once the orbitals are optimized, the wave function will obey the Hellmann--Feynman theorem; for orbital rotation parameters. Therefore, there is no need for orbital response terms ; in the evaluation of analytic gradients. In other words, it is unnecessary to solve the ; first order coupled-perturbed CC and many-body perturbation theory (MBPT) equations. ; Further, computation of one-electron properties is easier because there are no response contributions to the particle ; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods ; [Krylov:2000:vod]_. Additionally, orbital-optimized coupled-cluster avoids spurious second-order ; poles in its response function, and its transition dipole moments are gauge invariant [Pedersen:1999:od]_. Another advantage is that the orbital-optimized methods do not suffer from artifactual symmetry-breaking ; instabilities [Crawford:1997:instability]_, [She",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
Safety,avoid,avoids,"<apdx:occ_psivar>`, :source:`OCC <psi4/src/psi4/occ>`. *Module:* :ref:`Keywords <apdx:dfocc>`, :ref:`PSI Variables <apdx:dfocc_psivar>`, :source:`DFOCC <psi4/src/psi4//dfocc>`. Introduction; ~~~~~~~~~~~~. Orbital-optimized methods have several advantages over their non-optimized counterparts. ; Once the orbitals are optimized, the wave function will obey the Hellmann--Feynman theorem; for orbital rotation parameters. Therefore, there is no need for orbital response terms ; in the evaluation of analytic gradients. In other words, it is unnecessary to solve the ; first order coupled-perturbed CC and many-body perturbation theory (MBPT) equations. ; Further, computation of one-electron properties is easier because there are no response contributions to the particle ; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods ; [Krylov:2000:vod]_. Additionally, orbital-optimized coupled-cluster avoids spurious second-order ; poles in its response function, and its transition dipole moments are gauge invariant [Pedersen:1999:od]_. Another advantage is that the orbital-optimized methods do not suffer from artifactual symmetry-breaking ; instabilities [Crawford:1997:instability]_, [Sherrill:1998:od]_, [Bozkaya:2011:omp2]_, and [Bozkaya:2011:omp3]_.; Furthermore, Kurlancheek and Head-Gordon [Kurlancek:2009]_ demonstrated that first order properties such as ; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs. ; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation ; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further ; discussed that the orbital response equations generally have a singularity problem at the unrestriction point ; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or ; small eigenvalues of the",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
Security,access,accessible,"with ROHF or DFT orbitals. ; In order to use ROHF orbitals, simply ``set reference rohf``. For DFT orbitals, ``set reference uks`` and ``set dft_functional b3lyp``. Of; course users can use any DFT functional available in |PSIfour|. .. _`sec:occ_oo_mtds`:. Methods; ~~~~~~~. The various orbital-optimized methods supported by the OCC/DFOCC; modules in |Psifour| are summarized in Table :ref:`OCC OO; Methods <table:occ_oo_calls>` and detailed in Table :ref:`OCC; OO Capabilities <table:occ_stdsuite_oo>`. Note that while two; separate libraries OCC (conventional integrals ``CONV``) and DFOCC; (density-fitted ``DF`` and Cholesky-decomposed ``CD``) together provide; the methods described on this page, they are controlled through one; |globals__qc_module| value ``OCC``. Without ``set qc_module occ``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. .. _`table:occ_oo_calls`:. .. table:: Orbital-optimized theoretical methods accessible through OCC/DFOCC. +-------------------------+---------------------------------------------------------------+-------+; | name | calls method | OO |; +=========================+===============================================================+=======+; | omp2 | orbital-optimized second-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp2.5 | orbital-optimized average of MP2 and MP3 | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp3 | orbital-optimized third-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | oremp2 | orbital-optimized second-order REMP hybrid PT | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | olccd | orbital-optimized linear coupled cluster doub",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
Usability,simpl,simply,"H}^{(0)}_\text{RE} + A\widehat{H}^{(0)}_\text{MP}. Technically, the second order of RE corresponds to LCCD for RHF and UHF references. REMP2 and its orbital-optimized variant OREMP2; are thus straightforward to implement in a (O)LCCD program by appropriate scaling of residual vector contributions and density matrices. * **OMP2** [Bozkaya:2011:omp2]_ and [Bozkaya:2013:omp2grad]_. * **OMP3** [Bozkaya:2011:omp3]_ , [Bozkaya:2013:omp3]_, and [Bozkaya:2013:omp3grad]_. * **OMP2.5** [Bozkaya:2011:omp3]_. * **OLCCD** [Bozkaya:2013:ocepa]_. * **LCCD** [Bozkaya:2013:ocepa]_. * **OREMP2** [Behnle:2021:OREMP]_, and [Behnle:2022:OREMP]_. Convergence Problems; ~~~~~~~~~~~~~~~~~~~~. For problematic open-shell systems, we recommend to use the ROHF or DFT orbitals as an initial guess for orbital-optimized methods. Both ROHF and ; DFT orbitals may provide better initial guesses than UHF orbitals, hence convergence may be significantly speeded up with ROHF or DFT orbitals. ; In order to use ROHF orbitals, simply ``set reference rohf``. For DFT orbitals, ``set reference uks`` and ``set dft_functional b3lyp``. Of; course users can use any DFT functional available in |PSIfour|. .. _`sec:occ_oo_mtds`:. Methods; ~~~~~~~. The various orbital-optimized methods supported by the OCC/DFOCC; modules in |Psifour| are summarized in Table :ref:`OCC OO; Methods <table:occ_oo_calls>` and detailed in Table :ref:`OCC; OO Capabilities <table:occ_stdsuite_oo>`. Note that while two; separate libraries OCC (conventional integrals ``CONV``) and DFOCC; (density-fitted ``DF`` and Cholesky-decomposed ``CD``) together provide; the methods described on this page, they are controlled through one; |globals__qc_module| value ``OCC``. Without ``set qc_module occ``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. .. _`table:occ_oo_calls`:. .. table:: Orbital-optimized theoretical methods accessible through OCC/DFOCC. +------------------",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
Availability,avail,available,"----------+-----------------------------------------------------------------------------------+. There are two ways the computation of one-electron properties can be requested. ; Firstly, the properties can be evaluated from the last; computed one-particle density, using the following syntax::. oeprop(""MO_EXTENTS"", ""MULTIPOLE(4)"", title = ""hello!""). Note that it is the user's responsibility to ensure that the relaxed density; matrix is computed using the method of interest, which may require setting; additional keywords (see the method's manual section for details). The named; argument, *title*, is completely optional and is prepended to any; globals variables set during the computation. The unnamed arguments are the; properties to be computed. These can appear in any order, and multiple; properties may be requested, as in the example above. Note that, due to Python; syntax restrictions, the title argument must appear after the list of; properties to compute. The available properties are shown in the table above. The syntax above works well for computing properties using the SCF; wavefunction, however, may be difficult (or impossible) to use for some of the; correlated levels of theory. Alternatively, one-electron properties can be; computed using the built-in properties() function, e.g.::. properties('ccsd', properties=['dipole']). The :py:func:`~psi4.driver.properties` function provides limited functionality, but is a lot easier to; use for correlated methods. For capabilities of :py:func:`~psi4.driver.properties` see the; corresponding section of the manual. Basic Keywords; ^^^^^^^^^^^^^^. Multipole moments may be computed at any origin, which is controlled by the; global |globals__properties_origin| keyword. The keyword takes an array with; the following possible values:. .. _`table:oe_origin`:. .. table:: Allowed origin specifications. +-------------------------------+-------------------------------------------------------------------------------+; | Keyword | I",MatchSource.DOCS,doc/sphinxman/source/oeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst
Energy Efficiency,charge,charges,"|; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Electric field, on grid | GRID_FIELD | Generates {Ex,Ey,Ez} at each point grid_field.dat. See :ref:`sec:oeprop_grid` |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Molecular orbital extents | MO_EXTENTS | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Mulliken atomic charges | MULLIKEN_CHARGES | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | L\ |o_dots|\ wdin atomic charges | LOWDIN_CHARGES | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Wiberg bond indices | WIBERG_LOWDIN_INDICES | Uses (L\ |o_dots|\ wdin) symmetrically orthogonalized orbitals |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Mayer bond indices | MAYER_INDICES | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Natural orbital occupations | NO_OCCUPATIONS | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Stockholder Atomic Multipoles | MBIS_CHARGES | Generates atomic charges, dipoles, etc. See :ref:`sec:oeprop_mbis` |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Hirshfeld volume ratios | MBIS_VOLUME_RATIOS | Generate the A",MatchSource.DOCS,doc/sphinxman/source/oeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst
Modifiability,variab,variables," a number of one-electron properties; summarized in the table below. . .. _`table:oe_features`:. .. table:: Current one-electron property capabilities of |PSIfour|. +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Feature | Keyword | Notes |; +====================================+=======================+===================================================================================+; | Electric dipole moment | DIPOLE | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Electric quadrupole moment | QUADRUPOLE | Raw (traced) moments and traceless multipoles |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | All moments up order N | MULTIPOLE(N) | Only raw (traced) moments. Sets global variables e.g. ""DIPOLE"", ""32-POLE"" |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Electrostatic potential, at nuclei | ESP_AT_NUCLEI | Sets global variables ""ESP AT CENTER n"", n = 1 to natoms |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Electrostatic potential, on grid | GRID_ESP | Generates V at each point in grid_esp.dat. See :ref:`sec:oeprop_grid` |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Electric field, on grid | GRID_FIELD | Generates {Ex,Ey,Ez} at each point grid_field.dat. See :ref:`sec:oeprop_grid` |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Molecular ",MatchSource.DOCS,doc/sphinxman/source/oeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst
Testability,test,test,"units. The requested properties will be; written out in the same order as the grid point specification in grid.dat; see; the above table for the format and file name of the output. The grid may be generated in the input file using standard Python loops. By; capturing the wavefunction used to evaluate the one-electron properties, the; values at each grid point may be captured as Python arrays in the input file::. E, wfn = prop('scf', properties=[""GRID_ESP"", ""GRID_FIELD""], return_wfn=True); Vvals = wfn.oeprop.Vvals(); Exvals = wfn.oeprop.Exvals(); Eyvals = wfn.oeprop.Eyvals(); Ezvals = wfn.oeprop.Ezvals(). In this example, the *Vvals* array contains the electrostatic potential at each; grid point, in the order that the grid was specified, while the *Exvals*,; *Eyvals* and *Ezvals* arrays contain the *x*, *y* and *z* components of the; electric field, respectively; all of these arrays can be iterated and; manipulated using standard Python syntax. For a complete demonstration of this; utility, see the :srcsample:`props4` test case. .. index:: ISA; MBIS. .. _`sec:oeprop_mbis`:. Minimal Basis Iterative Stockholder; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The Minimal Basis Iterative Stockholder (MBIS) method is one of many procedures; that partitions a molecular one-particle density matrix into atomic electron densities.; Running MBIS in |PSIfour| will calculate atomic valence charge widths, volume ratios,; atomic charges, as well as dipoles, quadrupoles, and octupoles. ; Additionally, all expectation values of radial moments of n-th order (:math:`<r^n>`) ; are computed up to fourth order. Higher moments can be computed by specifying |globals__max_radial_moment|.; The volume ratios are computed as the ratio between the volume of the atomic density; (:math:`<r^3>`) and the volume of the free atom computed using the same level; of theory, but with a potentially unrestricted reference. The allowed number of iterations and convergence criteria for the stockholder ; algorithm is c",MatchSource.DOCS,doc/sphinxman/source/oeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst
Integrability,wrap,wrapper,"file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; optimize(); pair: geometry optimization; function call; pair: gradient; function call; see: opt(); optimize(). .. _`sec:opt()`:. Geometry Optimization |w---w| :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.gradient`; ===================================================================================================. * :ref:`Psi4 Native Gradient Methods <table:grad_gen>`; * :ref:`Psi4 Native DFT Gradient Methods (excepting double-hybrids) <table:grad_gen>`; * :ref:`CFOUR Interfaced Gradient Methods <table:grad_cfour>`. For further discussion of geometry optimization, see; Sec. :ref:`sec:optking`. :py:func:`~psi4.driver.optimize` is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, :py:func:`~psi4.driver.optimize` is a wrapper that repeatedly; calls :py:func:`~psi4.driver.gradient` that computes the gradient then adds a; call to the :ref:`geometry optimization module <sec:optking>`. .. autofunction:: psi4.optimize(name [, molecule, return_wfn, func, mode, dertype, hessian_with]); :noindex:. .. autofunction:: psi4.gradient(name [, molecule, return_wfn, func, dertype]); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/opt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst
Performance,optimiz,optimize,"i4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; optimize(); pair: geometry optimization; function call; pair: gradient; function call; see: opt(); optimize(). .. _`sec:opt()`:. Geometry Optimization |w---w| :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.gradient`; ===================================================================================================. * :ref:`Psi4 Native Gradient Methods <table:grad_gen>`; * :ref:`Psi4 Native DFT Gradient Methods (excepting double-hybrids) <table:grad_gen>`; * :ref:`CFOUR Interfaced Gradient Methods <table:grad_cfour>`. For further discussion of geometry optimization, see; Sec. :ref:`sec:optking`. :py:func:`~psi4.driver.optimize` is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, :py:func:`~psi4.driver.optimize` is a wrapper that repeatedly; calls :py:func:`~psi4.driver.gradient` that computes the gradient then adds a; call to the :ref:`geometry optimization module <sec:optking>`. .. autofunction:: psi4.optimize(name [, molecule, return_wfn, ",MatchSource.DOCS,doc/sphinxman/source/opt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst
Security,access,access,"file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; optimize(); pair: geometry optimization; function call; pair: gradient; function call; see: opt(); optimize(). .. _`sec:opt()`:. Geometry Optimization |w---w| :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.gradient`; ===================================================================================================. * :ref:`Psi4 Native Gradient Methods <table:grad_gen>`; * :ref:`Psi4 Native DFT Gradient Methods (excepting double-hybrids) <table:grad_gen>`; * :ref:`CFOUR Interfaced Gradient Methods <table:grad_cfour>`. For further discussion of geometry optimization, see; Sec. :ref:`sec:optking`. :py:func:`~psi4.driver.optimize` is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, :py:func:`~psi4.driver.optimize` is a wrapper that repeatedly; calls :py:func:`~psi4.driver.gradient` that computes the gradient then adds a; call to the :ref:`geometry optimization module <sec:optking>`. .. autofunction:: psi4.optimize(name [, molecule, return_wfn, func, mode, dertype, hessian_with]); :noindex:. .. autofunction:: psi4.gradient(name [, molecule, return_wfn, func, dertype]); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/opt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst
Availability,avail,available,"Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:handlingOptions_py`:. LibOptions: globals, locals, has_changed and all that; =====================================================. To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. - Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take. - The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user. - The c-side module or plugin can then query the Options object for the; values associated with each keyword. - The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options; -----------------. Each module needs to make itself known to the Options object, via a; read_options section. For plugins, this routine is provided by the user; in the plugin code. For native |PSIfour| modules, the entries need to; be appended to the read_options code in :source:`psi4/src/read_options.cc`.; An example of such a routine is. .. code-block:: cpp. if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep ; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
Integrability,rout,routine," .. include:: autodoc_abbr_options_c.rst. .. _`sec:handlingOptions_py`:. LibOptions: globals, locals, has_changed and all that; =====================================================. To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. - Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take. - The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user. - The c-side module or plugin can then query the Options object for the; values associated with each keyword. - The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options; -----------------. Each module needs to make itself known to the Options object, via a; read_options section. For plugins, this routine is provided by the user; in the plugin code. For native |PSIfour| modules, the entries need to; be appended to the read_options code in :source:`psi4/src/read_options.cc`.; An example of such a routine is. .. code-block:: cpp. if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep ; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str_i(""DATA_FILE"", ""data.dat"");; /*- The algorithm to use for the $\left<VV||",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
Modifiability,plugin,plugin,"ms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:handlingOptions_py`:. LibOptions: globals, locals, has_changed and all that; =====================================================. To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. - Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take. - The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user. - The c-side module or plugin can then query the Options object for the; values associated with each keyword. - The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options; -----------------. Each module needs to make itself known to the Options object, via a; read_options section. For plugins, this routine is provided by the user; in the plugin code. For native |PSIfour| modules, the entries need to; be appended to the read_options code in :source:`psi4/src/read_options.cc`.; An example of such a routine is. .. code-block:: cpp. if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do sa",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
Performance,perform,performed,"ed local scope, or in the context of ""What will the; specified module use?"". .. note:: ""Global"" in the sense of the discussion has *nothing*; to do with the globals section at the top of :source:`psi4/src/read_options.cc`. That; section is just a convenient place for options and associated values; that are used by most, if not all, modules. .. comment Those options could be distributed out to; all the modules below and the globals section dissolved with no change; to psi's operation.; :source:`src/bin/psi4/read_options.cc`. That section is just a. There are two primary purposes for interacting with options in the python driver. - **Preserving User Options** (Enforcing definition [a] of has_changed). The first, less-interesting, use of retrieving user option values has; been to preserve them so that they may be restored at the end after the; procedure itself has clobbered them. By decoupling global_option and; local_option commands, this can now be performed neatly by saving at the; beginning the global and local values and the global and local; has_changed values, then restoring them at the end. Below is an example; of this procedure; don't actually do this. ::. from psi4 import core. g_user_scftype = core.get_global_option('SCF_TYPE'); l_user_scftype_scf = core.get_local_option('SCF', 'SCF_TYPE'); bg_user_scftype = core.has_global_option_changed('SCF_TYPE'); bl_user_scftype_scf = core.has_local_option_changed('SCF', 'SCF_TYPE'). g_user_wfn = core.get_global_option('WFN'); l_user_wfn = core.get_local_option('MP2', 'WFN'); bg_user_wfn = core.has_global_option_changed('WFN'); bl_user_wfn = core.has_local_option_changed('MP2', 'WFN'). # body of function; # scf_type and wfn are freely changed, LOCALLY; # core.scf() and core.mp2() are run. core.set_global_option('SCF_TYPE', g_user_scftype); if not bg_user_scftype:; core.revoke_global_option_changed('SCF_TYPE'); core.set_local_option('SCF', 'SCF_TYPE', l_user_scftype_scf); if not bl_user_scftype_scf:; core.revoke_local_opt",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
Security,access,accessible,".. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:handlingOptions_py`:. LibOptions: globals, locals, has_changed and all that; =====================================================. To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. - Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take. - The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user. - The c-side module or plugin can then query the Options object for the; values associated with each keyword. - The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options; -----------------. Each module needs to make itself known to the Options object, via a; read_options section. For plugins, this routine is provided by the user; in the plugin code. For native |PSIfour| modules, the entries need to; be appended to the read_options code in :source:`psi4/src/read_options.cc`.; An example of such a routine is. .. code-block:: cpp. if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep ; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an a",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
Usability,simpl,simplify,"nding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:handlingOptions_py`:. LibOptions: globals, locals, has_changed and all that; =====================================================. To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. - Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take. - The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user. - The c-side module or plugin can then query the Options object for the; values associated with each keyword. - The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options; -----------------. Each module needs to make itself known to the Options object, via a; read_options section. For plugins, this routine is provided by the user; in the plugin code. For native |PSIfour| modules, the entries need to; be appended to the read_options code in :source:`psi4/src/read_options.cc`.; An example of such a routine is. .. code-block:: cpp. if (name",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
Availability,redundant,redundant,"Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: geometry optimization, optimization. .. _`sec:optking`:. Geometry Optimization; =====================. .. codeauthor:: Rollin A. King and Alexander G. Heide; .. sectionauthor:: Rollin A. King, Alexander G. Heide, and Lori A. Burns. *Module:* :ref:`Keywords <apdx:optking>`, `OPTKING <https://github.com/psi-rking/optking>`_. |PSIfour| carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives |w---w| both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. However, for separated; fragments, we have chosen not to employ their ""extra-redundant"" coordinates. The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; |optking__covalent_connect|. If the user finds that some; connectivity is lacking by default, then this value may be increased. .. warning:: The selection of a Z-matrix input, and in particular the inclusion; of dummy atoms, has no effect on the behavior of the optimizer, which begins; from a Cartesian",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
Deployability,update,update,"Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: geometry optimization, optimization. .. _`sec:optking`:. Geometry Optimization; =====================. .. codeauthor:: Rollin A. King and Alexander G. Heide; .. sectionauthor:: Rollin A. King, Alexander G. Heide, and Lori A. Burns. *Module:* :ref:`Keywords <apdx:optking>`, `OPTKING <https://github.com/psi-rking/optking>`_. |PSIfour| carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives |w---w| both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. However, for separated; fragments, we have chosen not to employ their ""extra-redundant"" coordinates. The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; |optking__covalent_connect|. If the user finds that some; connectivity is lacking by default, then this value may be increased. .. warning:: The selection of a Z-matrix input, and in particular the inclusion; of dummy atoms, has no effect on the behavior of the optimizer, which begins; from a Cartesian",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
Energy Efficiency,energy,energy,"specified through |optking__interfrag_coords|); See `here <DimerSection_>` for two examples of their use. Basic Keywords; ^^^^^^^^^^^^^^. .. include:: autodir_options_c/optking__opt_type.rst; .. include:: autodir_options_c/optking__step_type.rst; .. include:: autodir_options_c/optking__geom_maxiter.rst; .. include:: autodir_options_c/optking__g_convergence.rst; .. include:: autodir_options_c/optking__full_hess_every.rst. .. index:: geometry optimization; minima; .. _`sec:optkingExamples`:. Optimizing Minima; ^^^^^^^^^^^^^^^^^. First, define the molecule and basis in the input. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }; ; set basis dz. Then the following are examples of various types of calculations that can be completed. * Optimize a geometry using default methods (RFO step)::. optimize('scf'). * Optimize using Newton-Raphson steps instead of RFO steps::. set step_type nr; optimize('scf'). * Optimize using finite differences of energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Sch",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
Integrability,depend,depend,"23155 2.1638694922; H 2.1923374156 -0.9964630692 5.1155773223; nocom; units au; }; ; set {; basis 6-31+G ; frag_mode MULTI. # The line below specifies the reference points that will be used to construct the; # interfragment coordinates between the two fragments (called A and B).; # The format is the following:; # [[A-1], [A-2], [A-3]], [[B-1], [B-2], [B-3]]; #; # In terms of atoms within each fragment, the line below chooses, for water:; # H3 of water for the first reference point, O1 of water for the second reference point, and; # H2 of water for the third reference point.; # For benzene: the mean of the positions of all the C atoms, C2, one of the Carbon atoms,; # and C6, another one of the carbon atoms. frag_ref_atoms [; [[3], [1], [2]], [[4, 5, 6, 7, 8, 9], [5], [9]]; ] ; }; ; optimize(""mp2""). For even greater control, a dictionary can be passed to |optking__interfrag_coords|. The coordinates that are created between two dimers depend upon the number of atoms present; The fragments `A` and `B` have up to 3 reference atoms each as shown in; :ref:`Dimer coordinate table <table:DimerFrag>`.; The interfragment coordinates are named and can be frozen according to their names as show in ; example below. For specifying reference points, use 1 based indexing. . .. _`table:DimerFrag`:. .. table:: Dimer coordinates. +---------+----------+-------------+---------------------------------+; | name | type | atom-labels | present, if |; +=========+==========+=============+=================================+; | RAB | distance | A0-B0 | always | ; +---------+----------+-------------+---------------------------------+; | theta_A | angle | A1-A0-B0 | A has > 1 atom |; +---------+----------+-------------+---------------------------------+; | theta_B | angle | A0-B0-B1 | B has > 1 atom |; +---------+----------+-------------+---------------------------------+; | tau | dihedral | A1-A0-B0-B1 | A and B have > 1 atom |; +---------+----------+-------------+---------------------------------+",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
Performance,optimiz,optimization,"age; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: geometry optimization, optimization. .. _`sec:optking`:. Geometry Optimization; =====================. .. codeauthor:: Rollin A. King and Alexander G. Heide; .. sectionauthor:: Rollin A. King, Alexander G. Heide, and Lori A. Burns. *Module:* :ref:`Keywords <apdx:optking>`, `OPTKING <https://github.com/psi-rking/optking>`_. |PSIfour| carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives |w---w| both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. H",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
Safety,redund,redundant,"Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: geometry optimization, optimization. .. _`sec:optking`:. Geometry Optimization; =====================. .. codeauthor:: Rollin A. King and Alexander G. Heide; .. sectionauthor:: Rollin A. King, Alexander G. Heide, and Lori A. Burns. *Module:* :ref:`Keywords <apdx:optking>`, `OPTKING <https://github.com/psi-rking/optking>`_. |PSIfour| carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives |w---w| both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. However, for separated; fragments, we have chosen not to employ their ""extra-redundant"" coordinates. The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; |optking__covalent_connect|. If the user finds that some; connectivity is lacking by default, then this value may be increased. .. warning:: The selection of a Z-matrix input, and in particular the inclusion; of dummy atoms, has no effect on the behavior of the optimizer, which begins; from a Cartesian",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
Testability,test,tested,"ENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: geometry optimization, optimization. .. _`sec:optking`:. Geometry Optimization; =====================. .. codeauthor:: Rollin A. King and Alexander G. Heide; .. sectionauthor:: Rollin A. King, Alexander G. Heide, and Lori A. Burns. *Module:* :ref:`Keywords <apdx:optking>`, `OPTKING <https://github.com/psi-rking/optking>`_. |PSIfour| carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives |w---w| both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. However, for separated; fragments, we have chosen not to employ their ""extra-redundant"" coordinates. The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; |optking__covalent_connect|. If the user finds that some; connectivity is lacking by default, then this value may be increased. .. warning:: The selection of a Z-matrix input, and in particular the inclusion; of dummy atoms, has no effect on the behavior of the optimizer, which begins; from a Cartesian representation of the system. .. _DimerIntro:. Presently, by default, separate fragments are bonded by the; nearest atoms, and the whole system is treated as if it were part of one; molecule. However, with the option |optking__frag_mode|, fragments; may instead be related by a minimal set of ",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
Usability,simpl,simple,"eps::. set step_type nr; optimize('scf'). * Optimize using finite differences of energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition States and Reaction Paths; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * Calculate a starting Hessian and optimize the ""transition state"" of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails)::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). * At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum::. molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.39",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
Availability,down,downloads," with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: PCMSolver, PCM, continuum solvation. .. _`sec:pcmsolver`:. Interface to PCMSolver by R. Di Remigio; =======================================. .. codeauthor:: Roberto Di Remigio, T. Daniel Crawford, Andrew C. Simmonett; .. sectionauthor:: Roberto Di Remigio. *Module:* :ref:`Keywords <apdx:pcm>`, :ref:`PSI Variables <apdx:pcm_psivar>`, :source:`PCMSolver <psi4/src/psi4/libpsipcm/>`. .. image:: https://img.shields.io/badge/home-PCMSolver-5077AB.svg; :target: https://github.com/PCMSolver/pcmsolver. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the PCMSolver library developed; by R. Di Remigio and L. Frediani.; The PCMSolver library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable continuum model (PCM), a continuum solvation model [Tomasi:2005:2999]_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/pcmsolver/badges/version.svg; :target: https://anaconda.org/psi4/pcmsolver. * PCMSolver is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, PCMSolver has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; PCMSolver can be obtained through ``conda install pcmsolver -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_PCMSolver`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect PCMSolver and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. p",MatchSource.DOCS,doc/sphinxman/source/pcmsolver.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst
Deployability,configurat,configuration," with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: PCMSolver, PCM, continuum solvation. .. _`sec:pcmsolver`:. Interface to PCMSolver by R. Di Remigio; =======================================. .. codeauthor:: Roberto Di Remigio, T. Daniel Crawford, Andrew C. Simmonett; .. sectionauthor:: Roberto Di Remigio. *Module:* :ref:`Keywords <apdx:pcm>`, :ref:`PSI Variables <apdx:pcm_psivar>`, :source:`PCMSolver <psi4/src/psi4/libpsipcm/>`. .. image:: https://img.shields.io/badge/home-PCMSolver-5077AB.svg; :target: https://github.com/PCMSolver/pcmsolver. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the PCMSolver library developed; by R. Di Remigio and L. Frediani.; The PCMSolver library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable continuum model (PCM), a continuum solvation model [Tomasi:2005:2999]_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/pcmsolver/badges/version.svg; :target: https://anaconda.org/psi4/pcmsolver. * PCMSolver is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, PCMSolver has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; PCMSolver can be obtained through ``conda install pcmsolver -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_PCMSolver`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect PCMSolver and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. p",MatchSource.DOCS,doc/sphinxman/source/pcmsolver.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst
Energy Efficiency,charge,charges,"rce and you want PCMSolver built from; from source also,; enable it as a feature with :makevar:`ENABLE_PCMSolver`,; and let the build system fetch and build it and activate dependent code. .. index:: PCM; Using PCM. .. _`sec:usingPCM`:. Using the polarizable continuum model; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The inclusion of a PCM description of the solvent into your calculation; can be achieved in two ways in |PSIfour|, using either the PCMSolver or ddx package.; PCMSolver is based on a boundary-element discretisation [Cances:1998:309]_,; while ddx is based on a domain decomposition approach; [Cances:2013:054111]_ making it linear scaling.; For more details about ddx see the :ref:`section on ddx <sec:ddx>`. Using PCMsolver is achieved instead by setting |globals__pcm| ``true`` in your input file.; |Psifour| understands the additional option |pcm__pcm_scf_type| with possible values ``total``; (the default) or ``separate``.; The latter forces the separate handling of nuclear and electronic electrostatic potentials and; polarization charges. It is mainly useful for debugging. For the calculation of vertical excitation energies with PCM non-equilibrium solvation should be included with: ::. pcm = {; Medium {; Nonequilibrium = True; }; }. .. note:: At present PCM can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. .. warning:: The PCMSolver library **cannot** exploit molecular point group symmetry. .. warning:: ROHF with PCM is known **not to work**. See `issue #999 on GitHub <https://github.com/psi4/psi4/issues/999>`_.; For the adventurous, a fix is available in `pull request #953 on GitHub <https://github.com/psi4/psi4/pull/953>`_. .. warning:: Analytic gradients and Hessians **are not*",MatchSource.DOCS,doc/sphinxman/source/pcmsolver.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst
Integrability,interface,interface,"more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: PCMSolver, PCM, continuum solvation. .. _`sec:pcmsolver`:. Interface to PCMSolver by R. Di Remigio; =======================================. .. codeauthor:: Roberto Di Remigio, T. Daniel Crawford, Andrew C. Simmonett; .. sectionauthor:: Roberto Di Remigio. *Module:* :ref:`Keywords <apdx:pcm>`, :ref:`PSI Variables <apdx:pcm_psivar>`, :source:`PCMSolver <psi4/src/psi4/libpsipcm/>`. .. image:: https://img.shields.io/badge/home-PCMSolver-5077AB.svg; :target: https://github.com/PCMSolver/pcmsolver. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the PCMSolver library developed; by R. Di Remigio and L. Frediani.; The PCMSolver library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable continuum model (PCM), a continuum solvation model [Tomasi:2005:2999]_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/pcmsolver/badges/version.svg; :target: https://anaconda.org/psi4/pcmsolver. * PCMSolver is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, PCMSolver has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; PCMSolver can be obtained through ``conda install pcmsolver -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_PCMSolver`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect PCMSolv",MatchSource.DOCS,doc/sphinxman/source/pcmsolver.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst
Modifiability,config,configuration," with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: PCMSolver, PCM, continuum solvation. .. _`sec:pcmsolver`:. Interface to PCMSolver by R. Di Remigio; =======================================. .. codeauthor:: Roberto Di Remigio, T. Daniel Crawford, Andrew C. Simmonett; .. sectionauthor:: Roberto Di Remigio. *Module:* :ref:`Keywords <apdx:pcm>`, :ref:`PSI Variables <apdx:pcm_psivar>`, :source:`PCMSolver <psi4/src/psi4/libpsipcm/>`. .. image:: https://img.shields.io/badge/home-PCMSolver-5077AB.svg; :target: https://github.com/PCMSolver/pcmsolver. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the PCMSolver library developed; by R. Di Remigio and L. Frediani.; The PCMSolver library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable continuum model (PCM), a continuum solvation model [Tomasi:2005:2999]_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/pcmsolver/badges/version.svg; :target: https://anaconda.org/psi4/pcmsolver. * PCMSolver is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, PCMSolver has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; PCMSolver can be obtained through ``conda install pcmsolver -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_PCMSolver`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect PCMSolver and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. p",MatchSource.DOCS,doc/sphinxman/source/pcmsolver.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst
Performance,optimiz,optimize,"y useful for debugging. For the calculation of vertical excitation energies with PCM non-equilibrium solvation should be included with: ::. pcm = {; Medium {; Nonequilibrium = True; }; }. .. note:: At present PCM can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. .. warning:: The PCMSolver library **cannot** exploit molecular point group symmetry. .. warning:: ROHF with PCM is known **not to work**. See `issue #999 on GitHub <https://github.com/psi4/psi4/issues/999>`_.; For the adventurous, a fix is available in `pull request #953 on GitHub <https://github.com/psi4/psi4/pull/953>`_. .. warning:: Analytic gradients and Hessians **are not** available with PCM. Finite differences will be used; regardless of the ``dertype`` passed to the ``optimize`` function.; See :srcsample:`pcmsolver/opt-fd` for a sample input. The PCM model and molecular cavity are specified in a ``pcm`` section that has; to be explicitly typed in by the user. This additional section follows a syntax; that is slightly different from that of |Psifour| and is fully documented; `here <http://pcmsolver.readthedocs.io/en/latest/users/input.html>`_. A typical input for a Hartree--Fock calculation with PCM would look like the following: ::. molecule NH3 {; symmetry c1; N -0.0000000001 -0.1040380466 0.0000000000; H -0.9015844116 0.4818470201 -1.5615900098; H -0.9015844116 0.4818470201 1.5615900098; H 1.8031688251 0.4818470204 0.0000000000; units bohr; no_reorient; no_com; }. set {; basis STO-3G; scf_type pk; pcm true; pcm_scf_type total; }. pcm = {; Units = Angstrom; Medium {; SolverType = IEFPCM; Solvent = Water; }. Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. More examples can be ",MatchSource.DOCS,doc/sphinxman/source/pcmsolver.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst
Safety,detect,detect,"adthedocs.io/en/latest/. |PSIfour| contains code to interface to the PCMSolver library developed; by R. Di Remigio and L. Frediani.; The PCMSolver library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable continuum model (PCM), a continuum solvation model [Tomasi:2005:2999]_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/pcmsolver/badges/version.svg; :target: https://anaconda.org/psi4/pcmsolver. * PCMSolver is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, PCMSolver has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; PCMSolver can be obtained through ``conda install pcmsolver -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_PCMSolver`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect PCMSolver and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. pcmsolver from conda without thinking, consult. * To remove a conda installation, ``conda remove pcmsolver``. **Source**. * .. image:: https://img.shields.io/github/tag/PCMSolver/pcmsolver.svg?maxAge=2592000; :target: https://github.com/PCMSolver/pcmsolver. * If using |PSIfour| built from source and you want PCMSolver built from; from source also,; enable it as a feature with :makevar:`ENABLE_PCMSolver`,; and let the build system fetch and build it and activate dependent code. .. index:: PCM; Using PCM. .. _`sec:usingPCM`:. Using the polarizable continuum model; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The inclusion of a PCM description of the solvent into your calculation; can be achieved in two ways in |PSIfour|, using either the PCMSolver or ddx package.; PCMSolver is based on a boundary-element discretisation [Canc",MatchSource.DOCS,doc/sphinxman/source/pcmsolver.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst
Testability,test,tests,"r a sample input. The PCM model and molecular cavity are specified in a ``pcm`` section that has; to be explicitly typed in by the user. This additional section follows a syntax; that is slightly different from that of |Psifour| and is fully documented; `here <http://pcmsolver.readthedocs.io/en/latest/users/input.html>`_. A typical input for a Hartree--Fock calculation with PCM would look like the following: ::. molecule NH3 {; symmetry c1; N -0.0000000001 -0.1040380466 0.0000000000; H -0.9015844116 0.4818470201 -1.5615900098; H -0.9015844116 0.4818470201 1.5615900098; H 1.8031688251 0.4818470204 0.0000000000; units bohr; no_reorient; no_com; }. set {; basis STO-3G; scf_type pk; pcm true; pcm_scf_type total; }. pcm = {; Units = Angstrom; Medium {; SolverType = IEFPCM; Solvent = Water; }. Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. More examples can be found in the directories with PCM tests; :srcsample:`pcmsolver/ccsd-pte`,; :srcsample:`pcmsolver/scf`,; :srcsample:`pcmsolver/opt-fd`,; :srcsample:`pcmsolver/dft`, and; :srcsample:`pcmsolver/dipole`. Keywords for PCMSolver; ~~~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/globals__pcm.rst; .. include:: autodir_options_c/pcm__pcm_scf_type.rst; .. include:: autodir_options_c/pcm__pcm_cc_type.rst. .. _`cmake:pcmsolver`:. How to configure PCMSolver for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) PCMSolver. * Upstream Dependencies |w---w| PCMSolver |dr| Fortran, zlib. **CMake Variables**. * :makevar:`ENABLE_PCMSolver` |w---w| CMake variable toggling whether Psi4 builds with PCMSolver; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directo",MatchSource.DOCS,doc/sphinxman/source/pcmsolver.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst
Availability,down,down,"|. Presently, topics are brought up on e-mail threads (where; discussion is very temporally localized and not everyone is aware of it; unless cc'd), are brought up at workshops (where people may be absent, no; record is left, and not everyone may have prepared a position on the; topic), or agreed between a couple people over g-chat (others remain; unaware of plans), or planned by someone (who may not have committed those; plans to a ticket or who wants general approval before restructuring the; code). Path of a PsiPEP; ----------------. * Someone creates a file ``doc/sphinxman/source/pepXXXX.rst`` modeled; on :source:`doc/sphinxman/source/pep0000model.rst` and adds; it to ``STATICDOC`` in :source:`doc/sphinxman/CMakeLists.txt`. The file; should have header fields modeled on another PsiPEP and a discussion of; the proposed change or practice. * Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down. * Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history). * Once there's agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include; -------------------------. * **Best practices or re-vamped best practices** . Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. * **Request/present viewpoint on organization**. Draw attention to organization needed in code outside one's area of; expertise. Request interface for some structure (*e.g.*, gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. *",MatchSource.DOCS,doc/sphinxman/source/pep0001.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pep0001.rst
Integrability,protocol,protocol,"=========================; PEP1: Proposing PsiPEP for |PSIfour|; ====================================. :PEP: 1; :Title: Proposing PsiPEP for |PSIfour|; :Last-Modified: 04-Jul-2012; :Author: Lori Burns; :Content-Type: text/x-rst; :Created: 04-Jul-2012. .. comment :Version: <version string>; .. comment * BDFL-Delegate: <PEP czar's real name>; .. comment * Discussions-To: <email address>; .. comment Status: <Draft | Active | Accepted | Deferred | Rejected |; .. comment Withdrawn | Final | Superseded>; .. comment Type: <Standards Track | Informational | Process>; .. comment * Requires: <pep numbers>; .. comment * Python-Version: <version number>; .. comment Post-History: <dates of postings to python-list and python-dev>; .. comment * Replaces: <pep number>; .. comment * Superseded-By: <pep number>; .. comment * Resolution: <url>. This document proposes using a (much more informal) version of Python's; PEP (Python Enhancement Proposal `PEP1; <https://www.python.org/dev/peps/pep-0001/>`_) protocol to organize; |PSIfour|. Presently, topics are brought up on e-mail threads (where; discussion is very temporally localized and not everyone is aware of it; unless cc'd), are brought up at workshops (where people may be absent, no; record is left, and not everyone may have prepared a position on the; topic), or agreed between a couple people over g-chat (others remain; unaware of plans), or planned by someone (who may not have committed those; plans to a ticket or who wants general approval before restructuring the; code). Path of a PsiPEP; ----------------. * Someone creates a file ``doc/sphinxman/source/pepXXXX.rst`` modeled; on :source:`doc/sphinxman/source/pep0000model.rst` and adds; it to ``STATICDOC`` in :source:`doc/sphinxman/CMakeLists.txt`. The file; should have header fields modeled on another PsiPEP and a discussion of; the proposed change or practice. * Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out a",MatchSource.DOCS,doc/sphinxman/source/pep0001.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pep0001.rst
Usability,simpl,simple,"brought up at workshops (where people may be absent, no; record is left, and not everyone may have prepared a position on the; topic), or agreed between a couple people over g-chat (others remain; unaware of plans), or planned by someone (who may not have committed those; plans to a ticket or who wants general approval before restructuring the; code). Path of a PsiPEP; ----------------. * Someone creates a file ``doc/sphinxman/source/pepXXXX.rst`` modeled; on :source:`doc/sphinxman/source/pep0000model.rst` and adds; it to ``STATICDOC`` in :source:`doc/sphinxman/CMakeLists.txt`. The file; should have header fields modeled on another PsiPEP and a discussion of; the proposed change or practice. * Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down. * Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history). * Once there's agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include; -------------------------. * **Best practices or re-vamped best practices** . Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. * **Request/present viewpoint on organization**. Draw attention to organization needed in code outside one's area of; expertise. Request interface for some structure (*e.g.*, gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. * **Fair Warning: Proposal to change things up**. Announce plans to re-organize code structure or how something is; handled. List goals (may be conflictin",MatchSource.DOCS,doc/sphinxman/source/pep0001.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pep0001.rst
Availability,avail,available,"he; plugin. In this example, a directory named myplugin will be created.; All you need to do is ``cd`` into the directory, use |PSIfour| to generate; a Makefile, and type make. Then execute ``psi4`` in the directory on the; default input file. .. code-block:: bash. >>> cd myplugin; >>> `psi4 --plugin-compile`; >>> make; >>> psi4. |PSIfour| comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets your needs::. >>> psi4 --plugin-name myplugin --plugin-template aointegrals; >>> psi4 --plugin-name myplugin --plugin-template mointegrals; >>> psi4 --plugin-name myplugin --plugin-template sointegrals; >>> psi4 --plugin-name myplugin --plugin-template wavefunction; >>> psi4 --plugin-name myplugin --plugin-template scf; >>> psi4 --plugin-name myplugin --plugin-template dfmp2. .. >>> psi4 --plugin-name myplugin --plugin-template ambit. .. Several stable sample plugin directories are available to consult in the; .. :source:`plugins` directory. Other plugin directories can be used as models; .. but are in active development. For documentation on plugin modules, see; .. :ref:`Available Plugins <sec:availablePlugins>`.; .. ; .. * :source:`plugins/aointegrals/aointegrals.cc` ; .. An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals.; .. ; .. * :source:`plugins/backtrans/backtrans.cc` ; .. A test of the one- and two-particle density matrix backtransformation code.; .. ; .. * :source:`plugins/mointegrals/mointegrals.cc` ; .. An example that uses the LibTrans library to generate and print MO basis integrals.; .. ; .. * :source:`plugins/mollerplesset2/mp2.cc` ; .. A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; .. ; .. * :source:`plugins/sointegrals/sointegrals.cc` ; .. An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. .. _`sec:condaplugins`:.",MatchSource.DOCS,doc/sphinxman/source/plugins.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst
Deployability,install,installation," see; .. :ref:`Available Plugins <sec:availablePlugins>`.; .. ; .. * :source:`plugins/aointegrals/aointegrals.cc` ; .. An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals.; .. ; .. * :source:`plugins/backtrans/backtrans.cc` ; .. A test of the one- and two-particle density matrix backtransformation code.; .. ; .. * :source:`plugins/mointegrals/mointegrals.cc` ; .. An example that uses the LibTrans library to generate and print MO basis integrals.; .. ; .. * :source:`plugins/mollerplesset2/mp2.cc` ; .. A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; .. ; .. * :source:`plugins/sointegrals/sointegrals.cc` ; .. An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. .. _`sec:condaplugins`:. Creating a New Plugin Using a Conda Pre-compiled Binary; -------------------------------------------------------. .. # prepare; .. >>> bash; .. >>> export PATH=$PSI4CONDA/bin:$PATH # usually already done from psi4 installation; .. >>> cd ""$(dirname $(which psi4))""/.. # move into distribution/environment directory, $PSI4CONDA; .. >>> conda install gcc # install compilers into expected place. |PSIfour| plugins can also be created using Conda for both |PSIfour|; binary and development environment. On Linux (or Ubuntu shell on Windows), one can use the ``gcc``; compiler installed alongside ``psi4`` itself in the Conda distribution; or environment (below, ``$PSI4CONDA``). On Mac, one must use; ``libc++.so`` (*not* ``libstdc++.so``), and this can be accomplished by; installing XCode from the App Store that provides ``clang`` and; ``clang++`` compilers. * Check environment:. .. code-block:: bash. # yes, the following returns a blank line. yes, LD_LIBRARY_PATH irrelevant; >>> echo $PYTHONHOME $PYTHONPATH $DYLD_LIBRARY_PATH $PSIDATADIR. >>> which python psi4 g++ gfortran # Linux; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/gcc++; $PSI4CONDA/bin/gfortran; >>> whi",MatchSource.DOCS,doc/sphinxman/source/plugins.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst
Energy Efficiency,energy,energy,"rd a particular |PSIfour| (and probably pybind11) library to; link against (the ``CMAKE_PREFIX_PATH`` part) *and* telling it to; do an in-source build (the ``.`` part). Then just run ``make`` in; your plugin directory. After any change to the plugin C++ code,; ``make`` must be run in the plugin directory to recompile the; ``myplugin.so`` executable, but recompiling the main |PSIfour| code; is not necessary. Should you add additional (non-header) files to; the plugin or need to link to additional external libraries, add that; information here. * **input.dat** |w---w| Sample input file for the plugin.; Since the ``__init__.py`` file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in :envvar:`PYTHONPATH`,; either externally in the calling shell or defined in the input file.; This is usually done by manipulating :envvar:`PSIPATH`. Then,; the plugin can be loaded as ``import myplugin`` and executed as; ``energy('myplugin')``. Any other Python functions are also available from; the input file, *e.g.* ``myplugin.testfunction()``, note the namespace; protection. * **pymodule.py** |w---w| Python component of the plugin.; By encoding the sequence of |PSIfour| module; calls needed to run the plugin in the ``run_myplugin()`` function in this; file, the plugin is hooked into the main |PSIfour| driver function; :py:func:`~psi4.driver.energy` and so can be accessed through; ``energy('myplugin')`` in an input file. Any other Python functions can; also be placed in this file. * **__init__.py** |w---w| Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won't; need editing unless additional Python files are added to the plugin; directory (add additional lines to the ``# Load Python modules`` section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to ",MatchSource.DOCS,doc/sphinxman/source/plugins.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst
Integrability,depend,dependencies,"as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in ``$PATH`` or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory; ---------------------------. In addition to the main ``myplugin.cc`` file, a fresh plugin directory contains the following files. * **CMakeLists.txt** |w---w| CMake file governing project *plugin*.; The plugin source and CMakeLists.txt is independent of platform; and |PSIfour| installation. You use CMake (version 3.1 or later); to generate a Makefile for the plugin by pointing it to a specific; |PSIfour| installation. Run ``psi4 --plugin-compile`` to get a command; to execute to generate the Makefile. What that command is doing is; loading the compilers and o",MatchSource.DOCS,doc/sphinxman/source/plugins.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst
Modifiability,plugin,plugins,"istry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:plugins`:. Creating New Plugins; ====================. Modular Approach to Development; -------------------------------. It is slightly cumbersome to the development cycle to recompile |PSIfour|; every time a change is made to the C++ code.; It's also daunting to new developers if they're required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with Psi3 due to the independent; nature of the modules. To overcome these problems, |PSIfour| now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi's vast library. The plugins can be loaded at; run-time from any location. .. _`sec:newplugins`:. Creating a New Plugin; ---------------------. |PSIfour| can create basic plugins for you and automatically tailor them; to your compilation environment. To cr",MatchSource.DOCS,doc/sphinxman/source/plugins.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst
Performance,load,loaded,"h Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:plugins`:. Creating New Plugins; ====================. Modular Approach to Development; -------------------------------. It is slightly cumbersome to the development cycle to recompile |PSIfour|; every time a change is made to the C++ code.; It's also daunting to new developers if they're required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with Psi3 due to the independent; nature of the modules. To overcome these problems, |PSIfour| now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi's vast library. The plugins can be loaded at; run-time from any location. .. _`sec:newplugins`:. Creating a New Plugin; ---------------------. |PSIfour| can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing ``myplugin`` with the name of your great code.; If the name you provide is not valid, |PSIfour| will complain. >>> psi4 --plugin-name myplugin. |PSIfour| will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is ``cd`` into the directory, use |PSIfour| to generate; a Makefile, and type make. Then execute ``psi4`` in the directory on the; default input file. .. code-block:: bash. >>> cd myplugin; >>> `psi4 --plugin-compile`; >>> make; >>> psi4. |PSIfour| comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets",MatchSource.DOCS,doc/sphinxman/source/plugins.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst
Security,access,accessed,"onal external libraries, add that; information here. * **input.dat** |w---w| Sample input file for the plugin.; Since the ``__init__.py`` file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in :envvar:`PYTHONPATH`,; either externally in the calling shell or defined in the input file.; This is usually done by manipulating :envvar:`PSIPATH`. Then,; the plugin can be loaded as ``import myplugin`` and executed as; ``energy('myplugin')``. Any other Python functions are also available from; the input file, *e.g.* ``myplugin.testfunction()``, note the namespace; protection. * **pymodule.py** |w---w| Python component of the plugin.; By encoding the sequence of |PSIfour| module; calls needed to run the plugin in the ``run_myplugin()`` function in this; file, the plugin is hooked into the main |PSIfour| driver function; :py:func:`~psi4.driver.energy` and so can be accessed through; ``energy('myplugin')`` in an input file. Any other Python functions can; also be placed in this file. * **__init__.py** |w---w| Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won't; need editing unless additional Python files are added to the plugin; directory (add additional lines to the ``# Load Python modules`` section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the ``# Load C++ plugin`` section). .. comment as modeled in :source:`tests/plugin_libcim/__init__.py`). .. literalinclude:: @SFNX_INCLUDE@psi4/share/psi4/plugin/__init__.py.template. * **doc.rst** |w---w| Documentation file. Place in this file any notes,; equations, warnings to users, todo lists, *etc.*. Plain text is fine,; though reStructuredText is the ultimate goal. Remove the ``.. comment``; text and build Sphinx documentation for samples of linking key",MatchSource.DOCS,doc/sphinxman/source/plugins.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst
Testability,test,test,"ng commands that meets your needs::. >>> psi4 --plugin-name myplugin --plugin-template aointegrals; >>> psi4 --plugin-name myplugin --plugin-template mointegrals; >>> psi4 --plugin-name myplugin --plugin-template sointegrals; >>> psi4 --plugin-name myplugin --plugin-template wavefunction; >>> psi4 --plugin-name myplugin --plugin-template scf; >>> psi4 --plugin-name myplugin --plugin-template dfmp2. .. >>> psi4 --plugin-name myplugin --plugin-template ambit. .. Several stable sample plugin directories are available to consult in the; .. :source:`plugins` directory. Other plugin directories can be used as models; .. but are in active development. For documentation on plugin modules, see; .. :ref:`Available Plugins <sec:availablePlugins>`.; .. ; .. * :source:`plugins/aointegrals/aointegrals.cc` ; .. An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals.; .. ; .. * :source:`plugins/backtrans/backtrans.cc` ; .. A test of the one- and two-particle density matrix backtransformation code.; .. ; .. * :source:`plugins/mointegrals/mointegrals.cc` ; .. An example that uses the LibTrans library to generate and print MO basis integrals.; .. ; .. * :source:`plugins/mollerplesset2/mp2.cc` ; .. A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; .. ; .. * :source:`plugins/sointegrals/sointegrals.cc` ; .. An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. .. _`sec:condaplugins`:. Creating a New Plugin Using a Conda Pre-compiled Binary; -------------------------------------------------------. .. # prepare; .. >>> bash; .. >>> export PATH=$PSI4CONDA/bin:$PATH # usually already done from psi4 installation; .. >>> cd ""$(dirname $(which psi4))""/.. # move into distribution/environment directory, $PSI4CONDA; .. >>> conda install gcc # install compilers into expected place. |PSIfour| plugins can also be created using Conda for both |PSIfour|; binary and development environmen",MatchSource.DOCS,doc/sphinxman/source/plugins.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst
Usability,learn,learn," # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:plugins`:. Creating New Plugins; ====================. Modular Approach to Development; -------------------------------. It is slightly cumbersome to the development cycle to recompile |PSIfour|; every time a change is made to the C++ code.; It's also daunting to new developers if they're required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with Psi3 due to the independent; nature of the modules. To overcome these problems, |PSIfour| now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi's vast library. The plugins can be loaded at; run-time from any location. .. _`sec:newplugins`:. Creating a New Plugin; ---------------------. |PSIfour| can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing ``myplugin`` with the name of your great code.; If the name you provide is not valid, |PSIfour| will complain. >>> psi4 --plugin-name myplugin. |PSIfour| will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is ``cd`` into the dir",MatchSource.DOCS,doc/sphinxman/source/plugins.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst
Availability,down,downloaded,"elds.io/badge/home-psi4fockci-5077AB.svg; :target: https://github.com/shannonhouck/psi4fockci. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://shannonhouck.github.io/psi4fockci/build/index.html. This plugin is an implementation of the RAS-nSF-IP/EA approach detailed ; in the paper by Houck et. al. [Houck:2019:2278]_. ; This approach handles systems with both spin and spatial degeneracies ; by combining the spin-flip (SF) [Krylov:2001:522]_; and ionization potential/electron affinity (IP/EA) [Nooijen:1995:3629]_ ; approaches. . The Psi4FockCI plugin allows one to perform spin-flip (SF), ionization ; potential (IP), and electron affinity (EA) calculations, as well as ; combined RAS-SF-IP/EA calculations, through the DETCI (:ref:`sec:ci`) module. Installation; ~~~~~~~~~~~~. * Download the plugin from the GitHub repository:. .. code-block:: bash. >>> git clone https://github.com/shannonhouck/psi4fockci.git. * Once downloaded, the plugin can be installed as follows:. .. code-block:: bash. >>> cd {top-level-psi4fockci-directory}; >>> python -m pip install . Sample Input; ~~~~~~~~~~~~. To run a CAS-nSF-IP/EA calculation, start with a molecule with the ; correct charge and multiplicity for the reference state (i.e. some ; state well-represented by a single reference). Then, run an energy ; calculation, passing in the charge and multiplicity of the ; desired state; the number of spin-flips and IP/EA will be automatically ; determined based on this input. If additional excitations outside of the ; RAS II space are desired, one can set the level of external ; excitations using the ``conf_space`` keyword. A sample input file for a RAS(h)-2SF-IP calculation is shown below:. .. code-block:: python. molecule {; 0 7; N 0.0 0.0 0.0; N 0.0 0.0 1.3; symmetry c1; }. set {; basis cc-pVDZ; }. energy('psi4fockci', new_charge=1, new_multiplicity=1, conf_space=""h""); ; Note that for calculations involving IP/EA, inclusion of hole (for IP)",MatchSource.DOCS,doc/sphinxman/source/plugin_psi4fockci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_psi4fockci.rst
Deployability,install,installed,"elds.io/badge/home-psi4fockci-5077AB.svg; :target: https://github.com/shannonhouck/psi4fockci. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://shannonhouck.github.io/psi4fockci/build/index.html. This plugin is an implementation of the RAS-nSF-IP/EA approach detailed ; in the paper by Houck et. al. [Houck:2019:2278]_. ; This approach handles systems with both spin and spatial degeneracies ; by combining the spin-flip (SF) [Krylov:2001:522]_; and ionization potential/electron affinity (IP/EA) [Nooijen:1995:3629]_ ; approaches. . The Psi4FockCI plugin allows one to perform spin-flip (SF), ionization ; potential (IP), and electron affinity (EA) calculations, as well as ; combined RAS-SF-IP/EA calculations, through the DETCI (:ref:`sec:ci`) module. Installation; ~~~~~~~~~~~~. * Download the plugin from the GitHub repository:. .. code-block:: bash. >>> git clone https://github.com/shannonhouck/psi4fockci.git. * Once downloaded, the plugin can be installed as follows:. .. code-block:: bash. >>> cd {top-level-psi4fockci-directory}; >>> python -m pip install . Sample Input; ~~~~~~~~~~~~. To run a CAS-nSF-IP/EA calculation, start with a molecule with the ; correct charge and multiplicity for the reference state (i.e. some ; state well-represented by a single reference). Then, run an energy ; calculation, passing in the charge and multiplicity of the ; desired state; the number of spin-flips and IP/EA will be automatically ; determined based on this input. If additional excitations outside of the ; RAS II space are desired, one can set the level of external ; excitations using the ``conf_space`` keyword. A sample input file for a RAS(h)-2SF-IP calculation is shown below:. .. code-block:: python. molecule {; 0 7; N 0.0 0.0 0.0; N 0.0 0.0 1.3; symmetry c1; }. set {; basis cc-pVDZ; }. energy('psi4fockci', new_charge=1, new_multiplicity=1, conf_space=""h""); ; Note that for calculations involving IP/EA, inclusion of hole (for IP)",MatchSource.DOCS,doc/sphinxman/source/plugin_psi4fockci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_psi4fockci.rst
Energy Efficiency,charge,charge,"nnonhouck.github.io/psi4fockci/build/index.html. This plugin is an implementation of the RAS-nSF-IP/EA approach detailed ; in the paper by Houck et. al. [Houck:2019:2278]_. ; This approach handles systems with both spin and spatial degeneracies ; by combining the spin-flip (SF) [Krylov:2001:522]_; and ionization potential/electron affinity (IP/EA) [Nooijen:1995:3629]_ ; approaches. . The Psi4FockCI plugin allows one to perform spin-flip (SF), ionization ; potential (IP), and electron affinity (EA) calculations, as well as ; combined RAS-SF-IP/EA calculations, through the DETCI (:ref:`sec:ci`) module. Installation; ~~~~~~~~~~~~. * Download the plugin from the GitHub repository:. .. code-block:: bash. >>> git clone https://github.com/shannonhouck/psi4fockci.git. * Once downloaded, the plugin can be installed as follows:. .. code-block:: bash. >>> cd {top-level-psi4fockci-directory}; >>> python -m pip install . Sample Input; ~~~~~~~~~~~~. To run a CAS-nSF-IP/EA calculation, start with a molecule with the ; correct charge and multiplicity for the reference state (i.e. some ; state well-represented by a single reference). Then, run an energy ; calculation, passing in the charge and multiplicity of the ; desired state; the number of spin-flips and IP/EA will be automatically ; determined based on this input. If additional excitations outside of the ; RAS II space are desired, one can set the level of external ; excitations using the ``conf_space`` keyword. A sample input file for a RAS(h)-2SF-IP calculation is shown below:. .. code-block:: python. molecule {; 0 7; N 0.0 0.0 0.0; N 0.0 0.0 1.3; symmetry c1; }. set {; basis cc-pVDZ; }. energy('psi4fockci', new_charge=1, new_multiplicity=1, conf_space=""h""); ; Note that for calculations involving IP/EA, inclusion of hole (for IP) and ; particle (for EA) excitations is strongly recommended. Additional keywords ; can be found in the documentation. This input file can be run with Psi4:. .. code-block:: bash. >>> psi4 input.dat. ",MatchSource.DOCS,doc/sphinxman/source/plugin_psi4fockci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_psi4fockci.rst
Modifiability,plugin,plugin,"ied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: PSI4FOCKCI. .. _`sec:fockci`:. Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; ===========================================================. .. codeauthor:: Shannon E. Houck; .. sectionauthor:: Shannon E. Houck. .. image:: https://img.shields.io/badge/home-psi4fockci-5077AB.svg; :target: https://github.com/shannonhouck/psi4fockci. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://shannonhouck.github.io/psi4fockci/build/index.html. This plugin is an implementation of the RAS-nSF-IP/EA approach detailed ; in the paper by Houck et. al. [Houck:2019:2278]_. ; This approach handles systems with both spin and spatial degeneracies ; by combining the spin-flip (SF) [Krylov:2001:522]_; and ionization potential/electron affinity (IP/EA) [Nooijen:1995:3629]_ ; approaches. . The Psi4FockCI plugin allows one to perform spin-flip (SF), ionization ; potential (IP), and electron affinity (EA) calculations, as well as ; combined RAS-SF-IP/EA calculations, through the DETCI (:ref:`sec:ci`) module. Installation; ~~~~~~~~~~~~. * Download the plugin from the GitHub repository:. .. code-block:: bash. >>> git clone https://github.com/shannonhouck/psi4fockci.git. * Once downloaded, the plugin can be installed as follows:. .. code-block:: bash. >>> cd {top-level-psi4fockci-directory}; >>> python -m pip install . Sample Input; ~~~~~~~~~~~~. To run a CAS-nSF-IP/EA calculation, start with a molecule with the ; correct charge and multiplicity for the reference state (i.e. some ; state well",MatchSource.DOCS,doc/sphinxman/source/plugin_psi4fockci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_psi4fockci.rst
Performance,perform,perform,". .. include:: autodoc_abbr_options_c.rst. .. index:: PSI4FOCKCI. .. _`sec:fockci`:. Psi4FockCI: A General Fock-Space CI For Spin-Flip And IP/EA; ===========================================================. .. codeauthor:: Shannon E. Houck; .. sectionauthor:: Shannon E. Houck. .. image:: https://img.shields.io/badge/home-psi4fockci-5077AB.svg; :target: https://github.com/shannonhouck/psi4fockci. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://shannonhouck.github.io/psi4fockci/build/index.html. This plugin is an implementation of the RAS-nSF-IP/EA approach detailed ; in the paper by Houck et. al. [Houck:2019:2278]_. ; This approach handles systems with both spin and spatial degeneracies ; by combining the spin-flip (SF) [Krylov:2001:522]_; and ionization potential/electron affinity (IP/EA) [Nooijen:1995:3629]_ ; approaches. . The Psi4FockCI plugin allows one to perform spin-flip (SF), ionization ; potential (IP), and electron affinity (EA) calculations, as well as ; combined RAS-SF-IP/EA calculations, through the DETCI (:ref:`sec:ci`) module. Installation; ~~~~~~~~~~~~. * Download the plugin from the GitHub repository:. .. code-block:: bash. >>> git clone https://github.com/shannonhouck/psi4fockci.git. * Once downloaded, the plugin can be installed as follows:. .. code-block:: bash. >>> cd {top-level-psi4fockci-directory}; >>> python -m pip install . Sample Input; ~~~~~~~~~~~~. To run a CAS-nSF-IP/EA calculation, start with a molecule with the ; correct charge and multiplicity for the reference state (i.e. some ; state well-represented by a single reference). Then, run an energy ; calculation, passing in the charge and multiplicity of the ; desired state; the number of spin-flips and IP/EA will be automatically ; determined based on this input. If additional excitations outside of the ; RAS II space are desired, one can set the level of external ; excitations using the ``conf_space`` keyword. A sample input file fo",MatchSource.DOCS,doc/sphinxman/source/plugin_psi4fockci.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_psi4fockci.rst
Availability,avail,available,"t. .. index:: SNS-MP2. .. _`sec:snsmp2`:. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; ===============================================. .. codeauthor:: D. E. Shaw Research; .. sectionauthor:: Shannon E. Houck. .. image:: https://img.shields.io/badge/home-sns--mp2-5077AB.svg; :target: https://github.com/DEShawResearch/sns-mp2. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/DEShawResearch/sns-mp2/blob/master/README.md. This plugin is an implementation of the SNS-MP2 algorithm developed by McGibbon ; et. al. [McGibbon:2017:161725]_. The SNS-MP2 method uses neural networking to ; improve the accuracy of MP2 (:ref:`sec:dfmp2`) interaction energies for dimer molecules.; The plugin is distributed under the 2-clause BSD license. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/snsmp2/badges/version.svg; :target: https://anaconda.org/psi4/snsmp2. * snsmp2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the Psi4conda installer, snsmp2 has already been installed alongside. * If using the |PSIfour| conda package, the snsmp2 conda package can; be obtained through ``conda install snsmp2 -c psi4`` or ``conda install; psi4-rt -c psi4``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; snsmp2 can be obtained through ``conda install snsmp2 -c psi4``.; Then, hint its location with :envvar:`PYTHONPATH`. * To remove a conda installation, ``conda remove snsmp2``. **Source**. * .. image:: https://img.shields.io/github/tag/DEShawResearch/sns-mp2.svg?maxAge=2592000; :target: https://github.com/DEShawResearch/sns-mp2. * Download the plugin from the GitHub repository:. .. code-block:: bash. >>> git clone https://github.com/DEShawResearch/sns-mp2. * Once dowloaded, the plugin can be installed as outlined in the documentation:. .. code-block:: bash. >>> cd",MatchSource.DOCS,doc/sphinxman/source/plugin_snsmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_snsmp2.rst
Deployability,install,installer,"===============================================. .. codeauthor:: D. E. Shaw Research; .. sectionauthor:: Shannon E. Houck. .. image:: https://img.shields.io/badge/home-sns--mp2-5077AB.svg; :target: https://github.com/DEShawResearch/sns-mp2. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/DEShawResearch/sns-mp2/blob/master/README.md. This plugin is an implementation of the SNS-MP2 algorithm developed by McGibbon ; et. al. [McGibbon:2017:161725]_. The SNS-MP2 method uses neural networking to ; improve the accuracy of MP2 (:ref:`sec:dfmp2`) interaction energies for dimer molecules.; The plugin is distributed under the 2-clause BSD license. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/snsmp2/badges/version.svg; :target: https://anaconda.org/psi4/snsmp2. * snsmp2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the Psi4conda installer, snsmp2 has already been installed alongside. * If using the |PSIfour| conda package, the snsmp2 conda package can; be obtained through ``conda install snsmp2 -c psi4`` or ``conda install; psi4-rt -c psi4``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; snsmp2 can be obtained through ``conda install snsmp2 -c psi4``.; Then, hint its location with :envvar:`PYTHONPATH`. * To remove a conda installation, ``conda remove snsmp2``. **Source**. * .. image:: https://img.shields.io/github/tag/DEShawResearch/sns-mp2.svg?maxAge=2592000; :target: https://github.com/DEShawResearch/sns-mp2. * Download the plugin from the GitHub repository:. .. code-block:: bash. >>> git clone https://github.com/DEShawResearch/sns-mp2. * Once dowloaded, the plugin can be installed as outlined in the documentation:. .. code-block:: bash. >>> cd {top-level-sns-mp2-directory}; >>> PSI4_PYTHON=$(head $(which psi4) -n 1 | sed -r 's/^.{2}/",MatchSource.DOCS,doc/sphinxman/source/plugin_snsmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_snsmp2.rst
Energy Efficiency,adapt,adapted,"rking to ; improve the accuracy of MP2 (:ref:`sec:dfmp2`) interaction energies for dimer molecules.; The plugin is distributed under the 2-clause BSD license. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/snsmp2/badges/version.svg; :target: https://anaconda.org/psi4/snsmp2. * snsmp2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the Psi4conda installer, snsmp2 has already been installed alongside. * If using the |PSIfour| conda package, the snsmp2 conda package can; be obtained through ``conda install snsmp2 -c psi4`` or ``conda install; psi4-rt -c psi4``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; snsmp2 can be obtained through ``conda install snsmp2 -c psi4``.; Then, hint its location with :envvar:`PYTHONPATH`. * To remove a conda installation, ``conda remove snsmp2``. **Source**. * .. image:: https://img.shields.io/github/tag/DEShawResearch/sns-mp2.svg?maxAge=2592000; :target: https://github.com/DEShawResearch/sns-mp2. * Download the plugin from the GitHub repository:. .. code-block:: bash. >>> git clone https://github.com/DEShawResearch/sns-mp2. * Once dowloaded, the plugin can be installed as outlined in the documentation:. .. code-block:: bash. >>> cd {top-level-sns-mp2-directory}; >>> PSI4_PYTHON=$(head $(which psi4) -n 1 | sed -r 's/^.{2}//'); >>> $PSI4_PYTHON -m pip install . Sample Input; ~~~~~~~~~~~~. A sample input file, adapted from the documentation, is shown below::. # Sample SNS-MP2 calculation for two helium atoms. molecule dimer {; He 0 0 0; --; He 2 0 0; }. energy('sns-mp2'); ; Note that the two monomers are separated by double dashes, indicating that; they should be treated as separate molecules. (See ; :ref:`sec:tutorial_tu5` for more details on; setting up dimer molecules.) This input file can be run in the usual fashion:. .. code-block:: bash. >>> psi4 input.dat. ",MatchSource.DOCS,doc/sphinxman/source/plugin_snsmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_snsmp2.rst
Modifiability,plugin,plugin,"RRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: SNS-MP2. .. _`sec:snsmp2`:. Spin-Network-Scaled MP2 (SNS-MP2) by D. E. Shaw; ===============================================. .. codeauthor:: D. E. Shaw Research; .. sectionauthor:: Shannon E. Houck. .. image:: https://img.shields.io/badge/home-sns--mp2-5077AB.svg; :target: https://github.com/DEShawResearch/sns-mp2. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/DEShawResearch/sns-mp2/blob/master/README.md. This plugin is an implementation of the SNS-MP2 algorithm developed by McGibbon ; et. al. [McGibbon:2017:161725]_. The SNS-MP2 method uses neural networking to ; improve the accuracy of MP2 (:ref:`sec:dfmp2`) interaction energies for dimer molecules.; The plugin is distributed under the 2-clause BSD license. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/snsmp2/badges/version.svg; :target: https://anaconda.org/psi4/snsmp2. * snsmp2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the Psi4conda installer, snsmp2 has already been installed alongside. * If using the |PSIfour| conda package, the snsmp2 conda package can; be obtained through ``conda install snsmp2 -c psi4`` or ``conda install; psi4-rt -c psi4``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; snsmp2 can be obtained through ``conda install snsmp2 -c psi4``.; Then, hint its location with :envvar",MatchSource.DOCS,doc/sphinxman/source/plugin_snsmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_snsmp2.rst
Availability,avail,available,"e Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; pair: plugin; v2rdm_casscf. .. _`sec:v2rdm_casscf`:. Plugin v2rdm_casscf by A. E. DePrince; =====================================. .. codeauthor:: A. E. DePrince; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:pcm>`, :ref:`PSI Variables <apdx:pcm_psivar>`, :source:`PCMSolver <src/lib/libpsipcm>`. .. image:: https://img.shields.io/badge/home-v2rdm_casscf-5077AB.svg; :target: https://github.com/edeprince3/v2rdm_casscf. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/edeprince3/v2rdm_casscf/blob/master/README.md. A variational 2-RDM-driven CASSCF plugin to |PSIfour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/v2rdm_casscf/badges/version.svg; :target: https://anaconda.org/psi4/v2rdm_casscf. * v2rdm_casscf is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the Psi4conda installer, v2rdm_casscf has already been installed alongside. * If using the |PSIfour| conda package, the v2rdm_casscf conda package can; be obtained through ``conda install v2rdm_casscf -c psi4`` or ``conda install; psi4-rt -c psi4``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; v2rdm_casscf can be obtained through ``conda install v2rdm_casscf -c psi4``.; Then, hint its location with :envvar:`PYTHONPATH`. * To remove a conda installation, ``conda remove v2rdm_casscf``. **Source**. * .. image:: https://img.shields.io/github/tag/edeprince3/v2rdm_casscf.svg?maxAge=2592000; :target: https://github.com/edeprince3/v2rdm_casscf. * If using |PSIfour| built from source and you want v2rdm_casscf built from; from source also,; build it, then hint its location with :envvar:`PYTHONPATH`. ",MatchSource.DOCS,doc/sphinxman/source/plugin_v2rdm_casscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_v2rdm_casscf.rst
Deployability,install,installer,"e Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; pair: plugin; v2rdm_casscf. .. _`sec:v2rdm_casscf`:. Plugin v2rdm_casscf by A. E. DePrince; =====================================. .. codeauthor:: A. E. DePrince; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:pcm>`, :ref:`PSI Variables <apdx:pcm_psivar>`, :source:`PCMSolver <src/lib/libpsipcm>`. .. image:: https://img.shields.io/badge/home-v2rdm_casscf-5077AB.svg; :target: https://github.com/edeprince3/v2rdm_casscf. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/edeprince3/v2rdm_casscf/blob/master/README.md. A variational 2-RDM-driven CASSCF plugin to |PSIfour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/v2rdm_casscf/badges/version.svg; :target: https://anaconda.org/psi4/v2rdm_casscf. * v2rdm_casscf is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the Psi4conda installer, v2rdm_casscf has already been installed alongside. * If using the |PSIfour| conda package, the v2rdm_casscf conda package can; be obtained through ``conda install v2rdm_casscf -c psi4`` or ``conda install; psi4-rt -c psi4``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; v2rdm_casscf can be obtained through ``conda install v2rdm_casscf -c psi4``.; Then, hint its location with :envvar:`PYTHONPATH`. * To remove a conda installation, ``conda remove v2rdm_casscf``. **Source**. * .. image:: https://img.shields.io/github/tag/edeprince3/v2rdm_casscf.svg?maxAge=2592000; :target: https://github.com/edeprince3/v2rdm_casscf. * If using |PSIfour| built from source and you want v2rdm_casscf built from; from source also,; build it, then hint its location with :envvar:`PYTHONPATH`. ",MatchSource.DOCS,doc/sphinxman/source/plugin_v2rdm_casscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_v2rdm_casscf.rst
Modifiability,plugin,plugin,"ware package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; pair: plugin; v2rdm_casscf. .. _`sec:v2rdm_casscf`:. Plugin v2rdm_casscf by A. E. DePrince; =====================================. .. codeauthor:: A. E. DePrince; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:pcm>`, :ref:`PSI Variables <apdx:pcm_psivar>`, :source:`PCMSolver <src/lib/libpsipcm>`. .. image:: https://img.shields.io/badge/home-v2rdm_casscf-5077AB.svg; :target: https://github.com/edeprince3/v2rdm_casscf. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/edeprince3/v2rdm_casscf/blob/master/README.md. A variational 2-RDM-driven CASSCF plugin to |PSIfour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/v2rdm_casscf/badges/version.svg; :target: https://anaconda.org/psi4/v2rdm_casscf. * v2rdm_casscf is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the Psi4conda installer, v2rdm_casscf has already been installed alongsi",MatchSource.DOCS,doc/sphinxman/source/plugin_v2rdm_casscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_v2rdm_casscf.rst
Availability,avail,availability,"---+---+---+---+---+---+---+; | ccsd | |globals__cc_type| | ✓̳ ✓̳ | ✓̳ | ✓̳ ✓̳ | ✓̳ | ✓̳ ✓̳ | ✓̳ |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ccsd(t)\ [#e10]_ | |globals__cc_type| | ✓̳ ✓̳ | | ✓̳ ✓̳ | | ✓̳ ✓̳ | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | a-ccsd(t)\ [#e11]_ | |globals__cc_type| | ✓̳ ✓̳ | | | | | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | bccd(t) | |globals__cc_type| | ✓̳ ✓̳ | | ✓̳ ✓̳ | | ✓̳ ✓̳ | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | cc3 | |globals__cc_type| | ✓̳ ✓̳ | | ✓̳ ✓̳ | | ✓̳ ✓̳ | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+. .. [#e1] Algorithm type selection keyword below. Values to the right: conventional ``CV``, density-fitted ``DF``, and Cholesky-decomposed ``CD``.; .. [#e2] Active orbital values to the right: all-electron ``A`` and frozen-core ``F``.; .. [#e3] Finite difference gradients are not marked explicitly by ""∷"", but the capability can be gleaned from the energy availability.; .. [#e10] Analytic gradients for conventional all-electron RHF/UHF computations can be requested through |globals__qc_module|\ ``=ccenergy``, but their scaling is best suited to small molecules.; .. [#e11] a-CCSD(T) also known as CCSD(aT), Lambda-CCSD(T), and CCSD(T)_L",MatchSource.DOCS,doc/sphinxman/source/preview_capabilities_ccenergy.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/preview_capabilities_ccenergy.rst
Energy Efficiency,energy,energy,"---+---+---+---+---+---+---+; | ccsd | |globals__cc_type| | ✓̳ ✓̳ | ✓̳ | ✓̳ ✓̳ | ✓̳ | ✓̳ ✓̳ | ✓̳ |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ccsd(t)\ [#e10]_ | |globals__cc_type| | ✓̳ ✓̳ | | ✓̳ ✓̳ | | ✓̳ ✓̳ | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | a-ccsd(t)\ [#e11]_ | |globals__cc_type| | ✓̳ ✓̳ | | | | | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | bccd(t) | |globals__cc_type| | ✓̳ ✓̳ | | ✓̳ ✓̳ | | ✓̳ ✓̳ | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | cc3 | |globals__cc_type| | ✓̳ ✓̳ | | ✓̳ ✓̳ | | ✓̳ ✓̳ | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+. .. [#e1] Algorithm type selection keyword below. Values to the right: conventional ``CV``, density-fitted ``DF``, and Cholesky-decomposed ``CD``.; .. [#e2] Active orbital values to the right: all-electron ``A`` and frozen-core ``F``.; .. [#e3] Finite difference gradients are not marked explicitly by ""∷"", but the capability can be gleaned from the energy availability.; .. [#e10] Analytic gradients for conventional all-electron RHF/UHF computations can be requested through |globals__qc_module|\ ``=ccenergy``, but their scaling is best suited to small molecules.; .. [#e11] a-CCSD(T) also known as CCSD(aT), Lambda-CCSD(T), and CCSD(T)_L",MatchSource.DOCS,doc/sphinxman/source/preview_capabilities_ccenergy.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/preview_capabilities_ccenergy.rst
Availability,avail,availability,"--+---+---+---+---+---+---+---+; | b3lyp, Hybrid DFT | .. _dd_b3lyp: | ✓ ✓̳ ✓ | ✓ ✓̳ ∷ | ✓ ✓̳ ✓ | ✓ ✓̳ ∷ | | |; | |globals__scf_type| | SCF | ✓̲ ✓̳ ✓̲ | ✓̲ ✓̳ | ✓̲ ✓̳ ✓̲ | ✓̲ ✓̳ | | |; +--------------------------+--------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | wb97x, LRC DFT | .. _dd_wb97x: | ✓ ✓̳ | ✓ ✓̳ | ✓ ✓̳ | ✓ ✓̳ | | |; | |globals__scf_type| | SCF | ✓̲ ✓̳ | ✓̲ ✓̳ | ✓̲ ✓̳ | ✓̲ ✓̳ | | |; +--------------------------+--------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | b2plyp, DH DFT\ [#d14]_ | .. _dd_b2plyp: | ✓ ✓ ✓̳ ✓̳ ✓ ✓ | | ✓ ✓ ✓̳ ✓̳ ✓ ✓ | | | |; | |globals__scf_type| | SCF | ✓̲ ✓̲ ✓̳ ✓̳ ✓̲ ✓̲ | | ✓̲ ✓̲ ✓̳ ✓̳ ✓̲ ✓̲ | | | |; +--------------------------+--------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+. .. [#d1] Algorithm type selection keyword below. Values to the right: conventional ``CV``, density-fitted ``DF``, and Cholesky-decomposed ``CD``.; .. [#d2] Active orbital values to the right: all-electron ``A`` and frozen-core ``F``.; .. [#d3] Finite difference gradients are only marked explicitly by ""∷"" for overall (not per-method) lines and when at least one case has analytic gradients implemented, but the capability can be gleaned from the energy availability.; .. [#d10] Also available for DFT references RKS/UKS; .. [#d11] Arbitrary-order *n* through DETCI is inefficient byproduct of CI; .. [#d12] Analytic gradients for conventional all-electron RHF/UHF computations can be requested through |globals__qc_module|\ ``=ccenergy``, but their scaling is best suited to small molecules.; .. [#d13] a-CCSD(T) also known as CCSD(aT), Lambda-CCSD(T), and CCSD(T)_L; .. [#d14] DH-DFT only available with DF-MP2",MatchSource.DOCS,doc/sphinxman/source/preview_capabilities_details.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/preview_capabilities_details.rst
Energy Efficiency,energy,energy,"--+---+---+---+---+---+---+---+; | b3lyp, Hybrid DFT | .. _dd_b3lyp: | ✓ ✓̳ ✓ | ✓ ✓̳ ∷ | ✓ ✓̳ ✓ | ✓ ✓̳ ∷ | | |; | |globals__scf_type| | SCF | ✓̲ ✓̳ ✓̲ | ✓̲ ✓̳ | ✓̲ ✓̳ ✓̲ | ✓̲ ✓̳ | | |; +--------------------------+--------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | wb97x, LRC DFT | .. _dd_wb97x: | ✓ ✓̳ | ✓ ✓̳ | ✓ ✓̳ | ✓ ✓̳ | | |; | |globals__scf_type| | SCF | ✓̲ ✓̳ | ✓̲ ✓̳ | ✓̲ ✓̳ | ✓̲ ✓̳ | | |; +--------------------------+--------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | b2plyp, DH DFT\ [#d14]_ | .. _dd_b2plyp: | ✓ ✓ ✓̳ ✓̳ ✓ ✓ | | ✓ ✓ ✓̳ ✓̳ ✓ ✓ | | | |; | |globals__scf_type| | SCF | ✓̲ ✓̲ ✓̳ ✓̳ ✓̲ ✓̲ | | ✓̲ ✓̲ ✓̳ ✓̳ ✓̲ ✓̲ | | | |; +--------------------------+--------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+. .. [#d1] Algorithm type selection keyword below. Values to the right: conventional ``CV``, density-fitted ``DF``, and Cholesky-decomposed ``CD``.; .. [#d2] Active orbital values to the right: all-electron ``A`` and frozen-core ``F``.; .. [#d3] Finite difference gradients are only marked explicitly by ""∷"" for overall (not per-method) lines and when at least one case has analytic gradients implemented, but the capability can be gleaned from the energy availability.; .. [#d10] Also available for DFT references RKS/UKS; .. [#d11] Arbitrary-order *n* through DETCI is inefficient byproduct of CI; .. [#d12] Analytic gradients for conventional all-electron RHF/UHF computations can be requested through |globals__qc_module|\ ``=ccenergy``, but their scaling is best suited to small molecules.; .. [#d13] a-CCSD(T) also known as CCSD(aT), Lambda-CCSD(T), and CCSD(T)_L; .. [#d14] DH-DFT only available with DF-MP2",MatchSource.DOCS,doc/sphinxman/source/preview_capabilities_details.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/preview_capabilities_details.rst
Availability,avail,availability,"◻ | |qc_module|\ =DFMP2 Capabilities |; + + +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ◻ | |scf__reference| → | Restricted (RHF) | Unrestricted (UHF) | Restricted Open (ROHF) |; + + +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | name ↓ → | ◻ | |energy_fn| | |gradient_fn|\ [#m3]_ | |energy_fn| | |gradient_fn|\ [#m3]_ | |energy_fn| | |gradient_fn|\ [#m3]_ |; + + +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ◻ | type\ [#m1]_ ↓ → | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD |; + + +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ◻ | |freeze_core|\ [#m2]_\ →| A F A F A F | A F A F A F | A F A F A F | A F A F A F | A F A F A F | A F A F A F |; +==========================+=========================+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+; | mp2\ [#m10]_ | |globals__mp2_type| | ✓̳ ✓̳ | ✓̳ ✓̳ | ✓̳ ✓̳ | | ✓̳ ✓̳ | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+. .. [#m1] Algorithm type selection keyword below. Values to the right: conventional ``CV``, density-fitted ``DF``, and Cholesky-decomposed ``CD``.; .. [#m2] Active orbital values to the right: all-electron ``A`` and frozen-core ``F``.; .. [#m3] Finite difference gradients are not marked explicitly by ""∷"", but the capability can be gleaned from the energy availability.; .. [#m10] Also available for DFT references RKS/UKS",MatchSource.DOCS,doc/sphinxman/source/preview_capabilities_dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/preview_capabilities_dfmp2.rst
Energy Efficiency,energy,energy,"◻ | |qc_module|\ =DFMP2 Capabilities |; + + +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ◻ | |scf__reference| → | Restricted (RHF) | Unrestricted (UHF) | Restricted Open (ROHF) |; + + +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | name ↓ → | ◻ | |energy_fn| | |gradient_fn|\ [#m3]_ | |energy_fn| | |gradient_fn|\ [#m3]_ | |energy_fn| | |gradient_fn|\ [#m3]_ |; + + +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ◻ | type\ [#m1]_ ↓ → | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD |; + + +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ◻ | |freeze_core|\ [#m2]_\ →| A F A F A F | A F A F A F | A F A F A F | A F A F A F | A F A F A F | A F A F A F |; +==========================+=========================+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+; | mp2\ [#m10]_ | |globals__mp2_type| | ✓̳ ✓̳ | ✓̳ ✓̳ | ✓̳ ✓̳ | | ✓̳ ✓̳ | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+. .. [#m1] Algorithm type selection keyword below. Values to the right: conventional ``CV``, density-fitted ``DF``, and Cholesky-decomposed ``CD``.; .. [#m2] Active orbital values to the right: all-electron ``A`` and frozen-core ``F``.; .. [#m3] Finite difference gradients are not marked explicitly by ""∷"", but the capability can be gleaned from the energy availability.; .. [#m10] Also available for DFT references RKS/UKS",MatchSource.DOCS,doc/sphinxman/source/preview_capabilities_dfmp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/preview_capabilities_dfmp2.rst
Availability,avail,availability,"------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | lccd | |globals__cc_type| | ✓ ✓ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ccd | |globals__cc_type| | ✓̲ ✓̲ ✓̲ ✓̲ | ✓̲ ✓̲ | ✓̲ ✓̲ ✓̲ ✓̲ | ✓̲ ✓̲ | | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ccsd | |globals__cc_type| | ✓ ✓ ✓ ✓ | ✓̲ ✓̲ | ✓̲ ✓̲ ✓̲ ✓̲ | ✓̲ ✓̲ | | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ccsd(t) | |globals__cc_type| | ✓ ✓ ✓ ✓ | ✓̲ ✓̲ | | | | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | a-ccsd(t)\ [#n10]_ | |globals__cc_type| | ✓̲ ✓̲ ✓̲ ✓̲ | | | | | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+. .. [#n1] Algorithm type selection keyword below. Values to the right: conventional ``CV``, density-fitted ``DF``, and Cholesky-decomposed ``CD``.; .. [#n2] Active orbital values to the right: all-electron ``A`` and frozen-core ``F``.; .. [#n3] Finite difference gradients are not marked explicitly by ""∷"", but the capability can be gleaned from the energy availability.; .. [#n10] a-CCSD(T) also known as CCSD(aT), Lambda-CCSD(T), and CCSD(T)_L",MatchSource.DOCS,doc/sphinxman/source/preview_capabilities_occ_nonoo.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/preview_capabilities_occ_nonoo.rst
Energy Efficiency,energy,energy,"------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | lccd | |globals__cc_type| | ✓ ✓ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ccd | |globals__cc_type| | ✓̲ ✓̲ ✓̲ ✓̲ | ✓̲ ✓̲ | ✓̲ ✓̲ ✓̲ ✓̲ | ✓̲ ✓̲ | | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ccsd | |globals__cc_type| | ✓ ✓ ✓ ✓ | ✓̲ ✓̲ | ✓̲ ✓̲ ✓̲ ✓̲ | ✓̲ ✓̲ | | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ccsd(t) | |globals__cc_type| | ✓ ✓ ✓ ✓ | ✓̲ ✓̲ | | | | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | a-ccsd(t)\ [#n10]_ | |globals__cc_type| | ✓̲ ✓̲ ✓̲ ✓̲ | | | | | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+. .. [#n1] Algorithm type selection keyword below. Values to the right: conventional ``CV``, density-fitted ``DF``, and Cholesky-decomposed ``CD``.; .. [#n2] Active orbital values to the right: all-electron ``A`` and frozen-core ``F``.; .. [#n3] Finite difference gradients are not marked explicitly by ""∷"", but the capability can be gleaned from the energy availability.; .. [#n10] a-CCSD(T) also known as CCSD(aT), Lambda-CCSD(T), and CCSD(T)_L",MatchSource.DOCS,doc/sphinxman/source/preview_capabilities_occ_nonoo.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/preview_capabilities_occ_nonoo.rst
Performance,optimiz,optimized,".. NOTE: this file is autogenerated for preview and not used in docs directly. .. _`table:occ_stdsuite_nonoo`:. .. table:: Detailed non-orbital-optimized capabilities of the OCC module. ""✓"" runs analytically. Single underline ""✓̲"" is default module when |globals__qc_module| unspecified. Double underline ""✓̳"" is default algorithm type when type selector (e.g., |globals__cc_type|\ ) unspecified.; :align: left. +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ◻ | ◻ | |qc_module|\ =OCC Capabilities |; + + +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ◻ | |scf__reference| → | Restricted (RHF) | Unrestricted (UHF) | Restricted Open (ROHF) |; + + +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | name ↓ → | ◻ | |energy_fn| | |gradient_fn|\ [#n3]_ | |energy_fn| | |gradient_fn|\ [#n3]_ | |energy_fn| | |gradient_fn|\ [#n3]_ |; + + +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ◻ | type\ [#n1]_ ↓ → | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD |; + + +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ◻ | |freeze_core|\ [#n2]_\ →| A F A F A F | A F A F A F | A F A F A F | A F A F A F | A F A F A F | A F A F A F |; +==========================+=========================+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+; | mp2 | |globals__mp2_type| | ✓̲ ✓̲ ✓ ✓ ✓̲ ✓̲ | ✓̲ ✓ ✓ | ✓̲ ✓̲ ✓ ✓ ✓̲ ✓̲ | ✓̲ ✓̳ ✓̳",MatchSource.DOCS,doc/sphinxman/source/preview_capabilities_occ_nonoo.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/preview_capabilities_occ_nonoo.rst
Availability,avail,availability," ✓̲ ✓̲ | ✓̲ ✓̳ ✓̳ | ✓̲ ✓̳ ✓̳ ✓̲ ✓̲ | ✓̲ ✓̳ ✓̳ | ✓̲ ✓̳ ✓̳ ✓̲ ✓̲ | ✓̲ ✓̳ ✓̳ |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | omp2.5\ [#c10]_ | |globals__mp_type| | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | omp3\ [#c10]_ | |globals__mp_type| | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | oremp2\ [#c10]_ | |globals__cc_type| | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | olccd\ [#c10]_ | |globals__cc_type| | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+. .. [#c1] Algorithm type selection keyword below. Values to the right: conventional ``CV``, density-fitted ``DF``, and Cholesky-decomposed ``CD``.; .. [#c2] Active orbital values to the right: all-electron ``A`` and frozen-core ``F``.; .. [#c3] Finite difference gradients are not marked explicitly by ""∷"", but the capability can be gleaned from the energy availability.; .. [#c10] Also available for DFT references RKS/UKS",MatchSource.DOCS,doc/sphinxman/source/preview_capabilities_occ_oo.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/preview_capabilities_occ_oo.rst
Energy Efficiency,energy,energy," ✓̲ ✓̲ | ✓̲ ✓̳ ✓̳ | ✓̲ ✓̳ ✓̳ ✓̲ ✓̲ | ✓̲ ✓̳ ✓̳ | ✓̲ ✓̳ ✓̳ ✓̲ ✓̲ | ✓̲ ✓̳ ✓̳ |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | omp2.5\ [#c10]_ | |globals__mp_type| | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | omp3\ [#c10]_ | |globals__mp_type| | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | oremp2\ [#c10]_ | |globals__cc_type| | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | olccd\ [#c10]_ | |globals__cc_type| | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+. .. [#c1] Algorithm type selection keyword below. Values to the right: conventional ``CV``, density-fitted ``DF``, and Cholesky-decomposed ``CD``.; .. [#c2] Active orbital values to the right: all-electron ``A`` and frozen-core ``F``.; .. [#c3] Finite difference gradients are not marked explicitly by ""∷"", but the capability can be gleaned from the energy availability.; .. [#c10] Also available for DFT references RKS/UKS",MatchSource.DOCS,doc/sphinxman/source/preview_capabilities_occ_oo.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/preview_capabilities_occ_oo.rst
Performance,optimiz,optimized,".. NOTE: this file is autogenerated for preview and not used in docs directly. .. _`table:occ_stdsuite_oo`:. .. table:: Detailed orbital-optimized capabilities of the OCC module. ""✓"" runs analytically. Single underline ""✓̲"" is default module when |globals__qc_module| unspecified. Double underline ""✓̳"" is default algorithm type when type selector (e.g., |globals__cc_type|\ ) unspecified.; :align: left. +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ◻ | ◻ | |qc_module|\ =OCC Capabilities |; + + +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ◻ | |scf__reference| → | Restricted (RHF) | Unrestricted (UHF) | Restricted Open (ROHF) |; + + +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | name ↓ → | ◻ | |energy_fn| | |gradient_fn|\ [#c3]_ | |energy_fn| | |gradient_fn|\ [#c3]_ | |energy_fn| | |gradient_fn|\ [#c3]_ |; + + +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ◻ | type\ [#c1]_ ↓ → | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD |; + + +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ◻ | |freeze_core|\ [#c2]_\ →| A F A F A F | A F A F A F | A F A F A F | A F A F A F | A F A F A F | A F A F A F |; +==========================+=========================+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+; | omp2\ [#c10]_ | |globals__mp2_type| | ✓̲ ✓̳ ✓̳ ✓̲ ✓̲ | ✓̲ ✓̳ ✓̳ | ✓̲ ✓̳ ✓̳ ✓̲ ✓̲ | ✓̲ ✓̳",MatchSource.DOCS,doc/sphinxman/source/preview_capabilities_occ_oo.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/preview_capabilities_occ_oo.rst
Availability,avail,availability,"lobals__scf_type| | ✓̲ ✓̳ ✓̲ | ✓̲ ✓̳ | | ✓̲ ✓̳ ✓̲ | ✓̲ ✓̳ | | | | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | b3lyp, Hybrid DFT | |globals__scf_type| | ✓̲ ✓̳ ✓̲ | ✓̲ ✓̳ | | ✓̲ ✓̳ ✓̲ | ✓̲ ✓̳ | | | | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | wb97x, LRC DFT | |globals__scf_type| | ✓̲ ✓̳ | ✓̲ ✓̳ | | ✓̲ ✓̳ | ✓̲ ✓̳ | | | | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | b2plyp, DH DFT\ [#r10]_ | |globals__scf_type| | ✓̲ ✓̲ ✓̳ ✓̳ ✓̲ ✓̲ | | | ✓̲ ✓̲ ✓̳ ✓̳ ✓̲ ✓̲ | | | | | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+. .. [#r1] Algorithm type selection keyword below. Values to the right: conventional ``CV``, density-fitted ``DF``, and Cholesky-decomposed ``CD``.; .. [#r2] Active orbital values to the right: all-electron ``A`` and frozen-core ``F``.; .. [#r3] Finite difference gradients are not marked explicitly by ""∷"", but the capability can be gleaned from the energy availability.; .. [#r4] Finite difference Hessians are not marked explicitly by ""∷"", but the capability can be gleaned from the gradient or energy availability.; .. [#r10] DH-DFT only available with DF-MP2",MatchSource.DOCS,doc/sphinxman/source/preview_capabilities_scf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/preview_capabilities_scf.rst
Energy Efficiency,energy,energy,"lobals__scf_type| | ✓̲ ✓̳ ✓̲ | ✓̲ ✓̳ | | ✓̲ ✓̳ ✓̲ | ✓̲ ✓̳ | | | | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | b3lyp, Hybrid DFT | |globals__scf_type| | ✓̲ ✓̳ ✓̲ | ✓̲ ✓̳ | | ✓̲ ✓̳ ✓̲ | ✓̲ ✓̳ | | | | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | wb97x, LRC DFT | |globals__scf_type| | ✓̲ ✓̳ | ✓̲ ✓̳ | | ✓̲ ✓̳ | ✓̲ ✓̳ | | | | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | b2plyp, DH DFT\ [#r10]_ | |globals__scf_type| | ✓̲ ✓̲ ✓̳ ✓̳ ✓̲ ✓̲ | | | ✓̲ ✓̲ ✓̳ ✓̳ ✓̲ ✓̲ | | | | | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+. .. [#r1] Algorithm type selection keyword below. Values to the right: conventional ``CV``, density-fitted ``DF``, and Cholesky-decomposed ``CD``.; .. [#r2] Active orbital values to the right: all-electron ``A`` and frozen-core ``F``.; .. [#r3] Finite difference gradients are not marked explicitly by ""∷"", but the capability can be gleaned from the energy availability.; .. [#r4] Finite difference Hessians are not marked explicitly by ""∷"", but the capability can be gleaned from the gradient or energy availability.; .. [#r10] DH-DFT only available with DF-MP2",MatchSource.DOCS,doc/sphinxman/source/preview_capabilities_scf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/preview_capabilities_scf.rst
Availability,avail,availability,"--+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | pbe, GGA DFT | .. _ss_pbe: | |globals__scf_type| | ✓ ✓̳ ✓ | ✓ ✓̳ ∷ | ✓ ✓̳ ✓ | ✓ ✓̳ ∷ | | |; +--------------------------+----------------------+--------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | b3lyp, Hybrid DFT | .. _ss_b3lyp: | |globals__scf_type| | ✓ ✓̳ ✓ | ✓ ✓̳ ∷ | ✓ ✓̳ ✓ | ✓ ✓̳ ∷ | | |; +--------------------------+----------------------+--------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | wb97x, LRC DFT | .. _ss_wb97x: | |globals__scf_type| | ✓ ✓̳ | ✓ ✓̳ | ✓ ✓̳ | ✓ ✓̳ | | |; +--------------------------+----------------------+--------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | b2plyp, DH DFT\ [#s12]_ | .. _ss_b2plyp: | |globals__scf_type| | ✓ ✓ ✓̳ ✓̳ ✓ ✓ | | ✓ ✓ ✓̳ ✓̳ ✓ ✓ | | | |; +--------------------------+----------------------+--------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+. .. [#s1] Algorithm type selection keyword below. Values to the right: conventional ``CV``, density-fitted ``DF``, and Cholesky-decomposed ``CD``.; .. [#s2] Active orbital values to the right: all-electron ``A`` and frozen-core ``F``.; .. [#s3] Methods with no analytic gradients do not have finite difference explicitly marked by ""∷"", but the capability can be gleaned from the energy availability.; .. [#s10] Arbitrary-order *n* through DETCI is inefficient byproduct of CI; .. [#s11] a-CCSD(T) also known as CCSD(aT), Lambda-CCSD(T), and CCSD(T)_L; .. [#s12] DH-DFT only available with DF-MP2",MatchSource.DOCS,doc/sphinxman/source/preview_capabilities_summary.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/preview_capabilities_summary.rst
Energy Efficiency,energy,energy,"--+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | pbe, GGA DFT | .. _ss_pbe: | |globals__scf_type| | ✓ ✓̳ ✓ | ✓ ✓̳ ∷ | ✓ ✓̳ ✓ | ✓ ✓̳ ∷ | | |; +--------------------------+----------------------+--------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | b3lyp, Hybrid DFT | .. _ss_b3lyp: | |globals__scf_type| | ✓ ✓̳ ✓ | ✓ ✓̳ ∷ | ✓ ✓̳ ✓ | ✓ ✓̳ ∷ | | |; +--------------------------+----------------------+--------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | wb97x, LRC DFT | .. _ss_wb97x: | |globals__scf_type| | ✓ ✓̳ | ✓ ✓̳ | ✓ ✓̳ | ✓ ✓̳ | | |; +--------------------------+----------------------+--------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | b2plyp, DH DFT\ [#s12]_ | .. _ss_b2plyp: | |globals__scf_type| | ✓ ✓ ✓̳ ✓̳ ✓ ✓ | | ✓ ✓ ✓̳ ✓̳ ✓ ✓ | | | |; +--------------------------+----------------------+--------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+. .. [#s1] Algorithm type selection keyword below. Values to the right: conventional ``CV``, density-fitted ``DF``, and Cholesky-decomposed ``CD``.; .. [#s2] Active orbital values to the right: all-electron ``A`` and frozen-core ``F``.; .. [#s3] Methods with no analytic gradients do not have finite difference explicitly marked by ""∷"", but the capability can be gleaned from the energy availability.; .. [#s10] Arbitrary-order *n* through DETCI is inefficient byproduct of CI; .. [#s11] a-CCSD(T) also known as CCSD(aT), Lambda-CCSD(T), and CCSD(T)_L; .. [#s12] DH-DFT only available with DF-MP2",MatchSource.DOCS,doc/sphinxman/source/preview_capabilities_summary.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/preview_capabilities_summary.rst
Availability,avail,available,"_wfn = scf_helper(name, **kwargs); ; # If the scf type is DF/CD, then the AO integrals were never written to disk; if psi4.get_option('SCF', 'SCF_TYPE') in ['DF', 'CD']:; psi4.MintsHelper(ref_wfn.basisset()).integrals(). Direct any post-scf modules to be run. ::. # include if further post-scf modules are needed; psi4.transqt2(); psi4.ccsort(); psi4.mp2(). If an :py:class:`~psi4.driver.p4util.OptionsState` object was set up, those options; need to be returned to the original user state with the following. ::. # include if optstash = OptionsState(...) was set up previously; optstash.restore(). Current best practice is to store as much as possible on the wavefunction, not in globals. The; driver should handle interactions with globals. When QCVariables are stored on the wavefunction in; the module, copy to globals with the below::. # Shove variables into global space; for k, v in dfmp2_wfn.variables().items():; core.set_variable(k, v). The function should return the wavefunction, except for rare cases like EFP where no wavefunction available.; For now, ``CURRENT ENERGY`` will be set by; :py:func:`~psi4.driver.energy`, etc. In future, this will be extracted from the wavefunction. ::. # return highest or most prominent wavefunction (like dimer for SAPT); return fnocc_wfn. Managed Methods; ---------------. There are several conditions when a method and derivative combination should be *managed*:. * when functionality overlaps between modules, a pattern is needed to; access each route through the code;. * when functionality doesn't overlap completely, a pattern is needed to apportion defaulting among; the modules, taking into account reference (RHF/UHF/ROHF), calc type (CONV/DF/CD), and possibly; |globals__freeze_core| state (AE/FC). * for higher-level derivatives, when, say, gradient functionality for mtd+ref+type+fcae doesn't; exactly match energy functionality, a pattern is needed to decide analytic vs. finite difference. * when default type is not available for a method",MatchSource.DOCS,doc/sphinxman/source/proc_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/proc_py.rst
Energy Efficiency,energy,energy," FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:proc_py`:. Adding Methods to Driver; ========================. ``proc.py``; -----------. Methods that are computable by only one module should be added to the ``procedures`` dictionary in; :source:`psi4/driver/procrouting/proc_table.py`; that associates method names with functions; to run them located in :source:`psi4/driver/procrouting/proc.py`. The function should start with a declaration, as below. ``methodname`` is; never seen by users, so it's good to be specific to method or module.; The function must always take as arguments ``(name, **kwargs)``. ::. # energy method; def run_methodname(name, **kwargs):. # gradient method; def run_methodname_gradient(name, **kwargs):. If the function needs to test the identity of ``name`` several times, it; can be convenient to predefine the lowercase version of the variable. The; case of all other py-side options (in kwargs) has already been handled by; :py:func:`~psi4.driver.energy()`, etc. in driver.py and need not be repeated here. ::. # include if convenient; lowername = name.lower(). # never include; kwargs = kwargs_lower(kwargs). The function often needs to set options for the; c-side modules it calls. In order that the state of the options set by the; user remains when control is returned to the user, an; :py:class:`~psi4.driver.p4util.OptionsState` object is set up. See; :ref:`sec:handlingOptions_py` for details. *All* options set by the; function need to be included here, and *only* options set by the function; should be included. Most options should be associated with a particular; module, but a few (see below) ar",MatchSource.DOCS,doc/sphinxman/source/proc_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/proc_py.rst
Integrability,rout,route,"he original user state with the following. ::. # include if optstash = OptionsState(...) was set up previously; optstash.restore(). Current best practice is to store as much as possible on the wavefunction, not in globals. The; driver should handle interactions with globals. When QCVariables are stored on the wavefunction in; the module, copy to globals with the below::. # Shove variables into global space; for k, v in dfmp2_wfn.variables().items():; core.set_variable(k, v). The function should return the wavefunction, except for rare cases like EFP where no wavefunction available.; For now, ``CURRENT ENERGY`` will be set by; :py:func:`~psi4.driver.energy`, etc. In future, this will be extracted from the wavefunction. ::. # return highest or most prominent wavefunction (like dimer for SAPT); return fnocc_wfn. Managed Methods; ---------------. There are several conditions when a method and derivative combination should be *managed*:. * when functionality overlaps between modules, a pattern is needed to; access each route through the code;. * when functionality doesn't overlap completely, a pattern is needed to apportion defaulting among; the modules, taking into account reference (RHF/UHF/ROHF), calc type (CONV/DF/CD), and possibly; |globals__freeze_core| state (AE/FC). * for higher-level derivatives, when, say, gradient functionality for mtd+ref+type+fcae doesn't; exactly match energy functionality, a pattern is needed to decide analytic vs. finite difference. * when default type is not available for a method (e.g., CCD governed by |globals__cc_type| that; defaults to ``CONV`` but only ``DF`` and ``CD`` CCD is available), an informative error message is needed. Managed methods handle these cases through the addition of a new; keyword |globals__qc_module| and a set of type keywords analogous to; |globals__mp2_type|: |globals__mp_type|,; |globals__ci_type|, |globals__cc_type|, which can have values ``CONV``,; ``DF``, and ``CD``. These are all *global* keywords, as the",MatchSource.DOCS,doc/sphinxman/source/proc_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/proc_py.rst
Modifiability,variab,variable,"eneral Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:proc_py`:. Adding Methods to Driver; ========================. ``proc.py``; -----------. Methods that are computable by only one module should be added to the ``procedures`` dictionary in; :source:`psi4/driver/procrouting/proc_table.py`; that associates method names with functions; to run them located in :source:`psi4/driver/procrouting/proc.py`. The function should start with a declaration, as below. ``methodname`` is; never seen by users, so it's good to be specific to method or module.; The function must always take as arguments ``(name, **kwargs)``. ::. # energy method; def run_methodname(name, **kwargs):. # gradient method; def run_methodname_gradient(name, **kwargs):. If the function needs to test the identity of ``name`` several times, it; can be convenient to predefine the lowercase version of the variable. The; case of all other py-side options (in kwargs) has already been handled by; :py:func:`~psi4.driver.energy()`, etc. in driver.py and need not be repeated here. ::. # include if convenient; lowername = name.lower(). # never include; kwargs = kwargs_lower(kwargs). The function often needs to set options for the; c-side modules it calls. In order that the state of the options set by the; user remains when control is returned to the user, an; :py:class:`~psi4.driver.p4util.OptionsState` object is set up. See; :ref:`sec:handlingOptions_py` for details. *All* options set by the; function need to be included here, and *only* options set by the function; should be included. Most options should be associated with a particular; module, but a few (see below) are given without module. ::. # include if any options set; optstash = OptionsState(; # these and other basis options should have no associated module; ['BASIS'],; ['",MatchSource.DOCS,doc/sphinxman/source/proc_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/proc_py.rst
Performance,perform,performance,"shared among modules rather than (or in addition to) being used internally; by the module). We're sticking with |globals__scf_type| and; |globals__mp2_type| defaulting to ``DF``, while most everything higher defaults; to ``CONV``. (Exceptions are MP2.5 and MP3 that default to ``DF``.); In :source:`psi4/driver/procrouting/proc_table.py`, a managed method calls a; ""select"" function rather than a ""run"" function. ::. procedures = {; 'energy': {; 'scf' : run_scf,; 'mp3' : select_mp3,; 'dct' : run_dct,. Then in :source:`psi4/driver/procrouting/proc.py`, the select function runs through; reference, type, and possibly freeze_core to specify the proc; function to call for any able, non-default module (*e.g.*, ``mtd_type ==; 'DETCI'`` ) or able, default module (*e.g.*, ``mtd_typd == ['', 'FNOCC']`` ).; Don't worry about 'else' statements as anything that falls through will be; caught and a readable error generated. ::. def select_mp3(name, **kwargs):; """"""Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. """"""; reference = psi4.get_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('MP_TYPE'); module = psi4.get_global_option('QC_MODULE'); # Considering only [df]occ/fnocc/detci. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module in ['DETCI']:; func = run_detci. if func is None:; raise ManagedMethodError(['select_mp3', name, 'MP_TYPE', mtd_typ",MatchSource.DOCS,doc/sphinxman/source/proc_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/proc_py.rst
Security,access,access,"he original user state with the following. ::. # include if optstash = OptionsState(...) was set up previously; optstash.restore(). Current best practice is to store as much as possible on the wavefunction, not in globals. The; driver should handle interactions with globals. When QCVariables are stored on the wavefunction in; the module, copy to globals with the below::. # Shove variables into global space; for k, v in dfmp2_wfn.variables().items():; core.set_variable(k, v). The function should return the wavefunction, except for rare cases like EFP where no wavefunction available.; For now, ``CURRENT ENERGY`` will be set by; :py:func:`~psi4.driver.energy`, etc. In future, this will be extracted from the wavefunction. ::. # return highest or most prominent wavefunction (like dimer for SAPT); return fnocc_wfn. Managed Methods; ---------------. There are several conditions when a method and derivative combination should be *managed*:. * when functionality overlaps between modules, a pattern is needed to; access each route through the code;. * when functionality doesn't overlap completely, a pattern is needed to apportion defaulting among; the modules, taking into account reference (RHF/UHF/ROHF), calc type (CONV/DF/CD), and possibly; |globals__freeze_core| state (AE/FC). * for higher-level derivatives, when, say, gradient functionality for mtd+ref+type+fcae doesn't; exactly match energy functionality, a pattern is needed to decide analytic vs. finite difference. * when default type is not available for a method (e.g., CCD governed by |globals__cc_type| that; defaults to ``CONV`` but only ``DF`` and ``CD`` CCD is available), an informative error message is needed. Managed methods handle these cases through the addition of a new; keyword |globals__qc_module| and a set of type keywords analogous to; |globals__mp2_type|: |globals__mp_type|,; |globals__ci_type|, |globals__cc_type|, which can have values ``CONV``,; ``DF``, and ``CD``. These are all *global* keywords, as the",MatchSource.DOCS,doc/sphinxman/source/proc_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/proc_py.rst
Testability,test,test,"eneral Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:proc_py`:. Adding Methods to Driver; ========================. ``proc.py``; -----------. Methods that are computable by only one module should be added to the ``procedures`` dictionary in; :source:`psi4/driver/procrouting/proc_table.py`; that associates method names with functions; to run them located in :source:`psi4/driver/procrouting/proc.py`. The function should start with a declaration, as below. ``methodname`` is; never seen by users, so it's good to be specific to method or module.; The function must always take as arguments ``(name, **kwargs)``. ::. # energy method; def run_methodname(name, **kwargs):. # gradient method; def run_methodname_gradient(name, **kwargs):. If the function needs to test the identity of ``name`` several times, it; can be convenient to predefine the lowercase version of the variable. The; case of all other py-side options (in kwargs) has already been handled by; :py:func:`~psi4.driver.energy()`, etc. in driver.py and need not be repeated here. ::. # include if convenient; lowername = name.lower(). # never include; kwargs = kwargs_lower(kwargs). The function often needs to set options for the; c-side modules it calls. In order that the state of the options set by the; user remains when control is returned to the user, an; :py:class:`~psi4.driver.p4util.OptionsState` object is set up. See; :ref:`sec:handlingOptions_py` for details. *All* options set by the; function need to be included here, and *only* options set by the function; should be included. Most options should be associated with a particular; module, but a few (see below) are given without module. ::. # include if any options set; optstash = OptionsState(; # these and other basis options should have no associated module; ['BASIS'],; ['",MatchSource.DOCS,doc/sphinxman/source/proc_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/proc_py.rst
Availability,recover,recovery,"* DGER: Rank-1 update (not wrapped yet). * BLAS3. * DGEMM: General Matrix-Matrix product; * DTRMM: General Triangular Matrix-General Matrix product; * DTRSM: Triangular Matrix-General Matrix solution via back substitution (just as fast as DTRMM); * DSYMM/DSYMV calls are not appreciably faster than DGEMM calls, and should only be used in expert situations (like using the other half of the matrix for some form of other transformation).; * DTRMM/DTRMV calls are 2x faster than DGEMM, and should be used where possible. LAPACK Wrappers; ^^^^^^^^^^^^^^^. All standard LAPACK 3.2 double precision routines are provided. LAPACK commands remain in Fortran's ""column-major"" indexing, so all the; results will be transposed, and leading dimensions may have to be fiddled; with (using ``lda = n`` in both directions for square matrices is highly; recommended). An example of the former problem is a Cholesky; Decomposition: you expect to get back a lower triangular matrix L such; that ``L L^T = A``, but this is returned in column-major order, so the actual; recovery of the matrix A with the row-major BLAS wrappers effectively; involves ``L^T L = A``. On of the biggest consequences is in linear equations:; The input/output forcing/solution vector must be explicitly formed in; column-major indexing (each vector is placed in a C++ row, with its; entries along the C++ column). This is visualized in C++ as the transpose; of the forcing/solution vector. All routines are declared in qt.h. Each; routine is prefixed with a ``C_``, followed by the standard Fortran name of; the routine, in capital letters. Input parameters of single primitives; (int, double, unsigned long int, char, ...) are passed by value. Arrays,; including multidimensional arrays, are required to be in contiguous memory; (as provided by block_matrix, for example), and are passed by providing a; pointer to the first double or int element of the data (this is array[0]; if array is ``double**``). All routines return an int INFO w",MatchSource.DOCS,doc/sphinxman/source/prog_blas.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst
Deployability,update,update,"WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:blaslapack`:. ===========================; Linear Algebra in |PSIfour|; ===========================. .. _`faq:blaswrappers`:. How to call BLAS & LAPACK in |PSIfour|; --------------------------------------. Computational chemistry is essentially linear algebra on molecular; systems, so using stable, portable, scalable, and efficient numerical; linear algebra methods in |PSIfour| is critical. To that end, we use BLAS1; (vector-vector operations, like dot products), BLAS2 (matrix-vector; operations, like rank-1 update), BLAS3 (matrix-matrix operations, like; matrix multiplication), and LAPACK (advanced matrix decompositions and; solutions). The methods provided by BLAS and LAPACK are standard, but the; performance of actual implementations differ greatly from one version to; another. Moreover, the standard interfaces to the libraries are Fortran,; so |PSIfour| provides a common set of wrappers in :source:`psi4/src/psi4/libqt/qt.h` . .. warning:: Although block_matrix, init_array, and print_mat are still; around, their use is discouraged in favor of operations on; `psi4.core.Matrix` itself. The advice in these docs will catch up; shortly. BLAS Wrappers; ^^^^^^^^^^^^^. BLAS wrappers are currently fully supported at double precision. BLAS commands involving matrices are wrapped so as to be conventional; C-style ""row-major"" indexing, meaning that the column is the fast index; like normal. * The calls to BLAS1 routines are wrapped so as to allow for operations on; vectors with more than 2^{31} elements",MatchSource.DOCS,doc/sphinxman/source/prog_blas.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst
Energy Efficiency,efficient,efficient,"; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:blaslapack`:. ===========================; Linear Algebra in |PSIfour|; ===========================. .. _`faq:blaswrappers`:. How to call BLAS & LAPACK in |PSIfour|; --------------------------------------. Computational chemistry is essentially linear algebra on molecular; systems, so using stable, portable, scalable, and efficient numerical; linear algebra methods in |PSIfour| is critical. To that end, we use BLAS1; (vector-vector operations, like dot products), BLAS2 (matrix-vector; operations, like rank-1 update), BLAS3 (matrix-matrix operations, like; matrix multiplication), and LAPACK (advanced matrix decompositions and; solutions). The methods provided by BLAS and LAPACK are standard, but the; performance of actual implementations differ greatly from one version to; another. Moreover, the standard interfaces to the libraries are Fortran,; so |PSIfour| provides a common set of wrappers in :source:`psi4/src/psi4/libqt/qt.h` . .. warning:: Although block_matrix, init_array, and print_mat are still; around, their use is discouraged in favor of operations on; `psi4.core.Matrix` itself. The advice in these docs will catch up; shortly. BLAS Wrappers; ^^^^^^^^^^^^^. BLAS wrappers are currently fully supported at double precision. BLAS commands involving matrices are wrapped so as ",MatchSource.DOCS,doc/sphinxman/source/prog_blas.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst
Integrability,interface,interfaces,"klin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:blaslapack`:. ===========================; Linear Algebra in |PSIfour|; ===========================. .. _`faq:blaswrappers`:. How to call BLAS & LAPACK in |PSIfour|; --------------------------------------. Computational chemistry is essentially linear algebra on molecular; systems, so using stable, portable, scalable, and efficient numerical; linear algebra methods in |PSIfour| is critical. To that end, we use BLAS1; (vector-vector operations, like dot products), BLAS2 (matrix-vector; operations, like rank-1 update), BLAS3 (matrix-matrix operations, like; matrix multiplication), and LAPACK (advanced matrix decompositions and; solutions). The methods provided by BLAS and LAPACK are standard, but the; performance of actual implementations differ greatly from one version to; another. Moreover, the standard interfaces to the libraries are Fortran,; so |PSIfour| provides a common set of wrappers in :source:`psi4/src/psi4/libqt/qt.h` . .. warning:: Although block_matrix, init_array, and print_mat are still; around, their use is discouraged in favor of operations on; `psi4.core.Matrix` itself. The advice in these docs will catch up; shortly. BLAS Wrappers; ^^^^^^^^^^^^^. BLAS wrappers are currently fully supported at double precision. BLAS commands involving matrices are wrapped so as to be conventional; C-style ""row-major"" indexing, meaning that the column is the fast index; like normal. * The calls to BLAS1 routines are wrapped so as to allow for operations on; vectors with more than 2^{31} elements (~16 GB, getting to be a problem).; So passing a signed or unsigned long works, though the stride arguments; must be integers. * All routines are declared in ``qt.h``. Each routine is prefixed with a; ``C_``, followed by the standard Fortran name of the routine, in capital; letters. Input parameters of single primitives (``int``, ``double``,; ",MatchSource.DOCS,doc/sphinxman/source/prog_blas.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst
Modifiability,portab,portable,"; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:blaslapack`:. ===========================; Linear Algebra in |PSIfour|; ===========================. .. _`faq:blaswrappers`:. How to call BLAS & LAPACK in |PSIfour|; --------------------------------------. Computational chemistry is essentially linear algebra on molecular; systems, so using stable, portable, scalable, and efficient numerical; linear algebra methods in |PSIfour| is critical. To that end, we use BLAS1; (vector-vector operations, like dot products), BLAS2 (matrix-vector; operations, like rank-1 update), BLAS3 (matrix-matrix operations, like; matrix multiplication), and LAPACK (advanced matrix decompositions and; solutions). The methods provided by BLAS and LAPACK are standard, but the; performance of actual implementations differ greatly from one version to; another. Moreover, the standard interfaces to the libraries are Fortran,; so |PSIfour| provides a common set of wrappers in :source:`psi4/src/psi4/libqt/qt.h` . .. warning:: Although block_matrix, init_array, and print_mat are still; around, their use is discouraged in favor of operations on; `psi4.core.Matrix` itself. The advice in these docs will catch up; shortly. BLAS Wrappers; ^^^^^^^^^^^^^. BLAS wrappers are currently fully supported at double precision. BLAS commands involving matrices are wrapped so as ",MatchSource.DOCS,doc/sphinxman/source/prog_blas.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst
Performance,scalab,scalable,"; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:blaslapack`:. ===========================; Linear Algebra in |PSIfour|; ===========================. .. _`faq:blaswrappers`:. How to call BLAS & LAPACK in |PSIfour|; --------------------------------------. Computational chemistry is essentially linear algebra on molecular; systems, so using stable, portable, scalable, and efficient numerical; linear algebra methods in |PSIfour| is critical. To that end, we use BLAS1; (vector-vector operations, like dot products), BLAS2 (matrix-vector; operations, like rank-1 update), BLAS3 (matrix-matrix operations, like; matrix multiplication), and LAPACK (advanced matrix decompositions and; solutions). The methods provided by BLAS and LAPACK are standard, but the; performance of actual implementations differ greatly from one version to; another. Moreover, the standard interfaces to the libraries are Fortran,; so |PSIfour| provides a common set of wrappers in :source:`psi4/src/psi4/libqt/qt.h` . .. warning:: Although block_matrix, init_array, and print_mat are still; around, their use is discouraged in favor of operations on; `psi4.core.Matrix` itself. The advice in these docs will catch up; shortly. BLAS Wrappers; ^^^^^^^^^^^^^. BLAS wrappers are currently fully supported at double precision. BLAS commands involving matrices are wrapped so as ",MatchSource.DOCS,doc/sphinxman/source/prog_blas.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst
Safety,recover,recovery,"* DGER: Rank-1 update (not wrapped yet). * BLAS3. * DGEMM: General Matrix-Matrix product; * DTRMM: General Triangular Matrix-General Matrix product; * DTRSM: Triangular Matrix-General Matrix solution via back substitution (just as fast as DTRMM); * DSYMM/DSYMV calls are not appreciably faster than DGEMM calls, and should only be used in expert situations (like using the other half of the matrix for some form of other transformation).; * DTRMM/DTRMV calls are 2x faster than DGEMM, and should be used where possible. LAPACK Wrappers; ^^^^^^^^^^^^^^^. All standard LAPACK 3.2 double precision routines are provided. LAPACK commands remain in Fortran's ""column-major"" indexing, so all the; results will be transposed, and leading dimensions may have to be fiddled; with (using ``lda = n`` in both directions for square matrices is highly; recommended). An example of the former problem is a Cholesky; Decomposition: you expect to get back a lower triangular matrix L such; that ``L L^T = A``, but this is returned in column-major order, so the actual; recovery of the matrix A with the row-major BLAS wrappers effectively; involves ``L^T L = A``. On of the biggest consequences is in linear equations:; The input/output forcing/solution vector must be explicitly formed in; column-major indexing (each vector is placed in a C++ row, with its; entries along the C++ column). This is visualized in C++ as the transpose; of the forcing/solution vector. All routines are declared in qt.h. Each; routine is prefixed with a ``C_``, followed by the standard Fortran name of; the routine, in capital letters. Input parameters of single primitives; (int, double, unsigned long int, char, ...) are passed by value. Arrays,; including multidimensional arrays, are required to be in contiguous memory; (as provided by block_matrix, for example), and are passed by providing a; pointer to the first double or int element of the data (this is array[0]; if array is ``double**``). All routines return an int INFO w",MatchSource.DOCS,doc/sphinxman/source/prog_blas.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst
Usability,simpl,simple,"lues and, optionally eigenvectors of a symmetric matrix. Eigenvectors take up to 10x longer than eigenvalues.; * DGEEV: Eigenvalues and, optionally eigenvectors of a general matrix. Up to 10x slower than DSYEV.; * DGESV: General solver (uses LU decomposition).; * DGESVD: General singular value decomposition.; * DGETRF: LU decomposition.; * DPOTRF: Cholesky decomposition (much more stable/faster); * DGETRS: Solver, given LU decomposition by DGETRF; * DPOTRS: Solver, given Cholesky decomposition by DPOTRF; * DGETRI: Inverse, given LU decomposition by DGETRF (Warning: it's faster and more stable just to solve with DGETRS); * DPOTRI: Inverse, given Cholesky decomposition by DPOTRF (Warning: it's faster and more stable just to solve with DPOTRS). .. _`faq:blasmatrix`:. How to use low-level BLAS/LAPACK with ``psi4.core.Matrix``; ----------------------------------------------------------. Jet's awesome new Matrix object has a lot of simple BLAS/LAPACK built in,; but you can just as easily use the ``double***`` array underneath if you are; careful (the outer index is the submatrix for each irrep). Here's an; example:. .. code-block:: cpp. // BLAS/LAPACK; #include ""psi4/libqt/qt.h""; // Matrix; #include ""psi4/libmints/matrix.h""; ; using namespace psi;; ...; int n = 100;; ; // Allocate A Matrix (new C1 convenience constructor);; shared_ptr<Matrix> A(new Matrix(""Still A, but way cooler"", n,n));; // Get the pointer to the 0 irrep (C1 for now, it errors if you ask for too high of an index); double** A_pointer = A->get_pointer(0);; ; // Call the LAPACK DPOTRF to get the Cholesky factor; // Note this works in column-major order; // The result fills like:; // * * * *; // * * *; // * *; // *; // instead of the expected:; // *; // * *; // * * *; // * * * *; //; int info = C_DPOTRF('L', n, A_pointer[0], n);; ; // Wow that's a lot easier; A->print();; ; // Don't free, it's shared_ptr!. .. _`faq:labas`:. How to name orbital bases (e.g., AO & SO); -----------------------------------------",MatchSource.DOCS,doc/sphinxman/source/prog_blas.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst
Integrability,interface,interface,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:prog_code_intro`:. ================================; General Introduction to the Code; ================================. Languages: C++ and Python; -------------------------. Intro to the hybrid code and how the C++/Python interface works. What Should Go in C++ vs Python; -------------------------------. Code Structure; --------------. Driver, libraries, modules, plugins, ... general tour of what goes where. ",MatchSource.DOCS,doc/sphinxman/source/prog_code_intro.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_code_intro.rst
Modifiability,plugin,plugins,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:prog_code_intro`:. ================================; General Introduction to the Code; ================================. Languages: C++ and Python; -------------------------. Intro to the hybrid code and how the C++/Python interface works. What Should Go in C++ vs Python; -------------------------------. Code Structure; --------------. Driver, libraries, modules, plugins, ... general tour of what goes where. ",MatchSource.DOCS,doc/sphinxman/source/prog_code_intro.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_code_intro.rst
Deployability,release,releaseprocedure,"ense as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:progfaq`:. ===============; Programmers FAQ; ===============. C++ Style in |PSIfour|; ----------------------. #. :ref:`faq:nullptr`; #. :ref:`faq:automakeshared`; #. :ref:`faq:autodecl`; #. :ref:`faq:editorcodestyle`; #. :ref:`faq:githookscodestyle`; #. :ref:`faq:manualcodestyle`. Modules in |PSIfour|; --------------------. #. :ref:`faq:readoptions`; #. :ref:`faq:blaswrappers`; #. :ref:`faq:blasmatrix`; #. :ref:`faq:labas`; #. :ref:`faq:orbdims`; #. :ref:`faq:orbspaces`. Interfacing with |PSIfour|; --------------------------. #. :ref:`faq:addonname`; #. :ref:`faq:addoncmake`. Versioning |PSIfour|; --------------------. #. :ref:`faq:versionbump`; #. :ref:`faq:remotetag`; #. :ref:`faq:githubworkflow`; #. :ref:`faq:psi4version`. Releasing |PSIfour|; -------------------. #. :ref:`faq:annualprocedure`; #. :ref:`faq:prereleaseprocedure`; #. :ref:`faq:releaseprocedure`; #. :ref:`faq:postreleaseprocedure`. Workflow; --------. #. :ref:`faq:localaddon`; #. :ref:`faq:dirlayoutinstall`; #. :ref:`faq:githubworkflow`; #. :ref:`faq:vigitmerge`; #. :ref:`faq:gdblldb`; #. :ref:`faq:grepascii`; #. :ref:`faq:ignoringadvice`. Miscellaneous; -------------. #. :ref:`faq:add_tests`; #. :ref:`faq:add_psithon_tests`; #. :ref:`faq:add_psiapi_tests`; #. :ref:`How to set up PSIthon tests to run through pytest <faq:psithon_through_pytest>`; #. :ref:`faq:findmissingoutputref`; #. :ref:`faq:githubcodereview`. ",MatchSource.DOCS,doc/sphinxman/source/prog_faq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_faq.rst
Testability,test,tests,"ense as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:progfaq`:. ===============; Programmers FAQ; ===============. C++ Style in |PSIfour|; ----------------------. #. :ref:`faq:nullptr`; #. :ref:`faq:automakeshared`; #. :ref:`faq:autodecl`; #. :ref:`faq:editorcodestyle`; #. :ref:`faq:githookscodestyle`; #. :ref:`faq:manualcodestyle`. Modules in |PSIfour|; --------------------. #. :ref:`faq:readoptions`; #. :ref:`faq:blaswrappers`; #. :ref:`faq:blasmatrix`; #. :ref:`faq:labas`; #. :ref:`faq:orbdims`; #. :ref:`faq:orbspaces`. Interfacing with |PSIfour|; --------------------------. #. :ref:`faq:addonname`; #. :ref:`faq:addoncmake`. Versioning |PSIfour|; --------------------. #. :ref:`faq:versionbump`; #. :ref:`faq:remotetag`; #. :ref:`faq:githubworkflow`; #. :ref:`faq:psi4version`. Releasing |PSIfour|; -------------------. #. :ref:`faq:annualprocedure`; #. :ref:`faq:prereleaseprocedure`; #. :ref:`faq:releaseprocedure`; #. :ref:`faq:postreleaseprocedure`. Workflow; --------. #. :ref:`faq:localaddon`; #. :ref:`faq:dirlayoutinstall`; #. :ref:`faq:githubworkflow`; #. :ref:`faq:vigitmerge`; #. :ref:`faq:gdblldb`; #. :ref:`faq:grepascii`; #. :ref:`faq:ignoringadvice`. Miscellaneous; -------------. #. :ref:`faq:add_tests`; #. :ref:`faq:add_psithon_tests`; #. :ref:`faq:add_psiapi_tests`; #. :ref:`How to set up PSIthon tests to run through pytest <faq:psithon_through_pytest>`; #. :ref:`faq:findmissingoutputref`; #. :ref:`faq:githubcodereview`. ",MatchSource.DOCS,doc/sphinxman/source/prog_faq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_faq.rst
Testability,test,test,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:prog_full_integration`:. =======================================; Integrating New Features into |PSIfour|; =======================================. Overview of Required Steps; --------------------------. Explain the different steps that are needed to add a few feature to ; |PSIfour| (where to put the code, how to add user options (w/docs), where; to add targets to CMake files, adding test cases, adding a section; to the Users' manual. Several of those steps are already documented ; elsewhere, so just point to them in the appropriate places. ",MatchSource.DOCS,doc/sphinxman/source/prog_full_integration.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_full_integration.rst
Availability,avail,available,"ded in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:prog_integrals`:. ======================; Integrals in |PSIfour|; ======================. Introduction; ------------. |PSIfour| has a number of backends available to compute integrals. In order to; accomodate these options, while providing a clean interface to the programmer,; an abstraction layer is implemented within Libmints. A recent upgrade to the; primary integral engine has seen some important changes to the way this; interface layer is used; this document is designed to aid new developers as; well as those familiar with the older calling conventions to ensure that the; most efficient calling conventions are applied. The older style; ---------------. A very simple loop that does not use permutational symmetry might look; something like this in the old scheme:. .. code-block:: cpp. auto sieve = std::make_shared<ERISieve>(basisset, cutoff);; auto factory= std::make_shared<IntegralFactory>(basisset);; int deriv_level = 0;; bool use_shell_pairs = true;; auto eri = factory->eri(deriv_level, use_shell_pairs);; const double* buffer = eri_->buffer();; for (int P = 0; P < basisset->nshell(); ++P) {; const auto& Pshell = basisset->shell",MatchSource.DOCS,doc/sphinxman/source/prog_integrals.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst
Deployability,upgrade,upgrade," will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:prog_integrals`:. ======================; Integrals in |PSIfour|; ======================. Introduction; ------------. |PSIfour| has a number of backends available to compute integrals. In order to; accomodate these options, while providing a clean interface to the programmer,; an abstraction layer is implemented within Libmints. A recent upgrade to the; primary integral engine has seen some important changes to the way this; interface layer is used; this document is designed to aid new developers as; well as those familiar with the older calling conventions to ensure that the; most efficient calling conventions are applied. The older style; ---------------. A very simple loop that does not use permutational symmetry might look; something like this in the old scheme:. .. code-block:: cpp. auto sieve = std::make_shared<ERISieve>(basisset, cutoff);; auto factory= std::make_shared<IntegralFactory>(basisset);; int deriv_level = 0;; bool use_shell_pairs = true;; auto eri = factory->eri(deriv_level, use_shell_pairs);; const double* buffer = eri_->buffer();; for (int P = 0; P < basisset->nshell(); ++P) {; const auto& Pshell = basisset->shell(P);; for (int Q = 0; Q < basisset->nshell(); ++Q) {; const auto& Qshell = basisset->shell(Q);; for (int R = 0; R < basisset->nshell(); ++R) {; const auto& Rshell = basisset->shell(R);; for (int S = 0; S < basisset->nshell(); ++S) {; const auto& Sshell = basisset->shell(S);; if(sieve->shell_significant(P, Q, R, S) {; eri->comput",MatchSource.DOCS,doc/sphinxman/source/prog_integrals.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst
Energy Efficiency,efficient,efficient," will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:prog_integrals`:. ======================; Integrals in |PSIfour|; ======================. Introduction; ------------. |PSIfour| has a number of backends available to compute integrals. In order to; accomodate these options, while providing a clean interface to the programmer,; an abstraction layer is implemented within Libmints. A recent upgrade to the; primary integral engine has seen some important changes to the way this; interface layer is used; this document is designed to aid new developers as; well as those familiar with the older calling conventions to ensure that the; most efficient calling conventions are applied. The older style; ---------------. A very simple loop that does not use permutational symmetry might look; something like this in the old scheme:. .. code-block:: cpp. auto sieve = std::make_shared<ERISieve>(basisset, cutoff);; auto factory= std::make_shared<IntegralFactory>(basisset);; int deriv_level = 0;; bool use_shell_pairs = true;; auto eri = factory->eri(deriv_level, use_shell_pairs);; const double* buffer = eri_->buffer();; for (int P = 0; P < basisset->nshell(); ++P) {; const auto& Pshell = basisset->shell(P);; for (int Q = 0; Q < basisset->nshell(); ++Q) {; const auto& Qshell = basisset->shell(Q);; for (int R = 0; R < basisset->nshell(); ++R) {; const auto& Rshell = basisset->shell(R);; for (int S = 0; S < basisset->nshell(); ++S) {; const auto& Sshell = basisset->shell(S);; if(sieve->shell_significant(P, Q, R, S) {; eri->comput",MatchSource.DOCS,doc/sphinxman/source/prog_integrals.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst
Integrability,interface,interface,"are; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:prog_integrals`:. ======================; Integrals in |PSIfour|; ======================. Introduction; ------------. |PSIfour| has a number of backends available to compute integrals. In order to; accomodate these options, while providing a clean interface to the programmer,; an abstraction layer is implemented within Libmints. A recent upgrade to the; primary integral engine has seen some important changes to the way this; interface layer is used; this document is designed to aid new developers as; well as those familiar with the older calling conventions to ensure that the; most efficient calling conventions are applied. The older style; ---------------. A very simple loop that does not use permutational symmetry might look; something like this in the old scheme:. .. code-block:: cpp. auto sieve = std::make_shared<ERISieve>(basisset, cutoff);; auto factory= std::make_shared<IntegralFactory>(basisset);; int deriv_level = 0;; bool use_shell_pairs = true;; auto eri = factory->eri(deriv_level, use_shell_pairs);; const double* buffer = eri_->buffer();; for (int P = 0; P < basisset->nshell(); ++P) {; const auto& Pshell = basisset->shell(P);; for (int Q = 0; Q < basisset->nshell(); ++Q) {; const auto& Qshell = basisset->shell(Q);; for (int R",MatchSource.DOCS,doc/sphinxman/source/prog_integrals.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst
Performance,perform,performed,"call to compute integrals. The integral engine provides a; ``std::vector<const double*>`` containing the pointers to the start of each; ""chunk"" of integrals. For first derivatives there are 12 such ""chunks"", which; are ordered Px,Py,Pz,Qx,Qy,Qz,Rx,Ry,Rz,Sx,Sy,Sz, where the Px refers to the x; derivative with respect to the basis functions in shell P. Note that all; integral derivatives are provided by the new integral code, unlike the previous; version where only 9 of 12 were provided and the user was responsible for using; translation invariance relationships to fill in the rest. The addresses for; each chunk are updated in the vector after each call to compute integrals, so; the user should keep a const reference to that object, and query that for the; address of interest. Density Screening; ................. The old code looked only at the integral to determine whether terms can be; avoided *a priori*. However, if the integral is to be contracted with a; density or a density-like quantity, the screening can be performed on the; product, which yields more sparsity. To enable this, simply call the integral; object's ``update_density`` member, passing it a SharedMatrix holding the; current density (remember that it changes during each iteration of the SCF) and; the product will be considered during screening. If only coulomb-like terms; are to be computed, the ``needs_exchange`` argument to the integral object; constructor should be set to false, otherwise it should be true to correcly; account for products of the density and integrals that contribute to; exchange-like terms. Shell blocking; .............. Each underlying integral engine knows whether it will use blocks, and will set up; the metadata automatically. Instead of looping over individual shells, the; user should loop over blocks supplied by the integral object; these blocks will; be just a single shell quartet combination for the case where blocking is not; used. It is simple to loop over pairs within eac",MatchSource.DOCS,doc/sphinxman/source/prog_integrals.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst
Safety,redund,redundant," eri->first_RS_shell_block(blockPQ_idx);; for (int blockRS_idx = loop_start; blockRS_idx < blocksRS.size(); ++blockRS_idx) {; const auto& blockRS = blocksRS[blockRS_idx];. if (!eri->shell_block_significant(blockPQ_idx, blockRS_idx)) continue;. eri->compute_shell_blocks(blockPQ_idx, blockRS_idx);; const auto* block_start = buffers[0];. // Loop over all of the P,Q,R,S shells within the blocks. We have P>=Q, R>=S and PQ<=RS.; for (const auto& pairPQ : blockPQ) {; const auto &P = pairPQ.first;; const auto &Q = pairPQ.second;; const auto& Pshell = basisset->shell(P);; const auto& Qshell = basisset->shell(Q);; const auto Pam = Pshell.am();; const auto Qam = Qshell.am();; for (const auto& pairRS : blockRS) {; const auto &R = pairRS.first;; const auto &S = pairRS.second;; const auto& Rshell = basisset->shell(R);; const auto& Sshell = basisset->shell(S);; const auto Ram = Rshell.am();; const auto Sam = Sshell.am();. size_t block_size = Psize * Qsize * Rsize * Ssize;; // When there are chunks of shellpairs in RS, we need to make sure; // we filter out redundant combinations.; if (use_batching && Pam == Ram && Qam == Sam && ((P > R) || (P == R && Q > S))) {; block_start += block_size;; continue;; }; const double* int_ptr = block_start;; // Query P,Q,R,S shells for metadata and loop over that quartet; // as usual, getting the integrals from the int_ptr buffer.; block_start += block_size;; }; }; }; }. Although this looks more complex, it's essentially doing the same thing. There; are a number of differences that we'll highlight now. Sieving; ....... This is one of two breaking changes to the old style syntax. Instead of; constructing a sieve object, the integral object should be queried directly; using the exact same syntax. Requests for whether a shell is significant or a; shell block is significant are both supported. A sieve object is created if; matching basis sets are found in either the bra or the ket. For a density; fitting integral (PQ|0A) where 0 is the null basis set an",MatchSource.DOCS,doc/sphinxman/source/prog_integrals.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst
Security,access,access,"our|'s one-electron integral; machinery now. Calling ``compute_shell(int P, int Q)``; ....................................... The hand-implemented OS recursion code also took care of the Cartesian->pure; transformation (if required by the basis set). The mechanism for handling this; was to provide a public facing ``compute_shell(int P, int Q)`` method for the; caller; this then looked up the appropriate ``GaussianShell`` objects that were; passed into the corresponding (private) ``compute_pair(GaussianShell &s1,; GaussianShell &s2)`` function that computed the integrals and transformed them; to the spherical harmonic basis, if needed. The switch to Libint2 integrals; preserves this mechanism, but the ``compute_shell(int P, int Q)`` simply looks; up the appropriate Libint2-compatible shells and hands them off to the; re-written, private ``compute_pair()`` routines, which call Libint2 directly.; Therefore, any calls to shell-pair level integral computations should look the; same as before the introduction of Libint2, however access to the integrals has; changed, as described below. Accessing integrals; ................... Before the Libint2 transition, one electron integrals were computed in a flat; array, internally called `buffer_`, which was accessed through the integral; object's ``buffer()`` method. For integrals with multiple operators, e.g.,; dipole operators that have three distinct components, the buffer was simply; elongated by the appropriate amount and the caller was responsible for striding; through each resulting batch correctly. The Libint2 engines instead return a; list of pointers into each operator's batch of integrals, the ordering of which; are detailed on the Libint2 wiki. For this reason, the call to ``buffer()``; that returns a single buffer must be replaced with a call to ``buffer()`` to; get a list of pointers; we recommend that be assigned the type ``const auto; &``. For simple integrals, such as overlap or kinetic, only the buffer; correspond",MatchSource.DOCS,doc/sphinxman/source/prog_integrals.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst
Usability,simpl,simple,"ceived a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:prog_integrals`:. ======================; Integrals in |PSIfour|; ======================. Introduction; ------------. |PSIfour| has a number of backends available to compute integrals. In order to; accomodate these options, while providing a clean interface to the programmer,; an abstraction layer is implemented within Libmints. A recent upgrade to the; primary integral engine has seen some important changes to the way this; interface layer is used; this document is designed to aid new developers as; well as those familiar with the older calling conventions to ensure that the; most efficient calling conventions are applied. The older style; ---------------. A very simple loop that does not use permutational symmetry might look; something like this in the old scheme:. .. code-block:: cpp. auto sieve = std::make_shared<ERISieve>(basisset, cutoff);; auto factory= std::make_shared<IntegralFactory>(basisset);; int deriv_level = 0;; bool use_shell_pairs = true;; auto eri = factory->eri(deriv_level, use_shell_pairs);; const double* buffer = eri_->buffer();; for (int P = 0; P < basisset->nshell(); ++P) {; const auto& Pshell = basisset->shell(P);; for (int Q = 0; Q < basisset->nshell(); ++Q) {; const auto& Qshell = basisset->shell(Q);; for (int R = 0; R < basisset->nshell(); ++R) {; const auto& Rshell = basisset->shell(R);; for (int S = 0; S < basisset->nshell(); ++S) {; const auto& Sshell = basisset->shell(S);; if(sieve->shell_significant(P, Q, R, S) {; eri->compute_shell(P, Q, R, S);; // results are in buffer, do something with them..; }; }; }; }; }. An integral factory is used, which can then produce integral object for various; operator types and derivative levels. A sieve is also constructed; thi",MatchSource.DOCS,doc/sphinxman/source/prog_integrals.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst
Modifiability,plugin,plugins,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:prog_newcode`:. ================================================; Adding New Code to |PSIfour|; ================================================. .. toctree::; prog_ways_to_add; plugins; prog_full_integration ; proc_py; prog_style_py; prog_style_c; FAQ <prog_faq>. ",MatchSource.DOCS,doc/sphinxman/source/prog_newcode.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_newcode.rst
Energy Efficiency,reduce,reduces,"-----------------------------. Using ``std::make_shared``:. 1. Reduces code verbosity, especially when coupled with ``auto``:. .. code-block:: cpp. // Type information given 3 TIMES!!!; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso));. // So much typing...; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso);. // Much better!!!!; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso);. 2. Ensures exception safety and prevents resource leaks. 3. Improves efficiency:. .. code-block:: cpp. // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso));. // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso);. *Reference:* Item 21 in `[Effective Modern C++] <https://isbnsearch.org/isbn/9781491903995>`_. .. _`faq:autodecl`:. Prefer ``auto`` to explicit type declarations; ---------------------------------------------. Using ``auto`` reduces and/or avoids:. 1. Verbosity in variable declarations:. .. code-block:: cpp. std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!. 2. Problems with uninitialized variables. auto works like template type; deduction, hence the right-hand side of the declaration needs to have an; initializer:. .. code-block:: cpp. int x1; // fine, but uninitialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized. 3. Problems with unintended type casts and type mismatches that are hard; to impossible to catch:. .. code-block:: cpp. std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type. *Reference:* Items 2 and 5 in `[Effective Modern C++] <https://",MatchSource.DOCS,doc/sphinxman/source/prog_style_c.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_style_c.rst
Modifiability,variab,variable,"d::make_shared``:. 1. Reduces code verbosity, especially when coupled with ``auto``:. .. code-block:: cpp. // Type information given 3 TIMES!!!; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso));. // So much typing...; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso);. // Much better!!!!; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso);. 2. Ensures exception safety and prevents resource leaks. 3. Improves efficiency:. .. code-block:: cpp. // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso));. // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso);. *Reference:* Item 21 in `[Effective Modern C++] <https://isbnsearch.org/isbn/9781491903995>`_. .. _`faq:autodecl`:. Prefer ``auto`` to explicit type declarations; ---------------------------------------------. Using ``auto`` reduces and/or avoids:. 1. Verbosity in variable declarations:. .. code-block:: cpp. std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!. 2. Problems with uninitialized variables. auto works like template type; deduction, hence the right-hand side of the declaration needs to have an; initializer:. .. code-block:: cpp. int x1; // fine, but uninitialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized. 3. Problems with unintended type casts and type mismatches that are hard; to impossible to catch:. .. code-block:: cpp. std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type. *Reference:* Items 2 and 5 in `[Effective Modern C++] <https://isbnsearch.org/isbn/9781491903995>`_. Mar",MatchSource.DOCS,doc/sphinxman/source/prog_style_c.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_style_c.rst
Safety,safe,safety,"he details. If you; want to overload on pointer types and/or use pointer types with templates,; use ``nullptr`` to signal the null pointer. The correct overload/template; parameter will then be deduced. Using ``nullptr`` also makes the code more; readable, especially if ``auto`` is used consistently throughout. *Reference:* Item 8 in `[Effective Modern C++] <https://isbnsearch.org/isbn/9781491903995>`_. .. _`faq:automakeshared`:. Prefer ``std::make_shared`` to direct use of ``new``; ----------------------------------------------------. Using ``std::make_shared``:. 1. Reduces code verbosity, especially when coupled with ``auto``:. .. code-block:: cpp. // Type information given 3 TIMES!!!; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso));. // So much typing...; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso);. // Much better!!!!; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso);. 2. Ensures exception safety and prevents resource leaks. 3. Improves efficiency:. .. code-block:: cpp. // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso));. // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso);. *Reference:* Item 21 in `[Effective Modern C++] <https://isbnsearch.org/isbn/9781491903995>`_. .. _`faq:autodecl`:. Prefer ``auto`` to explicit type declarations; ---------------------------------------------. Using ``auto`` reduces and/or avoids:. 1. Verbosity in variable declarations:. .. code-block:: cpp. std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!. 2. Problems with uninitialized variables. auto works like template type; deduction, hence the right-hand side of the declaration needs to have an; initializer:. .. code-block:: cpp. int x1; // fine, but uninitialized :(; auto x2;",MatchSource.DOCS,doc/sphinxman/source/prog_style_c.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_style_c.rst
Usability,guid,guideline,"k:: cpp. std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!. 2. Problems with uninitialized variables. auto works like template type; deduction, hence the right-hand side of the declaration needs to have an; initializer:. .. code-block:: cpp. int x1; // fine, but uninitialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized. 3. Problems with unintended type casts and type mismatches that are hard; to impossible to catch:. .. code-block:: cpp. std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type. *Reference:* Items 2 and 5 in `[Effective Modern C++] <https://isbnsearch.org/isbn/9781491903995>`_. Mark virtual functions in derived classes with override; -------------------------------------------------------. The ``override`` keyword introduced in C++11 is used to mark a function in a; derived class and guarantee that it is overloading a function *with the same; signature* in the base class. This behavior is `checked at compile time; <https://en.cppreference.com/w/cpp/language/override>`_. .. _`faq:printmem`:. Prefer `GiB` for memory printing; --------------------------------. As memory sizes get larger, we should work in giga (requires decimal printing to not round to zero) rather than mega units.; As it's what we're computing anyways, we should work in 1024-based (mebi, gibi, etc. https://en.wikipedia.org/wiki/Gibibyte) rather than 1000-based units.; As it's a unit, put it in brackets.; Note that users can supply MiB, GB, bytes, or whatever; this guideline is for output printing. ::. outfile->Printf("" DFHelper Memory: AOs need %.3f [GiB]; user supplied %.3f [GiB]. "",; (required * 8 / (1024 * 1024 * 1024.0)),. ",MatchSource.DOCS,doc/sphinxman/source/prog_style_c.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_style_c.rst
Usability,clear,clear,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:style_python`:. Python Style; ============. .. _`faq:ignoringadvice`:. How to Ignore the Bots; ----------------------. Formatting and analysis bots are great because it takes more effort; to defy them than to accept their criticism. Nevertheless, for code; clarity, they can be honestly wrong, so we need a way to specifically; clear their findings. * Py Formatting (yapf) ``# yapf: disable`` (single line or block) ``# yapf: enable`` (resume). * C++ Formatting (clang-format) ``// clang-format off`` (single line or block) ``// clang-format on`` (resume). * Py Dynamic Analysis (coverage.py) ``# pragma: no cover``. * C++ Dynamic Analysis (gcov) https://stackoverflow.com/a/30078276 untested. * Py Static Analysis (lgtm) ``# lgtm[py/not-named-self]`` (click on the ""?"" to get the ""Query ID""). * C++ Static Analysis (lgtm) ``// lgtm[cpp/wrong-type-format-argument]`` (click on the ""?"" to get the ""Query ID""). ",MatchSource.DOCS,doc/sphinxman/source/prog_style_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_style_py.rst
Availability,avail,available," heavy lifting in |PSIfour| is handled by libmints, which can be; found in the :source:`psi4/src/psi4/libmints` directory. New types of one- and; two-electron integral operators should be added here. The Wavefunction class; :source:`psi4/src/psi4/libmints/wavefunction.h` is also found here and is a key; part of the infrastructure. Every energy calculation is performed by a class; that derives from Wavefunction and is accessible as a return value in the; Python layer. The Wavefunction class contains all pertinent calculation; results, such as one-particle densities, molecular orbitals and gradients. Completely new methods; ----------------------. A new method that is not a modification of existing code belongs in its own; folder in :source:`psi4/src/psi4`; see other folders in that exist in that; location for examples of setting up CMake, and make sure that the new folder is; added to :source:`psi4/src/psi4/CMakeLists.txt`. There are also a number of; variables that can be exported to be available to the user, as detailed in; :ref:`sec:psiVariables`. To set these variables, the following member of; Wavefunction should be called::. set_variable(""Variable Name"", variable_value);. The new variable should also be documented in; :source:`doc/sphinxman/source/glossary_psivariables.rst`. There are a; number of different helpers to export various quantities from the wavefunction; to external formats such as FCHK and MOLDEN. Because the Wavefunction makes; its members available to the Python layer, any other similar export functions; should be written in python. Integral consuming technologies; -------------------------------. The general philosophy in |PSIfour| is to try write two-electron integral; driven tasks in methods like Hartree-Fock, CIS and CPHF in terms of generalized; Fock-like matrices. From here, a single class can be used to construct these; generalized Fock matrices, which is what libFock; (:source:`psi4/src/psi4/libfock`) accomplishes. A number of integral; te",MatchSource.DOCS,doc/sphinxman/source/prog_tour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_tour.rst
Energy Efficiency,energy,energy,"eral Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:prog_tour`:. ==========================================================; General layout of the core: where new C++ code should live; ==========================================================. New integral operators; ----------------------. Most of the heavy lifting in |PSIfour| is handled by libmints, which can be; found in the :source:`psi4/src/psi4/libmints` directory. New types of one- and; two-electron integral operators should be added here. The Wavefunction class; :source:`psi4/src/psi4/libmints/wavefunction.h` is also found here and is a key; part of the infrastructure. Every energy calculation is performed by a class; that derives from Wavefunction and is accessible as a return value in the; Python layer. The Wavefunction class contains all pertinent calculation; results, such as one-particle densities, molecular orbitals and gradients. Completely new methods; ----------------------. A new method that is not a modification of existing code belongs in its own; folder in :source:`psi4/src/psi4`; see other folders in that exist in that; location for examples of setting up CMake, and make sure that the new folder is; added to :source:`psi4/src/psi4/CMakeLists.txt`. There are also a number of; variables that can be exported to be available to the user, as detailed in; :ref:`sec:psiVariables`. To set these variables, the following member of; Wavefunction should be called::. set_variable(""Variable Name"", variable_value);. The new variable should also be documented in; :source:`doc/sphinxman/source/glossary_psivariables.rst`. There are a; number of different helpers to export various quantities from the wavefunction; to exter",MatchSource.DOCS,doc/sphinxman/source/prog_tour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_tour.rst
Modifiability,variab,variables," heavy lifting in |PSIfour| is handled by libmints, which can be; found in the :source:`psi4/src/psi4/libmints` directory. New types of one- and; two-electron integral operators should be added here. The Wavefunction class; :source:`psi4/src/psi4/libmints/wavefunction.h` is also found here and is a key; part of the infrastructure. Every energy calculation is performed by a class; that derives from Wavefunction and is accessible as a return value in the; Python layer. The Wavefunction class contains all pertinent calculation; results, such as one-particle densities, molecular orbitals and gradients. Completely new methods; ----------------------. A new method that is not a modification of existing code belongs in its own; folder in :source:`psi4/src/psi4`; see other folders in that exist in that; location for examples of setting up CMake, and make sure that the new folder is; added to :source:`psi4/src/psi4/CMakeLists.txt`. There are also a number of; variables that can be exported to be available to the user, as detailed in; :ref:`sec:psiVariables`. To set these variables, the following member of; Wavefunction should be called::. set_variable(""Variable Name"", variable_value);. The new variable should also be documented in; :source:`doc/sphinxman/source/glossary_psivariables.rst`. There are a; number of different helpers to export various quantities from the wavefunction; to external formats such as FCHK and MOLDEN. Because the Wavefunction makes; its members available to the Python layer, any other similar export functions; should be written in python. Integral consuming technologies; -------------------------------. The general philosophy in |PSIfour| is to try write two-electron integral; driven tasks in methods like Hartree-Fock, CIS and CPHF in terms of generalized; Fock-like matrices. From here, a single class can be used to construct these; generalized Fock matrices, which is what libFock; (:source:`psi4/src/psi4/libfock`) accomplishes. A number of integral; te",MatchSource.DOCS,doc/sphinxman/source/prog_tour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_tour.rst
Performance,perform,performed,"eral Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:prog_tour`:. ==========================================================; General layout of the core: where new C++ code should live; ==========================================================. New integral operators; ----------------------. Most of the heavy lifting in |PSIfour| is handled by libmints, which can be; found in the :source:`psi4/src/psi4/libmints` directory. New types of one- and; two-electron integral operators should be added here. The Wavefunction class; :source:`psi4/src/psi4/libmints/wavefunction.h` is also found here and is a key; part of the infrastructure. Every energy calculation is performed by a class; that derives from Wavefunction and is accessible as a return value in the; Python layer. The Wavefunction class contains all pertinent calculation; results, such as one-particle densities, molecular orbitals and gradients. Completely new methods; ----------------------. A new method that is not a modification of existing code belongs in its own; folder in :source:`psi4/src/psi4`; see other folders in that exist in that; location for examples of setting up CMake, and make sure that the new folder is; added to :source:`psi4/src/psi4/CMakeLists.txt`. There are also a number of; variables that can be exported to be available to the user, as detailed in; :ref:`sec:psiVariables`. To set these variables, the following member of; Wavefunction should be called::. set_variable(""Variable Name"", variable_value);. The new variable should also be documented in; :source:`doc/sphinxman/source/glossary_psivariables.rst`. There are a; number of different helpers to export various quantities from the wavefunction; to exter",MatchSource.DOCS,doc/sphinxman/source/prog_tour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_tour.rst
Security,access,accessible,"eral Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:prog_tour`:. ==========================================================; General layout of the core: where new C++ code should live; ==========================================================. New integral operators; ----------------------. Most of the heavy lifting in |PSIfour| is handled by libmints, which can be; found in the :source:`psi4/src/psi4/libmints` directory. New types of one- and; two-electron integral operators should be added here. The Wavefunction class; :source:`psi4/src/psi4/libmints/wavefunction.h` is also found here and is a key; part of the infrastructure. Every energy calculation is performed by a class; that derives from Wavefunction and is accessible as a return value in the; Python layer. The Wavefunction class contains all pertinent calculation; results, such as one-particle densities, molecular orbitals and gradients. Completely new methods; ----------------------. A new method that is not a modification of existing code belongs in its own; folder in :source:`psi4/src/psi4`; see other folders in that exist in that; location for examples of setting up CMake, and make sure that the new folder is; added to :source:`psi4/src/psi4/CMakeLists.txt`. There are also a number of; variables that can be exported to be available to the user, as detailed in; :ref:`sec:psiVariables`. To set these variables, the following member of; Wavefunction should be called::. set_variable(""Variable Name"", variable_value);. The new variable should also be documented in; :source:`doc/sphinxman/source/glossary_psivariables.rst`. There are a; number of different helpers to export various quantities from the wavefunction; to exter",MatchSource.DOCS,doc/sphinxman/source/prog_tour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_tour.rst
Availability,mainten,maintenance,". * Making a release or prerelease. * update all three fields of metadata.py (see below ex); * commit; * on master, make annotated tag starting with v. note the hash.; * run enough of build to make sure tag formatted properly and ""Defining {} version"" sane. # MUST update metadata.py on same commit at which make tag. git tag -a v1.0 d2243ef; git push origin v1.0; git push [remote] [tagname]. do NOT use the GitHub tagging interface - it creates lightweight tags. :source:`psi4/metadata.py`. __version__ = '1.0'; __version_long = '1.0+d2243ef'; __version_upcoming_annotated_v_tag = '1.1a1'. # Example current and upcoming tag pairs; # * '1.0', '1.1a1'; # * '1.0.4', '1.0.5' on maintenance branch 1.0.x; # * '1.1a1', '1.1b1'; # * '1.1rc2', '1.1'; # * '1.1', '1.2'. ",MatchSource.DOCS,doc/sphinxman/source/prog_version.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_version.rst
Deployability,release,release,". * Making a release or prerelease. * update all three fields of metadata.py (see below ex); * commit; * on master, make annotated tag starting with v. note the hash.; * run enough of build to make sure tag formatted properly and ""Defining {} version"" sane. # MUST update metadata.py on same commit at which make tag. git tag -a v1.0 d2243ef; git push origin v1.0; git push [remote] [tagname]. do NOT use the GitHub tagging interface - it creates lightweight tags. :source:`psi4/metadata.py`. __version__ = '1.0'; __version_long = '1.0+d2243ef'; __version_upcoming_annotated_v_tag = '1.1a1'. # Example current and upcoming tag pairs; # * '1.0', '1.1a1'; # * '1.0.4', '1.0.5' on maintenance branch 1.0.x; # * '1.1a1', '1.1b1'; # * '1.1rc2', '1.1'; # * '1.1', '1.2'. ",MatchSource.DOCS,doc/sphinxman/source/prog_version.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_version.rst
Integrability,interface,interface,". * Making a release or prerelease. * update all three fields of metadata.py (see below ex); * commit; * on master, make annotated tag starting with v. note the hash.; * run enough of build to make sure tag formatted properly and ""Defining {} version"" sane. # MUST update metadata.py on same commit at which make tag. git tag -a v1.0 d2243ef; git push origin v1.0; git push [remote] [tagname]. do NOT use the GitHub tagging interface - it creates lightweight tags. :source:`psi4/metadata.py`. __version__ = '1.0'; __version_long = '1.0+d2243ef'; __version_upcoming_annotated_v_tag = '1.1a1'. # Example current and upcoming tag pairs; # * '1.0', '1.1a1'; # * '1.0.4', '1.0.5' on maintenance branch 1.0.x; # * '1.1a1', '1.1b1'; # * '1.1rc2', '1.1'; # * '1.1', '1.2'. ",MatchSource.DOCS,doc/sphinxman/source/prog_version.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_version.rst
Security,hash,hash,". * Making a release or prerelease. * update all three fields of metadata.py (see below ex); * commit; * on master, make annotated tag starting with v. note the hash.; * run enough of build to make sure tag formatted properly and ""Defining {} version"" sane. # MUST update metadata.py on same commit at which make tag. git tag -a v1.0 d2243ef; git push origin v1.0; git push [remote] [tagname]. do NOT use the GitHub tagging interface - it creates lightweight tags. :source:`psi4/metadata.py`. __version__ = '1.0'; __version_long = '1.0+d2243ef'; __version_upcoming_annotated_v_tag = '1.1a1'. # Example current and upcoming tag pairs; # * '1.0', '1.1a1'; # * '1.0.4', '1.0.5' on maintenance branch 1.0.x; # * '1.1a1', '1.1b1'; # * '1.1rc2', '1.1'; # * '1.1', '1.2'. ",MatchSource.DOCS,doc/sphinxman/source/prog_version.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_version.rst
Availability,avail,available,"eatured electronic structure programs are large and complex. However,; the |PSIfour| ecosystem provides a path for easier and more rapid development; of new features. The earliest versions of |PSIfour| were written by merging; individual executables that performed specific tasks into a unified C++; executable. By linking this C++ executable against the Python interpreter, the; individual modules could be called in any sequence, enabling a very diverse; range of tasks to be accomplished within a given input. Although Python-driven; model allowed for great flexibility from a user's perspective, programming was; still relatively difficult because it required modifications to be made in C++; code. Since those early days, the code has undergone some important structural; changes that have greatly simplified the development workflow. These changes; were motivated by the realization that only a few bottlenecks exist in a typical; calculation; by focusing on optimized C++ implementations of these bottlenecks; and making these C++ functions available in Python, most of the code to implement; the overall calculation can be written in simpler Python code. Python is far; better suited to management tasks such as directory navigation and retrieval,; making it a natural choice for overall calculation layout than C++. With the; emergence of `NumPy <https://numpy.org/>`_ as a standard tool for executing almost any; mathematical technique efficiently in Python, the transitioning of code from; C++ to Python has facilitated a much simpler work flow for prototyping and; developing methods: this is detailed in the next section. .. _`sec:prog_psi4numpy`:. Rapid initial development using Psi4NumPy; -----------------------------------------. The `Psi4NumPy <https://github.com/psi4/psi4numpy>`_ project [Smith:2018:3504]_ is the recommended; mechanism for developing and prototyping new methods in Psi4. Because; `NumPy <https://numpy.org/>`_ provides such a rich set of features for efficient l",MatchSource.DOCS,doc/sphinxman/source/prog_ways_to_add.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst
Deployability,integrat,integration,"etrieve them in NumPy format, and then write the; remaining code using standard Python and/or NumPy syntax. This approach does; not require any recompilation of code, resulting in a particularly facile; development workflow. Detailed examples and tutorials are available in the; `Psi4NumPy <https://github.com/psi4/psi4numpy>`_ repository. .. _`sec:prog_plugins`:. Avoiding the need to modify Psi4, using plugins; -----------------------------------------------. In the early days when |PSIfour| was still primarily a C++ code, development; was very cumbersome due to a lengthy build process. To expedite development, a; plugin system was developed. This plugin machinery allows developers to access; the classes defined in the innards of |PSIfour|, with only the small plugin; code requiring recompilation during development. The resulting lightweight; code can be maintained and distributed independently of |PSIfour|, making this; a good strategy for development, especially in cases where tighter integration; of the new code with existing |PSIfour| machinery is required than that; afforded by the Numpy based strategy outlined in the :ref:`sec:prog_psi4numpy`; section. For details about how to write these plugins, see the; :ref:`sec:plugins` section. .. _`sec:prog_fullintegration`:. Incorporating code into |PSIfour|; ---------------------------------. For features to be incorporated fully into the |PSIfour| ecosystem, changes to; the core routines are inevitable. However, the programmer should think very; carefully about the most appropriate language for the task in hand. Let's; consider a new feature that downloads some data from an external source and; then performs some kind of expensive matrix operation on those data. Because; Python has a rich set of tools for obtaining data from external sources,; writing this tool in the Python layer is a natural choice. If we know that the; matrix will always be small enough to fit in memory, we can simply rely on the; routines present i",MatchSource.DOCS,doc/sphinxman/source/prog_ways_to_add.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst
Energy Efficiency,efficient,efficiently,"ven input. Although Python-driven; model allowed for great flexibility from a user's perspective, programming was; still relatively difficult because it required modifications to be made in C++; code. Since those early days, the code has undergone some important structural; changes that have greatly simplified the development workflow. These changes; were motivated by the realization that only a few bottlenecks exist in a typical; calculation; by focusing on optimized C++ implementations of these bottlenecks; and making these C++ functions available in Python, most of the code to implement; the overall calculation can be written in simpler Python code. Python is far; better suited to management tasks such as directory navigation and retrieval,; making it a natural choice for overall calculation layout than C++. With the; emergence of `NumPy <https://numpy.org/>`_ as a standard tool for executing almost any; mathematical technique efficiently in Python, the transitioning of code from; C++ to Python has facilitated a much simpler work flow for prototyping and; developing methods: this is detailed in the next section. .. _`sec:prog_psi4numpy`:. Rapid initial development using Psi4NumPy; -----------------------------------------. The `Psi4NumPy <https://github.com/psi4/psi4numpy>`_ project [Smith:2018:3504]_ is the recommended; mechanism for developing and prototyping new methods in Psi4. Because; `NumPy <https://numpy.org/>`_ provides such a rich set of features for efficient linear; algebra, Fourier transforms, and general tensor manipulations, a massive number; of methods can be easily implemented very easily using that library. To; facilitate this workflow, |PSIfour| exports key quantities such as integrals,; densities and molecular orbitals in NumPy format. From this point, the; programmer can simply call the appropriate |PSIfour| functions to compute the; desired input quantities, retrieve them in NumPy format, and then write the; remaining code using standard Pyt",MatchSource.DOCS,doc/sphinxman/source/prog_ways_to_add.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst
Integrability,integrat,integration,"etrieve them in NumPy format, and then write the; remaining code using standard Python and/or NumPy syntax. This approach does; not require any recompilation of code, resulting in a particularly facile; development workflow. Detailed examples and tutorials are available in the; `Psi4NumPy <https://github.com/psi4/psi4numpy>`_ repository. .. _`sec:prog_plugins`:. Avoiding the need to modify Psi4, using plugins; -----------------------------------------------. In the early days when |PSIfour| was still primarily a C++ code, development; was very cumbersome due to a lengthy build process. To expedite development, a; plugin system was developed. This plugin machinery allows developers to access; the classes defined in the innards of |PSIfour|, with only the small plugin; code requiring recompilation during development. The resulting lightweight; code can be maintained and distributed independently of |PSIfour|, making this; a good strategy for development, especially in cases where tighter integration; of the new code with existing |PSIfour| machinery is required than that; afforded by the Numpy based strategy outlined in the :ref:`sec:prog_psi4numpy`; section. For details about how to write these plugins, see the; :ref:`sec:plugins` section. .. _`sec:prog_fullintegration`:. Incorporating code into |PSIfour|; ---------------------------------. For features to be incorporated fully into the |PSIfour| ecosystem, changes to; the core routines are inevitable. However, the programmer should think very; carefully about the most appropriate language for the task in hand. Let's; consider a new feature that downloads some data from an external source and; then performs some kind of expensive matrix operation on those data. Because; Python has a rich set of tools for obtaining data from external sources,; writing this tool in the Python layer is a natural choice. If we know that the; matrix will always be small enough to fit in memory, we can simply rely on the; routines present i",MatchSource.DOCS,doc/sphinxman/source/prog_ways_to_add.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst
Modifiability,plugin,plugins,"he recommended; mechanism for developing and prototyping new methods in Psi4. Because; `NumPy <https://numpy.org/>`_ provides such a rich set of features for efficient linear; algebra, Fourier transforms, and general tensor manipulations, a massive number; of methods can be easily implemented very easily using that library. To; facilitate this workflow, |PSIfour| exports key quantities such as integrals,; densities and molecular orbitals in NumPy format. From this point, the; programmer can simply call the appropriate |PSIfour| functions to compute the; desired input quantities, retrieve them in NumPy format, and then write the; remaining code using standard Python and/or NumPy syntax. This approach does; not require any recompilation of code, resulting in a particularly facile; development workflow. Detailed examples and tutorials are available in the; `Psi4NumPy <https://github.com/psi4/psi4numpy>`_ repository. .. _`sec:prog_plugins`:. Avoiding the need to modify Psi4, using plugins; -----------------------------------------------. In the early days when |PSIfour| was still primarily a C++ code, development; was very cumbersome due to a lengthy build process. To expedite development, a; plugin system was developed. This plugin machinery allows developers to access; the classes defined in the innards of |PSIfour|, with only the small plugin; code requiring recompilation during development. The resulting lightweight; code can be maintained and distributed independently of |PSIfour|, making this; a good strategy for development, especially in cases where tighter integration; of the new code with existing |PSIfour| machinery is required than that; afforded by the Numpy based strategy outlined in the :ref:`sec:prog_psi4numpy`; section. For details about how to write these plugins, see the; :ref:`sec:plugins` section. .. _`sec:prog_fullintegration`:. Incorporating code into |PSIfour|; ---------------------------------. For features to be incorporated fully into the |PSI",MatchSource.DOCS,doc/sphinxman/source/prog_ways_to_add.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst
Performance,perform,performed," the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:prog_ways_to_add`:. ======================================================; Ways to Add Code: Psi4NumPy, Plugins, Full Integration ; ======================================================. Easier and more rapid development; ---------------------------------. Fully-featured electronic structure programs are large and complex. However,; the |PSIfour| ecosystem provides a path for easier and more rapid development; of new features. The earliest versions of |PSIfour| were written by merging; individual executables that performed specific tasks into a unified C++; executable. By linking this C++ executable against the Python interpreter, the; individual modules could be called in any sequence, enabling a very diverse; range of tasks to be accomplished within a given input. Although Python-driven; model allowed for great flexibility from a user's perspective, programming was; still relatively difficult because it required modifications to be made in C++; code. Since those early days, the code has undergone some important structural; changes that have greatly simplified the development workflow. These changes; were motivated by the realization that only a few bottlenecks exist in a typical; calculation; by focusing on optimized C++ implementations of these bottlenecks; and making these C++ functions available in Python, most of the code to implement; the overall calculation can be written in simpler Python code. Python is far; better suited to management tasks such as directory navigatio",MatchSource.DOCS,doc/sphinxman/source/prog_ways_to_add.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst
Security,access,access,". To; facilitate this workflow, |PSIfour| exports key quantities such as integrals,; densities and molecular orbitals in NumPy format. From this point, the; programmer can simply call the appropriate |PSIfour| functions to compute the; desired input quantities, retrieve them in NumPy format, and then write the; remaining code using standard Python and/or NumPy syntax. This approach does; not require any recompilation of code, resulting in a particularly facile; development workflow. Detailed examples and tutorials are available in the; `Psi4NumPy <https://github.com/psi4/psi4numpy>`_ repository. .. _`sec:prog_plugins`:. Avoiding the need to modify Psi4, using plugins; -----------------------------------------------. In the early days when |PSIfour| was still primarily a C++ code, development; was very cumbersome due to a lengthy build process. To expedite development, a; plugin system was developed. This plugin machinery allows developers to access; the classes defined in the innards of |PSIfour|, with only the small plugin; code requiring recompilation during development. The resulting lightweight; code can be maintained and distributed independently of |PSIfour|, making this; a good strategy for development, especially in cases where tighter integration; of the new code with existing |PSIfour| machinery is required than that; afforded by the Numpy based strategy outlined in the :ref:`sec:prog_psi4numpy`; section. For details about how to write these plugins, see the; :ref:`sec:plugins` section. .. _`sec:prog_fullintegration`:. Incorporating code into |PSIfour|; ---------------------------------. For features to be incorporated fully into the |PSIfour| ecosystem, changes to; the core routines are inevitable. However, the programmer should think very; carefully about the most appropriate language for the task in hand. Let's; consider a new feature that downloads some data from an external source and; then performs some kind of expensive matrix operation on those data",MatchSource.DOCS,doc/sphinxman/source/prog_ways_to_add.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst
Testability,log,logic,"ifting and the code is easy to; implement entirely in the Python layer. In the case where the matrix operation; is non-standard and requires some specialized code to handle disk-based; storage, the decision to write in Python is less clear cut. It is certainly; possible to write these out-of-core routines using Numpy primitives, but there; are a number of tools in |PSIfour| already to perform tasks like these that are; required, *e.g.*, for cluster. In this case, a good design would be to write a; simple piece of code in the C++ layer that performs the matrix operation on a; given input, using the I/O routines available in |PSIfour| and the parallelism; afforded by OpenMP, and to make that code available to the front end as; described in :ref:`sec:prog_tour-exposing`. The Python layer could then be; responsible for obtaining the input data and calling this C++ code to do the; manipulations, allowing each language layer to handle the subset of the work; that caters to their individual strengths. A number of concrete examples of this workflow exist in the code already. For; finite difference computations of energy derivatives, the logic to determine; the type of stencil and which displacements are needed is not going to be rate; limiting for any reasonable quantum mechanical energy function. Therefore,; doing that work in the Python layer is a good idea, as it allows the many; Python tools for farming out *embarrassingly parallel* workloads to be used,; while the C++ layer can be used to implement the energy function to be; differentiated. In SCF, we have a number of sources of external embedding potentials that could; enter the calculation. Allowing Python to handle only the details of driving; the SCF iterations, such as external potentials and convergence acceleration; methods, but deferring to C++ to do the heavy lifting for building and; diagonalizing the Fock matrix also takes advantage of the two languages'; strengths and improves maintainability of the code.; ",MatchSource.DOCS,doc/sphinxman/source/prog_ways_to_add.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst
Usability,simpl,simplified,"======================================; Ways to Add Code: Psi4NumPy, Plugins, Full Integration ; ======================================================. Easier and more rapid development; ---------------------------------. Fully-featured electronic structure programs are large and complex. However,; the |PSIfour| ecosystem provides a path for easier and more rapid development; of new features. The earliest versions of |PSIfour| were written by merging; individual executables that performed specific tasks into a unified C++; executable. By linking this C++ executable against the Python interpreter, the; individual modules could be called in any sequence, enabling a very diverse; range of tasks to be accomplished within a given input. Although Python-driven; model allowed for great flexibility from a user's perspective, programming was; still relatively difficult because it required modifications to be made in C++; code. Since those early days, the code has undergone some important structural; changes that have greatly simplified the development workflow. These changes; were motivated by the realization that only a few bottlenecks exist in a typical; calculation; by focusing on optimized C++ implementations of these bottlenecks; and making these C++ functions available in Python, most of the code to implement; the overall calculation can be written in simpler Python code. Python is far; better suited to management tasks such as directory navigation and retrieval,; making it a natural choice for overall calculation layout than C++. With the; emergence of `NumPy <https://numpy.org/>`_ as a standard tool for executing almost any; mathematical technique efficiently in Python, the transitioning of code from; C++ to Python has facilitated a much simpler work flow for prototyping and; developing methods: this is detailed in the next section. .. _`sec:prog_psi4numpy`:. Rapid initial development using Psi4NumPy; -----------------------------------------. The `Psi4NumPy <https:/",MatchSource.DOCS,doc/sphinxman/source/prog_ways_to_add.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst
Usability,feedback,feedback,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:prog_welcome`:. ===========================; Welcome to New Programmers; ===========================. The |PSIfour| community; -----------------------. |PSIfour| is an open-source project and welcomes contributions from; developers around the world. etc. We have annual meetings, we welcome; feedback, slack channel, etc. ",MatchSource.DOCS,doc/sphinxman/source/prog_welcome.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_welcome.rst
Availability,avail,available,"te. The |psimrcc__follow_root| option may be used; to follow different roots of the effective Hamiltonian. A value of 1; instructs PSIMRCC to follow the solution with the lowest energy given; a certain set of determinants. ::. molecule o2 {; 0 3; O; O 1 2.265122720724; units au; }; set {; basis cc-pvtz; }; set mcscf {; reference rohf; docc [3,0,0,0,0,2,1,1] # Doubly occupied MOs; socc [0,0,1,1,0,0,0,0] # Singly occupied MOs; }; set psimrcc {; corr_wfn ccsd # Do Mk-MRCCSD ; frozen_docc [1,0,0,0,0,1,0,0] # Frozen MOs; restricted_docc [2,0,0,0,0,1,1,1] # Doubly occupied MOs; active [0,0,1,1,0,0,0,0] # Active MOs; frozen_uocc [0,0,0,0,0,0,0,0] # Frozen virtual MOs; corr_multp 1 # Select the Ms = 0 component; follow_root 1; wfn_sym B1g # Select the B1g state; }; energy('psimrcc'). Note that the oxygen molecule has 16 electrons (including core), while; the ``docc`` array contains only 7 doubly-occupied orbitals (or 14; electrons). Hence, two more electrons are available to place into; the active space (given by ``active``), which consists of 2 orbitals.; Thus there are two active electrons in two orbitals. In this particular; example, we are using standard ROHF orbitals for the Mk-MRCCSD procedure,; rather than TCSCF orbitals. Nevertheless, with the present code, ; these orbitals must be provided through the MCSCF module, as specified in the; ``set mcscf`` section above. Orbital ordering and selection of the model space; _________________________________________________. The reference determinants :math:`\Phi_\mu` are specified in PSIMRCC; via occupational numbers. PSIMRCC requires that four arrays be specified; for this purpose. - Frozen doubly occupied orbitals (|globals__frozen_docc|) are doubly; occupied in each reference determinant and are not correlated in the; MRCC procedure.; - Doubly occupied orbitals (|globals__restricted_docc|) are doubly; occupied in each reference determinant and are correlated in the MRCC; procedure.; - Active orbitals (|globals__active|) ar",MatchSource.DOCS,doc/sphinxman/source/psimrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psimrcc.rst
Deployability,configurat,configuration,"hosen eigenvalue of the effective Hamiltonian,; :math:`\textrm{H}^{eff}_{\mu \nu}`. .. math:: \sum_\nu \textrm{H}^{eff}_{\mu \nu} c_\nu =E c_\nu. where . .. math:: \textrm{H}^{eff}_{\mu \nu} = \left \langle \Phi_\mu \right | \hat{H}e^{\hat{T}^\nu} \left | \Phi_\nu \right \rangle \, \textrm{.}. |PSIfour| currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]_. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728]_. The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include ; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CASCI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the code will still run, but some relevant; determinants will be missing, and the answer obtained will be an approximation; to the true Mk-MRCC procedure. The PSIMRCC code itself does not perform orbital optimization. Hence, the; references used might be considered CASCI references, but not CASSCF; references (CASSCF implies that the orbitals have been optimized specifically; to minimize the energy of the CASCI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying |mcscf__reference| to be ``twocon``).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSI",MatchSource.DOCS,doc/sphinxman/source/psimrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psimrcc.rst
Energy Efficiency,power,powerful," with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: multireference; single: Mk-MRCC. .. _`sec:psimrcc`:. PSIMRCC Implementation of Mk-MRCC Theory; ========================================. .. codeauthor:: Francesco A. Evangelista and Andrew C. Simmonett ; .. sectionauthor:: Alexander E. Vaughn. *Module:* :ref:`Keywords <apdx:psimrcc>`, :ref:`PSI Variables <apdx:psimrcc_psivar>`, :source:`PSIMRCC <psi4/src/psi4/psimrcc>`. State-specific Multireference coupled cluster theories provide highly; accurate energies and properties of electronic states that require; a multiconfigurational zeroth-order wavefunction. The PSIMRCC; module contained in |PSIfour| implements the state-specific; multireference coupled-cluster approach of Mukherjee and co-workers; (Mk-MRCC). This method is implemented and shown to be a powerful tool in; [Evangelista:2006:154113]_ and [Evangelista:2008:124104]_. Mk-MRCC is; based on the Jeziorski-Monkhorst ansatz [Jeziorski:1981:1668]_ for the; wavefunction, :math:`\Psi`. .. math:: \left| \Psi \right \rangle = \sum_\mu^d e^{\hat{T}^\mu} \left| \Phi_\mu \right\rangle c_\mu \, \text{,}. where :math:`\Phi_\mu` are the reference determinants,; :math:`\hat{T}^\mu` are reference-specific excitation operators, and; :math:`c_\mu` are expansion coefficients obtained through diagonalization; of the Mk-MRCC effective Hamiltonian matrix that allows the various; reference determinants to interact. As an example of how this works; the Mk-MRCCSD excitation operators for each reference is contracted; two-body terms. .. math:: \hat{T}^\mu = \hat{T}^\mu_1 + \hat{T}^\mu_2. where. .. math:: \hat{T}^\mu_1 = \sum_i^{\textrm{occ}(\mu)} \sum_a^{\textrm{vir}(\mu)} t_i^a (\mu) \hat{a}^\dagger_a \hat{a}_i. and. .. math:: \hat{T}^\mu_2 =\frac{1}{4} \sum_i^{\textrm{occ}(\mu)} \sum_a^{\textrm{vir}(\mu)} t_{ij}^{",MatchSource.DOCS,doc/sphinxman/source/psimrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psimrcc.rst
Integrability,contract,contracted,"rovide highly; accurate energies and properties of electronic states that require; a multiconfigurational zeroth-order wavefunction. The PSIMRCC; module contained in |PSIfour| implements the state-specific; multireference coupled-cluster approach of Mukherjee and co-workers; (Mk-MRCC). This method is implemented and shown to be a powerful tool in; [Evangelista:2006:154113]_ and [Evangelista:2008:124104]_. Mk-MRCC is; based on the Jeziorski-Monkhorst ansatz [Jeziorski:1981:1668]_ for the; wavefunction, :math:`\Psi`. .. math:: \left| \Psi \right \rangle = \sum_\mu^d e^{\hat{T}^\mu} \left| \Phi_\mu \right\rangle c_\mu \, \text{,}. where :math:`\Phi_\mu` are the reference determinants,; :math:`\hat{T}^\mu` are reference-specific excitation operators, and; :math:`c_\mu` are expansion coefficients obtained through diagonalization; of the Mk-MRCC effective Hamiltonian matrix that allows the various; reference determinants to interact. As an example of how this works; the Mk-MRCCSD excitation operators for each reference is contracted; two-body terms. .. math:: \hat{T}^\mu = \hat{T}^\mu_1 + \hat{T}^\mu_2. where. .. math:: \hat{T}^\mu_1 = \sum_i^{\textrm{occ}(\mu)} \sum_a^{\textrm{vir}(\mu)} t_i^a (\mu) \hat{a}^\dagger_a \hat{a}_i. and. .. math:: \hat{T}^\mu_2 =\frac{1}{4} \sum_i^{\textrm{occ}(\mu)} \sum_a^{\textrm{vir}(\mu)} t_{ij}^{ab} (\mu) \hat{a}^\dagger_b \hat{a}_j \hat{a}^\dagger_a \hat{a}_i . The Mk-MRCC energy is a chosen eigenvalue of the effective Hamiltonian,; :math:`\textrm{H}^{eff}_{\mu \nu}`. .. math:: \sum_\nu \textrm{H}^{eff}_{\mu \nu} c_\nu =E c_\nu. where . .. math:: \textrm{H}^{eff}_{\mu \nu} = \left \langle \Phi_\mu \right | \hat{H}e^{\hat{T}^\nu} \left | \Phi_\nu \right \rangle \, \textrm{.}. |PSIfour| currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]_. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee f",MatchSource.DOCS,doc/sphinxman/source/psimrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psimrcc.rst
Modifiability,config,configuration,"hosen eigenvalue of the effective Hamiltonian,; :math:`\textrm{H}^{eff}_{\mu \nu}`. .. math:: \sum_\nu \textrm{H}^{eff}_{\mu \nu} c_\nu =E c_\nu. where . .. math:: \textrm{H}^{eff}_{\mu \nu} = \left \langle \Phi_\mu \right | \hat{H}e^{\hat{T}^\nu} \left | \Phi_\nu \right \rangle \, \textrm{.}. |PSIfour| currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]_. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728]_. The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include ; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CASCI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the code will still run, but some relevant; determinants will be missing, and the answer obtained will be an approximation; to the true Mk-MRCC procedure. The PSIMRCC code itself does not perform orbital optimization. Hence, the; references used might be considered CASCI references, but not CASSCF; references (CASSCF implies that the orbitals have been optimized specifically; to minimize the energy of the CASCI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying |mcscf__reference| to be ``twocon``).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSI",MatchSource.DOCS,doc/sphinxman/source/psimrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psimrcc.rst
Performance,perform,perform,"k-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]_. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728]_. The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include ; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CASCI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the code will still run, but some relevant; determinants will be missing, and the answer obtained will be an approximation; to the true Mk-MRCC procedure. The PSIMRCC code itself does not perform orbital optimization. Hence, the; references used might be considered CASCI references, but not CASSCF; references (CASSCF implies that the orbitals have been optimized specifically; to minimize the energy of the CASCI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying |mcscf__reference| to be ``twocon``).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSIMRCC's MCSCF module regardless of what; orbital type is chosen, ``twocon``, ``rhf``, or ``rohf``. An example of the; MCSCF input is given below. PSIMRCC is most commonly used for low-spin cases (singlets or open-shell; singlets). It is capable of performing computations on higher spin states; (*e.g.*, triplets), but in general",MatchSource.DOCS,doc/sphinxman/source/psimrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psimrcc.rst
Energy Efficiency,efficient,efficient,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:psithonFunc`:. =========================================; Psithon Functions: Invoking a Calculation; =========================================. To allow arbitrarily complex computations to be performed, |PSIfour| is built; upon the Python interpreter, with modifications termed Psithon. Sec. ; :ref:`sec:psithonInput` describes the non-standard Python associated with; clean molecule, basis, and option specification in the |PSIfour| input file.; This documentation addresses the pure Python side- what functions allow; the efficient compiled code to be run, what functions post-process and; interact with that output, and how the ordinary (or ambitious) user can; extent |PSIfours| functionality. .. toctree::; :maxdepth: 2. notes_py; energy; prop; nbody; opt; freq; db; cbs; diatomic; intercalls; sowreap; cubeprop. ",MatchSource.DOCS,doc/sphinxman/source/psithonfunc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonfunc.rst
Performance,perform,performed,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:psithonFunc`:. =========================================; Psithon Functions: Invoking a Calculation; =========================================. To allow arbitrarily complex computations to be performed, |PSIfour| is built; upon the Python interpreter, with modifications termed Psithon. Sec. ; :ref:`sec:psithonInput` describes the non-standard Python associated with; clean molecule, basis, and option specification in the |PSIfour| input file.; This documentation addresses the pure Python side- what functions allow; the efficient compiled code to be run, what functions post-process and; interact with that output, and how the ordinary (or ambitious) user can; extent |PSIfours| functionality. .. toctree::; :maxdepth: 2. notes_py; energy; prop; nbody; opt; freq; db; cbs; diatomic; intercalls; sowreap; cubeprop. ",MatchSource.DOCS,doc/sphinxman/source/psithonfunc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonfunc.rst
Availability,avail,available,"ng in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; |PSIfour| is distributed with an extensive test suite, described in section; :ref:`apdx:testSuite`; the input files for these test cases can be found in the; samples subdirectory of the top-level |PSIfour| source directory and should; serve as useful examples. .. index:: physical constants; .. _`sec:physicalConstants`:. Physical Constants; ==================. For convenience, the Python interpreter will execute the contents of the; |psirc| file in the current user's home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the |psirc| file ::. UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable ``UGC`` available in all |PSIfour| input files.; For convenience, the physical constants used within the |PSIfour| code (which; are obtained from `NIST CODATA 2014; <https://physics.nist.gov/cuu/Constants/archive2014.html>`_; are also automatically loaded as Psithon; variables (before |psirc| is loaded, so that the user's |psirc| values can; override the builtins (in the input file, not in the C++ code). The physical constants used within |PSIfour|, which are automatically; made available within all |PSIfour| input files are in :ref:`table:physconst`. .. .. literalinclude:: @SFNX_INCLUDE@psi4/driver/constants/physconst.py; .. :lines: 28-. In Psithon input files, prepend physical constants with ``psi_`` to; prevent clashes with user-defined variables (*e.g.*, ``psi_h``). In; PsiAPI mode, access as, *e.g.*, ``psi4.constants.h``. .. index:: memory; .. _`sec:memory`:. Memory Specification; ====================. By default, |PSIfour| assumes that 500 MiB of memory are available. While this is; enou",MatchSource.DOCS,doc/sphinxman/source/psithoninput.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst
Deployability,update,update,"n preprocessor; wraps strings in quotes by default, we have to tell it that ``basis_set`` is a; Python variable, not a string, by prefixing it with a dollar sign. . The geometry specification supports delayed initialization of variable,; which permits potential energy scans. As an example, we can scan both the; angle and bond length in water::. molecule h2o{; O; H 1 R; H 1 R 2 A; }; ; Rvals = [0.9, 1.0, 1.1]; Avals = range(102, 106, 2); ; set basis cc-pvdz; set scf e_convergence=11; for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('scf'). The declarations of ``Rvals`` and ``Avals`` are both completely standard Python syntax.; Having named our molecule ``h2o`` we can then set the values of ``R`` and ``A`` within; the loops. Note that we do not need the dollar sign to access the Python; variable in this example; that is required only when using Python variables; with the ``set`` keyword. Cartesian geometries, because of details of the geometry update process,; need to be specified within the loop(s) along with their basis set when; geometry scans are performed. See :srcsample:`scf4` for analogous Z-matrix; and Cartiesian scans. .. _`sec:resultsTables`:. Tables of Results; =================. The Psithon function ``psi4.driver.p4util.Table`` has been removed,; as the Python ecosystem provides many more flexible alternatives. An; example tabulating a potential energy surface scan for water with Pandas; is shown below::. molecule h2o {; O; H 1 R; H 1 R 2 A; }; ; Rvals=[0.9,1.0,1.1]; Avals=range(100,103,2); ; rows = []; table = []; ; set basis cc-pvdz; ; for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('mp2'); escf = variable('SCF TOTAL ENERGY'); edfmp2 = variable('MP2 TOTAL ENERGY'); escsmp2 = variable('SCS-MP2 TOTAL ENERGY'); rows.append((R, A)); table.append([escf, escsmp2, edfmp2]); ; import pandas as pd; df = pd.DataFrame(table, columns = [""E(SCF)"", ""E(SCS)"", ""E(DFMP2)""], index=rows); print(df). # E(SCF) E(SCS) E(DFMP2); # (0.9, 100) -76.020",MatchSource.DOCS,doc/sphinxman/source/psithoninput.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst
Energy Efficiency,energy,energy,"; basis = cc-pVDZ; }. Note the lack of quotes around ``cc-pVDZ``, even though it is a string. The; Psithon preprocessor automatically wraps any string values in ``set`` commands in; strings. The last three examples provide a more convenient way for specifying; multiple keywords::. set {; basis = cc-pVDZ; print = 1; reference = rhf; }. For arguments that require an array input, standard Python list syntax should; be used, *viz.*::. set {; docc = [3, 0, 1, 1]; }. List/matrix inputs may span multiple lines, as long as the opening ``[`` is; on the same line as the name of the keyword. Any of the above keyword specifications can be scoped to individual modules,; by adding the name of the module after the ``set`` keyword. Omitting the module; name, or using the name ``global`` or ``globals`` will result in the keyword being; applied to all modules. For example, in the following input ::. molecule{; o; h 1 roh; h 1 roh 2 ahoh; ; roh = 0.957; ahoh = 104.5; }; ; set basis cc-pVDZ; set ccenergy print 3; set scf print 1; energy('ccsd'). the basis set is set to cc-pVDZ throughout, the SCF code will have a print; level of 1 and the ccenergy code, which performs coupled cluster computations,; will use a print level of 3. In this example a full CCSD computation is; performed by running the SCF code first, then the coupled cluster modules;; the :py:func:`~psi4.driver.energy` Python helper function ensures that this is performed correctly.; Note that the Python interpreter executes commands in the order they appear in; the input file, so if the last four commands in the above example were to read ::. set basis cc-pVDZ; energy('ccsd'); set ccenergy print 3; set scf print 1. the commands that set the print level would be ineffective, as they would be; processed after the CCSD computation completes. In PsiAPI mode, one can use the command :py:func:`~psi4.driver.set_options`; like below for general and module-specific options. Note that these values; should be of correct type, strings fo",MatchSource.DOCS,doc/sphinxman/source/psithoninput.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst
Integrability,wrap,wraps,"f:`sec:usingEFPFragments`. To add EFP fragments to a molecule, see :ref:`sec:usingEFPFragments`. .. index::; triple: setting; keywords; general; .. _`sec:jobControl`:. Job Control Keywords; ====================. |PSIfour| comprises a number of C++ modules that each perform; specific tasks and are callable directly from the Python front end. Each module; recognizes specific keywords in the input file which control its function.; These keywords are detailed in Appendix :ref:`apdx:options_c_module`.; The keywords can be made global, or scoped to apply to; certain specific modules. The following examples demonstrate some of the ways; that global keywords can be specified::. # all equivalent. set globals basis cc-pVDZ. set basis cc-pVDZ. set globals basis = cc-pVDZ. set basis = cc-pVDZ. set globals{; basis cc-pVDZ; }; ; set {; basis cc-pVDZ; }; ; set {; basis = cc-pVDZ; }. Note the lack of quotes around ``cc-pVDZ``, even though it is a string. The; Psithon preprocessor automatically wraps any string values in ``set`` commands in; strings. The last three examples provide a more convenient way for specifying; multiple keywords::. set {; basis = cc-pVDZ; print = 1; reference = rhf; }. For arguments that require an array input, standard Python list syntax should; be used, *viz.*::. set {; docc = [3, 0, 1, 1]; }. List/matrix inputs may span multiple lines, as long as the opening ``[`` is; on the same line as the name of the keyword. Any of the above keyword specifications can be scoped to individual modules,; by adding the name of the module after the ``set`` keyword. Omitting the module; name, or using the name ``global`` or ``globals`` will result in the keyword being; applied to all modules. For example, in the following input ::. molecule{; o; h 1 roh; h 1 roh 2 ahoh; ; roh = 0.957; ahoh = 104.5; }; ; set basis cc-pVDZ; set ccenergy print 3; set scf print 1; energy('ccsd'). the basis set is set to cc-pVDZ throughout, the SCF code will have a print; level of 1 and the ccene",MatchSource.DOCS,doc/sphinxman/source/psithoninput.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst
Modifiability,variab,variables,"=========================. To allow arbitrarily complex computations to be performed, |PSIfour| was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; |PSIfour| is distributed with an extensive test suite, described in section; :ref:`apdx:testSuite`; the input files for these test cases can be found in the; samples subdirectory of the top-level |PSIfour| source directory and should; serve as useful examples. .. index:: physical constants; .. _`sec:physicalConstants`:. Physical Constants; ==================. For convenience, the Python interpreter will execute the contents of the; |psirc| file in the current user's home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the |psirc| file ::. UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable ``UGC`` available in all |PSIfour| input files.; For convenience, the physical constants used within the |PSIfour| code (which; are obtained from `NIST CODATA 2014; <https://physics.nist.gov/cuu/Constants/archive2014.html>`_; are also automatically loaded as Psithon; variables (before |psirc| is loaded, so that the user's |psirc| values can; override the builtins (in the input file, not in the C++ code). The physical constants used within |PSIfour|, which are automatically; made available within all |PSIfour| input files are in :ref:`table:physconst`. .. .. literalinclude:: @SFNX_INCLUDE@psi4/driver/constants/physconst.py; .. :lines: 28-. In Psithon input files, prepend physical constants with ``psi_`` to; prevent clashes with user-d",MatchSource.DOCS,doc/sphinxman/source/psithoninput.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst
Performance,perform,performed,"ing files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:psithonInput`:. ==================================; Psithon: Structuring an Input File; ==================================. To allow arbitrarily complex computations to be performed, |PSIfour| was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; |PSIfour| is distributed with an extensive test suite, described in section; :ref:`apdx:testSuite`; the input files for these test cases can be found in the; samples subdirectory of the top-level |PSIfour| source directory and should; serve as useful examples. .. index:: physical constants; .. _`sec:physicalConstants`:. Physical Constants; ==================. For convenience, the Python interpreter will execute the contents of the; |psirc| file in the current user's home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly mak",MatchSource.DOCS,doc/sphinxman/source/psithoninput.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst
Safety,sanity check,sanity check," In Psithon input files, prepend physical constants with ``psi_`` to; prevent clashes with user-defined variables (*e.g.*, ``psi_h``). In; PsiAPI mode, access as, *e.g.*, ``psi4.constants.h``. .. index:: memory; .. _`sec:memory`:. Memory Specification; ====================. By default, |PSIfour| assumes that 500 MiB of memory are available. While this is; enough for many computations, many of the algorithms will perform better if; more is available. To specify memory, the ``memory`` keyword should be used. The following; lines are all equivalent methods for specifying that 2 GB of RAM is available; to |PSIfour|::. # all equivalent. memory 2 GB; ; memory 2000 MB; ; memory 2000000 kB. Please note that memory can be specified both in IEC binary units (1 KiB = 1024 bytes) and SI units (1 kB = 1000 bytes). |PSIfour| recognizes and obeys both of them correctly. The units are not case sensitive (Kb and KB are equivalent to kB). By default, |PSIfour| performs a ""sanity check"" when parsing Psithon input files, enforcing a minimum memory requirement of 250 MiB. While it is generally not recomennded to do so, expert users can bypass this check by directly setting the number of bytes availble to |PSIfour|::. # setting available memory to 2 MB; set_memory_bytes(2000000). Please note that this memory setting only governs the maximal memory; usage of the major data structures, and actual total memory usage; is slightly higher. This is usually a negligible amount, except when; setting tiny memory allowances. One convenient way to override the |PSIfour| default memory is to place a; memory command in the |psirc| file (Sec. :ref:`sec:psirc`). For example,; the following makes the default memory 2 GB. ::. set_memory(2000000000). However, unless you're assured of having only one job running on a node at; a time (and all nodes on the filesystem with |psirc| have similar memory; capacities), it is advised to set memory in the input file on a; per-calculation basis. That same command can b",MatchSource.DOCS,doc/sphinxman/source/psithoninput.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst
Security,access,access,"xample, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the |psirc| file ::. UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable ``UGC`` available in all |PSIfour| input files.; For convenience, the physical constants used within the |PSIfour| code (which; are obtained from `NIST CODATA 2014; <https://physics.nist.gov/cuu/Constants/archive2014.html>`_; are also automatically loaded as Psithon; variables (before |psirc| is loaded, so that the user's |psirc| values can; override the builtins (in the input file, not in the C++ code). The physical constants used within |PSIfour|, which are automatically; made available within all |PSIfour| input files are in :ref:`table:physconst`. .. .. literalinclude:: @SFNX_INCLUDE@psi4/driver/constants/physconst.py; .. :lines: 28-. In Psithon input files, prepend physical constants with ``psi_`` to; prevent clashes with user-defined variables (*e.g.*, ``psi_h``). In; PsiAPI mode, access as, *e.g.*, ``psi4.constants.h``. .. index:: memory; .. _`sec:memory`:. Memory Specification; ====================. By default, |PSIfour| assumes that 500 MiB of memory are available. While this is; enough for many computations, many of the algorithms will perform better if; more is available. To specify memory, the ``memory`` keyword should be used. The following; lines are all equivalent methods for specifying that 2 GB of RAM is available; to |PSIfour|::. # all equivalent. memory 2 GB; ; memory 2000 MB; ; memory 2000000 kB. Please note that memory can be specified both in IEC binary units (1 KiB = 1024 bytes) and SI units (1 kB = 1000 bytes). |PSIfour| recognizes and obeys both of them correctly. The units are not case sensitive (Kb and KB are equivalent to kB). By default, |PSIfour| performs a ""sanity check"" when parsing Psithon input files, enforcing a minimum memory requirement of 250 MiB. While it is generally not recomennded to do so, expert users can bypass this check",MatchSource.DOCS,doc/sphinxman/source/psithoninput.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst
Testability,test,test," GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:psithonInput`:. ==================================; Psithon: Structuring an Input File; ==================================. To allow arbitrarily complex computations to be performed, |PSIfour| was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; |PSIfour| is distributed with an extensive test suite, described in section; :ref:`apdx:testSuite`; the input files for these test cases can be found in the; samples subdirectory of the top-level |PSIfour| source directory and should; serve as useful examples. .. index:: physical constants; .. _`sec:physicalConstants`:. Physical Constants; ==================. For convenience, the Python interpreter will execute the contents of the; |psirc| file in the current user's home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the |psirc| file ::. UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable ``UGC`` available in all |PSIfour| input files.; For convenience, the physical constants used within the |PSIfour| code (which; are obtained from `NIST CODATA 2014; <https://physics.nist.gov/cuu/Constants/archive2014.html>`_; are also automatically loaded as Psithon; variables (befor",MatchSource.DOCS,doc/sphinxman/source/psithoninput.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst
Usability,simpl,simpler,"the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:psithonInput`:. ==================================; Psithon: Structuring an Input File; ==================================. To allow arbitrarily complex computations to be performed, |PSIfour| was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; |PSIfour| is distributed with an extensive test suite, described in section; :ref:`apdx:testSuite`; the input files for these test cases can be found in the; samples subdirectory of the top-level |PSIfour| source directory and should; serve as useful examples. .. index:: physical constants; .. _`sec:physicalConstants`:. Physical Constants; ==================. For convenience, the Python interpreter will execute the contents of the; |psirc| file in the current user's home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the |psirc| file ::. UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which",MatchSource.DOCS,doc/sphinxman/source/psithoninput.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst
Availability,reliab,reliable,"0, 1, 0]. in the input file. If any ensuing computations lower the symmetry, the above; array will be appropriately remapped. For example, reducing the symmetry to; :math:`C_s` (with the molecular plane defining the mirror plane), the above; array will be automatically interpreted as::. SOCC = [0, 1]. Some caution is required, however. The :math:`^2A_1` state can be obtained with; the ::. SOCC = [1, 0, 0, 0]. specification, which would become ::. SOCC = [1, 0]. under the above-mentioned reduction in symmetry. The :math:`^2B_2` state,; whose singly-occupied orbitals are ::. SOCC = [0, 0, 0, 1]. would be mapped to ::. SOCC = [1, 0]. which is the same occupation as the :math:`^2A_1` state. In this case, the; :math:`^2A_1` state is lower in energy, and is not problematic. The distorted; geometries for the :math:`^2B_2` state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these states is; to use a multi-state method; in this case it's easier to run the entire; computation in the lowest symmetry needed during the finite difference; procedure. .. index:: molecule; multiple fragments; .. _`sec:fragments`:. Non-Covalently Bonded Molecule Fragments; ========================================. |PSIfour| has an extensive range of tools for treating non-covalent; intermolecular forces, including counterpoise corrections and symmetry adapted; perturbation theory methods. These require the definition of which fragments; are interacting within the complex. |PSIfour| provides a very simple mechanism; for doing so: simply define the complex's geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block::. molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.",MatchSource.DOCS,doc/sphinxman/source/psithonmol.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst
Deployability,patch,patch,"ot matter, although the ``molecule`` keyword itself must; be aligned within the input according to standard Python syntax. For more; examples of geometry specification, see the :srcsample:`mints1` input file in the samples; folder. It is also possible to mix Cartesian and Z-matrix geometry; specifications, as demonstrated in the :srcsample:`mints4` and; :srcsample:`mints6` sample input files. For example, consider the following; geometry specification, taken from the :srcsample:`mints6` input::. molecule alanine {; N -1.527107413251 0.745960643462 0.766603000356; C -0.075844098953 0.811790225041 0.711418672248; C 0.503195220163 -0.247849447550 -0.215671574613; O -0.351261319421 -0.748978309671 -1.089590304723; O 1.639498336738 -0.571249748886 -0.174705953194; H -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.717651915252 1.673774709694; # Now patch it, using a Z Matrix specification. This patch can be applied; # anywhere in the coord specification, as long as it appears lower than; # the atoms referenced, as is usual for Z-Matrices; C 2 rCC 3 aCCC 1 dCCCN; H 7 rCH1 2 aHCC1 3 dHCCC1; H 7 rCH2 2 aHCC2 3 dHCCC2; H 7 rCH3 2 aHCC3 3 dHCCC3; H 0.221781602033 1.772570540211 0.286988509018; H -1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808; ; aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which",MatchSource.DOCS,doc/sphinxman/source/psithonmol.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst
Energy Efficiency,charge,charge,"aHCC2 3 dHCCC2; H 7 rCH3 2 aHCC3 3 dHCCC3; H 0.221781602033 1.772570540211 0.286988509018; H -1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808; ; aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which is much easier to visualize than the corresponding Cartesian-only; approach. .. index:: molecule; multiple in input file; .. _`sec:multipleMolecules`:. .. index::; triple: setting; keywords; molecule; pair: molecule; charge; pair: molecule; multiplicity; pair: molecule; symmetry; pair: molecule; no_reorient; pair: molecule; units; .. _`sec:moleculeKeywords`:. Molecule Keywords; =================. In addition to specifying the geometry, additional information can be; provided in the molecule block :samp:`molecule {optional_molecule_name} \\{...\\}`. **Charge & Multiplicity**; If two integers :samp:`{charge} {multiplicity}` are encountered on any; line of the molecule block, they are interpreted as the molecular charge; and multiplicity (:math:`2 M_s + 1`), respectively. If not specified, the; charge is taken to be zero, and the multiplicity will be taken to be the; lowest multiplicity consistent with that charge. For multi-fragment ; complexes, each fragment can have a :samp:`{charge} {multiplicity}` line.; See :ref:`sec:fragments` for details. **Units**; By default, |Angstrom| units are used; this is changed by adding; a line that reads :samp:`units {spec}`, where :samp:`{spec}` is one; of ``ang``, ``angstrom``, ``a.u.``, ``",MatchSource.DOCS,doc/sphinxman/source/psithonmol.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst
Integrability,depend,depends," -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.717651915252 1.673774709694; # Now patch it, using a Z Matrix specification. This patch can be applied; # anywhere in the coord specification, as long as it appears lower than; # the atoms referenced, as is usual for Z-Matrices; C 2 rCC 3 aCCC 1 dCCCN; H 7 rCH1 2 aHCC1 3 dHCCC1; H 7 rCH2 2 aHCC2 3 dHCCC2; H 7 rCH3 2 aHCC3 3 dHCCC3; H 0.221781602033 1.772570540211 0.286988509018; H -1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808; ; aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which is much easier to visualize than the corresponding Cartesian-only; approach. .. index:: molecule; multiple in input file; .. _`sec:multipleMolecules`:. .. index::; triple: setting; keywords; molecule; pair: molecule; charge; pair: molecule; multiplicity; pair: molecule; symmetry; pair: molecule; no_reorient; pair: molecule; units; .. _`sec:moleculeKeywords`:. Molecule Keywords; =================. In addition to specifying the geometry, additional information can be; provided in the molecule block :samp:`molecule {optional_molecule_name} \\{...\\}`. **Charge & Multiplicity**; If two integers :samp:`{charge} {multiplicity}` are encountered on any; line of the molecule block, they are interpreted as the molecular charge; and multiplicity (:math:`2 M_s + 1`), resp",MatchSource.DOCS,doc/sphinxman/source/psithonmol.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst
Modifiability,flexible,flexible,"ibute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: molecule; specification; .. _`sec:moleculeSpecification`:. ===================================; Molecule and Geometry Specification; ===================================. Coordinates; ===========. |PSIfour| has a very flexible input parser that allows the user to provide; geometries as Cartesian coordinates, Z-matrix variables, or a combination of; both. The use of fixed values and variables are supported for both. For; example, the geometry for H\ :sub:`2` can be specified a number of ways, using the; :samp:`molecule {optional_molecule_name} \\{...\\}` block. ::. molecule {; H; H 1 0.9; }; ; or ::; ; molecule {; H; H 1 r; r = 0.9; }; ; or ::; ; molecule {; H1; H2 H1 0.9; }; ; or ::; ; molecule {; H 0.0 0.0 0.0; H 0.0 0.0 0.9; }; ; or ::; ; molecule {; H 0.0 0.0 0.0; H 0.0 0.0 r; r = 0.9; }; ; or ::; ; molecule {; H 0.0 0.0 -r; H 0.0 0.0 r; r = 0.45; }. Blank lines are ignored and, unlike regular Python syntax, indentation within; the molecule block does not matter, although the ``molecule`` keyword itself must; be aligned within the input according to standard Python syntax. For more; examples of geometry specification, see the :srcsample:`mints1` input file in the samples; folder. It is also possible to mix Cartesian and Z-matrix geometry; specifications",MatchSource.DOCS,doc/sphinxman/source/psithonmol.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst
Performance,perform,performed,":samp:`{symbol}` is the Sch\ |o_dots|\ nflies symbol; of the (Abelian) point group to use for the computation, one of one of; ``c1``, ``c2``, ``ci``, ``cs``, ``d2``, ``c2h``, ``c2v``, or ``d2h``.; This need not be specified, as the molecular symmetry is automatically; detected by |PSIfour|. See :ref:`sec:symmetry` for details. **Fragments**; A line reading ``--`` is interpreted as the separator between two non-covalently ; bound molecular fragments. See :ref:`sec:fragments` for details. Multiple Molecules; ==================. To facilitate more elaborate computations, it is possible to provide a name for; each molecule and tell |PSIfour| which one should be used in a given; calculation. For example, consider the following input file::. molecule h2 {; H; H 1 0.9; }; ; set basis cc-pvdz; set reference rhf; energy('scf') # on H2; ; clean(). molecule h {; H; }; ; set basis cc-pvdz; set reference uhf; energy('scf') # on H. Here, two separate jobs are performed on two different molecules; the first is; performed on H\ :sub:`2`, while the second is for H atom. The last molecule to be; specified is the ""active"" molecule by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input file can be; equivalently written as follows. Alternatively, the molecule can be specified; directly to the computing function. Below, the third calculation is the same as; the first. ::. molecule h2 {; H; H 1 0.9; }; ; molecule h {; H; }; ; activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2; ; clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. clean(). set reference rhf; energy('scf', molecule=h2) # on H2. :ref:`sec:jobControl` provides more details about the job control; and calculation keywords used in the above examples. .. index:: ; single: Ghost Atoms; single: molecule; ghost; .. _`sec:ghosts`:. Ghost Atom",MatchSource.DOCS,doc/sphinxman/source/psithonmol.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst
Safety,detect,detected," default, |Angstrom| units are used; this is changed by adding; a line that reads :samp:`units {spec}`, where :samp:`{spec}` is one; of ``ang``, ``angstrom``, ``a.u.``, ``au``, or ``bohr``. **Orientation**; Certain computations require that the molecule is not reoriented. This ; can be achieved by adding either ``no_reorient`` or ``noreorient``. ; To prevent even recentering of the molecule, add ``no_com`` or ``nocom``. **PubChem**; A line reading :samp:`pubchem:{mol}` fetches the geometry for molecule; :samp:`{mol}` from the PubChem database, where :samp:`{mol}` is either; the IUPAC molecule name or the CID number. See :ref:`sec:pubchem` for; details. **Symmetry**; The symmetry can be specified by a line reading :samp:`symmetry; {symbol}`, where :samp:`{symbol}` is the Sch\ |o_dots|\ nflies symbol; of the (Abelian) point group to use for the computation, one of one of; ``c1``, ``c2``, ``ci``, ``cs``, ``d2``, ``c2h``, ``c2v``, or ``d2h``.; This need not be specified, as the molecular symmetry is automatically; detected by |PSIfour|. See :ref:`sec:symmetry` for details. **Fragments**; A line reading ``--`` is interpreted as the separator between two non-covalently ; bound molecular fragments. See :ref:`sec:fragments` for details. Multiple Molecules; ==================. To facilitate more elaborate computations, it is possible to provide a name for; each molecule and tell |PSIfour| which one should be used in a given; calculation. For example, consider the following input file::. molecule h2 {; H; H 1 0.9; }; ; set basis cc-pvdz; set reference rhf; energy('scf') # on H2; ; clean(). molecule h {; H; }; ; set basis cc-pvdz; set reference uhf; energy('scf') # on H. Here, two separate jobs are performed on two different molecules; the first is; performed on H\ :sub:`2`, while the second is for H atom. The last molecule to be; specified is the ""active"" molecule by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input ",MatchSource.DOCS,doc/sphinxman/source/psithonmol.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst
Security,access,accessible,"_subsets(1)`` pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (``extract_subsets(1,2)`` pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. ``extract_subsets(2,[1,3])``::. mA = eneyne.extract_subsets(1); energy('scf'); ; clean(); ; mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; ``--`` marker, the :py:func:`~psi4.driver.wrapper_autofrag.auto_fragments` function can be applied, as shown in; :srcsample:`pywrap-basis`, to return as active molecule the previous; active molecule, only fragmented. Advanced Python; ===============. A named molecule in an input file is a full-fledged instance of the; powerful C++ :py:class:`~psi4.core.Molecule` class. Thus, all member; functions (that have been exported via pybind11) documented thereat; are accessible through the handle :samp:`{option_molecule_name}` in; :samp:`molecule {optional_molecule_name} \\{...\\}`. * The molecular geometry can be got and set and manipulated as a; :py:class:`~psi4.core.Matrix` object. Below shows how to access; coordinates in an input file in Python. ::. molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi",MatchSource.DOCS,doc/sphinxman/source/psithonmol.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst
Usability,simpl,simplified,"cule by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input file can be; equivalently written as follows. Alternatively, the molecule can be specified; directly to the computing function. Below, the third calculation is the same as; the first. ::. molecule h2 {; H; H 1 0.9; }; ; molecule h {; H; }; ; activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2; ; clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. clean(). set reference rhf; energy('scf', molecule=h2) # on H2. :ref:`sec:jobControl` provides more details about the job control; and calculation keywords used in the above examples. .. index:: ; single: Ghost Atoms; single: molecule; ghost; .. _`sec:ghosts`:. Ghost Atoms; ===========. While many common computations, particularly SAPT and counterpoise corrections, can; be greatly simplified using the notation described in :ref:`sec:fragments`,; manual specification of ghost atoms is sometimes required. Either ::. molecule he2 {; He; Gh(He) 1 2.0; }. or ::. molecule he2 {; He; @He 1 2.0; }. will generate a helium dimer with the second atom ghosted, *i.e.*, possessing; basis functions but no electrons or nuclear charge. See :srcsample:`dfmp2-1`; and :srcsample:`ghosts` for a demonstration of both mechanisms for specifying; ghost atoms. .. index:: ; single: Isotopes; single: molecule; isotope; .. _`sec:isotope`:. Isotopic Substitution; =====================. .. caution:: Use of isotopic substitution in |PSIfour| is not well; developed, and the syntax is subject to change. At present, isotopes can only be specified at creation-time of the molecule. The syntax for a deuterium- and tritium-substituted water is below. Note; that asymmetric isotopic substitution such as this *will* change the; molecule's point group symmetry. ::. molecule dto {; units au; O 0.00000000 0.00000000 0.0",MatchSource.DOCS,doc/sphinxman/source/psithonmol.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst
Availability,avail,available,"OUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; pair: method alias; adding new. .. _`sec:methodAlias`:. Defining a Method Alias; =======================. .. note:: No recompile of the |PSIfour| program is necessary for changes made to; files in ``$PSIDATADIR`` aka :source:`psi4/share/psi4`, including those described below. .. caution:: As of 1.0, the below, while essentially still correct, is so aged; as to be difficult to follow. Since quantum chemical methods in |PSIfour| are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; :source:`psi4/driver/aliases.py` file is intended for editing by the user for; this purpose. As an example, the MP2.5 method; (which admittedly is already built in to |PSIfour|); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy. ::. def run_mp2_5(name, **kwargs):; ; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); ; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; ; print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); ; return e_mp25. Compare the above to the method that resides ",MatchSource.DOCS,doc/sphinxman/source/quickaddalias.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickaddalias.rst
Energy Efficiency,energy,energy,"thodAlias`:. Defining a Method Alias; =======================. .. note:: No recompile of the |PSIfour| program is necessary for changes made to; files in ``$PSIDATADIR`` aka :source:`psi4/share/psi4`, including those described below. .. caution:: As of 1.0, the below, while essentially still correct, is so aged; as to be difficult to follow. Since quantum chemical methods in |PSIfour| are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; :source:`psi4/driver/aliases.py` file is intended for editing by the user for; this purpose. As an example, the MP2.5 method; (which admittedly is already built in to |PSIfour|); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy. ::. def run_mp2_5(name, **kwargs):; ; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); ; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; ; print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); ; return e_mp25. Compare the above to the method that resides in :source:`psi4/driver/aliases.py`.; The rationale for the changes is indicated in the comments below. ::. def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names; ; # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_m",MatchSource.DOCS,doc/sphinxman/source/quickaddalias.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickaddalias.rst
Modifiability,variab,variables,"OUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; pair: method alias; adding new. .. _`sec:methodAlias`:. Defining a Method Alias; =======================. .. note:: No recompile of the |PSIfour| program is necessary for changes made to; files in ``$PSIDATADIR`` aka :source:`psi4/share/psi4`, including those described below. .. caution:: As of 1.0, the below, while essentially still correct, is so aged; as to be difficult to follow. Since quantum chemical methods in |PSIfour| are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; :source:`psi4/driver/aliases.py` file is intended for editing by the user for; this purpose. As an example, the MP2.5 method; (which admittedly is already built in to |PSIfour|); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy. ::. def run_mp2_5(name, **kwargs):; ; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); ; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; ; print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); ; return e_mp25. Compare the above to the method that resides ",MatchSource.DOCS,doc/sphinxman/source/quickaddalias.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickaddalias.rst
Performance,optimiz,optimizer,"/driver/aliases.py`.; The rationale for the changes is indicated in the comments below. ::. def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names; ; # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3; ; # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations ; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners; ; tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file; ; return e_mp25 . One final step is necessary. At the end of the ``aliases.py`` file, add ; the following line. ::. procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly define",MatchSource.DOCS,doc/sphinxman/source/quickaddalias.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickaddalias.rst
Security,access,accessed,"OUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; pair: method alias; adding new. .. _`sec:methodAlias`:. Defining a Method Alias; =======================. .. note:: No recompile of the |PSIfour| program is necessary for changes made to; files in ``$PSIDATADIR`` aka :source:`psi4/share/psi4`, including those described below. .. caution:: As of 1.0, the below, while essentially still correct, is so aged; as to be difficult to follow. Since quantum chemical methods in |PSIfour| are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; :source:`psi4/driver/aliases.py` file is intended for editing by the user for; this purpose. As an example, the MP2.5 method; (which admittedly is already built in to |PSIfour|); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy. ::. def run_mp2_5(name, **kwargs):; ; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); ; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; ; print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); ; return e_mp25. Compare the above to the method that resides ",MatchSource.DOCS,doc/sphinxman/source/quickaddalias.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickaddalias.rst
Availability,avail,available,"le molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. * Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won't allow them. If you're determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an example. - The first line for each xyz file should be the number of atoms in the system. - The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything",MatchSource.DOCS,doc/sphinxman/source/quickadddatabase.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickadddatabase.rst
Energy Efficiency,energy,energy,"tion, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; pair: database(); adding new. .. _`sec:createDatabase`:. Creating a Database; ===================. .. note:: No recompile of the PSI program is necessary for changes made to; files in ``$PSIDATADIR``, including those described below. A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for r",MatchSource.DOCS,doc/sphinxman/source/quickadddatabase.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickadddatabase.rst
Integrability,rout,route," of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won't allow them. If you're determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an example. - The first line for each xyz file should be the number of atoms in the system. - The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment). - The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what's the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. * Run script :source:`psi4/share/psi4/scripts/ixyz2database.py`. Move into the directory where all your xyz files are located. Run the; script. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. * Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into :source:`psi4/share/psi4/databases`.; Alternately, append the directory containing your new database into; :envvar:`PSIPATH`. ",MatchSource.DOCS,doc/sphinxman/source/quickadddatabase.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickadddatabase.rst
Modifiability,variab,variable," of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won't allow them. If you're determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an example. - The first line for each xyz file should be the number of atoms in the system. - The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment). - The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what's the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. * Run script :source:`psi4/share/psi4/scripts/ixyz2database.py`. Move into the directory where all your xyz files are located. Run the; script. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. * Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into :source:`psi4/share/psi4/databases`.; Alternately, append the directory containing your new database into; :envvar:`PSIPATH`. ",MatchSource.DOCS,doc/sphinxman/source/quickadddatabase.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickadddatabase.rst
Usability,simpl,simply,"PSI program is necessary for changes made to; files in ``$PSIDATADIR``, including those described below. A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. * Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won't allow them. If you're determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an exa",MatchSource.DOCS,doc/sphinxman/source/quickadddatabase.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickadddatabase.rst
Energy Efficiency,energy,energy," Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; relativistic. .. _`sec:relativistic`:. Scalar relativistic Hamiltonians; ================================. .. codeauthor:: Prakash Verma and Francesco A. Evangelista; .. sectionauthor:: Prakash Verma, Wallace D. Derricotte, and Francesco A. Evangelista. The exact-two-component (X2C) approach is a convenient way to introduce scalar; relativistic effects in DFT and wave function-based methods.; |PSIfour| implements the spin-free one-electron version of X2C, which produces; a modified one-electron Hamiltonian :math:`H_{\rm X2C}`:. .. math:: H_{\rm X2C} = T_{\rm X2C} + V_{\rm X2C}. that is a sum of a kinetic energy (:math:`T_{\rm X2C}`) and potential energy; (:math:`V_{\rm X2C}`) operator.; Our implementation is equivalent to the one reported by Cheng and Gauss [Cheng:084114]_.; X2C calculations require the use of special (alternatively fully uncontracted) basis sets designed for relativistic; calculations. Common choices include the Dunning Douglass--Kroll basis sets; (cc-pVXZ-DK, cc-pCVXZ-DK, cc-pwCVXZ-DK) and Roos' ANO basis sets. .. note:: See also :ref:`sec:DKH` for another relativistic Hamiltonian. .. _`sec:ScalarRelativistic`:. A First Example; ^^^^^^^^^^^^^^^. The following is a simple input that will perform a Hartree--Fock calculation; using the X2C Hamiltonian. ::. molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'). This computation yields the following result::. @RHF Final Energy: -100.10007984692388. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.7611816259664579; Two-Electron Energy = 45.4843682167491039; Total E",MatchSource.DOCS,doc/sphinxman/source/relativistic.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/relativistic.rst
Integrability,depend,depends," balanced basis [Kutzelnigg:1984]_ treatment. ; In the X2C treatment, the positive-energy block of the Hamiltonian ( :math:`h^{FW}_{\rm ++}` ); is given by the sum; of a transformed kinetic (:math:`T_{\rm X2C}`) and potential energy ( :math:`V_{\rm X2C}` ) contribution.; Relativistic kinetic energy ( :math:`T_{\rm X2C}` ) and nuclear-electron interaction potential ( :math:`V_{\rm X2C}` ) is given in terms of non-relativisitc kinetic (:math:`T=\hat{p}^2/2`) energy and nuclear-electron interaction potential (:math:`V`), coupling matrix ( :math:`X`) and renormalization matrix ( :math:`R`). . .. math::; T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R . .. math::; V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R. The coupling matrix ( :math:`{X} = C^{S} (C^{L})^{-1}` ) is obtained from the large (:math:`C^{\rm L}`) and small (:math:`C^{\rm S}`) components of the :math:`N` positive energy solutions of the Dirac equation.; The renormalization matrix ; :math:`{R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}`,; depends on the modified overlap matrix; :math:`\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX`. The integrals :math:`W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle` can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic effects; treated with the X2C method by replacing nonrelativistic kinetic and potential energy with the corresponding; X2C operators :math:`T_{X2C}` and :math:`V_{X2C}`. It is important to note that fully uncontracted basis in needed for the construction of X2C Hamiltonian as Foldy-Wouthuysen (FW [FW:1950]_) transformation is obtained in kinetically balance basis. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__relativistic.rst; .. include:: autodir_options_c/globals__basis_relativistic.rst. ",MatchSource.DOCS,doc/sphinxman/source/relativistic.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/relativistic.rst
Modifiability,coupling,coupling,"he use ; of X2C should cite the following publication: [Verma:2015]_. Theory; ^^^^^^. X2C is based on exact decoupling of ; positive-energy ( :math:`h^{FW}_{\rm ++}`; ) and negative-energy (:math:`h^{FW}_{\rm --}` ); blocks of the Dirac Hamiltonian (:math:`h^{D}`). . .. math:: ; U^\dagger h^{\rm D} U = ; U^\dagger; \begin{pmatrix}; h_{LL} & h_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}. The transformation ( :math:`U` ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984]_ treatment. ; In the X2C treatment, the positive-energy block of the Hamiltonian ( :math:`h^{FW}_{\rm ++}` ); is given by the sum; of a transformed kinetic (:math:`T_{\rm X2C}`) and potential energy ( :math:`V_{\rm X2C}` ) contribution.; Relativistic kinetic energy ( :math:`T_{\rm X2C}` ) and nuclear-electron interaction potential ( :math:`V_{\rm X2C}` ) is given in terms of non-relativisitc kinetic (:math:`T=\hat{p}^2/2`) energy and nuclear-electron interaction potential (:math:`V`), coupling matrix ( :math:`X`) and renormalization matrix ( :math:`R`). . .. math::; T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R . .. math::; V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R. The coupling matrix ( :math:`{X} = C^{S} (C^{L})^{-1}` ) is obtained from the large (:math:`C^{\rm L}`) and small (:math:`C^{\rm S}`) components of the :math:`N` positive energy solutions of the Dirac equation.; The renormalization matrix ; :math:`{R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}`,; depends on the modified overlap matrix; :math:`\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX`. The integrals :math:`W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle` can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic str",MatchSource.DOCS,doc/sphinxman/source/relativistic.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/relativistic.rst
Performance,perform,perform,"co A. Evangelista. The exact-two-component (X2C) approach is a convenient way to introduce scalar; relativistic effects in DFT and wave function-based methods.; |PSIfour| implements the spin-free one-electron version of X2C, which produces; a modified one-electron Hamiltonian :math:`H_{\rm X2C}`:. .. math:: H_{\rm X2C} = T_{\rm X2C} + V_{\rm X2C}. that is a sum of a kinetic energy (:math:`T_{\rm X2C}`) and potential energy; (:math:`V_{\rm X2C}`) operator.; Our implementation is equivalent to the one reported by Cheng and Gauss [Cheng:084114]_.; X2C calculations require the use of special (alternatively fully uncontracted) basis sets designed for relativistic; calculations. Common choices include the Dunning Douglass--Kroll basis sets; (cc-pVXZ-DK, cc-pCVXZ-DK, cc-pwCVXZ-DK) and Roos' ANO basis sets. .. note:: See also :ref:`sec:DKH` for another relativistic Hamiltonian. .. _`sec:ScalarRelativistic`:. A First Example; ^^^^^^^^^^^^^^^. The following is a simple input that will perform a Hartree--Fock calculation; using the X2C Hamiltonian. ::. molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'). This computation yields the following result::. @RHF Final Energy: -100.10007984692388. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.7611816259664579; Two-Electron Energy = 45.4843682167491039; Total Energy = -100.1000798469238902. while a non-relativistic calculation yields the following energy::. @RHF Final Energy: -100.01928891411315. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6645256529074572; Two-Electron Energy = 45.4685031765008461; Total Energy = -100.0192889141131474. Basis sets options; ^^^^^^^^^^^^^^^^^^. The X2C module in |PSIfour| supports different combinations of basis set.; By default, if the input file specifies only |mints__basis|, then the X2C; module will solve the modified Dirac equation in an uncontracted basis and t",MatchSource.DOCS,doc/sphinxman/source/relativistic.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/relativistic.rst
Usability,simpl,simple,"co A. Evangelista. The exact-two-component (X2C) approach is a convenient way to introduce scalar; relativistic effects in DFT and wave function-based methods.; |PSIfour| implements the spin-free one-electron version of X2C, which produces; a modified one-electron Hamiltonian :math:`H_{\rm X2C}`:. .. math:: H_{\rm X2C} = T_{\rm X2C} + V_{\rm X2C}. that is a sum of a kinetic energy (:math:`T_{\rm X2C}`) and potential energy; (:math:`V_{\rm X2C}`) operator.; Our implementation is equivalent to the one reported by Cheng and Gauss [Cheng:084114]_.; X2C calculations require the use of special (alternatively fully uncontracted) basis sets designed for relativistic; calculations. Common choices include the Dunning Douglass--Kroll basis sets; (cc-pVXZ-DK, cc-pCVXZ-DK, cc-pwCVXZ-DK) and Roos' ANO basis sets. .. note:: See also :ref:`sec:DKH` for another relativistic Hamiltonian. .. _`sec:ScalarRelativistic`:. A First Example; ^^^^^^^^^^^^^^^. The following is a simple input that will perform a Hartree--Fock calculation; using the X2C Hamiltonian. ::. molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'). This computation yields the following result::. @RHF Final Energy: -100.10007984692388. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.7611816259664579; Two-Electron Energy = 45.4843682167491039; Total Energy = -100.1000798469238902. while a non-relativistic calculation yields the following energy::. @RHF Final Energy: -100.01928891411315. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6645256529074572; Two-Electron Energy = 45.4685031765008461; Total Energy = -100.0192889141131474. Basis sets options; ^^^^^^^^^^^^^^^^^^. The X2C module in |PSIfour| supports different combinations of basis set.; By default, if the input file specifies only |mints__basis|, then the X2C; module will solve the modified Dirac equation in an uncontracted basis and t",MatchSource.DOCS,doc/sphinxman/source/relativistic.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/relativistic.rst
Availability,avail,available,"physically meaningful components: *i.e.*,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the ; Hamiltonian of the dimer is partitioned into contributions from each ; monomer and the interaction. .. math:: H=F_A+W_A+F_B+W_B+V. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, :math:`F`, the fluctuation potential of each monomer, :math:`W`, and the; interaction potential, :math:`V`. The monomer Fock operators, :math:`F_A+F_B`, are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of :math:`V`, :math:`W_A`, and :math:`W_B`. ; Through first-order in :math:`V`, electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in :math:`V`. For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887]_. Several truncations of the closed-shell SAPT expansion are available in the SAPT; module of |PSIfour|. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. :eq:`SAPT0`. .. math:: E_{SAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)} + \delta_{HF}^{(2)}; :label: SAPT0. In this notation, :math:`E^{(vw)}` defines the order in :math:`V` and in :math:`W_A+W_B`; the; subscript, :math:`resp`, indicates that orbital relaxation effects are included. .. math:: E_{SAPT2} = E_{SAPT0} + E_{elst,resp}^{(12)} + E_{exch}^{(11)} +; E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)} + \; ^{t}\!E_{exch-ind}^{(22)}; :label: SAPT2. .. math:: E_{SAPT2+} = E_{SAPT2} + E_{disp}^{(21)} + E_{disp}^{(22)}; :label: SAPT2p. .. math:: E_{SAPT2+(3)} = E_{SAPT2+} + E_{elst,resp}^{(13)} + E_{disp}^{(30)}; :label: SAPT2pparen3. .. math:: E_{SAPT2+3} = E_{SAPT2+(3)}; + E_{exch-ind}^{(30)} + E_{ind,resp}^{(30)}; + E_{exch-disp}^{(30)} + E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}",MatchSource.DOCS,doc/sphinxman/source/sapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst
Deployability,integrat,integration," scaling the uncoupled term for; :math:`E_{exch-ind,resp}^{(30)}`. S^inf Keywords; ~~~~~~~~~~~~~~. .. include:: autodir_options_c/sapt__do_ind_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_disp_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_ind30_exch_sinf.rst. .. _`sec:saptd`:. SAPT0-D; ~~~~~~~. In SAPT0, the computation of :math:`E_{disp}^{(20)} + E_{exch-disp}^{(20)}` represents; the computational bottleneck. One can avoid this bottleneck by replacing these; dispersion terms with the empirical D3 corrections developed by Grimme.; ; :ref:`Grimme's dispersion corrections are discussed here. <sec:dftd3>`. The corresponding method, termed SAPT0-D, thus relies on empirically fit parameters; specific to SAPT0/jun-cc-pVDZ. While SAPT0-D can be used with any of the -D ; variants using default parameters optimized for Hartee--Fock interaction energies, ; we recommend using the refit parameters with Becke-Johnson damping, as described in; [Schriber:2021:234107]_. Again, use of SAPT0-D with a basis set other than; jun-cc-pVDZ is not tested and not guaranteed to give meaningful results without; refitting the dispersion parameters. ; A simple water dimer computation using SAPT0-D may look like::. 	molecule water_dimer {; 	 0 1; 	 O -1.551007 -0.114520 0.000000; 	 H -1.934259 0.762503 0.000000; 	 H -0.599677 0.040712 0.000000; 	 --; 	 0 1; 	 O 1.350625 0.111469 0.000000; 	 H 1.680398 -0.373741 -0.758561; 	 H 1.680398 -0.373741 0.758561; 	; 	 units angstrom; 	 no_reorient; 	 symmetry c1; 	}; 	; 	set basis jun-cc-pvdz. 	energy('sapt0-d3mbj') # runs the recommended dispersion correction; energy('sapt0-d3') # tests an alternative damping scheme/parameterization. Given the naturally pairwise-atomic nature of these empirical dispersion corrections,; integration with existing FSAPT functionality is also available simply by calling; ``energy(""fsapt0-d3mbj"")``. See :ref:`FSAPT <sec:fisapt>` documentation for more details on using FSAPT; for functional group analyses.; ",MatchSource.DOCS,doc/sphinxman/source/sapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst
Energy Efficiency,energy,energy,"ectionauthor:: Edward G. Hohenstein and J\ |e_acute|\ r\ |o_circumflex|\ me F. Gonthier. *Module:* :ref:`Keywords <apdx:sapt>`, :ref:`PSI Variables <apdx:sapt_psivar>`, :source:`LIBSAPT_SOLVER <psi4/src/psi4/libsapt_solver>`. .. warning:: In rare cases with systems having a high degree of symmetry, ; |Psifour| gives (very obviously) wrong answers for SAPT computations ; when the specification is in Z-matrix format. Use a Cartesian representation ; to avoid this problem. .. caution:: In early versions (notably |Psifour| alpha circa 2011; and before), frozen core was implemented incompletely and for; only selected terms. Comparisons with papers published using early; |PSIfour| SAPT code may show discrepancies of 0.01-0.10 kcal/mol in; individual terms, particularly :math:`E_{exch}^{(11)}` and :math:`E_{exch}^{(12)}`. .. caution:: January 28th 2016, the default for all NAT_ORBS options; was changed to true. Hence the code now by default uses natural; orbital truncation to speed up the evaluation of energy terms; wherever possible, according to literature recommendations.; In early July 2016, some total SAPT energy psivars were renamed. .. caution:: February 7, 2020, a missing term in :math:`E^{(30)}_{ind}` was added, causing; possible discrepancies with prior versions of the code on the order of; 0.01 kcal/mol. See https://github.com/psi4/psi4/issues/1677. .. caution:: August 2021, the number of frozen core orbitals used in the dMP2 computations; is now standardized. Specifically, we now rigorously enforce that the number of core orbitals ; frozen in dimer computations is equal to the sum of frozen orbitals of each monomer. Prior to; this, a discrepency between these values was possible when one of the monomers was (exclusively) ; a charged alkali metal. . .. _`sec:saptfitA`:. .. caution:: May 2022 c. v1.6, the default for |sapt__df_basis_elst|; changed from the value of |sapt__df_basis_sapt| (which itself; defaults to the RI of the orbital basis) to the JKFIT of the or",MatchSource.DOCS,doc/sphinxman/source/sapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst
Integrability,depend,dependent," :math:`V` and in :math:`W_A+W_B`; the; subscript, :math:`resp`, indicates that orbital relaxation effects are included. .. math:: E_{SAPT2} = E_{SAPT0} + E_{elst,resp}^{(12)} + E_{exch}^{(11)} +; E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)} + \; ^{t}\!E_{exch-ind}^{(22)}; :label: SAPT2. .. math:: E_{SAPT2+} = E_{SAPT2} + E_{disp}^{(21)} + E_{disp}^{(22)}; :label: SAPT2p. .. math:: E_{SAPT2+(3)} = E_{SAPT2+} + E_{elst,resp}^{(13)} + E_{disp}^{(30)}; :label: SAPT2pparen3. .. math:: E_{SAPT2+3} = E_{SAPT2+(3)}; + E_{exch-ind}^{(30)} + E_{ind,resp}^{(30)}; + E_{exch-disp}^{(30)} + E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}; - \delta_{HF}^{(2)} + \delta_{HF}^{(3)}; :label: SAPT2p3. For SAPT(DFT), the SAPT expansion is truncated at the same level of SAPT0, but the zeroth-order Hamiltonian is chosen to be :math:`K_A+K_B`, the monomer Kohn-Sham operators, instead of the Fock operators. The dispersion term needs to be computed with orbital relaxation for the result to be reasonable, and this is possible by computing dispersion energy through coupled frequency-dependent density susceptibility (FDDS). The exchange-dispersion term is estimated by scaling the uncoupled exchange-dispersion energy. . .. math:: E_{SAPT(DFT)} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; E_{exch-ind,resp}^{(20)} + E_{disp,resp}^{(20)} + E_{exch-disp,resp}^{(20)}(est.) + \delta_{HF}^{(2)}; :label: SAPTDFT; .. math:: E_{disp,resp}^{(20)} = -\frac{1}{2\pi}\int_0^\infty d\omega \int d\mathbf{r}_A d\mathbf{r}'_A d\mathbf{r}_B d\mathbf{r}'_B \frac{1}{\left|\mathbf{r}_A-\mathbf{r}_B\right|}\frac{1}{\left|\mathbf{r}'_A-\mathbf{r}'_B\right|}\chi^A_{coup}\left(\mathbf{r}_A,\mathbf{r}'_A|i\omega\right)\chi^B_{coup}\left(\mathbf{r}_B,\mathbf{r}'_B|i\omega\right). .. math:: \chi_{coup}\left(\mathbf{r},\mathbf{r}'|\omega\right) = \chi_0\left(\mathbf{r},\mathbf{r}'|\omega\right) + \int d\omega d\mathbf{r}_1 d\mathbf{r}_2 \chi_0\left(\mathbf{r},\mathbf{r}_1|\omega\right)\left[\frac{1}{r_{12}} + f_{x",MatchSource.DOCS,doc/sphinxman/source/sapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst
Modifiability,adapt,adapted,"apt0"")`` that; can also compute higher-order SAPT). Electostatics, exchange,; and induction terms for SAPT0 and sSAPT0 accessed through; ``energy(""sapt0"")`` or ``energy(""ssapt0"")`` change; the dispersion; term does not change. The SAPT0 and sSAPT0 terms accessed as; subsidiary calculations of higher-order SAPT do not change; that is,; the :ref:`SAPT module<sec:sapt>` breaks the consistency of its SAPT0; results. The reasoning and reward behind this change is that the JKFIT; basis better describes the physics (see :ref:`fitting changes <sec:saptfitB>` ) and the; default SAPT0 results from the :ref:`SAPT module<sec:sapt>` are now; consistent with those from the :ref:`FISAPT module<sec:fisapt>` and; the sapt(dft) module. See :srcsample:`sapt-compare` for an example.; To reproduce former behavior, set |sapt__df_basis_elst| to the; orbital basis set's RI auxiliary basis. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: *i.e.*,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the ; Hamiltonian of the dimer is partitioned into contributions from each ; monomer and the interaction. .. math:: H=F_A+W_A+F_B+W_B+V. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, :math:`F`, the fluctuation potential of each monomer, :math:`W`, and the; interaction potential, :math:`V`. The monomer Fock operators, :math:`F_A+F_B`, are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of :math:`V`, :math:`W_A`, and :math:`W_B`. ; Through first-order in :math:`V`, electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in :math:`V`. ",MatchSource.DOCS,doc/sphinxman/source/sapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst
Performance,perform,performance,"onally, high-order coupling between induction and dispersion can be ; extracted from the supermolecular MP2 interaction energy:. .. math:: \delta_{MP2}^{(2)} = E_{int}^{MP2, corr} - (E_{elst}^{(12)} +; E_{exch}^{(11)} + E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)}; + \; ^{t}\!E_{exch-ind}^{(22)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)}). .. math:: \delta_{MP2}^{(3)} = \delta_{MP2}^{(2)} - (E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}). where :math:`E_{int}^{MP2, corr}` is the correlation part of the supermolecular MP2 ; interaction energy. :math:`\delta_{MP2}^{(2)}` and :math:`\delta_{MP2}^{(3)}` also improve the ; description of electrostatically dominated complexes. :math:`\delta_{MP2}^{(2)}`; can be applied to SAPT2+ or SAPT2+(3) energies whereas :math:`\delta_{MP2}^{(3)}` ; should be applied to SAPT2+3 energies. A thorough analysis of the performance of these truncations of closed-shell SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs]_,; and a systematic study of the accuracy of these truncations (with and ; without an improved CCD treatment of dispersion) using different basis sets; is reported in [Parker:2014:094106]_. The closed-shell SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in |PSIfour|, assumes the use of density-fitted; two-electron integrals, therefore, the closed-shell SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligible errors into the SAPT energy ; (often less than 0.01 kcal/mol for small dimers) and greatly; improves efficiency. . The latest addition to the SAPT code is the SAPT0 method for open-shell ; monomers [Gonthier:2016:134106]_. This code is available for both exact and density fitted integrals, ; except for the dispersion terms which implementation relies on a density fitting; factorization. Both ``UHF`` and",MatchSource.DOCS,doc/sphinxman/source/sapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst
Safety,avoid,avoid,"eceived a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: SAPT; pair: SAPT; theory. .. _`sec:sapt`:. SAPT: Symmetry-Adapted Perturbation Theory; ==========================================. .. codeauthor:: Edward G. Hohenstein, Rob M. Parrish, J\ |e_acute|\ r\ |o_circumflex|\ me F. Gonthier, and Daniel. G. A. Smith; .. sectionauthor:: Edward G. Hohenstein and J\ |e_acute|\ r\ |o_circumflex|\ me F. Gonthier. *Module:* :ref:`Keywords <apdx:sapt>`, :ref:`PSI Variables <apdx:sapt_psivar>`, :source:`LIBSAPT_SOLVER <psi4/src/psi4/libsapt_solver>`. .. warning:: In rare cases with systems having a high degree of symmetry, ; |Psifour| gives (very obviously) wrong answers for SAPT computations ; when the specification is in Z-matrix format. Use a Cartesian representation ; to avoid this problem. .. caution:: In early versions (notably |Psifour| alpha circa 2011; and before), frozen core was implemented incompletely and for; only selected terms. Comparisons with papers published using early; |PSIfour| SAPT code may show discrepancies of 0.01-0.10 kcal/mol in; individual terms, particularly :math:`E_{exch}^{(11)}` and :math:`E_{exch}^{(12)}`. .. caution:: January 28th 2016, the default for all NAT_ORBS options; was changed to true. Hence the code now by default uses natural; orbital truncation to speed up the evaluation of energy terms; wherever possible, according to literature recommendations.; In early July 2016, some total SAPT energy psivars were renamed. .. caution:: February 7, 2020, a missing term in :math:`E^{(30)}_{ind}` was added, causing; possible discrepancies with prior versions of the code on the order of; 0.01 kcal/mol. See https://github.com/psi4/psi4/issues/1677. .. caution:: August 2021, the number of frozen core orbitals used in t",MatchSource.DOCS,doc/sphinxman/source/sapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst
Security,access,accessed,"s with prior versions of the code on the order of; 0.01 kcal/mol. See https://github.com/psi4/psi4/issues/1677. .. caution:: August 2021, the number of frozen core orbitals used in the dMP2 computations; is now standardized. Specifically, we now rigorously enforce that the number of core orbitals ; frozen in dimer computations is equal to the sum of frozen orbitals of each monomer. Prior to; this, a discrepency between these values was possible when one of the monomers was (exclusively) ; a charged alkali metal. . .. _`sec:saptfitA`:. .. caution:: May 2022 c. v1.6, the default for |sapt__df_basis_elst|; changed from the value of |sapt__df_basis_sapt| (which itself; defaults to the RI of the orbital basis) to the JKFIT of the orbital; basis. This affects SAPT0 and sSAPT0 computed with the :ref:`SAPT; module<sec:sapt>` (the default code for ``energy(""sapt0"")`` that; can also compute higher-order SAPT). Electostatics, exchange,; and induction terms for SAPT0 and sSAPT0 accessed through; ``energy(""sapt0"")`` or ``energy(""ssapt0"")`` change; the dispersion; term does not change. The SAPT0 and sSAPT0 terms accessed as; subsidiary calculations of higher-order SAPT do not change; that is,; the :ref:`SAPT module<sec:sapt>` breaks the consistency of its SAPT0; results. The reasoning and reward behind this change is that the JKFIT; basis better describes the physics (see :ref:`fitting changes <sec:saptfitB>` ) and the; default SAPT0 results from the :ref:`SAPT module<sec:sapt>` are now; consistent with those from the :ref:`FISAPT module<sec:fisapt>` and; the sapt(dft) module. See :srcsample:`sapt-compare` for an example.; To reproduce former behavior, set |sapt__df_basis_elst| to the; orbital basis set's RI auxiliary basis. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAP",MatchSource.DOCS,doc/sphinxman/source/sapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst
Testability,test,tested," scaling the uncoupled term for; :math:`E_{exch-ind,resp}^{(30)}`. S^inf Keywords; ~~~~~~~~~~~~~~. .. include:: autodir_options_c/sapt__do_ind_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_disp_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_ind30_exch_sinf.rst. .. _`sec:saptd`:. SAPT0-D; ~~~~~~~. In SAPT0, the computation of :math:`E_{disp}^{(20)} + E_{exch-disp}^{(20)}` represents; the computational bottleneck. One can avoid this bottleneck by replacing these; dispersion terms with the empirical D3 corrections developed by Grimme.; ; :ref:`Grimme's dispersion corrections are discussed here. <sec:dftd3>`. The corresponding method, termed SAPT0-D, thus relies on empirically fit parameters; specific to SAPT0/jun-cc-pVDZ. While SAPT0-D can be used with any of the -D ; variants using default parameters optimized for Hartee--Fock interaction energies, ; we recommend using the refit parameters with Becke-Johnson damping, as described in; [Schriber:2021:234107]_. Again, use of SAPT0-D with a basis set other than; jun-cc-pVDZ is not tested and not guaranteed to give meaningful results without; refitting the dispersion parameters. ; A simple water dimer computation using SAPT0-D may look like::. 	molecule water_dimer {; 	 0 1; 	 O -1.551007 -0.114520 0.000000; 	 H -1.934259 0.762503 0.000000; 	 H -0.599677 0.040712 0.000000; 	 --; 	 0 1; 	 O 1.350625 0.111469 0.000000; 	 H 1.680398 -0.373741 -0.758561; 	 H 1.680398 -0.373741 0.758561; 	; 	 units angstrom; 	 no_reorient; 	 symmetry c1; 	}; 	; 	set basis jun-cc-pvdz. 	energy('sapt0-d3mbj') # runs the recommended dispersion correction; energy('sapt0-d3') # tests an alternative damping scheme/parameterization. Given the naturally pairwise-atomic nature of these empirical dispersion corrections,; integration with existing FSAPT functionality is also available simply by calling; ``energy(""fsapt0-d3mbj"")``. See :ref:`FSAPT <sec:fisapt>` documentation for more details on using FSAPT; for functional group analyses.; ",MatchSource.DOCS,doc/sphinxman/source/sapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst
Usability,simpl,simplest,"persion terms. In SAPT, the ; Hamiltonian of the dimer is partitioned into contributions from each ; monomer and the interaction. .. math:: H=F_A+W_A+F_B+W_B+V. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, :math:`F`, the fluctuation potential of each monomer, :math:`W`, and the; interaction potential, :math:`V`. The monomer Fock operators, :math:`F_A+F_B`, are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of :math:`V`, :math:`W_A`, and :math:`W_B`. ; Through first-order in :math:`V`, electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in :math:`V`. For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887]_. Several truncations of the closed-shell SAPT expansion are available in the SAPT; module of |PSIfour|. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. :eq:`SAPT0`. .. math:: E_{SAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)} + \delta_{HF}^{(2)}; :label: SAPT0. In this notation, :math:`E^{(vw)}` defines the order in :math:`V` and in :math:`W_A+W_B`; the; subscript, :math:`resp`, indicates that orbital relaxation effects are included. .. math:: E_{SAPT2} = E_{SAPT0} + E_{elst,resp}^{(12)} + E_{exch}^{(11)} +; E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)} + \; ^{t}\!E_{exch-ind}^{(22)}; :label: SAPT2. .. math:: E_{SAPT2+} = E_{SAPT2} + E_{disp}^{(21)} + E_{disp}^{(22)}; :label: SAPT2p. .. math:: E_{SAPT2+(3)} = E_{SAPT2+} + E_{elst,resp}^{(13)} + E_{disp}^{(30)}; :label: SAPT2pparen3. .. math:: E_{SAPT2+3} = E_{SAPT2+(3)}; + E_{exch-ind}^{(30)} + E_{ind,resp}^{(30)}; + E_{exch-disp}^{(30)} + E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}; - \delta_{HF}^{(2)} + \delta_{HF}^{(3)}; :label: SAPT2p3. For SAPT(DFT), the SAPT ex",MatchSource.DOCS,doc/sphinxman/source/sapt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst
Availability,avail,available,"converged.; ... @UHF iter 9: -149.62730705472407 -3.63645e-04 8.63697e-05 DIIS; @UHF iter 10: -149.62730737348096 -3.18757e-07 1.50223e-05 DIIS; @UHF iter 11: -149.62730738537113 -1.18902e-08 3.80466e-06 DIIS; @UHF iter 12: -149.62730738624032 -8.69193e-10 7.06634e-07 DIIS. The first set of iterations are from the DF portion of the computation, the; second set uses the exact (but much slower) Direct algorithm. Within the DF portion; of the computation, the zeroth-iteration uses a non-idempotent density matrix; obtained from the SAD guess, so the energy is unphysically low. However, the; first true iteration is quite close to the final DF energy, highlighting the; efficiency of the SAD guess. Pulay's DIIS procedure is then used to accelerate; SCF convergence, with the DF phase reaching convergence in eight true; iterations. When used together, SAD and DIIS are usually sufficient to converge; the SCF for all but the most difficult systems. Additional convergence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested Direct integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals. After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; |globals__print| option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. .. index::; pair: SCF; theory. .. _`sec:scftheory`:. Theory; ~~~~~~. The objective of Hartree--Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) :math:`\{\psi_i\}`,. .. math:: \psi_i(\vec x_1) = C_{\mu i} \phi_{\mu} (\vec x_1). Here, :math:`\{\phi_{\mu}\}",MatchSource.DOCS,doc/sphinxman/source/scf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst
Deployability,update,updated," (*e.g.*, in density fitting), a partial; Cholesky factorization of the density matrices is used. Often extremely; accurate, particularly for closed-shell systems. This is the default for; systems of more than one atom.; SADNO; Natural orbitals from Superposition of Atomic Densities. Similar; to the above, but it forms natural orbitals from the SAD density; matrix to get proper orbitals which are used to start the; calculation, see [Lehtola:2019:1593]_.; GWH; A generalized Wolfsberg-Helmholtz modification of the core; Hamiltonian matrix. Usually less accurate than the core guess: the; latter is exact for one-electron systems, GWH is not; see; [Lehtola:2019:1593]_).; HUCKEL; An extended H\ |u_dots|\ ckel guess based on on-the-fly atomic UHF; calculations alike SAD, see [Lehtola:2019:1593]_.; MODHUCKEL; Like HUCKEL, an extended H\ |u_dots|\ ckel guess based on; on-the-fly atomic UHF calculations alike SAD, see; [Lehtola:2019:1593]_. This variant employs an updated rule for the; generalized Wolfsberg-Helmholz formula from [Ammeter:1978:3686]_.; READ; Read the previous orbitals from a ``wfn`` file, casting from; one basis to another if needed. Useful for starting anion; computations from neutral orbitals, or after small geometry; changes. At present, casting from a different molecular point; group is not supported. This becomes the default for the second; and later iterations of geometry optimizations.; SAP; Superposition of Atomic Potentials. This is essentially a; modification of the core Hamiltonian, which includes screening; effects by using a radially screened effective atomic charge. The; screening effects have been calculated at the complete basis set; limit with finite-element calculations, see [Lehtola:2019:25945]_; and [Lehtola:2020:012516]_. The guess and its implementation have; been described in [Lehtola:2019:1593]_. The guess is evaluated on a; DFT quadrature grid, so the guess energy depends slightly on the; used DFT quadrature. The current implementation",MatchSource.DOCS,doc/sphinxman/source/scf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst
Energy Efficiency,efficient,efficient,"# @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: SCF, HF, Hartree--Fock; .. _`sec:scf`:. HF: Hartree--Fock Theory; ========================. .. codeauthor:: Justin M. Turney, Robert M. Parrish, and Andrew C. Simmonett; .. sectionauthor:: Robert M. Parrish and Jerome F. Gonthier. *Module:* :ref:`Keywords <apdx:scf>`, :ref:`PSI Variables <apdx:scf_psivar>`, :source:`LIBSCF_SOLVER <psi4/src/psi4/libscf_solver>`, :source:`LIBMINTS <psi4/src/psi4/libmints>`, :source:`LIBFOCK <psi4/src/psi4/libfock>`, :source:`LIBDIIS <psi4/src/psi4/libdiis>`. .. _`sec:scfintro`:. Introduction; ~~~~~~~~~~~~. Self-Consistent-Field (SCF) theory forms the cornerstone of *ab initio* quantum; chemistry. Here SCF refers both to conventional Hartree--Fock (HF) molecular; orbital theory and also to generalized Kohn--Sham Density Functional Theory; (KS-DFT). |PSIfour| contains a wholly rewritten SCF code, including many of the; most popular spin specializations, several efficient numerical methods for; treating Fock Matrix construction, and a brand new KS-DFT code featuring many of; the most popular DFT functional technologies. An illustrative example of using the SCF module is as follows::. molecule {; 0 3; O; O 1 1.21; }. set {; basis cc-pvdz; guess sad; reference uhf; scf_type direct; }. energy('scf'). This will run a UHF computation for triplet molecular oxygen (the ground state); using a Direct algorithm for the Electron Repulsion Integrals (ERI) and starting; from a Superposition of Atomic Densities (SAD) guess. DF integrals are; automatically used to converge the DF-SCF solution before the Direct algorithm is; activated. After printing all manner of titles, geometries, sizings, and; algorithm choices, the SCF finally reaches the iterations::. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 0: -149.80032977420572 -1.49800e+02 1.48808e-01; @DF-UHF iter 1: -149.59496320631871 2.05367e-01 2.58009e-02; @DF-UHF iter 2: -149.62349901753706 -2.85358e-02 6.68980e-03 DIIS; @DF-",MatchSource.DOCS,doc/sphinxman/source/scf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst
Integrability,contract,contracted,"this point, the code switches on the requested Direct integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals. After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; |globals__print| option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. .. index::; pair: SCF; theory. .. _`sec:scftheory`:. Theory; ~~~~~~. The objective of Hartree--Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) :math:`\{\psi_i\}`,. .. math:: \psi_i(\vec x_1) = C_{\mu i} \phi_{\mu} (\vec x_1). Here, :math:`\{\phi_{\mu}\}` are the basis functions, which, in |PSIfour| are; contracted Cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix :math:`C_{\mu i}` contains the MO coefficients, which are the; constrained variational parameters in Hartree--Fock. The molecular orbitals are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. .. math:: | \Psi_0 \rangle =; \frac{1}{\sqrt{N!}} \left | \begin{array}{cccc}; \psi_1 (\vec x_1) & \psi_2(\vec x_1) & \ldots & \psi_N (\vec x_1) \\; \psi_1 (\vec x_2) & \psi_2(\vec x_2) & \ldots & \psi_N (\vec x_2) \\; \vdots & \vdots & \ddots & \vdots \\; \psi_1 (\vec x_N) & \psi_2(\vec x_N) & \ldots & \psi_N (\vec x_N) \\; \end{array}\right |. This form for the Hartree--Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; :math:`\mathbb{R}^6` instead of a more complicated effect in; :math:`\mathbb{R}^N`\ . Considering the electronic Hamiltonian,. .. math:: \hat H = \sum_{i} -\frac{1}{2} \nabla",MatchSource.DOCS,doc/sphinxman/source/scf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst
Modifiability,enhance,enhanced,"ogonalization; ~~~~~~~~~~~~~~~~~. One of the first steps in the SCF procedure is the determination of an; orthogonal basis (known as the OSO basis) from the atomic orbital; basis (known as the AO basis). The Molecular Orbital basis (MO basis); is then built as a particular unitary transformation of the OSO; basis. In |PSIfour|, the determination of the OSO basis is; accomplished via either symmetric, canonical, or partial Cholesky; orthogonalization. Symmetric orthogonalization uses the symmetric inverse square root of; the overlap matrix for the orthogonalization matrix. Use of symmetric; orthogonalization always yields the same number of OSO functions (and; thereby MOs) as AO functions. However, this may lead to numerical; problems if the overlap matrix has small eigenvalues, which may occur; for large systems or for systems where diffuse basis sets are used. This problem may be avoided by using canonical orthogonalization, in; which an asymmetric inverse square root of the overlap matrix is; formed, with numerical stability enhanced by the elimination of; eigenvectors corresponding to very small eigenvalues. As a few; combinations of AO basis functions may be discarded, the number of; canonical-orthogonalized OSOs and MOs may be slightly smaller than the; number of AOs. When the basis set is too overcomplete, the eigendecomposition of the; overlap matrix is no longer numerically stable. In this case the; partial Cholesky decomposition can be used to pick a subset of basis; functions that span a sufficiently complete set, see; [Lehtola:2019:241102]_ and [Lehtola:2020:032504]_. This subset can then; be orthonormalized as usual; the rest of the basis functions are; hidden from the calculation. The Cholesky approach allows reaching; accurate energies even in the presence of significant linear; dependencies [Lehtola:2020:134108]_. In |PSIfour|, symmetric orthogonalization is used by default, unless; the smallest overlap eigenvalue falls below the user-supplied double; ",MatchSource.DOCS,doc/sphinxman/source/scf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst
Performance,perform,performed,"m. Within the DF portion; of the computation, the zeroth-iteration uses a non-idempotent density matrix; obtained from the SAD guess, so the energy is unphysically low. However, the; first true iteration is quite close to the final DF energy, highlighting the; efficiency of the SAD guess. Pulay's DIIS procedure is then used to accelerate; SCF convergence, with the DF phase reaching convergence in eight true; iterations. When used together, SAD and DIIS are usually sufficient to converge; the SCF for all but the most difficult systems. Additional convergence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested Direct integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals. After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; |globals__print| option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. .. index::; pair: SCF; theory. .. _`sec:scftheory`:. Theory; ~~~~~~. The objective of Hartree--Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) :math:`\{\psi_i\}`,. .. math:: \psi_i(\vec x_1) = C_{\mu i} \phi_{\mu} (\vec x_1). Here, :math:`\{\phi_{\mu}\}` are the basis functions, which, in |PSIfour| are; contracted Cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix :math:`C_{\mu i}` contains the MO coefficients, which are the; constrained variational parameters in Hartree--Fock. The molecular orbitals are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. .. math:: | \Psi_0 \rang",MatchSource.DOCS,doc/sphinxman/source/scf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst
Safety,avoid,avoid,"formation on any of these options, see the relevant section below. .. _`sec:scfsymm`:. Spin/Symmetry Treatment; ~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| implements the most popular spin specializations of Hartree--Fock; theory, including:. Restricted Hartree--Fock (RHF) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Hartree--Fock (UHF); Appropriate for most open-shell systems and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fully independent of each; other, which allows a considerable amount of flexibility in the wavefunction.; However, this flexibility comes at the cost of spin symmetry; UHF wavefunctions; need not be eigenfunctions of the :math:`\hat S^2` operator. The deviation of; this operator from its expectation value is printed on the output file. If the; deviation is greater than a few hundredths, it is advisable to switch to a; ROHF to avoid this ""spin-contamination"" problem.; Restricted Open-Shell Hartree--Fock (ROHF); Appropriate for open-shell systems where spin-contamination is problem.; Sometimes more difficult to converge, and assumes uniformly positive spin; polarization (the alpha and beta doubly-occupied orbitals are identical).; Constrained Unrestricted Hartree--Fock (CUHF); A variant of ROHF that starts from a UHF ansatz and is therefore often; easier to converge. These can be invoked by the |scf__reference| keyword, which defaults to ``RHF``.; The charge and multiplicity may either be specified in the molecule definition::. molecule h {; 0 2 # Neutral doublet; H; }. or, dynamically, by setting the relevant attributes in the Python molecule; object::. h.set_molecular_charge(0); h.set_multiplicity(2). Abelian spatial symmetry is fully supported in |PSIfour| and can be used to; obtain physical interpretation of the molecular orbitals, to assist in difficult; convergence cases, and, ",MatchSource.DOCS,doc/sphinxman/source/scf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst
Security,access,accessed,"scf__cholesky_tolerance|.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. |PSIfour| also features the capability to use ""composite"" Fock matrix build; algorithms - arbitrary combinations of specialized algorithms that construct; either the Coulomb or the Exchange matrix separately. In general, since; separate Coulomb and Exchange matrix build algorithms exploit properties specific to; their respective matrix, composite algorithms display lower; scaling factors than their combined Fock build counterparts. However, composite algorithms also; introduce redundant ERI computations into the calculation. Therefore, composite Fock build; algorithms tend to perform better for larger systems, but worse for smaller systems. Arbitrary; composite algorithms can be accessed by setting |globals__scf_type| to ``J_alg+K_alg``,; where *J_alg* and *K_alg* are the names of the separate Coulomb; and Exchange construction algorithms to use, respectively. Alternatively, if one is using; DFT with non-hybrid functionals, a composite Coulomb construction algorithm can be; specified solo by setting |globals__scf_type| to ``J_alg``, without the need to set ; an associated ``K_alg``. Specialized algorithms available to construct the Coulomb term within a composite framework ; are as follows:. DFDIRJ; An integral-direct algorithm constructing the Coulomb term based on [Weigend:2002:4285]_; The DFDIRJ algorithm combines the benefits of integral-direct SCF approaches ; with that of density-fitting. Specifically, DFJ utilizes no I/O and displays ; strong performance with large system size through a combination of ; effective parallelization and utilization of density-fitting to minimize ; ERI computational cost. See the :ref:`sec:scfddfj` section for more information. Specialized algorithms available to construct the Exchange term with",MatchSource.DOCS,doc/sphinxman/source/scf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst
Testability,test,tested,"tion related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See :srcsample:`scf-ecp` and :srcsample:`dfmp2-ecp`; for examples of computations with ECP-containing basis sets. .. warning:: Prior to May 2022, v1.6, Psi4 used a built-in ECP code. Analytic derivatives of ECPs were not available. The HF and DFT derivatives were implemented in a semi-numerical scheme, where numerical ECP gradients were added to analytic SCF gradients. For post-SCF methods, the entire gradient computation needed to be run as finite difference of energies. .. warning:: As of May 2022, v1.6, Psi4 uses the LibECPInt library, and analytic derivatives and Hessians of ECPs are available. Analytic derivatives of molecular systems including ECPs should be available whenever the method has analytic derivatives, but these have so far only been verified for HF and DFT. .. warning:: ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the `forum <http://forum.psicode.org>`_. .. _`sec:scfqmmm`:. External potentials and QM/MM; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In addition to the implementation of :ref:`EFP <sec:libefp>` for accurate QM/MM; computations, |PSIfour| can perform more rudimentary QM/MM procedures via the; |scf__extern| keyword. The following snippet, extracted from the; :srcsample:`extern1` test case, demonstrates its use for a TIP3P external potential::. import numpy as np; external_potentials = [; [-0.834, np.array([1.649232019048,0.0,-2.356023604706]) / psi_bohr2angstroms],; [ 0.417, np.array([0.544757019107,0.0,-3.799961446760]) / psi_bohr2angstroms],; [ 0.417, np.array([0.544757019107,0.0,-0.912085762652]) / psi_bohr2angstroms]]. gradient('scf', external_potentials=external_potentials). The ``external_potentials`` array has three rows for three separate; particles, and it is",MatchSource.DOCS,doc/sphinxman/source/scf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst
Usability,simpl,simplest,"als. After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; |globals__print| option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. .. index::; pair: SCF; theory. .. _`sec:scftheory`:. Theory; ~~~~~~. The objective of Hartree--Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) :math:`\{\psi_i\}`,. .. math:: \psi_i(\vec x_1) = C_{\mu i} \phi_{\mu} (\vec x_1). Here, :math:`\{\phi_{\mu}\}` are the basis functions, which, in |PSIfour| are; contracted Cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix :math:`C_{\mu i}` contains the MO coefficients, which are the; constrained variational parameters in Hartree--Fock. The molecular orbitals are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. .. math:: | \Psi_0 \rangle =; \frac{1}{\sqrt{N!}} \left | \begin{array}{cccc}; \psi_1 (\vec x_1) & \psi_2(\vec x_1) & \ldots & \psi_N (\vec x_1) \\; \psi_1 (\vec x_2) & \psi_2(\vec x_2) & \ldots & \psi_N (\vec x_2) \\; \vdots & \vdots & \ddots & \vdots \\; \psi_1 (\vec x_N) & \psi_2(\vec x_N) & \ldots & \psi_N (\vec x_N) \\; \end{array}\right |. This form for the Hartree--Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; :math:`\mathbb{R}^6` instead of a more complicated effect in; :math:`\mathbb{R}^N`\ . Considering the electronic Hamiltonian,. .. math:: \hat H = \sum_{i} -\frac{1}{2} \nabla_i^2 + \sum_{i} \sum_{A} -; \frac{Z_A}{r_{iA}} + \sum_{i>j} \frac{1}{r_{ij}},. the Hartree--Fock energy is, by Slater's rules,. .. math:: E_{\mathrm{HF}} =; \langle \Psi_0 | \hat H | \Psi_0 \rangle; = \sum_{i} \langle i | \hat h | i \rangle; + \frac 1 2 \sum_{i,j} [ii|jj",MatchSource.DOCS,doc/sphinxman/source/scf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst
Availability,avail,available,"fp_solver>`. .. image:: https://img.shields.io/badge/home-simint-5077AB.svg; :target: http://www.bennyp.org/research/simint/. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www.bennyp.org/research/simint/. These are the vectorized implementation of the Obara-Saika (OS) method of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding ``set; integral_package simint`` (do this in ``~/.psi4rc`` for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is ``$$(gg|gg)$$``. .. warning:: simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/simint/badges/version.svg; :target: https://anaconda.org/psi4/simint. * SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * The conda package is compiled to least-common-denominator, namely SSE instruction set. * If using the |PSIfour| binary, simint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; simint can be obtained through ``conda install simint -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_simint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect simint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. simint from conda without thinking, consult. * To remove a conda installation, ``conda remove simint``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/simint.svg?maxAge=2592000. .. :target: https://github.com/psi4/simint TODO BPP. * If using |PSIfour| built from source and you want simint built from; ",MatchSource.DOCS,doc/sphinxman/source/simint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/simint.rst
Deployability,install,installed,"o/badge/docs-latest-5077AB.svg; :target: http://www.bennyp.org/research/simint/. These are the vectorized implementation of the Obara-Saika (OS) method of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding ``set; integral_package simint`` (do this in ``~/.psi4rc`` for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is ``$$(gg|gg)$$``. .. warning:: simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/simint/badges/version.svg; :target: https://anaconda.org/psi4/simint. * SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * The conda package is compiled to least-common-denominator, namely SSE instruction set. * If using the |PSIfour| binary, simint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; simint can be obtained through ``conda install simint -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_simint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect simint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. simint from conda without thinking, consult. * To remove a conda installation, ``conda remove simint``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/simint.svg?maxAge=2592000. .. :target: https://github.com/psi4/simint TODO BPP. * If using |PSIfour| built from source and you want simint built from; from source also,; enable it as a feature with :makevar:`ENABLE_simint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:simint`:. How to conf",MatchSource.DOCS,doc/sphinxman/source/simint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/simint.rst
Integrability,interface,interfaced,"hould have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: SIMINT, integrals. .. _`sec:simint`:. Interface to SIMINT by B. Pritchard; ===================================. .. codeauthor:: Benjamin P. Pritchard; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-simint-5077AB.svg; :target: http://www.bennyp.org/research/simint/. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www.bennyp.org/research/simint/. These are the vectorized implementation of the Obara-Saika (OS) method of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding ``set; integral_package simint`` (do this in ``~/.psi4rc`` for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is ``$$(gg|gg)$$``. .. warning:: simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/simint/badges/version.svg; :target: https://anaconda.org/psi4/simint. * SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * The conda package is compiled to least-common-denominator, namely SSE instruction set. * If using the |PSIfour| binary, simint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; simint can be obtained through ``conda install simint -c ",MatchSource.DOCS,doc/sphinxman/source/simint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/simint.rst
Modifiability,config,configure,"ongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; simint can be obtained through ``conda install simint -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_simint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect simint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. simint from conda without thinking, consult. * To remove a conda installation, ``conda remove simint``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/simint.svg?maxAge=2592000. .. :target: https://github.com/psi4/simint TODO BPP. * If using |PSIfour| built from source and you want simint built from; from source also,; enable it as a feature with :makevar:`ENABLE_simint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:simint`:. How to configure simint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, simint is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) simint. * Upstream Dependencies |w---w| simint |dr| None. **CMake Variables**. * :makevar:`ENABLE_simint` |w---w| CMake variable toggling whether |PSIfour| builds with simint; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing ``include/simint/simint.h``; * :makevar:`simint_DIR` |w---w| CMake variable to specify where pre-built simint can be found. Set to installation directory containing ``share/cmake/simint/simintConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_simint` |w---w| CMake variable to force internal build of simint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_simint` |w---w| CMake variable to force detecting pre-b",MatchSource.DOCS,doc/sphinxman/source/simint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/simint.rst
Safety,detect,detect,"psi4rc`` for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is ``$$(gg|gg)$$``. .. warning:: simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/simint/badges/version.svg; :target: https://anaconda.org/psi4/simint. * SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * The conda package is compiled to least-common-denominator, namely SSE instruction set. * If using the |PSIfour| binary, simint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; simint can be obtained through ``conda install simint -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_simint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect simint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. simint from conda without thinking, consult. * To remove a conda installation, ``conda remove simint``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/simint.svg?maxAge=2592000. .. :target: https://github.com/psi4/simint TODO BPP. * If using |PSIfour| built from source and you want simint built from; from source also,; enable it as a feature with :makevar:`ENABLE_simint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:simint`:. How to configure simint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, simint is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) simint. * Upstream Dependencies |w---w| simint |dr| None. **CMake Variables**. * :m",MatchSource.DOCS,doc/sphinxman/source/simint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/simint.rst
Availability,avail,available,"e Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:sowreap`:. Embarrassing Parallelism; ========================. Many of the tasks automated by Python wrappers consist of a number of; independent |PSIfour| calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. - Prepare an input file, simply adding ``mode='sow'`` to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations. - According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation. - The 'sow' stage also produces a *master* input file (with a; ``mode='reap'`` directive). When all the jobs in the above step are; completed, place their output files in the same location as the; *master* input, and run this last, quick job to collect the results. - Sow/reap procedures are governed by the **mode** keyword, choices being; ``'continuous'``, ``'sow'``, and ``'reap'``. Only ``'sow'`` is likely to; be used by the user, as ``'continuous'`` is always the default, and; input files with ``'reap'`` are autogenerated. - Embarrassingly parallel algorithm available at present for:. - :ref:`sec:db()` ; - finite difference operation of :ref:`sec",MatchSource.DOCS,doc/sphinxman/source/sowreap.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sowreap.rst
Deployability,continuous,continuous,"treet, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:sowreap`:. Embarrassing Parallelism; ========================. Many of the tasks automated by Python wrappers consist of a number of; independent |PSIfour| calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. - Prepare an input file, simply adding ``mode='sow'`` to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations. - According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation. - The 'sow' stage also produces a *master* input file (with a; ``mode='reap'`` directive). When all the jobs in the above step are; completed, place their output files in the same location as the; *master* input, and run this last, quick job to collect the results. - Sow/reap procedures are governed by the **mode** keyword, choices being; ``'continuous'``, ``'sow'``, and ``'reap'``. Only ``'sow'`` is likely to; be used by the user, as ``'continuous'`` is always the default, and; input files with ``'reap'`` are autogenerated. - Embarrassingly parallel algorithm available at present for:. - :ref:`sec:db()` ; - finite difference operation of :ref:`sec:opt()` ; - finite difference of energies of :ref:`sec:freq()`; - finite difference of gradients of :ref:`sec:freq()`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Local options (*e.g.*, ``set scf e_convergence 9``) will not get transmitted to the child jobs. - Array options (*e.g.*, ``set states_per_irrep [2, 1]``) will not get transmitted to the child jobs. - Function intercalls (*e.g.*, db(opt())) are not tested with sow/reap procedures. ",MatchSource.DOCS,doc/sphinxman/source/sowreap.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sowreap.rst
Integrability,wrap,wrappers,"ded in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:sowreap`:. Embarrassing Parallelism; ========================. Many of the tasks automated by Python wrappers consist of a number of; independent |PSIfour| calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. - Prepare an input file, simply adding ``mode='sow'`` to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations. - According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation. - The 'sow' stage also produces a *master* input file (with a; ``mode='reap'`` directive). When all the jobs in the above step are; completed, place their output files in the same location as the; *master* input, and run this last, quick job to collect the results. - Sow/reap procedures are governed by the **mode** keyword, choices being; ``'continuous'``, ``'sow'``, and ``'reap'``. Only ``'sow'`` is likely to; ",MatchSource.DOCS,doc/sphinxman/source/sowreap.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sowreap.rst
Testability,test,tested,"treet, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:sowreap`:. Embarrassing Parallelism; ========================. Many of the tasks automated by Python wrappers consist of a number of; independent |PSIfour| calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. - Prepare an input file, simply adding ``mode='sow'`` to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations. - According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation. - The 'sow' stage also produces a *master* input file (with a; ``mode='reap'`` directive). When all the jobs in the above step are; completed, place their output files in the same location as the; *master* input, and run this last, quick job to collect the results. - Sow/reap procedures are governed by the **mode** keyword, choices being; ``'continuous'``, ``'sow'``, and ``'reap'``. Only ``'sow'`` is likely to; be used by the user, as ``'continuous'`` is always the default, and; input files with ``'reap'`` are autogenerated. - Embarrassingly parallel algorithm available at present for:. - :ref:`sec:db()` ; - finite difference operation of :ref:`sec:opt()` ; - finite difference of energies of :ref:`sec:freq()`; - finite difference of gradients of :ref:`sec:freq()`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Local options (*e.g.*, ``set scf e_convergence 9``) will not get transmitted to the child jobs. - Array options (*e.g.*, ``set states_per_irrep [2, 1]``) will not get transmitted to the child jobs. - Function intercalls (*e.g.*, db(opt())) are not tested with sow/reap procedures. ",MatchSource.DOCS,doc/sphinxman/source/sowreap.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sowreap.rst
Usability,simpl,simply,"e Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:sowreap`:. Embarrassing Parallelism; ========================. Many of the tasks automated by Python wrappers consist of a number of; independent |PSIfour| calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. - Prepare an input file, simply adding ``mode='sow'`` to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations. - According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation. - The 'sow' stage also produces a *master* input file (with a; ``mode='reap'`` directive). When all the jobs in the above step are; completed, place their output files in the same location as the; *master* input, and run this last, quick job to collect the results. - Sow/reap procedures are governed by the **mode** keyword, choices being; ``'continuous'``, ``'sow'``, and ``'reap'``. Only ``'sow'`` is likely to; be used by the user, as ``'continuous'`` is always the default, and; input files with ``'reap'`` are autogenerated. - Embarrassingly parallel algorithm available at present for:. - :ref:`sec:db()` ; - finite difference operation of :ref:`sec",MatchSource.DOCS,doc/sphinxman/source/sowreap.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sowreap.rst
Availability,toler,tolerance," of using the TDSCF functionality is as follows::. molecule {; 0 1; O 0.000000 0.695000 -0.092486; O -0.000000 -0.695000 -0.092486; H -0.388142 0.895249 0.739888; H 0.388142 -0.895249 0.739888; symmetry c1; }. set {; tdscf_states 10; }. energy('td-scf/cc-pvdz'). This will seek to converge 10 singlet roots from a restricted Hartree--Fock reference. The roots are obtained with an iterative eigensolver and the following is the printout from the calculation::. ---------------------------------------------------------; TDSCF excitation energies; by Andrew M. James and Daniel G. A. Smith; ---------------------------------------------------------. ==> Options <==. Residual threshold : 1.0000e-04; Initial guess : denominators; Reference : RHF; Solver type : RPA (Hamiltonian). ==> Requested Excitations <==. 10 singlet states with A symmetry. ==> Seeking the lowest 10 singlet states with A symmetry. Generalized Hamiltonian Solver; By Andrew M. James. ==> Options <==. Max number of iterations = 60; Eigenvector tolerance = 1.0000e-04; Max number of expansion vectors = 2000. => Iterations <=; Max[D[value]] Max[|R|] # vectors; HamiltonianSolver iter 1: 5.64572e-01 3.65441e-01 40; HamiltonianSolver iter 2: 1.70649e-02 4.40807e-02 60; HamiltonianSolver iter 3: 2.42552e-04 6.95387e-03 80; HamiltonianSolver iter 4: 2.34146e-06 7.75689e-04 100; HamiltonianSolver iter 5: 1.75483e-08 6.17293e-05 120 Converged. When convergence is reached, |PSIfour| will output a report of excitation energies, oscillator strengths, and rotatory strenghts in atomic units::. Excitation Energy Total Energy Oscillator Strength Rotatory Strength; # Sym: GS->ES (Trans) au eV au au (length) au (velocity) au (length) au (velocity); ---- -------------------- --------------- --------------- --------------- --------------- --------------- --------------- ---------------; 1 A->A (1 A) 0.26945 7.33199 -150.50964 0.0017 0.0082 -0.0019 -0.0135; 2 A->A (1 A) 0.31534 8.58073 -150.46375 0.0000 0.0002 -0.0007 -0.0096; 3 A-",MatchSource.DOCS,doc/sphinxman/source/tdscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tdscf.rst
Energy Efficiency,energy,energy,"ximation, TDA, Tamm--Dancoff approximation; .. _`sec:tdscf`:. TDSCF: Time-dependent Hartree--Fock and density-functional theory; =================================================================. .. codeauthor:: Andrew M. James, Daniel G. A. Smith, Ruhee Dcuhna, Roberto Di Remigio and Jeff Schriber; .. sectionauthor:: Roberto Di Remigio. *Module:* :ref:`Keywords <apdx:scftdscf>`, :ref:`PSI Variables <apdx:scf_psivar>`, :source:`LIBSCF_SOLVER <psi4/src/psi4/libscf_solver>`. .. _`sec:tdscfintro`:. Introduction; ~~~~~~~~~~~~. |PSIfour| provides the capability to calculate excitation energies and ground to; excited state transition properties for SCF reference wavefunctions in a linear; response formalism [Dreuw2005-wp]_. An illustrative example of using the TDSCF functionality is as follows::. molecule {; 0 1; O 0.000000 0.695000 -0.092486; O -0.000000 -0.695000 -0.092486; H -0.388142 0.895249 0.739888; H 0.388142 -0.895249 0.739888; symmetry c1; }. set {; tdscf_states 10; }. energy('td-scf/cc-pvdz'). This will seek to converge 10 singlet roots from a restricted Hartree--Fock reference. The roots are obtained with an iterative eigensolver and the following is the printout from the calculation::. ---------------------------------------------------------; TDSCF excitation energies; by Andrew M. James and Daniel G. A. Smith; ---------------------------------------------------------. ==> Options <==. Residual threshold : 1.0000e-04; Initial guess : denominators; Reference : RHF; Solver type : RPA (Hamiltonian). ==> Requested Excitations <==. 10 singlet states with A symmetry. ==> Seeking the lowest 10 singlet states with A symmetry. Generalized Hamiltonian Solver; By Andrew M. James. ==> Options <==. Max number of iterations = 60; Eigenvector tolerance = 1.0000e-04; Max number of expansion vectors = 2000. => Iterations <=; Max[D[value]] Max[|R|] # vectors; HamiltonianSolver iter 1: 5.64572e-01 3.65441e-01 40; HamiltonianSolver iter 2: 1.70649e-02 4.40807e-02 60; Hamiltonia",MatchSource.DOCS,doc/sphinxman/source/tdscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tdscf.rst
Integrability,depend,dependent,"corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: TDSCF, TDDFT, RPA, random phase approximation, TDA, Tamm--Dancoff approximation; .. _`sec:tdscf`:. TDSCF: Time-dependent Hartree--Fock and density-functional theory; =================================================================. .. codeauthor:: Andrew M. James, Daniel G. A. Smith, Ruhee Dcuhna, Roberto Di Remigio and Jeff Schriber; .. sectionauthor:: Roberto Di Remigio. *Module:* :ref:`Keywords <apdx:scftdscf>`, :ref:`PSI Variables <apdx:scf_psivar>`, :source:`LIBSCF_SOLVER <psi4/src/psi4/libscf_solver>`. .. _`sec:tdscfintro`:. Introduction; ~~~~~~~~~~~~. |PSIfour| provides the capability to calculate excitation energies and ground to; excited state transition properties for SCF reference wavefunctions in a linear; response formalism [Dreuw2005-wp]_. An illustrative example of using the TDSCF functionality is as follows::. molecule {; 0 1; O 0.000000 0.695000 -0.092486; O -0.000000 -0.695000 -0.092486; H -0.388142 0.895249 0.739888; H 0.388142 -0.895249 0.739888; symmetry c1; }. set {; tdscf_states 10; }. energy('td-scf/cc-pvdz'). This will seek to converge 10 singlet roots from a restricted Hartree--Fock reference. The roots are obtained with",MatchSource.DOCS,doc/sphinxman/source/tdscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tdscf.rst
Performance,perform,performing,"and can be used to form; spectroscopic observables, such as oscillator and rotatory strengths. The :math:`\mathbf{A}` and :math:`\mathbf{B}` matrices appearing on the left-hand side are; the blocks of the molecular electronic; Hessian, [Norman2018-tn]_; whose dimensionality is :math:`(OV)^{2}`, with :math:`O` and :math:`V` the number of occupied and; virtual molecular orbitals, respectively.; This prevents explicit formation of the full Hessian, and subspace iteration; methods need to be used to extract the first few roots.; In such methods, the eigenvectors are expanded in a subspace of trial vectors,; whose dimensionality is greatly lower than that of the full eigenproblem.; The Hessian is projected down to this subspace where conventional full; diagonalization algorithms can be applied. The subspace is augmented with new; trial vectors, until a suitable convergence criterion is met.; The efficiency of the subspace solver is determined by the first half-projection; of the Hessian in the trial subspace, that is, by the efficiency of the routines; performing the matrix-vector products. It is essential to note that, despite the hermiticity of the molecular; electronic Hessian, the response eigenvalue equation is not an Hermitian; eigenproblem, due to the nonunit metric on the right-hand side. Indeed the Davidson; solver, the standard subspace iteration method in quantum chemistry,; demonstrates very poor convergence, sometimes manifesting as spurious complex; eigenvalues.; The eigenproblem however has Hamiltonian symmetry: the; roots appear in pairs :math:`(\omega_{n}, -\omega_{n})`, as do the eigenvectors.; A robust subspace solver should preserve the Hamiltonian symmetry, by enforcing; the paired structure on the trial vectors themselves.; Since |PSIfour| employs real orbitals, the response eigenproblem can be brought; to the form:. .. math::; (\mathbf{A} - \mathbf{B})(\mathbf{A} + \mathbf{B})| \mathbf{X}_{n} + \mathbf{Y}_{n}\rangle; =; \omega^{2}_{n} | \mathbf{X}_",MatchSource.DOCS,doc/sphinxman/source/tdscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tdscf.rst
Security,access,accessible," and rotatory strengths [Pedersen1995-du]_, [Lestrange2015-xn]_.; For example, |PSIfour| will compute compute oscillator strengths from; the MO basis electric dipole moment integrals, :math:`\mathbf{\mu}_{u}`, and the right; excitation vectors, :math:`|\mathbf{X}_{n}+\mathbf{Y}_{n}\rangle`:. .. math::; f = \frac{2}{3} \omega_{n} \sum_{u=x,y,z}\sum_{ia}|(\mathbf{X}_{n}+\mathbf{Y}_{n})_{ia}\mu_{ai, u}|^{2}. Psithon keywords; ~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/scf__tdscf_states.rst; .. include:: autodir_options_c/scf__tdscf_triplets.rst; .. include:: autodir_options_c/scf__tdscf_tda.rst; .. include:: autodir_options_c/scf__tdscf_r_convergence.rst; .. include:: autodir_options_c/scf__tdscf_maxiter.rst; .. include:: autodir_options_c/scf__tdscf_guess.rst; .. include:: autodir_options_c/scf__tdscf_print.rst; .. include:: autodir_options_c/scf__tdscf_coeff_cutoff.rst; .. include:: autodir_options_c/scf__tdscf_tdm_print.rst. PsiAPI usage; ~~~~~~~~~~~~. The TDSCF functionality is also accessible from PsiAPI. The example calculation shown above can be carried out as follows:. .. code-block:: python. import psi4. from psi4.driver.procrouting.response.scf_response import tdscf_excitations. psi4.core.set_output_file(""h2o2.out""). h2o2 = psi4.geometry(""""""0 1; O 0.000000 0.695000 -0.092486; O -0.000000 -0.695000 -0.092486; H -0.388142 0.895249 0.739888; H 0.388142 -0.895249 0.739888; symmetry c1; """""", name=""H2O2""). psi4.set_options({; 'save_jk': True,; }). e, wfn = psi4.energy(""HF/cc-pvdz"", return_wfn=True, molecule=h2o2); res = tdscf_excitations(wfn, states=10). Plotting one-photon absorption and electronic circular dichroism spectra; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Excitation energies and corresponding spectroscopic observables can be used to; produce spectra for one-photon absorption (OPA) and electronic circular; dichroism (ECD) with phenomenological line broadening. |PSIfour| provides the ``spectrum`` function for this pu",MatchSource.DOCS,doc/sphinxman/source/tdscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tdscf.rst
Integrability,interface,interfaced,"he Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`apdx:testSuite`:. Test Suite and Sample Inputs; ============================. |PSIfour| is distributed with an extensive test suite, which can; be found in :source:`tests`. After building the source code, these; can automatically be run by running ``ctest`` in the compilation; directory. More info on ``ctest`` options can be found; :ref:`here <faq:subsettests>`. Sample input files; can be found in the :source:`samples` subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Sample inputs accessible through :ref:`interfaced executables; <sec:interfacing>` are bulleted below. .. toctree::. autodoc_testsuite_brianqc.rst; autodoc_testsuite_cfour; autodoc_testsuite_chemps2; autodoc_testsuite_cookbook; autodoc_testsuite_dftd3; autodoc_testsuite_dftd4; autodoc_testsuite_dkh; autodoc_testsuite_libefp; autodoc_testsuite_erd; autodoc_testsuite_gcp; autodoc_testsuite_gdma; autodoc_testsuite_gpu_dfcc; autodoc_testsuite_json; autodoc_testsuite_mrcc; autodoc_testsuite_pcmsolver; autodoc_testsuite_psi4numpy; autodoc_testsuite_python; autodoc_testsuite_simint; autodoc_testsuite_snsmp2; autodoc_testsuite_v2rdm_casscf. Sample inputs for |PSIfour| as distributed are below. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_testsuite_corepsi4. .. include:: autodoc_testsuite_corepsi4.rst. ",MatchSource.DOCS,doc/sphinxman/source/testsuite.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/testsuite.rst
Security,access,accessible,"he Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`apdx:testSuite`:. Test Suite and Sample Inputs; ============================. |PSIfour| is distributed with an extensive test suite, which can; be found in :source:`tests`. After building the source code, these; can automatically be run by running ``ctest`` in the compilation; directory. More info on ``ctest`` options can be found; :ref:`here <faq:subsettests>`. Sample input files; can be found in the :source:`samples` subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Sample inputs accessible through :ref:`interfaced executables; <sec:interfacing>` are bulleted below. .. toctree::. autodoc_testsuite_brianqc.rst; autodoc_testsuite_cfour; autodoc_testsuite_chemps2; autodoc_testsuite_cookbook; autodoc_testsuite_dftd3; autodoc_testsuite_dftd4; autodoc_testsuite_dkh; autodoc_testsuite_libefp; autodoc_testsuite_erd; autodoc_testsuite_gcp; autodoc_testsuite_gdma; autodoc_testsuite_gpu_dfcc; autodoc_testsuite_json; autodoc_testsuite_mrcc; autodoc_testsuite_pcmsolver; autodoc_testsuite_psi4numpy; autodoc_testsuite_python; autodoc_testsuite_simint; autodoc_testsuite_snsmp2; autodoc_testsuite_v2rdm_casscf. Sample inputs for |PSIfour| as distributed are below. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_testsuite_corepsi4. .. include:: autodoc_testsuite_corepsi4.rst. ",MatchSource.DOCS,doc/sphinxman/source/testsuite.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/testsuite.rst
Testability,test,testSuite," .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`apdx:testSuite`:. Test Suite and Sample Inputs; ============================. |PSIfour| is distributed with an extensive test suite, which can; be found in :source:`tests`. After building the source code, these; can automatically be run by running ``ctest`` in the compilation; directory. More info on ``ctest`` options can be found; :ref:`here <faq:subsettests>`. Sample input files; can be found in the :source:`samples` subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Sample inputs accessible through :ref:`interfaced executables; <sec:interfacing>` are bulleted below. .. toctree::. autodoc_testsuite_brianqc.rst; autodoc_testsuite_cfour; autodoc_testsuite_chemps2; autodoc_testsuite_cookbook; autodoc_testsuite_dftd3; autodoc_testsuite_dftd4; autodoc_testsuite_dkh; autodoc_testsuite_libefp; autodoc_testsuite_erd; autodoc_testsuite_gcp; autodoc_testsuite_gdma; autodoc_testsuite_gpu_dfcc; autodoc_testsuite_json; autodoc_testsuite_mrcc; autodoc_te",MatchSource.DOCS,doc/sphinxman/source/testsuite.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/testsuite.rst
Energy Efficiency,energy,energy,"l and Thermochemical Analysis; =======================================. .. codeauthor:: Rollin A. King and Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:thermo>`, :ref:`PSI Variables <apdx:thermo_psivar>`, :source:`THERMO <psi4/driver/qcdb/vib.py>`. .. caution:: It is important to know that |PSIfour|, like any other; quantum chemistry program, does *not* compute the usual enthalpies,; entropies, or Gibbs free energies *of formation* provided by most; reference books. Instead, quantum chemistry programs compute ""absolute""; thermodynamic properties relative to infinitely separated nuclei and; electrons, not ""formation"" values relative to elements in their standard; states. If you are computing thermodynamic differences, like a reaction; enthalpy computed as the enthalpy of the products minus the enthalpy; of the reactants, then these ""absolute"" enthalpies are perfectly valid; and usable. However, they cannot be mixed and matched with enthalpies of; formation from reference books, since the zero of energy is not the same.; Additionally, the ""thermal energies"" reported in kcal/mol are the ; finite-temperature *corrections* to the electronic total energy, and ; not the overall thermal energies themselves. If in doubt, use the; reported Total Energies in Hartree/particle. Keywords; ^^^^^^^^. .. include:: autodir_options_c/thermo__t.rst; .. include:: autodir_options_c/thermo__p.rst; .. include:: autodir_options_c/thermo__rotational_symmetry_number.rst. .. _`sec:thermoExamples`:. Examples; ^^^^^^^^. A thermochemical analysis is performed after any full (not just specific; symmetry subgroups). If the wavefunction is retained, it may be reused; at a different temperature, pressure, rotational symmetry number, or; isotopic substitution through the function :py:func:`psi4.driver.qcdb.vib.thermo`; as is shown in :srcsample:`freq-isotope2`. A few summary psivars are set: ""ZPVE"", ""THERMAL ENERGY CORRECTION"",; ""ENTHALPY CORRECTION"", ""GIBBS FREE ENE",MatchSource.DOCS,doc/sphinxman/source/thermo.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/thermo.rst
Performance,perform,performed,"o infinitely separated nuclei and; electrons, not ""formation"" values relative to elements in their standard; states. If you are computing thermodynamic differences, like a reaction; enthalpy computed as the enthalpy of the products minus the enthalpy; of the reactants, then these ""absolute"" enthalpies are perfectly valid; and usable. However, they cannot be mixed and matched with enthalpies of; formation from reference books, since the zero of energy is not the same.; Additionally, the ""thermal energies"" reported in kcal/mol are the ; finite-temperature *corrections* to the electronic total energy, and ; not the overall thermal energies themselves. If in doubt, use the; reported Total Energies in Hartree/particle. Keywords; ^^^^^^^^. .. include:: autodir_options_c/thermo__t.rst; .. include:: autodir_options_c/thermo__p.rst; .. include:: autodir_options_c/thermo__rotational_symmetry_number.rst. .. _`sec:thermoExamples`:. Examples; ^^^^^^^^. A thermochemical analysis is performed after any full (not just specific; symmetry subgroups). If the wavefunction is retained, it may be reused; at a different temperature, pressure, rotational symmetry number, or; isotopic substitution through the function :py:func:`psi4.driver.qcdb.vib.thermo`; as is shown in :srcsample:`freq-isotope2`. A few summary psivars are set: ""ZPVE"", ""THERMAL ENERGY CORRECTION"",; ""ENTHALPY CORRECTION"", ""GIBBS FREE ENERGY CORRECTION"", ""ZERO K; ENTHALPHY"", ""THERMAL ENERGY"", ""ENTHALPY"", ""GIBBS FREE ENERGY"".; But additionally, every valid combination of {S, Cv, Cp, ZPE, E, H, G}; with {elec, trans, rot, vib, corr, tot} (e.g., vibrational entropy,; S_vib, and enthalpy correction, H_corr) is returned by dictionary; from the ``thermo`` function. See :source:`tests/pytests/test_vibanalysis.py`; (near the end) for an example. .. index::; pair: vibrational analysis; output. Output; ^^^^^^. The full list of keywords for thermo is provided in Appendix :ref:`apdx:thermo`. Information on the Psithon function that driv",MatchSource.DOCS,doc/sphinxman/source/thermo.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/thermo.rst
Testability,test,tests,"ive to elements in their standard; states. If you are computing thermodynamic differences, like a reaction; enthalpy computed as the enthalpy of the products minus the enthalpy; of the reactants, then these ""absolute"" enthalpies are perfectly valid; and usable. However, they cannot be mixed and matched with enthalpies of; formation from reference books, since the zero of energy is not the same.; Additionally, the ""thermal energies"" reported in kcal/mol are the ; finite-temperature *corrections* to the electronic total energy, and ; not the overall thermal energies themselves. If in doubt, use the; reported Total Energies in Hartree/particle. Keywords; ^^^^^^^^. .. include:: autodir_options_c/thermo__t.rst; .. include:: autodir_options_c/thermo__p.rst; .. include:: autodir_options_c/thermo__rotational_symmetry_number.rst. .. _`sec:thermoExamples`:. Examples; ^^^^^^^^. A thermochemical analysis is performed after any full (not just specific; symmetry subgroups). If the wavefunction is retained, it may be reused; at a different temperature, pressure, rotational symmetry number, or; isotopic substitution through the function :py:func:`psi4.driver.qcdb.vib.thermo`; as is shown in :srcsample:`freq-isotope2`. A few summary psivars are set: ""ZPVE"", ""THERMAL ENERGY CORRECTION"",; ""ENTHALPY CORRECTION"", ""GIBBS FREE ENERGY CORRECTION"", ""ZERO K; ENTHALPHY"", ""THERMAL ENERGY"", ""ENTHALPY"", ""GIBBS FREE ENERGY"".; But additionally, every valid combination of {S, Cv, Cp, ZPE, E, H, G}; with {elec, trans, rot, vib, corr, tot} (e.g., vibrational entropy,; S_vib, and enthalpy correction, H_corr) is returned by dictionary; from the ``thermo`` function. See :source:`tests/pytests/test_vibanalysis.py`; (near the end) for an example. .. index::; pair: vibrational analysis; output. Output; ^^^^^^. The full list of keywords for thermo is provided in Appendix :ref:`apdx:thermo`. Information on the Psithon function that drives frequency analyses is provided; at :py:func:`~psi4.driver.frequency`. ",MatchSource.DOCS,doc/sphinxman/source/thermo.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/thermo.rst
Usability,usab,usable,"SE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: harmonic vibrational analysis, vibrational analysis, thermochemical analysis. .. _`sec:thermo`:. Vibrational and Thermochemical Analysis; =======================================. .. codeauthor:: Rollin A. King and Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:thermo>`, :ref:`PSI Variables <apdx:thermo_psivar>`, :source:`THERMO <psi4/driver/qcdb/vib.py>`. .. caution:: It is important to know that |PSIfour|, like any other; quantum chemistry program, does *not* compute the usual enthalpies,; entropies, or Gibbs free energies *of formation* provided by most; reference books. Instead, quantum chemistry programs compute ""absolute""; thermodynamic properties relative to infinitely separated nuclei and; electrons, not ""formation"" values relative to elements in their standard; states. If you are computing thermodynamic differences, like a reaction; enthalpy computed as the enthalpy of the products minus the enthalpy; of the reactants, then these ""absolute"" enthalpies are perfectly valid; and usable. However, they cannot be mixed and matched with enthalpies of; formation from reference books, since the zero of energy is not the same.; Additionally, the ""thermal energies"" reported in kcal/mol are the ; finite-temperature *corrections* to the electronic total energy, and ; not the overall thermal energies themselves. If in doubt, use the; reported Total Energies in Hartree/particle. Keywords; ^^^^^^^^. .. include:: autodir_options_c/thermo__t.rst; .. include:: autodir_options_c/thermo__p.rst; .. include:: autodir_options_c/thermo__rotational_symmetry_number.rst. .. _`sec:thermoExamples`:. Examples; ^^^^^^^^. A thermochemical analysis is performed after any full (not just specific; symmetry subgroups). If the wavefunction is retained, it may be reused; at a different temperature, pressure, rotational symmetry number, or; isotopic substitution through the function :py:func:`psi",MatchSource.DOCS,doc/sphinxman/source/thermo.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/thermo.rst
Availability,down,downhill,"ree--Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis; ========================================================. The above examples were simple single-point energy computations; (as specified by the :py:func:`~psi4.driver.energy` function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; :py:func:`~psi4.driver.energy` with :py:func:`~psi4.driver.optimize` or :py:func:`~psi4.driver.frequency`, respectively. Here's an example of optimizing the H\ :sub:`2`\ O molecule using Hartree--Fock with; a cc-pVDZ basis set (located in; :srcsample:`tu3-h2o-opt`). .. literalinclude:: @SFNX_INCLUDE@samples/tu3-h2o-opt/input.dat. This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like ``Optimization is complete!``. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ``~``), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not). ::. --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0",MatchSource.DOCS,doc/sphinxman/source/tutorial.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst
Deployability,install,installation," a few simple input files as examples. A large ; number of sample input files, covering everything from single-point energies; using density-functional theory to response properties from coupled-cluster; theory, can be found in the :source:`samples` directory. Running a Basic Hartree--Fock Calculation; =========================================. In our first example, we will consider a Hartree--Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix. .. literalinclude:: @SFNX_INCLUDE@samples/tu1-h2o-energy/input.dat. .. note:: The memory and basis set specifications are placed *before* the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in ; :srcsample:`tu1-h2o-energy`.; You can run it if you wish.; Once |PSIfour| is in your path (see the ; :ref:`User Configuration <faq:runordinaryexe>`; section of the installation instructions), you can run this computation by typing. >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree--Fock energy in a section like this::. Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about :math:`1.0 \times 10^{-6}`, so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. :ref:`sec:installFile`). This very simple input is sufficient to run the requested information.; Notice that we didn't tell the program some otherwise useful information; like the charge on the molecule (0, it's neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartr",MatchSource.DOCS,doc/sphinxman/source/tutorial.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst
Energy Efficiency,power,powerful,".. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:tutorial`:. ==================================================; Psithon Tutorial: Using |PSIfour| as an Executable; ==================================================. .. note:: Psithon and PsiAPI refer to two modes of interacting with |PSIfour|. In; Psithon mode, you write an input file in our domain-specific language; (not quite Python) where commands don't have ``psi4.`` in front, then; submit it to the executable ``psi4`` which processes the Psithon into; pure Python and runs it internally. In PsiAPI mode, you write a pure; Python script with ``import psi4`` at the top and commands are behind; the ``psi4.`` namespace, then submit it to the ``python`` interpreter.; Both modes are equally powerful. This tutorial covers the Psithon; mode. .. note:: Some |PSIfour| functions and keywords have aliases. For example,; ``frequency()``, ``frequencies()``, and ``freq()`` all work to ; obtain vibrational frequencies. Basic Input File Structure; ==========================. |PSIfour| reads input from a text file, which can be prepared in any standard; text editor. The default input file name is ``input.dat`` and the; default output file name is ``output.dat``. So that you can give your; files meaningful names, these defaults can be changed by specifying; the input file name and output file name on the the command line.; The syntax is:. >>> psi4 input-name output-name. If you give an input name but no output name, then the output name will; be the same as the input name (replacing any "".in"" or "".dat"" extension by "".out""). Sample Input Files; ==================. Below, we will provide a few simple input files as examples. A large ; number of sample input files, covering every",MatchSource.DOCS,doc/sphinxman/source/tutorial.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst
Integrability,message,message,"ontamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis; ========================================================. The above examples were simple single-point energy computations; (as specified by the :py:func:`~psi4.driver.energy` function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; :py:func:`~psi4.driver.energy` with :py:func:`~psi4.driver.optimize` or :py:func:`~psi4.driver.frequency`, respectively. Here's an example of optimizing the H\ :sub:`2`\ O molecule using Hartree--Fock with; a cc-pVDZ basis set (located in; :srcsample:`tu3-h2o-opt`). .. literalinclude:: @SFNX_INCLUDE@samples/tu3-h2o-opt/input.dat. This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like ``Optimization is complete!``. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ``~``), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not). ::. --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0.00077279 0.00044621 ~; -----------------------------------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/tutorial.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst
Modifiability,variab,variables,"(1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree--Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords. Let's consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let's run a computation; on methylene (CH\ :sub:`2`\ ), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity :math:`2S+1 = 3`).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, |PSIfour|; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line with ``0 3`` at the beginning of the molecule; specification below. In this example we will also specify the bond length; and bond angle as variables (:math:`R` and :math:`A`), whose values are given; at the end of the Z-matrix specification. .. literalinclude:: @SFNX_INCLUDE@samples/tu2-ch2-energy/input.dat. This sample input can be found in ; :srcsample:`tu2-ch2-energy` and as; before it can be run through the command ``psi4 input.dat output.dat``; (actually, because ``psi4`` by default looks for an input file named; ``input.dat`` and writes by default to a file called ``output.dat``, in this; case one could also just type ``psi4``). If it works, it should print; the final energy as ::. @UHF Final Energy: -38.92533462456894. Notice we added a new keyword, ``set reference uhf``, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree--Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree--Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analy",MatchSource.DOCS,doc/sphinxman/source/tutorial.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst
Performance,perform,perform," the command ``psi4 input.dat output.dat``; (actually, because ``psi4`` by default looks for an input file named; ``input.dat`` and writes by default to a file called ``output.dat``, in this; case one could also just type ``psi4``). If it works, it should print; the final energy as ::. @UHF Final Energy: -38.92533462456894. Notice we added a new keyword, ``set reference uhf``, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree--Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree--Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis; ========================================================. The above examples were simple single-point energy computations; (as specified by the :py:func:`~psi4.driver.energy` function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; :py:func:`~psi4.driver.energy` with :py:func:`~psi4.driver.optimize` or :py:func:`~psi4.driver.frequency`, respectively. Here's an example of optimizing the H\ :sub:`2`\ O molecule using Hartree--Fock with; a cc-pVDZ basis set (located in; :srcsample:`tu3-h2o-opt`). .. literalinclude:: @SFNX_INCLUDE@samples/tu3-h2o-opt/input.dat. This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like ``Optimization is complete!``. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ``~``), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iteratio",MatchSource.DOCS,doc/sphinxman/source/tutorial.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst
Security,access,accessed,"omplex Energy (fragments = (1,), basis = (1, 2): -128.70932405488935); ...; N-Body: Computing complex (1/1) with fragments (1, 2) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (1, 2), basis = (1, 2): -257.41867403127321); ...; ==> N-Body: Counterpoise Corrected (CP) energies <==. n-Body Total Energy [Eh] I.E. [kcal/mol] Delta [kcal/mol]; 1 -257.418648109779 0.000000000000 0.000000000000; 2 -257.418674031273 -0.016265984132 -0.016265984132. And that's it! The only remaining part of the example input is a little table; of the different R values and the CP-corrected CCSD(T) energies, converted from; atomic units (Hartree) to |kcalpermol| by multiplying by the; automatically-defined conversion factor ``psi_hartree2kcalmol``. |PSIfour|; provides several built-in physical constants and conversion factors, as; described in section :ref:`sec:physicalConstants`.; Notice the loop over :math:`R` to create; the table looks just like the loop over ``R`` to run the different; computations, and the CP-corrected energies ``ecp[R]`` are accessed the same; way they were stored. The ``print`` line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section). Our table is printed at the very end of the output file, and looks like; this ::. CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies; ; R (Ang) E_int (kcal/mol); -----------------------------------------------------; 2.5 0.757718; 3.0 0.015687; 4.0 -0.016264; ; The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily i",MatchSource.DOCS,doc/sphinxman/source/tutorial.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst
Testability,test,test,"---------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it's important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. Therefore, *it's important to obtain the vibrational frequencies ; at the OPTIMIZED GEOMETRY*. We could set up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the *bottom* of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there's a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over. So, it's easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; :srcsample:`tu4-h2o-freq`):. .. literalinclude:: @SFNX_INCLUDE@samples/tu4-h2o-freq/input.dat. The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respect to; nuclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm\ :sup:`-1`; may exist)::. Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in terms of Cartesian; coordinates of each atom. For example, the normal mode at 1776 cm\ :sup:`-1` ; is::. Frequency: 1775.65; Force constant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825;",MatchSource.DOCS,doc/sphinxman/source/tutorial.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst
Usability,simpl,simple,"he ``psi4.`` namespace, then submit it to the ``python`` interpreter.; Both modes are equally powerful. This tutorial covers the Psithon; mode. .. note:: Some |PSIfour| functions and keywords have aliases. For example,; ``frequency()``, ``frequencies()``, and ``freq()`` all work to ; obtain vibrational frequencies. Basic Input File Structure; ==========================. |PSIfour| reads input from a text file, which can be prepared in any standard; text editor. The default input file name is ``input.dat`` and the; default output file name is ``output.dat``. So that you can give your; files meaningful names, these defaults can be changed by specifying; the input file name and output file name on the the command line.; The syntax is:. >>> psi4 input-name output-name. If you give an input name but no output name, then the output name will; be the same as the input name (replacing any "".in"" or "".dat"" extension by "".out""). Sample Input Files; ==================. Below, we will provide a few simple input files as examples. A large ; number of sample input files, covering everything from single-point energies; using density-functional theory to response properties from coupled-cluster; theory, can be found in the :source:`samples` directory. Running a Basic Hartree--Fock Calculation; =========================================. In our first example, we will consider a Hartree--Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix. .. literalinclude:: @SFNX_INCLUDE@samples/tu1-h2o-energy/input.dat. .. note:: The memory and basis set specifications are placed *before* the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in ; :srcsample:`tu1-h2o-energy`.; You can run it if you wish.; Once |PSIfour| is in your path (see the ; :ref:`User Configuration <faq:runordinaryexe>`; sec",MatchSource.DOCS,doc/sphinxman/source/tutorial.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst
Availability,avail,available,".. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:bestPractices_py`:. Best Practices for Python Functions; ===================================. - Thy python functions shall always have final argument \*\*kwargs, that they may take in and pass on keywords meant for other functions. Yea, even the run_mcscf(), and run_ccsd() -type functions that have no use for kwargs. The exceptions are python functions that are only helpers called by a driver function. - Python functions should read the kwargs dictionary and (possibly) add to it. Functions should not pop or remove keywords from kwargs, even those keywords meaningful only to itself. This will ensure that the complete kwargs is available for pickling and sow/reap procedures. The exception is the molecule argument, which is read by the first function that gets ahold of it. This first function activates the molecule and pops it out of kwargs, effectively setting molecule for all subsequent functions. The code below should suffice. ::. # Make sure the molecule the user provided is the active one; if 'molecule' in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = psi4.get_active_molecule(); molecule.update_geometry(). - Preferrably, the python function signature (for functions intended to be called in input files) is ``function(name, **kwargs)``. For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see :ref:`sec:db()` argument db_name for example). - After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwarg",MatchSource.DOCS,doc/sphinxman/source/attic/bestpractices_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst
Deployability,continuous,continuous,"ecule.update_geometry(). - Preferrably, the python function signature (for functions intended to be called in input files) is ``function(name, **kwargs)``. For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see :ref:`sec:db()` argument db_name for example). - After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwargs dictionary keys to lowercase versions of themselves, so that input files can be case insensitive. ::. lowername = name.lower(); kwargs = kwargs_lower(kwargs). - Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match. ::. if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. - Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument's value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd. ::. if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. - For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). - Upon checking in a new python file, edit the file ``psi4/doc/userman/source/index.rst`` and follow the instructions therein that your file may be autodocumented here. - Write docstrings! For a major function intended for use in input files, emulate any docstring in ``psi4/share/python",MatchSource.DOCS,doc/sphinxman/source/attic/bestpractices_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst
Energy Efficiency,energy,energy,"); kwargs = kwargs_lower(kwargs). - Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match. ::. if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. - Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument's value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd. ::. if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. - For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). - Upon checking in a new python file, edit the file ``psi4/doc/userman/source/index.rst`` and follow the instructions therein that your file may be autodocumented here. - Write docstrings! For a major function intended for use in input files, emulate any docstring in ``psi4/share/python/driver.py``. For a behind-the-scenes function or if you don't want the bother of dealing with `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_, just write an ordinary docstring. It will get slurped into the documentation in plain text. - Your python function should follow `PEP8 <http://www.python.org/dev/peps/pep-0008/>`_ conventions (without the line-length restriction). I'm aiming for files to pass the line below, unless for good reason. The second line is for database Python files. >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefi",MatchSource.DOCS,doc/sphinxman/source/attic/bestpractices_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst
Integrability,interoperab,interoperability,"ntions (without the line-length restriction). I'm aiming for files to pass the line below, unless for good reason. The second line is for database Python files. >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. - Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap\_ is suggested. - Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the 'current energy' variable. This last is needed to communicate with the optimizer. ::. psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). - Once your python function is fairly stable on its own, it's potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. - If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no \*_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function. ::. # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Functi",MatchSource.DOCS,doc/sphinxman/source/attic/bestpractices_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst
Modifiability,variab,variables,"cstring in ``psi4/share/python/driver.py``. For a behind-the-scenes function or if you don't want the bother of dealing with `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_, just write an ordinary docstring. It will get slurped into the documentation in plain text. - Your python function should follow `PEP8 <http://www.python.org/dev/peps/pep-0008/>`_ conventions (without the line-length restriction). I'm aiming for files to pass the line below, unless for good reason. The second line is for database Python files. >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. - Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap\_ is suggested. - Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the 'current energy' variable. This last is needed to communicate with the optimizer. ::. psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). - Once your python function is fairly stable on its own, it's potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. - If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no \*_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value g",MatchSource.DOCS,doc/sphinxman/source/attic/bestpractices_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst
Performance,perform,performs," in kwargs:; activate(kwargs['molecule']); del kwargs['molecule']; molecule = psi4.get_active_molecule(); molecule.update_geometry(). - Preferrably, the python function signature (for functions intended to be called in input files) is ``function(name, **kwargs)``. For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see :ref:`sec:db()` argument db_name for example). - After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwargs dictionary keys to lowercase versions of themselves, so that input files can be case insensitive. ::. lowername = name.lower(); kwargs = kwargs_lower(kwargs). - Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match. ::. if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. - Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument's value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd. ::. if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. - For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). - Upon checking in a new python file, edit the file ``psi4/doc/userman/source/index.rst`` and follow the instructions therein that your file may be autodocumented here. - Write d",MatchSource.DOCS,doc/sphinxman/source/attic/bestpractices_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst
Security,expose,expose," e_mp25). - Once your python function is fairly stable on its own, it's potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. - If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no \*_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function. ::. # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). - If specific interoperabilities are known, code them in. For example, if xx shouldn't call db, add the last two lines above to the xx function. If db shouldn't call xx, add the following two lines below to the db function. ::. if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). - Create a multipart test case that runs some intercalls between your function and others (akin to :srcsample:`pywrap_all)`. In trials, permute the order of calls a few times to expose any calls that don't clean up after themselves and need further attention. - When all is validated, add your findings to the great :ref:`table:intercalls` table in the documentation. ",MatchSource.DOCS,doc/sphinxman/source/attic/bestpractices_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst
Testability,test,test,"ed by cp(), database(), and optimize(). - Upon checking in a new python file, edit the file ``psi4/doc/userman/source/index.rst`` and follow the instructions therein that your file may be autodocumented here. - Write docstrings! For a major function intended for use in input files, emulate any docstring in ``psi4/share/python/driver.py``. For a behind-the-scenes function or if you don't want the bother of dealing with `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_, just write an ordinary docstring. It will get slurped into the documentation in plain text. - Your python function should follow `PEP8 <http://www.python.org/dev/peps/pep-0008/>`_ conventions (without the line-length restriction). I'm aiming for files to pass the line below, unless for good reason. The second line is for database Python files. >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. - Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap\_ is suggested. - Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the 'current energy' variable. This last is needed to communicate with the optimizer. ::. psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). - Once your python function is fairly stable on its own, it's potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. - If any interoperability is possible, define an argument xx_func, where xx is a short name for your ",MatchSource.DOCS,doc/sphinxman/source/attic/bestpractices_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst
Availability,error,error,"s3|, |detci__ras4|,; |globals__frozen_docc|, |globals__frozen_uocc|, |detci__active|, *etc.*, need to be; in the global ``set {...}`` block section of the input file so they may; be accessed by other modules. The ability to perform state-averaged ; [Docken:1972:4928]_ [Ruedenberg:1979:1069]_; CASSCF or RASSCF computations has been added. This is accomplished using the ; |detci__avg_states| keyword. See the :srcsample:`casscf-sp` and :srcsample:`casscf-sa-sp` examples in the ; samples directory and the example below. Basic Keywords; --------------. WFN = string; This may be ``casscf`` or ``rasscf``. REFERENCE = string; Any of the references allowed by detci should work (*i.e.*, not; {\tt uhf}), but there should be no reason not to use {\tt rhf}. DERTYPE = string; At present, only energies ({\tt none}) are supported; future; releases will implement gradients ({\tt first}). CONVERGENCE = integer; Convergence desired on the orbital gradient. Convergence is achieved when; the RMS of the error in the orbital gradient is less than 10**(-n). The ; default is 4 for energy calculations and 7 for gradients. Note that; this is a different convergence criterion than for the \PSIdetci\; program itself. These can be differentiated, if changed by the user,; by placing the {\tt CONVERGENCE} keywords within separate sections of; input, such as {\tt detcas: ( convergence = x )}. ENERGY\_CONVERGENCE = integer; Convergence desired on the total MCSCF energy. The default is 7.; \item[RESTRICTED\_DOCC = (integer array)]\mbox{}\\; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of lowest energy doubly occupied orbitals in each irreducible; representation from which there will be no excitations. ; These orbitals are optimized in the MCSCF.; The Cotton ordering of the irredicible representations is used.; The default is the zero vector. RESTRICTED\_UOCC = (integer array); Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of highest energ",MatchSource.DOCS,doc/sphinxman/source/attic/detcas.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst
Deployability,configurat,configurational,"rt of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:casscf`:. Complete-Active-Space Self-Consistent-Field (CASSCF); ====================================================. Multi-configurational self-consistent-field (MCSCF) ; is a general method for obtaining qualitatively correct; wavefunctions for highly strained molecules, diradicals, or bond; breaking reactions. The most commonly used MCSCF procedure; is the complete-active-space self-consistent-field (CASSCF); approach [Roos:1980]_, which includes all possible determinants; (with the proper symmetry) that can be formed by distributing ; a set of active electrons among a set of active orbitals.; The detcasman module performs; CASSCF optimization of molecular orbitals via a two-step; procedure in which the CI wavefunction is computed using; detci, and the orbital rotation step is computed using; detcas. The detcas program is fairly simple; and uses an approximate orbital Hessian [Chaban:1997:88]_; and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_.; We have also implemented a prototype version of the RASSCF method; [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF which ; is typically less complete (and less expensive) than CASSCF.; However, orbital convergenc",MatchSource.DOCS,doc/sphinxman/source/attic/detcas.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst
Energy Efficiency,energy,energy,"ve|, *etc.*, need to be; in the global ``set {...}`` block section of the input file so they may; be accessed by other modules. The ability to perform state-averaged ; [Docken:1972:4928]_ [Ruedenberg:1979:1069]_; CASSCF or RASSCF computations has been added. This is accomplished using the ; |detci__avg_states| keyword. See the :srcsample:`casscf-sp` and :srcsample:`casscf-sa-sp` examples in the ; samples directory and the example below. Basic Keywords; --------------. WFN = string; This may be ``casscf`` or ``rasscf``. REFERENCE = string; Any of the references allowed by detci should work (*i.e.*, not; {\tt uhf}), but there should be no reason not to use {\tt rhf}. DERTYPE = string; At present, only energies ({\tt none}) are supported; future; releases will implement gradients ({\tt first}). CONVERGENCE = integer; Convergence desired on the orbital gradient. Convergence is achieved when; the RMS of the error in the orbital gradient is less than 10**(-n). The ; default is 4 for energy calculations and 7 for gradients. Note that; this is a different convergence criterion than for the \PSIdetci\; program itself. These can be differentiated, if changed by the user,; by placing the {\tt CONVERGENCE} keywords within separate sections of; input, such as {\tt detcas: ( convergence = x )}. ENERGY\_CONVERGENCE = integer; Convergence desired on the total MCSCF energy. The default is 7.; \item[RESTRICTED\_DOCC = (integer array)]\mbox{}\\; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of lowest energy doubly occupied orbitals in each irreducible; representation from which there will be no excitations. ; These orbitals are optimized in the MCSCF.; The Cotton ordering of the irredicible representations is used.; The default is the zero vector. RESTRICTED\_UOCC = (integer array); Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of highest energy unoccupied orbitals in each irreducible; representation into which there will b",MatchSource.DOCS,doc/sphinxman/source/attic/detcas.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst
Modifiability,config,configurational,"rt of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:casscf`:. Complete-Active-Space Self-Consistent-Field (CASSCF); ====================================================. Multi-configurational self-consistent-field (MCSCF) ; is a general method for obtaining qualitatively correct; wavefunctions for highly strained molecules, diradicals, or bond; breaking reactions. The most commonly used MCSCF procedure; is the complete-active-space self-consistent-field (CASSCF); approach [Roos:1980]_, which includes all possible determinants; (with the proper symmetry) that can be formed by distributing ; a set of active electrons among a set of active orbitals.; The detcasman module performs; CASSCF optimization of molecular orbitals via a two-step; procedure in which the CI wavefunction is computed using; detci, and the orbital rotation step is computed using; detcas. The detcas program is fairly simple; and uses an approximate orbital Hessian [Chaban:1997:88]_; and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_.; We have also implemented a prototype version of the RASSCF method; [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF which ; is typically less complete (and less expensive) than CASSCF.; However, orbital convergenc",MatchSource.DOCS,doc/sphinxman/source/attic/detcas.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst
Performance,perform,performs,"hould have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:casscf`:. Complete-Active-Space Self-Consistent-Field (CASSCF); ====================================================. Multi-configurational self-consistent-field (MCSCF) ; is a general method for obtaining qualitatively correct; wavefunctions for highly strained molecules, diradicals, or bond; breaking reactions. The most commonly used MCSCF procedure; is the complete-active-space self-consistent-field (CASSCF); approach [Roos:1980]_, which includes all possible determinants; (with the proper symmetry) that can be formed by distributing ; a set of active electrons among a set of active orbitals.; The detcasman module performs; CASSCF optimization of molecular orbitals via a two-step; procedure in which the CI wavefunction is computed using; detci, and the orbital rotation step is computed using; detcas. The detcas program is fairly simple; and uses an approximate orbital Hessian [Chaban:1997:88]_; and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_.; We have also implemented a prototype version of the RASSCF method; [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF which ; is typically less complete (and less expensive) than CASSCF.; However, orbital convergence for RASSCF can be difficult in our; current implementation. Inactive orbitals in the MCSCF may be specified by the ; |detci__restricted_docc| and |detci__restricted_uocc| keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively,; in the MCSCF wavefunction. However, the form of these orbitals will; be optimized in the MCSCF procedure. It is also possible to ; literally freeze inactive orbitals in their original (SCF) form; using the |globals__frozen_docc|",MatchSource.DOCS,doc/sphinxman/source/attic/detcas.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst
Security,access,accessed,"s in their original (SCF) form; using the |globals__frozen_docc| and |globals__frozen_uocc| keywords.; This is not normally what one wishes to do in an MCSCF computation; (*e.g.*, it complicates the computation of gradients),; but it can make the computations faster and is helpful in some; circumstances where unphysical mixing of inactive and active; occupied orbitals might occur. Presently, it is not possible; to mix the use of restricted and frozen orbitals in |PSIfour|. The division of the molecular orbitals into various subspaces such as RAS; spaces, or frozen vs active orbitals, etc, needs to be clear not only to; the detci program, but also at least to the transformation program; (and in the case of MCSCF, to other programs as well). Thus,; orbital subspace keywords such as |detci__ras1|, |detci__ras2|, |detci__ras3|, |detci__ras4|,; |globals__frozen_docc|, |globals__frozen_uocc|, |detci__active|, *etc.*, need to be; in the global ``set {...}`` block section of the input file so they may; be accessed by other modules. The ability to perform state-averaged ; [Docken:1972:4928]_ [Ruedenberg:1979:1069]_; CASSCF or RASSCF computations has been added. This is accomplished using the ; |detci__avg_states| keyword. See the :srcsample:`casscf-sp` and :srcsample:`casscf-sa-sp` examples in the ; samples directory and the example below. Basic Keywords; --------------. WFN = string; This may be ``casscf`` or ``rasscf``. REFERENCE = string; Any of the references allowed by detci should work (*i.e.*, not; {\tt uhf}), but there should be no reason not to use {\tt rhf}. DERTYPE = string; At present, only energies ({\tt none}) are supported; future; releases will implement gradients ({\tt first}). CONVERGENCE = integer; Convergence desired on the orbital gradient. Convergence is achieved when; the RMS of the error in the orbital gradient is less than 10**(-n). The ; default is 4 for energy calculations and 7 for gradients. Note that; this is a different convergence criterion th",MatchSource.DOCS,doc/sphinxman/source/attic/detcas.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst
Testability,test,test," optimized in the MCSCF;; usually one wishes to use {\tt RESTRICTED\_DOCC} instead.; The current version of the program does not allow both; {\tt RESTRICTED\_DOCC} and {\tt FROZEN\_DOCC}.; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The Cotton ordering of the irredicible representations is used.; The default is the zero vector. FROZEN\_UOCC = (integer array)]\mbox{}\\; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of highest energy unoccupied orbitals in each irreducible; representation into which there will be no excitations.; These orbitals are literally frozen and are not optimized in the MCSCF;; usually one wishes to use {\tt RESTRICTED\_UOCC} instead.; The current version of the program does not allow both; {\tt RESTRICTED\_UOCC} and {\tt FROZEN\_UOCC}.; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The default is the zero vector. NCASITER = integer]\mbox{}\\; Maximum number of iterations to optimize the orbitals. This option; should be specified in the DEFAULT section of input, because; it needs to be visible to the control program PSI. Defaults to 20. AVERAGE\_STATES = (integer array)]\mbox{}\\; This gives a list of what states to average for the orbital ; optimization. States are numbered starting from 1. PRINT = integer]\mbox{}\\; This option determines the verbosity of the output. A value of 1 or; 2 specifies minimal printing, a value of 3 specifies verbose printing.; Values of 4 or 5 are used for debugging. Do not use level 5 unless; the test case is very small (e.g. STO H\ :sub:`2`\ O CISD). Examples; --------. Example of a CASSCF single-point calculation for H\ :sub:`2`\ O using; a valence active space 3a\ :sub:`1` 1b\ :sub:`1` 2b\ :sub:`2`. ::. % 6-31G** H2O Test CASSCF Energy Point; ; psi: (; label = ""6-31G** CASSCF H2O""; jobtype = sp; wfn = casscf; reference = rhf; restricted_docc = (1 0 0 0); active = (3 0 1 2); basis = ""6-31G**""; zmat = (; o; h 1 1.00; h 1 1.00 2 103.1; ); ). ",MatchSource.DOCS,doc/sphinxman/source/attic/detcas.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst
Usability,simpl,simple,"2110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:casscf`:. Complete-Active-Space Self-Consistent-Field (CASSCF); ====================================================. Multi-configurational self-consistent-field (MCSCF) ; is a general method for obtaining qualitatively correct; wavefunctions for highly strained molecules, diradicals, or bond; breaking reactions. The most commonly used MCSCF procedure; is the complete-active-space self-consistent-field (CASSCF); approach [Roos:1980]_, which includes all possible determinants; (with the proper symmetry) that can be formed by distributing ; a set of active electrons among a set of active orbitals.; The detcasman module performs; CASSCF optimization of molecular orbitals via a two-step; procedure in which the CI wavefunction is computed using; detci, and the orbital rotation step is computed using; detcas. The detcas program is fairly simple; and uses an approximate orbital Hessian [Chaban:1997:88]_; and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_.; We have also implemented a prototype version of the RASSCF method; [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF which ; is typically less complete (and less expensive) than CASSCF.; However, orbital convergence for RASSCF can be difficult in our; current implementation. Inactive orbitals in the MCSCF may be specified by the ; |detci__restricted_docc| and |detci__restricted_uocc| keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively,; in the MCSCF wavefunction. However, the form of these orbitals will; be optimized in the MCSCF procedure. It is also possible to ; literally freeze inactive orbitals in their original (SCF) form; using the |globals__frozen_docc| and |globals__frozen_uocc| keywords.; This is not normally what one wishes to do in an MCSCF computation; (*e.g.*, it complicates the computation of gradients),; but it can make the computations ",MatchSource.DOCS,doc/sphinxman/source/attic/detcas.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst
Availability,robust,robust,"%; % History of Psi; %; % Daniel Crawford, 24 January, 1996; %. The PSI suite of {\em ab initio} quantum chemistry programs is the result; of an ongoing attempt by a cadre of graduate students, postdoctoral; associates, and professors to produce code that is efficient but also; easy to extend to new theoretical methods. Significant effort has been; devoted to the development of libraries which are robust and easy to use.; Some of the earliest contributions to what is now referred to as ``PSI''; include a direct configuration interaction (CI) program (Robert Lucchese,; 1976, now at Texas A\&M), the well-known graphical unitary group CI program; (Bernie Brooks, 1977-78, now at N.I.H.), and the original integrals code; (Russ Pitzer, 1978, now at Ohio State). From 1978-1987, the package was; know as the {\tt BERKELEY} suite, and after the Schaefer group moved to the; Center for Computational Quantum Chemistry at the University of Georgia,; the package was renamed {\tt PSI}. Thanks primarily to the efforts of Curt; Janssen (Sandia Labs, Livermore) and Ed Seidl (LLNL), the package was; ported to UNIX systems, and substantially improved with new input formats; and a C-based I/O system. Beginning in 1999, an extensive effort was begun to develop \PSIthree\; --- a {\tt PSI} suite with a completely new face. As a result of this; effort, all of the legacy Fortran code was removed, and everything was; rewritten in C and C++, including new integral/derivative integral,; coupled cluster, and CI codes. In addition, new I/O libraries have; been added, as well as an improved checkpoint file structure and greater; automation of typical tasks such as geometry optimization and frequency; analysis. The package has the capability to determine wavefunctions,; energies, analytic gradients, and various molecular properties based on; a variety of theories, including spin-restricted, spin-unrestricted, and; restricted open-shell Hartree-Fock (RHF, UHF, and ROHF); configuration; interaction (CI",MatchSource.DOCS,doc/sphinxman/source/attic/history.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/history.rst
Deployability,configurat,configuration,"%; % History of Psi; %; % Daniel Crawford, 24 January, 1996; %. The PSI suite of {\em ab initio} quantum chemistry programs is the result; of an ongoing attempt by a cadre of graduate students, postdoctoral; associates, and professors to produce code that is efficient but also; easy to extend to new theoretical methods. Significant effort has been; devoted to the development of libraries which are robust and easy to use.; Some of the earliest contributions to what is now referred to as ``PSI''; include a direct configuration interaction (CI) program (Robert Lucchese,; 1976, now at Texas A\&M), the well-known graphical unitary group CI program; (Bernie Brooks, 1977-78, now at N.I.H.), and the original integrals code; (Russ Pitzer, 1978, now at Ohio State). From 1978-1987, the package was; know as the {\tt BERKELEY} suite, and after the Schaefer group moved to the; Center for Computational Quantum Chemistry at the University of Georgia,; the package was renamed {\tt PSI}. Thanks primarily to the efforts of Curt; Janssen (Sandia Labs, Livermore) and Ed Seidl (LLNL), the package was; ported to UNIX systems, and substantially improved with new input formats; and a C-based I/O system. Beginning in 1999, an extensive effort was begun to develop \PSIthree\; --- a {\tt PSI} suite with a completely new face. As a result of this; effort, all of the legacy Fortran code was removed, and everything was; rewritten in C and C++, including new integral/derivative integral,; coupled cluster, and CI codes. In addition, new I/O libraries have; been added, as well as an improved checkpoint file structure and greater; automation of typical tasks such as geometry optimization and frequency; analysis. The package has the capability to determine wavefunctions,; energies, analytic gradients, and various molecular properties based on; a variety of theories, including spin-restricted, spin-unrestricted, and; restricted open-shell Hartree-Fock (RHF, UHF, and ROHF); configuration; interaction (CI",MatchSource.DOCS,doc/sphinxman/source/attic/history.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/history.rst
Energy Efficiency,efficient,efficient,"%; % History of Psi; %; % Daniel Crawford, 24 January, 1996; %. The PSI suite of {\em ab initio} quantum chemistry programs is the result; of an ongoing attempt by a cadre of graduate students, postdoctoral; associates, and professors to produce code that is efficient but also; easy to extend to new theoretical methods. Significant effort has been; devoted to the development of libraries which are robust and easy to use.; Some of the earliest contributions to what is now referred to as ``PSI''; include a direct configuration interaction (CI) program (Robert Lucchese,; 1976, now at Texas A\&M), the well-known graphical unitary group CI program; (Bernie Brooks, 1977-78, now at N.I.H.), and the original integrals code; (Russ Pitzer, 1978, now at Ohio State). From 1978-1987, the package was; know as the {\tt BERKELEY} suite, and after the Schaefer group moved to the; Center for Computational Quantum Chemistry at the University of Georgia,; the package was renamed {\tt PSI}. Thanks primarily to the efforts of Curt; Janssen (Sandia Labs, Livermore) and Ed Seidl (LLNL), the package was; ported to UNIX systems, and substantially improved with new input formats; and a C-based I/O system. Beginning in 1999, an extensive effort was begun to develop \PSIthree\; --- a {\tt PSI} suite with a completely new face. As a result of this; effort, all of the legacy Fortran code was removed, and everything was; rewritten in C and C++, including new integral/derivative integral,; coupled cluster, and CI codes. In addition, new I/O libraries have; been added, as well as an improved checkpoint file structure and greater; automation of typical tasks such as geometry optimization and frequency; analysis. The package has the capability to determine wavefunctions,; energies, analytic gradients, and various molecular properties based on; a variety of theories, including spin-restricted, spin-unrestricted, and; restricted open-shell Hartree-Fock (RHF, UHF, and ROHF); configuration; interaction (CI",MatchSource.DOCS,doc/sphinxman/source/attic/history.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/history.rst
Integrability,rout,routines,"ntegrals code; (Russ Pitzer, 1978, now at Ohio State). From 1978-1987, the package was; know as the {\tt BERKELEY} suite, and after the Schaefer group moved to the; Center for Computational Quantum Chemistry at the University of Georgia,; the package was renamed {\tt PSI}. Thanks primarily to the efforts of Curt; Janssen (Sandia Labs, Livermore) and Ed Seidl (LLNL), the package was; ported to UNIX systems, and substantially improved with new input formats; and a C-based I/O system. Beginning in 1999, an extensive effort was begun to develop \PSIthree\; --- a {\tt PSI} suite with a completely new face. As a result of this; effort, all of the legacy Fortran code was removed, and everything was; rewritten in C and C++, including new integral/derivative integral,; coupled cluster, and CI codes. In addition, new I/O libraries have; been added, as well as an improved checkpoint file structure and greater; automation of typical tasks such as geometry optimization and frequency; analysis. The package has the capability to determine wavefunctions,; energies, analytic gradients, and various molecular properties based on; a variety of theories, including spin-restricted, spin-unrestricted, and; restricted open-shell Hartree-Fock (RHF, UHF, and ROHF); configuration; interaction (CI) (including a variety of multireference CI's and full; CI); coupled-cluster (CC) including CC with variationaly optimized; orbitals; second-order M{\o}ller-Plesset perturbation theory (MPPT); including explicitly correlated second-order M{\o}ller-Plesset energy; (MP2-R12); and complete-active-space self-consistent field (CASSCF); theory. By January 2008, all of the C code in \PSIthree\ was ; converted to C++ to enable a path toward more object-oriented design; and a single-excecutable framework that will facilitate code reuse and ; ease efforts at parallelization. At this same time, all of the legacy I/O; routines from {\tt PSI2} were removed, greatly streamlining the; \library{libciomr.a} library.; ",MatchSource.DOCS,doc/sphinxman/source/attic/history.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/history.rst
Modifiability,extend,extend,"%; % History of Psi; %; % Daniel Crawford, 24 January, 1996; %. The PSI suite of {\em ab initio} quantum chemistry programs is the result; of an ongoing attempt by a cadre of graduate students, postdoctoral; associates, and professors to produce code that is efficient but also; easy to extend to new theoretical methods. Significant effort has been; devoted to the development of libraries which are robust and easy to use.; Some of the earliest contributions to what is now referred to as ``PSI''; include a direct configuration interaction (CI) program (Robert Lucchese,; 1976, now at Texas A\&M), the well-known graphical unitary group CI program; (Bernie Brooks, 1977-78, now at N.I.H.), and the original integrals code; (Russ Pitzer, 1978, now at Ohio State). From 1978-1987, the package was; know as the {\tt BERKELEY} suite, and after the Schaefer group moved to the; Center for Computational Quantum Chemistry at the University of Georgia,; the package was renamed {\tt PSI}. Thanks primarily to the efforts of Curt; Janssen (Sandia Labs, Livermore) and Ed Seidl (LLNL), the package was; ported to UNIX systems, and substantially improved with new input formats; and a C-based I/O system. Beginning in 1999, an extensive effort was begun to develop \PSIthree\; --- a {\tt PSI} suite with a completely new face. As a result of this; effort, all of the legacy Fortran code was removed, and everything was; rewritten in C and C++, including new integral/derivative integral,; coupled cluster, and CI codes. In addition, new I/O libraries have; been added, as well as an improved checkpoint file structure and greater; automation of typical tasks such as geometry optimization and frequency; analysis. The package has the capability to determine wavefunctions,; energies, analytic gradients, and various molecular properties based on; a variety of theories, including spin-restricted, spin-unrestricted, and; restricted open-shell Hartree-Fock (RHF, UHF, and ROHF); configuration; interaction (CI",MatchSource.DOCS,doc/sphinxman/source/attic/history.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/history.rst
Performance,optimiz,optimization,"-known graphical unitary group CI program; (Bernie Brooks, 1977-78, now at N.I.H.), and the original integrals code; (Russ Pitzer, 1978, now at Ohio State). From 1978-1987, the package was; know as the {\tt BERKELEY} suite, and after the Schaefer group moved to the; Center for Computational Quantum Chemistry at the University of Georgia,; the package was renamed {\tt PSI}. Thanks primarily to the efforts of Curt; Janssen (Sandia Labs, Livermore) and Ed Seidl (LLNL), the package was; ported to UNIX systems, and substantially improved with new input formats; and a C-based I/O system. Beginning in 1999, an extensive effort was begun to develop \PSIthree\; --- a {\tt PSI} suite with a completely new face. As a result of this; effort, all of the legacy Fortran code was removed, and everything was; rewritten in C and C++, including new integral/derivative integral,; coupled cluster, and CI codes. In addition, new I/O libraries have; been added, as well as an improved checkpoint file structure and greater; automation of typical tasks such as geometry optimization and frequency; analysis. The package has the capability to determine wavefunctions,; energies, analytic gradients, and various molecular properties based on; a variety of theories, including spin-restricted, spin-unrestricted, and; restricted open-shell Hartree-Fock (RHF, UHF, and ROHF); configuration; interaction (CI) (including a variety of multireference CI's and full; CI); coupled-cluster (CC) including CC with variationaly optimized; orbitals; second-order M{\o}ller-Plesset perturbation theory (MPPT); including explicitly correlated second-order M{\o}ller-Plesset energy; (MP2-R12); and complete-active-space self-consistent field (CASSCF); theory. By January 2008, all of the C code in \PSIthree\ was ; converted to C++ to enable a path toward more object-oriented design; and a single-excecutable framework that will facilitate code reuse and ; ease efforts at parallelization. At this same time, all of the legacy",MatchSource.DOCS,doc/sphinxman/source/attic/history.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/history.rst
Availability,avail,available,"; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:mp2`:. Second-order |MollerPlesset| Theory: MP2 and MP2-R12 methods; ============================================================. Second-order |MollerPlesset| theory is one of the most basic; wavefunction approaches which includes electron correlation; directly.; Due to its simplicity, the MP2 method is often the best; level one can afford for a larger molecular system.; At the other end of the spectrum, the MP2-R12 method; of Kutzelnigg, Klopper, and co-workers is a promising; approach to computing MP2 energies in the complete; basis set limit for smaller systems. |PSIfour| is; one of the very few publicly available programs to; feature a robust implementation of the MP2-R12 method. |PSIfour| is capable of computing closed-shell; MP2 and MP2-R12/A energies using integral-direct techniques and a; multithreaded algorithm, which lends itself perfectly for execution ; on symmetric multiprocessor (SMP) machines. |PSIfour| is also; capable of computing RHF, UHF, and ROHF (using semicanonical orbitals); MP2 energies and one-particle density matrices, and RHF MP2 analytic ; gradients. Occupied and virtual orbitals can be frozen during the ; energy calculation, but not for the calculation of the ; one-particle density matrix or the analytic gradient. .. table:: Summary of MP2 and MP2-R12 capabilities in |PSIfour|. +-----------+-----------+---------------+--------------------------+----------+; | Reference | Method | Energy (conv) | Energy (integral-direct) | Gradient |; +===========+===========+===============+==========================+==========+; | RHF | MP2 | Y | Y | Y |; +-----------+-----------+------------",MatchSource.DOCS,doc/sphinxman/source/attic/mp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/mp2.rst
Energy Efficiency,energy,energy,"e most basic; wavefunction approaches which includes electron correlation; directly.; Due to its simplicity, the MP2 method is often the best; level one can afford for a larger molecular system.; At the other end of the spectrum, the MP2-R12 method; of Kutzelnigg, Klopper, and co-workers is a promising; approach to computing MP2 energies in the complete; basis set limit for smaller systems. |PSIfour| is; one of the very few publicly available programs to; feature a robust implementation of the MP2-R12 method. |PSIfour| is capable of computing closed-shell; MP2 and MP2-R12/A energies using integral-direct techniques and a; multithreaded algorithm, which lends itself perfectly for execution ; on symmetric multiprocessor (SMP) machines. |PSIfour| is also; capable of computing RHF, UHF, and ROHF (using semicanonical orbitals); MP2 energies and one-particle density matrices, and RHF MP2 analytic ; gradients. Occupied and virtual orbitals can be frozen during the ; energy calculation, but not for the calculation of the ; one-particle density matrix or the analytic gradient. .. table:: Summary of MP2 and MP2-R12 capabilities in |PSIfour|. +-----------+-----------+---------------+--------------------------+----------+; | Reference | Method | Energy (conv) | Energy (integral-direct) | Gradient |; +===========+===========+===============+==========================+==========+; | RHF | MP2 | Y | Y | Y |; +-----------+-----------+---------------+--------------------------+----------+; | UHF | MP2 | Y | --- | --- |; +-----------+-----------+---------------+--------------------------+----------+; | ROHF | MP2 | Y | --- | --- |; +-----------+-----------+---------------+--------------------------+----------+; | RHF | MP2-R12/A | --- | Y | --- |; +-----------+-----------+---------------+--------------------------+----------+. Basic Keywords; --------------. To compute a ground-state MP2 or MP2-R12 energy at a fixed geometry,; the following keywords are common:. \item[WFN = string]\m",MatchSource.DOCS,doc/sphinxman/source/attic/mp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/mp2.rst
Integrability,rout,routines,"h:`N` is the size of the basis. * If there is not enough memory to perform the computation in one pass,; the program will do multiple passes through the entire set of integrals,; hence your computation will run that many times longer.; In such case, find the machine with the most memory and processors available. * On SMP machines, set the {\tt NUM\_THREADS} to the number of; processors available for the job, or, if all processors are allocated for; your job, set {\tt NUM\_THREADS} to {\em twice} the number of processors; you have. Modern operating systems schedulers are usually very efficient; at handling multithreaded programs, so the overhead of thread context; switching is not significant, but using more threads may lead to better; load balancing, and lower execution times. For example, on a 32-processor; IBM eServer p690 we found that the optimal number of threads was 128.; For the optimal performance, do a few runs with different number of threads; and see which number works best.; Avoid excessively large; number of threads, as this descreases the net amount of memory available to; the computation and thus may increase the number of passes. . * Set the {\tt MEMORY} keyword to the 90% of the available physical; memory, at most. There is a small amount of overhead associated with the; integral-direct algorithms that is not accounted for by the internal memory; handling routines. * The implementation of the integral-direct MP2-R12 (and MP2) method; in |PSIfour| can run efficiently on SMP, or shared-memory, machines,; by utilizing multiple processors via multithreaded approach.; However, it cannot utilize distributed memory machines,; such as commodity (PC) clusters and massively parallel machines,; to their full potential, since one computation can only take advantage; of one node of such machine at a time.; In such environments, the aformentioned MPQC implementation of; the MP2-R12 method should be preferred; (see \url{http://aros.ca.sandia.gov/~cljanss/mpqc/}). ",MatchSource.DOCS,doc/sphinxman/source/attic/mp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/mp2.rst
Modifiability,extend,extended,"ion of the MP2-R12 method implemented in |PSIfour|; is a so-called single-basis MP2-R12 method; in standard approximation A. This means that a basis set; rather complete in Hartree--Fock (or one-particle) sense; is absolutely mandatory for meaningful computations with the MP2-R12; method. The user is strongly urged to read literature on; linear R12 methods before using |PSIfour| to compute MP2-R12; energies. * More robust, two-basis versions; of the MP2-R12 method, also known as the auxiliary basis; MP2-R12 method, have been implemented; in a publicly available Massively Parallel Quantum Chemistry (MPQC); package (see \url{http://aros.ca.sandia.gov/~cljanss/mpqc/}).; The two-basis version of the MP2-R12 method is a theoretically more; sound approach, and thus should be preferred to the single-basis method.; In some situations, however, it may make sense to use; the single-basis method. Larger Calculations; -------------------. Here are a few recommendations for carrying out extended integral-direct MP2 and; MP2-R12 calculations with |PSIfour|: . * While the integral-direct MP2 algorithm doesn't need any; significant disk storage,; the integral-direct algorithm for the MP2-R12 energy; stores the transformed integrals to disk, hence very large; computations will require a lot of disk space. In general; the storage requirement is :math:`16 o^2N^2` bytes, where :math:`o`; is the number of occupied orbitals, and :math:`N` is the size of the basis. * If there is not enough memory to perform the computation in one pass,; the program will do multiple passes through the entire set of integrals,; hence your computation will run that many times longer.; In such case, find the machine with the most memory and processors available. * On SMP machines, set the {\tt NUM\_THREADS} to the number of; processors available for the job, or, if all processors are allocated for; your job, set {\tt NUM\_THREADS} to {\em twice} the number of processors; you have. Modern operating systems sche",MatchSource.DOCS,doc/sphinxman/source/attic/mp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/mp2.rst
Performance,perform,perform," Massively Parallel Quantum Chemistry (MPQC); package (see \url{http://aros.ca.sandia.gov/~cljanss/mpqc/}).; The two-basis version of the MP2-R12 method is a theoretically more; sound approach, and thus should be preferred to the single-basis method.; In some situations, however, it may make sense to use; the single-basis method. Larger Calculations; -------------------. Here are a few recommendations for carrying out extended integral-direct MP2 and; MP2-R12 calculations with |PSIfour|: . * While the integral-direct MP2 algorithm doesn't need any; significant disk storage,; the integral-direct algorithm for the MP2-R12 energy; stores the transformed integrals to disk, hence very large; computations will require a lot of disk space. In general; the storage requirement is :math:`16 o^2N^2` bytes, where :math:`o`; is the number of occupied orbitals, and :math:`N` is the size of the basis. * If there is not enough memory to perform the computation in one pass,; the program will do multiple passes through the entire set of integrals,; hence your computation will run that many times longer.; In such case, find the machine with the most memory and processors available. * On SMP machines, set the {\tt NUM\_THREADS} to the number of; processors available for the job, or, if all processors are allocated for; your job, set {\tt NUM\_THREADS} to {\em twice} the number of processors; you have. Modern operating systems schedulers are usually very efficient; at handling multithreaded programs, so the overhead of thread context; switching is not significant, but using more threads may lead to better; load balancing, and lower execution times. For example, on a 32-processor; IBM eServer p690 we found that the optimal number of threads was 128.; For the optimal performance, do a few runs with different number of threads; and see which number works best.; Avoid excessively large; number of threads, as this descreases the net amount of memory available to; the computation and thus may ",MatchSource.DOCS,doc/sphinxman/source/attic/mp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/mp2.rst
Usability,simpl,simplicity," terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:mp2`:. Second-order |MollerPlesset| Theory: MP2 and MP2-R12 methods; ============================================================. Second-order |MollerPlesset| theory is one of the most basic; wavefunction approaches which includes electron correlation; directly.; Due to its simplicity, the MP2 method is often the best; level one can afford for a larger molecular system.; At the other end of the spectrum, the MP2-R12 method; of Kutzelnigg, Klopper, and co-workers is a promising; approach to computing MP2 energies in the complete; basis set limit for smaller systems. |PSIfour| is; one of the very few publicly available programs to; feature a robust implementation of the MP2-R12 method. |PSIfour| is capable of computing closed-shell; MP2 and MP2-R12/A energies using integral-direct techniques and a; multithreaded algorithm, which lends itself perfectly for execution ; on symmetric multiprocessor (SMP) machines. |PSIfour| is also; capable of computing RHF, UHF, and ROHF (using semicanonical orbitals); MP2 energies and one-particle density matrices, and RHF MP2 analytic ; gradients. Occupied and virtual orbitals can be frozen during the ; energy calculation, but not for the calculation of the ; one-particle density matrix or the analytic gradient. .. table:: Summary of MP2 and MP2-R12 capabilities in ",MatchSource.DOCS,doc/sphinxman/source/attic/mp2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/mp2.rst
Availability,avail,available,"%; % PSI Programmer's Manual; %; % SVN Revision Control Section; % (formerly CVS); %; % TDC, February, 1996; % Modified by TDC, December 2002; % Updated from CVS to SVN, April 2007; %. The subversion control system (SVN) (\htmladdnormallink{{\tt; subversion.tigris.org}}{http://subversion.tigris.org/}) provides a; convenient means by which programmers may obtain the latest (or any; previous) version of the \PSIfour\ source from the main repository or; a branch version, add new code to the source tree or modify existing; \PSIfour\ modules, and then make changes and additions available to; other programmers by checking the modifications back into the main; repository. SVN also provides a ``safety net'' in that any erroneous; modifications to the code may be easily removed once they have been; identified. This section describes how to use SVN to access and; modify the \PSIfour\ source code. (Note that compilation and; installation instructions are given in a separate document.). The main repository for the \PSIfour\ Source code is currently; maintained by the Crawford group at Virginia Tech. To check out the; code, one must first obtain an SVN account by emailing; \htmladdnormallink{{\tt crawdad@vt.edu}}{mailto:crawdad@vt.edu}.; After you have a login-id and password, you are now ready to access; the repository via a secure, SSL-based WebDAV connection, but first; you must decide which version of the code you need. The \PSIfour\ SVN repository contains three top-level directories:; \begin{itemize}; \item {\tt trunk}: The main development area.; \item {\tt branches}: Release branches and private development; branches are stored here.; \item {\tt tags:} Snapshots of the repository corresponding to public; releases are stored here and should {\em never} be modified.; \end{itemize}; If you have a PSI4 SVN account, you can peruse these directories if; you like by pointing web browser to:. \noindent; {\tt https://sirius.chem.vt.edu/svn/psi4/}. \subsection{\PSIfour\ SVN Policie",MatchSource.DOCS,doc/sphinxman/source/attic/proggit.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst
Deployability,install,installation,"%; % PSI Programmer's Manual; %; % SVN Revision Control Section; % (formerly CVS); %; % TDC, February, 1996; % Modified by TDC, December 2002; % Updated from CVS to SVN, April 2007; %. The subversion control system (SVN) (\htmladdnormallink{{\tt; subversion.tigris.org}}{http://subversion.tigris.org/}) provides a; convenient means by which programmers may obtain the latest (or any; previous) version of the \PSIfour\ source from the main repository or; a branch version, add new code to the source tree or modify existing; \PSIfour\ modules, and then make changes and additions available to; other programmers by checking the modifications back into the main; repository. SVN also provides a ``safety net'' in that any erroneous; modifications to the code may be easily removed once they have been; identified. This section describes how to use SVN to access and; modify the \PSIfour\ source code. (Note that compilation and; installation instructions are given in a separate document.). The main repository for the \PSIfour\ Source code is currently; maintained by the Crawford group at Virginia Tech. To check out the; code, one must first obtain an SVN account by emailing; \htmladdnormallink{{\tt crawdad@vt.edu}}{mailto:crawdad@vt.edu}.; After you have a login-id and password, you are now ready to access; the repository via a secure, SSL-based WebDAV connection, but first; you must decide which version of the code you need. The \PSIfour\ SVN repository contains three top-level directories:; \begin{itemize}; \item {\tt trunk}: The main development area.; \item {\tt branches}: Release branches and private development; branches are stored here.; \item {\tt tags:} Snapshots of the repository corresponding to public; releases are stored here and should {\em never} be modified.; \end{itemize}; If you have a PSI4 SVN account, you can peruse these directories if; you like by pointing web browser to:. \noindent; {\tt https://sirius.chem.vt.edu/svn/psi4/}. \subsection{\PSIfour\ SVN Policie",MatchSource.DOCS,doc/sphinxman/source/attic/proggit.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst
Integrability,depend,depends,"o access; the repository via a secure, SSL-based WebDAV connection, but first; you must decide which version of the code you need. The \PSIfour\ SVN repository contains three top-level directories:; \begin{itemize}; \item {\tt trunk}: The main development area.; \item {\tt branches}: Release branches and private development; branches are stored here.; \item {\tt tags:} Snapshots of the repository corresponding to public; releases are stored here and should {\em never} be modified.; \end{itemize}; If you have a PSI4 SVN account, you can peruse these directories if; you like by pointing web browser to:. \noindent; {\tt https://sirius.chem.vt.edu/svn/psi4/}. \subsection{\PSIfour\ SVN Policies: Which Branch Should I Use?}; \label{section:branches}. The \PSIfour\ repository comprises a main trunk and several; release branches. The branch you should use depends on the sort of ; work you plan for the codes:; \begin{enumerate}; \item For any piece of code already in the most recent release, bug; fixes (defined as anything that doesn't add functionality ---; including documentation updates) should be made {\em only} on the; most recent stable release branch.; \item The main trunk is reserved for development of new functionality.; This allows us to keep new, possibly unstable code away from public; access until the code is ready.; \item Code that you do not want to put into next major release of; \PSIfour\ should be put onto a separate branch off the main; trunk. You will be solely responsible for maintenance of the new; branch, so you should read the SVN manual before attempting this.; \end{enumerate}. \noindent Fig.~\ref{Fig:svn} provides a schematic of the SVN revision-control; structure and branch labeling. Two release branches are shown, the current; stable branch, named {\tt psi-3-4}, and a planned future release, to be named; {\tt psi-3-5}. The tags on the branches indicate release shapshots, where; bugs have been fixed and the code has been or will be exported for pub",MatchSource.DOCS,doc/sphinxman/source/attic/proggit.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst
Modifiability,config,configure,"ository. However you should {\em never}; merge such changes into the main trunk yourself.; \item If the bug fix is not critical (e.g. a documentation; update/fix), then you should wait until next patch release when it; will be merged into the main trunk automatically.; \end{enumerate}. \noindent; The following are some of the most commonly used SVN commands for checking; out and updating working copies of the \PSIfour\ source code. \noindent; $\bullet$ To checkout a working copy of the head of the main trunk:. {\tt svn co https://sirius.chem.vt.edu/svn/psi4/trunk/ psi4} . \noindent; $\bullet$ To check out a working copy of the head of a specific release branch,; e.g., the branch labelled {\tt psi-4-0}:. {\tt svn co https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0 psi4}. \noindent Note that subsequent {\tt svn update} commands in this; working copy will provide updates only on the chosen branch. Note; also that after you have checked out a fresh working copy of the code; you must run the {\tt autoconf} command to generate a {\tt configure}; script for building the code. (See the installation manual for; configuration, compilation, and testing instructions.). \noindent For each of the above commands, the working copy of your; code will be placed in the directory \file{psi4}, regardless of your; choice of branch. In this manual, we will refer to this directory; from now on as {\tt \$PSI4}. Subsequent SVN commands are usually run; within this top-level directory. \noindent; $\bullet$ To update your current working copy to include the latest revisions:. {\tt svn update}. \noindent; Notes: (a) This will update only the revisions on your current branch;; (b) The old {\tt -d} and {\tt -P} flags required by CVS are not necessary with SVN. . \noindent; $\bullet$ To convert your working copy to the head of a specific branch:. {\tt svn switch https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0}. \noindent; $\bullet$ To convert your working copy to the head of the main trun",MatchSource.DOCS,doc/sphinxman/source/attic/proggit.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst
Safety,safe,safety,"%; % PSI Programmer's Manual; %; % SVN Revision Control Section; % (formerly CVS); %; % TDC, February, 1996; % Modified by TDC, December 2002; % Updated from CVS to SVN, April 2007; %. The subversion control system (SVN) (\htmladdnormallink{{\tt; subversion.tigris.org}}{http://subversion.tigris.org/}) provides a; convenient means by which programmers may obtain the latest (or any; previous) version of the \PSIfour\ source from the main repository or; a branch version, add new code to the source tree or modify existing; \PSIfour\ modules, and then make changes and additions available to; other programmers by checking the modifications back into the main; repository. SVN also provides a ``safety net'' in that any erroneous; modifications to the code may be easily removed once they have been; identified. This section describes how to use SVN to access and; modify the \PSIfour\ source code. (Note that compilation and; installation instructions are given in a separate document.). The main repository for the \PSIfour\ Source code is currently; maintained by the Crawford group at Virginia Tech. To check out the; code, one must first obtain an SVN account by emailing; \htmladdnormallink{{\tt crawdad@vt.edu}}{mailto:crawdad@vt.edu}.; After you have a login-id and password, you are now ready to access; the repository via a secure, SSL-based WebDAV connection, but first; you must decide which version of the code you need. The \PSIfour\ SVN repository contains three top-level directories:; \begin{itemize}; \item {\tt trunk}: The main development area.; \item {\tt branches}: Release branches and private development; branches are stored here.; \item {\tt tags:} Snapshots of the repository corresponding to public; releases are stored here and should {\em never} be modified.; \end{itemize}; If you have a PSI4 SVN account, you can peruse these directories if; you like by pointing web browser to:. \noindent; {\tt https://sirius.chem.vt.edu/svn/psi4/}. \subsection{\PSIfour\ SVN Policie",MatchSource.DOCS,doc/sphinxman/source/attic/proggit.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst
Security,access,access,"%; % PSI Programmer's Manual; %; % SVN Revision Control Section; % (formerly CVS); %; % TDC, February, 1996; % Modified by TDC, December 2002; % Updated from CVS to SVN, April 2007; %. The subversion control system (SVN) (\htmladdnormallink{{\tt; subversion.tigris.org}}{http://subversion.tigris.org/}) provides a; convenient means by which programmers may obtain the latest (or any; previous) version of the \PSIfour\ source from the main repository or; a branch version, add new code to the source tree or modify existing; \PSIfour\ modules, and then make changes and additions available to; other programmers by checking the modifications back into the main; repository. SVN also provides a ``safety net'' in that any erroneous; modifications to the code may be easily removed once they have been; identified. This section describes how to use SVN to access and; modify the \PSIfour\ source code. (Note that compilation and; installation instructions are given in a separate document.). The main repository for the \PSIfour\ Source code is currently; maintained by the Crawford group at Virginia Tech. To check out the; code, one must first obtain an SVN account by emailing; \htmladdnormallink{{\tt crawdad@vt.edu}}{mailto:crawdad@vt.edu}.; After you have a login-id and password, you are now ready to access; the repository via a secure, SSL-based WebDAV connection, but first; you must decide which version of the code you need. The \PSIfour\ SVN repository contains three top-level directories:; \begin{itemize}; \item {\tt trunk}: The main development area.; \item {\tt branches}: Release branches and private development; branches are stored here.; \item {\tt tags:} Snapshots of the repository corresponding to public; releases are stored here and should {\em never} be modified.; \end{itemize}; If you have a PSI4 SVN account, you can peruse these directories if; you like by pointing web browser to:. \noindent; {\tt https://sirius.chem.vt.edu/svn/psi4/}. \subsection{\PSIfour\ SVN Policie",MatchSource.DOCS,doc/sphinxman/source/attic/proggit.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst
Testability,log,login-id,"ch programmers may obtain the latest (or any; previous) version of the \PSIfour\ source from the main repository or; a branch version, add new code to the source tree or modify existing; \PSIfour\ modules, and then make changes and additions available to; other programmers by checking the modifications back into the main; repository. SVN also provides a ``safety net'' in that any erroneous; modifications to the code may be easily removed once they have been; identified. This section describes how to use SVN to access and; modify the \PSIfour\ source code. (Note that compilation and; installation instructions are given in a separate document.). The main repository for the \PSIfour\ Source code is currently; maintained by the Crawford group at Virginia Tech. To check out the; code, one must first obtain an SVN account by emailing; \htmladdnormallink{{\tt crawdad@vt.edu}}{mailto:crawdad@vt.edu}.; After you have a login-id and password, you are now ready to access; the repository via a secure, SSL-based WebDAV connection, but first; you must decide which version of the code you need. The \PSIfour\ SVN repository contains three top-level directories:; \begin{itemize}; \item {\tt trunk}: The main development area.; \item {\tt branches}: Release branches and private development; branches are stored here.; \item {\tt tags:} Snapshots of the repository corresponding to public; releases are stored here and should {\em never} be modified.; \end{itemize}; If you have a PSI4 SVN account, you can peruse these directories if; you like by pointing web browser to:. \noindent; {\tt https://sirius.chem.vt.edu/svn/psi4/}. \subsection{\PSIfour\ SVN Policies: Which Branch Should I Use?}; \label{section:branches}. The \PSIfour\ repository comprises a main trunk and several; release branches. The branch you should use depends on the sort of ; work you plan for the codes:; \begin{enumerate}; \item For any piece of code already in the most recent release, bug; fixes (defined as anything that ",MatchSource.DOCS,doc/sphinxman/source/attic/proggit.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst
Deployability,install,installation,"The purpose of this manual is to provide a reasonably detailed; overview of the source code and programming philosophy of \PSIfour,; such that programmers interested in contributing to the code will have; an easier task. Section \ref{svn} gives a succint explanation of the; steps required to obtain the source code from the main repository at; Virginia Tech. (Installation instructions are given separately in the; installation manual or in \$PSI4/INSTALL.) \ref{Style} offers advice on; appropriate programming style for \PSIfour\ code, and section \ref{Makefiles}; describes the structure of the package's \file{Makefile}s. Section; The appendices provide important reference material,; including the currently accepted \PSIfour\ citation and format; information for some of the most important text files used by; \PSIfour\ modules. There are many examples included in this document to provide sample input files; and source files; these can be found in ASCII form in the \PSIfour\ source; itself. Each included file has a path, which is relative to; \$PSI4/doc/progman, as its title and this is where the unformatted file can be; found. The examples described herein can even be compiled from the directories; in which the source files are found. Mention the GPL and development policies... ",MatchSource.DOCS,doc/sphinxman/source/attic/progman.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progman.rst
Energy Efficiency,energy,energy,"One of the most significant changes introduced in version 4 was the use of; Python. The input file is actually a Python script, which interacts with a Psi; Python module to perform computations. In order for this to happen, the C++; binding must be known to Python; this is all done in the ; {\tt \$PSI4/src/bin/psi4/python.cc} file. For example, we have an SCF module, with; the C++ signature; {\tt PsiReturnType cscf::cscf(Options \&options);}; To allow Python to use this, we first define a little wrapper function; \begin{verbatim}; double py_psi_scf(); {; if (scf::scf(Process::environment.options) == Success); return Process::environment.globals[""CURRENT ENERGY""];; else; return 0.0;; }; \end{verbatim}; This does a couple of things to automate things a) it passes the default; options object into SCF automatically, so that the user doesn't have to, and b); checks the return value, and will return the energy, which is posted to the; globals map, back to Python. Note that this is C++ code, within \PSIfour\ so; it is aware of all global objects, such as PSIO, Chkpt and Options. Now we; have this simple function call, we can tell Python about it:; \begin{verbatim}; def(""scf"", py_psi_scf);; \end{verbatim}; This binds the keyword ``scf'' to the newly created wrapper function, allowing; the user to type ``scf()'' in their Python input file to fire up the SCF; module. Similarly, the user might want to be able to call {\tt Molecule}'s; member functions directly from Python. This can also be done easily:. \begin{verbatim}; class_<Molecule, shared_ptr<Molecule> >(""Molecule"").; def(""print_to_output"", &Molecule::print).; def(""nuclear_repulsion_energy"", &Molecule::nuclear_repulsion_energy);; \end{verbatim}. This first defines the keyword {\tt Molecule} to refer to the C++ {\tt; Molecule}; the {\tt shared\_ptr<Molecule>} keyword tells Python to store it as; a shared pointer, which ensures that the object will not be deleted until both; C++ and Python have no more references to it. The",MatchSource.DOCS,doc/sphinxman/source/attic/progpycppconnect.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progpycppconnect.rst
Integrability,wrap,wrapper,"One of the most significant changes introduced in version 4 was the use of; Python. The input file is actually a Python script, which interacts with a Psi; Python module to perform computations. In order for this to happen, the C++; binding must be known to Python; this is all done in the ; {\tt \$PSI4/src/bin/psi4/python.cc} file. For example, we have an SCF module, with; the C++ signature; {\tt PsiReturnType cscf::cscf(Options \&options);}; To allow Python to use this, we first define a little wrapper function; \begin{verbatim}; double py_psi_scf(); {; if (scf::scf(Process::environment.options) == Success); return Process::environment.globals[""CURRENT ENERGY""];; else; return 0.0;; }; \end{verbatim}; This does a couple of things to automate things a) it passes the default; options object into SCF automatically, so that the user doesn't have to, and b); checks the return value, and will return the energy, which is posted to the; globals map, back to Python. Note that this is C++ code, within \PSIfour\ so; it is aware of all global objects, such as PSIO, Chkpt and Options. Now we; have this simple function call, we can tell Python about it:; \begin{verbatim}; def(""scf"", py_psi_scf);; \end{verbatim}; This binds the keyword ``scf'' to the newly created wrapper function, allowing; the user to type ``scf()'' in their Python input file to fire up the SCF; module. Similarly, the user might want to be able to call {\tt Molecule}'s; member functions directly from Python. This can also be done easily:. \begin{verbatim}; class_<Molecule, shared_ptr<Molecule> >(""Molecule"").; def(""print_to_output"", &Molecule::print).; def(""nuclear_repulsion_energy"", &Molecule::nuclear_repulsion_energy);; \end{verbatim}. This first defines the keyword {\tt Molecule} to refer to the C++ {\tt; Molecule}; the {\tt shared\_ptr<Molecule>} keyword tells Python to store it as; a shared pointer, which ensures that the object will not be deleted until both; C++ and Python have no more references to it. The",MatchSource.DOCS,doc/sphinxman/source/attic/progpycppconnect.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progpycppconnect.rst
Performance,perform,perform,"One of the most significant changes introduced in version 4 was the use of; Python. The input file is actually a Python script, which interacts with a Psi; Python module to perform computations. In order for this to happen, the C++; binding must be known to Python; this is all done in the ; {\tt \$PSI4/src/bin/psi4/python.cc} file. For example, we have an SCF module, with; the C++ signature; {\tt PsiReturnType cscf::cscf(Options \&options);}; To allow Python to use this, we first define a little wrapper function; \begin{verbatim}; double py_psi_scf(); {; if (scf::scf(Process::environment.options) == Success); return Process::environment.globals[""CURRENT ENERGY""];; else; return 0.0;; }; \end{verbatim}; This does a couple of things to automate things a) it passes the default; options object into SCF automatically, so that the user doesn't have to, and b); checks the return value, and will return the energy, which is posted to the; globals map, back to Python. Note that this is C++ code, within \PSIfour\ so; it is aware of all global objects, such as PSIO, Chkpt and Options. Now we; have this simple function call, we can tell Python about it:; \begin{verbatim}; def(""scf"", py_psi_scf);; \end{verbatim}; This binds the keyword ``scf'' to the newly created wrapper function, allowing; the user to type ``scf()'' in their Python input file to fire up the SCF; module. Similarly, the user might want to be able to call {\tt Molecule}'s; member functions directly from Python. This can also be done easily:. \begin{verbatim}; class_<Molecule, shared_ptr<Molecule> >(""Molecule"").; def(""print_to_output"", &Molecule::print).; def(""nuclear_repulsion_energy"", &Molecule::nuclear_repulsion_energy);; \end{verbatim}. This first defines the keyword {\tt Molecule} to refer to the C++ {\tt; Molecule}; the {\tt shared\_ptr<Molecule>} keyword tells Python to store it as; a shared pointer, which ensures that the object will not be deleted until both; C++ and Python have no more references to it. The",MatchSource.DOCS,doc/sphinxman/source/attic/progpycppconnect.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progpycppconnect.rst
Usability,simpl,simple,"binding must be known to Python; this is all done in the ; {\tt \$PSI4/src/bin/psi4/python.cc} file. For example, we have an SCF module, with; the C++ signature; {\tt PsiReturnType cscf::cscf(Options \&options);}; To allow Python to use this, we first define a little wrapper function; \begin{verbatim}; double py_psi_scf(); {; if (scf::scf(Process::environment.options) == Success); return Process::environment.globals[""CURRENT ENERGY""];; else; return 0.0;; }; \end{verbatim}; This does a couple of things to automate things a) it passes the default; options object into SCF automatically, so that the user doesn't have to, and b); checks the return value, and will return the energy, which is posted to the; globals map, back to Python. Note that this is C++ code, within \PSIfour\ so; it is aware of all global objects, such as PSIO, Chkpt and Options. Now we; have this simple function call, we can tell Python about it:; \begin{verbatim}; def(""scf"", py_psi_scf);; \end{verbatim}; This binds the keyword ``scf'' to the newly created wrapper function, allowing; the user to type ``scf()'' in their Python input file to fire up the SCF; module. Similarly, the user might want to be able to call {\tt Molecule}'s; member functions directly from Python. This can also be done easily:. \begin{verbatim}; class_<Molecule, shared_ptr<Molecule> >(""Molecule"").; def(""print_to_output"", &Molecule::print).; def(""nuclear_repulsion_energy"", &Molecule::nuclear_repulsion_energy);; \end{verbatim}. This first defines the keyword {\tt Molecule} to refer to the C++ {\tt; Molecule}; the {\tt shared\_ptr<Molecule>} keyword tells Python to store it as; a shared pointer, which ensures that the object will not be deleted until both; C++ and Python have no more references to it. The member functions to be bound; are then specified by a chained sequence of {\tt def} calls (note the periods),; terminated by a semicolon. Then, if the user had defined a molecule called; ``water'', they could print its geometry simp",MatchSource.DOCS,doc/sphinxman/source/attic/progpycppconnect.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progpycppconnect.rst
Availability,avail,available,"SIfour\; executables have been installed. The configure script in \$PSI4 ; will take all the necessary files in \$PSI4/tests; with the .in stub: Makefile.in, MakeRules.in, MakeVars.in,; and runtest.pl.in, replace variables with system specific parameters,; and copy/create the testing files and directories in \$prefix/tests.; The tests should be run in the object directory before installation. If you have just added a new module for performing, say multireference ; coupled cluster, and you would like to add a test case to the current ; test suite, here is what you should do. ; \begin{enumerate}; \item Copy one of the existing test case directories to an ; appropriately named directory for the new test case. \item Create an appropriate input file for running the new module. ; Then, if your program produced the correct data, rename; the output files to *.ref. Follow the convention of the ; existing test cases. Make sure you add a descriptive comment to the; input file, stating what the calculation type is. Use the special comment; marker ``\%!'' to do this, so that the comment is inserted into the user's; manual. \item If the test case is small, add the directory name to the list; in \$PSI4/tests/Makefile.in. If the test is particularly tricky,; see the psi\_start or rhf-stab test cases as an example. \item All the testing functionality is located in the perl library; \file{runtest.pl.in}. If you are testing for a quantity that; is not searched for currently, then add a function to the ; library following the format of the functions already available.; If you have added functionality to the \PSIfour\ driver,; make sure to update the appropriate functions in \file{runtest.pl.in}. \item Add the location of the Makefile for the new test case; to the configure script in \$PSI4. \end{enumerate}. Please contact one of the authors of \PSIfour\ before making any; major changes or if you have a problem adding a new test case.; Remember, if all else fails, read the source code. ",MatchSource.DOCS,doc/sphinxman/source/attic/progtestsuite.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtestsuite.rst
Deployability,install,installed,"The \PSIfour\ test suite is designed to maximize code reuse and; provide testing in \$prefix before the \PSIfour\; executables have been installed. The configure script in \$PSI4 ; will take all the necessary files in \$PSI4/tests; with the .in stub: Makefile.in, MakeRules.in, MakeVars.in,; and runtest.pl.in, replace variables with system specific parameters,; and copy/create the testing files and directories in \$prefix/tests.; The tests should be run in the object directory before installation. If you have just added a new module for performing, say multireference ; coupled cluster, and you would like to add a test case to the current ; test suite, here is what you should do. ; \begin{enumerate}; \item Copy one of the existing test case directories to an ; appropriately named directory for the new test case. \item Create an appropriate input file for running the new module. ; Then, if your program produced the correct data, rename; the output files to *.ref. Follow the convention of the ; existing test cases. Make sure you add a descriptive comment to the; input file, stating what the calculation type is. Use the special comment; marker ``\%!'' to do this, so that the comment is inserted into the user's; manual. \item If the test case is small, add the directory name to the list; in \$PSI4/tests/Makefile.in. If the test is particularly tricky,; see the psi\_start or rhf-stab test cases as an example. \item All the testing functionality is located in the perl library; \file{runtest.pl.in}. If you are testing for a quantity that; is not searched for currently, then add a function to the ; library following the format of the functions already available.; If you have added functionality to the \PSIfour\ driver,; make sure to update the appropriate functions in \file{runtest.pl.in}. \item Add the location of the Makefile for the new test case; to the configure script in \$PSI4. \end{enumerate}. Please contact one of the authors of \PSIfour\ before making any; major chan",MatchSource.DOCS,doc/sphinxman/source/attic/progtestsuite.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtestsuite.rst
Modifiability,config,configure,"The \PSIfour\ test suite is designed to maximize code reuse and; provide testing in \$prefix before the \PSIfour\; executables have been installed. The configure script in \$PSI4 ; will take all the necessary files in \$PSI4/tests; with the .in stub: Makefile.in, MakeRules.in, MakeVars.in,; and runtest.pl.in, replace variables with system specific parameters,; and copy/create the testing files and directories in \$prefix/tests.; The tests should be run in the object directory before installation. If you have just added a new module for performing, say multireference ; coupled cluster, and you would like to add a test case to the current ; test suite, here is what you should do. ; \begin{enumerate}; \item Copy one of the existing test case directories to an ; appropriately named directory for the new test case. \item Create an appropriate input file for running the new module. ; Then, if your program produced the correct data, rename; the output files to *.ref. Follow the convention of the ; existing test cases. Make sure you add a descriptive comment to the; input file, stating what the calculation type is. Use the special comment; marker ``\%!'' to do this, so that the comment is inserted into the user's; manual. \item If the test case is small, add the directory name to the list; in \$PSI4/tests/Makefile.in. If the test is particularly tricky,; see the psi\_start or rhf-stab test cases as an example. \item All the testing functionality is located in the perl library; \file{runtest.pl.in}. If you are testing for a quantity that; is not searched for currently, then add a function to the ; library following the format of the functions already available.; If you have added functionality to the \PSIfour\ driver,; make sure to update the appropriate functions in \file{runtest.pl.in}. \item Add the location of the Makefile for the new test case; to the configure script in \$PSI4. \end{enumerate}. Please contact one of the authors of \PSIfour\ before making any; major chan",MatchSource.DOCS,doc/sphinxman/source/attic/progtestsuite.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtestsuite.rst
Performance,perform,performing,"The \PSIfour\ test suite is designed to maximize code reuse and; provide testing in \$prefix before the \PSIfour\; executables have been installed. The configure script in \$PSI4 ; will take all the necessary files in \$PSI4/tests; with the .in stub: Makefile.in, MakeRules.in, MakeVars.in,; and runtest.pl.in, replace variables with system specific parameters,; and copy/create the testing files and directories in \$prefix/tests.; The tests should be run in the object directory before installation. If you have just added a new module for performing, say multireference ; coupled cluster, and you would like to add a test case to the current ; test suite, here is what you should do. ; \begin{enumerate}; \item Copy one of the existing test case directories to an ; appropriately named directory for the new test case. \item Create an appropriate input file for running the new module. ; Then, if your program produced the correct data, rename; the output files to *.ref. Follow the convention of the ; existing test cases. Make sure you add a descriptive comment to the; input file, stating what the calculation type is. Use the special comment; marker ``\%!'' to do this, so that the comment is inserted into the user's; manual. \item If the test case is small, add the directory name to the list; in \$PSI4/tests/Makefile.in. If the test is particularly tricky,; see the psi\_start or rhf-stab test cases as an example. \item All the testing functionality is located in the perl library; \file{runtest.pl.in}. If you are testing for a quantity that; is not searched for currently, then add a function to the ; library following the format of the functions already available.; If you have added functionality to the \PSIfour\ driver,; make sure to update the appropriate functions in \file{runtest.pl.in}. \item Add the location of the Makefile for the new test case; to the configure script in \$PSI4. \end{enumerate}. Please contact one of the authors of \PSIfour\ before making any; major chan",MatchSource.DOCS,doc/sphinxman/source/attic/progtestsuite.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtestsuite.rst
Testability,test,test,"The \PSIfour\ test suite is designed to maximize code reuse and; provide testing in \$prefix before the \PSIfour\; executables have been installed. The configure script in \$PSI4 ; will take all the necessary files in \$PSI4/tests; with the .in stub: Makefile.in, MakeRules.in, MakeVars.in,; and runtest.pl.in, replace variables with system specific parameters,; and copy/create the testing files and directories in \$prefix/tests.; The tests should be run in the object directory before installation. If you have just added a new module for performing, say multireference ; coupled cluster, and you would like to add a test case to the current ; test suite, here is what you should do. ; \begin{enumerate}; \item Copy one of the existing test case directories to an ; appropriately named directory for the new test case. \item Create an appropriate input file for running the new module. ; Then, if your program produced the correct data, rename; the output files to *.ref. Follow the convention of the ; existing test cases. Make sure you add a descriptive comment to the; input file, stating what the calculation type is. Use the special comment; marker ``\%!'' to do this, so that the comment is inserted into the user's; manual. \item If the test case is small, add the directory name to the list; in \$PSI4/tests/Makefile.in. If the test is particularly tricky,; see the psi\_start or rhf-stab test cases as an example. \item All the testing functionality is located in the perl library; \file{runtest.pl.in}. If you are testing for a quantity that; is not searched for currently, then add a function to the ; library following the format of the functions already available.; If you have added functionality to the \PSIfour\ driver,; make sure to update the appropriate functions in \file{runtest.pl.in}. \item Add the location of the Makefile for the new test case; to the configure script in \$PSI4. \end{enumerate}. Please contact one of the authors of \PSIfour\ before making any; major chan",MatchSource.DOCS,doc/sphinxman/source/attic/progtestsuite.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtestsuite.rst
Availability,down,down," to different parts of the code, but having; the same name, would cause conflicts. The \module{read\_options} function is; responsible for setting up the \module{Options} object, which contains the list; of user-provided options. Lines 25--32 are important - these provide the list; of keywords expected by the code, their types, and their default values (if; any). This part of the code will be inserted into the \PSIfour\ driver when; the module is ready for merging with the \PSIfour\ distribution; this process; will be detailed later in the chapter. Notice the special format of the; comments on lines 27 and 30. These are still valid \module{C++} comments, but; the extra hyphens inside are essential in this context. Whenever adding any; options for any module, you must comment them as shown - this will ensure that; the keywords are automatically inserted into the \PSIfour\ users' manual. The; \module{main} function does a little setting up of the \PSI\ input and output; environments, before calling the module code we're developing (on line 53) and; shutting down the \PSIfour\ I/O systems. The module we're developing is in the following source file. \includesource{sample-codes/integrals/integrals.cc}{C++}. Given the extensive documentation within the code, we'll not describe this file; line-by-line; however, some points warrant elaboration. Notice that the entire; module is encapsulated in the \module{psi::integrals} namespace (lines 6 and; 92). This simple example has only one function body, which lives in a single; source file - if more functions and/or source files were added, these too would; have to live in the \module{psi::integrals} namespace. On lines 29 and 31 of; \file{main.cc} we told the parser which keywords to expect, and provided; default values in case the user omited them from the input. This makes; retrieving these options very clean and simple ({\it c.f.} lines 11 and 12 of; \file{integrals.cc}). Each \PSIfour\ module will have to initialize its own; ",MatchSource.DOCS,doc/sphinxman/source/attic/progtutorial.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtutorial.rst
Deployability,integrat,integrated,"As noted previously, we want to start from a code that's not too tightly; integrated with the \PSIfour\ code itself, so we begin with a \file{Makefile}; that will allow us to write a standalone code that includes all requisite \PSI\; libraries. We're going to write a small sample code that generates integrals,; which involves two just two source files. We begin by defining a; \file{Makefile} that will include all of the \PSIfour\ libraries and header; files, so that we can take full advantage of the wide range of features; implemented without having to worry about the details of their implementation. \includesource{sample-codes/integrals/Makefile}{make}. Only a few lines of this makefile need to be modified to utilize it for other; programming projects; we'll concentrate on them. On the second line, we define; the name of the executable to be generated, in this example we opt for the; unimaginative title of \module{integrals}. Line 4 provides the list of source files; that the project comprises; these will be detailed below. The top source; directory for the \PSIfour\ installation and the top object directory (where; \PSIfour\ was compiled) should be provided on lines 6 and 8, respectively.; Lines 10 and 11 describe the flags needed to link in the \module{BLAS} and; \module{LAPACK} libraries and might need a combination of ``\file{-L; folder\_name}'' and ``\file{-l library\_name}'', depending on your system's; setup. Finally, the compiler and flags are detailed on lines 12--17. It's a; good idea to use the flags described on line 16 for development; they speed up; code compilation and provide lots of information for standard debugging tools.; As noted in the \file{Makefile} itself, nothing below line 17 should require; modification for any other \PSIfour\ project. The \PSIfour\ driver program provides a lot of functionality that we forgo in; writing a standalone code; this is instead emulated in the {\tt main.cc} file,; shown below. \includesource{sample-codes/integr",MatchSource.DOCS,doc/sphinxman/source/attic/progtutorial.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtutorial.rst
Energy Efficiency,allocate,allocated,"ing any; options for any module, you must comment them as shown - this will ensure that; the keywords are automatically inserted into the \PSIfour\ users' manual. The; \module{main} function does a little setting up of the \PSI\ input and output; environments, before calling the module code we're developing (on line 53) and; shutting down the \PSIfour\ I/O systems. The module we're developing is in the following source file. \includesource{sample-codes/integrals/integrals.cc}{C++}. Given the extensive documentation within the code, we'll not describe this file; line-by-line; however, some points warrant elaboration. Notice that the entire; module is encapsulated in the \module{psi::integrals} namespace (lines 6 and; 92). This simple example has only one function body, which lives in a single; source file - if more functions and/or source files were added, these too would; have to live in the \module{psi::integrals} namespace. On lines 29 and 31 of; \file{main.cc} we told the parser which keywords to expect, and provided; default values in case the user omited them from the input. This makes; retrieving these options very clean and simple ({\it c.f.} lines 11 and 12 of; \file{integrals.cc}). Each \PSIfour\ module will have to initialize its own; local \module{PSIO} and \module{Chkpt} objects to perform I/O and to retrieve; information from previously run modules. Notice that these objects are created; within smart pointers (see section XXX for more information) so that they are; automatically deleted when they go out of scope, thus reducing the burden on; the programmer. Likewise, the basis sets, matrices and integral objects are; allocated using smart pointers. The code described above can be built by simply typing ``make'' on the command; line. To run this code, you must first run the \module{input} module to read; in the basis set information. A \PSI\ input for this code should look some; thing like the following:. \includeinput{sample-codes/integrals/input.dat}; ",MatchSource.DOCS,doc/sphinxman/source/attic/progtutorial.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtutorial.rst
Integrability,integrat,integrated,"As noted previously, we want to start from a code that's not too tightly; integrated with the \PSIfour\ code itself, so we begin with a \file{Makefile}; that will allow us to write a standalone code that includes all requisite \PSI\; libraries. We're going to write a small sample code that generates integrals,; which involves two just two source files. We begin by defining a; \file{Makefile} that will include all of the \PSIfour\ libraries and header; files, so that we can take full advantage of the wide range of features; implemented without having to worry about the details of their implementation. \includesource{sample-codes/integrals/Makefile}{make}. Only a few lines of this makefile need to be modified to utilize it for other; programming projects; we'll concentrate on them. On the second line, we define; the name of the executable to be generated, in this example we opt for the; unimaginative title of \module{integrals}. Line 4 provides the list of source files; that the project comprises; these will be detailed below. The top source; directory for the \PSIfour\ installation and the top object directory (where; \PSIfour\ was compiled) should be provided on lines 6 and 8, respectively.; Lines 10 and 11 describe the flags needed to link in the \module{BLAS} and; \module{LAPACK} libraries and might need a combination of ``\file{-L; folder\_name}'' and ``\file{-l library\_name}'', depending on your system's; setup. Finally, the compiler and flags are detailed on lines 12--17. It's a; good idea to use the flags described on line 16 for development; they speed up; code compilation and provide lots of information for standard debugging tools.; As noted in the \file{Makefile} itself, nothing below line 17 should require; modification for any other \PSIfour\ project. The \PSIfour\ driver program provides a lot of functionality that we forgo in; writing a standalone code; this is instead emulated in the {\tt main.cc} file,; shown below. \includesource{sample-codes/integr",MatchSource.DOCS,doc/sphinxman/source/attic/progtutorial.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtutorial.rst
Performance,perform,perform,"ing any; options for any module, you must comment them as shown - this will ensure that; the keywords are automatically inserted into the \PSIfour\ users' manual. The; \module{main} function does a little setting up of the \PSI\ input and output; environments, before calling the module code we're developing (on line 53) and; shutting down the \PSIfour\ I/O systems. The module we're developing is in the following source file. \includesource{sample-codes/integrals/integrals.cc}{C++}. Given the extensive documentation within the code, we'll not describe this file; line-by-line; however, some points warrant elaboration. Notice that the entire; module is encapsulated in the \module{psi::integrals} namespace (lines 6 and; 92). This simple example has only one function body, which lives in a single; source file - if more functions and/or source files were added, these too would; have to live in the \module{psi::integrals} namespace. On lines 29 and 31 of; \file{main.cc} we told the parser which keywords to expect, and provided; default values in case the user omited them from the input. This makes; retrieving these options very clean and simple ({\it c.f.} lines 11 and 12 of; \file{integrals.cc}). Each \PSIfour\ module will have to initialize its own; local \module{PSIO} and \module{Chkpt} objects to perform I/O and to retrieve; information from previously run modules. Notice that these objects are created; within smart pointers (see section XXX for more information) so that they are; automatically deleted when they go out of scope, thus reducing the burden on; the programmer. Likewise, the basis sets, matrices and integral objects are; allocated using smart pointers. The code described above can be built by simply typing ``make'' on the command; line. To run this code, you must first run the \module{input} module to read; in the basis set information. A \PSI\ input for this code should look some; thing like the following:. \includeinput{sample-codes/integrals/input.dat}; ",MatchSource.DOCS,doc/sphinxman/source/attic/progtutorial.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtutorial.rst
Usability,simpl,simple,"ial format of the; comments on lines 27 and 30. These are still valid \module{C++} comments, but; the extra hyphens inside are essential in this context. Whenever adding any; options for any module, you must comment them as shown - this will ensure that; the keywords are automatically inserted into the \PSIfour\ users' manual. The; \module{main} function does a little setting up of the \PSI\ input and output; environments, before calling the module code we're developing (on line 53) and; shutting down the \PSIfour\ I/O systems. The module we're developing is in the following source file. \includesource{sample-codes/integrals/integrals.cc}{C++}. Given the extensive documentation within the code, we'll not describe this file; line-by-line; however, some points warrant elaboration. Notice that the entire; module is encapsulated in the \module{psi::integrals} namespace (lines 6 and; 92). This simple example has only one function body, which lives in a single; source file - if more functions and/or source files were added, these too would; have to live in the \module{psi::integrals} namespace. On lines 29 and 31 of; \file{main.cc} we told the parser which keywords to expect, and provided; default values in case the user omited them from the input. This makes; retrieving these options very clean and simple ({\it c.f.} lines 11 and 12 of; \file{integrals.cc}). Each \PSIfour\ module will have to initialize its own; local \module{PSIO} and \module{Chkpt} objects to perform I/O and to retrieve; information from previously run modules. Notice that these objects are created; within smart pointers (see section XXX for more information) so that they are; automatically deleted when they go out of scope, thus reducing the burden on; the programmer. Likewise, the basis sets, matrices and integral objects are; allocated using smart pointers. The code described above can be built by simply typing ``make'' on the command; line. To run this code, you must first run the \module{input} mod",MatchSource.DOCS,doc/sphinxman/source/attic/progtutorial.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtutorial.rst
Deployability,install,installed,"is set specifictation is; molecule mymol {; # water dimer where; O -2 0 0; H_hb -1 0 0; H -1 -1 0; --; O 2 0 0; H_hb 1 0 0; H 2 1 0; }; * per molecule; set basis cc-pv(d+d)z; --or--; basis mydz {; assign cc-pv(d+d)z; }; ; * per element; basis mydz {; assign cc-pv(d+d)z; ; * per . <<< Q for Jet/Andy/Rob >>>. * Shouldn't lock_frame_ be reset to False for set_basis_all_atoms/by_symbol/by_label?; Need to trigger reeval of symm upon geometry_update(). Doing this with set_shell.... * Ok that maybe can't form a basisset name using a key that's not a keyword. * Ok to remove parser from arg list. * since set_basis by number being removed from user domain, switching it to 0-indexing (more natural; for c-side prog code) and to not indluce dummies (why give a dummy a basis set). * ok that symm lowering won't show up until basis built?. * order of searching for basissets. * get approval for bas search order: strings, here, PSIPATH, library (I think). <<< todo >>>. * make sure PSIDATDIR getting searched right, esp for installed copy. * transfer load_basis printing to output file. * check puream handling. * get correct full PT basis aux sets. * empty mol before adding basis sets in basis {} block; * establish that a basis spec must cover the whole molecule. << boost::shared_ptr<BasisSetParser> parser(new Gaussian94BasisSetParser());; << basisset_ = BasisSet::construct(parser, molecule_, ""BASIS"");. >> basisset_ = BasisSet::pyconstruct(molecule_, ""BASIS"", options_.get_str(""BASIS""));. << boost::shared_ptr<BasisSet> auxiliary = BasisSet::construct(parser, primary->molecule(), ""DF_BASIS_SCF"");. >> boost::shared_ptr<BasisSet> auxiliary = BasisSet::pyconstruct(primary->molecule(),; ""DF_BASIS_SCF"", options.get_str(""DF_BASIS_SCF""), ""JKFIT"", options.get_str(""BASIS""));. boost::shared_ptr<BasisSetParser> parser(new Gaussian94BasisSetParser(old_forced_puream));; molecule_->set_basis_all_atoms(basisname, ""DUAL_BASIS_SCF"");; boost::shared_ptr<BasisSet> dual_basis = BasisSet::construct(parser, mo",MatchSource.DOCS,doc/sphinxman/source/attic/prog_basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/prog_basissets.rst
Safety,safe,safe," objects has been changed. Advantages to New Scheme (aka *Why*); ------------------------------------. - Defaults for fitting basis sets set on a per-atom basis (*e.g.*, DF-SCF; on metal-organic with cc-pVDZ uses cc-pVDZ-JKFIT for the organic and; Def2-tzvpp (or something) for the metal) so that the user shouldn't; experience a failed job on account of incomplete fitting basis sets. - All default info for auxiliary basis sets in one place. Programmer when; calling for a new auxiliary BasisSet gives the fitting role if defaults; need to be computed (e.g., JKFIT) and the orbital basis to compute; defaults off of (e.g., get_option(BASIS)). This eliminates all the; ""corresponding_jkfit"" boilerplate in ``proc.py`` and also means defaults; can be assigned for non-uniform orbital basis sets. - Assignment of basis sets to atoms proceeds through ""all"", ""by_symbol""; (e.g., ""Co""), or ""by_label"" (e.g., H1 or Co_mine). There is *no*; assignment to atoms by number (except a bit internally where it's safe); which can be ambiguous when the Molecule has been fragmented as for SAPT. - Users don't need to ""set basis basisname"" after every `molecule {...}`; definition or activation because basis sets are not attached to the; molecule at time option is set but at time BasisSet is built. Similarly,; once can define a `basis basisname {...}` block and use it for multiple; molecules. BasisSet gives the option name where any user intentions as to proper; value may be found (DF_BASIS_SCF), the name by which the new basis can be; recalled (get_str('DF_BASIS_SCF')), the fitting role if defaults need to; be computed (JKFIT), the. *How* for Programmers; ---------------------. To get a BasisSet object into your module, just call `pyconstruct` where; formerly you called `construct`. There are two flavors, one for orbital; basis sets and one for auxiliary basis sets. There's no difference in the; BasisSet objects they return or even the code used to assemble them- the; two flavors are just for sane",MatchSource.DOCS,doc/sphinxman/source/attic/prog_basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/prog_basissets.rst
Usability,simpl,simple," be; recalled (get_str('DF_BASIS_SCF')), the fitting role if defaults need to; be computed (JKFIT), the. *How* for Programmers; ---------------------. To get a BasisSet object into your module, just call `pyconstruct` where; formerly you called `construct`. There are two flavors, one for orbital; basis sets and one for auxiliary basis sets. There's no difference in the; BasisSet objects they return or even the code used to assemble them- the; two flavors are just for sane argument naming and to establish different; signatures for Boost binding. Orbital Basis; *************. Give the function a Molecule object for which to build basis, a label for; the basis (generally, BASIS), and a hint for finding the basis. This last; argument gets used to find a python function by that name camoflaged; (that's what ``basis {...}`` blocks in the input file get translated into); or failing that a string to find a gbs file defining the basis. ::. // simple; boost::shared_ptr<BasisSet> primary = BasisSet::pyconstruct_orbital(molecule, ; ""BASIS"", ""CC-PVDZ"");. // self-contained; boost::shared_ptr<BasisSet> primary = BasisSet::pyconstruct_orbital(Process::environment.molecule(),; ""BASIS"", Process::environment.options.get_str(""BASIS""));. Auxiliary Basis; ***************. Give the function a Molecule object for which to build basis, a label for; the basis, a hint for finding the basis, a fitting role to apply if; defaults need to be generated, and a hint for finding the orbital basis to; build defaults against. ::. // simple; boost::shared_ptr<BasisSet> auxiliary = BasisSet::pyconstruct_auxiliary(molecule,; ""DF_BASIS_SCF"", """", ; ""JKFIT"", ""CC-PVDZ"");. // self-contained and force Spherical; boost::shared_ptr<BasisSet> auxiliary = BasisSet::pyconstruct_auxiliary(Process::environment.molecule(),; ""DF_BASIS_SCF"", Process::environment.options.get_str(""DF_BASIS_SCF""), ; ""JKFIT"", Process:environment.options.get_str(""BASIS""), 1);. Adding Basis Option to Code; ***************************. - Registe",MatchSource.DOCS,doc/sphinxman/source/attic/prog_basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/prog_basissets.rst
Integrability,depend,depends,"; .. include:: /autodoc_abbr_options_c.rst; .. include:: /autodoc_abbr_options_plugins.rst. Theory, Usage, and Notes; ------------------------. .. codeauthor:: Psi4 Developer; .. sectionauthor:: Psi4 Developer. Casual documentation for this plugin goes here.; Uncomment the ``.. comment`` for some examples. .. comment * this plugin solves :math:`H=F_A+W_A+F_B+W_B+V`; .. comment * reference to keyword |globals__docc| and |myplugin1__print|; .. comment * returns :psivar:`CURRENT ENERGY <CURRENTENERGY>` in |kcalpermol|; .. comment * operation depends on :envvar:`OMP_NUM_THREADS`.; .. comment * operation requires external software described in :ref:`sec:interfacing`; .. comment ; .. comment .. caution:: Some features are not yet implemented.; .. comment ; .. comment - Do not run plugin more than ten feet away from developer.; .. comment ; .. comment - Do not run plugin on benzene dimer. ",MatchSource.DOCS,tests/dftd3/psithon2/psiaux1/myplugin1/doc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/psithon2/psiaux1/myplugin1/doc.rst
Modifiability,plugin,plugin,"; .. include:: /autodoc_abbr_options_c.rst; .. include:: /autodoc_abbr_options_plugins.rst. Theory, Usage, and Notes; ------------------------. .. codeauthor:: Psi4 Developer; .. sectionauthor:: Psi4 Developer. Casual documentation for this plugin goes here.; Uncomment the ``.. comment`` for some examples. .. comment * this plugin solves :math:`H=F_A+W_A+F_B+W_B+V`; .. comment * reference to keyword |globals__docc| and |myplugin1__print|; .. comment * returns :psivar:`CURRENT ENERGY <CURRENTENERGY>` in |kcalpermol|; .. comment * operation depends on :envvar:`OMP_NUM_THREADS`.; .. comment * operation requires external software described in :ref:`sec:interfacing`; .. comment ; .. comment .. caution:: Some features are not yet implemented.; .. comment ; .. comment - Do not run plugin more than ten feet away from developer.; .. comment ; .. comment - Do not run plugin on benzene dimer. ",MatchSource.DOCS,tests/dftd3/psithon2/psiaux1/myplugin1/doc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/psithon2/psiaux1/myplugin1/doc.rst
Integrability,depend,depends,"; .. include:: /autodoc_abbr_options_c.rst; .. include:: /autodoc_abbr_options_plugins.rst. Theory, Usage, and Notes; ------------------------. .. codeauthor:: Psi4 Developer; .. sectionauthor:: Psi4 Developer. Casual documentation for this plugin goes here.; Uncomment the ``.. comment`` for some examples. .. comment * this plugin solves :math:`H=F_A+W_A+F_B+W_B+V`; .. comment * reference to keyword |globals__docc| and |myplugin1__print|; .. comment * returns :psivar:`CURRENT ENERGY <CURRENTENERGY>` in |kcalpermol|; .. comment * operation depends on :envvar:`OMP_NUM_THREADS`.; .. comment * operation requires external software described in :ref:`sec:interfacing`; .. comment ; .. comment .. caution:: Some features are not yet implemented.; .. comment ; .. comment - Do not run plugin more than ten feet away from developer.; .. comment ; .. comment - Do not run plugin on benzene dimer. ",MatchSource.DOCS,tests/psithon2/psiaux1/myplugin1/doc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psithon2/psiaux1/myplugin1/doc.rst
Modifiability,plugin,plugin,"; .. include:: /autodoc_abbr_options_c.rst; .. include:: /autodoc_abbr_options_plugins.rst. Theory, Usage, and Notes; ------------------------. .. codeauthor:: Psi4 Developer; .. sectionauthor:: Psi4 Developer. Casual documentation for this plugin goes here.; Uncomment the ``.. comment`` for some examples. .. comment * this plugin solves :math:`H=F_A+W_A+F_B+W_B+V`; .. comment * reference to keyword |globals__docc| and |myplugin1__print|; .. comment * returns :psivar:`CURRENT ENERGY <CURRENTENERGY>` in |kcalpermol|; .. comment * operation depends on :envvar:`OMP_NUM_THREADS`.; .. comment * operation requires external software described in :ref:`sec:interfacing`; .. comment ; .. comment .. caution:: Some features are not yet implemented.; .. comment ; .. comment - Do not run plugin more than ten feet away from developer.; .. comment ; .. comment - Do not run plugin on benzene dimer. ",MatchSource.DOCS,tests/psithon2/psiaux1/myplugin1/doc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/psithon2/psiaux1/myplugin1/doc.rst
Availability,failure,failures,"nabling Fortran language even when Fortran addons enabled. Use when only linking pre-built, not compiling addon code."" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); if(psi4_SKIP_ENABLE_Fortran); message(STATUS ""NOT Enabling Fortran""); else(); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. It's toast (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); include(xhost) # defines: option(ENABLE_XHOST ""Enable processor-specific optimization"" ON); # below are uncommon to adjust; option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_print(ENABLE_CYTHONIZE ""Compile each python file rather than plaintext (requires cython) !experimental!"" OFF); option_with_f",MatchSource.DOCS,CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt
Deployability,install,install-,"_TIMESTAMP in CMake 3.24:; cmake_policy(SET CMP0135 NEW); endif(); # 3.15: useable FindPython with NumPy component and LOCATION; # 3.8: CXX_STANDARD recognizes C++17; # 3.3: EP_add(DEPENDS interfacelib, CheckFortranCompilerFlag; # 3.2: continue(); # 3.1: CMAKE_CXX_STANDARD, BUILD_ALWAYS. set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build."") # foil Ninja Debug on Windows. project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `co",MatchSource.DOCS,CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt
Integrability,interface,interfacelib,"############################# Superbuild Project #############################; cmake_minimum_required(VERSION 3.15 FATAL_ERROR); cmake_policy(SET CMP0094 NEW); cmake_policy(SET CMP0075 NEW); # cmake_policy(SET CMP0144 NEW); if (CMAKE_VERSION VERSION_GREATER_EQUAL ""3.24.0""); # Avoid warning about DOWNLOAD_EXTRACT_TIMESTAMP in CMake 3.24:; cmake_policy(SET CMP0135 NEW); endif(); # 3.15: useable FindPython with NumPy component and LOCATION; # 3.8: CXX_STANDARD recognizes C++17; # 3.3: EP_add(DEPENDS interfacelib, CheckFortranCompilerFlag; # 3.2: continue(); # 3.1: CMAKE_CXX_STANDARD, BUILD_ALWAYS. set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build."") # foil Ninja Debug on Windows. project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runt",MatchSource.DOCS,CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt
Modifiability,variab,variables,"`conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, Einsums, erd, gau2grid, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelemental, qcengine, optking, simint, Libxc; # - CMAKE_PREFIX_PATH",MatchSource.DOCS,CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt
Performance,optimiz,optimization,"ified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); include(xhost) # defines: option(ENABLE_XHOST ""Enable processor-specific optimization"" ON); # below are uncommon to adjust; option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_print(ENABLE_CYTHONIZE ""Compile each python file rather than plaintext (requires cython) !experimental!"" OFF); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals. The definition changed with Libint2 but still single integer. Default f",MatchSource.DOCS,CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt
Safety,avoid,avoidable,"CENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ fla",MatchSource.DOCS,CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt
Security,sanitiz,sanitizer,"ified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); include(xhost) # defines: option(ENABLE_XHOST ""Enable processor-specific optimization"" ON); # below are uncommon to adjust; option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_print(ENABLE_CYTHONIZE ""Compile each python file rather than plaintext (requires cython) !experimental!"" OFF); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals. The definition changed with Libint2 but still single integer. Default f",MatchSource.DOCS,CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt
Testability,test,tests," (CMAKE_VERSION VERSION_GREATER_EQUAL ""3.24.0""); # Avoid warning about DOWNLOAD_EXTRACT_TIMESTAMP in CMake 3.24:; cmake_policy(SET CMP0135 NEW); endif(); # 3.15: useable FindPython with NumPy component and LOCATION; # 3.8: CXX_STANDARD recognizes C++17; # 3.3: EP_add(DEPENDS interfacelib, CheckFortranCompilerFlag; # 3.2: continue(); # 3.1: CMAKE_CXX_STANDARD, BUILD_ALWAYS. set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build."") # foil Ninja Debug on Windows. project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Li",MatchSource.DOCS,CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt
Availability,error,error," EXCLUDE; # below place extra files the ctests-run-as-pytests need; PATTERN ""adcc/formaldehyde-pe-adc1/fa_6w.pot""; PATTERN ""adcc/formaldehyde-pe-adc2/fa_6w.pot""; PATTERN ""ci-property/grid.dat""; PATTERN ""scf-property/grid.dat""; PATTERN ""mp2-property/grid.dat""; PATTERN ""cubeprop*/*cube.ref""; PATTERN ""fcidump/*INTDUMP.ref""; PATTERN ""psithon2/psiaux1/*""; PATTERN ""psithon2/psiaux1/myplugin1/*""; PATTERN ""psithon2/psiaux2/*""; PATTERN ""dftd3/psithon2/psiaux1/*""; PATTERN ""dftd3/psithon2/psiaux1/myplugin1/*""; PATTERN ""dftd3/psithon2/psiaux2/*""; PATTERN ""mints3/L*dat""; PATTERN ""mints3/P*dat""; ). # <<< install psi4 share/ & include/ >>>. install(DIRECTORY share/psi4/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4; MESSAGE_NEVER; PATTERN ""*.bin"" EXCLUDE; PATTERN ""*.pyc"" EXCLUDE). install(FILES share/psi4/quadratures/1_x/R_avail${_endian_ext}.bin; RENAME quadratures/1_x/R_avail.bin; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4). install(FILES share/psi4/quadratures/1_x/error${_endian_ext}.bin; RENAME quadratures/1_x/error.bin; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4). install(DIRECTORY include/psi4/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}/psi4). # <<< install external's share/ to psi4 share/ >>>. if(TARGET libefp::efp); # bring libefp's fraglib to PSIDATADIR's attention; set(_fraglib_in_psi4_dir ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4/efpfrag). add_custom_target(consolidate_psidatadir ALL; VERBATIM; COMMAND ${CMAKE_COMMAND} -E make_directory ${_fraglib_in_psi4_dir}; COMMENT ""Symlink external resources into PSIDATADIR""). file(GLOB _dotefps ""${libefp_FRAGLIB_DIRS}/*.efp""); foreach(_dotefp ${_dotefps}); get_filename_component(_efpfile ${_dotefp} NAME); add_custom_command(TARGET consolidate_psidatadir; POST_BUILD; COMMAND ${CMAKE_COMMAND} -E create_symlink ${_dotefp} ${_fraglib_in_psi4_dir}/${_efpfile}); endforeach(); endif(). # <<< Export Config >>>. configure_file(psi4PluginCac",MatchSource.DOCS,psi4/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt
Deployability,install,install,"include <cmath> constants, unless _USE_MATH_DEFINES is defined.; # _CRT_* to squash some getenv, strdup, strncpy, ctime, fopen warnings; add_compile_definitions(; _USE_MATH_DEFINES; _CRT_NONSTDC_NO_DEPRECATE; _CRT_NONSTDC_NO_WARNINGS; _CRT_SECURE_NO_WARNINGS; ); # Set the exception handling model; add_compile_options(""/EHsc""); endif(). include_directories(include); include_directories(src); add_subdirectory(src); if(ENABLE_CYTHONIZE); add_subdirectory(driver); endif(). # <<< Version >>>; # * computes version from metadata.py and git info; # * calls cmake to run write_basic_package_version_file. add_custom_target(update_version ALL; COMMAND ${Python_EXECUTABLE} versioner.py --metaout ${CMAKE_CURRENT_BINARY_DIR}/metadata.py; --cmakeout ${CMAKE_CURRENT_BINARY_DIR}/metadata.cmake; COMMAND ${CMAKE_COMMAND} -DWTO=""${CMAKE_CURRENT_BINARY_DIR}/${CMAKECONFIG_INSTALL_DIR}""; -DPN=""psi4""; -P ${CMAKE_CURRENT_BINARY_DIR}/metadata.cmake; WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}; COMMENT ""Generating version info""); install(FILES ${CMAKE_CURRENT_BINARY_DIR}/metadata.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). # <<< Install >>>. # <<< install bin/ >>>; configure_file(run_psi4.py psi4 @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}). if(WIN32); # Generate a batch script, which wraps ""bin/psi4"" script to ""python bin/psi4""; configure_file(psi4.bat psi4.bat @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4.bat; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}); endif(). # <<< install lib/ >>>; if(NOT ENABLE_CYTHONIZE); install(DIRECTORY driver; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; FILES_MATCHING; PATTERN ""*.py""; PATTERN pytest EXCLUDE; ); endif(). install(FILES header.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). configure_file(__init__.py __init__.py @ONLY); conf",MatchSource.DOCS,psi4/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt
Integrability,message,message,"needs to be declared; # for CMAKE_Fortran_IMPLICIT_LINK_LIBRARIES to be populated so; # static Fortran add-ons can be linked; if(${Fortran_ENABLED}); enable_language(Fortran); endif(). if (NOT MSVC); set(CMAKE_C_FLAGS_DEBUG ""-g -O0""); set(CMAKE_CXX_FLAGS_DEBUG ""-g -O0""); endif(). list(APPEND CMAKE_MODULE_PATH ${PSI4_ROOT}/cmake). include(psi4OptionsTools); include(TestRestrict); include(TestBigEndian); include(GNUInstallDirs); include(CMakePackageConfigHelpers); include(custom_color_messages); test_restrict(restrict); test_big_endian(endianness); if(${endianness}); set(_endian_ext "".big""); else(); set(_endian_ext "".little""); endif(); set(CMAKECONFIG_INSTALL_DIR ""${psi4_INSTALL_CMAKEDIR}""). # <<< Marshal Dependencies & Add-ons >>>. set(_addons); set(TargetOpenMP_FIND_COMPONENTS ""CXX""); find_package(TargetLAPACK CONFIG REQUIRED); get_property(_ill TARGET tgt::lapk PROPERTY INTERFACE_LINK_LIBRARIES); list(GET _ill 0 _ill0); get_property(_cd TARGET tgt::lapack PROPERTY INTERFACE_COMPILE_DEFINITIONS); if(${_cd} MATCHES ""USING_LAPACK_MKL""); set(_isMKL "" MKL""); endif(); get_property(_illb TARGET tgt::blas PROPERTY INTERFACE_LINK_LIBRARIES); list(APPEND _addons ${_ill} ${_illb}); message(STATUS ""${Cyan}Using LAPACK${_isMKL}${ColourReset}: ${_ill0};...""). if(ENABLE_ambit OR ENABLE_CheMPS2 OR ENABLE_Einsums); find_package(TargetHDF5 CONFIG REQUIRED); get_property(_ill TARGET tgt::hdf5 PROPERTY INTERFACE_LINK_LIBRARIES); list(GET _ill 0 _ill0); list(APPEND _addons ${_ill}); message(STATUS ""${Cyan}Using HDF5${ColourReset}: ${_ill0};... (found version ${${PN}_VERSION})""); else(); message(STATUS ""Disabled HDF5 ${TargetHDF5_DIR}""); endif(). # << Pybind11 & Python >>; find_package(Python 3.8 COMPONENTS Interpreter Development NumPy REQUIRED); find_package(pybind11 2.6.2 CONFIG REQUIRED); message(STATUS ""${Cyan}Using pybind11${ColourReset}: ${pybind11_INCLUDE_DIR} (version ${pybind11_VERSION} for Py${Python_VERSION} and ${CMAKE_CXX_STANDARD})""); message(STATUS ""${Cyan}Using Python ${",MatchSource.DOCS,psi4/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt
Performance,load,loaded,"_loc TARGET CheMPS2::chemps2 PROPERTY LOCATION); list(APPEND _addons ${_loc}); message(STATUS ""${Cyan}Using CheMPS2${ColourReset}: ${_loc} (version ${CheMPS2_VERSION})""); else(); message(STATUS ""Disabled CheMPS2 ${CheMPS2_DIR}""); endif (). if(${ENABLE_dkh}); find_package(dkh 1.2 CONFIG REQUIRED); get_property(_loc TARGET dkh::dkh PROPERTY LOCATION); list(APPEND _addons ${_loc}); message(STATUS ""${Cyan}Using dkh${ColourReset}: ${_loc} (version ${dkh_VERSION})""); else(); message(STATUS ""Disabled dkh ${dkh_DIR}""); endif(). if(${ENABLE_ecpint}); find_package(ecpint 1.0.7 CONFIG REQUIRED); get_property(_loc TARGET ECPINT::ecpint PROPERTY LOCATION); list(APPEND _addons ${_loc}); message(STATUS ""${Cyan}Using ecpint${ColourReset}: ${_loc} (version ${ecpint_VERSION})""); else(); message(STATUS ""Disabled ecpint ${ecpint_DIR}""); endif(). if(${ENABLE_libefp}); # neither libefp nor pylibefp actually needed c-side; runtime detection would; # do just as well. included for completeness and so pylibefp_PYMOD can be; # hard-loaded into PYTHONPATH. also incl for finding efp frag files below.; find_package(libefp 1.5.0 CONFIG REQUIRED COMPONENTS shallow); get_property(_loc TARGET libefp::efp PROPERTY LOCATION); list(APPEND _addons ${_loc}); message(STATUS ""${Cyan}Using libefp${ColourReset}: ${_loc} (version ${libefp_VERSION})""). #find_package(pylibefp 0.6.1 CONFIG REQUIRED); #get_property(_loc TARGET pylibefp::core PROPERTY LOCATION); include(FindPythonModule); find_python_module(pylibefp QUIET REQUIRED); #list(APPEND _addons ${_loc}); message(STATUS ""${Cyan}Using pylibefp${ColourReset}: ${_loc} (version ${pylibefp_VERSION})""); else(); message(STATUS ""Disabled libefp ${libefp_DIR} ${pylibefp_DIR}""); endif(). if(${ENABLE_Einsums}); find_package(Einsums 0.3 CONFIG REQUIRED); get_property(_loc TARGET Einsums::einsums PROPERTY LOCATION); list(APPEND _addons ${_loc}); message(STATUS ""${Cyan}Using Einsums${ColourReset}: ${_loc} (version ${Einsums_VERSION})""); else(); message(STATUS ""Disabled E",MatchSource.DOCS,psi4/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt
Safety,detect,detection,"bit_DIR}""); endif (). if(${ENABLE_CheMPS2}); find_package(CheMPS2 1.8.7 CONFIG REQUIRED); get_property(_loc TARGET CheMPS2::chemps2 PROPERTY LOCATION); list(APPEND _addons ${_loc}); message(STATUS ""${Cyan}Using CheMPS2${ColourReset}: ${_loc} (version ${CheMPS2_VERSION})""); else(); message(STATUS ""Disabled CheMPS2 ${CheMPS2_DIR}""); endif (). if(${ENABLE_dkh}); find_package(dkh 1.2 CONFIG REQUIRED); get_property(_loc TARGET dkh::dkh PROPERTY LOCATION); list(APPEND _addons ${_loc}); message(STATUS ""${Cyan}Using dkh${ColourReset}: ${_loc} (version ${dkh_VERSION})""); else(); message(STATUS ""Disabled dkh ${dkh_DIR}""); endif(). if(${ENABLE_ecpint}); find_package(ecpint 1.0.7 CONFIG REQUIRED); get_property(_loc TARGET ECPINT::ecpint PROPERTY LOCATION); list(APPEND _addons ${_loc}); message(STATUS ""${Cyan}Using ecpint${ColourReset}: ${_loc} (version ${ecpint_VERSION})""); else(); message(STATUS ""Disabled ecpint ${ecpint_DIR}""); endif(). if(${ENABLE_libefp}); # neither libefp nor pylibefp actually needed c-side; runtime detection would; # do just as well. included for completeness and so pylibefp_PYMOD can be; # hard-loaded into PYTHONPATH. also incl for finding efp frag files below.; find_package(libefp 1.5.0 CONFIG REQUIRED COMPONENTS shallow); get_property(_loc TARGET libefp::efp PROPERTY LOCATION); list(APPEND _addons ${_loc}); message(STATUS ""${Cyan}Using libefp${ColourReset}: ${_loc} (version ${libefp_VERSION})""). #find_package(pylibefp 0.6.1 CONFIG REQUIRED); #get_property(_loc TARGET pylibefp::core PROPERTY LOCATION); include(FindPythonModule); find_python_module(pylibefp QUIET REQUIRED); #list(APPEND _addons ${_loc}); message(STATUS ""${Cyan}Using pylibefp${ColourReset}: ${_loc} (version ${pylibefp_VERSION})""); else(); message(STATUS ""Disabled libefp ${libefp_DIR} ${pylibefp_DIR}""); endif(). if(${ENABLE_Einsums}); find_package(Einsums 0.3 CONFIG REQUIRED); get_property(_loc TARGET Einsums::einsums PROPERTY LOCATION); list(APPEND _addons ${_loc}); message(STATUS ""${Cyan",MatchSource.DOCS,psi4/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt
Testability,test,tests,"ython bin/psi4""; configure_file(psi4.bat psi4.bat @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4.bat; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}); endif(). # <<< install lib/ >>>; if(NOT ENABLE_CYTHONIZE); install(DIRECTORY driver; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; FILES_MATCHING; PATTERN ""*.py""; PATTERN pytest EXCLUDE; ); endif(). install(FILES header.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). configure_file(__init__.py __init__.py @ONLY); configure_file(extras.py extras.py @ONLY); install(FILES ${CMAKE_BINARY_DIR}/__init__.py; ${CMAKE_BINARY_DIR}/extras.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). install(; FILES ../pytest.ini; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.py""; PATTERN ""__init__.py""; PATTERN ""addons.py""; PATTERN ""conftest.py""; PATTERN ""standard_suite_runner.py""; PATTERN ""standard_suite_ref_local.py""; PATTERN ""adcc_reference_data.json""; PATTERN ""oei_reference_data.json""; PATTERN ""f12_libint1.json""; PATTERN ""tdscf_reference_data.json""; PATTERN ""utils.py""; ); install(; DIRECTORY; ../tests/pytests/test_fchk_writer; ../tests/pytests/test_molden_writer; ../tests/pytests/test_psi4_qcschema; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; ). install(; DIRECTORY; ../tests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ../tests/pytests EXCLUDE; PATTERN ../tests/cfour EXCLUDE; PATTERN ""test_input.py""; PATTERN ""input.dat""; PATTERN ""input.py""; PATTERN ""__pycache__"" EXCLUDE; PATTERN ""*pyc"" EXCLUDE; # below place extra files the ctests-run-as-pytests need; PATT",MatchSource.DOCS,psi4/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt
Availability,error,error,", 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no conv open-shell a-ccsd(t) by ccenergy'}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'modul",MatchSource.DOCS,samples/stdsuite_psi4.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt
Energy Efficiency,energy,energy,,MatchSource.DOCS,samples/stdsuite_psi4.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt
Performance,optimiz,optimization,"ote': 'nyi: no conv open-shell a-ccsd(t) by ccenergy'}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no conv open-shell a-ccsd(t) by ccenergy'}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=occ in dfocc until further optimization '}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=occ in dfocc until further optimization '}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no conv open-shell a-ccsd(t) by ccenergy'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'cor",MatchSource.DOCS,samples/stdsuite_psi4.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt
Energy Efficiency,energy,energy, foreach(test_name aediis-1; casscf-fzc-sp casscf-semi casscf-sa-sp ao-casscf-sp casscf-sp castup1; castup2 castup3 cbs-delta-energy cbs-parser cbs-xtpl-alpha cbs-xtpl-energy; cbs-xtpl-freq cbs-xtpl-gradient cbs-xtpl-opt cbs-xtpl-func cbs-xtpl-nbody; cbs-xtpl-wrapper cbs-xtpl-dict cc1 cc10 cc11 cc12 cc13 cc13a cc13b cc13c; cc13d cc14 cc15 cc16 cc17 cc18 cc19 cc2 cc21 cc22 cc23 cc24 cc25 cc26 cc27 cc28; cc29 cc3 cc30 cc31 cc32 cc33 cc34 cc35 cc36 cc37 cc38 cc39; cc4 cc40 cc41 cc42 cc43 cc44 cc45 cc46 cc47 cc48 cc49 cc4a; cc50 cc51 cc52 cc53 cc54 cc55 cc56 cc5 cc6 cc7 cc8 cc8a cc8b cc8c; cc9 cc9a cdomp2-1 cdomp2-2 cdoremp-energy1 cdoremp-energy2 cdremp-1 cdremp-2 cepa1; cepa2 cepa3 cepa-module ci-multi cisd-h2o+-0 cisd-h2o+-1; cisd-h2o+-2 cisd-h2o-clpse cisd-opt-fd cisd-sp cisd-sp-2; ci-property cubeprop cubeprop-frontier decontract ,MatchSource.DOCS,tests/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt
Integrability,wrap,wrapper, foreach(test_name aediis-1; casscf-fzc-sp casscf-semi casscf-sa-sp ao-casscf-sp casscf-sp castup1; castup2 castup3 cbs-delta-energy cbs-parser cbs-xtpl-alpha cbs-xtpl-energy; cbs-xtpl-freq cbs-xtpl-gradient cbs-xtpl-opt cbs-xtpl-func cbs-xtpl-nbody; cbs-xtpl-wrapper cbs-xtpl-dict cc1 cc10 cc11 cc12 cc13 cc13a cc13b cc13c; cc13d cc14 cc15 cc16 cc17 cc18 cc19 cc2 cc21 cc22 cc23 cc24 cc25 cc26 cc27 cc28; cc29 cc3 cc30 cc31 cc32 cc33 cc34 cc35 cc36 cc37 cc38 cc39; cc4 cc40 cc41 cc42 cc43 cc44 cc45 cc46 cc47 cc48 cc49 cc4a; cc50 cc51 cc52 cc53 cc54 cc55 cc56 cc5 cc6 cc7 cc8 cc8a cc8b cc8c; cc9 cc9a cdomp2-1 cdomp2-2 cdoremp-energy1 cdoremp-energy2 cdremp-1 cdremp-2 cepa1; cepa2 cepa3 cepa-module ci-multi cisd-h2o+-0 cisd-h2o+-1; cisd-h2o+-2 cisd-h2o-clpse cisd-opt-fd cisd-sp cisd-sp-2; ci-property cubeprop cubeprop-frontier decontract ,MatchSource.DOCS,tests/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt
Modifiability,variab,variables,"arry the label ""psi"".; #; # The following labels are defined:; #; # smoketests = Does Psi4 work? A few basic operational tests plus; # one from each addon and addin; # quicktests = Best coverage possible in a 20 min envelope (for Travis-CI).; # This subset is chosen to provide one or more tests for each; # major module, but it does not necessarily cover all features; # of every module.; # longtests = The really long (> ~15 min) tests; #; # Common test runs:; #; # ctest -L quick run all quicktests; # ctest -LE long run all but longtests; #; # It is possible to specify more than one label per test. CMake; # expects a ;-separated list, e.g. ""psi;quicktests;scf""; # It is suggested to add at least a second label to specify the method tested.; #; # We use ctest -I [start,end] where start is the test number we start with; # and end is the test number we end with. We will then use math to back out; # the appropriate starts and ends...; #; #; # In order to ensure that this works properly, please add your tests to the; # appropriate variables given below. foreach(test_name aediis-1; casscf-fzc-sp casscf-semi casscf-sa-sp ao-casscf-sp casscf-sp castup1; castup2 castup3 cbs-delta-energy cbs-parser cbs-xtpl-alpha cbs-xtpl-energy; cbs-xtpl-freq cbs-xtpl-gradient cbs-xtpl-opt cbs-xtpl-func cbs-xtpl-nbody; cbs-xtpl-wrapper cbs-xtpl-dict cc1 cc10 cc11 cc12 cc13 cc13a cc13b cc13c; cc13d cc14 cc15 cc16 cc17 cc18 cc19 cc2 cc21 cc22 cc23 cc24 cc25 cc26 cc27 cc28; cc29 cc3 cc30 cc31 cc32 cc33 cc34 cc35 cc36 cc37 cc38 cc39; cc4 cc40 cc41 cc42 cc43 cc44 cc45 cc46 cc47 cc48 cc49 cc4a; cc50 cc51 cc52 cc53 cc54 cc55 cc56 cc5 cc6 cc7 cc8 cc8a cc8b cc8c; cc9 cc9a cdomp2-1 cdomp2-2 cdoremp-energy1 cdoremp-energy2 cdremp-1 cdremp-2 cepa1; cepa2 cepa3 cepa-module ci-multi cisd-h2o+-0 cisd-h2o+-1; cisd-h2o+-2 cisd-h2o-clpse cisd-opt-fd cisd-sp cisd-sp-2; ci-property cubeprop cubeprop-frontier decontract dct-grad1 dct-grad2; dct-grad3 dct-grad4 dct1 dct2 dct3 dct4 dct5 dct6 dct7 dct8 dct9; dct10 dct1",MatchSource.DOCS,tests/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt
Safety,detect,detected,"ess2 scf-hess3 scf-hess4 scf-hess5 scf-freq1 dft-jk scf-coverage; dft-custom-dhdf dft-custom-hybrid dft-custom-mgga dft-custom-gga; pywrap-bfs pywrap-align pywrap-align-chiral mints12 cc-module; tdscf-1 tdscf-2 tdscf-3 tdscf-4 tdscf-5 tdscf-6 tdscf-7; dft-pruning freq-masses sapt9 sapt10 sapt11 scf-uhf-grad-nobeta; linK-1 linK-2 linK-3; cbs-xtpl-energy-conv ddd-deriv nbody-he-4b ddd-function-kwargs; ); add_subdirectory(${test_name}); endforeach(). # Add internal projects; add_subdirectory(psi4numpy); add_subdirectory(cookbook); add_subdirectory(python); add_subdirectory(json); if(ENABLE_pasture); add_subdirectory(pasture-ccsorttransqt2); message(STATUS ""${Cyan}Found Pasture${ColourReset}""); message(STATUS ""Adding test cases: Psi4 + Pasture""); endif(). message(STATUS ""Adding test cases: Psi4""). ########################### External Project Tests ###########################. # For code that (1) is built or detected in the Psi4 superbuild but isn't; # maintained in the Psi4 codebase and (2) has Psi4-dependent tests _not_ in; # the external codebase, tests should; # * get their own directory in tests (e.g., tests/dftd3); # * have a name that doesn't repeat the exe (e.g., tests/dftd3/energy, not tests/dftd3/dftd3-energy); # * be listed in the test case CMakeLists.txt as addon-testname (e.g., `add_regression_test(dftd3-energy ...`); # * alphabetize the addons. # <<< BSE >>>. if(ENABLE_bse); add_subdirectory(mints2-bse); message(STATUS ""Adding test cases: Psi4 + bse""); endif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executable""). if(CFOUR_EXECUTABLE); add_subdirectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to",MatchSource.DOCS,tests/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt
Testability,test,tests,"# In order to get CTest to run tests in separate categories,; # labels are used. All tests must carry the label ""psi"".; #; # The following labels are defined:; #; # smoketests = Does Psi4 work? A few basic operational tests plus; # one from each addon and addin; # quicktests = Best coverage possible in a 20 min envelope (for Travis-CI).; # This subset is chosen to provide one or more tests for each; # major module, but it does not necessarily cover all features; # of every module.; # longtests = The really long (> ~15 min) tests; #; # Common test runs:; #; # ctest -L quick run all quicktests; # ctest -LE long run all but longtests; #; # It is possible to specify more than one label per test. CMake; # expects a ;-separated list, e.g. ""psi;quicktests;scf""; # It is suggested to add at least a second label to specify the method tested.; #; # We use ctest -I [start,end] where start is the test number we start with; # and end is the test number we end with. We will then use math to back out; # the appropriate starts and ends...; #; #; # In order to ensure that this works properly, please add your tests to the; # appropriate variables given below. foreach(test_name aediis-1; casscf-fzc-sp casscf-semi casscf-sa-sp ao-casscf-sp casscf-sp castup1; castup2 castup3 cbs-delta-energy cbs-parser cbs-xtpl-alpha cbs-xtpl-energy; cbs-xtpl-freq cbs-xtpl-gradient cbs-xtpl-opt cbs-xtpl-func cbs-xtpl-nbody; cbs-xtpl-wrapper cbs-xtpl-dict cc1 cc10 cc11 cc12 cc13 cc13a cc13b cc13c; cc13d cc14 cc15 cc16 cc17 cc18 cc19 cc2 cc21 cc22 cc23 cc24 cc25 cc26 cc27 cc28; cc29 cc3 cc30 cc31 cc32 cc33 cc34 cc35 cc36 cc37 cc38 cc39; cc4 cc40 cc41 cc42 cc43 cc44 cc45 cc46 cc47 cc48 cc49 cc4a; cc50 cc51 cc52 cc53 cc54 cc55 cc56 cc5 cc6 cc7 cc8 cc8a cc8b cc8c; cc9 cc9a cdomp2-1 cdomp2-2 cdoremp-energy1 cdoremp-energy2 cdremp-1 cdremp-2 cepa1; cepa2 cepa3 cepa-module ci-multi cisd-h2o+-0 cisd-h2o+-1; cisd-h2o+-2 cisd-h2o-clpse cisd-opt-fd cisd-sp cisd-sp-2; ci-property cubeprop cubeprop-frontier decontract ",MatchSource.DOCS,tests/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt
Availability,avail,available,"find_package(Doxygen QUIET); if(NOT TARGET Doxygen::doxygen); message(STATUS ""No Doxygen, no docs.""); else(); message(STATUS ""Documentation targets available: doxyman (html)""). # Configuration of the Doxygen configuration file; set(HAVE_QHELP ""NO""); set(QHELP_GENERATOR """"); set(HAVE_DOT ""NO""); set(DOT_PATH """"); configure_file(doxygen.cfg.in doxygen.cfg @ONLY). add_custom_target(doxyman; VERBATIM; COMMAND Doxygen::doxygen ${CMAKE_CURRENT_BINARY_DIR}/doxygen.cfg; COMMENT ""Build Doxygen html documentation ...""); endif(). ",MatchSource.DOCS,doc/doxygen/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/doxygen/CMakeLists.txt
Deployability,configurat,configuration,"find_package(Doxygen QUIET); if(NOT TARGET Doxygen::doxygen); message(STATUS ""No Doxygen, no docs.""); else(); message(STATUS ""Documentation targets available: doxyman (html)""). # Configuration of the Doxygen configuration file; set(HAVE_QHELP ""NO""); set(QHELP_GENERATOR """"); set(HAVE_DOT ""NO""); set(DOT_PATH """"); configure_file(doxygen.cfg.in doxygen.cfg @ONLY). add_custom_target(doxyman; VERBATIM; COMMAND Doxygen::doxygen ${CMAKE_CURRENT_BINARY_DIR}/doxygen.cfg; COMMENT ""Build Doxygen html documentation ...""); endif(). ",MatchSource.DOCS,doc/doxygen/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/doxygen/CMakeLists.txt
Integrability,message,message,"find_package(Doxygen QUIET); if(NOT TARGET Doxygen::doxygen); message(STATUS ""No Doxygen, no docs.""); else(); message(STATUS ""Documentation targets available: doxyman (html)""). # Configuration of the Doxygen configuration file; set(HAVE_QHELP ""NO""); set(QHELP_GENERATOR """"); set(HAVE_DOT ""NO""); set(DOT_PATH """"); configure_file(doxygen.cfg.in doxygen.cfg @ONLY). add_custom_target(doxyman; VERBATIM; COMMAND Doxygen::doxygen ${CMAKE_CURRENT_BINARY_DIR}/doxygen.cfg; COMMENT ""Build Doxygen html documentation ...""); endif(). ",MatchSource.DOCS,doc/doxygen/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/doxygen/CMakeLists.txt
Modifiability,config,configuration,"find_package(Doxygen QUIET); if(NOT TARGET Doxygen::doxygen); message(STATUS ""No Doxygen, no docs.""); else(); message(STATUS ""Documentation targets available: doxyman (html)""). # Configuration of the Doxygen configuration file; set(HAVE_QHELP ""NO""); set(QHELP_GENERATOR """"); set(HAVE_DOT ""NO""); set(DOT_PATH """"); configure_file(doxygen.cfg.in doxygen.cfg @ONLY). add_custom_target(doxyman; VERBATIM; COMMAND Doxygen::doxygen ${CMAKE_CURRENT_BINARY_DIR}/doxygen.cfg; COMMENT ""Build Doxygen html documentation ...""); endif(). ",MatchSource.DOCS,doc/doxygen/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/doxygen/CMakeLists.txt
Availability,avail,available,"R},""Unix Makefiles"">,${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4/efpfrag/*efp,${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4/efpfrag/h2o.efp>; COMMENT ""Autodoc efp fragments""); else(); file(WRITE ${CCBD}/source/autodoc_available_efpfrag.rst """"); endif(). # Format git log for feed; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E make_directory feed; COMMAND ${Python_EXECUTABLE} ${CCSD}/extract_changeset.py ${CCBD}; OUTPUT ${CCBD}/feed/history_trac_changeset.txt; ${CCBD}/feed/latest_trac_changeset.txt; DEPENDS ${CCSD}/extract_changeset.py; COMMENT ""Format git --log for psicode.org feed""). # Establishing dependencies for docs targets. # * mini github feed for psicode.org; add_custom_target(ghfeed; DEPENDS ${CCBD}/feed/history_trac_changeset.txt; ${CCBD}/feed/latest_trac_changeset.txt; COMMENT ""Preparing GitHub feed""). # * announcement; if (LATEX_COMPILER AND PDFLATEX_COMPILER); message(STATUS ""Documentation targets ${_jupy}available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF)""); else(); message(STATUS ""Documentation targets ${_jupy}available: sphinxman (html), sphinxmini (quick html)""); endif(). # * quick mini-build for docs development; add_custom_target(sphinxmini; DEPENDS ${CCBD}/source/conf.py; COMMENT ""Building Sphinx abridged HTML documentation build""). # * full, proper build; add_custom_target(sphinxman; DEPENDS ${CCBD}/source/autodoc_psi4bases.rst; ${CCBD}/source/autodoc_psifiles.rst; ${CCBD}/source/autodoc_physconst.rst; ${CCBD}/source/autodoc_abbr_options_c.rst; ${CCBD}/source/autodoc_glossary_options_c.rst; ${CCBD}/source/autodoc_options_c_bymodule.rst; ${CCBD}/source/autodir_options_c/module__scf.rst # representative; ${CCBD}/source/autodir_options_c/scf__guess.rst # representative; ${CCBD}/source/autodoc_psivariables_bymodule.rst; ${CCBD}/source/autodir_psivariables/module__scf.rst # representative; ${CCBD}/source/autodir_psivariables/module__cfour.rst; ${CCBD}/source/autodoc_available_databases.rst; ${CCBD}/sou",MatchSource.DOCS,doc/sphinxman/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt
Deployability,install,install,"); if(NOT PERL_FOUND); message(STATUS ""No Perl, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html""); endif(). find_package(Sphinx QUIET); if(NOT SPHINX_FOUND); message(STATUS ""No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html""); endif(). find_package(LATEX QUIET); if(NOT (LATEX_COMPILER AND PDFLATEX_COMPILER)); message(STATUS ""No LaTeX (incl. pdflatex), no PDF docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html""); endif(). if(SPHINX_THEME STREQUAL sphinx_psi_theme); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""import sphinx_psi_theme; import cloud_sptheme; import sphinx_automodapi; import graphviz""; OUTPUT_QUIET ERROR_QUIET RESULT_VARIABLE _exec_python_err); elseif(SPHINX_THEME STREQUAL basic); # these themes are built-in to Sphinx; execute_process(COMMAND ${Python_EXECUTABLE} -c; ""import sphinx_automodapi; import graphviz""; OUTPUT_QUIET ERROR_QUIET RESULT_VARIABLE _exec_python_err); else(); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""import ${SPHINX_THEME}; import sphinx_automodapi; import graphviz""; OUTPUT_QUIET ERROR_QUIET RESULT_VARIABLE _exec_python_err); endif(); if(_exec_python_err); message(STATUS ""No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi sphinx-autodoc-typehints graphviz python-graphviz autodoc-pydantic sphinx-tabs -c conda-forge -c psi4)""); set(SPHINX_STUFF_FOUND ""OFF""). else(); set(SPHINX_STUFF_FOUND ""ON""); endif(). if(SPHINXMAN_STRICT); set(SPHINX_EXTRAS ""-n;-W;--keep-going""); #set(SPHINX_EXTRAS ""-W;--keep-going""); # return to above after qcel 0.25; #set(SPHINX_EXTRAS """"); else(); set(SPHINX_EXTRAS """"); endif(). # Setup and build Sphinx documentation; if(PERL_FOUND AND SPHINX_FOUND AND SPHINX_STUFF_FOUND); set(CCSD ""${CMAKE_CURRENT_SOURCE_DIR}""); set(CCBD ""${CMAKE_CURRENT_BINARY_DIR}""). # Static-doc reST files; set(STATICDOC abbr_accents.rst adc.rst adcc.rst appendices.rst basissets.rst; basi",MatchSource.DOCS,doc/sphinxman/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt
Energy Efficiency,energy,energy,"LT_VARIABLE _exec_python_err); endif(); if(_exec_python_err); message(STATUS ""No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi sphinx-autodoc-typehints graphviz python-graphviz autodoc-pydantic sphinx-tabs -c conda-forge -c psi4)""); set(SPHINX_STUFF_FOUND ""OFF""). else(); set(SPHINX_STUFF_FOUND ""ON""); endif(). if(SPHINXMAN_STRICT); set(SPHINX_EXTRAS ""-n;-W;--keep-going""); #set(SPHINX_EXTRAS ""-W;--keep-going""); # return to above after qcel 0.25; #set(SPHINX_EXTRAS """"); else(); set(SPHINX_EXTRAS """"); endif(). # Setup and build Sphinx documentation; if(PERL_FOUND AND SPHINX_FOUND AND SPHINX_STUFF_FOUND); set(CCSD ""${CMAKE_CURRENT_SOURCE_DIR}""); set(CCBD ""${CMAKE_CURRENT_BINARY_DIR}""). # Static-doc reST files; set(STATICDOC abbr_accents.rst adc.rst adcc.rst appendices.rst basissets.rst; basissets_byelement.rst bibliography.rst cbs.rst cbs_eqn.rst ddx.rst; nbody.rst customizing.rst db.rst detci.rst dfmp2.rst dlpnomp2.rst; diatomic.rst documentation.rst energy.rst external.rst fchk.rst; freq.rst gdma.rst glossary_psivariables.rst index.rst intercalls.rst; interfacing.rst introduction.rst methods.rst notes_c.rst notes_py.rst; oeprop.rst opt.rst optking.rst plugins.rst prog_corelibs.rst prop.rst; psithonfunc.rst psithoninput.rst quickaddalias.rst; basissets_tables.rst quickadddatabase.rst sapt.rst sowreap.rst; testsuite.rst tutorial.rst dft_byfunctional.rst scf.rst mrcc.rst; psimrcc.rst cc.rst dft.rst fnocc.rst optionshandling.rst; basissets_byfamily.rst psipep.rst pep0001.rst dftd3.rst occ.rst; molden.rst cubeprop.rst dct.rst relativistic.rst dkh.rst proc_py.rst; psithonmol.rst cfour.rst mrcc_table_energy.rst cfour_table_energy.rst; cfour_table_grad.rst libefp.rst cppe.rst conda.rst pcmsolver.rst thermo.rst; chemps2.rst fisapt.rst plugin_v2rdm_casscf.rst psi4api.rst; manage_addon.rst numpy.rst build_planning.rst build_faq.rst; build_obtaining.rst libint.rst erd.rst simint.rst gcp.rst; index_tutorials.rst prog_faq.rst manage_index.rst man",MatchSource.DOCS,doc/sphinxman/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt
Integrability,depend,dependencies,"# Settle docs-specific dependencies; find_package(Perl QUIET); if(NOT PERL_FOUND); message(STATUS ""No Perl, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html""); endif(). find_package(Sphinx QUIET); if(NOT SPHINX_FOUND); message(STATUS ""No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html""); endif(). find_package(LATEX QUIET); if(NOT (LATEX_COMPILER AND PDFLATEX_COMPILER)); message(STATUS ""No LaTeX (incl. pdflatex), no PDF docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html""); endif(). if(SPHINX_THEME STREQUAL sphinx_psi_theme); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""import sphinx_psi_theme; import cloud_sptheme; import sphinx_automodapi; import graphviz""; OUTPUT_QUIET ERROR_QUIET RESULT_VARIABLE _exec_python_err); elseif(SPHINX_THEME STREQUAL basic); # these themes are built-in to Sphinx; execute_process(COMMAND ${Python_EXECUTABLE} -c; ""import sphinx_automodapi; import graphviz""; OUTPUT_QUIET ERROR_QUIET RESULT_VARIABLE _exec_python_err); else(); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""import ${SPHINX_THEME}; import sphinx_automodapi; import graphviz""; OUTPUT_QUIET ERROR_QUIET RESULT_VARIABLE _exec_python_err); endif(); if(_exec_python_err); message(STATUS ""No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi sphinx-autodoc-typehints graphviz python-graphviz autodoc-pydantic sphinx-tabs -c conda-forge -c psi4)""); set(SPHINX_STUFF_FOUND ""OFF""). else(); set(SPHINX_STUFF_FOUND ""ON""); endif(). if(SPHINXMAN_STRICT); set(SPHINX_EXTRAS ""-n;-W;--keep-going""); #set(SPHINX_EXTRAS ""-W;--keep-going""); # return to above after qcel 0.25; #set(SPHINX_EXTRAS """"); else(); set(SPHINX_EXTRAS """"); endif(). # Setup and build Sphinx documentation; if(PERL_FOUND AND SPHINX_FOUND AND SPHINX_STUFF_FOUND); set(CCSD ""${CMAKE_CURRENT_SOURCE_DIR}""); set(CCBD ""${CMAKE_CURRENT_BINARY_DIR}""). # Static-doc reST files; set(STATICDOC abbr_acce",MatchSource.DOCS,doc/sphinxman/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt
Modifiability,plugin,plugins,"raphviz autodoc-pydantic sphinx-tabs -c conda-forge -c psi4)""); set(SPHINX_STUFF_FOUND ""OFF""). else(); set(SPHINX_STUFF_FOUND ""ON""); endif(). if(SPHINXMAN_STRICT); set(SPHINX_EXTRAS ""-n;-W;--keep-going""); #set(SPHINX_EXTRAS ""-W;--keep-going""); # return to above after qcel 0.25; #set(SPHINX_EXTRAS """"); else(); set(SPHINX_EXTRAS """"); endif(). # Setup and build Sphinx documentation; if(PERL_FOUND AND SPHINX_FOUND AND SPHINX_STUFF_FOUND); set(CCSD ""${CMAKE_CURRENT_SOURCE_DIR}""); set(CCBD ""${CMAKE_CURRENT_BINARY_DIR}""). # Static-doc reST files; set(STATICDOC abbr_accents.rst adc.rst adcc.rst appendices.rst basissets.rst; basissets_byelement.rst bibliography.rst cbs.rst cbs_eqn.rst ddx.rst; nbody.rst customizing.rst db.rst detci.rst dfmp2.rst dlpnomp2.rst; diatomic.rst documentation.rst energy.rst external.rst fchk.rst; freq.rst gdma.rst glossary_psivariables.rst index.rst intercalls.rst; interfacing.rst introduction.rst methods.rst notes_c.rst notes_py.rst; oeprop.rst opt.rst optking.rst plugins.rst prog_corelibs.rst prop.rst; psithonfunc.rst psithoninput.rst quickaddalias.rst; basissets_tables.rst quickadddatabase.rst sapt.rst sowreap.rst; testsuite.rst tutorial.rst dft_byfunctional.rst scf.rst mrcc.rst; psimrcc.rst cc.rst dft.rst fnocc.rst optionshandling.rst; basissets_byfamily.rst psipep.rst pep0001.rst dftd3.rst occ.rst; molden.rst cubeprop.rst dct.rst relativistic.rst dkh.rst proc_py.rst; psithonmol.rst cfour.rst mrcc_table_energy.rst cfour_table_energy.rst; cfour_table_grad.rst libefp.rst cppe.rst conda.rst pcmsolver.rst thermo.rst; chemps2.rst fisapt.rst plugin_v2rdm_casscf.rst psi4api.rst; manage_addon.rst numpy.rst build_planning.rst build_faq.rst; build_obtaining.rst libint.rst erd.rst simint.rst gcp.rst; index_tutorials.rst prog_faq.rst manage_index.rst manage_git.rst; prog_style_c.rst prog_blas.rst add_tests.rst plugin_snsmp2.rst dftnl.rst; libxc.rst gau2grid.rst prog_conduct.rst prog_intro.rst prog_newcode.rst; prog_setup.rst prog_welcome.rst prog_ways_to_a",MatchSource.DOCS,doc/sphinxman/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt
Performance,cache,cache,"todoc_capabilities_scf.rst; ${CCBD}/source/api/psi4.core.set_variable.rst; ${CCBD}/source/autodoc_dft_energy.rst; ${CCBD}/source/autodoc_dft_opt.rst; ${CCBD}/source/autodoc_dft_all.rst; ${CCBD}/source/autodoc_dft_gga.rst; ${CCBD}/source/autodoc_dft_meta.rst; ${CCBD}/source/autodoc_dft_lrc.rst; ${CCBD}/source/autodoc_dft_hybrid.rst; ${CCBD}/source/autodoc_dft_dhybrid.rst; #${CCBD}/source/autodoc_dft_scsdhybrid.rst # commented until populated again to appease Sphinx; ${CCBD}/source/autodoc_dft_disp.rst; ${CCBD}/source/autodoc_basissets_byfamily.rst; ${CCBD}/source/autodoc_available_efpfrag.rst; COMMENT ""Preparing Sphinx HTML documentation build""); add_dependencies(sphinxman psi4-core). install(; DIRECTORY ${CCBD}/html; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DOCDIR}; OPTIONAL). add_custom_target(linkcheck; DEPENDS sphinxman; COMMENT ""Preparing Sphinx linkcheck documentation build""). add_custom_command(; TARGET linkcheck POST_BUILD; COMMAND ${SPHINX_EXECUTABLE}; -b linkcheck # builder; -d ${CCBD}/_doctrees # cache w/ pickled reST; -c ${CCBD}/source # whereabouts of conf.py; ${CCBD}/source # build from; ${CCBD}/latex # build to; COMMENT ""Building linkcheck documentation ...""). # * full, proper build with LaTeX; if (LATEX_COMPILER AND PDFLATEX_COMPILER); add_custom_target(sphinxpdf; DEPENDS sphinxman; COMMENT ""Preparing Sphinx HTML and PDF documentation build""). # * full, proper build with latex builder; add_custom_command(; TARGET sphinxpdf POST_BUILD; COMMAND ${SPHINX_EXECUTABLE}; -b latex # builder; -d ${CCBD}/_doctrees # cache w/ pickled reST; -c ${CCBD}/source # whereabouts of conf.py; ${CCBD}/source # build from; ${CCBD}/latex # build to; COMMENT ""Building latex documentation ...""); add_custom_command(; TARGET sphinxpdf POST_BUILD; COMMAND ${PDFLATEX_COMPILER}; -interaction=nonstopmode; ""Psi4.tex"" > /dev/null 2>&1; WORKING_DIRECTORY ${CCBD}/latex; COMMENT ""Building remarkably ugly PDF documentation from LaTeX ... (ignore the make exit error)""); endif(). ",MatchSource.DOCS,doc/sphinxman/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt
Testability,test,testsuite,"TRICT); set(SPHINX_EXTRAS ""-n;-W;--keep-going""); #set(SPHINX_EXTRAS ""-W;--keep-going""); # return to above after qcel 0.25; #set(SPHINX_EXTRAS """"); else(); set(SPHINX_EXTRAS """"); endif(). # Setup and build Sphinx documentation; if(PERL_FOUND AND SPHINX_FOUND AND SPHINX_STUFF_FOUND); set(CCSD ""${CMAKE_CURRENT_SOURCE_DIR}""); set(CCBD ""${CMAKE_CURRENT_BINARY_DIR}""). # Static-doc reST files; set(STATICDOC abbr_accents.rst adc.rst adcc.rst appendices.rst basissets.rst; basissets_byelement.rst bibliography.rst cbs.rst cbs_eqn.rst ddx.rst; nbody.rst customizing.rst db.rst detci.rst dfmp2.rst dlpnomp2.rst; diatomic.rst documentation.rst energy.rst external.rst fchk.rst; freq.rst gdma.rst glossary_psivariables.rst index.rst intercalls.rst; interfacing.rst introduction.rst methods.rst notes_c.rst notes_py.rst; oeprop.rst opt.rst optking.rst plugins.rst prog_corelibs.rst prop.rst; psithonfunc.rst psithoninput.rst quickaddalias.rst; basissets_tables.rst quickadddatabase.rst sapt.rst sowreap.rst; testsuite.rst tutorial.rst dft_byfunctional.rst scf.rst mrcc.rst; psimrcc.rst cc.rst dft.rst fnocc.rst optionshandling.rst; basissets_byfamily.rst psipep.rst pep0001.rst dftd3.rst occ.rst; molden.rst cubeprop.rst dct.rst relativistic.rst dkh.rst proc_py.rst; psithonmol.rst cfour.rst mrcc_table_energy.rst cfour_table_energy.rst; cfour_table_grad.rst libefp.rst cppe.rst conda.rst pcmsolver.rst thermo.rst; chemps2.rst fisapt.rst plugin_v2rdm_casscf.rst psi4api.rst; manage_addon.rst numpy.rst build_planning.rst build_faq.rst; build_obtaining.rst libint.rst erd.rst simint.rst gcp.rst; index_tutorials.rst prog_faq.rst manage_index.rst manage_git.rst; prog_style_c.rst prog_blas.rst add_tests.rst plugin_snsmp2.rst dftnl.rst; libxc.rst gau2grid.rst prog_conduct.rst prog_intro.rst prog_newcode.rst; prog_setup.rst prog_welcome.rst prog_ways_to_add.rst; prog_full_integration.rst prog_style_py.rst prog_help.rst; prog_debug_profile.rst manage_release.rst plugin_psi4fockci.rst; brianqc.rst tdscf.rst pro",MatchSource.DOCS,doc/sphinxman/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt
Deployability,install,install,"if(ENABLE_ambit OR ENABLE_CheMPS2 OR ENABLE_Einsums); project(TargetHDF5); set(PN ${PROJECT_NAME}). # <<< ""Build"" >>>. find_package(HDF5 QUIET REQUIRED). add_library(hdf5 INTERFACE); set_property(TARGET hdf5 PROPERTY INTERFACE_LINK_LIBRARIES ${HDF5_LIBRARIES}); set_property(TARGET hdf5 PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${HDF5_INCLUDE_DIRS}); set (${PN}_VERSION ${HDF5_VERSION}). get_property(_ill TARGET hdf5 PROPERTY INTERFACE_LINK_LIBRARIES); get_property(_iid TARGET hdf5 PROPERTY INTERFACE_INCLUDE_DIRECTORIES); set(${PN}_MESSAGE ""Found HDF5: ${_ill} (found version ${${PN}_VERSION})""); list(GET _ill 0 _ill0); message(STATUS ""${Cyan}Found HDF5${ColourReset}: ${_ill0};... (found version ${${PN}_VERSION})""). install(TARGETS hdf5; EXPORT ""${PN}Targets""). # <<< Export Config >>>. include(CMakePackageConfigHelpers). set(CMAKECONFIG_INSTALL_DIR ""${TargetHDF5_INSTALL_CMAKEDIR}""); configure_package_config_file(${PN}Config.cmake.in; ""${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake""; INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR}); write_basic_package_version_file (${CMAKE_CURRENT_BINARY_DIR}/${PN}ConfigVersion.cmake; VERSION ${${PN}_VERSION}; COMPATIBILITY ExactVersion); install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake; ${CMAKE_CURRENT_BINARY_DIR}/${PN}ConfigVersion.cmake; DESTINATION ${CMAKECONFIG_INSTALL_DIR}); install(EXPORT ""${PN}Targets""; NAMESPACE ""tgt::""; DESTINATION ${CMAKECONFIG_INSTALL_DIR}). unset(HDF5_FOUND); unset(HDF5_VERSION); unset(HDF5_LIBRARIES); unset(HDF5_INCLUDE_DIRS). add_custom_target(hdf5_external; ${CMAKE_COMMAND} ""-DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}"" -P ""${PROJECT_BINARY_DIR}/cmake_install.cmake""; COMMENT ""Installing Psi4-detected HDF5""). set(${PN}_DIR ${STAGED_INSTALL_PREFIX}/${TargetHDF5_INSTALL_CMAKEDIR} CACHE PATH ""path to externally detected ${PN}Config.cmake"" FORCE); else(); add_library(hdf5_external INTERFACE) # dummy; endif(); ",MatchSource.DOCS,external/common/hdf5/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/common/hdf5/CMakeLists.txt
Integrability,message,message,"if(ENABLE_ambit OR ENABLE_CheMPS2 OR ENABLE_Einsums); project(TargetHDF5); set(PN ${PROJECT_NAME}). # <<< ""Build"" >>>. find_package(HDF5 QUIET REQUIRED). add_library(hdf5 INTERFACE); set_property(TARGET hdf5 PROPERTY INTERFACE_LINK_LIBRARIES ${HDF5_LIBRARIES}); set_property(TARGET hdf5 PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${HDF5_INCLUDE_DIRS}); set (${PN}_VERSION ${HDF5_VERSION}). get_property(_ill TARGET hdf5 PROPERTY INTERFACE_LINK_LIBRARIES); get_property(_iid TARGET hdf5 PROPERTY INTERFACE_INCLUDE_DIRECTORIES); set(${PN}_MESSAGE ""Found HDF5: ${_ill} (found version ${${PN}_VERSION})""); list(GET _ill 0 _ill0); message(STATUS ""${Cyan}Found HDF5${ColourReset}: ${_ill0};... (found version ${${PN}_VERSION})""). install(TARGETS hdf5; EXPORT ""${PN}Targets""). # <<< Export Config >>>. include(CMakePackageConfigHelpers). set(CMAKECONFIG_INSTALL_DIR ""${TargetHDF5_INSTALL_CMAKEDIR}""); configure_package_config_file(${PN}Config.cmake.in; ""${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake""; INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR}); write_basic_package_version_file (${CMAKE_CURRENT_BINARY_DIR}/${PN}ConfigVersion.cmake; VERSION ${${PN}_VERSION}; COMPATIBILITY ExactVersion); install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake; ${CMAKE_CURRENT_BINARY_DIR}/${PN}ConfigVersion.cmake; DESTINATION ${CMAKECONFIG_INSTALL_DIR}); install(EXPORT ""${PN}Targets""; NAMESPACE ""tgt::""; DESTINATION ${CMAKECONFIG_INSTALL_DIR}). unset(HDF5_FOUND); unset(HDF5_VERSION); unset(HDF5_LIBRARIES); unset(HDF5_INCLUDE_DIRS). add_custom_target(hdf5_external; ${CMAKE_COMMAND} ""-DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}"" -P ""${PROJECT_BINARY_DIR}/cmake_install.cmake""; COMMENT ""Installing Psi4-detected HDF5""). set(${PN}_DIR ${STAGED_INSTALL_PREFIX}/${TargetHDF5_INSTALL_CMAKEDIR} CACHE PATH ""path to externally detected ${PN}Config.cmake"" FORCE); else(); add_library(hdf5_external INTERFACE) # dummy; endif(); ",MatchSource.DOCS,external/common/hdf5/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/common/hdf5/CMakeLists.txt
Safety,detect,detected,"if(ENABLE_ambit OR ENABLE_CheMPS2 OR ENABLE_Einsums); project(TargetHDF5); set(PN ${PROJECT_NAME}). # <<< ""Build"" >>>. find_package(HDF5 QUIET REQUIRED). add_library(hdf5 INTERFACE); set_property(TARGET hdf5 PROPERTY INTERFACE_LINK_LIBRARIES ${HDF5_LIBRARIES}); set_property(TARGET hdf5 PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${HDF5_INCLUDE_DIRS}); set (${PN}_VERSION ${HDF5_VERSION}). get_property(_ill TARGET hdf5 PROPERTY INTERFACE_LINK_LIBRARIES); get_property(_iid TARGET hdf5 PROPERTY INTERFACE_INCLUDE_DIRECTORIES); set(${PN}_MESSAGE ""Found HDF5: ${_ill} (found version ${${PN}_VERSION})""); list(GET _ill 0 _ill0); message(STATUS ""${Cyan}Found HDF5${ColourReset}: ${_ill0};... (found version ${${PN}_VERSION})""). install(TARGETS hdf5; EXPORT ""${PN}Targets""). # <<< Export Config >>>. include(CMakePackageConfigHelpers). set(CMAKECONFIG_INSTALL_DIR ""${TargetHDF5_INSTALL_CMAKEDIR}""); configure_package_config_file(${PN}Config.cmake.in; ""${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake""; INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR}); write_basic_package_version_file (${CMAKE_CURRENT_BINARY_DIR}/${PN}ConfigVersion.cmake; VERSION ${${PN}_VERSION}; COMPATIBILITY ExactVersion); install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake; ${CMAKE_CURRENT_BINARY_DIR}/${PN}ConfigVersion.cmake; DESTINATION ${CMAKECONFIG_INSTALL_DIR}); install(EXPORT ""${PN}Targets""; NAMESPACE ""tgt::""; DESTINATION ${CMAKECONFIG_INSTALL_DIR}). unset(HDF5_FOUND); unset(HDF5_VERSION); unset(HDF5_LIBRARIES); unset(HDF5_INCLUDE_DIRS). add_custom_target(hdf5_external; ${CMAKE_COMMAND} ""-DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}"" -P ""${PROJECT_BINARY_DIR}/cmake_install.cmake""; COMMENT ""Installing Psi4-detected HDF5""). set(${PN}_DIR ${STAGED_INSTALL_PREFIX}/${TargetHDF5_INSTALL_CMAKEDIR} CACHE PATH ""path to externally detected ${PN}Config.cmake"" FORCE); else(); add_library(hdf5_external INTERFACE) # dummy; endif(); ",MatchSource.DOCS,external/common/hdf5/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/common/hdf5/CMakeLists.txt
Availability,avail,available,"st(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}); set(TargetOpenMP_FIND_COMPONENTS ""CXX""); find_package(MathOpenMP); endif(). #include(CMakePrintHelpers); #cmake_print_properties(TARGETS OpenMP::OpenMP_CXX OpenMP::OpenMP tgt::MathOpenMP lapack; # PROPERTIES INTERFACE_COMPILE_DEFINITIONS INTERFACE_COMPILE_OPTIONS INTERFACE_INCLUDE_DIRS INTERFACE_LINK_LIBRARIES). get_property(_ill TARGET lapk PROPERTY INTERFACE_LINK_LIBRARIES); list(GET _ill 0 _ill0); message(STATUS ""${Cyan}Found LAPACK${isMKL}${ColourReset}: ${_ill0};...""). if(NOT (${isMKL} MATCHES ""MKL"")); message(WARNING ""${Yellow}MKL is the only BLAS/LAPACK distribution thoroughly tested with Psi4. Several others are mostly fine, with problems cropping up in particular modules or when running in threaded mode. When using a non-MKL distribution, please run the test suite in full and also run particular tests in threaded mode, if you plan to run Psi4 threaded. MKL is freely available through conda; see instructions to compile against conda MKL through the 'source' option on the download website page. OpenBLAS also seems to work, but be sure you're using the OpenMP, not the pthreads, variant.${ColourReset}""); endif(). unset(BLAS_LIBRARIES); unset(LAPACK_LIBRARIES); unset(BLAS_INCLUDE_DIRS); unset(LAPACK_INCLUDE_DIRS). set(PN ${PROJECT_NAME}); install(TARGETS blas lapk lapack; EXPORT ""${PN}Targets""). # <<< Export Config >>>. include(CMakePackageConfigHelpers). set(CMAKECONFIG_INSTALL_DIR ""${TargetLAPACK_INSTALL_CMAKEDIR}""); configure_package_config_file(${PN}Config.cmake.in; ""${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake""; INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR}); install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake; ${CMAKE_CURRENT_SOURCE_DIR}/FindTargetOpenMP.cmake; ${CMAKE_CURRENT_SOURCE_DIR}/FindMathOpenMP.cmake; DESTINATION ${CMAKECONFIG_INSTALL_DIR}); install(EXPORT ""${PN}Targets""; NAMESPACE ""tgt::""; DESTINATION ${CMAKECONFIG_INSTALL_DIR}). add_custom_target(lapack_external; ${CMAKE_COMMAND} """,MatchSource.DOCS,external/common/lapack/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/common/lapack/CMakeLists.txt
Deployability,install,install,"NITIONS INTERFACE_COMPILE_OPTIONS INTERFACE_INCLUDE_DIRS INTERFACE_LINK_LIBRARIES). get_property(_ill TARGET lapk PROPERTY INTERFACE_LINK_LIBRARIES); list(GET _ill 0 _ill0); message(STATUS ""${Cyan}Found LAPACK${isMKL}${ColourReset}: ${_ill0};...""). if(NOT (${isMKL} MATCHES ""MKL"")); message(WARNING ""${Yellow}MKL is the only BLAS/LAPACK distribution thoroughly tested with Psi4. Several others are mostly fine, with problems cropping up in particular modules or when running in threaded mode. When using a non-MKL distribution, please run the test suite in full and also run particular tests in threaded mode, if you plan to run Psi4 threaded. MKL is freely available through conda; see instructions to compile against conda MKL through the 'source' option on the download website page. OpenBLAS also seems to work, but be sure you're using the OpenMP, not the pthreads, variant.${ColourReset}""); endif(). unset(BLAS_LIBRARIES); unset(LAPACK_LIBRARIES); unset(BLAS_INCLUDE_DIRS); unset(LAPACK_INCLUDE_DIRS). set(PN ${PROJECT_NAME}); install(TARGETS blas lapk lapack; EXPORT ""${PN}Targets""). # <<< Export Config >>>. include(CMakePackageConfigHelpers). set(CMAKECONFIG_INSTALL_DIR ""${TargetLAPACK_INSTALL_CMAKEDIR}""); configure_package_config_file(${PN}Config.cmake.in; ""${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake""; INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR}); install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake; ${CMAKE_CURRENT_SOURCE_DIR}/FindTargetOpenMP.cmake; ${CMAKE_CURRENT_SOURCE_DIR}/FindMathOpenMP.cmake; DESTINATION ${CMAKECONFIG_INSTALL_DIR}); install(EXPORT ""${PN}Targets""; NAMESPACE ""tgt::""; DESTINATION ${CMAKECONFIG_INSTALL_DIR}). add_custom_target(lapack_external; ${CMAKE_COMMAND} ""-DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}"" -P ""${PROJECT_BINARY_DIR}/cmake_install.cmake""; COMMENT ""Installing Psi4-detected BLAS/LAPACK""). set(${PN}_DIR ${STAGED_INSTALL_PREFIX}/${TargetLAPACK_INSTALL_CMAKEDIR} CACHE PATH ""path to externally detected ${PN}Config.cmake"" FORCE); ",MatchSource.DOCS,external/common/lapack/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/common/lapack/CMakeLists.txt
Integrability,message,message,"MATCHES ""mkl""); set(isMKL "" MKL""); target_compile_definitions(lapack INTERFACE USING_LAPACK_MKL); break(); endif(); endforeach(); if(isMKL STREQUAL "" MKL""); set(_VENDOR ""MKL""); else(); set(_VENDOR ""All""); endif(); set_target_properties(; lapack; PROPERTIES; VENDOR ${_VENDOR}; INT_INTERFACE lp64 # Psi4 only works with lp64 afaik; ); set(export_properties ""VENDOR;INT_INTERFACE""); set_property(TARGET lapack APPEND PROPERTY EXPORT_PROPERTIES ""${export_properties}""). # << Detect OpenMP and modify for BLAS/LAPACK >>; if(NOT TARGET tgt::MathOpenMP); list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}); set(TargetOpenMP_FIND_COMPONENTS ""CXX""); find_package(MathOpenMP); endif(). #include(CMakePrintHelpers); #cmake_print_properties(TARGETS OpenMP::OpenMP_CXX OpenMP::OpenMP tgt::MathOpenMP lapack; # PROPERTIES INTERFACE_COMPILE_DEFINITIONS INTERFACE_COMPILE_OPTIONS INTERFACE_INCLUDE_DIRS INTERFACE_LINK_LIBRARIES). get_property(_ill TARGET lapk PROPERTY INTERFACE_LINK_LIBRARIES); list(GET _ill 0 _ill0); message(STATUS ""${Cyan}Found LAPACK${isMKL}${ColourReset}: ${_ill0};...""). if(NOT (${isMKL} MATCHES ""MKL"")); message(WARNING ""${Yellow}MKL is the only BLAS/LAPACK distribution thoroughly tested with Psi4. Several others are mostly fine, with problems cropping up in particular modules or when running in threaded mode. When using a non-MKL distribution, please run the test suite in full and also run particular tests in threaded mode, if you plan to run Psi4 threaded. MKL is freely available through conda; see instructions to compile against conda MKL through the 'source' option on the download website page. OpenBLAS also seems to work, but be sure you're using the OpenMP, not the pthreads, variant.${ColourReset}""); endif(). unset(BLAS_LIBRARIES); unset(LAPACK_LIBRARIES); unset(BLAS_INCLUDE_DIRS); unset(LAPACK_INCLUDE_DIRS). set(PN ${PROJECT_NAME}); install(TARGETS blas lapk lapack; EXPORT ""${PN}Targets""). # <<< Export Config >>>. include(CMakePackageConfigHelpers). set(CMAKECO",MatchSource.DOCS,external/common/lapack/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/common/lapack/CMakeLists.txt
Safety,detect,detected,"NITIONS INTERFACE_COMPILE_OPTIONS INTERFACE_INCLUDE_DIRS INTERFACE_LINK_LIBRARIES). get_property(_ill TARGET lapk PROPERTY INTERFACE_LINK_LIBRARIES); list(GET _ill 0 _ill0); message(STATUS ""${Cyan}Found LAPACK${isMKL}${ColourReset}: ${_ill0};...""). if(NOT (${isMKL} MATCHES ""MKL"")); message(WARNING ""${Yellow}MKL is the only BLAS/LAPACK distribution thoroughly tested with Psi4. Several others are mostly fine, with problems cropping up in particular modules or when running in threaded mode. When using a non-MKL distribution, please run the test suite in full and also run particular tests in threaded mode, if you plan to run Psi4 threaded. MKL is freely available through conda; see instructions to compile against conda MKL through the 'source' option on the download website page. OpenBLAS also seems to work, but be sure you're using the OpenMP, not the pthreads, variant.${ColourReset}""); endif(). unset(BLAS_LIBRARIES); unset(LAPACK_LIBRARIES); unset(BLAS_INCLUDE_DIRS); unset(LAPACK_INCLUDE_DIRS). set(PN ${PROJECT_NAME}); install(TARGETS blas lapk lapack; EXPORT ""${PN}Targets""). # <<< Export Config >>>. include(CMakePackageConfigHelpers). set(CMAKECONFIG_INSTALL_DIR ""${TargetLAPACK_INSTALL_CMAKEDIR}""); configure_package_config_file(${PN}Config.cmake.in; ""${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake""; INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR}); install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake; ${CMAKE_CURRENT_SOURCE_DIR}/FindTargetOpenMP.cmake; ${CMAKE_CURRENT_SOURCE_DIR}/FindMathOpenMP.cmake; DESTINATION ${CMAKECONFIG_INSTALL_DIR}); install(EXPORT ""${PN}Targets""; NAMESPACE ""tgt::""; DESTINATION ${CMAKECONFIG_INSTALL_DIR}). add_custom_target(lapack_external; ${CMAKE_COMMAND} ""-DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}"" -P ""${PROJECT_BINARY_DIR}/cmake_install.cmake""; COMMENT ""Installing Psi4-detected BLAS/LAPACK""). set(${PN}_DIR ${STAGED_INSTALL_PREFIX}/${TargetLAPACK_INSTALL_CMAKEDIR} CACHE PATH ""path to externally detected ${PN}Config.cmake"" FORCE); ",MatchSource.DOCS,external/common/lapack/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/common/lapack/CMakeLists.txt
Testability,test,tested,"MKL""); set(_VENDOR ""MKL""); else(); set(_VENDOR ""All""); endif(); set_target_properties(; lapack; PROPERTIES; VENDOR ${_VENDOR}; INT_INTERFACE lp64 # Psi4 only works with lp64 afaik; ); set(export_properties ""VENDOR;INT_INTERFACE""); set_property(TARGET lapack APPEND PROPERTY EXPORT_PROPERTIES ""${export_properties}""). # << Detect OpenMP and modify for BLAS/LAPACK >>; if(NOT TARGET tgt::MathOpenMP); list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}); set(TargetOpenMP_FIND_COMPONENTS ""CXX""); find_package(MathOpenMP); endif(). #include(CMakePrintHelpers); #cmake_print_properties(TARGETS OpenMP::OpenMP_CXX OpenMP::OpenMP tgt::MathOpenMP lapack; # PROPERTIES INTERFACE_COMPILE_DEFINITIONS INTERFACE_COMPILE_OPTIONS INTERFACE_INCLUDE_DIRS INTERFACE_LINK_LIBRARIES). get_property(_ill TARGET lapk PROPERTY INTERFACE_LINK_LIBRARIES); list(GET _ill 0 _ill0); message(STATUS ""${Cyan}Found LAPACK${isMKL}${ColourReset}: ${_ill0};...""). if(NOT (${isMKL} MATCHES ""MKL"")); message(WARNING ""${Yellow}MKL is the only BLAS/LAPACK distribution thoroughly tested with Psi4. Several others are mostly fine, with problems cropping up in particular modules or when running in threaded mode. When using a non-MKL distribution, please run the test suite in full and also run particular tests in threaded mode, if you plan to run Psi4 threaded. MKL is freely available through conda; see instructions to compile against conda MKL through the 'source' option on the download website page. OpenBLAS also seems to work, but be sure you're using the OpenMP, not the pthreads, variant.${ColourReset}""); endif(). unset(BLAS_LIBRARIES); unset(LAPACK_LIBRARIES); unset(BLAS_INCLUDE_DIRS); unset(LAPACK_INCLUDE_DIRS). set(PN ${PROJECT_NAME}); install(TARGETS blas lapk lapack; EXPORT ""${PN}Targets""). # <<< Export Config >>>. include(CMakePackageConfigHelpers). set(CMAKECONFIG_INSTALL_DIR ""${TargetLAPACK_INSTALL_CMAKEDIR}""); configure_package_config_file(${PN}Config.cmake.in; ""${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cma",MatchSource.DOCS,external/common/lapack/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/common/lapack/CMakeLists.txt
Deployability,install,install,"if(${ENABLE_adcc}); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_adcc})); include(FindPythonModule); find_python_module(adcc ATLEAST 0.15.16 QUIET); endif(). if(${adcc_FOUND}); message(STATUS ""${Cyan}Found adcc${ColourReset}: ${PY_adcc} (found version ${adcc_VERSION})""); add_library(adcc_external INTERFACE) # dummy. else(); if(${CMAKE_INSIST_FIND_PACKAGE_adcc}); message(FATAL_ERROR ""Suitable adcc could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable adcc could not be located, ${Magenta}Building adcc${ColourReset} instead.""). ExternalProject_Add(adcc_external; BUILD_ALWAYS 1; URL https://github.com/adc-connect/adcc/archive/v0.15.16.tar.gz; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; --record=record.txt; --single-version-externally-managed; --install-lib=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}); endif(); else(); add_library(adcc_external INTERFACE) # dummy; endif(); ",MatchSource.DOCS,external/downstream/adcc/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/downstream/adcc/CMakeLists.txt
Integrability,message,message,"if(${ENABLE_adcc}); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_adcc})); include(FindPythonModule); find_python_module(adcc ATLEAST 0.15.16 QUIET); endif(). if(${adcc_FOUND}); message(STATUS ""${Cyan}Found adcc${ColourReset}: ${PY_adcc} (found version ${adcc_VERSION})""); add_library(adcc_external INTERFACE) # dummy. else(); if(${CMAKE_INSIST_FIND_PACKAGE_adcc}); message(FATAL_ERROR ""Suitable adcc could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable adcc could not be located, ${Magenta}Building adcc${ColourReset} instead.""). ExternalProject_Add(adcc_external; BUILD_ALWAYS 1; URL https://github.com/adc-connect/adcc/archive/v0.15.16.tar.gz; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; --record=record.txt; --single-version-externally-managed; --install-lib=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}); endif(); else(); add_library(adcc_external INTERFACE) # dummy; endif(); ",MatchSource.DOCS,external/downstream/adcc/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/downstream/adcc/CMakeLists.txt
Integrability,message,message,"if(${ENABLE_cct3}); find_package(cct3 0.1 CONFIG QUIET). if(${cct3_FOUND}); get_property(_loc TARGET cct3::cct3 PROPERTY LOCATION); message(STATUS ""${Cyan}Found cct3${ColourReset}: ${_loc} (found version ${cct3_VERSION})""); add_library(cct3_external INTERFACE) # dummy. else(); if(${CMAKE_INSIST_FIND_PACKAGE_cct3}); message(FATAL_ERROR ""Suitable cct3 could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable cct3 could not be located, ${Magenta}Building cct3${ColourReset} instead.""). ExternalProject_Add(cct3_external; DEPENDS psi4-core; URL https://github.com/piecuch-group/cct3/archive/bff480f.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; -DENABLE_XHOST=${ENABLE_XHOST}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -Dpsi4_DIR=${STAGED_INSTALL_PREFIX}/share/cmake/psi4; -Dpybind11_DIR=${pybind11_DIR}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; -DCMAKE_Fortran_FLAGS:STRING=${CMAKE_Fortran_FLAGS}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}; -DCMAKE_CXX_COMPILER_ARG1:STRING=${CMAKE_CXX_COMPILER_ARG1}; -DCMAKE_Fortran_COMPILER_ARG1:STRING=${CMAKE_Fortran_COMPILER_ARG1}; -DCMAKE_PREFIX_PATH:PATH=${STAGED_INSTALL_PREFIX}). set(cct3_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/cct3 CACHE PATH ""path to internally built cct3Config.cmake"" FORCE); endif(); else(); add_library(cct3_external INTERFACE) # dummy; endif(); ",MatchSource.DOCS,external/downstream/cct3/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/downstream/cct3/CMakeLists.txt
Deployability,install,install,"if(${ENABLE_gpu_dfcc}); find_package(gpu_dfcc 0.3 CONFIG QUIET); if(${gpu_dfcc_FOUND}); get_property(_loc TARGET gpu_dfcc::gpu_dfcc PROPERTY LOCATION); message(STATUS ""${Cyan}Found gpu_dfcc${ColourReset}: ${_loc} (found version ${gpu_dfcc_VERSION})""); add_library(gpu_dfcc_external INTERFACE) # dummy. else(); if(${CMAKE_INSIST_FIND_PACKAGE_gpu_dfcc}); message(FATAL_ERROR ""Suitable gpu_dfcc could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable gpu_dfcc could not be located, ${Magenta}Building gpu_dfcc${ColourReset} instead.""). ExternalProject_Add(gpu_dfcc_external; DEPENDS psi4-core; URL https://github.com/edeprince3/gpu_dfcc/archive/b98c6f1.tar.gz # v0.3 + 1 (install fix); UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CUDA_COMPILER=${CMAKE_CUDA_COMPILER}; -DCUDA_TOOLKIT_ROOT_DIR=${CUDA_TOOLKIT_ROOT_DIR}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; -DENABLE_XHOST=${ENABLE_XHOST}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -Dpsi4_DIR=${STAGED_INSTALL_PREFIX}/share/cmake/psi4; -Dpybind11_DIR=${pybind11_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; -DCMAKE_CUDA_FLAGS:STRING=${CMAKE_CUDA_FLAGS}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}; -DCMAKE_CXX_COMPILER_ARG1:STRING=${CMAKE_CXX_COMPILER_ARG1}; -DCMAKE_PREFIX_PATH:PATH=${STAGED_INSTALL_PREFIX}). set(gpu_dfcc_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/gpu_dfcc CACHE PATH ""path to internally built gpu_dfccConfig.cmake"" FORCE); endif(); else(); add_library(gpu_dfcc_external INTERFACE) # dummy; endif(). ",MatchSource.DOCS,external/downstream/gpu_dfcc/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/downstream/gpu_dfcc/CMakeLists.txt
Integrability,message,message,"if(${ENABLE_gpu_dfcc}); find_package(gpu_dfcc 0.3 CONFIG QUIET); if(${gpu_dfcc_FOUND}); get_property(_loc TARGET gpu_dfcc::gpu_dfcc PROPERTY LOCATION); message(STATUS ""${Cyan}Found gpu_dfcc${ColourReset}: ${_loc} (found version ${gpu_dfcc_VERSION})""); add_library(gpu_dfcc_external INTERFACE) # dummy. else(); if(${CMAKE_INSIST_FIND_PACKAGE_gpu_dfcc}); message(FATAL_ERROR ""Suitable gpu_dfcc could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable gpu_dfcc could not be located, ${Magenta}Building gpu_dfcc${ColourReset} instead.""). ExternalProject_Add(gpu_dfcc_external; DEPENDS psi4-core; URL https://github.com/edeprince3/gpu_dfcc/archive/b98c6f1.tar.gz # v0.3 + 1 (install fix); UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CUDA_COMPILER=${CMAKE_CUDA_COMPILER}; -DCUDA_TOOLKIT_ROOT_DIR=${CUDA_TOOLKIT_ROOT_DIR}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; -DENABLE_XHOST=${ENABLE_XHOST}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -Dpsi4_DIR=${STAGED_INSTALL_PREFIX}/share/cmake/psi4; -Dpybind11_DIR=${pybind11_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; -DCMAKE_CUDA_FLAGS:STRING=${CMAKE_CUDA_FLAGS}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}; -DCMAKE_CXX_COMPILER_ARG1:STRING=${CMAKE_CXX_COMPILER_ARG1}; -DCMAKE_PREFIX_PATH:PATH=${STAGED_INSTALL_PREFIX}). set(gpu_dfcc_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/gpu_dfcc CACHE PATH ""path to internally built gpu_dfccConfig.cmake"" FORCE); endif(); else(); add_library(gpu_dfcc_external INTERFACE) # dummy; endif(). ",MatchSource.DOCS,external/downstream/gpu_dfcc/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/downstream/gpu_dfcc/CMakeLists.txt
Deployability,install,install,"# Format borrowed from sns-mp2 CMakeLists. if(${ENABLE_psi4fockci}); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_psi4fockci})); include(FindPythonModule); find_python_module(psi4fockci ATLEAST 0.1.0 QUIET); endif(). if(${psi4fockci_FOUND}); message(STATUS ""${Cyan}Found Psi4FockCI${ColourReset}: ${PY_psi4fockci} (found version ${psi4fockci_VERSION})""); add_library(psi4fockci_external INTERFACE) # dummy. else(); if(${CMAKE_INSIST_FIND_PACKAGE_psi4fockci}); message(FATAL_ERROR ""Suitable Psi4FockCI could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable Psi4FockCI could not be located, ${Magenta}Building Psi4FockCI${ColourReset} instead.""). ExternalProject_Add(psi4fockci_external; BUILD_ALWAYS 1; URL https://github.com/shannonhouck/psi4fockci/archive/267e171.tar.gz # v0.1.0; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; --record=record.txt; --install-lib=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}); endif(); else(); add_library(psi4fockci_external INTERFACE) # dummy; endif(); ",MatchSource.DOCS,external/downstream/psi4fockci/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/downstream/psi4fockci/CMakeLists.txt
Integrability,message,message,"# Format borrowed from sns-mp2 CMakeLists. if(${ENABLE_psi4fockci}); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_psi4fockci})); include(FindPythonModule); find_python_module(psi4fockci ATLEAST 0.1.0 QUIET); endif(). if(${psi4fockci_FOUND}); message(STATUS ""${Cyan}Found Psi4FockCI${ColourReset}: ${PY_psi4fockci} (found version ${psi4fockci_VERSION})""); add_library(psi4fockci_external INTERFACE) # dummy. else(); if(${CMAKE_INSIST_FIND_PACKAGE_psi4fockci}); message(FATAL_ERROR ""Suitable Psi4FockCI could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable Psi4FockCI could not be located, ${Magenta}Building Psi4FockCI${ColourReset} instead.""). ExternalProject_Add(psi4fockci_external; BUILD_ALWAYS 1; URL https://github.com/shannonhouck/psi4fockci/archive/267e171.tar.gz # v0.1.0; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; --record=record.txt; --install-lib=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}); endif(); else(); add_library(psi4fockci_external INTERFACE) # dummy; endif(); ",MatchSource.DOCS,external/downstream/psi4fockci/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/downstream/psi4fockci/CMakeLists.txt
Deployability,install,install,"if(${ENABLE_snsmp2}); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_snsmp2})); include(FindPythonModule); find_python_module(snsmp2 ATLEAST 1.0.0 QUIET); endif(). if(${snsmp2_FOUND}); message(STATUS ""${Cyan}Found snsmp2${ColourReset}: ${PY_snsmp2} (found version ${snsmp2_VERSION})""); add_library(snsmp2_external INTERFACE) # dummy. else(); if(${CMAKE_INSIST_FIND_PACKAGE_snsmp2}); message(FATAL_ERROR ""Suitable snsmp2 could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable snsmp2 could not be located, ${Magenta}Building snsmp2${ColourReset} instead.""). ExternalProject_Add(snsmp2_external; DEPENDS qcelemental_external; BUILD_ALWAYS 1; URL https://github.com/DEShawResearch/sns-mp2/archive/12462c6.tar.gz # v1.0 + 26; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; --record=record.txt; --single-version-externally-managed; --install-lib=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}); endif(); else(); add_library(snsmp2_external INTERFACE) # dummy; endif(); #--install-scripts=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}; #--install-data=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}; #--install-headers=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}; ",MatchSource.DOCS,external/downstream/snsmp2/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/downstream/snsmp2/CMakeLists.txt
Integrability,message,message,"if(${ENABLE_snsmp2}); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_snsmp2})); include(FindPythonModule); find_python_module(snsmp2 ATLEAST 1.0.0 QUIET); endif(). if(${snsmp2_FOUND}); message(STATUS ""${Cyan}Found snsmp2${ColourReset}: ${PY_snsmp2} (found version ${snsmp2_VERSION})""); add_library(snsmp2_external INTERFACE) # dummy. else(); if(${CMAKE_INSIST_FIND_PACKAGE_snsmp2}); message(FATAL_ERROR ""Suitable snsmp2 could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable snsmp2 could not be located, ${Magenta}Building snsmp2${ColourReset} instead.""). ExternalProject_Add(snsmp2_external; DEPENDS qcelemental_external; BUILD_ALWAYS 1; URL https://github.com/DEShawResearch/sns-mp2/archive/12462c6.tar.gz # v1.0 + 26; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; --record=record.txt; --single-version-externally-managed; --install-lib=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}); endif(); else(); add_library(snsmp2_external INTERFACE) # dummy; endif(); #--install-scripts=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}; #--install-data=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}; #--install-headers=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}; ",MatchSource.DOCS,external/downstream/snsmp2/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/downstream/snsmp2/CMakeLists.txt
Integrability,message,message,"if(${ENABLE_v2rdm_casscf}); find_package(v2rdm_casscf 0.9 CONFIG QUIET). if(${v2rdm_casscf_FOUND}); get_property(_loc TARGET v2rdm_casscf::v2rdm_casscf PROPERTY LOCATION); message(STATUS ""${Cyan}Found v2rdm_casscf${ColourReset}: ${_loc} (found version ${v2rdm_casscf_VERSION})""); add_library(v2rdm_casscf_external INTERFACE) # dummy. else(); if(${CMAKE_INSIST_FIND_PACKAGE_v2rdm_casscf}); message(FATAL_ERROR ""Suitable v2rdm_casscf could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable v2rdm_casscf could not be located, ${Magenta}Building v2rdm_casscf${ColourReset} instead.""). ExternalProject_Add(v2rdm_casscf_external; DEPENDS psi4-core; URL https://github.com/loriab/v2rdm_casscf/archive/aa7d6a1.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; -DENABLE_XHOST=${ENABLE_XHOST}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -Dpsi4_DIR=${STAGED_INSTALL_PREFIX}/share/cmake/psi4; -Dpybind11_DIR=${pybind11_DIR}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; -DCMAKE_Fortran_FLAGS:STRING=${CMAKE_Fortran_FLAGS}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}; -DCMAKE_CXX_COMPILER_ARG1:STRING=${CMAKE_CXX_COMPILER_ARG1}; -DCMAKE_Fortran_COMPILER_ARG1:STRING=${CMAKE_Fortran_COMPILER_ARG1}; -DCMAKE_PREFIX_PATH:PATH=${STAGED_INSTALL_PREFIX}). set(v2rdm_casscf_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/v2rdm_casscf CACHE PATH ""path to internally built v2rdm_casscfConfig.cmake"" FORCE); endi",MatchSource.DOCS,external/downstream/v2rdm_casscf/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/downstream/v2rdm_casscf/CMakeLists.txt
Integrability,message,message,"if(${ENABLE_ambit}); find_package(ambit 0.6 CONFIG QUIET). if(${ambit_FOUND}); get_property(_loc TARGET ambit::ambit PROPERTY LOCATION); message(STATUS ""${Cyan}Found ambit${ColourReset}: ${_loc} (found version ${ambit_VERSION})""); add_library(ambit_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_ambit}); message(VERBOSE ""Suitable ambit located externally as user insists""); endif(). # reset below necessary as find_package clears it. better solution sought; set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected ambitConfig.cmake"" FORCE); else(); if(${CMAKE_INSIST_FIND_PACKAGE_ambit}); message(FATAL_ERROR ""Suitable ambit could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable ambit could not be located, ${Magenta}Building ambit${ColourReset} instead.""). if(${BUILD_SHARED_LIBS}); set(_a_only OFF); set(_so_only ON); else(); set(_a_only ON); set(_so_only OFF); endif(). set(_ambit_dir ""share/cmake/ambit""). ExternalProject_Add(ambit_external; DEPENDS lapack_external; hdf5_external; pybind11_external; URL https://github.com/jturney/ambit/archive/733c529.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DSTATIC_ONLY=${_a_only}; -DSHARED_ONLY=${_so_only}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant; #-DENABLE_VECTORIZATION=${ENABLE_VECTORIZATION}; #-DEXTRA_Fortran_FLAGS=${CMAKE_EXTRA_Fortran_FLAGS}; -DEXTRA_C_FLAGS=${CMAKE_C_FLAGS}; -DEXTRA_CXX_FLAGS=${CMAKE_CXX_FLAGS}; -Dambit_INSTALL_CMAKEDIR=${_ambit_dir}; -DPython_EXECUTABLE=${Python_EXECUTABLE}; -DPython_INCLUDE_DIR=${Python_INCLUDE_DIRS}; -DPytho",MatchSource.DOCS,external/upstream/ambit/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/ambit/CMakeLists.txt
Safety,detect,detected,"if(${ENABLE_ambit}); find_package(ambit 0.6 CONFIG QUIET). if(${ambit_FOUND}); get_property(_loc TARGET ambit::ambit PROPERTY LOCATION); message(STATUS ""${Cyan}Found ambit${ColourReset}: ${_loc} (found version ${ambit_VERSION})""); add_library(ambit_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_ambit}); message(VERBOSE ""Suitable ambit located externally as user insists""); endif(). # reset below necessary as find_package clears it. better solution sought; set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected ambitConfig.cmake"" FORCE); else(); if(${CMAKE_INSIST_FIND_PACKAGE_ambit}); message(FATAL_ERROR ""Suitable ambit could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable ambit could not be located, ${Magenta}Building ambit${ColourReset} instead.""). if(${BUILD_SHARED_LIBS}); set(_a_only OFF); set(_so_only ON); else(); set(_a_only ON); set(_so_only OFF); endif(). set(_ambit_dir ""share/cmake/ambit""). ExternalProject_Add(ambit_external; DEPENDS lapack_external; hdf5_external; pybind11_external; URL https://github.com/jturney/ambit/archive/733c529.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DSTATIC_ONLY=${_a_only}; -DSHARED_ONLY=${_so_only}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant; #-DENABLE_VECTORIZATION=${ENABLE_VECTORIZATION}; #-DEXTRA_Fortran_FLAGS=${CMAKE_EXTRA_Fortran_FLAGS}; -DEXTRA_C_FLAGS=${CMAKE_C_FLAGS}; -DEXTRA_CXX_FLAGS=${CMAKE_CXX_FLAGS}; -Dambit_INSTALL_CMAKEDIR=${_ambit_dir}; -DPython_EXECUTABLE=${Python_EXECUTABLE}; -DPython_INCLUDE_DIR=${Python_INCLUDE_DIRS}; -DPytho",MatchSource.DOCS,external/upstream/ambit/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/ambit/CMakeLists.txt
Usability,clear,clears,"if(${ENABLE_ambit}); find_package(ambit 0.6 CONFIG QUIET). if(${ambit_FOUND}); get_property(_loc TARGET ambit::ambit PROPERTY LOCATION); message(STATUS ""${Cyan}Found ambit${ColourReset}: ${_loc} (found version ${ambit_VERSION})""); add_library(ambit_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_ambit}); message(VERBOSE ""Suitable ambit located externally as user insists""); endif(). # reset below necessary as find_package clears it. better solution sought; set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected ambitConfig.cmake"" FORCE); else(); if(${CMAKE_INSIST_FIND_PACKAGE_ambit}); message(FATAL_ERROR ""Suitable ambit could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable ambit could not be located, ${Magenta}Building ambit${ColourReset} instead.""). if(${BUILD_SHARED_LIBS}); set(_a_only OFF); set(_so_only ON); else(); set(_a_only ON); set(_so_only OFF); endif(). set(_ambit_dir ""share/cmake/ambit""). ExternalProject_Add(ambit_external; DEPENDS lapack_external; hdf5_external; pybind11_external; URL https://github.com/jturney/ambit/archive/733c529.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DSTATIC_ONLY=${_a_only}; -DSHARED_ONLY=${_so_only}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant; #-DENABLE_VECTORIZATION=${ENABLE_VECTORIZATION}; #-DEXTRA_Fortran_FLAGS=${CMAKE_EXTRA_Fortran_FLAGS}; -DEXTRA_C_FLAGS=${CMAKE_C_FLAGS}; -DEXTRA_CXX_FLAGS=${CMAKE_CXX_FLAGS}; -Dambit_INSTALL_CMAKEDIR=${_ambit_dir}; -DPython_EXECUTABLE=${Python_EXECUTABLE}; -DPython_INCLUDE_DIR=${Python_INCLUDE_DIRS}; -DPytho",MatchSource.DOCS,external/upstream/ambit/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/ambit/CMakeLists.txt
Integrability,message,message,"find_package(BrianQC 1.1 CONFIG QUIET). if(${BrianQC_FOUND}); get_property(_loc TARGET BrianQC::static_wrapper PROPERTY LOCATION); message(STATUS ""${Cyan}Found BrianQC${ColourReset}: ${_loc} (found version ${BrianQC_VERSION})""); add_library(brianqc_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_BrianQC}); message(VERBOSE ""Suitable BrianQC located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_BrianQC}); message(FATAL_ERROR ""Suitable BrianQC could not be externally located as user insists""); endif(). message(STATUS ""Suitable BrianQC could not be located, please contact info@brianqc.com to obtain BrianQC""). add_library(brianqc_external INTERFACE) # ensuring that the dummy target exists anyway; endif(); ",MatchSource.DOCS,external/upstream/brianqc/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/brianqc/CMakeLists.txt
Deployability,install,install,"if(${ENABLE_bse}); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_bse})); include(FindPythonModule); find_python_module(basis_set_exchange ATLEAST 0.9.0 QUIET); endif(); ; if(${basis_set_exchange_FOUND}); message(STATUS ""${Cyan}Found bse${ColourReset}: ${PY_basis_set_exchange} (found version ${basis_set_exchange_VERSION})""); add_library(bse_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_bse}); message(VERBOSE ""Suitable bse located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_bse}); message(FATAL_ERROR ""Suitable bse could not be externally located as user insists""); endif(); ; include(ExternalProject); message(STATUS ""Suitable bse could not be located, ${Magenta}Building bse${ColourReset} instead.""); ; file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); ; ExternalProject_Add(bse_external; BUILD_ALWAYS 1; URL https://github.com/MolSSI-BSE/basis_set_exchange/archive/v0.9.tar.gz; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; --record=record.txt; --single-version-externally-managed; --install-lib=${_install_lib}); endif(); else(); add_library(bse_external INTERFACE) # dummy; endif(). ",MatchSource.DOCS,external/upstream/bse/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/bse/CMakeLists.txt
Integrability,message,message,"if(${ENABLE_bse}); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_bse})); include(FindPythonModule); find_python_module(basis_set_exchange ATLEAST 0.9.0 QUIET); endif(); ; if(${basis_set_exchange_FOUND}); message(STATUS ""${Cyan}Found bse${ColourReset}: ${PY_basis_set_exchange} (found version ${basis_set_exchange_VERSION})""); add_library(bse_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_bse}); message(VERBOSE ""Suitable bse located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_bse}); message(FATAL_ERROR ""Suitable bse could not be externally located as user insists""); endif(); ; include(ExternalProject); message(STATUS ""Suitable bse could not be located, ${Magenta}Building bse${ColourReset} instead.""); ; file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); ; ExternalProject_Add(bse_external; BUILD_ALWAYS 1; URL https://github.com/MolSSI-BSE/basis_set_exchange/archive/v0.9.tar.gz; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; --record=record.txt; --single-version-externally-managed; --install-lib=${_install_lib}); endif(); else(); add_library(bse_external INTERFACE) # dummy; endif(). ",MatchSource.DOCS,external/upstream/bse/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/bse/CMakeLists.txt
Integrability,message,message,"if(${ENABLE_CheMPS2}); find_package(CheMPS2 1.8.7 CONFIG QUIET). if(${CheMPS2_FOUND}); get_property(_loc TARGET CheMPS2::chemps2 PROPERTY LOCATION); message(STATUS ""${Cyan}Found CheMPS2${ColourReset}: ${_loc} (found version ${CheMPS2_VERSION})""); add_library(chemps2_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_CheMPS2}); message(VERBOSE ""Suitable CheMPS2 located externally as user insists""); endif(). # reset below necessary as find_package clears it. better solution sought; set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected CheMPS2Config.cmake"" FORCE); else(); if(${CMAKE_INSIST_FIND_PACKAGE_CheMPS2}); message(FATAL_ERROR ""Suitable CheMPS2 could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable CheMPS2 could not be located, ${Magenta}Building CheMPS2${ColourReset} instead.""). if(${BUILD_SHARED_LIBS}); set(_a_only OFF); set(_so_only ON); else(); set(_a_only ON); set(_so_only OFF); endif(). ExternalProject_Add(chemps2_external; DEPENDS lapack_external; hdf5_external; URL https://github.com/SebWouters/CheMPS2/archive/d8ac508.tar.gz # v1.8.9 + 1; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DSTATIC_ONLY=${_a_only}; -DSHARED_ONLY=${_so_only}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DCMAKE_RANLIB=${CMAKE_RANLIB}; -DCMAKE_AR=${CMAKE_AR}; -DCMAKE_NM=${CMAKE_NM}; -DENABLE_TESTS=OFF; -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -DTargetHDF5_DIR=${TargetHDF5_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPL",MatchSource.DOCS,external/upstream/chemps2/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/chemps2/CMakeLists.txt
Safety,detect,detected,"if(${ENABLE_CheMPS2}); find_package(CheMPS2 1.8.7 CONFIG QUIET). if(${CheMPS2_FOUND}); get_property(_loc TARGET CheMPS2::chemps2 PROPERTY LOCATION); message(STATUS ""${Cyan}Found CheMPS2${ColourReset}: ${_loc} (found version ${CheMPS2_VERSION})""); add_library(chemps2_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_CheMPS2}); message(VERBOSE ""Suitable CheMPS2 located externally as user insists""); endif(). # reset below necessary as find_package clears it. better solution sought; set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected CheMPS2Config.cmake"" FORCE); else(); if(${CMAKE_INSIST_FIND_PACKAGE_CheMPS2}); message(FATAL_ERROR ""Suitable CheMPS2 could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable CheMPS2 could not be located, ${Magenta}Building CheMPS2${ColourReset} instead.""). if(${BUILD_SHARED_LIBS}); set(_a_only OFF); set(_so_only ON); else(); set(_a_only ON); set(_so_only OFF); endif(). ExternalProject_Add(chemps2_external; DEPENDS lapack_external; hdf5_external; URL https://github.com/SebWouters/CheMPS2/archive/d8ac508.tar.gz # v1.8.9 + 1; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DSTATIC_ONLY=${_a_only}; -DSHARED_ONLY=${_so_only}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DCMAKE_RANLIB=${CMAKE_RANLIB}; -DCMAKE_AR=${CMAKE_AR}; -DCMAKE_NM=${CMAKE_NM}; -DENABLE_TESTS=OFF; -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -DTargetHDF5_DIR=${TargetHDF5_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPL",MatchSource.DOCS,external/upstream/chemps2/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/chemps2/CMakeLists.txt
Usability,clear,clears,"if(${ENABLE_CheMPS2}); find_package(CheMPS2 1.8.7 CONFIG QUIET). if(${CheMPS2_FOUND}); get_property(_loc TARGET CheMPS2::chemps2 PROPERTY LOCATION); message(STATUS ""${Cyan}Found CheMPS2${ColourReset}: ${_loc} (found version ${CheMPS2_VERSION})""); add_library(chemps2_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_CheMPS2}); message(VERBOSE ""Suitable CheMPS2 located externally as user insists""); endif(). # reset below necessary as find_package clears it. better solution sought; set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected CheMPS2Config.cmake"" FORCE); else(); if(${CMAKE_INSIST_FIND_PACKAGE_CheMPS2}); message(FATAL_ERROR ""Suitable CheMPS2 could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable CheMPS2 could not be located, ${Magenta}Building CheMPS2${ColourReset} instead.""). if(${BUILD_SHARED_LIBS}); set(_a_only OFF); set(_so_only ON); else(); set(_a_only ON); set(_so_only OFF); endif(). ExternalProject_Add(chemps2_external; DEPENDS lapack_external; hdf5_external; URL https://github.com/SebWouters/CheMPS2/archive/d8ac508.tar.gz # v1.8.9 + 1; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DSTATIC_ONLY=${_a_only}; -DSHARED_ONLY=${_so_only}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DCMAKE_RANLIB=${CMAKE_RANLIB}; -DCMAKE_AR=${CMAKE_AR}; -DCMAKE_NM=${CMAKE_NM}; -DENABLE_TESTS=OFF; -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -DTargetHDF5_DIR=${TargetHDF5_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPL",MatchSource.DOCS,external/upstream/chemps2/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/chemps2/CMakeLists.txt
Integrability,message,message,"if(${ENABLE_cppe}); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_cppe})); include(FindPythonModule); find_python_module(cppe ATLEAST 0.3.1 QUIET); endif(). if(${cppe_FOUND}); message(STATUS ""${Cyan}Found cppe${ColourReset}: ${PY_cppe} (found version ${cppe_VERSION})""); add_library(cppe_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_cppe}); message(VERBOSE ""Suitable cppe located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_cppe}); message(FATAL_ERROR ""Suitable cppe could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable cppe could not be located, ${Magenta}Building cppe${ColourReset} instead.""). ExternalProject_Add(cppe_external; DEPENDS pybind11_external; URL https://github.com/maxscheurer/cppe/archive/v0.3.1.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; # runtime segfault if Debug passed from Psi4; -DCMAKE_BUILD_TYPE=Release; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_DATADIR=${CMAKE_INSTALL_DATADIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; -DENABLE_OPENMP=OFF; -DENABLE_PYTHON_INTERFACE=ON; -DPython_EXECUTABLE=${Python_EXECUTABLE}; -DPython_INCLUDE_DIR=${Python_INCLUDE_DIRS}; -DPython_LIBRARY=${Python_LIBRARIES}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -DINSTALL_DEVEL_HEADERS=OFF; -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -Dpybind11_DIR=${pybind11_DIR}; -DCMAKE_INSIST_FIND_PACKAGE_pybind11=ON; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; -DCMAKE_CXX_COMPILER_ARG1:STRING=${CMAKE_CXX_COMPILER_ARG1}; -DTargetOpenMP_FIND_COMPONENTS:STRING=CXX",MatchSource.DOCS,external/upstream/cppe/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/cppe/CMakeLists.txt
Deployability,install,install,"if(${ENABLE_ddx}); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_ddx})); include(FindPythonModule); find_python_module(pyddx ATLEAST 0.4.2 QUIET); endif(). if(${pyddx_FOUND}); message(STATUS ""${Cyan}Found ddx${ColourReset}: ${PY_pyddx} (found version ${pyddx_VERSION})""); add_library(ddx_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_ddx}); message(VERBOSE ""Suitable ddx located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_ddx}); message(FATAL_ERROR ""Suitable ddx could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable ddx could not be located, ${Magenta}Building ddx${ColourReset} instead.""). file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}"" _install_bin). ExternalProject_Add(ddx_external; BUILD_ALWAYS 1; URL https://github.com/ddsolvation/ddX/archive/v0.4.5.tar.gz; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; --record=record.txt; --single-version-externally-managed; --install-scripts=${_install_bin}; --install-lib=${_install_lib}); endif(); else(); add_library(ddx_external INTERFACE) # dummy; endif(); ",MatchSource.DOCS,external/upstream/ddx/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/ddx/CMakeLists.txt
Integrability,message,message,"if(${ENABLE_ddx}); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_ddx})); include(FindPythonModule); find_python_module(pyddx ATLEAST 0.4.2 QUIET); endif(). if(${pyddx_FOUND}); message(STATUS ""${Cyan}Found ddx${ColourReset}: ${PY_pyddx} (found version ${pyddx_VERSION})""); add_library(ddx_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_ddx}); message(VERBOSE ""Suitable ddx located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_ddx}); message(FATAL_ERROR ""Suitable ddx could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable ddx could not be located, ${Magenta}Building ddx${ColourReset} instead.""). file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}"" _install_bin). ExternalProject_Add(ddx_external; BUILD_ALWAYS 1; URL https://github.com/ddsolvation/ddX/archive/v0.4.5.tar.gz; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; --record=record.txt; --single-version-externally-managed; --install-scripts=${_install_bin}; --install-lib=${_install_lib}); endif(); else(); add_library(ddx_external INTERFACE) # dummy; endif(); ",MatchSource.DOCS,external/upstream/ddx/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/ddx/CMakeLists.txt
Integrability,message,message,"if(${ENABLE_dkh}); find_package(dkh 1.2 CONFIG QUIET). if(${dkh_FOUND}); get_property(_loc TARGET dkh::dkh PROPERTY LOCATION); message(STATUS ""${Cyan}Found dkh${ColourReset}: ${_loc} (found version ${dkh_VERSION})""); add_library(dkh_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_dkh}); message(VERBOSE ""Suitable dkh located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_dkh}); message(FATAL_ERROR ""Suitable dkh could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable dkh could not be located, ${Magenta}Building dkh${ColourReset} instead.""). set(_dkh_dir ""share/cmake/dkh""). ExternalProject_Add(dkh_external; DEPENDS lapack_external; URL https://github.com/psi4/dkh/archive/3ba0128.tar.gz # v1.2 + cmake; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}; -Ddkh_INSTALL_CMAKEDIR=${_dkh_dir}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant for thread safety; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_Fortran_FLAGS:STRING=${CMAKE_Fortran_FLAGS}; -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_Fortran_COMPILER_ARG1:STRING=${CMAKE_Fortran_COMPILER_ARG1}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}). set(dkh_DIR ${STAGED_INSTALL_PREFIX}/${_dkh_dir} CACHE PATH ""path to internally built dkhConfig.cmake"" FORCE); endif(); else(); add_library(dkh_external INTERFACE) # dummy; endif(). ",MatchSource.DOCS,external/upstream/dkh/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/dkh/CMakeLists.txt
Safety,safe,safety,"if(${ENABLE_dkh}); find_package(dkh 1.2 CONFIG QUIET). if(${dkh_FOUND}); get_property(_loc TARGET dkh::dkh PROPERTY LOCATION); message(STATUS ""${Cyan}Found dkh${ColourReset}: ${_loc} (found version ${dkh_VERSION})""); add_library(dkh_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_dkh}); message(VERBOSE ""Suitable dkh located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_dkh}); message(FATAL_ERROR ""Suitable dkh could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable dkh could not be located, ${Magenta}Building dkh${ColourReset} instead.""). set(_dkh_dir ""share/cmake/dkh""). ExternalProject_Add(dkh_external; DEPENDS lapack_external; URL https://github.com/psi4/dkh/archive/3ba0128.tar.gz # v1.2 + cmake; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}; -Ddkh_INSTALL_CMAKEDIR=${_dkh_dir}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant for thread safety; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_Fortran_FLAGS:STRING=${CMAKE_Fortran_FLAGS}; -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_Fortran_COMPILER_ARG1:STRING=${CMAKE_Fortran_COMPILER_ARG1}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}). set(dkh_DIR ${STAGED_INSTALL_PREFIX}/${_dkh_dir} CACHE PATH ""path to internally built dkhConfig.cmake"" FORCE); endif(); else(); add_library(dkh_external INTERFACE) # dummy; endif(). ",MatchSource.DOCS,external/upstream/dkh/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/dkh/CMakeLists.txt
Integrability,message,message,"if(${ENABLE_ecpint}); find_package(ecpint 1.0.7 CONFIG QUIET). if(${ecpint_FOUND}); get_property(_loc TARGET ECPINT::ecpint PROPERTY LOCATION); message(STATUS ""${Cyan}Found ecpint${ColourReset}: ${_loc} (found version ${ecpint_VERSION})""); add_library(ecpint_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_ecpint}); message(VERBOSE ""Suitable ecpint located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_ecpint}); message(FATAL_ERROR ""Suitable ecpint could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable ecpint could not be located, ${Magenta}Building ecpint${ColourReset} instead.""); ExternalProject_Add(ecpint_external; URL https://github.com/robashaw/libecpint/archive/v1.0.7.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; -DLIBECPINT_USE_PUGIXML=OFF; -DLIBECPINT_BUILD_TESTS=OFF; -DLIBECPINT_BUILD_DOCS=OFF; -DLIBECPINT_MAX_UNROL=1; -DLIBECPINT_MAX_L=5; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}; -DCMAKE_CXX_COMPILER_ARG1:STRING=${CMAKE_CXX_COMPILER_ARG1}). set(ecpint_DIR ${STAGED_INSTALL_PREFIX}/lib/cmake/ecpint CACHE PATH ""path to internally built ecpint-config.cmake"" FORCE); endif(); else(); add_library(ecpint_external INTERFACE) # dummy; endif(). ",MatchSource.DOCS,external/upstream/ecpint/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/ecpint/CMakeLists.txt
Modifiability,config,config,"if(${ENABLE_ecpint}); find_package(ecpint 1.0.7 CONFIG QUIET). if(${ecpint_FOUND}); get_property(_loc TARGET ECPINT::ecpint PROPERTY LOCATION); message(STATUS ""${Cyan}Found ecpint${ColourReset}: ${_loc} (found version ${ecpint_VERSION})""); add_library(ecpint_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_ecpint}); message(VERBOSE ""Suitable ecpint located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_ecpint}); message(FATAL_ERROR ""Suitable ecpint could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable ecpint could not be located, ${Magenta}Building ecpint${ColourReset} instead.""); ExternalProject_Add(ecpint_external; URL https://github.com/robashaw/libecpint/archive/v1.0.7.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; -DLIBECPINT_USE_PUGIXML=OFF; -DLIBECPINT_BUILD_TESTS=OFF; -DLIBECPINT_BUILD_DOCS=OFF; -DLIBECPINT_MAX_UNROL=1; -DLIBECPINT_MAX_L=5; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}; -DCMAKE_CXX_COMPILER_ARG1:STRING=${CMAKE_CXX_COMPILER_ARG1}). set(ecpint_DIR ${STAGED_INSTALL_PREFIX}/lib/cmake/ecpint CACHE PATH ""path to internally built ecpint-config.cmake"" FORCE); endif(); else(); add_library(ecpint_external INTERFACE) # dummy; endif(). ",MatchSource.DOCS,external/upstream/ecpint/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/ecpint/CMakeLists.txt
Integrability,message,message,"if(${ENABLE_Einsums}); find_package(Einsums 0.3 CONFIG). if(TARGET Einsums::einsums); get_property(_loc TARGET Einsums::einsums PROPERTY LOCATION); message(STATUS ""${Cyan}Found Einsums${ColourReset}: ${_loc} (found version ${Einsums_VERSION})""); add_library(einsums_external INTERFACE) # dummy. # reset below necessary as find_package clears it. better solution sought; set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected TargetHDF5Config.cmake"" FORCE). if(${CMAKE_INSIST_FIND_PACKAGE_Einsums}); message(VERBOSE ""Suitable Einsums located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_Einsums}); message(FATAL_ERROR ""Suitable Einsums could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable Einsums could not be located, ${Magenta}Building Einsums${ColourReset} instead.""). if(${BUILD_SHARED_LIBS}); set(_a_only OFF); else(); set(_a_only ON); endif(). set(_einsums_dir ""share/cmake/Einsums""). ExternalProject_Add(einsums_external; DEPENDS lapack_external; hdf5_external; URL https://github.com/Einsums/Einsums/archive/v0.3.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DEINSUMS_STATIC_BUILD=${_a_only}; -DEXTRA_C_FLAGS=${CMAKE_C_FLAGS}; -DEXTRA_CXX_FLAGS=${CMAKE_CXX_FLAGS}; -DEINSUMS_INSTALL_CMAKEDIR=${_einsums_dir}; # -DENABLE_XHOST=${ENABLE_XHOST}; -DEINSUMS_ENABLE_TESTING=OFF; -DEINSUMS_USE_HPTT=ON; # -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -DTargetHDF5_DIR=${TargetHDF5_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS};",MatchSource.DOCS,external/upstream/einsums/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/einsums/CMakeLists.txt
Safety,detect,detected,"if(${ENABLE_Einsums}); find_package(Einsums 0.3 CONFIG). if(TARGET Einsums::einsums); get_property(_loc TARGET Einsums::einsums PROPERTY LOCATION); message(STATUS ""${Cyan}Found Einsums${ColourReset}: ${_loc} (found version ${Einsums_VERSION})""); add_library(einsums_external INTERFACE) # dummy. # reset below necessary as find_package clears it. better solution sought; set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected TargetHDF5Config.cmake"" FORCE). if(${CMAKE_INSIST_FIND_PACKAGE_Einsums}); message(VERBOSE ""Suitable Einsums located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_Einsums}); message(FATAL_ERROR ""Suitable Einsums could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable Einsums could not be located, ${Magenta}Building Einsums${ColourReset} instead.""). if(${BUILD_SHARED_LIBS}); set(_a_only OFF); else(); set(_a_only ON); endif(). set(_einsums_dir ""share/cmake/Einsums""). ExternalProject_Add(einsums_external; DEPENDS lapack_external; hdf5_external; URL https://github.com/Einsums/Einsums/archive/v0.3.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DEINSUMS_STATIC_BUILD=${_a_only}; -DEXTRA_C_FLAGS=${CMAKE_C_FLAGS}; -DEXTRA_CXX_FLAGS=${CMAKE_CXX_FLAGS}; -DEINSUMS_INSTALL_CMAKEDIR=${_einsums_dir}; # -DENABLE_XHOST=${ENABLE_XHOST}; -DEINSUMS_ENABLE_TESTING=OFF; -DEINSUMS_USE_HPTT=ON; # -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -DTargetHDF5_DIR=${TargetHDF5_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS};",MatchSource.DOCS,external/upstream/einsums/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/einsums/CMakeLists.txt
Usability,clear,clears,"if(${ENABLE_Einsums}); find_package(Einsums 0.3 CONFIG). if(TARGET Einsums::einsums); get_property(_loc TARGET Einsums::einsums PROPERTY LOCATION); message(STATUS ""${Cyan}Found Einsums${ColourReset}: ${_loc} (found version ${Einsums_VERSION})""); add_library(einsums_external INTERFACE) # dummy. # reset below necessary as find_package clears it. better solution sought; set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected TargetHDF5Config.cmake"" FORCE). if(${CMAKE_INSIST_FIND_PACKAGE_Einsums}); message(VERBOSE ""Suitable Einsums located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_Einsums}); message(FATAL_ERROR ""Suitable Einsums could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable Einsums could not be located, ${Magenta}Building Einsums${ColourReset} instead.""). if(${BUILD_SHARED_LIBS}); set(_a_only OFF); else(); set(_a_only ON); endif(). set(_einsums_dir ""share/cmake/Einsums""). ExternalProject_Add(einsums_external; DEPENDS lapack_external; hdf5_external; URL https://github.com/Einsums/Einsums/archive/v0.3.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DEINSUMS_STATIC_BUILD=${_a_only}; -DEXTRA_C_FLAGS=${CMAKE_C_FLAGS}; -DEXTRA_CXX_FLAGS=${CMAKE_CXX_FLAGS}; -DEINSUMS_INSTALL_CMAKEDIR=${_einsums_dir}; # -DENABLE_XHOST=${ENABLE_XHOST}; -DEINSUMS_ENABLE_TESTING=OFF; -DEINSUMS_USE_HPTT=ON; # -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -DTargetHDF5_DIR=${TargetHDF5_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS};",MatchSource.DOCS,external/upstream/einsums/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/einsums/CMakeLists.txt
Integrability,message,message,"if(${ENABLE_erd}); find_package(erd 3.0.6 CONFIG QUIET). if(${erd_FOUND}); get_property(_loc TARGET erd::erd PROPERTY LOCATION); message(STATUS ""${Cyan}Found erd${ColourReset}: ${_loc} (found version ${erd_VERSION})""); add_library(erd_external INTERFACE) # dummy; else(); if(${CMAKE_INSIST_FIND_PACKAGE_erd}); message(FATAL_ERROR ""Suitable erd could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable erd could not be located, ${Magenta}Building erd${ColourReset} instead.""); ExternalProject_Add(erd_external; URL https://github.com/psi4/erd/archive/v3.0.6/tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant for thread safety; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_Fortran_FLAGS:STRING=${CMAKE_Fortran_FLAGS}; -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_Fortran_COMPILER_ARG1:STRING=${CMAKE_Fortran_COMPILER_ARG1}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}). set(erd_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/erd CACHE PATH ""path to internally built erdConfig.cmake"" FORCE); endif(); else(); add_library(erd_external INTERFACE) # dummy; endif(). ",MatchSource.DOCS,external/upstream/erd/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/erd/CMakeLists.txt
Safety,safe,safety,"if(${ENABLE_erd}); find_package(erd 3.0.6 CONFIG QUIET). if(${erd_FOUND}); get_property(_loc TARGET erd::erd PROPERTY LOCATION); message(STATUS ""${Cyan}Found erd${ColourReset}: ${_loc} (found version ${erd_VERSION})""); add_library(erd_external INTERFACE) # dummy; else(); if(${CMAKE_INSIST_FIND_PACKAGE_erd}); message(FATAL_ERROR ""Suitable erd could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable erd could not be located, ${Magenta}Building erd${ColourReset} instead.""); ExternalProject_Add(erd_external; URL https://github.com/psi4/erd/archive/v3.0.6/tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant for thread safety; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_Fortran_FLAGS:STRING=${CMAKE_Fortran_FLAGS}; -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_Fortran_COMPILER_ARG1:STRING=${CMAKE_Fortran_COMPILER_ARG1}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}). set(erd_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/erd CACHE PATH ""path to internally built erdConfig.cmake"" FORCE); endif(); else(); add_library(erd_external INTERFACE) # dummy; endif(). ",MatchSource.DOCS,external/upstream/erd/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/erd/CMakeLists.txt
Integrability,message,message,"find_package(gau2grid 2.0 CONFIG QUIET). if(${gau2grid_FOUND}); get_property(_loc TARGET gau2grid::gg PROPERTY LOCATION); message(STATUS ""${Cyan}Found gau2grid${ColourReset}: ${_loc} (found version ${gau2grid_VERSION})""); add_library(gau2grid_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_gau2grid}); message(VERBOSE ""Suitable gau2grid located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_gau2grid}); message(FATAL_ERROR ""Suitable gau2grid could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable gau2grid could not be located, ${Magenta}Building gau2grid${ColourReset} instead.""); ExternalProject_Add(gau2grid_external; DEPENDS pybind11_external; URL https://github.com/dgasmith/gau2grid/archive/v2.0.7.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; # OpenMP irrelevant; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DMAX_AM=${MAX_AM_ERI}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DPYTHON_EXECUTABLE=${Python_EXECUTABLE}; -DPYTHON_INCLUDE_DIR=${Python_INCLUDE_DIRS}; -DPYTHON_LIBRARY=${Python_LIBRARIES}; -DPython_EXECUTABLE=${Python_EXECUTABLE}; -DPython_INCLUDE_DIR=${Python_INCLUDE_DIRS}; -DPython_LIBRARY=${Python_LIBRARIES}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}). set(gau2grid_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/gau2grid CACHE PATH ""path to internally built gau2gridConfig.cmake"" FORCE); endif(); ",MatchSource.DOCS,external/upstream/gau2grid/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/gau2grid/CMakeLists.txt
Integrability,message,message,"if(${ENABLE_gdma}); find_package(gdma 2.3.3 CONFIG QUIET COMPONENTS Python). if(${gdma_FOUND}); get_property(_loc TARGET gdma::pygdma PROPERTY LOCATION); message(STATUS ""${Cyan}Found gdma${ColourReset}: ${_loc} (found version ${gdma_VERSION})""); add_library(gdma_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_gdma}); message(VERBOSE ""Suitable gdma located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_gdma}); message(FATAL_ERROR ""Suitable gdma could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable gdma could not be located, ${Magenta}Building gdma${ColourReset} instead.""). set(_gdma_dir ""share/cmake/gdma""). ExternalProject_Add(gdma_external; DEPENDS pybind11_external; URL https://github.com/psi4/gdma/archive/v2.3.3.tar.gz # Stone's upstream c2e0b548 plus commits from Andy Simmonett for lib, Holger Kruse for I/O, Lori Burns for CMake & Python; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; -Dgdma_INSTALL_CMAKEDIR=${_gdma_dir}; -Dgdma_ENABLE_PYTHON=ON; -DPython_EXECUTABLE=${Python_EXECUTABLE}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant for thread safety; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -Dpybind11_DIR=${pybind11_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; -DCMAKE_For",MatchSource.DOCS,external/upstream/gdma/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/gdma/CMakeLists.txt
Safety,safe,safety,"if(${CMAKE_INSIST_FIND_PACKAGE_gdma}); message(FATAL_ERROR ""Suitable gdma could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable gdma could not be located, ${Magenta}Building gdma${ColourReset} instead.""). set(_gdma_dir ""share/cmake/gdma""). ExternalProject_Add(gdma_external; DEPENDS pybind11_external; URL https://github.com/psi4/gdma/archive/v2.3.3.tar.gz # Stone's upstream c2e0b548 plus commits from Andy Simmonett for lib, Holger Kruse for I/O, Lori Burns for CMake & Python; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; -Dgdma_INSTALL_CMAKEDIR=${_gdma_dir}; -Dgdma_ENABLE_PYTHON=ON; -DPython_EXECUTABLE=${Python_EXECUTABLE}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant for thread safety; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -Dpybind11_DIR=${pybind11_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; -DCMAKE_Fortran_FLAGS:STRING=${CMAKE_Fortran_FLAGS}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}; -DCMAKE_CXX_COMPILER_ARG1:STRING=${CMAKE_CXX_COMPILER_ARG1}; -DCMAKE_Fortran_COMPILER_ARG1:STRING=${CMAKE_Fortran_COMPILER_ARG1}). set(gdma_DIR ${STAGED_INSTALL_PREFIX}/${_gdma_dir} CACHE PATH ""path to internally built gdmaConfig.cmake"" FORCE); endif(); else(); add_library(gdma_external INTERFACE) # dummy; endif(). ",MatchSource.DOCS,external/upstream/gdma/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/gdma/CMakeLists.txt
Integrability,message,message,"if(${ENABLE_GTFock}); find_package(GTFock CONFIG QUIET). if(${GTFock_FOUND}); get_property(_loc TARGET GTFock::gtfock PROPERTY LOCATION); message(STATUS ""${Cyan}Found GTFock${ColourReset}: ${_loc} (found version ${GTFock_VERSION})""); message(FATAL_ERROR ""GTFock has not been hooked back in after the inversion.""); add_library(gtfock_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_GTFock}); message(VERBOSE ""Suitable GTFock located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_GTFock}); message(FATAL_ERROR ""Suitable GTFock could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable GTFock could not be located, ${Magenta}Building GTFock${ColourReset} instead.""); message(FATAL_ERROR ""GTFock has not been hooked back in after the inversion.""). ExternalProject_Add(gtfock_external; GIT_REPOSITORY https://github.com/psi4/GTFock; #GIT_TAG v1.7.1 # TODO tag when stable; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; # OpenMP irrelevant; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_Fortran_FLAGS:STRING=${CMAKE_Fortran_FLAGS}; -DCMAKE_Fortran_COMPILER_ARG1:STRING=${CMAKE_Fortran_COMPILER_ARG1}). set(GTFock_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/GTFock CACHE PATH ""path to internally built GTFockConfig.cmake"" FORCE); endif(); else(); add_library(gtfock_external INTERFACE) # dummy; endif(). ",MatchSource.DOCS,external/upstream/gtfock/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/gtfock/CMakeLists.txt
Deployability,patch,patch,"OUND}); get_property(_loc TARGET libefp::efp PROPERTY LOCATION); message(STATUS ""${Cyan}Found libefp${ColourReset}: ${_loc} (found version ${libefp_VERSION})""); add_library(libefp_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_libefp}); message(VERBOSE ""Suitable libefp located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_libefp}); message(FATAL_ERROR ""Suitable libefp could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable libefp could not be located, ${Magenta}Building libefp${ColourReset} instead.""); ExternalProject_Add(libefp_external; DEPENDS lapack_external; URL https://github.com/ilyak/libefp/archive/15cd7ce.tar.gz # v1.5.0 + 10 (docs and a cmake lapack patch); UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_DATADIR=${CMAKE_INSTALL_DATADIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; -DENABLE_OPENMP=OFF # Psi4 sometimes reacts poorly to threaded efp; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -DINSTALL_DEVEL_HEADERS=ON; -DFRAGLIB_UNDERSCORE_L=OFF; -DFRAGLIB_DEEP=OFF; -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}; -DTargetOpenMP_FIND_COMPONENTS:STRING=C). set(libefp_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/libefp CACHE PATH ""path to internally built libefpConfig.cmake"" FORCE); endif(); else(); add_library(libefp_external INTERFACE) # dummy; endif(); ",MatchSource.DOCS,external/upstream/libefp/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libefp/CMakeLists.txt
Integrability,message,message,"if(${ENABLE_libefp}); find_package(libefp 1.5.0 CONFIG QUIET COMPONENTS shallow). if(${libefp_FOUND}); get_property(_loc TARGET libefp::efp PROPERTY LOCATION); message(STATUS ""${Cyan}Found libefp${ColourReset}: ${_loc} (found version ${libefp_VERSION})""); add_library(libefp_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_libefp}); message(VERBOSE ""Suitable libefp located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_libefp}); message(FATAL_ERROR ""Suitable libefp could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable libefp could not be located, ${Magenta}Building libefp${ColourReset} instead.""); ExternalProject_Add(libefp_external; DEPENDS lapack_external; URL https://github.com/ilyak/libefp/archive/15cd7ce.tar.gz # v1.5.0 + 10 (docs and a cmake lapack patch); UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_DATADIR=${CMAKE_INSTALL_DATADIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; -DENABLE_OPENMP=OFF # Psi4 sometimes reacts poorly to threaded efp; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -DINSTALL_DEVEL_HEADERS=ON; -DFRAGLIB_UNDERSCORE_L=OFF; -DFRAGLIB_DEEP=OFF; -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}; -DTargetOpenMP_FIND_COMPONENTS:STRING=C). set(libefp_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/libefp CACHE PATH ""path to internally built libefpCo",MatchSource.DOCS,external/upstream/libefp/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libefp/CMakeLists.txt
Integrability,message,message,"if(${ENABLE_Libint1t}); find_package(Libint 1.2.0 CONFIG QUIET COMPONENTS ${MAX_AM_ERI}). if(${Libint_FOUND}); get_property(_loc TARGET Libint::int PROPERTY LOCATION); message(STATUS ""${Cyan}Found Libint ${Libint_MAX_AM_ERI}${ColourReset}: ${_loc} (found version ${Libint_VERSION})""); add_library(libint_external INTERFACE) # dummy; else(); if(${CMAKE_INSIST_FIND_PACKAGE_Libint}); message(FATAL_ERROR ""Suitable Libint could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable Libint could not be located, ${Magenta}Building Libint${ColourReset} instead.""); ExternalProject_Add(libint_external; # ""git checkout"" fails on Windows, because of ""*"" in filenames (e.g. basis set files); URL https://github.com/loriab/libint/archive/libint_t.tar.gz; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DMAX_AM_ERI=${MAX_AM_ERI}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; # OpenMP irrelevant; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -DMERGE_LIBDERIV_INCLUDEDIR=OFF; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}; -DCMAKE_CXX_COMPILER_ARG1:STRING=${CMAKE_CXX_COMPILER_ARG1}). set(Libint_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/Libint CACHE PATH ""path to internally built LibintConfig.cmake"" FORCE); endif(); else(); add_library(libint_external INTERFACE) # dummy; endif(). ",MatchSource.DOCS,external/upstream/libint/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint/CMakeLists.txt
Availability,error,errors,"ists.txt~ (see [Feb 2023] update); # * In order for DF tests to yield right values when cartesian basis sets (6d) used, need ERI3_PURE_SH and ERI2_PURE_SH =OFF; # * In order for DF integrals to be present as nominally expected, need WITH_MAX_AM to mirror WITH_ERI3_MAX_AM; # * In order for DF calculations to not be limited by cheap integrals, need WITH_MAX_AM_ERI2 >= WITH_MAX_AM_ERI3; # * In order for DF fallback fitting to work with def2-universal on all elements, need WITH_ERI3_MAX_AM >=4 for energies; # * Since non-DF calculations often use DF guess or preiterations and DF calculations use 4-center integrals for sieving,; # a natural relationship between ERI and ERI3 for energy integrals is N and N+1.; # * The combination WITH_MAX_AM_ERI=""5;4;3"" and WITH_MAX_AM_ERI3=""6;5;4"" permits any 5Z energy, QZ gradient, and TZ Hessian and is sufficient for the full test suite.; # * Psi4 doesn't know the limits of the Libint2 library to which it's linked. `libint2::Engine::lmax_exceeded` errors will be thrown from l2; nothing from Psi4.; # * If ever use a libint2 with AM>7, edit the `init_spherical_harmonics` line in libmints/integral.cc; # * In selecting AM values, before `grep`ing lots of basis set files, consult the guide at end of this file.; # [Feb 2023]; # * Upon additions to the Libint2 API to allow runtime SHGAUSS switching, Psi4 can use LIBINT2_SHGAUSS_ORDERING=standard|gaussian; # *at Libint source generation time*. At Psi4 build time, it's going to be looking for standard (sss), so you'll have to; # edit the CMake to use a gss.; # * Upon additions to the Libint2 API to allow runtime SHGAUSS switching, Psi4 can no longer be adapted to use a libtool+cmake source.; # * Libraries of different AM are not hot-swappable in a Psi4 build, but they only require a relinking.; # [Jan 2024]; # * As of v1.9, Psi4 can use an upstream v2.8 Libint2. This is a libtool+cmake build, so `find_package(Libint2 ... COMPONENTS ...)` has no components to check. find_package(; Libint2; 2.7.2;",MatchSource.DOCS,external/upstream/libint2/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt
Deployability,update,update,"# NOTES on Libint2 build options for Psi4; # ---------------------------------------; # * In order for Psi4 to at all work with a libint2 build, need LIBINT2_CARTGAUSS_ORDERING=standard *at generation time*. This is already the default.; # * In order for Psi4 to at all work with a libint2 build, need LIBINT2_SHELL_SET=standard *at generation time*. This is already the default.; # * ~In order for Psi4 to at all work with a libint2 build, need LIBINT2_SHGAUSS_ORDERING=gaussian *at library build time*.; # This is not the default, though it may become runtime selectable in future https://github.com/evaleev/libint/issues/190#issuecomment-691485225 .~ (see [Feb 2023] update); # * In order for any DF to work, need ENABLE_ERI3 and ENABLE_ERI2 >=0; # * In order for gradient and Hessian tests to not segfault, need ENABLE_ERI and ENABLE_ERI3 and ENABLE_ERI2 =2; # * (new c. Jan 2022) In order for Psi4 to at all work with a libint2 build for one-electron ints, need ENABLE_ONEBODY =2; # * The `find_package(Libint2 ... COMPONENTS ...)` commands will check the above requirements met, provided the libint2; # was built with cmake+cmake, not libtool+cmake.; # * Provided you know what you're doing wrt the above options and know what subset of Psi4 calculations you're targeting; # (e.g., no Hessians or non-df only) and recognize that DF is everywhere (e.g., SAD guess and DF_SCF_GUESS) and may; # need further suppression, it's fine to reduce or eliminate the `find_package` components.; # * ~Psi4 can run a libtool+cmake, but one needs to disable the `find_package` components check and correct for some; # Libint2 vs. libint2 spelling differences. See ""CHOOSE!"" toggles here and in <psi4>/psi4/CMakeLists.txt~ (see [Feb 2023] update); # * In order for DF tests to yield right values when cartesian basis sets (6d) used, need ERI3_PURE_SH and ERI2_PURE_SH =OFF; # * In order for DF integrals to be present as nominally expected, need WITH_MAX_AM to mirror WITH_ERI3_MAX_AM; # * In order for DF calcu",MatchSource.DOCS,external/upstream/libint2/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt
Energy Efficiency,reduce,reduce,"h a libint2 build, need LIBINT2_SHGAUSS_ORDERING=gaussian *at library build time*.; # This is not the default, though it may become runtime selectable in future https://github.com/evaleev/libint/issues/190#issuecomment-691485225 .~ (see [Feb 2023] update); # * In order for any DF to work, need ENABLE_ERI3 and ENABLE_ERI2 >=0; # * In order for gradient and Hessian tests to not segfault, need ENABLE_ERI and ENABLE_ERI3 and ENABLE_ERI2 =2; # * (new c. Jan 2022) In order for Psi4 to at all work with a libint2 build for one-electron ints, need ENABLE_ONEBODY =2; # * The `find_package(Libint2 ... COMPONENTS ...)` commands will check the above requirements met, provided the libint2; # was built with cmake+cmake, not libtool+cmake.; # * Provided you know what you're doing wrt the above options and know what subset of Psi4 calculations you're targeting; # (e.g., no Hessians or non-df only) and recognize that DF is everywhere (e.g., SAD guess and DF_SCF_GUESS) and may; # need further suppression, it's fine to reduce or eliminate the `find_package` components.; # * ~Psi4 can run a libtool+cmake, but one needs to disable the `find_package` components check and correct for some; # Libint2 vs. libint2 spelling differences. See ""CHOOSE!"" toggles here and in <psi4>/psi4/CMakeLists.txt~ (see [Feb 2023] update); # * In order for DF tests to yield right values when cartesian basis sets (6d) used, need ERI3_PURE_SH and ERI2_PURE_SH =OFF; # * In order for DF integrals to be present as nominally expected, need WITH_MAX_AM to mirror WITH_ERI3_MAX_AM; # * In order for DF calculations to not be limited by cheap integrals, need WITH_MAX_AM_ERI2 >= WITH_MAX_AM_ERI3; # * In order for DF fallback fitting to work with def2-universal on all elements, need WITH_ERI3_MAX_AM >=4 for energies; # * Since non-DF calculations often use DF guess or preiterations and DF calculations use 4-center integrals for sieving,; # a natural relationship between ERI and ERI3 for energy integrals is N and N+1.; # * T",MatchSource.DOCS,external/upstream/libint2/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt
Integrability,message,message,"ri_c3_d2_l3 eri_c2_d2_l3; ). # If L2 v2.8.1 (1) exported CMake components and (2) libint2-config.cmake actually; # checked, the below is the new find_package call.; #if (${MAX_AM_ERI} GREATER 8); # set(amchar ""llll""); #elseif (${MAX_AM_ERI} EQUAL 7); # set(amchar ""kkkk""); #elseif (${MAX_AM_ERI} EQUAL 6); # set(amchar ""iiii""); #elseif (${MAX_AM_ERI} EQUAL 5); # set(amchar ""hhhh""); #elseif (${MAX_AM_ERI} LESS_EQUAL 4); # set(amchar ""gggg""); #endif(); #find_package(; # Libint2; # 2.8.1; # CONFIG; # COMPONENTS; # ss; # CXX_ho; # impure_sh; # ""eri_${amchar}_d0"" eri_ggg_d0 eri_gg_d0 onebody_g_d0; # eri_dddd_d1 eri_fff_d1 eri_ff_d1 onebody_f_d1; # onebody_f_d2; # OPTIONAL_COMPONENTS; # eri_dddd_d2 eri_fff_d2 eri_ff_d2; # ). if (TARGET Libint2::cxx); get_target_property(_loc Libint2::int2 LOCATION); # defer until upstream provides full-dress targets get_target_property(Libint2_VERSION Libint2::int2 Libint2_VERSION); # defer until upstream provides full-dress targets get_target_property(Libint2_MAX_AM_ERI Libint2::int2 Libint2_MAX_AM_ERI); get_target_property(Libint2_CONFIGURATION Libint2::int2 Libint2_CONFIGURATION); message(STATUS ""${Cyan}Found Libint2 ${Libint2_MAX_AM_ERI}${ColourReset}: ${_loc} (found version ${Libint2_VERSION})""); # TODO revive this message. For now, can't tell if cmake build missing Hessian ints or libtool build w/o component info.; # if (NOT eri_c4_d2_l2 IN_LIST Libint2_CONFIGURATION); # message(WARNING ""Libint2 detected but missing ERI 2nd derivative integrals (components eri_c4_d2_l2 eri_c3_d2_l3 eri_c2_d2_l3). Psi4 will automatically fall back to finite difference.""); # endif(); add_library(libint2_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_Libint2}); message(VERBOSE ""Suitable Libint2 located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_Libint2}); message(FATAL_ERROR ""Suitable Libint2 could not be externally located as user insists""); endif(). # stopgap to avert a report that static lib not working ",MatchSource.DOCS,external/upstream/libint2/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt
Modifiability,adapt,adapted,"sieving,; # a natural relationship between ERI and ERI3 for energy integrals is N and N+1.; # * The combination WITH_MAX_AM_ERI=""5;4;3"" and WITH_MAX_AM_ERI3=""6;5;4"" permits any 5Z energy, QZ gradient, and TZ Hessian and is sufficient for the full test suite.; # * Psi4 doesn't know the limits of the Libint2 library to which it's linked. `libint2::Engine::lmax_exceeded` errors will be thrown from l2; nothing from Psi4.; # * If ever use a libint2 with AM>7, edit the `init_spherical_harmonics` line in libmints/integral.cc; # * In selecting AM values, before `grep`ing lots of basis set files, consult the guide at end of this file.; # [Feb 2023]; # * Upon additions to the Libint2 API to allow runtime SHGAUSS switching, Psi4 can use LIBINT2_SHGAUSS_ORDERING=standard|gaussian; # *at Libint source generation time*. At Psi4 build time, it's going to be looking for standard (sss), so you'll have to; # edit the CMake to use a gss.; # * Upon additions to the Libint2 API to allow runtime SHGAUSS switching, Psi4 can no longer be adapted to use a libtool+cmake source.; # * Libraries of different AM are not hot-swappable in a Psi4 build, but they only require a relinking.; # [Jan 2024]; # * As of v1.9, Psi4 can use an upstream v2.8 Libint2. This is a libtool+cmake build, so `find_package(Libint2 ... COMPONENTS ...)` has no components to check. find_package(; Libint2; 2.7.2; CONFIG; COMPONENTS; sss; CXX_ho; impure_sh; ""eri_c4_d0_l${MAX_AM_ERI}"" eri_c3_d0_l4 eri_c2_d0_l4 onebody_d0_l4; eri_c4_d1_l2 eri_c3_d1_l3 eri_c2_d1_l3 onebody_d1_l3; onebody_d2_l3; OPTIONAL_COMPONENTS; eri_c4_d2_l2 eri_c3_d2_l3 eri_c2_d2_l3; ). # If L2 v2.8.1 (1) exported CMake components and (2) libint2-config.cmake actually; # checked, the below is the new find_package call.; #if (${MAX_AM_ERI} GREATER 8); # set(amchar ""llll""); #elseif (${MAX_AM_ERI} EQUAL 7); # set(amchar ""kkkk""); #elseif (${MAX_AM_ERI} EQUAL 6); # set(amchar ""iiii""); #elseif (${MAX_AM_ERI} EQUAL 5); # set(amchar ""hhhh""); #elseif (${MAX_AM_ERI",MatchSource.DOCS,external/upstream/libint2/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt
Safety,detect,detected,"ackage(; # Libint2; # 2.8.1; # CONFIG; # COMPONENTS; # ss; # CXX_ho; # impure_sh; # ""eri_${amchar}_d0"" eri_ggg_d0 eri_gg_d0 onebody_g_d0; # eri_dddd_d1 eri_fff_d1 eri_ff_d1 onebody_f_d1; # onebody_f_d2; # OPTIONAL_COMPONENTS; # eri_dddd_d2 eri_fff_d2 eri_ff_d2; # ). if (TARGET Libint2::cxx); get_target_property(_loc Libint2::int2 LOCATION); # defer until upstream provides full-dress targets get_target_property(Libint2_VERSION Libint2::int2 Libint2_VERSION); # defer until upstream provides full-dress targets get_target_property(Libint2_MAX_AM_ERI Libint2::int2 Libint2_MAX_AM_ERI); get_target_property(Libint2_CONFIGURATION Libint2::int2 Libint2_CONFIGURATION); message(STATUS ""${Cyan}Found Libint2 ${Libint2_MAX_AM_ERI}${ColourReset}: ${_loc} (found version ${Libint2_VERSION})""); # TODO revive this message. For now, can't tell if cmake build missing Hessian ints or libtool build w/o component info.; # if (NOT eri_c4_d2_l2 IN_LIST Libint2_CONFIGURATION); # message(WARNING ""Libint2 detected but missing ERI 2nd derivative integrals (components eri_c4_d2_l2 eri_c3_d2_l3 eri_c2_d2_l3). Psi4 will automatically fall back to finite difference.""); # endif(); add_library(libint2_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_Libint2}); message(VERBOSE ""Suitable Libint2 located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_Libint2}); message(FATAL_ERROR ""Suitable Libint2 could not be externally located as user insists""); endif(). # stopgap to avert a report that static lib not working on Linux; set(_build_shared_libs ""ON""). # reportedly Debug takes forever to build on Mac; set(_cmake_build_type ""Release""). include(ExternalProject). if(NOT ${BUILD_Libint2_GENERATOR}); if (${MAX_AM_ERI} GREATER 5); set(_url_am_src ""7-7-4-12-7-5"") # passes E&G 7z conv and 6z df, H Qz conv and df. covers all internal basis sets for energy and gradient; elseif (${MAX_AM_ERI} LESS_EQUAL 5); set(_url_am_src ""5-4-3-6-5-4"") # passes full. production Mac, temp pr",MatchSource.DOCS,external/upstream/libint2/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt
Testability,test,tests,"# NOTES on Libint2 build options for Psi4; # ---------------------------------------; # * In order for Psi4 to at all work with a libint2 build, need LIBINT2_CARTGAUSS_ORDERING=standard *at generation time*. This is already the default.; # * In order for Psi4 to at all work with a libint2 build, need LIBINT2_SHELL_SET=standard *at generation time*. This is already the default.; # * ~In order for Psi4 to at all work with a libint2 build, need LIBINT2_SHGAUSS_ORDERING=gaussian *at library build time*.; # This is not the default, though it may become runtime selectable in future https://github.com/evaleev/libint/issues/190#issuecomment-691485225 .~ (see [Feb 2023] update); # * In order for any DF to work, need ENABLE_ERI3 and ENABLE_ERI2 >=0; # * In order for gradient and Hessian tests to not segfault, need ENABLE_ERI and ENABLE_ERI3 and ENABLE_ERI2 =2; # * (new c. Jan 2022) In order for Psi4 to at all work with a libint2 build for one-electron ints, need ENABLE_ONEBODY =2; # * The `find_package(Libint2 ... COMPONENTS ...)` commands will check the above requirements met, provided the libint2; # was built with cmake+cmake, not libtool+cmake.; # * Provided you know what you're doing wrt the above options and know what subset of Psi4 calculations you're targeting; # (e.g., no Hessians or non-df only) and recognize that DF is everywhere (e.g., SAD guess and DF_SCF_GUESS) and may; # need further suppression, it's fine to reduce or eliminate the `find_package` components.; # * ~Psi4 can run a libtool+cmake, but one needs to disable the `find_package` components check and correct for some; # Libint2 vs. libint2 spelling differences. See ""CHOOSE!"" toggles here and in <psi4>/psi4/CMakeLists.txt~ (see [Feb 2023] update); # * In order for DF tests to yield right values when cartesian basis sets (6d) used, need ERI3_PURE_SH and ERI2_PURE_SH =OFF; # * In order for DF integrals to be present as nominally expected, need WITH_MAX_AM to mirror WITH_ERI3_MAX_AM; # * In order for DF calcu",MatchSource.DOCS,external/upstream/libint2/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt
Usability,guid,guide,"esent as nominally expected, need WITH_MAX_AM to mirror WITH_ERI3_MAX_AM; # * In order for DF calculations to not be limited by cheap integrals, need WITH_MAX_AM_ERI2 >= WITH_MAX_AM_ERI3; # * In order for DF fallback fitting to work with def2-universal on all elements, need WITH_ERI3_MAX_AM >=4 for energies; # * Since non-DF calculations often use DF guess or preiterations and DF calculations use 4-center integrals for sieving,; # a natural relationship between ERI and ERI3 for energy integrals is N and N+1.; # * The combination WITH_MAX_AM_ERI=""5;4;3"" and WITH_MAX_AM_ERI3=""6;5;4"" permits any 5Z energy, QZ gradient, and TZ Hessian and is sufficient for the full test suite.; # * Psi4 doesn't know the limits of the Libint2 library to which it's linked. `libint2::Engine::lmax_exceeded` errors will be thrown from l2; nothing from Psi4.; # * If ever use a libint2 with AM>7, edit the `init_spherical_harmonics` line in libmints/integral.cc; # * In selecting AM values, before `grep`ing lots of basis set files, consult the guide at end of this file.; # [Feb 2023]; # * Upon additions to the Libint2 API to allow runtime SHGAUSS switching, Psi4 can use LIBINT2_SHGAUSS_ORDERING=standard|gaussian; # *at Libint source generation time*. At Psi4 build time, it's going to be looking for standard (sss), so you'll have to; # edit the CMake to use a gss.; # * Upon additions to the Libint2 API to allow runtime SHGAUSS switching, Psi4 can no longer be adapted to use a libtool+cmake source.; # * Libraries of different AM are not hot-swappable in a Psi4 build, but they only require a relinking.; # [Jan 2024]; # * As of v1.9, Psi4 can use an upstream v2.8 Libint2. This is a libtool+cmake build, so `find_package(Libint2 ... COMPONENTS ...)` has no components to check. find_package(; Libint2; 2.7.2; CONFIG; COMPONENTS; sss; CXX_ho; impure_sh; ""eri_c4_d0_l${MAX_AM_ERI}"" eri_c3_d0_l4 eri_c2_d0_l4 onebody_d0_l4; eri_c4_d1_l2 eri_c3_d1_l3 eri_c2_d1_l3 onebody_d1_l3; onebody_d2_l3; OPTIONAL_COMPONE",MatchSource.DOCS,external/upstream/libint2/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt
Deployability,release,release,"find_package(Libxc 6.1.0 CONFIG QUIET COMPONENTS C). if(${Libxc_FOUND}); get_property(_loc TARGET Libxc::xc PROPERTY LOCATION); message(STATUS ""${Cyan}Found Libxc${ColourReset}: ${_loc} (found version ${Libxc_VERSION})""); add_library(libxc_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_Libxc}); message(VERBOSE ""Suitable Libxc located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_Libxc}); message(FATAL_ERROR ""Suitable Libxc could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable Libxc could not be located, ${Magenta}Building Libxc${ColourReset} instead.""); ExternalProject_Add(libxc_external; # Default: use a stable release tarball of libxc. To use the; # development version of libxc, instead, comment the URL line,; # and uncomment the GIT lines.; URL https://gitlab.com/libxc/libxc/-/archive/6.2.2/libxc-6.2.2.tar.gz; #GIT_REPOSITORY https://gitlab.com/libxc/libxc.git; #GIT_TAG 5.1.5; #UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; -DNAMESPACE_INSTALL_INCLUDEDIR=/; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; # OpenMP irrelevant; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -DBUILD_TESTING=OFF; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}). set(Libxc_DIR ${STAGED_INSTALL_PREFIX}/lib/cmake/Libxc CACHE PATH ""path to internally built LibxcConfig.cmake"" FORCE); endif(); ",MatchSource.DOCS,external/upstream/libxc/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libxc/CMakeLists.txt
Integrability,message,message,"find_package(Libxc 6.1.0 CONFIG QUIET COMPONENTS C). if(${Libxc_FOUND}); get_property(_loc TARGET Libxc::xc PROPERTY LOCATION); message(STATUS ""${Cyan}Found Libxc${ColourReset}: ${_loc} (found version ${Libxc_VERSION})""); add_library(libxc_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_Libxc}); message(VERBOSE ""Suitable Libxc located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_Libxc}); message(FATAL_ERROR ""Suitable Libxc could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable Libxc could not be located, ${Magenta}Building Libxc${ColourReset} instead.""); ExternalProject_Add(libxc_external; # Default: use a stable release tarball of libxc. To use the; # development version of libxc, instead, comment the URL line,; # and uncomment the GIT lines.; URL https://gitlab.com/libxc/libxc/-/archive/6.2.2/libxc-6.2.2.tar.gz; #GIT_REPOSITORY https://gitlab.com/libxc/libxc.git; #GIT_TAG 5.1.5; #UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; -DNAMESPACE_INSTALL_INCLUDEDIR=/; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; # OpenMP irrelevant; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -DBUILD_TESTING=OFF; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}). set(Libxc_DIR ${STAGED_INSTALL_PREFIX}/lib/cmake/Libxc CACHE PATH ""path to internally built LibxcConfig.cmake"" FORCE); endif(); ",MatchSource.DOCS,external/upstream/libxc/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libxc/CMakeLists.txt
Integrability,message,message,"if(${ENABLE_mdi}); find_package(mdi 1.2.3 CONFIG QUIET). if(${mdi_FOUND}); get_property(_loc TARGET mdi::mdi PROPERTY LOCATION); message(STATUS ""${Cyan}Found mdi${ColourReset}: ${_loc} (found version ${mdi_VERSION})""); add_library(mdi_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_mdi}); message(VERBOSE ""Suitable mdi located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_mdi}); message(FATAL_ERROR ""Suitable mdi could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable mdi could not be located, ${Magenta}Building mdi${ColourReset} instead.""); ExternalProject_Add(mdi_external; URL https://github.com/MolSSI-MDI/MDI_Library/archive/v1.2.3.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant for thread safety; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -Dlanguage=Python; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}; -DCMAKE_CXX_COMPILER_ARG1:STRING=${CMAKE_CXX_COMPILER_ARG1}; -DTargetOpenMP_FIND_COMPONENTS:STRING=C;CXX). set(mdi_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/mdi CACHE PATH ""path to internally built mdiConfig.cmake"" FORCE); endif(); else(); add_library(mdi_external INTERFACE) # dummy; endif(); ",MatchSource.DOCS,external/upstream/mdi/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/mdi/CMakeLists.txt
Safety,safe,safety,"if(${ENABLE_mdi}); find_package(mdi 1.2.3 CONFIG QUIET). if(${mdi_FOUND}); get_property(_loc TARGET mdi::mdi PROPERTY LOCATION); message(STATUS ""${Cyan}Found mdi${ColourReset}: ${_loc} (found version ${mdi_VERSION})""); add_library(mdi_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_mdi}); message(VERBOSE ""Suitable mdi located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_mdi}); message(FATAL_ERROR ""Suitable mdi could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable mdi could not be located, ${Magenta}Building mdi${ColourReset} instead.""); ExternalProject_Add(mdi_external; URL https://github.com/MolSSI-MDI/MDI_Library/archive/v1.2.3.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant for thread safety; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -Dlanguage=Python; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}; -DCMAKE_CXX_COMPILER_ARG1:STRING=${CMAKE_CXX_COMPILER_ARG1}; -DTargetOpenMP_FIND_COMPONENTS:STRING=C;CXX). set(mdi_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/mdi CACHE PATH ""path to internally built mdiConfig.cmake"" FORCE); endif(); else(); add_library(mdi_external INTERFACE) # dummy; endif(); ",MatchSource.DOCS,external/upstream/mdi/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/mdi/CMakeLists.txt
Deployability,install,install,"if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_optking})); include(FindPythonModule); find_python_module(optking ATLEAST 0.2.1 QUIET); endif(). if(${optking_FOUND}); message(STATUS ""${Cyan}Found optking${ColourReset}: ${PY_optking} (found version ${optking_VERSION})""); add_library(optking_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_optking}); message(VERBOSE ""Suitable optking located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_optking}); message(FATAL_ERROR ""Suitable optking could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable optking could not be located, ${Magenta}Building optking${ColourReset} instead.""). file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib). ExternalProject_Add(optking_external; BUILD_ALWAYS 1; URL https://github.com/psi-rking/optking/archive/0.2.1.tar.gz; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; --record=record.txt; --single-version-externally-managed; --install-lib=${_install_lib}); endif(). ",MatchSource.DOCS,external/upstream/optking/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/optking/CMakeLists.txt
Integrability,message,message,"if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_optking})); include(FindPythonModule); find_python_module(optking ATLEAST 0.2.1 QUIET); endif(). if(${optking_FOUND}); message(STATUS ""${Cyan}Found optking${ColourReset}: ${PY_optking} (found version ${optking_VERSION})""); add_library(optking_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_optking}); message(VERBOSE ""Suitable optking located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_optking}); message(FATAL_ERROR ""Suitable optking could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable optking could not be located, ${Magenta}Building optking${ColourReset} instead.""). file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib). ExternalProject_Add(optking_external; BUILD_ALWAYS 1; URL https://github.com/psi-rking/optking/archive/0.2.1.tar.gz; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; --record=record.txt; --single-version-externally-managed; --install-lib=${_install_lib}); endif(). ",MatchSource.DOCS,external/upstream/optking/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/optking/CMakeLists.txt
Integrability,message,message," if(${ENABLE_PCMSolver}); find_package(PCMSolver 1.2.3 CONFIG QUIET). if(${PCMSolver_FOUND}); get_property(_loc TARGET PCMSolver::pcm PROPERTY LOCATION); message(STATUS ""${Cyan}Found PCMSolver${ColourReset}: ${_loc} (found version ${PCMSolver_VERSION})""); add_library(pcmsolver_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_PCMSolver}); message(VERBOSE ""Suitable PCMSolver located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_PCMSolver}); message(FATAL_ERROR ""Suitable PCMSolver could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable PCMSolver could not be located, ${Magenta}Building PCMSolver${ColourReset} instead.""). if(${BUILD_SHARED_LIBS}); set(_a_only OFF); set(_so_only ON); else(); set(_a_only ON); set(_so_only OFF); endif(). set(_pcmsolver_dir ""share/cmake/PCMSolver""). ExternalProject_Add(pcmsolver_external; #URL https://github.com/PCMSolver/pcmsolver/archive/v1.3.1.tar.gz; #URL https://github.com/loriab/pcmsolver/archive/v1211.tar.gz; URL https://github.com/loriab/pcmsolver/archive/v123_plus_ming.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; -DCMAKE_INSTALL_DATADIR=${CMAKE_INSTALL_DATADIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DPCMSolver_INSTALL_CMAKEDIR=${_pcmsolver_dir}; -DPython_EXECUTABLE=${Python_EXECUTABLE}; -DSTATIC_LIBRARY_ONLY=${_a_only}; -DSHARED_LIBRARY_ONLY=${_so_only}; -DENABLE_OPENMP=OFF; #-DENABLE_XHOST=${ENABLE_XHOST} # option missing; # always fpic'd; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DENABLE_TESTS=OFF; -DENABLE_TIMER=OFF; -DENABLE_LOGGER=OFF; -DBUILD_STANDALONE=OFF; -DT",MatchSource.DOCS,external/upstream/pcmsolver/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/pcmsolver/CMakeLists.txt
Integrability,message,message,"if(${Python_VERSION_MINOR} GREATER_EQUAL ""11""); find_package(pybind11 2.10.1 CONFIG QUIET); else(); find_package(pybind11 2.6.2 CONFIG QUIET); endif(). if(${pybind11_FOUND}); message(STATUS ""${Cyan}Found pybind11${ColourReset}: ${pybind11_INCLUDE_DIR} (found version ${pybind11_VERSION})""); add_library(pybind11_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_pybind11}); message(VERBOSE ""Suitable pybind11 located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_pybind11}); message(FATAL_ERROR ""Suitable pybind11 could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable pybind11 could not be located, ${Magenta}Building pybind11${ColourReset} instead.""); ExternalProject_Add(pybind11_external; URL https://github.com/pybind/pybind11/archive/v2.10.3.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DCMAKE_CXX_STANDARD=${psi4_CXX_STANDARD}; -DPYBIND11_TEST=OFF; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; -DCMAKE_CXX_COMPILER_ARG1:STRING=${CMAKE_CXX_COMPILER_ARG1}). set(pybind11_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/pybind11 CACHE PATH ""path to internally built pybind11Config.cmake"" FORCE); endif(). ",MatchSource.DOCS,external/upstream/pybind11/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/pybind11/CMakeLists.txt
Integrability,message,message,"if(${ENABLE_libefp}); #find_package(pylibefp 0.6.1 CONFIG QUIET); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_pylibefp})); include(FindPythonModule); find_python_module(pylibefp QUIET); endif(). if(${pylibefp_FOUND}); message(STATUS ""${Cyan}Found pylibefp${ColourReset}: ${PY_pylibefp} (found version ${pylibefp_VERSION})""); add_library(pylibefp_external INTERFACE) # dummy. # reset below necessary as find_package clears it. better solution sought; #set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected pylibefpConfig.cmake"" FORCE). if(${CMAKE_INSIST_FIND_PACKAGE_pylibefp}); message(VERBOSE ""Suitable pylibefp located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_pylibefp}); message(FATAL_ERROR ""Suitable pylibefp could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable pylibefp could not be located, ${Magenta}Building pylibefp${ColourReset} instead.""). ExternalProject_Add(pylibefp_external; DEPENDS lapack_external; libefp_external; pybind11_external; URL https://github.com/loriab/pylibefp/archive/b3da48f.tar.gz # v0.6.2 + 5; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} # unused, but needs working compiler; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CXX_STANDARD=${psi4_CXX_STANDARD}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_DATADIR=${CMAKE_INSTALL_DATADIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; # OpenMP irrelevant; -DENABLE_XHOST=${ENABLE_XHOST}; -DENABLE_GENERIC=${ENABLE_GENERIC}; #-DLIBC_INTERJECT=${LIBC_INTERJECT}; -DPYTHON_EXECUTABLE=${Python_EXECUTABLE}; -DPYTHON_INCLUDE_DIR=${Python_INCLUDE_DIRS}; -DPYTHON_LIBRARY=${Python_LIBRARIES}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -Dlibefp_",MatchSource.DOCS,external/upstream/pylibefp/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/pylibefp/CMakeLists.txt
Safety,detect,detected,"if(${ENABLE_libefp}); #find_package(pylibefp 0.6.1 CONFIG QUIET); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_pylibefp})); include(FindPythonModule); find_python_module(pylibefp QUIET); endif(). if(${pylibefp_FOUND}); message(STATUS ""${Cyan}Found pylibefp${ColourReset}: ${PY_pylibefp} (found version ${pylibefp_VERSION})""); add_library(pylibefp_external INTERFACE) # dummy. # reset below necessary as find_package clears it. better solution sought; #set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected pylibefpConfig.cmake"" FORCE). if(${CMAKE_INSIST_FIND_PACKAGE_pylibefp}); message(VERBOSE ""Suitable pylibefp located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_pylibefp}); message(FATAL_ERROR ""Suitable pylibefp could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable pylibefp could not be located, ${Magenta}Building pylibefp${ColourReset} instead.""). ExternalProject_Add(pylibefp_external; DEPENDS lapack_external; libefp_external; pybind11_external; URL https://github.com/loriab/pylibefp/archive/b3da48f.tar.gz # v0.6.2 + 5; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} # unused, but needs working compiler; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CXX_STANDARD=${psi4_CXX_STANDARD}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_DATADIR=${CMAKE_INSTALL_DATADIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; # OpenMP irrelevant; -DENABLE_XHOST=${ENABLE_XHOST}; -DENABLE_GENERIC=${ENABLE_GENERIC}; #-DLIBC_INTERJECT=${LIBC_INTERJECT}; -DPYTHON_EXECUTABLE=${Python_EXECUTABLE}; -DPYTHON_INCLUDE_DIR=${Python_INCLUDE_DIRS}; -DPYTHON_LIBRARY=${Python_LIBRARIES}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -Dlibefp_",MatchSource.DOCS,external/upstream/pylibefp/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/pylibefp/CMakeLists.txt
Usability,clear,clears,"if(${ENABLE_libefp}); #find_package(pylibefp 0.6.1 CONFIG QUIET); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_pylibefp})); include(FindPythonModule); find_python_module(pylibefp QUIET); endif(). if(${pylibefp_FOUND}); message(STATUS ""${Cyan}Found pylibefp${ColourReset}: ${PY_pylibefp} (found version ${pylibefp_VERSION})""); add_library(pylibefp_external INTERFACE) # dummy. # reset below necessary as find_package clears it. better solution sought; #set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected pylibefpConfig.cmake"" FORCE). if(${CMAKE_INSIST_FIND_PACKAGE_pylibefp}); message(VERBOSE ""Suitable pylibefp located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_pylibefp}); message(FATAL_ERROR ""Suitable pylibefp could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable pylibefp could not be located, ${Magenta}Building pylibefp${ColourReset} instead.""). ExternalProject_Add(pylibefp_external; DEPENDS lapack_external; libefp_external; pybind11_external; URL https://github.com/loriab/pylibefp/archive/b3da48f.tar.gz # v0.6.2 + 5; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} # unused, but needs working compiler; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CXX_STANDARD=${psi4_CXX_STANDARD}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_DATADIR=${CMAKE_INSTALL_DATADIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; # OpenMP irrelevant; -DENABLE_XHOST=${ENABLE_XHOST}; -DENABLE_GENERIC=${ENABLE_GENERIC}; #-DLIBC_INTERJECT=${LIBC_INTERJECT}; -DPYTHON_EXECUTABLE=${Python_EXECUTABLE}; -DPYTHON_INCLUDE_DIR=${Python_INCLUDE_DIRS}; -DPYTHON_LIBRARY=${Python_LIBRARIES}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -Dlibefp_",MatchSource.DOCS,external/upstream/pylibefp/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/pylibefp/CMakeLists.txt
Deployability,install,install,"if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); include(FindPythonModule); find_python_module(qcelemental ATLEAST 0.26.0 QUIET); endif(). if(${qcelemental_FOUND}); message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); message(VERBOSE ""Suitable qcelemental located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""). file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib). ExternalProject_Add(qcelemental_external; BUILD_ALWAYS 1; URL https://github.com/MolSSI/QCElemental/archive/v0.27.1.tar.gz; DOWNLOAD_NO_EXTRACT 1; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND """"; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} -m pip install <DOWNLOADED_FILE>; --target=${_install_lib}; --no-deps; #-v; ); endif(); ",MatchSource.DOCS,external/upstream/qcelemental/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/qcelemental/CMakeLists.txt
Integrability,message,message,"if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); include(FindPythonModule); find_python_module(qcelemental ATLEAST 0.26.0 QUIET); endif(). if(${qcelemental_FOUND}); message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); message(VERBOSE ""Suitable qcelemental located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""). file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib). ExternalProject_Add(qcelemental_external; BUILD_ALWAYS 1; URL https://github.com/MolSSI/QCElemental/archive/v0.27.1.tar.gz; DOWNLOAD_NO_EXTRACT 1; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND """"; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} -m pip install <DOWNLOADED_FILE>; --target=${_install_lib}; --no-deps; #-v; ); endif(); ",MatchSource.DOCS,external/upstream/qcelemental/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/qcelemental/CMakeLists.txt
Availability,down,downgrading,"TUS ""${Cyan}Found qcengine${ColourReset}: ${PY_qcengine} (found version ${qcengine_VERSION})""); add_library(qcengine_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_qcengine}); message(VERBOSE ""Suitable qcengine located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_qcengine}); message(FATAL_ERROR ""Suitable qcengine could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable qcengine could not be located, ${Magenta}Building qcengine${ColourReset} instead.""). file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/"" _install_bin); file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/bin/"" _pip_install_bin); if(WIN32); set(_qcengineexe ""qcengine.exe""); else(); set(_qcengineexe ""qcengine""); endif(). # Note: Without downgrading setuptools or `sed`ing ""git_refnames"" (_version.py for versioneer-generated),; # pip will strenuously resist (""Invalid version: <branch or commit>"") arbitrary branch or commit refs from GH.; # Make a proper PEP440 tag (e.g., `git tag -a v0.26.0.dev1 -m ""v0.26.0.dev1""`), push it, and use in URL below.; #; # With downgrading to (setuptools""<66.0.0"" packaging""<23.0"" ; former vendors latter), one can use arbitrary; # branch or commit tarballs without the tagging procedure described above. ExternalProject_Add(qcengine_external; DEPENDS qcelemental_external; BUILD_ALWAYS 1; URL https://github.com/MolSSI/QCEngine/archive/v0.29.0.tar.gz; DOWNLOAD_NO_EXTRACT 1; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND """"; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} -m pip install <DOWNLOADED_FILE>; --target=${_install_lib}; --no-deps; #-v; ); ExternalProject_Add_Step(qcengine_external; fix_qcng_bin; DEPENDEES install; COMMAND ${CMAKE_COMMAND} -E copy ""${_pip_install_bin}${_qcengineexe}"" ""${_inst",MatchSource.DOCS,external/upstream/qcengine/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/qcengine/CMakeLists.txt
Deployability,install,install,"NTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_qcengine}); message(VERBOSE ""Suitable qcengine located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_qcengine}); message(FATAL_ERROR ""Suitable qcengine could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable qcengine could not be located, ${Magenta}Building qcengine${ColourReset} instead.""). file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/"" _install_bin); file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/bin/"" _pip_install_bin); if(WIN32); set(_qcengineexe ""qcengine.exe""); else(); set(_qcengineexe ""qcengine""); endif(). # Note: Without downgrading setuptools or `sed`ing ""git_refnames"" (_version.py for versioneer-generated),; # pip will strenuously resist (""Invalid version: <branch or commit>"") arbitrary branch or commit refs from GH.; # Make a proper PEP440 tag (e.g., `git tag -a v0.26.0.dev1 -m ""v0.26.0.dev1""`), push it, and use in URL below.; #; # With downgrading to (setuptools""<66.0.0"" packaging""<23.0"" ; former vendors latter), one can use arbitrary; # branch or commit tarballs without the tagging procedure described above. ExternalProject_Add(qcengine_external; DEPENDS qcelemental_external; BUILD_ALWAYS 1; URL https://github.com/MolSSI/QCEngine/archive/v0.29.0.tar.gz; DOWNLOAD_NO_EXTRACT 1; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND """"; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} -m pip install <DOWNLOADED_FILE>; --target=${_install_lib}; --no-deps; #-v; ); ExternalProject_Add_Step(qcengine_external; fix_qcng_bin; DEPENDEES install; COMMAND ${CMAKE_COMMAND} -E copy ""${_pip_install_bin}${_qcengineexe}"" ""${_install_bin}${_qcengineexe}""; COMMENT ""Moves qcengine entry-point into place alongside bin/psi4 for `qcengine info`""; ); endif(); ",MatchSource.DOCS,external/upstream/qcengine/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/qcengine/CMakeLists.txt
Integrability,message,message,"if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcengine})); include(FindPythonModule); find_python_module(qcengine ATLEAST 0.28.1 QUIET); endif(). if(${qcengine_FOUND}); message(STATUS ""${Cyan}Found qcengine${ColourReset}: ${PY_qcengine} (found version ${qcengine_VERSION})""); add_library(qcengine_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_qcengine}); message(VERBOSE ""Suitable qcengine located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_qcengine}); message(FATAL_ERROR ""Suitable qcengine could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable qcengine could not be located, ${Magenta}Building qcengine${ColourReset} instead.""). file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/"" _install_bin); file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/bin/"" _pip_install_bin); if(WIN32); set(_qcengineexe ""qcengine.exe""); else(); set(_qcengineexe ""qcengine""); endif(). # Note: Without downgrading setuptools or `sed`ing ""git_refnames"" (_version.py for versioneer-generated),; # pip will strenuously resist (""Invalid version: <branch or commit>"") arbitrary branch or commit refs from GH.; # Make a proper PEP440 tag (e.g., `git tag -a v0.26.0.dev1 -m ""v0.26.0.dev1""`), push it, and use in URL below.; #; # With downgrading to (setuptools""<66.0.0"" packaging""<23.0"" ; former vendors latter), one can use arbitrary; # branch or commit tarballs without the tagging procedure described above. ExternalProject_Add(qcengine_external; DEPENDS qcelemental_external; BUILD_ALWAYS 1; URL https://github.com/MolSSI/QCEngine/archive/v0.29.0.tar.gz; DOWNLOAD_NO_EXTRACT 1; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND """"; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} -m pip install <DOWNLOADED_FILE>; --target=${_install_lib}; --n",MatchSource.DOCS,external/upstream/qcengine/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/qcengine/CMakeLists.txt
Availability,down,download," TARGET simint::simint PROPERTY LOCATION); message(STATUS ""${Cyan}Found simint ${simint_MAXAM}${ColourReset}: ${_loc} (found version ${simint_VERSION}; vectorization ${simint_VECTOR})""); add_library(simint_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_simint}); message(VERBOSE ""Suitable simint located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_simint}); message(FATAL_ERROR ""Suitable simint could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable simint could not be located, ${Magenta}Building simint${ColourReset} instead.""). if (CMAKE_CXX_COMPILER_ID MATCHES Intel); if (NOT (CMAKE_CXX_COMPILER_VERSION VERSION_LESS ""18.0.0"")); message(FATAL_ERROR ""ICPC version 2018 builds an incorrect simint library. Use the conda package or build simint separately with GNU or Intel 2017 compilers.""); endif(); endif(). ExternalProject_Add(simint_external; URL http://www.bennyp.org/research/simint/download/simint-v${SIMINT_VER}.tar.bz2; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; # OpenMP relevant but always ON and handled by simint; # xHost handled through SIMINT_VECTOR. default sse equiv to XHOST=OFF; -DCMAKE_POSITION_INDEPENDENT_CODE=${BUILD_FPIC}; -DSIMINT_STANDALONE=${ENABLE_GENERIC}; -DENABLE_TESTS=OFF; -DSIMINT_VECTOR=${SIMINT_VECTOR}; -DSIMINT_MAXAM=${MAX_AM_ERI}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}; -DCMAKE_CXX_COMPILER_ARG1:STRING=${CMAKE_CXX_COMPILER_A",MatchSource.DOCS,external/upstream/simint/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/simint/CMakeLists.txt
Integrability,message,message,"set(SIMINT_VER ""0.7""). if(${ENABLE_simint}); find_package(simint ${SIMINT_VER} CONFIG QUIET COMPONENTS am${MAX_AM_ERI} der0). if(${simint_FOUND}); get_property(_loc TARGET simint::simint PROPERTY LOCATION); message(STATUS ""${Cyan}Found simint ${simint_MAXAM}${ColourReset}: ${_loc} (found version ${simint_VERSION}; vectorization ${simint_VECTOR})""); add_library(simint_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_simint}); message(VERBOSE ""Suitable simint located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_simint}); message(FATAL_ERROR ""Suitable simint could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable simint could not be located, ${Magenta}Building simint${ColourReset} instead.""). if (CMAKE_CXX_COMPILER_ID MATCHES Intel); if (NOT (CMAKE_CXX_COMPILER_VERSION VERSION_LESS ""18.0.0"")); message(FATAL_ERROR ""ICPC version 2018 builds an incorrect simint library. Use the conda package or build simint separately with GNU or Intel 2017 compilers.""); endif(); endif(). ExternalProject_Add(simint_external; URL http://www.bennyp.org/research/simint/download/simint-v${SIMINT_VER}.tar.bz2; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; # OpenMP relevant but always ON and handled by simint; # xHost handled through SIMINT_VECTOR. default sse equiv to XHOST=OFF; -DCMAKE_POSITION_INDEPENDENT_CODE=${BUILD_FPIC}; -DSIMINT_STANDALONE=${ENABLE_GENERIC}; -DENABLE_TESTS=OFF; -DSIMINT_VECTOR=${SIMINT_VECTOR}; -DSIMINT_MAXAM=${MAX_AM_ERI}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_F",MatchSource.DOCS,external/upstream/simint/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/simint/CMakeLists.txt
Deployability,install,install,"add_subdirectory(p4util); add_subdirectory(procrouting); # add_subdirectory(qcdb); # add_subdirectory(util). list(APPEND sources; dependency_check; driver_findif; driver_nbody_helper; gaussian_n; molutil; pluginutil; psifiles; wrapper_autofrag; endorsed_plugins; aliases; diatomic; driver_cbs; driver_nbody; driver_util; frac; inputparser; qmmm; wrapper_database; driver; schema_wrapper; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); # message(${_exec_python_err}); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module. install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver); endforeach(). # not going to cythonize qcdb/ or util/ . inits would need a special naming procedure or cmake's confused so copying them plaintext; install(DIRECTORY .; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver; FILES_MATCHING PATTERN ""__init__.py""). install(DIRECTORY qcdb; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver; FILES_MATCHING PATTERN ""*.py""). install(DIRECTORY util; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver; FILES_MATCHING PATTERN ""*.py""); ",MatchSource.DOCS,psi4/driver/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/CMakeLists.txt
Integrability,message,message,"add_subdirectory(p4util); add_subdirectory(procrouting); # add_subdirectory(qcdb); # add_subdirectory(util). list(APPEND sources; dependency_check; driver_findif; driver_nbody_helper; gaussian_n; molutil; pluginutil; psifiles; wrapper_autofrag; endorsed_plugins; aliases; diatomic; driver_cbs; driver_nbody; driver_util; frac; inputparser; qmmm; wrapper_database; driver; schema_wrapper; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); # message(${_exec_python_err}); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module. install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver); endforeach(). # not going to cythonize qcdb/ or util/ . inits would need a special naming procedure or cmake's confused so copying them plaintext; install(DIRECTORY .; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver; FILES_MATCHING PATTERN ""__init__.py""). install(DIRECTORY qcdb; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver; FILES_MATCHING PATTERN ""*.py""). install(DIRECTORY util; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver; FILES_MATCHING PATTERN ""*.py""); ",MatchSource.DOCS,psi4/driver/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/CMakeLists.txt
Modifiability,plugin,pluginutil,"add_subdirectory(p4util); add_subdirectory(procrouting); # add_subdirectory(qcdb); # add_subdirectory(util). list(APPEND sources; dependency_check; driver_findif; driver_nbody_helper; gaussian_n; molutil; pluginutil; psifiles; wrapper_autofrag; endorsed_plugins; aliases; diatomic; driver_cbs; driver_nbody; driver_util; frac; inputparser; qmmm; wrapper_database; driver; schema_wrapper; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); # message(${_exec_python_err}); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module. install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver); endforeach(). # not going to cythonize qcdb/ or util/ . inits would need a special naming procedure or cmake's confused so copying them plaintext; install(DIRECTORY .; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver; FILES_MATCHING PATTERN ""__init__.py""). install(DIRECTORY qcdb; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver; FILES_MATCHING PATTERN ""*.py""). install(DIRECTORY util; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver; FILES_MATCHING PATTERN ""*.py""); ",MatchSource.DOCS,psi4/driver/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/CMakeLists.txt
Availability,down,down-standard,"ybind11_extension(core); if(NOT MSVC AND NOT ${CMAKE_BUILD_TYPE} MATCHES Debug|RelWithDebInfo); # Strip unnecessary sections of the binary on Linux/macOS; pybind11_strip(core); endif(); set_target_properties(core PROPERTIES CXX_VISIBILITY_PRESET ""hidden"" VISIBILITY_INLINES_HIDDEN 1). ### >> Go into psi4 subdirectory to compile libraries and modules <<; add_subdirectory(psi4). ####################################################################; ### >> Merge libraries and modules into master psi4 library <<; ### >> We also add in versioning, settings for plugins, and; ### >> exports for Python here. target_sources(core; PRIVATE; export_benchmarks.cc; export_blas_lapack.cc; export_cubeprop.cc; export_dpd.cc; export_fock.cc; export_functional.cc; export_misc.cc; export_oeprop.cc; export_pcm.cc; export_plugins.cc; export_psio.cc; export_trans.cc; export_wavefunction.cc; export_options.cc; create_new_plugin.cc; read_options.cc; python_data_type.cc; ). # need to down-standard the Libint2 connection from c++17 for Intel as of 2021.4; # See note at psi4/src/psi4/libmints/CMakeLists.txt; add_library(l2export OBJECT export_mints.cc); set_property(TARGET l2export PROPERTY CXX_STANDARD ""${psi4_CXX_STANDARD_Libint2}""); set_property(TARGET l2export PROPERTY POSITION_INDEPENDENT_CODE ON); target_include_directories(l2export; PRIVATE; $<TARGET_PROPERTY:Libint2::cxx,INTERFACE_INCLUDE_DIRECTORIES>; ); target_link_libraries(; l2export; PRIVATE; pybind11::headers; ); if(MSVC); target_link_libraries(; l2export; PRIVATE; pybind11::windows_extras; ); endif(); target_link_libraries(core PRIVATE l2export); target_compile_definitions(core; PRIVATE; psi4_SHGSHELL_ORDERING=${psi4_SHGSHELL_ORDERING}; ); target_compile_definitions(l2export; PRIVATE; psi4_SHGSHELL_ORDERING=${psi4_SHGSHELL_ORDERING}; ). # set_target_properties(core; # PROPERTIES; # implicit in pybind11_add_module; # CXX_VISIBILITY_PRESET hidden; # implicit in add_library MODULE called by pybind11_add_module; # POSITION_INDEPENDENT",MatchSource.DOCS,psi4/src/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/CMakeLists.txt
Deployability,install,install,"); target_include_directories(core; PRIVATE; $<TARGET_PROPERTY:BrianQC::static_wrapper,INTERFACE_INCLUDE_DIRECTORIES>; ); target_link_libraries(core; PRIVATE; BrianQC::static_wrapper; ); endif(). if(Fortran_ENABLED AND CMAKE_Fortran_COMPILER_ID MATCHES Intel); # Enable call to for_rtl_init_() which is required if using the; # Intel fortran compiler; target_compile_definitions(core; PRIVATE; INTEL_Fortran_ENABLED; ); endif(). if(MSVC); # gethostname; target_link_libraries(core PRIVATE Ws2_32); # Increase the number of addressable sections. Now covered by pybind11_add_module linking with pybind11::windows_extras; # target_compile_options(core PRIVATE ""/bigobj""); endif(). target_include_directories(core; INTERFACE; $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>; $<TARGET_PROPERTY:Libint2::cxx,INTERFACE_INCLUDE_DIRECTORIES>; ). install(TARGETS core; EXPORT ""psi4Targets""; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; RUNTIME DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4); install(EXPORT ""psi4Targets""; NAMESPACE ""psi4::""; DESTINATION ${CMAKECONFIG_INSTALL_DIR}). # <<< RPATH >>>. set(_full_path_staged_libdir ""${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}""); file(RELATIVE_PATH _rel ${_full_path_staged_libdir}${PYMOD_INSTALL_LIBDIR}/psi4; ${_full_path_staged_libdir}); if(APPLE); set(psi4_RPATH ""@loader_path/${_rel}""); else(); set(psi4_RPATH ""$ORIGIN/${_rel}""); endif(). foreach(_al ${_addons}); get_filename_component(_ald ${_al} DIRECTORY). if(${_al} MATCHES ""-Wl,""); list(REMOVE_ITEM _addons ${_al}); #message(""rpath: ${_al} dropped because linker directive""); continue(); endif(). if(${_al} MATCHES ""\.${CMAKE_STATIC_LIBRARY_SUFFIX}$""); list(REMOVE_ITEM _addons ${_al}); #message(""rpath: ${_al} dropped because static""); continue(); endif(). if(NOT ${_ald} STREQUAL """"); list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES ${_ald} _in_cpild); if(_in_cpild GREATER -1); list(REMOVE_ITEM _addon",MatchSource.DOCS,psi4/src/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/CMakeLists.txt
Integrability,depend,dependencies,"### >> Create core target, so we may link modules to it directly <<; ### >> This allow to propagate dependencies upwards sanely; add_library(core SHARED core.cc). include_directories(; ${Python_INCLUDE_DIRS}; ); target_link_libraries(core; PRIVATE; Python::Module; ); target_link_libraries(core; PRIVATE; pybind11::module; pybind11::lto; pybind11::windows_extras; ); pybind11_extension(core); if(NOT MSVC AND NOT ${CMAKE_BUILD_TYPE} MATCHES Debug|RelWithDebInfo); # Strip unnecessary sections of the binary on Linux/macOS; pybind11_strip(core); endif(); set_target_properties(core PROPERTIES CXX_VISIBILITY_PRESET ""hidden"" VISIBILITY_INLINES_HIDDEN 1). ### >> Go into psi4 subdirectory to compile libraries and modules <<; add_subdirectory(psi4). ####################################################################; ### >> Merge libraries and modules into master psi4 library <<; ### >> We also add in versioning, settings for plugins, and; ### >> exports for Python here. target_sources(core; PRIVATE; export_benchmarks.cc; export_blas_lapack.cc; export_cubeprop.cc; export_dpd.cc; export_fock.cc; export_functional.cc; export_misc.cc; export_oeprop.cc; export_pcm.cc; export_plugins.cc; export_psio.cc; export_trans.cc; export_wavefunction.cc; export_options.cc; create_new_plugin.cc; read_options.cc; python_data_type.cc; ). # need to down-standard the Libint2 connection from c++17 for Intel as of 2021.4; # See note at psi4/src/psi4/libmints/CMakeLists.txt; add_library(l2export OBJECT export_mints.cc); set_property(TARGET l2export PROPERTY CXX_STANDARD ""${psi4_CXX_STANDARD_Libint2}""); set_property(TARGET l2export PROPERTY POSITION_INDEPENDENT_CODE ON); target_include_directories(l2export; PRIVATE; $<TARGET_PROPERTY:Libint2::cxx,INTERFACE_INCLUDE_DIRECTORIES>; ); target_link_libraries(; l2export; PRIVATE; pybind11::headers; ); if(MSVC); target_link_libraries(; l2export; PRIVATE; pybind11::windows_extras; ); endif(); target_link_libraries(core PRIVATE l2export); target_compile_definitio",MatchSource.DOCS,psi4/src/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/CMakeLists.txt
Modifiability,plugin,plugins,"### >> Create core target, so we may link modules to it directly <<; ### >> This allow to propagate dependencies upwards sanely; add_library(core SHARED core.cc). include_directories(; ${Python_INCLUDE_DIRS}; ); target_link_libraries(core; PRIVATE; Python::Module; ); target_link_libraries(core; PRIVATE; pybind11::module; pybind11::lto; pybind11::windows_extras; ); pybind11_extension(core); if(NOT MSVC AND NOT ${CMAKE_BUILD_TYPE} MATCHES Debug|RelWithDebInfo); # Strip unnecessary sections of the binary on Linux/macOS; pybind11_strip(core); endif(); set_target_properties(core PROPERTIES CXX_VISIBILITY_PRESET ""hidden"" VISIBILITY_INLINES_HIDDEN 1). ### >> Go into psi4 subdirectory to compile libraries and modules <<; add_subdirectory(psi4). ####################################################################; ### >> Merge libraries and modules into master psi4 library <<; ### >> We also add in versioning, settings for plugins, and; ### >> exports for Python here. target_sources(core; PRIVATE; export_benchmarks.cc; export_blas_lapack.cc; export_cubeprop.cc; export_dpd.cc; export_fock.cc; export_functional.cc; export_misc.cc; export_oeprop.cc; export_pcm.cc; export_plugins.cc; export_psio.cc; export_trans.cc; export_wavefunction.cc; export_options.cc; create_new_plugin.cc; read_options.cc; python_data_type.cc; ). # need to down-standard the Libint2 connection from c++17 for Intel as of 2021.4; # See note at psi4/src/psi4/libmints/CMakeLists.txt; add_library(l2export OBJECT export_mints.cc); set_property(TARGET l2export PROPERTY CXX_STANDARD ""${psi4_CXX_STANDARD_Libint2}""); set_property(TARGET l2export PROPERTY POSITION_INDEPENDENT_CODE ON); target_include_directories(l2export; PRIVATE; $<TARGET_PROPERTY:Libint2::cxx,INTERFACE_INCLUDE_DIRECTORIES>; ); target_link_libraries(; l2export; PRIVATE; pybind11::headers; ); if(MSVC); target_link_libraries(; l2export; PRIVATE; pybind11::windows_extras; ); endif(); target_link_libraries(core PRIVATE l2export); target_compile_definitio",MatchSource.DOCS,psi4/src/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/CMakeLists.txt
Deployability,install,install,"list(APPEND sources; exceptions; fcidump; fchk; inpsight; numpy_helper; optproc; p4regex; procutil; python_helpers; solvers; testing; text; util; writer; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module; ; install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/p4util); endforeach(); ",MatchSource.DOCS,psi4/driver/p4util/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/CMakeLists.txt
Testability,test,testing,"list(APPEND sources; exceptions; fcidump; fchk; inpsight; numpy_helper; optproc; p4regex; procutil; python_helpers; solvers; testing; text; util; writer; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module; ; install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/p4util); endforeach(); ",MatchSource.DOCS,psi4/driver/p4util/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/CMakeLists.txt
Deployability,install,install,"add_subdirectory(dft); add_subdirectory(findif_response_utils); # add_subdirectory(libcubeprop); # add_subdirectory(mcscf); add_subdirectory(response); add_subdirectory(sapt); add_subdirectory(scf_proc); add_subdirectory(solvent). list(APPEND sources; empirical_dispersion; interface_cfour; proc_table; roa; wrappers_cfour; proc_util; proc; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module; ; install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/procrouting); endforeach(). install(DIRECTORY libcubeprop; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/procrouting; FILES_MATCHING PATTERN ""*.py""). install(DIRECTORY mcscf; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/procrouting; FILES_MATCHING PATTERN ""*.py""); ",MatchSource.DOCS,psi4/driver/procrouting/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/CMakeLists.txt
Deployability,install,install,"; list(APPEND sources; dft_builder; lda_functionals; libxc_functionals; mgga_functionals; superfunctionals; dh_functionals; gga_functionals; hyb_functionals; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module; ; install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/procrouting/dft); endforeach(); ",MatchSource.DOCS,psi4/driver/procrouting/dft/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/dft/CMakeLists.txt
Deployability,install,install,"; list(APPEND sources; data_collection_helper; db_helper; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module; ; install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/procrouting/findif_response_utils); endforeach(); ",MatchSource.DOCS,psi4/driver/procrouting/findif_response_utils/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/findif_response_utils/CMakeLists.txt
Deployability,install,install,"list(APPEND sources; augmented_hessian; mcscf_solver; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module; ; install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/procrouting/mcscf); endforeach(). ",MatchSource.DOCS,psi4/driver/procrouting/mcscf/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/mcscf/CMakeLists.txt
Deployability,install,install,"; list(APPEND sources; scf_products; scf_response; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module; ; install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/procrouting/response); endforeach(); ",MatchSource.DOCS,psi4/driver/procrouting/response/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/CMakeLists.txt
Deployability,install,install,"; list(APPEND sources; fisapt_proc; sapt_jk_terms; sapt_mp2_terms; sapt_proc; sapt_sf_terms; sapt_util; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module; ; install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/procrouting/sapt); endforeach(); ",MatchSource.DOCS,psi4/driver/procrouting/sapt/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/CMakeLists.txt
Deployability,install,install,"; list(APPEND sources; scf_iterator; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module; ; install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/procrouting/scf_proc); endforeach(); ",MatchSource.DOCS,psi4/driver/procrouting/scf_proc/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/CMakeLists.txt
Deployability,install,install,"; list(APPEND sources; efp; pol_embed; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module; ; install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/procrouting/solvent); endforeach(); ",MatchSource.DOCS,psi4/driver/procrouting/solvent/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/solvent/CMakeLists.txt
Performance,cache,cache,list(APPEND sources; a_spinad.cc; b_spinad.cc; c_sort.cc; cache.cc; cctransort.cc; d_sort.cc; d_spinad.cc; denom.cc; e_sort.cc; e_spinad.cc; f_sort.cc; fock.cc; memcheck.cc; pitzer2qt.cc; scf_check.cc; sort_tei_rhf.cc; sort_tei_uhf.cc; ). psi4_add_module(bin cctransort sources). if(TARGET PCMSolver::pcm); target_link_libraries(cctransort; PUBLIC; PCMSolver::pcm; ); endif(); ,MatchSource.DOCS,psi4/src/psi4/cctransort/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cctransort/CMakeLists.txt
Integrability,message,message,"list(APPEND sources; AO_contribute.cc; dct.cc; dct_compute.cc; dct_compute_RHF.cc; dct_compute_UHF.cc; dct_density_RHF.cc; dct_density_UHF.cc; dct_df_operations.cc; dct_df_tensor.cc; dct_energy_RHF.cc; dct_energy_UHF.cc; dct_gradient.cc; dct_gradient_RHF.cc; dct_gradient_UHF.cc; dct_integrals_RHF.cc; dct_integrals_UHF.cc; dct_intermediates_RHF.cc; dct_intermediates_UHF.cc; dct_lambda_RHF.cc; dct_lambda_UHF.cc; dct_memory.cc; dct_mp2_RHF.cc; dct_mp2_UHF.cc; dct_oo_RHF.cc; dct_oo_UHF.cc; dct_qc.cc; dct_relaxed_density_UHF.cc; dct_scf_RHF.cc; dct_scf_UHF.cc; dct_sort_mo_tpdm.cc; dct_tau_RHF.cc; dct_tau_UHF.cc; dct_triples.cc; dct_validate.cc; half_transform.cc; main.cc; ). # See https://github.com/psi4/psi4/issues/923; if (CMAKE_CXX_COMPILER_ID MATCHES ""Intel""); if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.0.3 AND; (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 18.0 OR; CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL 18.0)); message(WARNING ""Intel C++ (ICC) 18.0 fails to compile dct_gradient_UHF.cc with aggressive optimization flags""); set_source_files_properties(dct_gradient_UHF.cc PROPERTIES; COMPILE_FLAGS -O1); endif (); endif (). psi4_add_module(bin dct sources). target_link_libraries(dct PUBLIC diis); ",MatchSource.DOCS,psi4/src/psi4/dct/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/dct/CMakeLists.txt
Performance,optimiz,optimization,"list(APPEND sources; AO_contribute.cc; dct.cc; dct_compute.cc; dct_compute_RHF.cc; dct_compute_UHF.cc; dct_density_RHF.cc; dct_density_UHF.cc; dct_df_operations.cc; dct_df_tensor.cc; dct_energy_RHF.cc; dct_energy_UHF.cc; dct_gradient.cc; dct_gradient_RHF.cc; dct_gradient_UHF.cc; dct_integrals_RHF.cc; dct_integrals_UHF.cc; dct_intermediates_RHF.cc; dct_intermediates_UHF.cc; dct_lambda_RHF.cc; dct_lambda_UHF.cc; dct_memory.cc; dct_mp2_RHF.cc; dct_mp2_UHF.cc; dct_oo_RHF.cc; dct_oo_UHF.cc; dct_qc.cc; dct_relaxed_density_UHF.cc; dct_scf_RHF.cc; dct_scf_UHF.cc; dct_sort_mo_tpdm.cc; dct_tau_RHF.cc; dct_tau_UHF.cc; dct_triples.cc; dct_validate.cc; half_transform.cc; main.cc; ). # See https://github.com/psi4/psi4/issues/923; if (CMAKE_CXX_COMPILER_ID MATCHES ""Intel""); if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.0.3 AND; (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 18.0 OR; CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL 18.0)); message(WARNING ""Intel C++ (ICC) 18.0 fails to compile dct_gradient_UHF.cc with aggressive optimization flags""); set_source_files_properties(dct_gradient_UHF.cc PROPERTIES; COMPILE_FLAGS -O1); endif (); endif (). psi4_add_module(bin dct sources). target_link_libraries(dct PUBLIC diis); ",MatchSource.DOCS,psi4/src/psi4/dct/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/dct/CMakeLists.txt
Integrability,depend,depends,"CONVENTIONS:; Much of the DCT code in Psi was written in ways that made perfect sense at the same time, but no longer; do now. Here, we document some more esoteric conventions:; * The amplitudes are often written as Lambda (the 2RDM cumulant). This is perfectly reasonable for most; implemented theories, but the amplitudes no longer match Lambda for ODC-13. Whether the amplitudes should; match lambda depends on your ansatz. Choosing the ansatz is a matter of ongoing research.; * In the -06 theories, the intermediates d and tau are identical. Some variable names say one when they; (properly speaking) mean the other.; ",MatchSource.DOCS,psi4/src/psi4/dct/README.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/dct/README.txt
Modifiability,variab,variable,"CONVENTIONS:; Much of the DCT code in Psi was written in ways that made perfect sense at the same time, but no longer; do now. Here, we document some more esoteric conventions:; * The amplitudes are often written as Lambda (the 2RDM cumulant). This is perfectly reasonable for most; implemented theories, but the amplitudes no longer match Lambda for ODC-13. Whether the amplitudes should; match lambda depends on your ansatz. Choosing the ansatz is a matter of ongoing research.; * In the -06 theories, the intermediates d and tau are identical. Some variable names say one when they; (properly speaking) mean the other.; ",MatchSource.DOCS,psi4/src/psi4/dct/README.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/dct/README.txt
Integrability,wrap,wrapper,list(APPEND sources; mp2.cc; corr_grad.cc; wrapper.cc; ); psi4_add_module(bin dfmp2 sources); ,MatchSource.DOCS,psi4/src/psi4/dfmp2/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/dfmp2/CMakeLists.txt
Deployability,update,updated,"d-order perturbation theory""; This theory gives gradients for a family of methods that add; another parameter to MP2, so these formulas apply to MP2 as well.; Table II of this paper will be crucial in explaining a trick that; does not appear in DiStasio. (See Sec. 3 here.); Aikens : doi:10.1007/s00214-003-0453-3; Theor. Chem. Acc. 110, 233-253 (2003); ""A derivation of the frozen-orbital unrestricted open-shell; and restricted closed-shell second-order perturbation theory; analytic gradient expressions""; This is the conventional-integral paper that DiStasio worked from to; get their DF gradients. This sometimes clarifies obscure points in; DiStasio, but they are not clear about one crucial point:; If one block of a quantity is not given, but its adjoint is, is the first; block zero, or the adjoint of the first block?; 2. Conventions; OPDM = One-particle density matrix; EWDM = Energy-weighted density matrix; All intermediates used in other functions are defined by comments starting DEFINITION.; When a previous intermediate is updated, it is defined by comments starting UPDATE.; 3. The Trick; The RHF gradient code does NOT use the formulas of the DiStasio or Aikens papers.; I can't find where the formulas come from, but they're very close to the DiStasio and; Aikens formulas, but there are consistent deviations from the formulas that are; accounted for by the addition of a ""magic"" term later on. In the comments, I refer to; this as the ""subtle trick."" Grep for that if you want to see where it appears.; 4. Cholesky Decomposition; Several times, the code needs to contract a two-index MO quantity by the four-index electron; repulsion integrals and end with a two-index AO quantity. If the two-index quantity were; separable, this would be a perfect opportunity to use our efficient libfock/jk.cc technology.; This two-index quantity is the one-particle density matrix, which is NOT separable.; To remedy this, we Cholesky decompose the OPDM, which gets it in the desired form.; ",MatchSource.DOCS,psi4/src/psi4/dfmp2/README.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/dfmp2/README.txt
Energy Efficiency,efficient,efficient,"d-order perturbation theory""; This theory gives gradients for a family of methods that add; another parameter to MP2, so these formulas apply to MP2 as well.; Table II of this paper will be crucial in explaining a trick that; does not appear in DiStasio. (See Sec. 3 here.); Aikens : doi:10.1007/s00214-003-0453-3; Theor. Chem. Acc. 110, 233-253 (2003); ""A derivation of the frozen-orbital unrestricted open-shell; and restricted closed-shell second-order perturbation theory; analytic gradient expressions""; This is the conventional-integral paper that DiStasio worked from to; get their DF gradients. This sometimes clarifies obscure points in; DiStasio, but they are not clear about one crucial point:; If one block of a quantity is not given, but its adjoint is, is the first; block zero, or the adjoint of the first block?; 2. Conventions; OPDM = One-particle density matrix; EWDM = Energy-weighted density matrix; All intermediates used in other functions are defined by comments starting DEFINITION.; When a previous intermediate is updated, it is defined by comments starting UPDATE.; 3. The Trick; The RHF gradient code does NOT use the formulas of the DiStasio or Aikens papers.; I can't find where the formulas come from, but they're very close to the DiStasio and; Aikens formulas, but there are consistent deviations from the formulas that are; accounted for by the addition of a ""magic"" term later on. In the comments, I refer to; this as the ""subtle trick."" Grep for that if you want to see where it appears.; 4. Cholesky Decomposition; Several times, the code needs to contract a two-index MO quantity by the four-index electron; repulsion integrals and end with a two-index AO quantity. If the two-index quantity were; separable, this would be a perfect opportunity to use our efficient libfock/jk.cc technology.; This two-index quantity is the one-particle density matrix, which is NOT separable.; To remedy this, we Cholesky decompose the OPDM, which gets it in the desired form.; ",MatchSource.DOCS,psi4/src/psi4/dfmp2/README.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/dfmp2/README.txt
Integrability,contract,contract,"d-order perturbation theory""; This theory gives gradients for a family of methods that add; another parameter to MP2, so these formulas apply to MP2 as well.; Table II of this paper will be crucial in explaining a trick that; does not appear in DiStasio. (See Sec. 3 here.); Aikens : doi:10.1007/s00214-003-0453-3; Theor. Chem. Acc. 110, 233-253 (2003); ""A derivation of the frozen-orbital unrestricted open-shell; and restricted closed-shell second-order perturbation theory; analytic gradient expressions""; This is the conventional-integral paper that DiStasio worked from to; get their DF gradients. This sometimes clarifies obscure points in; DiStasio, but they are not clear about one crucial point:; If one block of a quantity is not given, but its adjoint is, is the first; block zero, or the adjoint of the first block?; 2. Conventions; OPDM = One-particle density matrix; EWDM = Energy-weighted density matrix; All intermediates used in other functions are defined by comments starting DEFINITION.; When a previous intermediate is updated, it is defined by comments starting UPDATE.; 3. The Trick; The RHF gradient code does NOT use the formulas of the DiStasio or Aikens papers.; I can't find where the formulas come from, but they're very close to the DiStasio and; Aikens formulas, but there are consistent deviations from the formulas that are; accounted for by the addition of a ""magic"" term later on. In the comments, I refer to; this as the ""subtle trick."" Grep for that if you want to see where it appears.; 4. Cholesky Decomposition; Several times, the code needs to contract a two-index MO quantity by the four-index electron; repulsion integrals and end with a two-index AO quantity. If the two-index quantity were; separable, this would be a perfect opportunity to use our efficient libfock/jk.cc technology.; This two-index quantity is the one-particle density matrix, which is NOT separable.; To remedy this, we Cholesky decompose the OPDM, which gets it in the desired form.; ",MatchSource.DOCS,psi4/src/psi4/dfmp2/README.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/dfmp2/README.txt
Usability,clear,clear,"set Perturbation Theory: Application to; Alanine Tetrapeptide Conformational Analysis""; Most of our equations come from here.; Wang : doi:10.1063/1.5100175; J. Chem. Phys. 151, 044118 (2019); ""Analytic gradients for the single-reference; driven similarity renormalization group; second-order perturbation theory""; This theory gives gradients for a family of methods that add; another parameter to MP2, so these formulas apply to MP2 as well.; Table II of this paper will be crucial in explaining a trick that; does not appear in DiStasio. (See Sec. 3 here.); Aikens : doi:10.1007/s00214-003-0453-3; Theor. Chem. Acc. 110, 233-253 (2003); ""A derivation of the frozen-orbital unrestricted open-shell; and restricted closed-shell second-order perturbation theory; analytic gradient expressions""; This is the conventional-integral paper that DiStasio worked from to; get their DF gradients. This sometimes clarifies obscure points in; DiStasio, but they are not clear about one crucial point:; If one block of a quantity is not given, but its adjoint is, is the first; block zero, or the adjoint of the first block?; 2. Conventions; OPDM = One-particle density matrix; EWDM = Energy-weighted density matrix; All intermediates used in other functions are defined by comments starting DEFINITION.; When a previous intermediate is updated, it is defined by comments starting UPDATE.; 3. The Trick; The RHF gradient code does NOT use the formulas of the DiStasio or Aikens papers.; I can't find where the formulas come from, but they're very close to the DiStasio and; Aikens formulas, but there are consistent deviations from the formulas that are; accounted for by the addition of a ""magic"" term later on. In the comments, I refer to; this as the ""subtle trick."" Grep for that if you want to see where it appears.; 4. Cholesky Decomposition; Several times, the code needs to contract a two-index MO quantity by the four-index electron; repulsion integrals and end with a two-index AO quantity. If the two-in",MatchSource.DOCS,psi4/src/psi4/dfmp2/README.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/dfmp2/README.txt
Integrability,wrap,wrapper,list(APPEND sources; mp2.cc; wrapper.cc; sparse.cc; ); psi4_add_module(bin dlpno sources). target_link_libraries(dlpno PUBLIC diis); ,MatchSource.DOCS,psi4/src/psi4/dlpno/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/dlpno/CMakeLists.txt
Availability,error,error,B.cc; T3_RHF.cc; T3_RHF_ic.cc; block_matrix.cc; buf4_axpbycz.cc; buf4_axpy.cc; buf4_axpy_matrix.cc; buf4_close.cc; buf4_copy.cc; buf4_dirprd.cc; buf4_dot.cc; buf4_dot_self.cc; buf4_dump.cc; buf4_init.cc; buf4_mat_irrep_close.cc; buf4_mat_irrep_close_block.cc; buf4_mat_irrep_init.cc; buf4_mat_irrep_init_block.cc; buf4_mat_irrep_rd.cc; buf4_mat_irrep_rd_block.cc; buf4_mat_irrep_row_close.cc; buf4_mat_irrep_row_init.cc; buf4_mat_irrep_row_rd.cc; buf4_mat_irrep_row_wrt.cc; buf4_mat_irrep_row_zero.cc; buf4_mat_irrep_shift13.cc; buf4_mat_irrep_shift31.cc; buf4_mat_irrep_wrt.cc; buf4_mat_irrep_wrt_block.cc; buf4_print.cc; buf4_scm.cc; buf4_scmcopy.cc; buf4_sort.cc; buf4_sort_axpy.cc; buf4_sort_ooc.cc; buf4_symm.cc; buf4_symm2.cc; buf4_trace.cc; buf4_zero.cc; cc3_sigma_RHF.cc; cc3_sigma_RHF_ic.cc; cc3_sigma_UHF.cc; close.cc; contract222.cc; contract244.cc; contract422.cc; contract424.cc; contract442.cc; contract444.cc; contract444_df.cc; dot13.cc; dot14.cc; dot23.cc; dot24.cc; dpdmospace.cc; error.cc; file2_axpbycz.cc; file2_axpy.cc; file2_axpy_matrix.cc; file2_cache.cc; file2_close.cc; file2_copy.cc; file2_dirprd.cc; file2_dot.cc; file2_dot_self.cc; file2_init.cc; file2_mat_close.cc; file2_mat_init.cc; file2_mat_print.cc; file2_mat_rd.cc; file2_mat_wrt.cc; file2_print.cc; file2_scm.cc; file2_trace.cc; file2_zero.cc; file4_cache.cc; file4_close.cc; file4_init.cc; file4_init_nocache.cc; file4_mat_irrep_close.cc; file4_mat_irrep_init.cc; file4_mat_irrep_rd.cc; file4_mat_irrep_rd_block.cc; file4_mat_irrep_row_close.cc; file4_mat_irrep_row_init.cc; file4_mat_irrep_row_rd.cc; file4_mat_irrep_row_wrt.cc; file4_mat_irrep_row_zero.cc; file4_mat_irrep_wrt.cc; file4_mat_irrep_wrt_block.cc; file4_print.cc; init.cc; memfree.cc; pairnum.cc; split.cc; trace42_13.cc; trans4_close.cc; trans4_init.cc; trans4_mat_irrep_close.cc; trans4_mat_irrep_init.cc; trans4_mat_irrep_rd.cc; trans4_mat_irrep_shift13.cc; trans4_mat_irrep_shift31.cc; trans4_mat_irrep_wrt.cc; ); psi4_add_module(lib dpd sourc,MatchSource.DOCS,psi4/src/psi4/libdpd/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libdpd/CMakeLists.txt
Integrability,wrap,wrapper,"list(APPEND sources; CDJK.cc; CompositeJK.cc; COSK.cc; DirectDFJ.cc; DirectJK.cc; DiskDFJK.cc; DiskJK.cc; GTFockJK.cc; LinK.cc; MemDFJK.cc; PKJK.cc; PK_workers.cc; PKmanagers.cc; SplitJK.cc; apps.cc; cubature.cc; hamiltonian.cc; jk.cc; points.cc; sap.cc; solver.cc; soscf.cc; v.cc; wrapper.cc; ). psi4_add_module(lib fock sources). target_compile_definitions(fock; PRIVATE; ""restrict=${RESTRICT_KEYWORD}""; $<$<BOOL:${ENABLE_GTFOCK}>:ENABLE_GTFOCK>; psi4_SHGSHELL_ORDERING=${psi4_SHGSHELL_ORDERING}; ). target_link_libraries(fock; PRIVATE; gau2grid::gg; pybind11::headers; Libint2::cxx # for <libint2/config.h>; ). if(TARGET BrianQC::static_wrapper); target_compile_definitions(fock; PUBLIC; USING_BrianQC; ); target_include_directories(fock; PUBLIC; $<TARGET_PROPERTY:BrianQC::static_wrapper,INTERFACE_INCLUDE_DIRECTORIES>; ); endif(); ",MatchSource.DOCS,psi4/src/psi4/libfock/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libfock/CMakeLists.txt
Modifiability,config,config,"list(APPEND sources; CDJK.cc; CompositeJK.cc; COSK.cc; DirectDFJ.cc; DirectJK.cc; DiskDFJK.cc; DiskJK.cc; GTFockJK.cc; LinK.cc; MemDFJK.cc; PKJK.cc; PK_workers.cc; PKmanagers.cc; SplitJK.cc; apps.cc; cubature.cc; hamiltonian.cc; jk.cc; points.cc; sap.cc; solver.cc; soscf.cc; v.cc; wrapper.cc; ). psi4_add_module(lib fock sources). target_compile_definitions(fock; PRIVATE; ""restrict=${RESTRICT_KEYWORD}""; $<$<BOOL:${ENABLE_GTFOCK}>:ENABLE_GTFOCK>; psi4_SHGSHELL_ORDERING=${psi4_SHGSHELL_ORDERING}; ). target_link_libraries(fock; PRIVATE; gau2grid::gg; pybind11::headers; Libint2::cxx # for <libint2/config.h>; ). if(TARGET BrianQC::static_wrapper); target_compile_definitions(fock; PUBLIC; USING_BrianQC; ); target_include_directories(fock; PUBLIC; $<TARGET_PROPERTY:BrianQC::static_wrapper,INTERFACE_INCLUDE_DIRECTORIES>; ); endif(); ",MatchSource.DOCS,psi4/src/psi4/libfock/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libfock/CMakeLists.txt
Testability,benchmark,benchmark,"list(APPEND sources; local.cc; x2cint.cc; orbitalspace.cc; maketab.cc; oeprop.cc; writer.cc; transform.cc; sieve.cc; multipolesymmetry.cc; shellrotation.cc; deriv.cc; integralparameters.cc; twobody.cc; vector.cc; sobasis.cc; cartesianiter.cc; basisset.cc; wavefunction.cc; irrep.cc; fjt.cc; chartab.cc; corrtab.cc; symop.cc; benchmark.cc; get_writer_file_prefix.cc; petitelist.cc; solidharmonics.cc; multipoles.cc; sointegral.cc; extern.cc; factory.cc; psimath.cc; dimension.cc; molecule.cc; intvector.cc; mintshelper.cc; numinthelper.cc; coordentry.cc; matrix.cc; gshell.cc; integraliter.cc; pointgrp.cc; rep.cc; cdsalclist.cc; erd_eri.cc; angularmomentum.cc; orthog.cc; ). # l2intf is a listing of all the files that include libint2's boys.h include (which is included in L2's engine.h). they must; # all be built with the same C++ standard, which is currently chosen as C++14 due to; # problems building with C++17 using Intel compilers on Linux.; # These problems were seen at least through version 2021.4 but were relieved by 2021.8; # Any files including the engine.h should be added here instead of the sources list above.; add_library(l2intf OBJECT ; dipole.cc; electricfield.cc; electrostatic.cc; eribase.cc; eri.cc; integral.cc; kinetic.cc; mcmurchiedavidson.cc # includes <libint2/boys.h>; multipolepotential.cc # includes <libint2/boys.h>; nabla.cc; onebody.cc; overlap.cc; potential.cc; potentialint.cc; quadrupole.cc; rel_potential.cc; tracelessquadrupole.cc; 3coverlap.cc; ); set_property(TARGET l2intf PROPERTY CXX_STANDARD ""${psi4_CXX_STANDARD_Libint2}""); set_property(TARGET l2intf PROPERTY POSITION_INDEPENDENT_CODE ON); # below are what l2intf files would ordinarily have gotten from psi4_add_module.; # * first brings OpenMP headers; # * second brings l2. Linux needs only headers, but Windows needs headers and linking, so slight overkill here; target_link_libraries(l2intf; PRIVATE; tgt::lapack; Libint2::cxx; ). psi4_add_module(lib mints sources); target_link_libraries(mints P",MatchSource.DOCS,psi4/src/psi4/libmints/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libmints/CMakeLists.txt
Modifiability,plugin,plugin,list(APPEND sources; close_plugin.cc; load_plugin.cc; ). psi4_add_module(lib plugin sources). target_compile_definitions(plugin; PRIVATE; $<$<BOOL:${LIBDL_FOUND}>:HAVE_DLFCN_H>; ). target_link_libraries(plugin; PUBLIC; ${LIBDL_LIBRARIES}; ); ,MatchSource.DOCS,psi4/src/psi4/libplugin/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libplugin/CMakeLists.txt
Availability,error,error,list(APPEND sources; aio_handler.cc; change_namespace.cc; close.cc; compose_err_msg.cc; done.cc; decode_errno.cc; error.cc; filemanager.cc; filescfg.cc; get_address.cc; get_filename.cc; get_global_address.cc; get_numvols.cc; get_volpath.cc; getpid.cc; init.cc; open.cc; open_check.cc; read.cc; read_entry.cc; rename_file.cc; rw.cc; tocclean.cc; toclast.cc; toclen.cc; tocprint.cc; tocread.cc; tocscan.cc; tocwrite.cc; volseek.cc; write.cc; write_entry.cc; ); psi4_add_module(lib psio sources); ,MatchSource.DOCS,psi4/src/psi4/libpsio/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libpsio/CMakeLists.txt
Energy Efficiency,reduce,reduce,"if(TARGET PCMSolver::pcm); list(APPEND sources; psipcm.cc; ); psi4_add_module(lib psipcm sources); target_link_libraries(psipcm; PUBLIC; PCMSolver::pcm; mints; Libint2::cxx; ); # Because psipcm.cc includes potentialint.h, which includes libint2's engine.h; # we have to make sure we reduce the optimization level to match libmints; # See note at psi4/src/psi4/libmints/CMakeLists.txt; set_property(TARGET psipcm PROPERTY CXX_STANDARD ""${psi4_CXX_STANDARD_Libint2}""); endif(); ",MatchSource.DOCS,psi4/src/psi4/libpsipcm/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libpsipcm/CMakeLists.txt
Performance,optimiz,optimization,"if(TARGET PCMSolver::pcm); list(APPEND sources; psipcm.cc; ); psi4_add_module(lib psipcm sources); target_link_libraries(psipcm; PUBLIC; PCMSolver::pcm; mints; Libint2::cxx; ); # Because psipcm.cc includes potentialint.h, which includes libint2's engine.h; # we have to make sure we reduce the optimization level to match libmints; # See note at psi4/src/psi4/libmints/CMakeLists.txt; set_property(TARGET psipcm PROPERTY CXX_STANDARD ""${psi4_CXX_STANDARD_Libint2}""); endif(); ",MatchSource.DOCS,psi4/src/psi4/libpsipcm/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libpsipcm/CMakeLists.txt
Availability,robust,robust,"list(APPEND sources; 3d_array.cc; blas_intfc.cc; blas_intfc23.cc; cc_excited.cc; dirprd_block.cc; dot_block.cc; dx_read.cc; dx_write.cc; fill_sym_matrix.cc; invert.cc; lapack_intfc.cc; mat_print.cc; newmm_rking.cc; pople.cc; probabil.cc; ras_set.cc; reorder_qt.cc; schmidt.cc; solve_pep.cc; timer.cc; ). # cmake_symbol_exists() or check_cxx_source_runs() are preferable to check_function_exists(); # according to CMake docs. But both require an explicit header, either in the call or in the code,; # and that's tough with multiple BLAS/LAPACK backends. So, we'll see if this is robust enough.; include(CMakePushCheckState); include(CheckFunctionExists); cmake_push_check_state(); list(APPEND CMAKE_REQUIRED_LIBRARIES tgt::lapack); check_function_exists(daxpby _has_daxpby); if(NOT _has_daxpby); message(WARNING ""${Yellow}Your BLAS/LAPACK library does not seem to be providing the DAXPBY subroutine. DAXPBY calls will be re-routed through DSCAL and DAXPY. If you are seeing this message, and you are not building with Apple Accelerate, you may want to re-check that the correct BLAS/LAPACK libraries are being used by the build system. Redo CMake configuration for changes to register.${ColourReset}""); endif(). check_function_exists(dggsvd3 _has_dggsvd3); check_function_exists(dggsvp3 _has_dggsvp3); if(NOT (_has_dggsvd3 AND _has_dggsvp3)); message(WARNING ""${Yellow}Your BLAS/LAPACK library does not seem to be providing the DGGSVD3 and DGGSVP3 subroutines. No re-routing is available. If you are seeing this message, and you are not building with Apple Accelerate, you may want to re-check that the correct BLAS/LAPACK libraries are being used by the build system. Redo CMake configuration for changes to register.${ColourReset}""); endif(); cmake_pop_check_state(). psi4_add_module(lib qt sources); target_compile_definitions(qt; PRIVATE; $<$<BOOL:${_has_daxpby}>:BLAS_HAS_DAXPBY>; $<$<BOOL:${_has_dggsvd3}>:BLAS_HAS_DGGSVD3>; $<$<BOOL:${_has_dggsvp3}>:BLAS_HAS_DGGSVP3>; FC_SYMBOL=${FC_SYMBOL}; ).",MatchSource.DOCS,psi4/src/psi4/libqt/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libqt/CMakeLists.txt
Deployability,configurat,configuration,"; cc_excited.cc; dirprd_block.cc; dot_block.cc; dx_read.cc; dx_write.cc; fill_sym_matrix.cc; invert.cc; lapack_intfc.cc; mat_print.cc; newmm_rking.cc; pople.cc; probabil.cc; ras_set.cc; reorder_qt.cc; schmidt.cc; solve_pep.cc; timer.cc; ). # cmake_symbol_exists() or check_cxx_source_runs() are preferable to check_function_exists(); # according to CMake docs. But both require an explicit header, either in the call or in the code,; # and that's tough with multiple BLAS/LAPACK backends. So, we'll see if this is robust enough.; include(CMakePushCheckState); include(CheckFunctionExists); cmake_push_check_state(); list(APPEND CMAKE_REQUIRED_LIBRARIES tgt::lapack); check_function_exists(daxpby _has_daxpby); if(NOT _has_daxpby); message(WARNING ""${Yellow}Your BLAS/LAPACK library does not seem to be providing the DAXPBY subroutine. DAXPBY calls will be re-routed through DSCAL and DAXPY. If you are seeing this message, and you are not building with Apple Accelerate, you may want to re-check that the correct BLAS/LAPACK libraries are being used by the build system. Redo CMake configuration for changes to register.${ColourReset}""); endif(). check_function_exists(dggsvd3 _has_dggsvd3); check_function_exists(dggsvp3 _has_dggsvp3); if(NOT (_has_dggsvd3 AND _has_dggsvp3)); message(WARNING ""${Yellow}Your BLAS/LAPACK library does not seem to be providing the DGGSVD3 and DGGSVP3 subroutines. No re-routing is available. If you are seeing this message, and you are not building with Apple Accelerate, you may want to re-check that the correct BLAS/LAPACK libraries are being used by the build system. Redo CMake configuration for changes to register.${ColourReset}""); endif(); cmake_pop_check_state(). psi4_add_module(lib qt sources); target_compile_definitions(qt; PRIVATE; $<$<BOOL:${_has_daxpby}>:BLAS_HAS_DAXPBY>; $<$<BOOL:${_has_dggsvd3}>:BLAS_HAS_DGGSVD3>; $<$<BOOL:${_has_dggsvp3}>:BLAS_HAS_DGGSVP3>; FC_SYMBOL=${FC_SYMBOL}; ). unset(_has_daxpby); unset(_has_dggsvd3); unset(_has_dggsvp3); ",MatchSource.DOCS,psi4/src/psi4/libqt/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libqt/CMakeLists.txt
Integrability,message,message,"list(APPEND sources; 3d_array.cc; blas_intfc.cc; blas_intfc23.cc; cc_excited.cc; dirprd_block.cc; dot_block.cc; dx_read.cc; dx_write.cc; fill_sym_matrix.cc; invert.cc; lapack_intfc.cc; mat_print.cc; newmm_rking.cc; pople.cc; probabil.cc; ras_set.cc; reorder_qt.cc; schmidt.cc; solve_pep.cc; timer.cc; ). # cmake_symbol_exists() or check_cxx_source_runs() are preferable to check_function_exists(); # according to CMake docs. But both require an explicit header, either in the call or in the code,; # and that's tough with multiple BLAS/LAPACK backends. So, we'll see if this is robust enough.; include(CMakePushCheckState); include(CheckFunctionExists); cmake_push_check_state(); list(APPEND CMAKE_REQUIRED_LIBRARIES tgt::lapack); check_function_exists(daxpby _has_daxpby); if(NOT _has_daxpby); message(WARNING ""${Yellow}Your BLAS/LAPACK library does not seem to be providing the DAXPBY subroutine. DAXPBY calls will be re-routed through DSCAL and DAXPY. If you are seeing this message, and you are not building with Apple Accelerate, you may want to re-check that the correct BLAS/LAPACK libraries are being used by the build system. Redo CMake configuration for changes to register.${ColourReset}""); endif(). check_function_exists(dggsvd3 _has_dggsvd3); check_function_exists(dggsvp3 _has_dggsvp3); if(NOT (_has_dggsvd3 AND _has_dggsvp3)); message(WARNING ""${Yellow}Your BLAS/LAPACK library does not seem to be providing the DGGSVD3 and DGGSVP3 subroutines. No re-routing is available. If you are seeing this message, and you are not building with Apple Accelerate, you may want to re-check that the correct BLAS/LAPACK libraries are being used by the build system. Redo CMake configuration for changes to register.${ColourReset}""); endif(); cmake_pop_check_state(). psi4_add_module(lib qt sources); target_compile_definitions(qt; PRIVATE; $<$<BOOL:${_has_daxpby}>:BLAS_HAS_DAXPBY>; $<$<BOOL:${_has_dggsvd3}>:BLAS_HAS_DGGSVD3>; $<$<BOOL:${_has_dggsvp3}>:BLAS_HAS_DGGSVP3>; FC_SYMBOL=${FC_SYMBOL}; ).",MatchSource.DOCS,psi4/src/psi4/libqt/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libqt/CMakeLists.txt
Modifiability,config,configuration,"; cc_excited.cc; dirprd_block.cc; dot_block.cc; dx_read.cc; dx_write.cc; fill_sym_matrix.cc; invert.cc; lapack_intfc.cc; mat_print.cc; newmm_rking.cc; pople.cc; probabil.cc; ras_set.cc; reorder_qt.cc; schmidt.cc; solve_pep.cc; timer.cc; ). # cmake_symbol_exists() or check_cxx_source_runs() are preferable to check_function_exists(); # according to CMake docs. But both require an explicit header, either in the call or in the code,; # and that's tough with multiple BLAS/LAPACK backends. So, we'll see if this is robust enough.; include(CMakePushCheckState); include(CheckFunctionExists); cmake_push_check_state(); list(APPEND CMAKE_REQUIRED_LIBRARIES tgt::lapack); check_function_exists(daxpby _has_daxpby); if(NOT _has_daxpby); message(WARNING ""${Yellow}Your BLAS/LAPACK library does not seem to be providing the DAXPBY subroutine. DAXPBY calls will be re-routed through DSCAL and DAXPY. If you are seeing this message, and you are not building with Apple Accelerate, you may want to re-check that the correct BLAS/LAPACK libraries are being used by the build system. Redo CMake configuration for changes to register.${ColourReset}""); endif(). check_function_exists(dggsvd3 _has_dggsvd3); check_function_exists(dggsvp3 _has_dggsvp3); if(NOT (_has_dggsvd3 AND _has_dggsvp3)); message(WARNING ""${Yellow}Your BLAS/LAPACK library does not seem to be providing the DGGSVD3 and DGGSVP3 subroutines. No re-routing is available. If you are seeing this message, and you are not building with Apple Accelerate, you may want to re-check that the correct BLAS/LAPACK libraries are being used by the build system. Redo CMake configuration for changes to register.${ColourReset}""); endif(); cmake_pop_check_state(). psi4_add_module(lib qt sources); target_compile_definitions(qt; PRIVATE; $<$<BOOL:${_has_daxpby}>:BLAS_HAS_DAXPBY>; $<$<BOOL:${_has_dggsvd3}>:BLAS_HAS_DGGSVD3>; $<$<BOOL:${_has_dggsvp3}>:BLAS_HAS_DGGSVP3>; FC_SYMBOL=${FC_SYMBOL}; ). unset(_has_daxpby); unset(_has_dggsvd3); unset(_has_dggsvp3); ",MatchSource.DOCS,psi4/src/psi4/libqt/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libqt/CMakeLists.txt
Energy Efficiency,energy,energy,"General Notes About the Code. 1. While the primary purpose of the code is transformations between the AO and MO bases, ; some codes (mrcc, detci, and especially cc) request that tasks involving frozen core; orbitals be either done by libtrans or converted into effective quantities free of frozen; core orbitals - that way, they don't need to worry about frozen core orbitals at all, and; the calculation retains all the simplicity of one where core electrons simply don't exist.; In particular, libtrans:integraltransform_sort_so_tei.cc has the following responsibilities:; * Computing all energy contributions involving frozen core orbitals only and putting that; result into frozen_core_energy_. Used to sanity-check the HF energy.; * Constructing the ""frozen-core operator"", which is the core hamiltonian for non-frozen orbitals; plus the Couloumb and exchange contributions terms arising from the electric field of; the frozen core orbitals. Think of it as halfway between the core Hamiltonian and the Fock operator.; ",MatchSource.DOCS,psi4/src/psi4/libtrans/README.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libtrans/README.txt
Usability,simpl,simplicity,"General Notes About the Code. 1. While the primary purpose of the code is transformations between the AO and MO bases, ; some codes (mrcc, detci, and especially cc) request that tasks involving frozen core; orbitals be either done by libtrans or converted into effective quantities free of frozen; core orbitals - that way, they don't need to worry about frozen core orbitals at all, and; the calculation retains all the simplicity of one where core electrons simply don't exist.; In particular, libtrans:integraltransform_sort_so_tei.cc has the following responsibilities:; * Computing all energy contributions involving frozen core orbitals only and putting that; result into frozen_core_energy_. Used to sanity-check the HF energy.; * Constructing the ""frozen-core operator"", which is the core hamiltonian for non-frozen orbitals; plus the Couloumb and exchange contributions terms arising from the electric field of; the frozen core orbitals. Think of it as halfway between the core Hamiltonian and the Fock operator.; ",MatchSource.DOCS,psi4/src/psi4/libtrans/README.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libtrans/README.txt
Deployability,update,updater,list(APPEND sources; algebra_interface.cc; blas.cc; blas_algorithms.cc; blas_compatibile.cc; blas_diis.cc; blas_interface.cc; blas_parser.cc; blas_solve.cc; heff.cc; heff_diagonalize.cc; idmrpt2.cc; idmrpt2_Heff.cc; idmrpt2_Heff_doubles.cc; idmrpt2_Heff_singles.cc; idmrpt2_add_matrices.cc; idmrpt2_f_int.cc; idmrpt2_t1_amps.cc; idmrpt2_t2_amps.cc; index.cc; index_iterator.cc; main.cc; manybody.cc; manybody_denominators.cc; matrix.cc; matrix_addressing.cc; matrix_memory_and_io.cc; matrixtmp.cc; mp2_ccsd.cc; mp2_ccsd_add_matrices.cc; mp2_ccsd_amps.cc; mp2_ccsd_f_int.cc; mp2_ccsd_t1_amps.cc; mp2_ccsd_t2_amps.cc; mp2_ccsd_w_int.cc; mp2_ccsd_z_int.cc; mrcc.cc; mrcc_Heff.cc; mrcc_add_matrices.cc; mrcc_compute.cc; mrcc_energy.cc; mrcc_f_int.cc; mrcc_pert_triples.cc; mrcc_t1_amps.cc; mrcc_t2_amps.cc; mrcc_t_amps.cc; mrcc_tau.cc; mrcc_w_int.cc; mrcc_z_int.cc; mrccsd_t.cc; mrccsd_t_compute.cc; mrccsd_t_compute_restricted.cc; mrccsd_t_compute_spin_adapted.cc; mrccsd_t_form_matrices.cc; mrccsd_t_heff.cc; mrccsd_t_heff_a.cc; mrccsd_t_heff_a_restricted.cc; mrccsd_t_heff_ab.cc; mrccsd_t_heff_ab_restricted.cc; mrccsd_t_heff_b.cc; mrccsd_t_heff_b_restricted.cc; mrccsd_t_heff_restricted.cc; mrccsd_t_setup.cc; operation.cc; operation_compute.cc; operation_contraction.cc; operation_sort.cc; psimrcc_wfn.cc; sort.cc; sort_mrpt2.cc; sort_out_of_core.cc; special_matrices.cc; transform.cc; transform_block.cc; transform_mrpt2.cc; transform_presort.cc; transform_read_so.cc; updater.cc; updater_bw.cc; updater_mk.cc; ); psi4_add_module(bin psimrcc sources); ,MatchSource.DOCS,psi4/src/psi4/psimrcc/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/psimrcc/CMakeLists.txt
Integrability,wrap,wrapper,list(APPEND sources; wrapper.cc; ); psi4_add_module(bin sapt sources); ,MatchSource.DOCS,psi4/src/psi4/sapt/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/sapt/CMakeLists.txt
Integrability,wrap,wrapper,"list(APPEND sources; jk_grad.cc; response.cc; scf_grad.cc; wrapper.cc; ); psi4_add_module(bin scfgrad sources). if(TARGET BrianQC::static_wrapper); target_compile_definitions(scfgrad; PUBLIC; USING_BrianQC; ); target_include_directories(scfgrad; PUBLIC; $<TARGET_PROPERTY:BrianQC::static_wrapper,INTERFACE_INCLUDE_DIRECTORIES>; ); endif(). target_link_libraries(scfgrad PUBLIC scf_solver). if(TARGET ECPINT::ecpint); target_link_libraries(scfgrad; PUBLIC; ECPINT::ecpint; ); endif(); ",MatchSource.DOCS,psi4/src/psi4/scfgrad/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/scfgrad/CMakeLists.txt
Energy Efficiency,energy,energy, ${CMAKE_CURRENT_SOURCE_DIR}/add_ref_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/add_ref_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_A.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_A_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_A_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_A_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_X.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_Z.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_Z_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_Z_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_Z_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_ex_tdensity.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cache.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ccdensity.cc; #${CMAKE_CURRENT_SOURCE_DIR}/classify.cc; ${CMAKE_CURRENT_SOURCE_DIR}/deanti.cc; ${CMAKE_CURRENT_SOURCE_DIR}/deanti_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/deanti_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/deanti_UHF.cc; #${CMAKE_CURRENT_SOURCE_DIR}/distribute.cc; ${CMAKE_CURRENT_SOURCE_DIR}/dump_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/dump_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/dump_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/energy.cc; ${CMAKE_CURRENT_SOURCE_DIR}/energy_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/energy_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/energy_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_oscillator_strength.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_rotational_strength.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_sort_td_rohf.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_sort_td_uhf.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_td_cleanup.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_td_print.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_td_setup.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_tdensity.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_tdensity_intermediates.cc; #${CMAKE_CURRENT_SOURCE_DIR}/file_build.cc; ${CMAKE_CURRENT_SOURCE_DIR}/fold.cc; ${CMAKE_CURRENT_SOURCE_DIR}/fold_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/fold_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/fold_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_frozen.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_moinfo.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_params.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_rho_params.cc; ${CMAKE_CURRENT_SOURCE_DI,MatchSource.DOCS,psi4/src/psi4/cc/ccdensity/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/ccdensity/CMakeLists.txt
Performance,cache,cache,_CURRENT_SOURCE_DIR}/Gijab_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Gijab_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Gijka.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Gijkl.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Iab.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Iai.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Iia.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Iij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/V.cc; ${CMAKE_CURRENT_SOURCE_DIR}/V_cc2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/add_core_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/add_ref_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/add_ref_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/add_ref_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_A.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_A_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_A_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_A_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_X.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_Z.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_Z_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_Z_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_Z_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_ex_tdensity.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cache.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ccdensity.cc; #${CMAKE_CURRENT_SOURCE_DIR}/classify.cc; ${CMAKE_CURRENT_SOURCE_DIR}/deanti.cc; ${CMAKE_CURRENT_SOURCE_DIR}/deanti_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/deanti_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/deanti_UHF.cc; #${CMAKE_CURRENT_SOURCE_DIR}/distribute.cc; ${CMAKE_CURRENT_SOURCE_DIR}/dump_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/dump_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/dump_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/energy.cc; ${CMAKE_CURRENT_SOURCE_DIR}/energy_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/energy_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/energy_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_oscillator_strength.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_rotational_strength.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_sort_td_rohf.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_sort_td_uhf.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_td_cleanup.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_td_print.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_td_setup.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_tdensity.cc; ${CM,MatchSource.DOCS,psi4/src/psi4/cc/ccdensity/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/ccdensity/CMakeLists.txt
Deployability,update,update,${CMAKE_CURRENT_SOURCE_DIR}/cc2_WabeiT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_WabijT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Wmbij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_WmbijT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Wmnij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_faeT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_fmiT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_t2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wabei.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wamef.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wmbij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wmnie.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wmnij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ccenergy.cc; ${CMAKE_CURRENT_SOURCE_DIR}/converged.cc; ${CMAKE_CURRENT_SOURCE_DIR}/d1diag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/d2diag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/denom.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diagnostic.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/dijabT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/energy.cc; ${CMAKE_CURRENT_SOURCE_DIR}/fock_build.cc; ${CMAKE_CURRENT_SOURCE_DIR}/form_df_ints.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_moinfo.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_params.cc; ${CMAKE_CURRENT_SOURCE_DIR}/halftrans.cc; ${CMAKE_CURRENT_SOURCE_DIR}/init_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/lmp2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/local.cc; ${CMAKE_CURRENT_SOURCE_DIR}/mp2_energy.cc; ${CMAKE_CURRENT_SOURCE_DIR}/new_d1diag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/pair_energies.cc; ${CMAKE_CURRENT_SOURCE_DIR}/priority.cc; ${CMAKE_CURRENT_SOURCE_DIR}/rotate.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sort_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/spinad_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/status.cc; ${CMAKE_CURRENT_SOURCE_DIR}/t1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/t1_ijab.cc; ${CMAKE_CURRENT_SOURCE_DIR}/t2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/tau.cc; ${CMAKE_CURRENT_SOURCE_DIR}/taut.cc; ${CMAKE_CURRENT_SOURCE_DIR}/tsave.cc; ${CMAKE_CURRENT_SOURCE_DIR}/update.cc; ); ,MatchSource.DOCS,psi4/src/psi4/cc/ccenergy/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/ccenergy/CMakeLists.txt
Energy Efficiency,energy,energy,${CMAKE_CURRENT_SOURCE_DIR}/cc2_WabeiT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_WabijT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Wmbij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_WmbijT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Wmnij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_faeT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_fmiT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_t2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wabei.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wamef.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wmbij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wmnie.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wmnij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ccenergy.cc; ${CMAKE_CURRENT_SOURCE_DIR}/converged.cc; ${CMAKE_CURRENT_SOURCE_DIR}/d1diag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/d2diag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/denom.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diagnostic.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/dijabT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/energy.cc; ${CMAKE_CURRENT_SOURCE_DIR}/fock_build.cc; ${CMAKE_CURRENT_SOURCE_DIR}/form_df_ints.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_moinfo.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_params.cc; ${CMAKE_CURRENT_SOURCE_DIR}/halftrans.cc; ${CMAKE_CURRENT_SOURCE_DIR}/init_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/lmp2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/local.cc; ${CMAKE_CURRENT_SOURCE_DIR}/mp2_energy.cc; ${CMAKE_CURRENT_SOURCE_DIR}/new_d1diag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/pair_energies.cc; ${CMAKE_CURRENT_SOURCE_DIR}/priority.cc; ${CMAKE_CURRENT_SOURCE_DIR}/rotate.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sort_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/spinad_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/status.cc; ${CMAKE_CURRENT_SOURCE_DIR}/t1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/t1_ijab.cc; ${CMAKE_CURRENT_SOURCE_DIR}/t2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/tau.cc; ${CMAKE_CURRENT_SOURCE_DIR}/taut.cc; ${CMAKE_CURRENT_SOURCE_DIR}/tsave.cc; ${CMAKE_CURRENT_SOURCE_DIR}/update.cc; ); ,MatchSource.DOCS,psi4/src/psi4/cc/ccenergy/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/ccenergy/CMakeLists.txt
Performance,cache,cache,target_sources(cc; PRIVATE; ${CMAKE_CURRENT_SOURCE_DIR}/AO_contribute.cc; ${CMAKE_CURRENT_SOURCE_DIR}/BT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/BT2_AO.cc; ${CMAKE_CURRENT_SOURCE_DIR}/CT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/DT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ET2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/FT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/FT2_cc2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Fae.cc; ${CMAKE_CURRENT_SOURCE_DIR}/FaetT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Fme.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Fmi.cc; ${CMAKE_CURRENT_SOURCE_DIR}/FmitT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wmbej.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WmbejT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wmnij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WmnijT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Z.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ZT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/amp_write.cc; ${CMAKE_CURRENT_SOURCE_DIR}/analyze.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cache.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Wabei.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_WabeiT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_WabijT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Wmbij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_WmbijT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Wmnij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_faeT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_fmiT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_t2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wabei.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wamef.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wmbij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wmnie.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wmnij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ccenergy.cc; ${CMAKE_CURRENT_SOURCE_DIR}/converged.cc; ${CMAKE_CURRENT_SOURCE_DIR}/d1diag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/d2diag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/denom.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diagnostic.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/dijabT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/energy.cc; ${CMAKE_CURRENT_SOURCE_DIR},MatchSource.DOCS,psi4/src/psi4/cc/ccenergy/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/ccenergy/CMakeLists.txt
Performance,cache,cache,target_sources(cc; PRIVATE; #${CMAKE_CURRENT_SOURCE_DIR}/read_guess.cc; ${CMAKE_CURRENT_SOURCE_DIR}/FDD.cc; ${CMAKE_CURRENT_SOURCE_DIR}/FSD.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WabefDD.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WabejDS.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WamefSD.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WbmfeDS.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WmaijDS.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WmbejDD.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WmnefDD.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WmnieSD.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WmnijDD.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WnmjeDS.cc; ${CMAKE_CURRENT_SOURCE_DIR}/amp_write.cc; ${CMAKE_CURRENT_SOURCE_DIR}/c_clean.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cache.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_hbar_extra.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_sigma.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_HC1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_HC1ET1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cceom.cc; ${CMAKE_CURRENT_SOURCE_DIR}/check_sum.cc; ${CMAKE_CURRENT_SOURCE_DIR}/dgeev_eom.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diagSS.cc; ${CMAKE_CURRENT_SOURCE_DIR}/follow_root.cc; ${CMAKE_CURRENT_SOURCE_DIR}/form_diagonal.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_eom_params.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_moinfo.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_params.cc; ${CMAKE_CURRENT_SOURCE_DIR}/hbar_extra.cc; ${CMAKE_CURRENT_SOURCE_DIR}/hbar_norms.cc; ${CMAKE_CURRENT_SOURCE_DIR}/local.cc; ${CMAKE_CURRENT_SOURCE_DIR}/local_guess.cc; ${CMAKE_CURRENT_SOURCE_DIR}/norm.cc; ${CMAKE_CURRENT_SOURCE_DIR}/norm_HC1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/overlap.cc; ${CMAKE_CURRENT_SOURCE_DIR}/precondition.cc; ${CMAKE_CURRENT_SOURCE_DIR}/restart.cc; ${CMAKE_CURRENT_SOURCE_DIR}/restart_with_root.cc; ${CMAKE_CURRENT_SOURCE_DIR}/rzero.cc; ${CMAKE_CURRENT_SOURCE_DIR}/schmidt_add.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sigmaCC3.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sigmaCC3_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sigmaDD.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sigmaDS.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sigmaSD.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sigmaSS,MatchSource.DOCS,psi4/src/psi4/cc/cceom/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/cceom/CMakeLists.txt
Performance,cache,cache,target_sources(cc; PRIVATE; ${CMAKE_CURRENT_SOURCE_DIR}/F.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Fai.cc; ${CMAKE_CURRENT_SOURCE_DIR}/HET1_Wabef.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wabei.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wabei_AAAA_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wabei_ABAB_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wabei_BABA_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wabei_BBBB_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wabei_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wabei_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wabij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wamef.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wmbej.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wmbij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wmnie.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cache.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Wabei.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Wmbej.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Wmbij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Zmbej.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_HET1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cchbar.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_moinfo.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_params.cc; ${CMAKE_CURRENT_SOURCE_DIR}/norm_HET1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/purge.cc; ${CMAKE_CURRENT_SOURCE_DIR}/reference.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sort_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/status.cc; ${CMAKE_CURRENT_SOURCE_DIR}/tau.cc; ${CMAKE_CURRENT_SOURCE_DIR}/taut.cc; ); ,MatchSource.DOCS,psi4/src/psi4/cc/cchbar/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/cchbar/CMakeLists.txt
Deployability,update,update,NT_SOURCE_DIR}/G.cc; ${CMAKE_CURRENT_SOURCE_DIR}/GL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/L1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/L1FL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/L2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/L3_AAA.cc; ${CMAKE_CURRENT_SOURCE_DIR}/L3_AAB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Lamp_write.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Lmag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Lnorm.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Lsave.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WabeiL1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WefabL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WejabL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WijmbL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WijmnL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WmbejL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/c_clean.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cache.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Gai.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_L1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_L2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_faeL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_fmiL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_hbar_extra.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_l3l1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_l3l2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_t3x.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_t3z.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cclambda.cc; ${CMAKE_CURRENT_SOURCE_DIR}/check_ortho.cc; ${CMAKE_CURRENT_SOURCE_DIR}/check_sum.cc; ${CMAKE_CURRENT_SOURCE_DIR}/converged.cc; ${CMAKE_CURRENT_SOURCE_DIR}/denom.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis.cc; ${CMAKE_CURRENT_SOURCE_DIR}/dijabL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_moinfo.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_params.cc; ${CMAKE_CURRENT_SOURCE_DIR}/halftrans.cc; ${CMAKE_CURRENT_SOURCE_DIR}/hbar_extra.cc; ${CMAKE_CURRENT_SOURCE_DIR}/init_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/local.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ortho_Rs.cc; ${CMAKE_CURRENT_SOURCE_DIR}/overlap.cc; ${CMAKE_CURRENT_SOURCE_DIR}/projections.cc; ${CMAKE_CURRENT_SOURCE_DIR}/pseudoenergy.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sort_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/spinad_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/status.cc; ${CMAKE_CURRENT_SOURCE_DIR}/update.cc; ); ,MatchSource.DOCS,psi4/src/psi4/cc/cclambda/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/cclambda/CMakeLists.txt
Performance,cache,cache,target_sources(cc; PRIVATE; ${CMAKE_CURRENT_SOURCE_DIR}/BL2_AO.cc; ${CMAKE_CURRENT_SOURCE_DIR}/DL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/FaeL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/FmiL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/G.cc; ${CMAKE_CURRENT_SOURCE_DIR}/GL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/L1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/L1FL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/L2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/L3_AAA.cc; ${CMAKE_CURRENT_SOURCE_DIR}/L3_AAB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Lamp_write.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Lmag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Lnorm.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Lsave.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WabeiL1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WefabL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WejabL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WijmbL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WijmnL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WmbejL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/c_clean.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cache.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Gai.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_L1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_L2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_faeL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_fmiL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_hbar_extra.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_l3l1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_l3l2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_t3x.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_t3z.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cclambda.cc; ${CMAKE_CURRENT_SOURCE_DIR}/check_ortho.cc; ${CMAKE_CURRENT_SOURCE_DIR}/check_sum.cc; ${CMAKE_CURRENT_SOURCE_DIR}/converged.cc; ${CMAKE_CURRENT_SOURCE_DIR}/denom.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis.cc; ${CMAKE_CURRENT_SOURCE_DIR}/dijabL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_moinfo.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_params.cc; ${CMAKE_CURRENT_SOURCE_DIR}/halftrans.cc; ${CMAKE_CURRENT_SOURCE_DIR}/hbar_extra.cc; ${CMAKE_CURRENT_SOURCE_DIR}/init_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/local.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ortho_Rs.cc; ${CMAKE_CURRENT_SOURCE_DIR}/overlap.cc; ${CMAKE_CURRENT_SOURCE_DIR}/projections.cc; ${CMAKE_CURRENT_SOURC,MatchSource.DOCS,psi4/src/psi4/cc/cclambda/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/cclambda/CMakeLists.txt
Performance,cache,cache,target_sources(cc; PRIVATE; ${CMAKE_CURRENT_SOURCE_DIR}/HXY.cc; ${CMAKE_CURRENT_SOURCE_DIR}/LCX.cc; ${CMAKE_CURRENT_SOURCE_DIR}/LHX1Y1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/LHX1Y2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/LHX2Y2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/X1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/X2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/amp_write.cc; ${CMAKE_CURRENT_SOURCE_DIR}/analyze.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cache.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_LHX1Y1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_LHX1Y2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_X1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_X2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_hbar_extra.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_sort_X.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ccresponse.cc; ${CMAKE_CURRENT_SOURCE_DIR}/compute_X.cc; ${CMAKE_CURRENT_SOURCE_DIR}/converged.cc; ${CMAKE_CURRENT_SOURCE_DIR}/denom.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_moinfo.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_params.cc; ${CMAKE_CURRENT_SOURCE_DIR}/hbar_extra.cc; ${CMAKE_CURRENT_SOURCE_DIR}/init_X.cc; ${CMAKE_CURRENT_SOURCE_DIR}/lambda_residuals.cc; ${CMAKE_CURRENT_SOURCE_DIR}/linresp.cc; ${CMAKE_CURRENT_SOURCE_DIR}/local.cc; ${CMAKE_CURRENT_SOURCE_DIR}/optrot.cc; ${CMAKE_CURRENT_SOURCE_DIR}/pertbar.cc; ${CMAKE_CURRENT_SOURCE_DIR}/polar.cc; ${CMAKE_CURRENT_SOURCE_DIR}/preppert.cc; ${CMAKE_CURRENT_SOURCE_DIR}/print_X.cc; ${CMAKE_CURRENT_SOURCE_DIR}/pseudopolar.cc; ${CMAKE_CURRENT_SOURCE_DIR}/roa.cc; ${CMAKE_CURRENT_SOURCE_DIR}/save_X.cc; ${CMAKE_CURRENT_SOURCE_DIR}/scatter.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sort_X.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sort_lamps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sort_pert.cc; ${CMAKE_CURRENT_SOURCE_DIR}/update_X.cc; ); ,MatchSource.DOCS,psi4/src/psi4/cc/ccresponse/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/ccresponse/CMakeLists.txt
Performance,cache,cache,target_sources(cc; PRIVATE; ${CMAKE_CURRENT_SOURCE_DIR}/ET_AAA.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ET_AAB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ET_ABB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ET_BBB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ET_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ET_UHF_AAA.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ET_UHF_AAB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ET_UHF_ABB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ET_UHF_BBB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/EaT_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/T3_UHF_AAA.cc; ${CMAKE_CURRENT_SOURCE_DIR}/T3_UHF_AAB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/T3_UHF_ABC.cc; ${CMAKE_CURRENT_SOURCE_DIR}/T3_grad_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/T3_grad_UHF_AAA.cc; ${CMAKE_CURRENT_SOURCE_DIR}/T3_grad_UHF_AAB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/T3_grad_UHF_BBA.cc; ${CMAKE_CURRENT_SOURCE_DIR}/T3_grad_UHF_BBB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cache.cc; ${CMAKE_CURRENT_SOURCE_DIR}/count_ijk.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_moinfo.cc; ${CMAKE_CURRENT_SOURCE_DIR}/test_abc_loops.cc; ${CMAKE_CURRENT_SOURCE_DIR}/transpose_integrals.cc; ${CMAKE_CURRENT_SOURCE_DIR}/triples.cc; ); ,MatchSource.DOCS,psi4/src/psi4/cc/cctriples/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/cctriples/CMakeLists.txt
Integrability,depend,dependence,add_subdirectory(linear-dependence); add_subdirectory(high-angular-momentum). add_subdirectory(single-point-hf); add_subdirectory(single-point-hf-rohf); add_subdirectory(single-point-hf-uhf); add_subdirectory(single-point-dft); add_subdirectory(single-point-dft-uhf); add_subdirectory(single-point-dft-lrc); add_subdirectory(single-point-dft-nlc). add_subdirectory(geometry-optimization-hf); add_subdirectory(geometry-optimization-hf-rohf); add_subdirectory(geometry-optimization-hf-uhf); add_subdirectory(geometry-optimization-dft); add_subdirectory(geometry-optimization-dft-lrc). add_subdirectory(frequency-hf); add_subdirectory(frequency-hf-uhf). add_subdirectory(pentacene); ,MatchSource.DOCS,tests/brianqc/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/CMakeLists.txt
Performance,optimiz,optimization-hf,add_subdirectory(linear-dependence); add_subdirectory(high-angular-momentum). add_subdirectory(single-point-hf); add_subdirectory(single-point-hf-rohf); add_subdirectory(single-point-hf-uhf); add_subdirectory(single-point-dft); add_subdirectory(single-point-dft-uhf); add_subdirectory(single-point-dft-lrc); add_subdirectory(single-point-dft-nlc). add_subdirectory(geometry-optimization-hf); add_subdirectory(geometry-optimization-hf-rohf); add_subdirectory(geometry-optimization-hf-uhf); add_subdirectory(geometry-optimization-dft); add_subdirectory(geometry-optimization-dft-lrc). add_subdirectory(frequency-hf); add_subdirectory(frequency-hf-uhf). add_subdirectory(pentacene); ,MatchSource.DOCS,tests/brianqc/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/CMakeLists.txt
Energy Efficiency,energy,energy,"include(TestingMacros). add_regression_test(cbs-delta-energy ""psi;quicktests;cbs""); ",MatchSource.DOCS,tests/cbs-delta-energy/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-delta-energy/CMakeLists.txt
Energy Efficiency,energy,energy,"include(TestingMacros). add_regression_test(cbs-xtpl-energy ""psi;quicktests;cbs""); ",MatchSource.DOCS,tests/cbs-xtpl-energy/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-energy/CMakeLists.txt
Energy Efficiency,energy,energy-conv,"include(TestingMacros). add_regression_test(cbs-xtpl-energy-conv ""psi;quicktests;cbs""); ",MatchSource.DOCS,tests/cbs-xtpl-energy-conv/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-energy-conv/CMakeLists.txt
Integrability,wrap,wrapper,"include(TestingMacros). add_regression_test(cbs-xtpl-wrapper ""psi;cbs""); ",MatchSource.DOCS,tests/cbs-xtpl-wrapper/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cbs-xtpl-wrapper/CMakeLists.txt
Testability,log,logic,add_subdirectory(sp-uhf-mp2); add_subdirectory(sp-rohf-scf); add_subdirectory(sp-rhf-ccsd_t_-ecc); add_subdirectory(opt-rhf-scf); add_subdirectory(psi-rhf-scsmp2); add_subdirectory(pywrap-cbs1); add_subdirectory(puream) ; add_subdirectory(mints5); add_subdirectory(mints5-grad); add_subdirectory(kw-1); add_subdirectory(kw-2); add_subdirectory(kw-3); add_subdirectory(kw-4); add_subdirectory(kw-5); add_subdirectory(kw-6); #add_subdirectory(kw-7) # old keyword logic; #add_subdirectory(kw-8) # old keyword logic; add_subdirectory(psi-ghost-grad); add_subdirectory(scf4); add_subdirectory(mp2-1); add_subdirectory(pywrap-db1); add_subdirectory(pywrap-basis); add_subdirectory(dfmp2-1); add_subdirectory(sp-rhf-scf); add_subdirectory(sp-rhf-mp2); add_subdirectory(sp-rhf-ccsd); add_subdirectory(sp-rhf-ccsd-ao); add_subdirectory(sp-rhf-ccsd_t_); add_subdirectory(sp-rhf-ccsd_t_-ao); add_subdirectory(sp-rhf-ccsd_t_-ao-ecc) ; add_subdirectory(sp-rhf-ccsd_t_-fc); add_subdirectory(sp-rhf-cc3); add_subdirectory(sp-rhf-ccsdt) ; add_subdirectory(sp-uhf-scf); add_subdirectory(sp-uhf-ccsd); add_subdirectory(sp-uhf-ccsd_t_); add_subdirectory(sp-uhf-ccsd_t_-ao); add_subdirectory(sp-uhf-ccsd_t_-ao-ecc); add_subdirectory(sp-uhf-ccsd_t_-ecc); add_subdirectory(sp-uhf-cc3); add_subdirectory(sp-uhf-ccsdt); add_subdirectory(sp-rohf-mp2-sc); add_subdirectory(sp-rohf-mp4-sc); add_subdirectory(sp-rohf-ccsd); add_subdirectory(sp-rohf-ccsd_t_); add_subdirectory(sp-rohf-ccsdt); add_subdirectory(sp-rohf-ccsd-ao); add_subdirectory(sp-rohf-ccsd_t_-ao); add_subdirectory(sp-rohf-ccsd_t_-ao-ecc); add_subdirectory(sp-rohf-ccsd_t_-fc); add_subdirectory(opt-rhf-mp2); add_subdirectory(opt-rhf-ccsd_t_); add_subdirectory(opt-rhf-ccsd_t_-ecc); #add_subdirectory(psi-a24-grad) # old way of testing; add_subdirectory(psi-uhf-scsmp2); add_subdirectory(psi-rohf-scsmp2); add_subdirectory(psi-rhf-mp3); add_subdirectory(psi-uhf-mp3); add_subdirectory(psi-mp4); ,MatchSource.DOCS,tests/cfour/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/CMakeLists.txt
Energy Efficiency,energy,energy,add_subdirectory(rohf-orb-rot); add_subdirectory(manual-fd-hess-energy); add_subdirectory(manual-fd-hess-grad); ,MatchSource.DOCS,tests/cookbook/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cookbook/CMakeLists.txt
Energy Efficiency,energy,energy,add_subdirectory(energy); add_subdirectory(grad); add_subdirectory(psithon2); add_subdirectory(version); add_subdirectory(nbody-cp-gradient); ,MatchSource.DOCS,tests/dftd3/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/CMakeLists.txt
Energy Efficiency,energy,energy,add_subdirectory(energy); add_subdirectory(r2scan); ,MatchSource.DOCS,tests/dftd4/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd4/CMakeLists.txt
Energy Efficiency,energy,energy,"include(TestingMacros). add_regression_test(fd-freq-energy ""psi;findif;noc1""); ",MatchSource.DOCS,tests/fd-freq-energy/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fd-freq-energy/CMakeLists.txt
Energy Efficiency,energy,energy-large,"include(TestingMacros). add_regression_test(fd-freq-energy-large ""psi;longtests;findif;cart;noc1""); set_tests_properties(; fd-freq-energy-large; PROPERTIES; COST 1000; TIMEOUT 3000; ); ",MatchSource.DOCS,tests/fd-freq-energy-large/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/fd-freq-energy-large/CMakeLists.txt
Energy Efficiency,charge,charged,"include(TestingMacros). add_regression_test(isapt-charged ""psi;sapt;medlong""); ",MatchSource.DOCS,tests/isapt-charged/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/isapt-charged/CMakeLists.txt
Energy Efficiency,energy,energy,add_subdirectory(schema-1-energy); add_subdirectory(schema-1-ghost); add_subdirectory(schema-1-orient); add_subdirectory(schema-1-throws); add_subdirectory(schema-1-gradient); add_subdirectory(schema-1-properties); add_subdirectory(schema-1-response); add_subdirectory(schema-1-tamps); ,MatchSource.DOCS,tests/json/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/CMakeLists.txt
Testability,benchmark,benchmark,"include(TestingMacros). add_regression_test(mints-benchmark ""psi;mints;cart""); ",MatchSource.DOCS,tests/mints-benchmark/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints-benchmark/CMakeLists.txt
Integrability,interface,interface,"include(TestingMacros). add_regression_test(numpy-array-interface ""psi;quicktests;pywrap;numpy;cart""); ",MatchSource.DOCS,tests/numpy-array-interface/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/numpy-array-interface/CMakeLists.txt
Availability,error,error,"# CMake driving pytest copied from pybind11:; # https://github.com/pybind/pybind11/blob/master/tests/CMakeLists.txt. # Make sure pytest is found or produce a fatal error; if(NOT psi4_PYTEST_FOUND); execute_process(COMMAND ${Python_EXECUTABLE} -c ""import pytest""; OUTPUT_QUIET ERROR_QUIET; RESULT_VARIABLE _exec_python_err); if(_exec_python_err); message(STATUS ""Running some tests requires pytest. Please install it manually (try: ${Python_EXECUTABLE} -m pip install pytest)""); endif(); set(psi4_PYTEST_FOUND TRUE CACHE INTERNAL """"); endif(). # A single command to remake and run the pytest smoke tests; add_custom_target(pytest; COMMAND PYTHONPATH=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}; ${Python_EXECUTABLE} -m pytest -rws -v -m smoke --capture=sys ${CMAKE_CURRENT_SOURCE_DIR}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}); ",MatchSource.DOCS,tests/pytests/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/CMakeLists.txt
Deployability,install,install,"# CMake driving pytest copied from pybind11:; # https://github.com/pybind/pybind11/blob/master/tests/CMakeLists.txt. # Make sure pytest is found or produce a fatal error; if(NOT psi4_PYTEST_FOUND); execute_process(COMMAND ${Python_EXECUTABLE} -c ""import pytest""; OUTPUT_QUIET ERROR_QUIET; RESULT_VARIABLE _exec_python_err); if(_exec_python_err); message(STATUS ""Running some tests requires pytest. Please install it manually (try: ${Python_EXECUTABLE} -m pip install pytest)""); endif(); set(psi4_PYTEST_FOUND TRUE CACHE INTERNAL """"); endif(). # A single command to remake and run the pytest smoke tests; add_custom_target(pytest; COMMAND PYTHONPATH=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}; ${Python_EXECUTABLE} -m pytest -rws -v -m smoke --capture=sys ${CMAKE_CURRENT_SOURCE_DIR}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}); ",MatchSource.DOCS,tests/pytests/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/CMakeLists.txt
Integrability,message,message,"# CMake driving pytest copied from pybind11:; # https://github.com/pybind/pybind11/blob/master/tests/CMakeLists.txt. # Make sure pytest is found or produce a fatal error; if(NOT psi4_PYTEST_FOUND); execute_process(COMMAND ${Python_EXECUTABLE} -c ""import pytest""; OUTPUT_QUIET ERROR_QUIET; RESULT_VARIABLE _exec_python_err); if(_exec_python_err); message(STATUS ""Running some tests requires pytest. Please install it manually (try: ${Python_EXECUTABLE} -m pip install pytest)""); endif(); set(psi4_PYTEST_FOUND TRUE CACHE INTERNAL """"); endif(). # A single command to remake and run the pytest smoke tests; add_custom_target(pytest; COMMAND PYTHONPATH=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}; ${Python_EXECUTABLE} -m pytest -rws -v -m smoke --capture=sys ${CMAKE_CURRENT_SOURCE_DIR}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}); ",MatchSource.DOCS,tests/pytests/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/CMakeLists.txt
Testability,test,tests,"# CMake driving pytest copied from pybind11:; # https://github.com/pybind/pybind11/blob/master/tests/CMakeLists.txt. # Make sure pytest is found or produce a fatal error; if(NOT psi4_PYTEST_FOUND); execute_process(COMMAND ${Python_EXECUTABLE} -c ""import pytest""; OUTPUT_QUIET ERROR_QUIET; RESULT_VARIABLE _exec_python_err); if(_exec_python_err); message(STATUS ""Running some tests requires pytest. Please install it manually (try: ${Python_EXECUTABLE} -m pip install pytest)""); endif(); set(psi4_PYTEST_FOUND TRUE CACHE INTERNAL """"); endif(). # A single command to remake and run the pytest smoke tests; add_custom_target(pytest; COMMAND PYTHONPATH=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}; ${Python_EXECUTABLE} -m pytest -rws -v -m smoke --capture=sys ${CMAKE_CURRENT_SOURCE_DIR}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}); ",MatchSource.DOCS,tests/pytests/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/CMakeLists.txt
Integrability,depend,depends,"Candidate Structure for other method-tests. _ref_module = {scftype: {ref: {frz: {mp2type: {} for mp2type in ['conv', 'df', 'cd']} for frz in ['true', 'false']} for ref in ['rhf', 'uhf']} for scftype in ['pk', 'df']}. * The above will work for mp2, mp2.5, mp3, cepa, and the orbital-optimized variants thereof. MP2 has ROHF, but that's special.; * The dct module can also supply non-FC, conventional integral cepa.; * At present, occ has no frozen core energies for orbital optimized methods or frozen core gradients for anything. dfocc does. Jonathon will be changing this in a future; project, as well as adding some frozen virtual. ETA is Spring 2021, because that depends on the Gradient Rewrite.; * dfocc has all DF gradients and CD energies for all options.; ",MatchSource.DOCS,tests/pytests/occ_methods.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/occ_methods.txt
Performance,optimiz,optimized,"Candidate Structure for other method-tests. _ref_module = {scftype: {ref: {frz: {mp2type: {} for mp2type in ['conv', 'df', 'cd']} for frz in ['true', 'false']} for ref in ['rhf', 'uhf']} for scftype in ['pk', 'df']}. * The above will work for mp2, mp2.5, mp3, cepa, and the orbital-optimized variants thereof. MP2 has ROHF, but that's special.; * The dct module can also supply non-FC, conventional integral cepa.; * At present, occ has no frozen core energies for orbital optimized methods or frozen core gradients for anything. dfocc does. Jonathon will be changing this in a future; project, as well as adding some frozen virtual. ETA is Spring 2021, because that depends on the Gradient Rewrite.; * dfocc has all DF gradients and CD energies for all options.; ",MatchSource.DOCS,tests/pytests/occ_methods.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/occ_methods.txt
Testability,test,tests,"Candidate Structure for other method-tests. _ref_module = {scftype: {ref: {frz: {mp2type: {} for mp2type in ['conv', 'df', 'cd']} for frz in ['true', 'false']} for ref in ['rhf', 'uhf']} for scftype in ['pk', 'df']}. * The above will work for mp2, mp2.5, mp3, cepa, and the orbital-optimized variants thereof. MP2 has ROHF, but that's special.; * The dct module can also supply non-FC, conventional integral cepa.; * At present, occ has no frozen core energies for orbital optimized methods or frozen core gradients for anything. dfocc does. Jonathon will be changing this in a future; project, as well as adding some frozen virtual. ETA is Spring 2021, because that depends on the Gradient Rewrite.; * dfocc has all DF gradients and CD energies for all options.; ",MatchSource.DOCS,tests/pytests/occ_methods.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/occ_methods.txt
Energy Efficiency,energy,energy,add_subdirectory(energy); add_subdirectory(curve); add_subdirectory(pubchem); add_subdirectory(mints9); add_subdirectory(mints2); add_subdirectory(cc54); add_subdirectory(3-index-transforms); add_subdirectory(mints13); add_subdirectory(mints14); add_subdirectory(cc-amps); add_subdirectory(databases),MatchSource.DOCS,tests/python/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/CMakeLists.txt
Energy Efficiency,energy,energy,"include(TestingMacros). add_regression_test(tu1-h2o-energy ""psi;quicktests;smoketests;tutorial""); ",MatchSource.DOCS,tests/tu1-h2o-energy/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/tu1-h2o-energy/CMakeLists.txt
Energy Efficiency,energy,energy,"include(TestingMacros). add_regression_test(tu2-ch2-energy ""psi;quicktests;tutorial""); ",MatchSource.DOCS,tests/tu2-ch2-energy/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/tu2-ch2-energy/CMakeLists.txt
Performance,optimiz,optimization-dft,"include(TestingMacros). add_regression_test(brianqc-geometry-optimization-dft ""psi;addon;brianqc;smoketests;opt;dft;cart""); ",MatchSource.DOCS,tests/brianqc/geometry-optimization-dft/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-dft/CMakeLists.txt
Performance,optimiz,optimization-dft-lrc,"include(TestingMacros). add_regression_test(brianqc-geometry-optimization-dft-lrc ""psi;addon;brianqc;quicktests;opt;dft;cart""); ",MatchSource.DOCS,tests/brianqc/geometry-optimization-dft-lrc/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-dft-lrc/CMakeLists.txt
Performance,optimiz,optimization-hf,"include(TestingMacros). add_regression_test(brianqc-geometry-optimization-hf ""psi;addon;brianqc;smoketests;opt;cart""); ",MatchSource.DOCS,tests/brianqc/geometry-optimization-hf/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-hf/CMakeLists.txt
Performance,optimiz,optimization-hf-rohf,"include(TestingMacros). add_regression_test(brianqc-geometry-optimization-hf-rohf ""psi;addon;brianqc;quicktests;opt;cart""); ",MatchSource.DOCS,tests/brianqc/geometry-optimization-hf-rohf/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-hf-rohf/CMakeLists.txt
Performance,optimiz,optimization-hf-uhf,"include(TestingMacros). add_regression_test(brianqc-geometry-optimization-hf-uhf ""psi;addon;brianqc;quicktests;opt;cart""); ",MatchSource.DOCS,tests/brianqc/geometry-optimization-hf-uhf/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-hf-uhf/CMakeLists.txt
Integrability,depend,dependence,"include(TestingMacros). add_regression_test(brianqc-linear-dependence ""psi;addon;brianqc;smoketests;scf;cart""); ",MatchSource.DOCS,tests/brianqc/linear-dependence/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/linear-dependence/CMakeLists.txt
Energy Efficiency,energy,energy,"include(TestingMacros). add_regression_test(cookbook-manual-fd-hess-energy ""psi;cookbook""); ",MatchSource.DOCS,tests/cookbook/manual-fd-hess-energy/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cookbook/manual-fd-hess-energy/CMakeLists.txt
Energy Efficiency,energy,energy,"include(TestingMacros). add_regression_test(dftd3-energy ""psi;quicktests;smoketests;dftd3;addon;cart""); ",MatchSource.DOCS,tests/dftd3/energy/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd3/energy/CMakeLists.txt
Energy Efficiency,energy,energy,"include(TestingMacros). add_regression_test(dftd4-energy ""psi;quicktests;smoketests;dftd4;addon;cart""); ",MatchSource.DOCS,tests/dftd4/energy/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/dftd4/energy/CMakeLists.txt
Energy Efficiency,energy,energy,"include(TestingMacros). add_regression_test(json-schema-1-energy ""psi;quicktests;json""); ",MatchSource.DOCS,tests/json/schema-1-energy/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/json/schema-1-energy/CMakeLists.txt
Modifiability,plugin,plugin,"# check out and build fresh plugin; # creates a dir skeleton w/i skeleton then copies files up to satisfy requirements of both CMake and Psi4 plugins; # symlinks input.dat back to source dir to satisfy TestingMacro. add_skeleton_plugin(""skeleton"" ""basic"" ""psi;plug""); ",MatchSource.DOCS,tests/plugins/skeleton/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/plugins/skeleton/CMakeLists.txt
Modifiability,plugin,plugin,"# check out and build fresh plugin; # creates a dir skeleton w/i skeleton then copies files up to satisfy requirements of both CMake and Psi4 plugins; # symlinks input.dat back to source dir to satisfy TestingMacro. add_skeleton_plugin(""skeletonambit"" ""ambit"" ""psi;plug""); ",MatchSource.DOCS,tests/plugins/skeletonambit/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/plugins/skeletonambit/CMakeLists.txt
Modifiability,plugin,plugin,"# check out and build fresh plugin; # creates a dir skeleton w/i skeleton then copies files up to satisfy requirements of both CMake and Psi4 plugins; # symlinks input.dat back to source dir to satisfy TestingMacro. add_skeleton_plugin(""skeletonaointegrals"" ""aointegrals"" ""psi;plug""); ",MatchSource.DOCS,tests/plugins/skeletonaointegrals/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/plugins/skeletonaointegrals/CMakeLists.txt
Modifiability,plugin,plugin,"# check out and build fresh plugin; # creates a dir skeleton w/i skeleton then copies files up to satisfy requirements of both CMake and Psi4 plugins; # symlinks input.dat back to source dir to satisfy TestingMacro. add_skeleton_plugin(""skeletondfmp2"" ""dfmp2"" ""psi;plug;minitests;quicktests""); ",MatchSource.DOCS,tests/plugins/skeletondfmp2/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/plugins/skeletondfmp2/CMakeLists.txt
Modifiability,plugin,plugin,"# check out and build fresh plugin; # creates a dir skeleton w/i skeleton then copies files up to satisfy requirements of both CMake and Psi4 plugins; # symlinks input.dat back to source dir to satisfy TestingMacro. add_skeleton_plugin(""skeletonmointegrals"" ""mointegrals"" ""psi;plug""); ",MatchSource.DOCS,tests/plugins/skeletonmointegrals/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/plugins/skeletonmointegrals/CMakeLists.txt
Modifiability,plugin,plugin,"# check out and build fresh plugin; # creates a dir skeleton w/i skeleton then copies files up to satisfy requirements of both CMake and Psi4 plugins; # symlinks input.dat back to source dir to satisfy TestingMacro. add_skeleton_plugin(""skeletonscf"" ""scf"" ""psi;plug""); ",MatchSource.DOCS,tests/plugins/skeletonscf/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/plugins/skeletonscf/CMakeLists.txt
Modifiability,plugin,plugin,"# check out and build fresh plugin; # creates a dir skeleton w/i skeleton then copies files up to satisfy requirements of both CMake and Psi4 plugins; # symlinks input.dat back to source dir to satisfy TestingMacro. add_skeleton_plugin(""skeletonsointegrals"" ""sointegrals"" ""psi;plug""); ",MatchSource.DOCS,tests/plugins/skeletonsointegrals/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/plugins/skeletonsointegrals/CMakeLists.txt
Modifiability,plugin,plugin,"# check out and build fresh plugin; # creates a dir skeleton w/i skeleton then copies files up to satisfy requirements of both CMake and Psi4 plugins; # symlinks input.dat back to source dir to satisfy TestingMacro. add_skeleton_plugin(""skeletonwavefunction"" ""wavefunction"" ""psi;plug""); ",MatchSource.DOCS,tests/plugins/skeletonwavefunction/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/plugins/skeletonwavefunction/CMakeLists.txt
Energy Efficiency,energy,energy,"include(TestingMacros). add_regression_test(python-energy ""psi;quicktests;smoketests;python""); ",MatchSource.DOCS,tests/python/energy/CMakeLists.txt,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/python/energy/CMakeLists.txt
Availability,avail,available,"n the indices into any grouping; we desire, we may select any grouping of the indices to use as row and; column indices. For example, since i; × j; × a; = b. we could also construct a different supermatrix for these same; integrals, using (i,j,a) as the compound row index and b as the column; index. These same concepts apply to any multi-index quantity. III. Library Initialization . Before the library may be used, it must first be initialized; via the dpd_init() function. This function; requires the following information (see dpd.h for proper syntax):; int dpd_init(int dpd_num, int nirreps, long int memory, int cachetype, ; int *cachefiles, int **cachelist, struct dpd_file4_cache_entry *priority, ; int num_subspaces, int *orbspi, int *orbsym, ...);. dpd_num - An integer identifier for the current DPD; setup. Only two active DPD's are currently allowed, so this value; can be either 0 or 1.; nirreps - The number of irreducible representations in; the point group.; memory - The amount of available memory in bytes.; cachetype - The type of file cacheing desired (see below). If this; is 0, then a priority-based cache is used; if it's 1 then a; ""least-recently-used"" method is applied.; cachefiles - See below.; cachelist - See below.; priority - See below.; num_subspaces - The number of orbital subspaces to be; used. If the programmer uses only occupied and virtual spaces,; for example, this would be set to 2.; For each value of num_subspaces, the following; two arrays must also be provided:; orbspi - An irrep population array,; i.e., the number of orbitals per irrep in the current; subspace.; orbsym - An orbital symmetry array,; i.e., the irrep value for each orbital in the current; subspace. For four-index quantities, the dpd_init() function; pre-computes a number of orbital lookup arrays about all pairwise; combinations of the given orbital subspaces, including information; regarding possible permutational symmetry or antisymmetry among the; orbitals. libdpd then assigns",MatchSource.DOCS,doc/sphinxman/source/attic/libdpd.html,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html
Energy Efficiency,reduce,reduce," ; LIBDPD --- The Direct-Product Decomposition Library. Programmer's Manual for LIBDPD: A Library for Including; Spatial Symmetry in Quantum Chemistry Programs. T. Daniel Crawford ; Version: June 18, 2001 ; crawdad@vt.edu. I. Introduction. In many-body theories such as coupled cluster or MBPT, one finds many; complicated algebraic expressions involving products of multi-index; quantities such as one- and two-electron integrals, cluster; amplitudes, density matrices, etc. Efficient evaluation of; these products can require a great deal of effort, particularly if one; wishes to use Abelian point-group symmetry to reduce the number of; terms that must be computed and stored. The direct-product; decomposition library, LIBDPD, is designed to assist the programmer; with this problem by providing (1) a symmetry-blocked, matrix-based; storage scheme for all two- and four-index quantities, (2) a set of; functions for evaluating various types of products among them, and (3); a set of utilities for sorting them to different index orderings. The; library is currently used in the set of coupled cluster and; perturbation theory energy and analytic gradient codes under; development in the PSI package of quantum chemical programs. This; manual describes the design of the library and provides a set of; examples for its use. The header file dpd.h provides proper declarations for all; structures and functions used in the library. II. Fundamental Symmetry Concepts. In the current version of libdpd, I assume that all multi-index; quantities are totally symmetric, i.e., the direct product of; the irreducible representations (irreps) associated with the component; orbital indices corresponds to the totally symmetric irrep of the; given point group. (This assumption is in the process of being; removed, however.) Furthermore, each orbital subset of interest; (e.g., occupied or virtual orbitals) must be grouped by; symmetry. This allows one to organize the given quantity in a; symmetry-blocke",MatchSource.DOCS,doc/sphinxman/source/attic/libdpd.html,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html
Integrability,rout,routines," /* Orbital subspace for q */; int *rowtot; /* Row dimension for each submatrix */; int *coltot; /* Column dimension for each submatrix */; int *rowidx; /* Row index lookup array */; int *colidx; /* Column index lookup array */; int **roworb; /* Row index -> orbital index lookup array */; int **colorb; /* Column index -> orbital index lookup array */; int *ppi; /* Number of p indices per irrep */; int *qpi; /* Number of q indices per irrep */; int *poff; /* Orbital offset for p */; int *qoff; /* Orbital offset for q */; int *psym; /* Orbital symmetry for index p */; int *qsym; /* Orbital symmetry for index q */; } dpdparams2;. The library interacts with data stored on disk via the; dpdfile4 and dpdfile2 structures, which have; dpdparams4 and dpdparams2 structures, respectively,; as members:. typedef struct {; char label[PSIO_KEYLEN]; /* Label needed by the I/O routines */; int filenum; /* The PSI unit number */; int my_irrep; /* Total irrep of this quantity */ ; psio_address *lfiles; /* The disk address of each irrep of data */; dpdparams4 *params; /* The current parameter structure */; int incore; /* Is this file4 already in memory? */ ; double ***matrix; /* Data */; } dpdfile4;. The one-electron (two-index) counterpart of dpdfile4 is:. typedef struct {; char label[PSIO_KEYLEN]; /* Label needed by the I/O routines */; int filenum; /* The PSI unit number */; int my_irrep /* The total irrep of this quantity */ ; psio_address *lfiles; /* The disk address of each irrep of data */; dpdparams2 *params; /* The current parameter structure */; int incore; /* Is this file2 already in memory? */ ; double ***matrix; /* Data */; } dpdfile2;. As described above, one may need to store a given quantity in memory; in a manner different from that which is used on disk. The library; distinguishes between on-disk and in-memory storage using the; dpdbuf4 structure (for four-index quantities only), which has; a corresponding dpdfile4 as a member:. typedef struct {; int anti; /* Boolean f",MatchSource.DOCS,doc/sphinxman/source/attic/libdpd.html,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html
Modifiability,variab,variable,"double alpha, double; beta): This function evaluates contractions of the; form alpha * T(q,r) * I(pq,rs) = beta * Z(p,s), where the; summation indices correspond to indices 2 and 3 on the four-index; factor. The transt and transz flags may be used to; transpose the indices of the factor T or the target; Z, as desired. Similar functions exist for other index; patterns, including dpd_dot13(), dpd_dot14(), and dpd_dot24().; double dpd_buf4_dot(dpdbuf4 *BufA, dpdbuf4; *BufB): This function evaluates a dot product between; two four-index buffers. That is, the function evaluates the sum of; the products of coresponding elements of the two buffers.; int dpd_buf4_dirprd(dpdbuf4 *BufA, dpdbuf4; *BufB): This function evaluates a direct product; between two four-index buffers and places the output in BufB.; That is, the function evaluates each of the products of coresponding; elements of the two buffers and places the result in the second; buffer.; int dpd_buf4_axpy(dpdbuf4 *BufX, dpdbuf4; *BufY, double alpha): This function evaluates the; standard ""axpy"" function, alpha * X(pq,rs) + Y(pq,rs) =; Y(pq,rs).; VI. Sorting Utilities. There also exist a number of utilities for sorting two- and; four-index quantities to various arrangements. int dpd_buf4_sort(dpdbuf4 *InBuf, int; outfilenum, enum indices index, int pqnum, int rsnum, char; *label): This function takes a given four-index; InBuf and reorders indices according to the index; variable, placing the result in outfilenum with pair values; pqnum and rsnum. The argument index is an; enumerated type with possible values:. enum indices {pqrs, pqsr, prqs, prsq, psqr, psrq,; 	 qprs, qpsr, qrps, qrsp, qspr, qsrp,; 	 rqps, rqsp, rpqs, rpsq, rsqp, rspq,; 	 sqrp, sqpr, srqp, srpq, spqr, sprq};. int dpd_buf4_copy(dpdbuf4 *InBuf, int; outfilenum, char *label): This function copies a given; buffer onto a new disk location identified by outfilenum and; label. T. Daniel; Crawford  / crawdad@vt.edu; Last modified: Mon Jun 18 17:33:08 2001 ; ",MatchSource.DOCS,doc/sphinxman/source/attic/libdpd.html,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html
Performance,cache,cachetype,"o indicate the compound row or column; indices. The compound indices may be computed based on a knowledge of; the permutational symmetry (or antisymmetry) of the index pairs; if; the given integrals are antisymmetric with respect to permutation of i; and j, for example, we may compute (i,j) from the individual indices; keeping i>j. Since we may partition the indices into any grouping; we desire, we may select any grouping of the indices to use as row and; column indices. For example, since i; × j; × a; = b. we could also construct a different supermatrix for these same; integrals, using (i,j,a) as the compound row index and b as the column; index. These same concepts apply to any multi-index quantity. III. Library Initialization . Before the library may be used, it must first be initialized; via the dpd_init() function. This function; requires the following information (see dpd.h for proper syntax):; int dpd_init(int dpd_num, int nirreps, long int memory, int cachetype, ; int *cachefiles, int **cachelist, struct dpd_file4_cache_entry *priority, ; int num_subspaces, int *orbspi, int *orbsym, ...);. dpd_num - An integer identifier for the current DPD; setup. Only two active DPD's are currently allowed, so this value; can be either 0 or 1.; nirreps - The number of irreducible representations in; the point group.; memory - The amount of available memory in bytes.; cachetype - The type of file cacheing desired (see below). If this; is 0, then a priority-based cache is used; if it's 1 then a; ""least-recently-used"" method is applied.; cachefiles - See below.; cachelist - See below.; priority - See below.; num_subspaces - The number of orbital subspaces to be; used. If the programmer uses only occupied and virtual spaces,; for example, this would be set to 2.; For each value of num_subspaces, the following; two arrays must also be provided:; orbspi - An irrep population array,; i.e., the number of orbitals per irrep in the current; subspace.; orbsym - An orbital symmetry ar",MatchSource.DOCS,doc/sphinxman/source/attic/libdpd.html,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html
Safety,avoid,avoids,"subspace data; provided to dpd_init(). For example, given only occupied and; virtual orbital subspaces (as would be the case for RHF and ROHF; reference wave functions), libdpd will automatically; construct the following twelve possible index pairings:. Pair #Left; SubspaceRight SubspacePermutational; SymmetryIndex Packing; 0occupiedoccupiedNoneAll p,q; 1occupiedoccupiedSymmetricp>q; 2occupiedoccupiedAntisymmetricp>q; 3occupiedoccupiedSymmetricp>=q; 4occupiedoccupiedAntisymmetricp>=q; 5virtualvirtualNoneAll p,q; 6virtualvirtualSymmetricp>q; 7virtualvirtualAntisymmetricp>q; 8virtualvirtualSymmetricp>=q; 9virtualvirtualAntisymmetricp>=q; 10occupiedvirtualNoneAll p,q; 11virtualoccupiedNoneAll p,q. Given the two-electron integral group <ij||ab> for example, we; may wish to store these integrals in a matrix with the compound row; index (i,j) and compound column index (a,b), as described earlier.; Furthermore, since these integrals have perumtational antiysmmetry; between indices i and j and between indices a and b, we may wish to; store the integrals in a manner which avoids redundancy. To do this,; we must choose from the above table the appropriate pair number for; the row and column compound indices which reflects the desired; permutational antisymmetry and index packing characteristics. For the; current example, we would choose pair #2 for the row index and pair #7; for the column index (so that the i=j and a=b terms, which are zero,; would be omitted from storage). On the other hand, if we wished to; store the ""normal"" Dirac notation integrals <ia|jk>, which; contain three occupied indices and do not have permutational symmetry,; we would choose pair #10 for the row index and pair #0 for the column; index. For UHF references, for example, where one must use four; orbital subspaces (alpha occupied, alpha virtual, beta occupied, and; bet virtual) libdpd will automatically construct the; following 32 possible index pairings:. Pair #Left; SubspaceRight SubspacePermutatio",MatchSource.DOCS,doc/sphinxman/source/attic/libdpd.html,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html
Security,access,access,"d as its argument.; IV. Basic Data Structures and Storage Hierarchy. Since one may need to store a given quantity in memory in a manner; different from that which is used on disk (e.g., one may need; to pack or unpack indices), the library distinguishes between on-disk; and in-memory storage of four-index quantities. For example, one; might choose to store <ij|ab> integrals on disk using an; (i,j)x(a,b) matrix with all values of i, j, a, and b (pair numbers 0; and 5 from the previous section). However, these can be automatically; antisymmetrized as they are read into memory and the resulting; <ij||ab> stored in a packed form with i>j and a>b. This; section described the basic storage hierarchy that automates this; process. For a general four-index quantity with dummy indices p, q, r, and s,; the storage of the data (whether on disk or in memory) is defined by; the dpdparams4 structure. Although the programmer should; almost always be able to avoid direct interaction with the; dpdparams4 structure, the library isn't perfectly; object-oriented and so access may be necessary in some cases. The; structure contains the following information:. typedef struct {; int nirreps; /* No. of irreps */; int pqnum; /* Pair number for the row indices */; int rsnum; /* Pair number for the column indices */; int *rowtot; /* Row dimension for each submatrix */; int *coltot; /* Column dimension for each submatrix */; int **rowidx; /* Row index lookup array */; int **colidx; /* Column index lookup array */; int ***roworb; /* Row index -> orbital index lookup array */; int ***colorb; /* Column index -> orbital index lookup array */; int *ppi; /* Number of p indices per irrep */; int *qpi; /* Number of q indices per irrep */; int *rpi; /* Number of r indices per irrep */; int *spi; /* Number of s indices per irrep */; int *poff; /* Orbital offset for p */; int *qoff; /* Orbital offset for q */; int *roff; /* Orbital offset for r */; int *soff; /* Orbital offset for s */; int *psym; /* Orbit",MatchSource.DOCS,doc/sphinxman/source/attic/libdpd.html,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html
Usability,simpl,simple,"i.e. keep; i>j), we might call dpd_buf4_init() in the following; manner:. dpd_buf4_init(Buffer, PSIFILE, 0, 2, 5, 0, 5, 1, ""<ij|ab> integrals"");. These argument indicate that while the integrals are stored as; (pqnum,rsnum) = (0, 5) on disk, they will be stored in memory as (2,; 5), with the row indices packed. In addition, the data will be; antisymmetrized as it is read into memory. Note, however, that the; libdpd routines do not make sure that your intialization; request makes sense (apart from some pre-processor defined debugging; in a few high-level functions), and it is quite possible to; erroneously pack indices for non-(anti)symmetric quantities. When the program is finished with a given buffer, the int dpd_buf4_close(dpdbuf4 *Buf); function is called to deallocate the associated memory. V. Contraction Evaluation. The library provides a number of high-level functions for evaluating a; variety of products among two- and four-index buffers. This section; outlines these functions and provides simple examples of their use.; int dpd_contract444(dpdbuf4 *X,; dpdbuf4 *Y, dpdbuf4 *Z, int target_X, int target_Y, double; alpha, double beta):; This function contracts two four-index buffers, X and; Y, into a target four-index buffer, Z, using the; general formula, alpha * X(pq,mn) * Y(mn,rs) = beta *; Z(pq,rs). The current version of this function requires that the; target (external) indices must both be contained in the bra (row) or; ket (column) of X and Y. The value of; target_X indicates that the target indices of X are; contained in its bra (0) or its ket (1); target_Y is defined; similarly. For example, we may use dpd_contract444() to evaluate the; following contraction found in the T2 amplitude equations; from coupled cluster theory:. tijab = tijcd <ab||cd>. (A summation over the repeated indices c and d is implied.) Assuming; that the <ab|cd> integrals exist on disk in a (pqnum,rsnum) =; (5,5) format and the right-hand-side T amplitudes exist on disk in a; (2,7) ",MatchSource.DOCS,doc/sphinxman/source/attic/libdpd.html,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html
Availability,checkpoint,checkpoint," ; LIBPSIO --- The PSI I/O Library. Programmer's Manual for LIBPSIO: The PSI I/O Library. T. Daniel Crawford ; 22 October 1998 ; Updated: 27 July 2006; crawdad@vt.edu. I. The structure and philosophy of the; library. Many I/O libraries for quantum chemistry packages (including those in; the old PSI2 code) expect the programmer to know the byte-by-byte; layout of the given binary file. Accordingly, the primary read; and write functions in such libraries require as an argument a global; bytewise file pointer to the beginning of the desired data. As a; result, when this pointer is defined to be an unsigned four-byte; integer (common on 32-bit computers), the total size of the direct; access file is limited to 4 GB (232 bytes). Furthermore,; in order to avoid code duplication, this I/O design requires that one; construct specialized libraries of functions (e.g., libfile30; in PSI2) for interaction with particularly complicated files such as a; checkpoint file. Even slight modification of the file layout can; require substantial changes to such libraries. This PSI3 I/O library, libpsio, is intended to overcome these; problems in two ways:. Each file makes use of its own table of contents (TOC); which contains file-global starting and ending addresses for each; data item.; Addresses to data items in the TOC are provided to the standard; read and write functions by the programmer as entry-relative; page/offset pairs, which are translated to file-global; addresses internally. Data items in the TOC are identified by keyword strings (e.g.,; ""Nuclear Repulsion Energy""). If the programmer wishes to; read or write an entire TOC entry, he/she is required to provide only; the TOC keyword and the entry size (in bytes) to obtain the data; the; entry's global starting address is supplied by the TOC. Furthermore,; it is possible to read pieces of TOC entries (say a single buffer of a; large list of two-electron integrals) by providing the appropriate TOC; keyword, a size, and a startin",MatchSource.DOCS,doc/sphinxman/source/attic/libpsio.html,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libpsio.html
Deployability,update,updated,"t of two-electron integrals) by providing the appropriate TOC; keyword, a size, and a starting address relative to the beginning of; the TOC entry. In short, the TOC design hides all information about; the global structure of the file from the programmer and; allows him/her to be concerned only with the structure of individual; entries.; II. The structure of libpsio; file. The first element in every libpsio file is a single; integer, toclen, indicating the number of entries in the; file. Each entry is stored together with its TOC ""header"", i.e., the; keyword-string and global-address information for the data. When the; file is opened, the first entry's TOC header is read from the file; into an in-core TOC list. If a second entry exists, the; ending-address data from the first entry is used to lseek(); to the next entry, whose header is read into the in-core TOC, and so; on. If a new entry is added or an existing entry is modified (e.g.,; extended), both the in-core TOC and the corresponding TOC header; on-disk are updated automatically. This prevents most cases of; corruption of the file in case of a program crash. Apart from the toclen integer, the file itself is viewed by; the library as a series of pages, each of which contains an identical; number of bytes. The global address of the beginning of a given entry; is stored on the TOC as a page/offset pair comprised of the starting; page and byte-offset on that page where the data reside.; The entry-relative page/offset addresses which the programmer; must provide work in exactly the same manner, but the 0/0 (PSIO_ZERO); position is taken to be the beginning of the desired entry rather than; the beginning of the file. II. The user interface. All of the functions needed to carry out basic I/O are described in; this subsection. Proper declarations of these routines are provided; by the header file psio.h. Note; that before any open/close functions may be called, the input parsing; library, libipv1 must be initialized s",MatchSource.DOCS,doc/sphinxman/source/attic/libpsio.html,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libpsio.html
Energy Efficiency,energy,energy,"/write functions; described above, the programmer also has a limited ability to directly; manipulate or examine the data in the TOC itself.; int psio_tocprint(ULI unit, FILE; *outfile): Prints the TOC of unit in a; readable form to outfile, including entry keywords and; starting/ending addresses.; int psio_toclen(ULI unit, FILE; *outfile): Returns the number of entries in the TOC; of unit.; int psio_tocdel(ULI unit, char; *key): Deletes the TOC entry corresponding to; key. NB: Do not use this function if you are not a PSI3; expert. This function only deletes the entry's reference from the TOC; itself and does not remove the corresponding data from the file.; Hence, it is possible to introduce data ""holes"" into the file.; IV. Some simple examples. The following code illustrates the basic use of the library, as well; as when/how the psio_init() and psio_done() functions; should be called in relation to initialization of libipv1. #include <stdio.h>; #include <libipv1/ip_lib.h>; #include <libpsio/psio.h>; #include <libciomr/libciomr.h>. std::string OutFileRMR;. int main(); {; int i, M, N;; double enuc, *some_data;; psio_address next; /* Special page/offset structure */. psi_start(&infile,&outfile,ψ_file_prefix,argc-1,argv+1,0);; ip_cwk_add(progid);. /* Initialize the I/O system */; psio_init(); psio_ipv1_config();. /* Open the file and write an energy */; psio_open(31, PSIO_OPEN_NEW);; enuc = 12.3456789; ; psio_write_entry(31, ""Nuclear Repulsion Energy"", (char *) &enuc,; sizeof(double));; psio_close(31,1);. /* Read M rows of an MxN matrix from a file */; some_data = init_matrix(M,N);. psio_open(91, PSIO_OPEN_OLD);; next = PSIO_ZERO;/* Note use of the special variable */; for(i=0; i < M; i++); psio_read(91, ""Some Coefficients"", (char *) (some_data + i*N),; N*sizeof(double), next, &next);; psio_close(91,0);. /* Close the I/O system */; psio_done();. ip_done();; }. char *gprgid(); {; char *prgid = ""CODE_NAME"";; return(prgid);; }. ; T. Daniel Crawford  /; crawdad@vt.edu. ; ",MatchSource.DOCS,doc/sphinxman/source/attic/libpsio.html,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libpsio.html
Integrability,interface,interface," TOC list. If a second entry exists, the; ending-address data from the first entry is used to lseek(); to the next entry, whose header is read into the in-core TOC, and so; on. If a new entry is added or an existing entry is modified (e.g.,; extended), both the in-core TOC and the corresponding TOC header; on-disk are updated automatically. This prevents most cases of; corruption of the file in case of a program crash. Apart from the toclen integer, the file itself is viewed by; the library as a series of pages, each of which contains an identical; number of bytes. The global address of the beginning of a given entry; is stored on the TOC as a page/offset pair comprised of the starting; page and byte-offset on that page where the data reside.; The entry-relative page/offset addresses which the programmer; must provide work in exactly the same manner, but the 0/0 (PSIO_ZERO); position is taken to be the beginning of the desired entry rather than; the beginning of the file. II. The user interface. All of the functions needed to carry out basic I/O are described in; this subsection. Proper declarations of these routines are provided; by the header file psio.h. Note; that before any open/close functions may be called, the input parsing; library, libipv1 must be initialized so that the necessary; file striping information may be read from user input. (See the; PSI3 programmer's manual for details on the current version of the; input parser.) Also note that ULI is used as an abbreviation; for unsigned long int in the remainder of this manual.; int psio_init(void): Before any; files may be opened or the basic read/write functions of; libpsio may be used, the global data needed by the library; functions must be initialized using this function.; int psio_ipv1_config(void):; If the library is operator within a PSI module, the library can find; its configuration data in the input file or in the .psirc file when this; function is called. Therefore it should be called immediatel",MatchSource.DOCS,doc/sphinxman/source/attic/libpsio.html,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libpsio.html
Modifiability,extend,extended,"t of two-electron integrals) by providing the appropriate TOC; keyword, a size, and a starting address relative to the beginning of; the TOC entry. In short, the TOC design hides all information about; the global structure of the file from the programmer and; allows him/her to be concerned only with the structure of individual; entries.; II. The structure of libpsio; file. The first element in every libpsio file is a single; integer, toclen, indicating the number of entries in the; file. Each entry is stored together with its TOC ""header"", i.e., the; keyword-string and global-address information for the data. When the; file is opened, the first entry's TOC header is read from the file; into an in-core TOC list. If a second entry exists, the; ending-address data from the first entry is used to lseek(); to the next entry, whose header is read into the in-core TOC, and so; on. If a new entry is added or an existing entry is modified (e.g.,; extended), both the in-core TOC and the corresponding TOC header; on-disk are updated automatically. This prevents most cases of; corruption of the file in case of a program crash. Apart from the toclen integer, the file itself is viewed by; the library as a series of pages, each of which contains an identical; number of bytes. The global address of the beginning of a given entry; is stored on the TOC as a page/offset pair comprised of the starting; page and byte-offset on that page where the data reside.; The entry-relative page/offset addresses which the programmer; must provide work in exactly the same manner, but the 0/0 (PSIO_ZERO); position is taken to be the beginning of the desired entry rather than; the beginning of the file. II. The user interface. All of the functions needed to carry out basic I/O are described in; this subsection. Proper declarations of these routines are provided; by the header file psio.h. Note; that before any open/close functions may be called, the input parsing; library, libipv1 must be initialized s",MatchSource.DOCS,doc/sphinxman/source/attic/libpsio.html,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libpsio.html
Safety,avoid,avoid," ; LIBPSIO --- The PSI I/O Library. Programmer's Manual for LIBPSIO: The PSI I/O Library. T. Daniel Crawford ; 22 October 1998 ; Updated: 27 July 2006; crawdad@vt.edu. I. The structure and philosophy of the; library. Many I/O libraries for quantum chemistry packages (including those in; the old PSI2 code) expect the programmer to know the byte-by-byte; layout of the given binary file. Accordingly, the primary read; and write functions in such libraries require as an argument a global; bytewise file pointer to the beginning of the desired data. As a; result, when this pointer is defined to be an unsigned four-byte; integer (common on 32-bit computers), the total size of the direct; access file is limited to 4 GB (232 bytes). Furthermore,; in order to avoid code duplication, this I/O design requires that one; construct specialized libraries of functions (e.g., libfile30; in PSI2) for interaction with particularly complicated files such as a; checkpoint file. Even slight modification of the file layout can; require substantial changes to such libraries. This PSI3 I/O library, libpsio, is intended to overcome these; problems in two ways:. Each file makes use of its own table of contents (TOC); which contains file-global starting and ending addresses for each; data item.; Addresses to data items in the TOC are provided to the standard; read and write functions by the programmer as entry-relative; page/offset pairs, which are translated to file-global; addresses internally. Data items in the TOC are identified by keyword strings (e.g.,; ""Nuclear Repulsion Energy""). If the programmer wishes to; read or write an entire TOC entry, he/she is required to provide only; the TOC keyword and the entry size (in bytes) to obtain the data; the; entry's global starting address is supplied by the TOC. Furthermore,; it is possible to read pieces of TOC entries (say a single buffer of a; large list of two-electron integrals) by providing the appropriate TOC; keyword, a size, and a startin",MatchSource.DOCS,doc/sphinxman/source/attic/libpsio.html,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libpsio.html
Security,access,access," ; LIBPSIO --- The PSI I/O Library. Programmer's Manual for LIBPSIO: The PSI I/O Library. T. Daniel Crawford ; 22 October 1998 ; Updated: 27 July 2006; crawdad@vt.edu. I. The structure and philosophy of the; library. Many I/O libraries for quantum chemistry packages (including those in; the old PSI2 code) expect the programmer to know the byte-by-byte; layout of the given binary file. Accordingly, the primary read; and write functions in such libraries require as an argument a global; bytewise file pointer to the beginning of the desired data. As a; result, when this pointer is defined to be an unsigned four-byte; integer (common on 32-bit computers), the total size of the direct; access file is limited to 4 GB (232 bytes). Furthermore,; in order to avoid code duplication, this I/O design requires that one; construct specialized libraries of functions (e.g., libfile30; in PSI2) for interaction with particularly complicated files such as a; checkpoint file. Even slight modification of the file layout can; require substantial changes to such libraries. This PSI3 I/O library, libpsio, is intended to overcome these; problems in two ways:. Each file makes use of its own table of contents (TOC); which contains file-global starting and ending addresses for each; data item.; Addresses to data items in the TOC are provided to the standard; read and write functions by the programmer as entry-relative; page/offset pairs, which are translated to file-global; addresses internally. Data items in the TOC are identified by keyword strings (e.g.,; ""Nuclear Repulsion Energy""). If the programmer wishes to; read or write an entire TOC entry, he/she is required to provide only; the TOC keyword and the entry size (in bytes) to obtain the data; the; entry's global starting address is supplied by the TOC. Furthermore,; it is possible to read pieces of TOC entries (say a single buffer of a; large list of two-electron integrals) by providing the appropriate TOC; keyword, a size, and a startin",MatchSource.DOCS,doc/sphinxman/source/attic/libpsio.html,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libpsio.html
Usability,simpl,simple,"s, defined by:. typedef struct {; ULI page;; ULI offset;; } psio_address;. The PSIO_ZERO defined as a global variable provides a; convenient input for the 0/0 page/offset.; III. Manipulating the table of contents. In addition, to the basic open/close/read/write functions; described above, the programmer also has a limited ability to directly; manipulate or examine the data in the TOC itself.; int psio_tocprint(ULI unit, FILE; *outfile): Prints the TOC of unit in a; readable form to outfile, including entry keywords and; starting/ending addresses.; int psio_toclen(ULI unit, FILE; *outfile): Returns the number of entries in the TOC; of unit.; int psio_tocdel(ULI unit, char; *key): Deletes the TOC entry corresponding to; key. NB: Do not use this function if you are not a PSI3; expert. This function only deletes the entry's reference from the TOC; itself and does not remove the corresponding data from the file.; Hence, it is possible to introduce data ""holes"" into the file.; IV. Some simple examples. The following code illustrates the basic use of the library, as well; as when/how the psio_init() and psio_done() functions; should be called in relation to initialization of libipv1. #include <stdio.h>; #include <libipv1/ip_lib.h>; #include <libpsio/psio.h>; #include <libciomr/libciomr.h>. std::string OutFileRMR;. int main(); {; int i, M, N;; double enuc, *some_data;; psio_address next; /* Special page/offset structure */. psi_start(&infile,&outfile,ψ_file_prefix,argc-1,argv+1,0);; ip_cwk_add(progid);. /* Initialize the I/O system */; psio_init(); psio_ipv1_config();. /* Open the file and write an energy */; psio_open(31, PSIO_OPEN_NEW);; enuc = 12.3456789; ; psio_write_entry(31, ""Nuclear Repulsion Energy"", (char *) &enuc,; sizeof(double));; psio_close(31,1);. /* Read M rows of an MxN matrix from a file */; some_data = init_matrix(M,N);. psio_open(91, PSIO_OPEN_OLD);; next = PSIO_ZERO;/* Note use of the special variable */; for(i=0; i < M; i++); psio_read(91, ""Some Coeffic",MatchSource.DOCS,doc/sphinxman/source/attic/libpsio.html,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libpsio.html
