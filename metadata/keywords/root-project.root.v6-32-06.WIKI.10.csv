quality_attribute,keyword,matched_word,sentence,source,filename,author,repo,version,wiki,url
Energy Efficiency,charge,charged,"dxy*Electron_dxy + Electron_dz*Electron_dz)"");; auto df_el_sip3d = df_el_ip3d.Define(""Electron_sip3d_el"",; ""Electron_ip3d_el/sqrt(Electron_dxyErr*Electron_dxyErr + ""; ""Electron_dzErr*Electron_dzErr)"");; auto df_el_track = df_el_sip3d.Filter(""All(Electron_sip3d_el<4) && All(abs(Electron_dxy)<0.5) && All(abs(Electron_dz)<1.0)"",; ""Electron track close to primary vertex with small uncertainty"");; auto df_mu_ip3d = df_el_track.Define(""Muon_ip3d_mu"", ""sqrt(Muon_dxy*Muon_dxy + Muon_dz*Muon_dz)"");; auto df_mu_sip3d = df_mu_ip3d.Define(""Muon_sip3d_mu"",; ""Muon_ip3d_mu/sqrt(Muon_dxyErr*Muon_dxyErr + Muon_dzErr*Muon_dzErr)"");; auto df_mu_track = df_mu_sip3d.Filter(""All(Muon_sip3d_mu<4) && All(abs(Muon_dxy)<0.5) && All(abs(Muon_dz)<1.0)"",; ""Muon track close to primary vertex with small uncertainty"");; auto df_2p2n = df_mu_track.Filter(""Sum(Electron_charge)==0 && Sum(Muon_charge)==0"",; ""Two opposite charged electron and muon pairs"");; return df_2p2n;; }; ; // Reconstruct two Z candidates from four leptons of the same kind; RVec<RVec<size_t>> reco_zz_to_4l(cRVecF pt, cRVecF eta, cRVecF phi, cRVecF mass, const ROOT::RVecI & charge); {; RVec<RVec<size_t>> idx(2);; idx[0].reserve(2); idx[1].reserve(2);; ; // Find first lepton pair with invariant mass closest to Z mass; auto idx_cmb = Combinations(pt, 2);; auto best_mass = -1;; size_t best_i1 = 0; size_t best_i2 = 0;; for (size_t i = 0; i < idx_cmb[0].size(); i++) {; const auto i1 = idx_cmb[0][i];; const auto i2 = idx_cmb[1][i];; if (charge[i1] != charge[i2]) {; ROOT::Math::PtEtaPhiMVector p1(pt[i1], eta[i1], phi[i1], mass[i1]);; ROOT::Math::PtEtaPhiMVector p2(pt[i2], eta[i2], phi[i2], mass[i2]);; const auto this_mass = (p1 + p2).M();; if (std::abs(z_mass - this_mass) < std::abs(z_mass - best_mass)) {; best_mass = this_mass;; best_i1 = i1;; best_i2 = i2;; }; }; }; idx[0].emplace_back(best_i1);; idx[0].emplace_back(best_i2);; ; // Reconstruct second Z from remaining lepton pair; for (size_t i = 0; i < 4; i++) {; if (i != best_i1 && i !",MatchSource.WIKI,doc/master/df103__NanoAODHiggsAnalysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8C.html
Integrability,integrat,integrated,"ulti-threading; ROOT::EnableImplicitMT();; ; // In fast mode, take samples from */cms_opendata_2012_nanoaod_skimmed/*, which has; // the preselections from the selection_* functions already applied.; std::string path = ""root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/"";; if (run_fast) path = ""root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod_skimmed/"";; ; // Create dataframes for signal, background and data samples; ; // Signal: Higgs -> 4 leptons; ROOT::RDataFrame df_sig_4l(""Events"", path + ""SMHiggsToZZTo4L.root"");; ; // Background: ZZ -> 4 leptons; // Note that additional background processes from the original paper with minor contribution were left out for this; // tutorial.; ROOT::RDataFrame df_bkg_4mu(""Events"", path + ""ZZTo4mu.root"");; ROOT::RDataFrame df_bkg_4el(""Events"", path + ""ZZTo4e.root"");; ROOT::RDataFrame df_bkg_2el2mu(""Events"", path + ""ZZTo2e2mu.root"");; ; // CMS data taken in 2012 (11.6 fb^-1 integrated luminosity); ROOT::RDataFrame df_data_doublemu(; ""Events"", {path + ""Run2012B_DoubleMuParked.root"", path + ""Run2012C_DoubleMuParked.root""});; ROOT::RDataFrame df_data_doubleel(; ""Events"", {path + ""Run2012B_DoubleElectron.root"", path + ""Run2012C_DoubleElectron.root""});; ; // Reconstruct Higgs to 4 muons; auto df_sig_4mu_reco = reco_higgs_to_4mu(df_sig_4l);; const auto luminosity = 11580.0; // Integrated luminosity of the data samples; const auto xsec_SMHiggsToZZTo4L = 0.0065; // H->4l: Standard Model cross-section; const auto nevt_SMHiggsToZZTo4L = 299973.0; // H->4l: Number of simulated events; const auto nbins = 36; // Number of bins for the invariant mass spectrum; auto df_h_sig_4mu = df_sig_4mu_reco; .Define(""weight"", [&] { return luminosity * xsec_SMHiggsToZZTo4L / nevt_SMHiggsToZZTo4L; }); .Histo1D({""h_sig_4mu"", """", nbins, 70, 180}, ""H_mass"", ""weight"");; ; const auto scale_ZZTo4l = 1.386; // ZZ->4mu: Scale factor for ZZ to four leptons; const auto xsec_ZZTo4mu = 0.077; // ZZ->4mu: Standard Model cross-section; const a",MatchSource.WIKI,doc/master/df103__NanoAODHiggsAnalysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8C.html
Performance,perform,performed,"g...; Searching...; No Matches. df103_NanoAODHiggsAnalysis.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; An example of complex analysis with RDataFrame: reconstructing the Higgs boson. ; This tutorial is a simplified but yet complex example of an analysis reconstructing the Higgs boson decaying to two Z bosons from events with four leptons. The data and simulated events are taken from CERN OpenData representing a subset of the data recorded in 2012 with the CMS detector at the LHC. The tutorials follows the Higgs to four leptons analysis published on CERN Open Data portal (10.7483/OPENDATA.CMS.JKB8.RR42). The resulting plots show the invariant mass of the selected four lepton systems in different decay modes (four muons, four electrons and two of each kind) and in a combined plot indicating the decay of the Higgs boson with a mass of about 125 GeV.; The following steps are performed for each sample with data and simulated events in order to reconstruct the Higgs boson from the selected muons and electrons:; Select interesting events with multiple cuts on event properties, e.g., number of leptons, kinematics of the leptons and quality of the tracks.; Reconstruct two Z bosons of which only one on the mass shell from the selected events and apply additional cuts on the reconstructed objects.; Reconstruct the Higgs boson from the remaining Z boson candidates and calculate its invariant mass. The tutorial has the fast mode enabled by default, which reads the data from already skimmed datasets with a total size of only 51MB. If the fast mode is disabled, the tutorial runs over the full dataset with a size of 12GB. ; #include ""ROOT/RDataFrame.hxx""; #include ""ROOT/RDFHelpers.hxx""; #include ""ROOT/RVec.hxx""; #include ""ROOT/RDF/RInterface.hxx""; #include ""TCanvas.h""; #include ""TH1D.h""; #include ""TLatex.h""; #include ""TLegend.h""; #include <Math/Vector4Dfwd.h>; #include <Math/GenVector/LorentzVector.h>; #include <Math/GenVector/PtEtaPhiM4D.h>; #include ""TSt",MatchSource.WIKI,doc/master/df103__NanoAODHiggsAnalysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8C.html
Safety,detect,detector,". ROOT: tutorials/dataframe/df103_NanoAODHiggsAnalysis.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df103_NanoAODHiggsAnalysis.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; An example of complex analysis with RDataFrame: reconstructing the Higgs boson. ; This tutorial is a simplified but yet complex example of an analysis reconstructing the Higgs boson decaying to two Z bosons from events with four leptons. The data and simulated events are taken from CERN OpenData representing a subset of the data recorded in 2012 with the CMS detector at the LHC. The tutorials follows the Higgs to four leptons analysis published on CERN Open Data portal (10.7483/OPENDATA.CMS.JKB8.RR42). The resulting plots show the invariant mass of the selected four lepton systems in different decay modes (four muons, four electrons and two of each kind) and in a combined plot indicating the decay of the Higgs boson with a mass of about 125 GeV.; The following steps are performed for each sample with data and simulated events in order to reconstruct the Higgs boson from the selected muons and electrons:; Select interesting events with multiple cuts on event properties, e.g., number of leptons, kinematics of the leptons and quality of the tracks.; Reconstruct two Z bosons of which only one on the mass shell from the selected events and apply additional cuts on the reconstructed objects.; Reconstruct the Higgs boson from the remaining Z boson candidates and calculate its invariant mass. The tutorial has the fast mode enabled by default, which reads the data from already skimmed datasets with a total size of only 51MB. If the fast mode is disabled, the tutorial runs over the full dataset with a size of 12GB. ; #include ""ROOT/RDataFrame.hxx""; #include ""ROOT/RDFHelpers.hxx""; #include ""ROOT/RVec.hxx""; #include ""ROOT/RDF/RInterface.hxx""; #include ""TCanvas.h""; #include ""TH1D.h""; #include ""TLatex.h""; #include ""TLegend.h""; #inclu",MatchSource.WIKI,doc/master/df103__NanoAODHiggsAnalysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8C.html
Usability,simpl,simplified,". ROOT: tutorials/dataframe/df103_NanoAODHiggsAnalysis.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df103_NanoAODHiggsAnalysis.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; An example of complex analysis with RDataFrame: reconstructing the Higgs boson. ; This tutorial is a simplified but yet complex example of an analysis reconstructing the Higgs boson decaying to two Z bosons from events with four leptons. The data and simulated events are taken from CERN OpenData representing a subset of the data recorded in 2012 with the CMS detector at the LHC. The tutorials follows the Higgs to four leptons analysis published on CERN Open Data portal (10.7483/OPENDATA.CMS.JKB8.RR42). The resulting plots show the invariant mass of the selected four lepton systems in different decay modes (four muons, four electrons and two of each kind) and in a combined plot indicating the decay of the Higgs boson with a mass of about 125 GeV.; The following steps are performed for each sample with data and simulated events in order to reconstruct the Higgs boson from the selected muons and electrons:; Select interesting events with multiple cuts on event properties, e.g., number of leptons, kinematics of the leptons and quality of the tracks.; Reconstruct two Z bosons of which only one on the mass shell from the selected events and apply additional cuts on the reconstructed objects.; Reconstruct the Higgs boson from the remaining Z boson candidates and calculate its invariant mass. The tutorial has the fast mode enabled by default, which reads the data from already skimmed datasets with a total size of only 51MB. If the fast mode is disabled, the tutorial runs over the full dataset with a size of 12GB. ; #include ""ROOT/RDataFrame.hxx""; #include ""ROOT/RDFHelpers.hxx""; #include ""ROOT/RVec.hxx""; #include ""ROOT/RDF/RInterface.hxx""; #include ""TCanvas.h""; #include ""TH1D.h""; #include ""TLatex.h""; #include ""TLegend.h""; #inclu",MatchSource.WIKI,doc/master/df103__NanoAODHiggsAnalysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8C.html
Availability,avail,available,"el(df_data_doubleel); ; df_h_data_4el = df_data_4el_reco.Define(""weight"", ""1.0"")\; .Histo1D((""h_data_4el"", """", nbins, 70, 180), ""H_mass"", ""weight""); ; # Reconstruct Higgs to 2 electrons and 2 muons; df_sig_2el2mu_reco = reco_higgs_to_2el2mu(df_sig_4l); ; df_h_sig_2el2mu = df_sig_2el2mu_reco.Define(""weight"", ""{}"".format(weight_sig_2el2mu))\; .Histo1D((""h_sig_2el2mu"", """", nbins, 70, 180), ""H_mass"", ""weight""); ; df_bkg_2el2mu_reco = reco_higgs_to_2el2mu(df_bkg_2el2mu); ; df_h_bkg_2el2mu = df_bkg_2el2mu_reco.Define(""weight"", ""{}"".format(weight_bkg_2el2mu))\; .Histo1D((""h_bkg_2el2mu"", """", nbins, 70, 180), ""H_mass"", ""weight""); ; df_data_2el2mu_reco = reco_higgs_to_2el2mu(df_data_doublemu); ; df_h_data_2el2mu = df_data_2el2mu_reco.Define(""weight"", ""1.0"")\; .Histo1D((""h_data_2el2mu_doublemu"", """", nbins, 70, 180), ""H_mass"", ""weight""); ; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.; ROOT.RDF.RunGraphs([df_h_sig_4mu, df_h_bkg_4mu, df_h_data_4mu,; df_h_sig_4el, df_h_bkg_4el, df_h_data_4el,; df_h_sig_2el2mu, df_h_bkg_2el2mu, df_h_data_2el2mu]); ; # Get histograms (does not rerun the event loop); signal_4mu = df_h_sig_4mu.GetValue(); background_4mu = df_h_bkg_4mu.GetValue(); data_4mu = df_h_data_4mu.GetValue(); ; signal_4el = df_h_sig_4el.GetValue(); background_4el = df_h_bkg_4el.GetValue(); data_4el = df_h_data_4el.GetValue(); ; signal_2el2mu = df_h_sig_2el2mu.GetValue(); background_2el2mu = df_h_bkg_2el2mu.GetValue(); data_2el2mu = df_h_data_2el2mu.GetValue(); ; # Make plots; plot(signal_4mu, background_4mu, data_4mu, ""m_{4#mu} (GeV)"", ""higgs_4mu.pdf""); plot(signal_4el, background_4el, data_4el, ""m_{4e} (GeV)"", ""higgs_4el.pdf""); plot(signal_2el2mu, background_2el2mu, data_2el2mu, ""m_{2e2#mu} (GeV)"", ""higgs_2el2mu.pdf""); ; # Combined plots; # If this was ",MatchSource.WIKI,doc/master/df103__NanoAODHiggsAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8py.html
Deployability,integrat,integrated,"ggsAnalysis():; # In fast mode, take samples from */cms_opendata_2012_nanoaod_skimmed/*, which has; # the preselections from the selection_* functions already applied.; path = ""root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/""; run_fast = True # Run on skimmed data, set to False to run on full dataset; if run_fast: path = ""root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod_skimmed/""; ; # Create dataframes for signal, background and data samples; ; # Signal: Higgs -> 4 leptons; df_sig_4l = ROOT.RDataFrame(""Events"", path + ""SMHiggsToZZTo4L.root""); ; # Background: ZZ -> 4 leptons; # Note that additional background processes from the original paper; # with minor contribution were left out for this; # tutorial.; df_bkg_4mu = ROOT.RDataFrame(""Events"", path + ""ZZTo4mu.root""); df_bkg_4el = ROOT.RDataFrame(""Events"", path + ""ZZTo4e.root""); df_bkg_2el2mu = ROOT.RDataFrame(""Events"", path + ""ZZTo2e2mu.root""); ; # CMS data taken in 2012 (11.6 fb^-1 integrated luminosity); df_data_doublemu = ROOT.RDataFrame(""Events"", (path + f for f in [""Run2012B_DoubleMuParked.root"", ""Run2012C_DoubleMuParked.root""])); df_data_doubleel = ROOT.RDataFrame(""Events"", (path + f for f in [""Run2012B_DoubleElectron.root"", ""Run2012C_DoubleElectron.root""])); ; # Number of bins for all histograms; nbins = 36; ; # Weights; luminosity = 11580.0 # Integrated luminosity of the data samples; ; xsec_ZZTo4mu = 0.077 # ZZ->4mu: Standard Model cross-section; nevt_ZZTo4mu = 1499064.0 # ZZ->4mu: Number of simulated events; ; xsec_ZZTo4el = 0.077 # ZZ->4el: Standard Model cross-section; nevt_ZZTo4el = 1499093.0 # ZZ->4el: Number of simulated events; ; xsec_ZZTo2el2mu = 0.18 # ZZ->2el2mu: Standard Model cross-section; nevt_ZZTo2el2mu = 1497445.0 # ZZ->2el2mu: Number of simulated events; ; xsec_SMHiggsToZZTo4L = 0.0065 # H->4l: Standard Model cross-section; nevt_SMHiggsToZZTo4L = 299973.0 # H->4l: Number of simulated events; scale_ZZTo4l = 1.386 # ZZ->4l: Scale factor for ZZ to four leptons;",MatchSource.WIKI,doc/master/df103__NanoAODHiggsAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8py.html
Energy Efficiency,charge,charged," = df_iso.Define(""Electron_ip3d_el"", ""sqrt(Electron_dxy*Electron_dxy + Electron_dz*Electron_dz)""); df_el_sip3d = df_el_ip3d.Define(""Electron_sip3d_el"",; ""Electron_ip3d_el/sqrt(Electron_dxyErr*Electron_dxyErr + ""; ""Electron_dzErr*Electron_dzErr)""); df_el_track = df_el_sip3d.Filter(""All(Electron_sip3d_el<4) && All(abs(Electron_dxy)<0.5) &&""; "" All(abs(Electron_dz)<1.0)"",; ""Electron track close to primary vertex with small uncertainty""); df_mu_ip3d = df_el_track.Define(""Muon_ip3d_mu"", ""sqrt(Muon_dxy*Muon_dxy + Muon_dz*Muon_dz)""); ; df_mu_sip3d = df_mu_ip3d.Define(""Muon_sip3d_mu"",; ""Muon_ip3d_mu/sqrt(Muon_dxyErr*Muon_dxyErr + Muon_dzErr*Muon_dzErr)""); df_mu_track = df_mu_sip3d.Filter(""All(Muon_sip3d_mu<4) && All(abs(Muon_dxy)<0.5) && All(abs(Muon_dz)<1.0)"",; ""Muon track close to primary vertex with small uncertainty""); df_2p2n = df_mu_track.Filter(""Sum(Electron_charge)==0 && Sum(Muon_charge)==0"",; ""Two opposite charged electron and muon pairs""); ; return df_2p2n; ; ; def reco_higgs_to_4mu(df):; """"""Reconstruct Higgs from four muons""""""; # Filter interesting events; df_base = selection_4mu(df); ; # Reconstruct Z systems; df_z_idx = df_base.Define(""Z_idx"", ""reco_zz_to_4l(Muon_pt, Muon_eta, Muon_phi, Muon_mass, Muon_charge)""); ; # Cut on distance between muons building Z systems; df_z_dr = df_z_idx.Filter(""filter_z_dr(Z_idx, Muon_eta, Muon_phi)"", ""Delta R separation of muons building Z system""); ; # Compute masses of Z systems; df_z_mass = df_z_dr.Define(""Z_mass"", ""compute_z_masses_4l(Z_idx, Muon_pt, Muon_eta, Muon_phi, Muon_mass)""); ; # Cut on mass of Z candidates; df_z_cut = filter_z_candidates(df_z_mass); ; # Reconstruct H mass; df_h_mass = df_z_cut.Define(""H_mass"", ""compute_higgs_mass_4l(Z_idx, Muon_pt, Muon_eta, Muon_phi, Muon_mass)""); ; return df_h_mass; ; ; def selection_4mu(df):; """"""Select interesting events with four muons""""""; df_ge4m = df.Filter(""nMuon>=4"", ""At least four muons""); ; df_iso = df_ge4m.Filter(""All(abs(Muon_pfRelIso04_all)<0.40)"", ""Require good isolati",MatchSource.WIKI,doc/master/df103__NanoAODHiggsAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8py.html
Integrability,integrat,integrated,"ggsAnalysis():; # In fast mode, take samples from */cms_opendata_2012_nanoaod_skimmed/*, which has; # the preselections from the selection_* functions already applied.; path = ""root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/""; run_fast = True # Run on skimmed data, set to False to run on full dataset; if run_fast: path = ""root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod_skimmed/""; ; # Create dataframes for signal, background and data samples; ; # Signal: Higgs -> 4 leptons; df_sig_4l = ROOT.RDataFrame(""Events"", path + ""SMHiggsToZZTo4L.root""); ; # Background: ZZ -> 4 leptons; # Note that additional background processes from the original paper; # with minor contribution were left out for this; # tutorial.; df_bkg_4mu = ROOT.RDataFrame(""Events"", path + ""ZZTo4mu.root""); df_bkg_4el = ROOT.RDataFrame(""Events"", path + ""ZZTo4e.root""); df_bkg_2el2mu = ROOT.RDataFrame(""Events"", path + ""ZZTo2e2mu.root""); ; # CMS data taken in 2012 (11.6 fb^-1 integrated luminosity); df_data_doublemu = ROOT.RDataFrame(""Events"", (path + f for f in [""Run2012B_DoubleMuParked.root"", ""Run2012C_DoubleMuParked.root""])); df_data_doubleel = ROOT.RDataFrame(""Events"", (path + f for f in [""Run2012B_DoubleElectron.root"", ""Run2012C_DoubleElectron.root""])); ; # Number of bins for all histograms; nbins = 36; ; # Weights; luminosity = 11580.0 # Integrated luminosity of the data samples; ; xsec_ZZTo4mu = 0.077 # ZZ->4mu: Standard Model cross-section; nevt_ZZTo4mu = 1499064.0 # ZZ->4mu: Number of simulated events; ; xsec_ZZTo4el = 0.077 # ZZ->4el: Standard Model cross-section; nevt_ZZTo4el = 1499093.0 # ZZ->4el: Number of simulated events; ; xsec_ZZTo2el2mu = 0.18 # ZZ->2el2mu: Standard Model cross-section; nevt_ZZTo2el2mu = 1497445.0 # ZZ->2el2mu: Number of simulated events; ; xsec_SMHiggsToZZTo4L = 0.0065 # H->4l: Standard Model cross-section; nevt_SMHiggsToZZTo4L = 299973.0 # H->4l: Number of simulated events; scale_ZZTo4l = 1.386 # ZZ->4l: Scale factor for ZZ to four leptons;",MatchSource.WIKI,doc/master/df103__NanoAODHiggsAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8py.html
Performance,perform,performed,"g...; No Matches. Namespaces ; df103_NanoAODHiggsAnalysis.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; An example of complex analysis with RDataFrame: reconstructing the Higgs boson. ; This tutorial is a simplified but yet complex example of an analysis reconstructing the Higgs boson decaying to two Z bosons from events with four leptons. The data and simulated events are taken from CERN OpenData representing a subset of the data recorded in 2012 with the CMS detector at the LHC. The tutorials follows the Higgs to four leptons analysis published on CERN Open Data portal (10.7483/OPENDATA.CMS.JKB8.RR42). The resulting plots show the invariant mass of the selected four lepton systems in different decay modes (four muons, four electrons and two of each kind) and in a combined plot indicating the decay of the Higgs boson with a mass of about 125 GeV.; The following steps are performed for each sample with data and simulated events in order to reconstruct the Higgs boson from the selected muons and electrons:; Select interesting events with multiple cuts on event properties, e.g., number of leptons, kinematics of the leptons and quality of the tracks.; Reconstruct two Z bosons of which only one on the mass shell from the selected events and apply additional cuts on the reconstructed objects.; Reconstruct the Higgs boson from the remaining Z boson candidates and calculate its invariant mass. Another aim of this version of the tutorial is to show a way to blend C++ and Python code. All the functions that make computations on data to define new columns or filter existing ones in a precise way, better suited to be written in C++, have been moved to a header that is then declared to the ROOT C++ interpreter. The functions that instead create nodes of the computational graph (e.g. Filter, Define) remain inside the main Python script.; The tutorial has the fast mode enabled by default, which reads the data from already skimmed datasets with a total siz",MatchSource.WIKI,doc/master/df103__NanoAODHiggsAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8py.html
Safety,detect,detector,". ROOT: tutorials/dataframe/df103_NanoAODHiggsAnalysis.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df103_NanoAODHiggsAnalysis.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; An example of complex analysis with RDataFrame: reconstructing the Higgs boson. ; This tutorial is a simplified but yet complex example of an analysis reconstructing the Higgs boson decaying to two Z bosons from events with four leptons. The data and simulated events are taken from CERN OpenData representing a subset of the data recorded in 2012 with the CMS detector at the LHC. The tutorials follows the Higgs to four leptons analysis published on CERN Open Data portal (10.7483/OPENDATA.CMS.JKB8.RR42). The resulting plots show the invariant mass of the selected four lepton systems in different decay modes (four muons, four electrons and two of each kind) and in a combined plot indicating the decay of the Higgs boson with a mass of about 125 GeV.; The following steps are performed for each sample with data and simulated events in order to reconstruct the Higgs boson from the selected muons and electrons:; Select interesting events with multiple cuts on event properties, e.g., number of leptons, kinematics of the leptons and quality of the tracks.; Reconstruct two Z bosons of which only one on the mass shell from the selected events and apply additional cuts on the reconstructed objects.; Reconstruct the Higgs boson from the remaining Z boson candidates and calculate its invariant mass. Another aim of this version of the tutorial is to show a way to blend C++ and Python code. All the functions that make computations on data to define new columns or filter existing ones in a precise way, better suited to be written in C++, have been moved to a header that is then declared to the ROOT C++ interpreter. The functions that instead create nodes of the computational graph (e.g. Filter, Define) remain inside the ma",MatchSource.WIKI,doc/master/df103__NanoAODHiggsAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8py.html
Usability,simpl,simplified,". ROOT: tutorials/dataframe/df103_NanoAODHiggsAnalysis.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df103_NanoAODHiggsAnalysis.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; An example of complex analysis with RDataFrame: reconstructing the Higgs boson. ; This tutorial is a simplified but yet complex example of an analysis reconstructing the Higgs boson decaying to two Z bosons from events with four leptons. The data and simulated events are taken from CERN OpenData representing a subset of the data recorded in 2012 with the CMS detector at the LHC. The tutorials follows the Higgs to four leptons analysis published on CERN Open Data portal (10.7483/OPENDATA.CMS.JKB8.RR42). The resulting plots show the invariant mass of the selected four lepton systems in different decay modes (four muons, four electrons and two of each kind) and in a combined plot indicating the decay of the Higgs boson with a mass of about 125 GeV.; The following steps are performed for each sample with data and simulated events in order to reconstruct the Higgs boson from the selected muons and electrons:; Select interesting events with multiple cuts on event properties, e.g., number of leptons, kinematics of the leptons and quality of the tracks.; Reconstruct two Z bosons of which only one on the mass shell from the selected events and apply additional cuts on the reconstructed objects.; Reconstruct the Higgs boson from the remaining Z boson candidates and calculate its invariant mass. Another aim of this version of the tutorial is to show a way to blend C++ and Python code. All the functions that make computations on data to define new columns or filter existing ones in a precise way, better suited to be written in C++, have been moved to a header that is then declared to the ROOT C++ interpreter. The functions that instead create nodes of the computational graph (e.g. Filter, Define) remain inside the ma",MatchSource.WIKI,doc/master/df103__NanoAODHiggsAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df103__NanoAODHiggsAnalysis_8py.html
Availability,avail,available,", phi[1], e[1]);; return (p1 + p2).mass() / 1000.0;; }; """"""); ; # Define a new column with the invariant mass and perform final event selection; hists = {}; for p in processes:; # Make four vectors and compute invariant mass; df[p] = df[p].Define(""m_yy"", ""ComputeInvariantMass(photon_pt[goodphotons], photon_eta[goodphotons], photon_phi[goodphotons], photon_E[goodphotons])""); ; # Make additional kinematic cuts and select mass window; df[p] = df[p].Filter(""photon_pt[goodphotons][0] / 1000.0 / m_yy > 0.35"")\; .Filter(""photon_pt[goodphotons][1] / 1000.0 / m_yy > 0.25"")\; .Filter(""m_yy > 105 && m_yy < 160""); ; # Book histogram of the invariant mass with this selection; hists[p] = df[p].Histo1D(; ROOT.RDF.TH1DModel(p, ""Diphoton invariant mass; m_{#gamma#gamma} [GeV];Events"", 30, 105, 160),; ""m_yy"", ""weight""); ; # Run the event loop; ; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.; ROOT.RDF.RunGraphs([hists[s] for s in [""ggH"", ""VBF"", ""data""]]); ; ggh = hists[""ggH""].GetValue(); vbf = hists[""VBF""].GetValue(); data = hists[""data""].GetValue(); ; # Create the plot; ; # Set styles; ROOT.gROOT.SetStyle(""ATLAS""); ; # Create canvas with pads for main plot and data/MC ratio; c = ROOT.TCanvas(""c"", """", 700, 750); ; upper_pad = ROOT.TPad(""upper_pad"", """", 0, 0.35, 1, 1); lower_pad = ROOT.TPad(""lower_pad"", """", 0, 0, 1, 0.35); for p in [upper_pad, lower_pad]:; p.SetLeftMargin(0.14); p.SetRightMargin(0.05); p.SetTickx(False); p.SetTicky(False); upper_pad.SetBottomMargin(0); lower_pad.SetTopMargin(0); lower_pad.SetBottomMargin(0.3); ; upper_pad.Draw(); lower_pad.Draw(); ; # Fit signal + background model to data; fit = ROOT.TF1(""fit"", ""([0]+[1]*x+[2]*x^2+[3]*x^3)+[4]*exp(-0.5*((x-[5])/[6])^2)"", 105, 160); fit.FixParameter(5, 125.0); fit.FixParameter(4, 119.1); fit.FixPa",MatchSource.WIKI,doc/master/df104__HiggsToTwoPhotons_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df104__HiggsToTwoPhotons_8py.html
Deployability,release,release,". ROOT: tutorials/dataframe/df104_HiggsToTwoPhotons.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df104_HiggsToTwoPhotons.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; The Higgs to two photons analysis from the ATLAS Open Data 2020 release, with RDataFrame. ; This tutorial is the Higgs to two photons analysis from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. Although the Higgs to two photons decay is very rare, the contribution of the Higgs can be seen as a narrow peak around 125 GeV because of the excellent reconstruction and identification efficiency of photons at the ATLAS experiment.; The analysis is translated to a RDataFrame workflow processing 1.7 GB of simulated events and data. ; import ROOT; import os; ; # Enable multi-threading; ROOT.ROOT.EnableImplicitMT(); ; # Create a ROOT dataframe for each dataset; path = ""root://eospublic.cern.ch//eos/opendata/atlas/OutreachDatasets/2020-01-22""; df = {}; df[""data""] = ROOT.RDataFrame(""mini"", (os.path.join(path, ""GamGam/Data/data_{}.GamGam.root"".format(x)) for x in (""A"", ""B"", ""C"", ""D""))); df[""ggH""] = ROOT.RDataFrame(""mini"", os.path.join(path, ""GamGam/MC/mc_343981.ggH125_gamgam.GamGam.root"")); df[""VBF""] = ROOT.RDataFrame(""mini"", os.path.join(path, ""GamGam/MC/mc_345041.VBFH125_gamgam.GamGam.root"")); processes = list(df.keys()); ; # Apply scale factors and MC weight for simulated events and a weight of 1 for the data; for p in [""ggH"", ""VBF""]:; df[p] = df[p].Define(""weight"",; ""scaleFactor_PHOTON * scaleFactor_PhotonTRIGGER * scaleFactor_PILEUP * mcWeight"");; df[""data""] = df[""data""].Define(""weight"", ""1.0""); ; # Select the events for the analysis; for p in processes:; # Apply preselection cut on photon trigger; df[p] = df[p].Filter(""trigP""); ; # Find two good muons with tight ID, pt > 25 GeV an",MatchSource.WIKI,doc/master/df104__HiggsToTwoPhotons_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df104__HiggsToTwoPhotons_8py.html
Energy Efficiency,energy,energy,". ROOT: tutorials/dataframe/df104_HiggsToTwoPhotons.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df104_HiggsToTwoPhotons.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; The Higgs to two photons analysis from the ATLAS Open Data 2020 release, with RDataFrame. ; This tutorial is the Higgs to two photons analysis from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. Although the Higgs to two photons decay is very rare, the contribution of the Higgs can be seen as a narrow peak around 125 GeV because of the excellent reconstruction and identification efficiency of photons at the ATLAS experiment.; The analysis is translated to a RDataFrame workflow processing 1.7 GB of simulated events and data. ; import ROOT; import os; ; # Enable multi-threading; ROOT.ROOT.EnableImplicitMT(); ; # Create a ROOT dataframe for each dataset; path = ""root://eospublic.cern.ch//eos/opendata/atlas/OutreachDatasets/2020-01-22""; df = {}; df[""data""] = ROOT.RDataFrame(""mini"", (os.path.join(path, ""GamGam/Data/data_{}.GamGam.root"".format(x)) for x in (""A"", ""B"", ""C"", ""D""))); df[""ggH""] = ROOT.RDataFrame(""mini"", os.path.join(path, ""GamGam/MC/mc_343981.ggH125_gamgam.GamGam.root"")); df[""VBF""] = ROOT.RDataFrame(""mini"", os.path.join(path, ""GamGam/MC/mc_345041.VBFH125_gamgam.GamGam.root"")); processes = list(df.keys()); ; # Apply scale factors and MC weight for simulated events and a weight of 1 for the data; for p in [""ggH"", ""VBF""]:; df[p] = df[p].Define(""weight"",; ""scaleFactor_PHOTON * scaleFactor_PhotonTRIGGER * scaleFactor_PILEUP * mcWeight"");; df[""data""] = df[""data""].Define(""weight"", ""1.0""); ; # Select the events for the analysis; for p in processes:; # Apply preselection cut on photon trigger; df[p] = df[p].Filter(""trigP""); ; # Find two good muons with tight ID, pt > 25 GeV an",MatchSource.WIKI,doc/master/df104__HiggsToTwoPhotons_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df104__HiggsToTwoPhotons_8py.html
Integrability,interface,interface,"78, ""#sqrt{s} = 13 TeV, 10 fb^{-1}""); ; # Save the plot; c.SaveAs(""df104_HiggsToTwoPhotons.png""); print(""Saved figure to df104_HiggsToTwoPhotons.png""); formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProxy.cxx:249; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66; ROOT::RDF::TH1DModelA struct which stores the parameters of a TH1D.Definition HistoModels.hxx:30; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 19.9699; NDf = 26; Edm = 2.09182e-08; NCalls = 161; p0 = 94325 +/- 72.0525 ; p1 = -1777.22 +/- 0.778155 ; p2 = 11.5606 +/- 0.00536059 ; p3 = -0.0256281 +/- 2.66824e-05 ; p4 = 119.1 (fixed); p5 = 125 (fixed); p6 = 2.39 (fixed); Saved figure to df104_HiggsToTwoPhotons.png; DateFebruary 2020 ; AuthorStefan Wunsch (KIT, CERN) ; Definition in file df104_HiggsToTwoPhotons.py. tutorialsdataframedf104_HiggsToTwoPhotons.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df104__HiggsToTwoPhotons_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df104__HiggsToTwoPhotons_8py.html
Performance,multi-thread,multi-threading,". ROOT: tutorials/dataframe/df104_HiggsToTwoPhotons.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df104_HiggsToTwoPhotons.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; The Higgs to two photons analysis from the ATLAS Open Data 2020 release, with RDataFrame. ; This tutorial is the Higgs to two photons analysis from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. Although the Higgs to two photons decay is very rare, the contribution of the Higgs can be seen as a narrow peak around 125 GeV because of the excellent reconstruction and identification efficiency of photons at the ATLAS experiment.; The analysis is translated to a RDataFrame workflow processing 1.7 GB of simulated events and data. ; import ROOT; import os; ; # Enable multi-threading; ROOT.ROOT.EnableImplicitMT(); ; # Create a ROOT dataframe for each dataset; path = ""root://eospublic.cern.ch//eos/opendata/atlas/OutreachDatasets/2020-01-22""; df = {}; df[""data""] = ROOT.RDataFrame(""mini"", (os.path.join(path, ""GamGam/Data/data_{}.GamGam.root"".format(x)) for x in (""A"", ""B"", ""C"", ""D""))); df[""ggH""] = ROOT.RDataFrame(""mini"", os.path.join(path, ""GamGam/MC/mc_343981.ggH125_gamgam.GamGam.root"")); df[""VBF""] = ROOT.RDataFrame(""mini"", os.path.join(path, ""GamGam/MC/mc_345041.VBFH125_gamgam.GamGam.root"")); processes = list(df.keys()); ; # Apply scale factors and MC weight for simulated events and a weight of 1 for the data; for p in [""ggH"", ""VBF""]:; df[p] = df[p].Define(""weight"",; ""scaleFactor_PHOTON * scaleFactor_PhotonTRIGGER * scaleFactor_PILEUP * mcWeight"");; df[""data""] = df[""data""].Define(""weight"", ""1.0""); ; # Select the events for the analysis; for p in processes:; # Apply preselection cut on photon trigger; df[p] = df[p].Filter(""trigP""); ; # Find two good muons with tight ID, pt > 25 GeV an",MatchSource.WIKI,doc/master/df104__HiggsToTwoPhotons_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df104__HiggsToTwoPhotons_8py.html
Safety,detect,detector,". ROOT: tutorials/dataframe/df104_HiggsToTwoPhotons.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df104_HiggsToTwoPhotons.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; The Higgs to two photons analysis from the ATLAS Open Data 2020 release, with RDataFrame. ; This tutorial is the Higgs to two photons analysis from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. Although the Higgs to two photons decay is very rare, the contribution of the Higgs can be seen as a narrow peak around 125 GeV because of the excellent reconstruction and identification efficiency of photons at the ATLAS experiment.; The analysis is translated to a RDataFrame workflow processing 1.7 GB of simulated events and data. ; import ROOT; import os; ; # Enable multi-threading; ROOT.ROOT.EnableImplicitMT(); ; # Create a ROOT dataframe for each dataset; path = ""root://eospublic.cern.ch//eos/opendata/atlas/OutreachDatasets/2020-01-22""; df = {}; df[""data""] = ROOT.RDataFrame(""mini"", (os.path.join(path, ""GamGam/Data/data_{}.GamGam.root"".format(x)) for x in (""A"", ""B"", ""C"", ""D""))); df[""ggH""] = ROOT.RDataFrame(""mini"", os.path.join(path, ""GamGam/MC/mc_343981.ggH125_gamgam.GamGam.root"")); df[""VBF""] = ROOT.RDataFrame(""mini"", os.path.join(path, ""GamGam/MC/mc_345041.VBFH125_gamgam.GamGam.root"")); processes = list(df.keys()); ; # Apply scale factors and MC weight for simulated events and a weight of 1 for the data; for p in [""ggH"", ""VBF""]:; df[p] = df[p].Define(""weight"",; ""scaleFactor_PHOTON * scaleFactor_PhotonTRIGGER * scaleFactor_PILEUP * mcWeight"");; df[""data""] = df[""data""].Define(""weight"", ""1.0""); ; # Select the events for the analysis; for p in processes:; # Apply preselection cut on photon trigger; df[p] = df[p].Filter(""trigP""); ; # Find two good muons with tight ID, pt > 25 GeV an",MatchSource.WIKI,doc/master/df104__HiggsToTwoPhotons_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df104__HiggsToTwoPhotons_8py.html
Availability,avail,available,"is of the W boson mass taken from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. W bosons are produced frequently at the LHC and are an important background to studies of Standard Model processes, for example the Higgs boson analyses.; The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data. By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with the –full-dataset argument and you can also run only on a fraction of the original dataset using the argument –lumi-scale.; See the corresponding spec json file. ; import ROOT; import sys; import json; import argparse; import os; ; # Argument parsing; parser = argparse.ArgumentParser(); parser.add_argument(""--lumi-scale"", type=float, default=0.001,; help=""Run only on a fraction of the total available 10 fb^-1 (only usable together with --full-dataset)""); parser.add_argument(""--full-dataset"", action=""store_true"", default=False,; help=""Use the full dataset (use --lumi-scale to run only on a fraction of it)""); parser.add_argument(""-b"", action=""store_true"", default=False, help=""Use ROOT batch mode""); parser.add_argument(""-t"", action=""store_true"", default=False, help=""Use implicit multi threading (for the full dataset only possible with --lumi-scale 1.0)""); if 'df105_WBosonAnalysis.py' in sys.argv[0]:; # Script; args = parser.parse_args(); else:; # Notebook; args = parser.parse_args(args=[]); ; if args.b: ROOT.gROOT.SetBatch(True); if args.t: ROOT.EnableImplicitMT(); ; if not args.full_dataset: lumi_scale = 0.001 # The preskimmed dataset contains only 0.01 fb^-1; else: lumi_scale = args.lumi_scale; lumi = 10064.0; print('Run on data corresponding to {:.2f} fb^-1 ...'.format(lumi * lumi_scale / 1000.0)); ; if args.full_dataset: dataset_path = ""root://eospublic.cern.ch//eos/opendata/atlas/O",MatchSource.WIKI,doc/master/df105__WBosonAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df105__WBosonAnalysis_8py.html
Deployability,release,release,". ROOT: tutorials/dataframe/df105_WBosonAnalysis.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df105_WBosonAnalysis.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame. ; This tutorial is the analysis of the W boson mass taken from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. W bosons are produced frequently at the LHC and are an important background to studies of Standard Model processes, for example the Higgs boson analyses.; The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data. By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with the –full-dataset argument and you can also run only on a fraction of the original dataset using the argument –lumi-scale.; See the corresponding spec json file. ; import ROOT; import sys; import json; import argparse; import os; ; # Argument parsing; parser = argparse.ArgumentParser(); parser.add_argument(""--lumi-scale"", type=float, default=0.001,; help=""Run only on a fraction of the total available 10 fb^-1 (only usable together with --full-dataset)""); parser.add_argument(""--full-dataset"", action=""store_true"", default=False,; help=""Use the full dataset (use --lumi-scale to run only on a fraction of it)""); parser.add_argument(""-b"", action=""store_true"", default=False, help=""Use ROOT batch mode""); parser.add_argument(""-t"", action=""store_true"", default=False, help=""Use implicit multi threading (for the full dataset only possible with --lumi-scale 1.0)""); if 'df105_WBosonAnalysis.py' in sys.argv[0]:; # Script; args = parser.parse_args(); else:; # Notebook; args = parser.parse_args(args=[]); ; if args.b: ROOT.gROOT.SetBatch(Tr",MatchSource.WIKI,doc/master/df105__WBosonAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df105__WBosonAnalysis_8py.html
Energy Efficiency,energy,energy,". ROOT: tutorials/dataframe/df105_WBosonAnalysis.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df105_WBosonAnalysis.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame. ; This tutorial is the analysis of the W boson mass taken from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. W bosons are produced frequently at the LHC and are an important background to studies of Standard Model processes, for example the Higgs boson analyses.; The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data. By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with the –full-dataset argument and you can also run only on a fraction of the original dataset using the argument –lumi-scale.; See the corresponding spec json file. ; import ROOT; import sys; import json; import argparse; import os; ; # Argument parsing; parser = argparse.ArgumentParser(); parser.add_argument(""--lumi-scale"", type=float, default=0.001,; help=""Run only on a fraction of the total available 10 fb^-1 (only usable together with --full-dataset)""); parser.add_argument(""--full-dataset"", action=""store_true"", default=False,; help=""Use the full dataset (use --lumi-scale to run only on a fraction of it)""); parser.add_argument(""-b"", action=""store_true"", default=False, help=""Use ROOT batch mode""); parser.add_argument(""-t"", action=""store_true"", default=False, help=""Use implicit multi threading (for the full dataset only possible with --lumi-scale 1.0)""); if 'df105_WBosonAnalysis.py' in sys.argv[0]:; # Script; args = parser.parse_args(); else:; # Notebook; args = parser.parse_args(args=[]); ; if args.b: ROOT.gROOT.SetBatch(Tr",MatchSource.WIKI,doc/master/df105__WBosonAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df105__WBosonAnalysis_8py.html
Integrability,interface,interface,"21, 0.80, ""#sqrt{{s}} = 13 TeV, {:.2f} fb^{{-1}}"".format(lumi * args.lumi_scale / 1000.0)); ; # Save the plot; c.SaveAs(""df105_WBosonAnalysis.png""); print(""Saved figure to df105_WBosonAnalysis.png""); formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProxy.cxx:249; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; int; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::RDF::TH1DModelA struct which stores the parameters of a TH1D.Definition HistoModels.hxx:30; RangeTa Range(0, 0, 1, 1); Run on data corresponding to 0.01 fb^-1 ...; Saved figure to df105_WBosonAnalysis.png; DateMarch 2020 ; AuthorStefan Wunsch (KIT, CERN) ; Definition in file df105_WBosonAnalysis.py. tutorialsdataframedf105_WBosonAnalysis.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df105__WBosonAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df105__WBosonAnalysis_8py.html
Performance,load,load,"le to run only on a fraction of it)""); parser.add_argument(""-b"", action=""store_true"", default=False, help=""Use ROOT batch mode""); parser.add_argument(""-t"", action=""store_true"", default=False, help=""Use implicit multi threading (for the full dataset only possible with --lumi-scale 1.0)""); if 'df105_WBosonAnalysis.py' in sys.argv[0]:; # Script; args = parser.parse_args(); else:; # Notebook; args = parser.parse_args(args=[]); ; if args.b: ROOT.gROOT.SetBatch(True); if args.t: ROOT.EnableImplicitMT(); ; if not args.full_dataset: lumi_scale = 0.001 # The preskimmed dataset contains only 0.01 fb^-1; else: lumi_scale = args.lumi_scale; lumi = 10064.0; print('Run on data corresponding to {:.2f} fb^-1 ...'.format(lumi * lumi_scale / 1000.0)); ; if args.full_dataset: dataset_path = ""root://eospublic.cern.ch//eos/opendata/atlas/OutreachDatasets/2020-01-22""; else: dataset_path = ""root://eospublic.cern.ch//eos/root-eos/reduced_atlas_opendata/w""; ; # Create a ROOT dataframe for each dataset; # Note that we load the filenames from the external json file placed in the same folder than this script.; files = json.load(open(os.path.join(ROOT.gROOT.GetTutorialsDir(), ""dataframe/df105_WBosonAnalysis.json""))); processes = files.keys(); df = {}; xsecs = {}; sumws = {}; samples = []; for p in processes:; for d in files[p]:; # Construct the dataframes; folder = d[0] # Folder name; sample = d[1] # Sample name; xsecs[sample] = d[2] # Cross-section; sumws[sample] = d[3] # Sum of weights; num_events = d[4] # Number of events; samples.append(sample); df[sample] = ROOT.RDataFrame(""mini"", ""{}/1lep/{}/{}.1lep.root"".format(dataset_path, folder, sample)); ; # Scale down the datasets if requested; if args.full_dataset and lumi_scale < 1.0:; df[sample] = df[sample].Range(int(num_events * lumi_scale)); ; # Select events for the analysis; ; # Just-in-time compile custom helper function performing complex computations; ROOT.gInterpreter.Declare(""""""; bool GoodElectronOrMuon(int type, float pt, float eta, fl",MatchSource.WIKI,doc/master/df105__WBosonAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df105__WBosonAnalysis_8py.html
Safety,detect,detector,". ROOT: tutorials/dataframe/df105_WBosonAnalysis.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df105_WBosonAnalysis.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame. ; This tutorial is the analysis of the W boson mass taken from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. W bosons are produced frequently at the LHC and are an important background to studies of Standard Model processes, for example the Higgs boson analyses.; The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data. By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with the –full-dataset argument and you can also run only on a fraction of the original dataset using the argument –lumi-scale.; See the corresponding spec json file. ; import ROOT; import sys; import json; import argparse; import os; ; # Argument parsing; parser = argparse.ArgumentParser(); parser.add_argument(""--lumi-scale"", type=float, default=0.001,; help=""Run only on a fraction of the total available 10 fb^-1 (only usable together with --full-dataset)""); parser.add_argument(""--full-dataset"", action=""store_true"", default=False,; help=""Use the full dataset (use --lumi-scale to run only on a fraction of it)""); parser.add_argument(""-b"", action=""store_true"", default=False, help=""Use ROOT batch mode""); parser.add_argument(""-t"", action=""store_true"", default=False, help=""Use implicit multi threading (for the full dataset only possible with --lumi-scale 1.0)""); if 'df105_WBosonAnalysis.py' in sys.argv[0]:; # Script; args = parser.parse_args(); else:; # Notebook; args = parser.parse_args(args=[]); ; if args.b: ROOT.gROOT.SetBatch(Tr",MatchSource.WIKI,doc/master/df105__WBosonAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df105__WBosonAnalysis_8py.html
Usability,usab,usable,"is of the W boson mass taken from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. W bosons are produced frequently at the LHC and are an important background to studies of Standard Model processes, for example the Higgs boson analyses.; The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data. By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with the –full-dataset argument and you can also run only on a fraction of the original dataset using the argument –lumi-scale.; See the corresponding spec json file. ; import ROOT; import sys; import json; import argparse; import os; ; # Argument parsing; parser = argparse.ArgumentParser(); parser.add_argument(""--lumi-scale"", type=float, default=0.001,; help=""Run only on a fraction of the total available 10 fb^-1 (only usable together with --full-dataset)""); parser.add_argument(""--full-dataset"", action=""store_true"", default=False,; help=""Use the full dataset (use --lumi-scale to run only on a fraction of it)""); parser.add_argument(""-b"", action=""store_true"", default=False, help=""Use ROOT batch mode""); parser.add_argument(""-t"", action=""store_true"", default=False, help=""Use implicit multi threading (for the full dataset only possible with --lumi-scale 1.0)""); if 'df105_WBosonAnalysis.py' in sys.argv[0]:; # Script; args = parser.parse_args(); else:; # Notebook; args = parser.parse_args(args=[]); ; if args.b: ROOT.gROOT.SetBatch(True); if args.t: ROOT.EnableImplicitMT(); ; if not args.full_dataset: lumi_scale = 0.001 # The preskimmed dataset contains only 0.01 fb^-1; else: lumi_scale = args.lumi_scale; lumi = 10064.0; print('Run on data corresponding to {:.2f} fb^-1 ...'.format(lumi * lumi_scale / 1000.0)); ; if args.full_dataset: dataset_path = ""root://eospublic.cern.ch//eos/opendata/atlas/O",MatchSource.WIKI,doc/master/df105__WBosonAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df105__WBosonAnalysis_8py.html
Availability,mask,mask,"ion that is stored in the JSON config file of the RDataFrame; // The metadata contained in the JSON file is accessible within a `DefinePerSample` call, through the `RSampleInfo`; // class; auto df_analysis =; df.DefinePerSample(""xsecs"", [](unsigned int slot, const RSampleInfo &id) { return id.GetD(""xsecs""); }); .DefinePerSample(""lumi"", [](unsigned int slot, const RSampleInfo &id) { return id.GetD(""lumi""); }); .DefinePerSample(""sumws"", [](unsigned int slot, const RSampleInfo &id) { return id.GetD(""sumws""); }); .DefinePerSample(""sample_category"",; [](unsigned int slot, const RSampleInfo &id) { return id.GetS(""sample_category""); }); // Apply an MC correction for the ZZ decay due to missing gg->ZZ process; .DefinePerSample(""scale"",; [](unsigned int slot, const ROOT::RDF::RSampleInfo &id) {; return id.Contains(""mc_363490.llll.4lep.root"") ? 1.3f : 1.0f;; }); // Select electron or muon trigger; .Filter(""trigE || trigM""); // Select events with exactly four good leptons conserving charge and lepton numbers; // Note that all collections are RVecs and good_lep is the mask for the good leptons.; // The lepton types are PDG numbers and set to 11 or 13 for an electron or muon; // irrespective of the charge.; .Define(""good_lep"",; ""abs(lep_eta) < 2.5 && lep_pt > 5000 && lep_ptcone30 / lep_pt < 0.3 && lep_etcone20 / lep_pt < 0.3""); .Filter(""Sum(good_lep) == 4""); .Filter(""Sum(lep_charge[good_lep]) == 0""); .Define(""goodlep_sumtypes"", ""Sum(lep_type[good_lep])""); .Filter(""goodlep_sumtypes == 44 || goodlep_sumtypes == 52 || goodlep_sumtypes == 48""); // Apply additional cuts depending on lepton flavour; .Filter(; ""GoodElectronsAndMuons(lep_type[good_lep], lep_pt[good_lep], lep_eta[good_lep], lep_phi[good_lep], ""; ""lep_E[good_lep], lep_trackd0pvunbiased[good_lep], lep_tracksigd0pvunbiased[good_lep], lep_z0[good_lep])""); // Create new columns with the kinematics of good leptons; .Define(""goodlep_pt"", ""lep_pt[good_lep]""); .Define(""goodlep_eta"", ""lep_eta[good_lep]""); .Define(""goodlep_phi"", ""le",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html
Deployability,release,release,". ROOT: tutorials/dataframe/df106_HiggsToFourLeptons.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df106_HiggsToFourLeptons.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame. ; This tutorial is the Higgs to four lepton analysis from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. The decay of the Standard Model Higgs boson to two Z bosons and subsequently to four leptons is called the ""golden channel"". The selection leads to a narrow invariant mass peak on top a relatively smooth and small background, revealing the Higgs at 125 GeV. The analysis is translated to an RDataFrame workflow processing about 300 MB of simulated events and data.; Lepton selection efficiency corrections (""scale factors"") are applied to simulated samples to correct for the differences in the trigger, reconstruction, and identification efficiencies in simulation compared to real data. Systematic uncertainties for those scale factors are evaluated and the Vary function of RDataFrame is used to propagate the variations to the final four leptons mass distribution.; See the corresponding spec json file.; ; #include ""TInterpreter.h""; #include <Math/Vector4D.h>; #include <ROOT/RDFHelpers.hxx>; #include <ROOT/RDataFrame.hxx>; #include <ROOT/RVec.hxx>; #include <TCanvas.h>; #include <TGraph.h>; #include <TH1D.h>; #include <THStack.h>; #include <TLatex.h>; #include <TLegend.h>; #include <TProfile.h>; #include <TStyle.h>; ; using namespace ROOT::VecOps;; using PtEtaPhiEVectorF = ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<float>>;; using ROOT::RVecF;; using ROOT::RDF::RSampleInfo;; using namespace ROOT::RDF::Experimental;; ; // Define functions needed in the analysis; // Select events for the analys",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html
Energy Efficiency,energy,energy,". ROOT: tutorials/dataframe/df106_HiggsToFourLeptons.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df106_HiggsToFourLeptons.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame. ; This tutorial is the Higgs to four lepton analysis from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. The decay of the Standard Model Higgs boson to two Z bosons and subsequently to four leptons is called the ""golden channel"". The selection leads to a narrow invariant mass peak on top a relatively smooth and small background, revealing the Higgs at 125 GeV. The analysis is translated to an RDataFrame workflow processing about 300 MB of simulated events and data.; Lepton selection efficiency corrections (""scale factors"") are applied to simulated samples to correct for the differences in the trigger, reconstruction, and identification efficiencies in simulation compared to real data. Systematic uncertainties for those scale factors are evaluated and the Vary function of RDataFrame is used to propagate the variations to the final four leptons mass distribution.; See the corresponding spec json file.; ; #include ""TInterpreter.h""; #include <Math/Vector4D.h>; #include <ROOT/RDFHelpers.hxx>; #include <ROOT/RDataFrame.hxx>; #include <ROOT/RVec.hxx>; #include <TCanvas.h>; #include <TGraph.h>; #include <TH1D.h>; #include <THStack.h>; #include <TLatex.h>; #include <TLegend.h>; #include <TProfile.h>; #include <TStyle.h>; ; using namespace ROOT::VecOps;; using PtEtaPhiEVectorF = ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<float>>;; using ROOT::RVecF;; using ROOT::RDF::RSampleInfo;; using namespace ROOT::RDF::Experimental;; ; // Define functions needed in the analysis; // Select events for the analys",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html
Integrability,depend,depending,"e_category"",; [](unsigned int slot, const RSampleInfo &id) { return id.GetS(""sample_category""); }); // Apply an MC correction for the ZZ decay due to missing gg->ZZ process; .DefinePerSample(""scale"",; [](unsigned int slot, const ROOT::RDF::RSampleInfo &id) {; return id.Contains(""mc_363490.llll.4lep.root"") ? 1.3f : 1.0f;; }); // Select electron or muon trigger; .Filter(""trigE || trigM""); // Select events with exactly four good leptons conserving charge and lepton numbers; // Note that all collections are RVecs and good_lep is the mask for the good leptons.; // The lepton types are PDG numbers and set to 11 or 13 for an electron or muon; // irrespective of the charge.; .Define(""good_lep"",; ""abs(lep_eta) < 2.5 && lep_pt > 5000 && lep_ptcone30 / lep_pt < 0.3 && lep_etcone20 / lep_pt < 0.3""); .Filter(""Sum(good_lep) == 4""); .Filter(""Sum(lep_charge[good_lep]) == 0""); .Define(""goodlep_sumtypes"", ""Sum(lep_type[good_lep])""); .Filter(""goodlep_sumtypes == 44 || goodlep_sumtypes == 52 || goodlep_sumtypes == 48""); // Apply additional cuts depending on lepton flavour; .Filter(; ""GoodElectronsAndMuons(lep_type[good_lep], lep_pt[good_lep], lep_eta[good_lep], lep_phi[good_lep], ""; ""lep_E[good_lep], lep_trackd0pvunbiased[good_lep], lep_tracksigd0pvunbiased[good_lep], lep_z0[good_lep])""); // Create new columns with the kinematics of good leptons; .Define(""goodlep_pt"", ""lep_pt[good_lep]""); .Define(""goodlep_eta"", ""lep_eta[good_lep]""); .Define(""goodlep_phi"", ""lep_phi[good_lep]""); .Define(""goodlep_E"", ""lep_E[good_lep]""); .Define(""goodlep_type"", ""lep_type[good_lep]""); // Select leptons with high transverse momentum; .Filter(""goodlep_pt[0] > 25000 && goodlep_pt[1] > 15000 && goodlep_pt[2] > 10000""); // Compute invariant mass; .Define(""m4l"", ""ComputeInvariantMass(goodlep_pt, goodlep_eta, goodlep_phi, goodlep_E)""); // Reweighting of the samples is different for ""data"" and ""MC""; .DefinePerSample(""reweighting"", [](unsigned int slot, const RSampleInfo &id) { return id.Contains(""mc""); });; ; // Def",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html
Modifiability,config,config,"nableImplicitMT();; ; // Create the RDataFrame from the spec json file. The df106_HiggsToFourLeptons_spec.json is provided in the same; // folder as this tutorial; std::string dataset_spec = gROOT->GetTutorialsDir() + std::string(""/dataframe/df106_HiggsToFourLeptons_spec.json"");; ROOT::RDataFrame df = ROOT::RDF::Experimental::FromSpec(dataset_spec);; ; // Add the ProgressBar feature; ROOT::RDF::Experimental::AddProgressBar(df);; ; #ifndef __CLING__; // If this tutorial is compiled, rather than run as a ROOT macro, the interpreter needs to be fed the signatures; // of all the functions we want to JIT in our analysis, as well as any type used in those signatures.; // clang-format off; gInterpreter->Declare(; ""using ROOT::RVecF;""; ""bool GoodElectronsAndMuons(const ROOT::RVecI &type, const RVecF &pt, const RVecF &eta, const RVecF &phi, const RVecF &e,""; ""const RVecF &trackd0pv, const RVecF &tracksigd0pv, const RVecF &z0);""; ""float ComputeInvariantMass(const RVecF &pt, const RVecF &eta, const RVecF &phi, const RVecF &e);""; );; // clang-format on; #endif; ; // Perform the analysis; // Access metadata information that is stored in the JSON config file of the RDataFrame; // The metadata contained in the JSON file is accessible within a `DefinePerSample` call, through the `RSampleInfo`; // class; auto df_analysis =; df.DefinePerSample(""xsecs"", [](unsigned int slot, const RSampleInfo &id) { return id.GetD(""xsecs""); }); .DefinePerSample(""lumi"", [](unsigned int slot, const RSampleInfo &id) { return id.GetD(""lumi""); }); .DefinePerSample(""sumws"", [](unsigned int slot, const RSampleInfo &id) { return id.GetD(""sumws""); }); .DefinePerSample(""sample_category"",; [](unsigned int slot, const RSampleInfo &id) { return id.GetS(""sample_category""); }); // Apply an MC correction for the ZZ decay due to missing gg->ZZ process; .DefinePerSample(""scale"",; [](unsigned int slot, const ROOT::RDF::RSampleInfo &id) {; return id.Contains(""mc_363490.llll.4lep.root"") ? 1.3f : 1.0f;; }); // Select electr",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html
Performance,multi-thread,multi-threading,"finition TPad.h:28; ptTPaveText * ptDefinition entrylist_figure1.C:7; ROOT::VecOps::Mapauto Map(Args &&... args)Create new collection applying a callable to the elements of the input collection.Definition RVec.hxx:2150; ROOT::VecOps::FilterRVec< T > Filter(const RVec< T > &v, F &&f)Create a new collection with the elements passing the filter expressed by the predicate.Definition RVec.hxx:2182; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; ROOT::RDF::ExperimentalDefinition RDataFrame.hxx:66; ROOT::RDF::Experimental::FromSpecROOT::RDataFrame FromSpec(const std::string &jsonFile)Factory method to create an RDataFrame from a JSON specification file.Definition RDataFrame.cxx:1906; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; ROOT::VecOpsDefinition TCollectionProxyInfo.h:42; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; TMath::MeanDouble_t Mean(Long64_t n, const T *a, const Double_t *w=nullptr)Returns the weighted mean of an array a with length n.Definition TMath.h:1089; df106_HiggsToFourLeptonsDefinition df106_HiggsToFourLeptons.py:1; graphDefinition graph.py:1; v@ vDefinition rootcling_impl.cxx:3699; ROOT::RDF::TH1DModelA struct which stores the parameters of a TH1D.Definition HistoModels.hxx:30; . DateMarch 2020, August 2022, August 2023 ; AuthorsStefan Wunsch (KIT, CERN), Julia Mathe (CERN), Marta Czurylo (CERN) ; Definition in file df106_HiggsToFourLeptons.C. tutorialsdataframedf106_HiggsToFourLeptons.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html
Safety,detect,detector,". ROOT: tutorials/dataframe/df106_HiggsToFourLeptons.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df106_HiggsToFourLeptons.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame. ; This tutorial is the Higgs to four lepton analysis from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. The decay of the Standard Model Higgs boson to two Z bosons and subsequently to four leptons is called the ""golden channel"". The selection leads to a narrow invariant mass peak on top a relatively smooth and small background, revealing the Higgs at 125 GeV. The analysis is translated to an RDataFrame workflow processing about 300 MB of simulated events and data.; Lepton selection efficiency corrections (""scale factors"") are applied to simulated samples to correct for the differences in the trigger, reconstruction, and identification efficiencies in simulation compared to real data. Systematic uncertainties for those scale factors are evaluated and the Vary function of RDataFrame is used to propagate the variations to the final four leptons mass distribution.; See the corresponding spec json file.; ; #include ""TInterpreter.h""; #include <Math/Vector4D.h>; #include <ROOT/RDFHelpers.hxx>; #include <ROOT/RDataFrame.hxx>; #include <ROOT/RVec.hxx>; #include <TCanvas.h>; #include <TGraph.h>; #include <TH1D.h>; #include <THStack.h>; #include <TLatex.h>; #include <TLegend.h>; #include <TProfile.h>; #include <TStyle.h>; ; using namespace ROOT::VecOps;; using PtEtaPhiEVectorF = ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<float>>;; using ROOT::RVecF;; using ROOT::RDF::RSampleInfo;; using namespace ROOT::RDF::Experimental;; ; // Define functions needed in the analysis; // Select events for the analys",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html
Security,access,accessible,"nableImplicitMT();; ; // Create the RDataFrame from the spec json file. The df106_HiggsToFourLeptons_spec.json is provided in the same; // folder as this tutorial; std::string dataset_spec = gROOT->GetTutorialsDir() + std::string(""/dataframe/df106_HiggsToFourLeptons_spec.json"");; ROOT::RDataFrame df = ROOT::RDF::Experimental::FromSpec(dataset_spec);; ; // Add the ProgressBar feature; ROOT::RDF::Experimental::AddProgressBar(df);; ; #ifndef __CLING__; // If this tutorial is compiled, rather than run as a ROOT macro, the interpreter needs to be fed the signatures; // of all the functions we want to JIT in our analysis, as well as any type used in those signatures.; // clang-format off; gInterpreter->Declare(; ""using ROOT::RVecF;""; ""bool GoodElectronsAndMuons(const ROOT::RVecI &type, const RVecF &pt, const RVecF &eta, const RVecF &phi, const RVecF &e,""; ""const RVecF &trackd0pv, const RVecF &tracksigd0pv, const RVecF &z0);""; ""float ComputeInvariantMass(const RVecF &pt, const RVecF &eta, const RVecF &phi, const RVecF &e);""; );; // clang-format on; #endif; ; // Perform the analysis; // Access metadata information that is stored in the JSON config file of the RDataFrame; // The metadata contained in the JSON file is accessible within a `DefinePerSample` call, through the `RSampleInfo`; // class; auto df_analysis =; df.DefinePerSample(""xsecs"", [](unsigned int slot, const RSampleInfo &id) { return id.GetD(""xsecs""); }); .DefinePerSample(""lumi"", [](unsigned int slot, const RSampleInfo &id) { return id.GetD(""lumi""); }); .DefinePerSample(""sumws"", [](unsigned int slot, const RSampleInfo &id) { return id.GetD(""sumws""); }); .DefinePerSample(""sample_category"",; [](unsigned int slot, const RSampleInfo &id) { return id.GetS(""sample_category""); }); // Apply an MC correction for the ZZ decay due to missing gg->ZZ process; .DefinePerSample(""scale"",; [](unsigned int slot, const ROOT::RDF::RSampleInfo &id) {; return id.Contains(""mc_363490.llll.4lep.root"") ? 1.3f : 1.0f;; }); // Select electr",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html
Availability,error,errors,". ROOT: tutorials/dataframe/df106_HiggsToFourLeptons.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df106_HiggsToFourLeptons.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame. ; This tutorial is the Higgs to four lepton analysis from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. The decay of the Standard Model Higgs boson to two Z bosons and subsequently to four leptons is called the ""golden channel"". The selection leads to a narrow invariant mass peak on top a relatively smooth and small background, revealing the Higgs at 125 GeV. Systematic errors for the MC scale factors are computed and the Vary function of RDataFrame is used for plotting. The analysis is translated to an RDataFrame workflow processing about 300 MB of simulated events and data.; See the corresponding spec json file. ; import ROOT; import os; ; # Enable Multi-threaded mode; ROOT.EnableImplicitMT(); ; # Create the RDataFrame from the spec json file. The df106_HiggsToFourLeptons_spec.json is provided in the same folder as this tutorial; dataset_spec = os.path.join(ROOT.gROOT.GetTutorialsDir(), ""dataframe"", ""df106_HiggsToFourLeptons_spec.json""); df = ROOT.RDF.Experimental.FromSpec(dataset_spec) # Creates a single dataframe for all the samples; ; # Add the ProgressBar feature; ROOT.RDF.Experimental.AddProgressBar(df); ; # Access metadata information that is stored in the JSON config file of the RDataFrame.; # The metadata contained in the JSON file is accessible within a `DefinePerSample` call, through the `RSampleInfo` class.; df = df.DefinePerSample(""xsecs"", 'rdfsampleinfo_.GetD(""xsecs"")'); df = df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); df = df.DefinePerSample(""sumws""",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py.html
Deployability,release,release,". ROOT: tutorials/dataframe/df106_HiggsToFourLeptons.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df106_HiggsToFourLeptons.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame. ; This tutorial is the Higgs to four lepton analysis from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. The decay of the Standard Model Higgs boson to two Z bosons and subsequently to four leptons is called the ""golden channel"". The selection leads to a narrow invariant mass peak on top a relatively smooth and small background, revealing the Higgs at 125 GeV. Systematic errors for the MC scale factors are computed and the Vary function of RDataFrame is used for plotting. The analysis is translated to an RDataFrame workflow processing about 300 MB of simulated events and data.; See the corresponding spec json file. ; import ROOT; import os; ; # Enable Multi-threaded mode; ROOT.EnableImplicitMT(); ; # Create the RDataFrame from the spec json file. The df106_HiggsToFourLeptons_spec.json is provided in the same folder as this tutorial; dataset_spec = os.path.join(ROOT.gROOT.GetTutorialsDir(), ""dataframe"", ""df106_HiggsToFourLeptons_spec.json""); df = ROOT.RDF.Experimental.FromSpec(dataset_spec) # Creates a single dataframe for all the samples; ; # Add the ProgressBar feature; ROOT.RDF.Experimental.AddProgressBar(df); ; # Access metadata information that is stored in the JSON config file of the RDataFrame.; # The metadata contained in the JSON file is accessible within a `DefinePerSample` call, through the `RSampleInfo` class.; df = df.DefinePerSample(""xsecs"", 'rdfsampleinfo_.GetD(""xsecs"")'); df = df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); df = df.DefinePerSample(""sumws""",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py.html
Energy Efficiency,energy,energy,". ROOT: tutorials/dataframe/df106_HiggsToFourLeptons.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df106_HiggsToFourLeptons.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame. ; This tutorial is the Higgs to four lepton analysis from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. The decay of the Standard Model Higgs boson to two Z bosons and subsequently to four leptons is called the ""golden channel"". The selection leads to a narrow invariant mass peak on top a relatively smooth and small background, revealing the Higgs at 125 GeV. Systematic errors for the MC scale factors are computed and the Vary function of RDataFrame is used for plotting. The analysis is translated to an RDataFrame workflow processing about 300 MB of simulated events and data.; See the corresponding spec json file. ; import ROOT; import os; ; # Enable Multi-threaded mode; ROOT.EnableImplicitMT(); ; # Create the RDataFrame from the spec json file. The df106_HiggsToFourLeptons_spec.json is provided in the same folder as this tutorial; dataset_spec = os.path.join(ROOT.gROOT.GetTutorialsDir(), ""dataframe"", ""df106_HiggsToFourLeptons_spec.json""); df = ROOT.RDF.Experimental.FromSpec(dataset_spec) # Creates a single dataframe for all the samples; ; # Add the ProgressBar feature; ROOT.RDF.Experimental.AddProgressBar(df); ; # Access metadata information that is stored in the JSON config file of the RDataFrame.; # The metadata contained in the JSON file is accessible within a `DefinePerSample` call, through the `RSampleInfo` class.; df = df.DefinePerSample(""xsecs"", 'rdfsampleinfo_.GetD(""xsecs"")'); df = df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); df = df.DefinePerSample(""sumws""",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py.html
Integrability,depend,depending,";; if (type[i] == 11) {; if (pt[i] < 7000 || abs(eta[i]) > 2.47 || abs(trackd0pv[i] / tracksigd0pv[i]) > 5 || abs(z0[i] * sin(p.Theta())) > 0.5) return false;; } else {; if (abs(trackd0pv[i] / tracksigd0pv[i]) > 5 || abs(z0[i] * sin(p.Theta())) > 0.5) return false;; }; }; return true;; }; """"""; ); ; # Select electron or muon trigger; df = df.Filter(""trigE || trigM""); ; # Select events with exactly four good leptons conserving charge and lepton numbers; # Note that all collections are RVecs and good_lep is the mask for the good leptons.; # The lepton types are PDG numbers and set to 11 or 13 for an electron or muon; # irrespective of the charge.; ; df = (; df.Define(; ""good_lep"",; ""abs(lep_eta) < 2.5 && lep_pt > 5000 && lep_ptcone30 / lep_pt < 0.3 && lep_etcone20 / lep_pt < 0.3"",; ); .Filter(""Sum(good_lep) == 4""); .Filter(""Sum(lep_charge[good_lep]) == 0""); .Define(""goodlep_sumtypes"", ""Sum(lep_type[good_lep])""); .Filter(""goodlep_sumtypes == 44 || goodlep_sumtypes == 52 || goodlep_sumtypes == 48""); ); ; # Apply additional cuts depending on lepton flavour; df = df.Filter(; ""GoodElectronsAndMuons(lep_type[good_lep], lep_pt[good_lep], lep_eta[good_lep], lep_phi[good_lep], lep_E[good_lep], lep_trackd0pvunbiased[good_lep], lep_tracksigd0pvunbiased[good_lep], lep_z0[good_lep])""; ); ; # Create new columns with the kinematics of good leptons; df = (; df.Define(""goodlep_pt"", ""lep_pt[good_lep]""); .Define(""goodlep_eta"", ""lep_eta[good_lep]""); .Define(""goodlep_phi"", ""lep_phi[good_lep]""); .Define(""goodlep_E"", ""lep_E[good_lep]""); .Define(""goodlep_type"", ""lep_type[good_lep]""); ); ; # Select leptons with high transverse momentum; df = df.Filter(""goodlep_pt[0] > 25000 && goodlep_pt[1] > 15000 && goodlep_pt[2] > 10000""); ; # Reweighting of the samples is different for ""data"" and ""MC"". This is the function to add reweighting for MC samples; ROOT.gInterpreter.Declare(; """"""; double weights(float scaleFactor_1, float scaleFactor_2, float scaleFactor_3, float scaleFactor_4, float scale, float ",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py.html
Modifiability,config,config," and subsequently to four leptons is called the ""golden channel"". The selection leads to a narrow invariant mass peak on top a relatively smooth and small background, revealing the Higgs at 125 GeV. Systematic errors for the MC scale factors are computed and the Vary function of RDataFrame is used for plotting. The analysis is translated to an RDataFrame workflow processing about 300 MB of simulated events and data.; See the corresponding spec json file. ; import ROOT; import os; ; # Enable Multi-threaded mode; ROOT.EnableImplicitMT(); ; # Create the RDataFrame from the spec json file. The df106_HiggsToFourLeptons_spec.json is provided in the same folder as this tutorial; dataset_spec = os.path.join(ROOT.gROOT.GetTutorialsDir(), ""dataframe"", ""df106_HiggsToFourLeptons_spec.json""); df = ROOT.RDF.Experimental.FromSpec(dataset_spec) # Creates a single dataframe for all the samples; ; # Add the ProgressBar feature; ROOT.RDF.Experimental.AddProgressBar(df); ; # Access metadata information that is stored in the JSON config file of the RDataFrame.; # The metadata contained in the JSON file is accessible within a `DefinePerSample` call, through the `RSampleInfo` class.; df = df.DefinePerSample(""xsecs"", 'rdfsampleinfo_.GetD(""xsecs"")'); df = df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); df = df.DefinePerSample(""sumws"", 'rdfsampleinfo_.GetD(""sumws"")'); df = df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); ; # We must further apply an MC correction for the ZZ decay due to missing gg->ZZ processes.; ROOT.gInterpreter.Declare(; """"""; float scale(unsigned int slot, const ROOT::RDF::RSampleInfo &id){; return id.Contains(""mc_363490.llll.4lep.root"") ? 1.3f : 1.0f;; }; """"""; ); ; df = df.DefinePerSample(""scale"", ""scale(rdfslot_, rdfsampleinfo_)""); ; # Select events for the analysis; ROOT.gInterpreter.Declare(; """"""; using ROOT::RVecF;; using ROOT::RVecI;; bool GoodElectronsAndMuons(const RVecI &type, const RVecF &pt, const RVecF &eta, const RVec",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py.html
Performance,perform,performed,"nty based on the variations.; # No computation graph was triggered yet, we trigger the computation graph for all histograms at once now,; # by calling 'histos_mc[""nominal""].GetXaxis()'.; # Note, in this case the uncertainties are symmetric.; for i in range(0, histos_mc[""nominal""].GetXaxis().GetNbins()):; (; histos_mc[""nominal""].SetBinError(; i, (histos_mc[""weight:up""].GetBinContent(i) - histos_mc[""nominal""].GetBinContent(i)); ); ); ; # Make the plot of the data, individual MC contributions and the total MC scale factor systematic variations.; ; # Set styles; ROOT.gROOT.SetStyle(""ATLAS""); ; # Create canvas with pad; c1 = ROOT.TCanvas(""c"", """", 600, 600); pad = ROOT.TPad(""upper_pad"", """", 0, 0, 1, 1); pad.SetTickx(False); pad.SetTicky(False); pad.Draw(); pad.cd(); ; # Draw stack with MC contributions; stack = ROOT.THStack(); ; # Retrieve values of the data and MC histograms in order to plot them.; # Draw cloned histograms to preserve graphics when original objects goes out of scope; # Note: GetValue() action operation is performed after all lazy actions of the RDF were defined first.; h_data = histos[0].GetValue().Clone(); h_higgs = histos[1].GetValue().Clone(); h_zz = histos[2].GetValue().Clone(); h_other = histos[3].GetValue().Clone(); ; for h, color in zip([h_other, h_zz, h_higgs], [ROOT.kViolet - 9, ROOT.kAzure - 9, ROOT.kRed + 2]):; h.SetLineWidth(1); h.SetLineColor(1); h.SetFillColor(color); stack.Add(h); ; stack.Draw(""HIST""); stack.GetXaxis().SetLabelSize(0.04); stack.GetXaxis().SetTitleSize(0.045); stack.GetXaxis().SetTitleOffset(1.3); stack.GetXaxis().SetTitle(""m_{4l}^{H#rightarrow ZZ} [GeV]""); stack.GetYaxis().SetLabelSize(0.04); stack.GetYaxis().SetTitleSize(0.045); stack.GetYaxis().SetTitle(""Events""); stack.SetMaximum(35); stack.GetYaxis().ChangeLabel(1, -1, 0); ; # Draw MC scale factor and variations; histos_mc[""nominal""].SetFillColor(ROOT.kBlack); histos_mc[""nominal""].SetFillStyle(3254); h_nominal = histos_mc[""nominal""].DrawClone(""E2 same""); histos_mc[""weig",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py.html
Safety,detect,detector,". ROOT: tutorials/dataframe/df106_HiggsToFourLeptons.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df106_HiggsToFourLeptons.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame. ; This tutorial is the Higgs to four lepton analysis from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. The decay of the Standard Model Higgs boson to two Z bosons and subsequently to four leptons is called the ""golden channel"". The selection leads to a narrow invariant mass peak on top a relatively smooth and small background, revealing the Higgs at 125 GeV. Systematic errors for the MC scale factors are computed and the Vary function of RDataFrame is used for plotting. The analysis is translated to an RDataFrame workflow processing about 300 MB of simulated events and data.; See the corresponding spec json file. ; import ROOT; import os; ; # Enable Multi-threaded mode; ROOT.EnableImplicitMT(); ; # Create the RDataFrame from the spec json file. The df106_HiggsToFourLeptons_spec.json is provided in the same folder as this tutorial; dataset_spec = os.path.join(ROOT.gROOT.GetTutorialsDir(), ""dataframe"", ""df106_HiggsToFourLeptons_spec.json""); df = ROOT.RDF.Experimental.FromSpec(dataset_spec) # Creates a single dataframe for all the samples; ; # Add the ProgressBar feature; ROOT.RDF.Experimental.AddProgressBar(df); ; # Access metadata information that is stored in the JSON config file of the RDataFrame.; # The metadata contained in the JSON file is accessible within a `DefinePerSample` call, through the `RSampleInfo` class.; df = df.DefinePerSample(""xsecs"", 'rdfsampleinfo_.GetD(""xsecs"")'); df = df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); df = df.DefinePerSample(""sumws""",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py.html
Security,access,accessible,"k on top a relatively smooth and small background, revealing the Higgs at 125 GeV. Systematic errors for the MC scale factors are computed and the Vary function of RDataFrame is used for plotting. The analysis is translated to an RDataFrame workflow processing about 300 MB of simulated events and data.; See the corresponding spec json file. ; import ROOT; import os; ; # Enable Multi-threaded mode; ROOT.EnableImplicitMT(); ; # Create the RDataFrame from the spec json file. The df106_HiggsToFourLeptons_spec.json is provided in the same folder as this tutorial; dataset_spec = os.path.join(ROOT.gROOT.GetTutorialsDir(), ""dataframe"", ""df106_HiggsToFourLeptons_spec.json""); df = ROOT.RDF.Experimental.FromSpec(dataset_spec) # Creates a single dataframe for all the samples; ; # Add the ProgressBar feature; ROOT.RDF.Experimental.AddProgressBar(df); ; # Access metadata information that is stored in the JSON config file of the RDataFrame.; # The metadata contained in the JSON file is accessible within a `DefinePerSample` call, through the `RSampleInfo` class.; df = df.DefinePerSample(""xsecs"", 'rdfsampleinfo_.GetD(""xsecs"")'); df = df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); df = df.DefinePerSample(""sumws"", 'rdfsampleinfo_.GetD(""sumws"")'); df = df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); ; # We must further apply an MC correction for the ZZ decay due to missing gg->ZZ processes.; ROOT.gInterpreter.Declare(; """"""; float scale(unsigned int slot, const ROOT::RDF::RSampleInfo &id){; return id.Contains(""mc_363490.llll.4lep.root"") ? 1.3f : 1.0f;; }; """"""; ); ; df = df.DefinePerSample(""scale"", ""scale(rdfslot_, rdfsampleinfo_)""); ; # Select events for the analysis; ROOT.gInterpreter.Declare(; """"""; using ROOT::RVecF;; using ROOT::RVecI;; bool GoodElectronsAndMuons(const RVecI &type, const RVecF &pt, const RVecF &eta, const RVecF &phi, const RVecF &e, const RVecF &trackd0pv, const RVecF &tracksigd0pv, const RVecF &z0); {; for (size_t i = 0; i",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py.html
Availability,error,errors,". ROOT: tutorials/dataframe/df106_HiggsToFourLeptons.py Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df106_HiggsToFourLeptons.py. Go to the documentation of this file. 1## \file; 2## \ingroup tutorial_dataframe; 3## \notebook -draw; 4## The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame.; 5##; 6## This tutorial is the Higgs to four lepton analysis from the ATLAS Open Data release in 2020; 7## (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector; 8## during 2016 at a center-of-mass energy of 13 TeV. The decay of the Standard Model Higgs boson; 9## to two Z bosons and subsequently to four leptons is called the ""golden channel"". The selection leads; 10## to a narrow invariant mass peak on top a relatively smooth and small background, revealing; 11## the Higgs at 125 GeV.; 12## Systematic errors for the MC scale factors are computed and the Vary function of RDataFrame is used for plotting.; 13## The analysis is translated to an RDataFrame workflow processing about 300 MB of simulated events and data.; 14##; 15## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df106_HiggsToFourLeptons_spec.json).; 16##; 17## \macro_image; 18## \macro_code; 19## \macro_output; 20##; 21## \date March 2020, August 2022, August 2023; 22## \authors Stefan Wunsch (KIT, CERN), Julia Mathe (CERN), Marta Czurylo (CERN); 23 ; 24import ROOT; 25import os; 26 ; 27# Enable Multi-threaded mode; 28ROOT.EnableImplicitMT(); 29 ; 30# Create the RDataFrame from the spec json file. The df106_HiggsToFourLeptons_spec.json is provided in the same folder as this tutorial; 31dataset_spec = os.path.join(ROOT.gROOT.GetTutorialsDir(), ""dataframe"", ""df106_HiggsToFourLeptons_spec.json""); 32df = ROOT.RDF.Experimental.FromSpec(dataset_spec) # Creates a single dataframe for all the samples; 33 ; 34# Add the ProgressBar feature;",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py_source.html
Deployability,release,release,". ROOT: tutorials/dataframe/df106_HiggsToFourLeptons.py Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df106_HiggsToFourLeptons.py. Go to the documentation of this file. 1## \file; 2## \ingroup tutorial_dataframe; 3## \notebook -draw; 4## The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame.; 5##; 6## This tutorial is the Higgs to four lepton analysis from the ATLAS Open Data release in 2020; 7## (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector; 8## during 2016 at a center-of-mass energy of 13 TeV. The decay of the Standard Model Higgs boson; 9## to two Z bosons and subsequently to four leptons is called the ""golden channel"". The selection leads; 10## to a narrow invariant mass peak on top a relatively smooth and small background, revealing; 11## the Higgs at 125 GeV.; 12## Systematic errors for the MC scale factors are computed and the Vary function of RDataFrame is used for plotting.; 13## The analysis is translated to an RDataFrame workflow processing about 300 MB of simulated events and data.; 14##; 15## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df106_HiggsToFourLeptons_spec.json).; 16##; 17## \macro_image; 18## \macro_code; 19## \macro_output; 20##; 21## \date March 2020, August 2022, August 2023; 22## \authors Stefan Wunsch (KIT, CERN), Julia Mathe (CERN), Marta Czurylo (CERN); 23 ; 24import ROOT; 25import os; 26 ; 27# Enable Multi-threaded mode; 28ROOT.EnableImplicitMT(); 29 ; 30# Create the RDataFrame from the spec json file. The df106_HiggsToFourLeptons_spec.json is provided in the same folder as this tutorial; 31dataset_spec = os.path.join(ROOT.gROOT.GetTutorialsDir(), ""dataframe"", ""df106_HiggsToFourLeptons_spec.json""); 32df = ROOT.RDF.Experimental.FromSpec(dataset_spec) # Creates a single dataframe for all the samples; 33 ; 34# Add the ProgressBar feature;",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py_source.html
Energy Efficiency,energy,energy,". ROOT: tutorials/dataframe/df106_HiggsToFourLeptons.py Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df106_HiggsToFourLeptons.py. Go to the documentation of this file. 1## \file; 2## \ingroup tutorial_dataframe; 3## \notebook -draw; 4## The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame.; 5##; 6## This tutorial is the Higgs to four lepton analysis from the ATLAS Open Data release in 2020; 7## (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector; 8## during 2016 at a center-of-mass energy of 13 TeV. The decay of the Standard Model Higgs boson; 9## to two Z bosons and subsequently to four leptons is called the ""golden channel"". The selection leads; 10## to a narrow invariant mass peak on top a relatively smooth and small background, revealing; 11## the Higgs at 125 GeV.; 12## Systematic errors for the MC scale factors are computed and the Vary function of RDataFrame is used for plotting.; 13## The analysis is translated to an RDataFrame workflow processing about 300 MB of simulated events and data.; 14##; 15## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df106_HiggsToFourLeptons_spec.json).; 16##; 17## \macro_image; 18## \macro_code; 19## \macro_output; 20##; 21## \date March 2020, August 2022, August 2023; 22## \authors Stefan Wunsch (KIT, CERN), Julia Mathe (CERN), Marta Czurylo (CERN); 23 ; 24import ROOT; 25import os; 26 ; 27# Enable Multi-threaded mode; 28ROOT.EnableImplicitMT(); 29 ; 30# Create the RDataFrame from the spec json file. The df106_HiggsToFourLeptons_spec.json is provided in the same folder as this tutorial; 31dataset_spec = os.path.join(ROOT.gROOT.GetTutorialsDir(), ""dataframe"", ""df106_HiggsToFourLeptons_spec.json""); 32df = ROOT.RDF.Experimental.FromSpec(dataset_spec) # Creates a single dataframe for all the samples; 33 ; 34# Add the ProgressBar feature;",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py_source.html
Integrability,depend,depending,"rackd0pv[i] / tracksigd0pv[i]) > 5 || abs(z0[i] * sin(p.Theta())) > 0.5) return false;; 66 } else {; 67 if (abs(trackd0pv[i] / tracksigd0pv[i]) > 5 || abs(z0[i] * sin(p.Theta())) > 0.5) return false;; 68 }; 69 }; 70 return true;; 71}; 72""""""; 73); 74 ; 75# Select electron or muon trigger; 76df = df.Filter(""trigE || trigM""); 77 ; 78# Select events with exactly four good leptons conserving charge and lepton numbers; 79# Note that all collections are RVecs and good_lep is the mask for the good leptons.; 80# The lepton types are PDG numbers and set to 11 or 13 for an electron or muon; 81# irrespective of the charge.; 82 ; 83df = (; 84 df.Define(; 85 ""good_lep"",; 86 ""abs(lep_eta) < 2.5 && lep_pt > 5000 && lep_ptcone30 / lep_pt < 0.3 && lep_etcone20 / lep_pt < 0.3"",; 87 ); 88 .Filter(""Sum(good_lep) == 4""); 89 .Filter(""Sum(lep_charge[good_lep]) == 0""); 90 .Define(""goodlep_sumtypes"", ""Sum(lep_type[good_lep])""); 91 .Filter(""goodlep_sumtypes == 44 || goodlep_sumtypes == 52 || goodlep_sumtypes == 48""); 92); 93 ; 94# Apply additional cuts depending on lepton flavour; 95df = df.Filter(; 96 ""GoodElectronsAndMuons(lep_type[good_lep], lep_pt[good_lep], lep_eta[good_lep], lep_phi[good_lep], lep_E[good_lep], lep_trackd0pvunbiased[good_lep], lep_tracksigd0pvunbiased[good_lep], lep_z0[good_lep])""; 97); 98 ; 99# Create new columns with the kinematics of good leptons; 100df = (; 101 df.Define(""goodlep_pt"", ""lep_pt[good_lep]""); 102 .Define(""goodlep_eta"", ""lep_eta[good_lep]""); 103 .Define(""goodlep_phi"", ""lep_phi[good_lep]""); 104 .Define(""goodlep_E"", ""lep_E[good_lep]""); 105 .Define(""goodlep_type"", ""lep_type[good_lep]""); 106); 107 ; 108# Select leptons with high transverse momentum; 109df = df.Filter(""goodlep_pt[0] > 25000 && goodlep_pt[1] > 15000 && goodlep_pt[2] > 10000""); 110 ; 111# Reweighting of the samples is different for ""data"" and ""MC"". This is the function to add reweighting for MC samples; 112ROOT.gInterpreter.Declare(; 113 """"""; 114double weights(float scaleFactor_1, float scaleFact",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py_source.html
Modifiability,config,config,"ame workflow processing about 300 MB of simulated events and data.; 14##; 15## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df106_HiggsToFourLeptons_spec.json).; 16##; 17## \macro_image; 18## \macro_code; 19## \macro_output; 20##; 21## \date March 2020, August 2022, August 2023; 22## \authors Stefan Wunsch (KIT, CERN), Julia Mathe (CERN), Marta Czurylo (CERN); 23 ; 24import ROOT; 25import os; 26 ; 27# Enable Multi-threaded mode; 28ROOT.EnableImplicitMT(); 29 ; 30# Create the RDataFrame from the spec json file. The df106_HiggsToFourLeptons_spec.json is provided in the same folder as this tutorial; 31dataset_spec = os.path.join(ROOT.gROOT.GetTutorialsDir(), ""dataframe"", ""df106_HiggsToFourLeptons_spec.json""); 32df = ROOT.RDF.Experimental.FromSpec(dataset_spec) # Creates a single dataframe for all the samples; 33 ; 34# Add the ProgressBar feature; 35ROOT.RDF.Experimental.AddProgressBar(df); 36 ; 37# Access metadata information that is stored in the JSON config file of the RDataFrame.; 38# The metadata contained in the JSON file is accessible within a `DefinePerSample` call, through the `RSampleInfo` class.; 39df = df.DefinePerSample(""xsecs"", 'rdfsampleinfo_.GetD(""xsecs"")'); 40df = df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); 41df = df.DefinePerSample(""sumws"", 'rdfsampleinfo_.GetD(""sumws"")'); 42df = df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); 43 ; 44# We must further apply an MC correction for the ZZ decay due to missing gg->ZZ processes.; 45ROOT.gInterpreter.Declare(; 46 """"""; 47float scale(unsigned int slot, const ROOT::RDF::RSampleInfo &id){; 48 return id.Contains(""mc_363490.llll.4lep.root"") ? 1.3f : 1.0f;; 49}; 50""""""; 51); 52 ; 53df = df.DefinePerSample(""scale"", ""scale(rdfslot_, rdfsampleinfo_)""); 54 ; 55# Select events for the analysis; 56ROOT.gInterpreter.Declare(; 57 """"""; 58using ROOT::RVecF;; 59using ROOT::RVecI;; 60bool GoodElectronsAndMuons(const RVe",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py_source.html
Performance,perform,performed,"utation graph for all histograms at once now,; 202# by calling 'histos_mc[""nominal""].GetXaxis()'.; 203# Note, in this case the uncertainties are symmetric.; 204for i in range(0, histos_mc[""nominal""].GetXaxis().GetNbins()):; 205 (; 206 histos_mc[""nominal""].SetBinError(; 207 i, (histos_mc[""weight:up""].GetBinContent(i) - histos_mc[""nominal""].GetBinContent(i)); 208 ); 209 ); 210 ; 211# Make the plot of the data, individual MC contributions and the total MC scale factor systematic variations.; 212 ; 213# Set styles; 214ROOT.gROOT.SetStyle(""ATLAS""); 215 ; 216# Create canvas with pad; 217c1 = ROOT.TCanvas(""c"", """", 600, 600); 218pad = ROOT.TPad(""upper_pad"", """", 0, 0, 1, 1); 219pad.SetTickx(False); 220pad.SetTicky(False); 221pad.Draw(); 222pad.cd(); 223 ; 224# Draw stack with MC contributions; 225stack = ROOT.THStack(); 226 ; 227# Retrieve values of the data and MC histograms in order to plot them.; 228# Draw cloned histograms to preserve graphics when original objects goes out of scope; 229# Note: GetValue() action operation is performed after all lazy actions of the RDF were defined first.; 230h_data = histos[0].GetValue().Clone(); 231h_higgs = histos[1].GetValue().Clone(); 232h_zz = histos[2].GetValue().Clone(); 233h_other = histos[3].GetValue().Clone(); 234 ; 235for h, color in zip([h_other, h_zz, h_higgs], [ROOT.kViolet - 9, ROOT.kAzure - 9, ROOT.kRed + 2]):; 236 h.SetLineWidth(1); 237 h.SetLineColor(1); 238 h.SetFillColor(color); 239 stack.Add(h); 240 ; 241stack.Draw(""HIST""); 242stack.GetXaxis().SetLabelSize(0.04); 243stack.GetXaxis().SetTitleSize(0.045); 244stack.GetXaxis().SetTitleOffset(1.3); 245stack.GetXaxis().SetTitle(""m_{4l}^{H#rightarrow ZZ} [GeV]""); 246stack.GetYaxis().SetLabelSize(0.04); 247stack.GetYaxis().SetTitleSize(0.045); 248stack.GetYaxis().SetTitle(""Events""); 249stack.SetMaximum(35); 250stack.GetYaxis().ChangeLabel(1, -1, 0); 251 ; 252# Draw MC scale factor and variations; 253histos_mc[""nominal""].SetFillColor(ROOT.kBlack); 254histos_mc[""nominal""].SetFi",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py_source.html
Safety,detect,detector,". ROOT: tutorials/dataframe/df106_HiggsToFourLeptons.py Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. df106_HiggsToFourLeptons.py. Go to the documentation of this file. 1## \file; 2## \ingroup tutorial_dataframe; 3## \notebook -draw; 4## The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame.; 5##; 6## This tutorial is the Higgs to four lepton analysis from the ATLAS Open Data release in 2020; 7## (http://opendata.atlas.cern/release/2020/documentation/). The data was taken with the ATLAS detector; 8## during 2016 at a center-of-mass energy of 13 TeV. The decay of the Standard Model Higgs boson; 9## to two Z bosons and subsequently to four leptons is called the ""golden channel"". The selection leads; 10## to a narrow invariant mass peak on top a relatively smooth and small background, revealing; 11## the Higgs at 125 GeV.; 12## Systematic errors for the MC scale factors are computed and the Vary function of RDataFrame is used for plotting.; 13## The analysis is translated to an RDataFrame workflow processing about 300 MB of simulated events and data.; 14##; 15## See the [corresponding spec json file](https://github.com/root-project/root/blob/master/tutorials/dataframe/df106_HiggsToFourLeptons_spec.json).; 16##; 17## \macro_image; 18## \macro_code; 19## \macro_output; 20##; 21## \date March 2020, August 2022, August 2023; 22## \authors Stefan Wunsch (KIT, CERN), Julia Mathe (CERN), Marta Czurylo (CERN); 23 ; 24import ROOT; 25import os; 26 ; 27# Enable Multi-threaded mode; 28ROOT.EnableImplicitMT(); 29 ; 30# Create the RDataFrame from the spec json file. The df106_HiggsToFourLeptons_spec.json is provided in the same folder as this tutorial; 31dataset_spec = os.path.join(ROOT.gROOT.GetTutorialsDir(), ""dataframe"", ""df106_HiggsToFourLeptons_spec.json""); 32df = ROOT.RDF.Experimental.FromSpec(dataset_spec) # Creates a single dataframe for all the samples; 33 ; 34# Add the ProgressBar feature;",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py_source.html
Security,access,accessible,"ttps://github.com/root-project/root/blob/master/tutorials/dataframe/df106_HiggsToFourLeptons_spec.json).; 16##; 17## \macro_image; 18## \macro_code; 19## \macro_output; 20##; 21## \date March 2020, August 2022, August 2023; 22## \authors Stefan Wunsch (KIT, CERN), Julia Mathe (CERN), Marta Czurylo (CERN); 23 ; 24import ROOT; 25import os; 26 ; 27# Enable Multi-threaded mode; 28ROOT.EnableImplicitMT(); 29 ; 30# Create the RDataFrame from the spec json file. The df106_HiggsToFourLeptons_spec.json is provided in the same folder as this tutorial; 31dataset_spec = os.path.join(ROOT.gROOT.GetTutorialsDir(), ""dataframe"", ""df106_HiggsToFourLeptons_spec.json""); 32df = ROOT.RDF.Experimental.FromSpec(dataset_spec) # Creates a single dataframe for all the samples; 33 ; 34# Add the ProgressBar feature; 35ROOT.RDF.Experimental.AddProgressBar(df); 36 ; 37# Access metadata information that is stored in the JSON config file of the RDataFrame.; 38# The metadata contained in the JSON file is accessible within a `DefinePerSample` call, through the `RSampleInfo` class.; 39df = df.DefinePerSample(""xsecs"", 'rdfsampleinfo_.GetD(""xsecs"")'); 40df = df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); 41df = df.DefinePerSample(""sumws"", 'rdfsampleinfo_.GetD(""sumws"")'); 42df = df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_category"")'); 43 ; 44# We must further apply an MC correction for the ZZ decay due to missing gg->ZZ processes.; 45ROOT.gInterpreter.Declare(; 46 """"""; 47float scale(unsigned int slot, const ROOT::RDF::RSampleInfo &id){; 48 return id.Contains(""mc_363490.llll.4lep.root"") ? 1.3f : 1.0f;; 49}; 50""""""; 51); 52 ; 53df = df.DefinePerSample(""scale"", ""scale(rdfslot_, rdfsampleinfo_)""); 54 ; 55# Select events for the analysis; 56ROOT.gInterpreter.Declare(; 57 """"""; 58using ROOT::RVecF;; 59using ROOT::RVecI;; 60bool GoodElectronsAndMuons(const RVecI &type, const RVecF &pt, const RVecF &eta, const RVecF &phi, const RVecF &e, const RVecF &trackd0pv, const RVecF &trac",MatchSource.WIKI,doc/master/df106__HiggsToFourLeptons_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py_source.html
Availability,avail,available,"production adapted from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. Top quarks with a mass of about 172 GeV are mostly produced in pairs but also appear alone, dominantly from the decays of a W boson in association with a light jet.; The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data. By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with the –full-dataset argument and you can also run only on a fraction of the original dataset using the argument –lumi-scale.; See the corresponding spec json file. ; import ROOT; import sys; import json; import argparse; import os; ; # Argument parsing; parser = argparse.ArgumentParser(); parser.add_argument(""--lumi-scale"", type=float, default=0.05,; help=""Run only on a fraction of the total available 10 fb^-1 (only usable together with --full-dataset)""); parser.add_argument(""--full-dataset"", action=""store_true"", default=False,; help=""Use the full dataset (use --lumi-scale to run only on a fraction of it)""); parser.add_argument(""-b"", action=""store_true"", default=False, help=""Use ROOT batch mode""); parser.add_argument(""-t"", action=""store_true"", default=False, help=""Use implicit multi threading (for the full dataset only possible with --lumi-scale 1.0)""); if 'df107_SingleTopAnalysis.py' in sys.argv[0]:; # Script; args = parser.parse_args(); else:; # Notebook; args = parser.parse_args(args=[]); ; if args.b: ROOT.gROOT.SetBatch(True); if args.t: ROOT.EnableImplicitMT(); ; if not args.full_dataset: lumi_scale = 0.05 # The preskimmed dataset contains only 0.5 fb^-1; else: lumi_scale = args.lumi_scale; lumi = 10064.0; print('Run on data corresponding to {:.1f} fb^-1 ...'.format(lumi * lumi_scale / 1000.0)); ; if args.full_dataset: dataset_path = ""root://eospublic.cern.ch//eos/opendata/atlas/O",MatchSource.WIKI,doc/master/df107__SingleTopAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df107__SingleTopAnalysis_8py.html
Deployability,release,release,". ROOT: tutorials/dataframe/df107_SingleTopAnalysis.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df107_SingleTopAnalysis.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; A single top analysis using the ATLAS Open Data release of 2020, with RDataFrame. ; This tutorial is the analysis of single top production adapted from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. Top quarks with a mass of about 172 GeV are mostly produced in pairs but also appear alone, dominantly from the decays of a W boson in association with a light jet.; The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data. By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with the –full-dataset argument and you can also run only on a fraction of the original dataset using the argument –lumi-scale.; See the corresponding spec json file. ; import ROOT; import sys; import json; import argparse; import os; ; # Argument parsing; parser = argparse.ArgumentParser(); parser.add_argument(""--lumi-scale"", type=float, default=0.05,; help=""Run only on a fraction of the total available 10 fb^-1 (only usable together with --full-dataset)""); parser.add_argument(""--full-dataset"", action=""store_true"", default=False,; help=""Use the full dataset (use --lumi-scale to run only on a fraction of it)""); parser.add_argument(""-b"", action=""store_true"", default=False, help=""Use ROOT batch mode""); parser.add_argument(""-t"", action=""store_true"", default=False, help=""Use implicit multi threading (for the full dataset only possible with --lumi-scale 1.0)""); if 'df107_SingleTopAnalysis.py' in sys.argv[0]:; # Script; args = parser.parse_args(); else:; # Notebook; args = parser.parse_args(args=[]); ; if args.b:",MatchSource.WIKI,doc/master/df107__SingleTopAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df107__SingleTopAnalysis_8py.html
Energy Efficiency,adapt,adapted,". ROOT: tutorials/dataframe/df107_SingleTopAnalysis.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df107_SingleTopAnalysis.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; A single top analysis using the ATLAS Open Data release of 2020, with RDataFrame. ; This tutorial is the analysis of single top production adapted from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. Top quarks with a mass of about 172 GeV are mostly produced in pairs but also appear alone, dominantly from the decays of a W boson in association with a light jet.; The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data. By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with the –full-dataset argument and you can also run only on a fraction of the original dataset using the argument –lumi-scale.; See the corresponding spec json file. ; import ROOT; import sys; import json; import argparse; import os; ; # Argument parsing; parser = argparse.ArgumentParser(); parser.add_argument(""--lumi-scale"", type=float, default=0.05,; help=""Run only on a fraction of the total available 10 fb^-1 (only usable together with --full-dataset)""); parser.add_argument(""--full-dataset"", action=""store_true"", default=False,; help=""Use the full dataset (use --lumi-scale to run only on a fraction of it)""); parser.add_argument(""-b"", action=""store_true"", default=False, help=""Use ROOT batch mode""); parser.add_argument(""-t"", action=""store_true"", default=False, help=""Use implicit multi threading (for the full dataset only possible with --lumi-scale 1.0)""); if 'df107_SingleTopAnalysis.py' in sys.argv[0]:; # Script; args = parser.parse_args(); else:; # Notebook; args = parser.parse_args(args=[]); ; if args.b:",MatchSource.WIKI,doc/master/df107__SingleTopAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df107__SingleTopAnalysis_8py.html
Integrability,interface,interface,", ""#sqrt{{s}} = 13 TeV, {:.1f} fb^{{-1}}"".format(lumi * lumi_scale / 1000.0)); ; # Save the plot; c.SaveAs(""df107_SingleTopAnalysis.png""); print(""Saved figure to df107_SingleTopAnalysis.png""); formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProxy.cxx:249; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; int; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; ROOT::RDF::TH1DModelA struct which stores the parameters of a TH1D.Definition HistoModels.hxx:30; RangeTa Range(0, 0, 1, 1); Run on data corresponding to 0.5 fb^-1 ...; Saved figure to df107_SingleTopAnalysis.png; DateJuly 2020 ; AuthorStefan Wunsch (KIT, CERN) ; Definition in file df107_SingleTopAnalysis.py. tutorialsdataframedf107_SingleTopAnalysis.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/df107__SingleTopAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df107__SingleTopAnalysis_8py.html
Modifiability,adapt,adapted,". ROOT: tutorials/dataframe/df107_SingleTopAnalysis.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df107_SingleTopAnalysis.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; A single top analysis using the ATLAS Open Data release of 2020, with RDataFrame. ; This tutorial is the analysis of single top production adapted from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. Top quarks with a mass of about 172 GeV are mostly produced in pairs but also appear alone, dominantly from the decays of a W boson in association with a light jet.; The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data. By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with the –full-dataset argument and you can also run only on a fraction of the original dataset using the argument –lumi-scale.; See the corresponding spec json file. ; import ROOT; import sys; import json; import argparse; import os; ; # Argument parsing; parser = argparse.ArgumentParser(); parser.add_argument(""--lumi-scale"", type=float, default=0.05,; help=""Run only on a fraction of the total available 10 fb^-1 (only usable together with --full-dataset)""); parser.add_argument(""--full-dataset"", action=""store_true"", default=False,; help=""Use the full dataset (use --lumi-scale to run only on a fraction of it)""); parser.add_argument(""-b"", action=""store_true"", default=False, help=""Use ROOT batch mode""); parser.add_argument(""-t"", action=""store_true"", default=False, help=""Use implicit multi threading (for the full dataset only possible with --lumi-scale 1.0)""); if 'df107_SingleTopAnalysis.py' in sys.argv[0]:; # Script; args = parser.parse_args(); else:; # Notebook; args = parser.parse_args(args=[]); ; if args.b:",MatchSource.WIKI,doc/master/df107__SingleTopAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df107__SingleTopAnalysis_8py.html
Performance,load,load," run only on a fraction of it)""); parser.add_argument(""-b"", action=""store_true"", default=False, help=""Use ROOT batch mode""); parser.add_argument(""-t"", action=""store_true"", default=False, help=""Use implicit multi threading (for the full dataset only possible with --lumi-scale 1.0)""); if 'df107_SingleTopAnalysis.py' in sys.argv[0]:; # Script; args = parser.parse_args(); else:; # Notebook; args = parser.parse_args(args=[]); ; if args.b: ROOT.gROOT.SetBatch(True); if args.t: ROOT.EnableImplicitMT(); ; if not args.full_dataset: lumi_scale = 0.05 # The preskimmed dataset contains only 0.5 fb^-1; else: lumi_scale = args.lumi_scale; lumi = 10064.0; print('Run on data corresponding to {:.1f} fb^-1 ...'.format(lumi * lumi_scale / 1000.0)); ; if args.full_dataset: dataset_path = ""root://eospublic.cern.ch//eos/opendata/atlas/OutreachDatasets/2020-01-22""; else: dataset_path = ""root://eospublic.cern.ch//eos/root-eos/reduced_atlas_opendata/singletop""; ; # Create a ROOT dataframe for each dataset; # Note that we load the filenames from the external json file placed in the same folder than this script.; files = json.load(open(os.path.join(ROOT.gROOT.GetTutorialsDir(), ""dataframe/df107_SingleTopAnalysis.json""))); processes = files.keys(); df = {}; xsecs = {}; sumws = {}; samples = []; for p in processes:; for d in files[p]:; # Construct the dataframes; folder = d[0] # Folder name; sample = d[1] # Sample name; xsecs[sample] = d[2] # Cross-section; sumws[sample] = d[3] # Sum of weights; num_events = d[4] # Number of events; samples.append(sample); df[sample] = ROOT.RDataFrame(""mini"", ""{}/1lep/{}/{}.1lep.root"".format(dataset_path, folder, sample)); ; # Scale down the datasets if requested; if args.full_dataset and lumi_scale < 1.0:; df[sample] = df[sample].Range(int(num_events * lumi_scale)); ; # Select events for the analysis and make histograms of the top mass; ; # Just-in-time compile custom helper function performing complex computations; ROOT.gInterpreter.Declare(""""""; using cRVecF =",MatchSource.WIKI,doc/master/df107__SingleTopAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df107__SingleTopAnalysis_8py.html
Safety,detect,detector,". ROOT: tutorials/dataframe/df107_SingleTopAnalysis.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; df107_SingleTopAnalysis.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; A single top analysis using the ATLAS Open Data release of 2020, with RDataFrame. ; This tutorial is the analysis of single top production adapted from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. Top quarks with a mass of about 172 GeV are mostly produced in pairs but also appear alone, dominantly from the decays of a W boson in association with a light jet.; The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data. By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with the –full-dataset argument and you can also run only on a fraction of the original dataset using the argument –lumi-scale.; See the corresponding spec json file. ; import ROOT; import sys; import json; import argparse; import os; ; # Argument parsing; parser = argparse.ArgumentParser(); parser.add_argument(""--lumi-scale"", type=float, default=0.05,; help=""Run only on a fraction of the total available 10 fb^-1 (only usable together with --full-dataset)""); parser.add_argument(""--full-dataset"", action=""store_true"", default=False,; help=""Use the full dataset (use --lumi-scale to run only on a fraction of it)""); parser.add_argument(""-b"", action=""store_true"", default=False, help=""Use ROOT batch mode""); parser.add_argument(""-t"", action=""store_true"", default=False, help=""Use implicit multi threading (for the full dataset only possible with --lumi-scale 1.0)""); if 'df107_SingleTopAnalysis.py' in sys.argv[0]:; # Script; args = parser.parse_args(); else:; # Notebook; args = parser.parse_args(args=[]); ; if args.b:",MatchSource.WIKI,doc/master/df107__SingleTopAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df107__SingleTopAnalysis_8py.html
Security,validat,validation,"f the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.; ROOT.RDF.RunGraphs([histos[s] for s in samples]); ; def merge_histos(label):; h = None; for i, d in enumerate(files[label]):; t = histos[d[1]].GetValue(); if i == 0: h = t.Clone(); else: h.Add(t); h.SetNameTitle(label, label); return h; ; data = merge_histos(""data""); twtb = merge_histos(""twtb""); singletop = merge_histos(""singletop""); wjets = merge_histos(""wjets""); ; # Create the plot; ; # Set styles; ROOT.gROOT.SetStyle(""ATLAS""); ; # Create canvas with pad; c = ROOT.TCanvas(""c"", """", 600, 600); pad = ROOT.TPad(""upper_pad"", """", 0, 0, 1, 1); pad.SetTickx(False); pad.SetTicky(False); pad.Draw(); pad.cd(); ; # Draw stack with MC contributions; stack = ROOT.THStack(); wjets.Scale(1.1) # Corrected normalization derived from a validation region; for h, color in zip(; [wjets, twtb, singletop],; [(222, 90, 106), (155, 152, 204), (208, 240, 193)]):; h.SetLineWidth(1); h.SetLineColor(1); h.SetFillColor(ROOT.TColor.GetColor(*color)); stack.Add(h); stack.Draw(""HIST""); stack.GetXaxis().SetTitle(""m_{W(l#nu)+b} [GeV]""); stack.GetYaxis().SetTitle(""Events""); stack.GetYaxis().SetLabelSize(0.04); stack.GetYaxis().SetTitleSize(0.045); stack.GetXaxis().SetLabelSize(0.04); stack.GetXaxis().SetTitleSize(0.045); stack.SetMinimum(0); stack.SetMaximum(5000 * lumi_scale); stack.GetYaxis().ChangeLabel(1, -1, 0); ; # Draw data; data.SetMarkerStyle(20); data.SetMarkerSize(1.2); data.SetLineWidth(2); data.SetLineColor(ROOT.kBlack); data.Draw(""E SAME""); ; # Add legend; legend = ROOT.TLegend(0.60, 0.65, 0.92, 0.92); legend.SetTextFont(42); legend.SetFillStyle(0); legend.SetBorderSize(0); legend.SetTextSize(0.035); legend.SetTextAlign(32); legend.AddEntry(data, ""Data"" ,""lep""); legend.AddEntry(singletop, ""Single top + jet"", ""f""); legend.AddEntry(twtb, ""t#bar{t},Wt,t#bar{b}"", ",MatchSource.WIKI,doc/master/df107__SingleTopAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df107__SingleTopAnalysis_8py.html
Usability,usab,usable,"production adapted from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. Top quarks with a mass of about 172 GeV are mostly produced in pairs but also appear alone, dominantly from the decays of a W boson in association with a light jet.; The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data. By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with the –full-dataset argument and you can also run only on a fraction of the original dataset using the argument –lumi-scale.; See the corresponding spec json file. ; import ROOT; import sys; import json; import argparse; import os; ; # Argument parsing; parser = argparse.ArgumentParser(); parser.add_argument(""--lumi-scale"", type=float, default=0.05,; help=""Run only on a fraction of the total available 10 fb^-1 (only usable together with --full-dataset)""); parser.add_argument(""--full-dataset"", action=""store_true"", default=False,; help=""Use the full dataset (use --lumi-scale to run only on a fraction of it)""); parser.add_argument(""-b"", action=""store_true"", default=False, help=""Use ROOT batch mode""); parser.add_argument(""-t"", action=""store_true"", default=False, help=""Use implicit multi threading (for the full dataset only possible with --lumi-scale 1.0)""); if 'df107_SingleTopAnalysis.py' in sys.argv[0]:; # Script; args = parser.parse_args(); else:; # Notebook; args = parser.parse_args(args=[]); ; if args.b: ROOT.gROOT.SetBatch(True); if args.t: ROOT.EnableImplicitMT(); ; if not args.full_dataset: lumi_scale = 0.05 # The preskimmed dataset contains only 0.5 fb^-1; else: lumi_scale = args.lumi_scale; lumi = 10064.0; print('Run on data corresponding to {:.1f} fb^-1 ...'.format(lumi * lumi_scale / 1000.0)); ; if args.full_dataset: dataset_path = ""root://eospublic.cern.ch//eos/opendata/atlas/O",MatchSource.WIKI,doc/master/df107__SingleTopAnalysis_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/df107__SingleTopAnalysis_8py.html
Integrability,rout,routine,"Glebe, L. Moneta 2005; 3 ; 4#ifndef ROOT_Math_Dfactir; 5#define ROOT_Math_Dfactir; 6// ********************************************************************; 7//; 8// source:; 9//; 10// type: source code; 11//; 12// created: 02. Apr 2001; 13//; 14// author: Thorsten Glebe; 15// HERA-B Collaboration; 16// Max-Planck-Institut fuer Kernphysik; 17// Saupfercheckweg 1; 18// 69117 Heidelberg; 19// Germany; 20// E-mail: T.Glebe@mpi-hd.mpg.de; 21//; 22// Description: Determinant of a square matrix, needed for Dfinv(); 23// Code was taken from CERNLIB::kernlib dfact function, translated; 24// from FORTRAN to C++ and optimized.; 25//; 26// changes:; 27// 02 Apr 2001 (TG) creation; 28//; 29// ********************************************************************; 30 ; 31#include <cmath>; 32 ; 33namespace ROOT {; 34 ; 35 namespace Math {; 36 ; 37 ; 38/** Dfactir.; 39 Function to compute the determinant from a square matrix, Det(A) of; 40 dimension idim and order n. A working area ir is returned which is; 41 needed by the Dfinv routine.; 42 ; 43 @author T. Glebe; 44*/; 45template <class Matrix, unsigned int n, unsigned int idim>; 46bool Dfactir(Matrix& rhs, typename Matrix::value_type& det, unsigned int* ir); 47 // int *n, float *a, int *idim, int *ir, int *ifail, float *det, int *jfail); 48{; 49 ; 50#ifdef XXX; 51 if (idim < n || n <= 0) {; 52 return false;; 53 }; 54#endif; 55 ; 56 ; 57 /* Initialized data */; 58 typename Matrix::value_type* a = rhs.Array();; 59 ; 60 /* Local variables */; 61 unsigned int nxch, i, j, k, l;; 62 typename Matrix::value_type p, q, tf;; 63 ; 64 /* Parameter adjustments */; 65 a -= idim + 1;; 66 --ir;; 67 ; 68 /* Function Body */; 69 ; 70 // fact.inc; 71 nxch = 0;; 72 det = 1.;; 73 for (j = 1; j <= n; ++j) {; 74 const unsigned int ji = j * idim;; 75 const unsigned int jj = j + ji;; 76 ; 77 k = j;; 78 p = std::abs(a[jj]);; 79 ; 80 if (j != n) {; 81 for (i = j + 1; i <= n; ++i) {; 82 q = std::abs(a[i + ji]);; 83 if (q > p) {; 84 k = i;; 85 p = q;; 86 }; 8",MatchSource.WIKI,doc/master/Dfactir_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Dfactir_8h_source.html
Modifiability,variab,variables,"translated; 24// from FORTRAN to C++ and optimized.; 25//; 26// changes:; 27// 02 Apr 2001 (TG) creation; 28//; 29// ********************************************************************; 30 ; 31#include <cmath>; 32 ; 33namespace ROOT {; 34 ; 35 namespace Math {; 36 ; 37 ; 38/** Dfactir.; 39 Function to compute the determinant from a square matrix, Det(A) of; 40 dimension idim and order n. A working area ir is returned which is; 41 needed by the Dfinv routine.; 42 ; 43 @author T. Glebe; 44*/; 45template <class Matrix, unsigned int n, unsigned int idim>; 46bool Dfactir(Matrix& rhs, typename Matrix::value_type& det, unsigned int* ir); 47 // int *n, float *a, int *idim, int *ir, int *ifail, float *det, int *jfail); 48{; 49 ; 50#ifdef XXX; 51 if (idim < n || n <= 0) {; 52 return false;; 53 }; 54#endif; 55 ; 56 ; 57 /* Initialized data */; 58 typename Matrix::value_type* a = rhs.Array();; 59 ; 60 /* Local variables */; 61 unsigned int nxch, i, j, k, l;; 62 typename Matrix::value_type p, q, tf;; 63 ; 64 /* Parameter adjustments */; 65 a -= idim + 1;; 66 --ir;; 67 ; 68 /* Function Body */; 69 ; 70 // fact.inc; 71 nxch = 0;; 72 det = 1.;; 73 for (j = 1; j <= n; ++j) {; 74 const unsigned int ji = j * idim;; 75 const unsigned int jj = j + ji;; 76 ; 77 k = j;; 78 p = std::abs(a[jj]);; 79 ; 80 if (j != n) {; 81 for (i = j + 1; i <= n; ++i) {; 82 q = std::abs(a[i + ji]);; 83 if (q > p) {; 84 k = i;; 85 p = q;; 86 }; 87 } // for i; 88 ; 89 if (k != j) {; 90 for (l = 1; l <= n; ++l) {; 91 const unsigned int li = l*idim;; 92 const unsigned int jli = j + li;; 93 const unsigned int kli = k + li;; 94 tf = a[jli];; 95 a[jli] = a[kli];; 96 a[kli] = tf;; 97 } // for l; 98 ++nxch;; 99 ir[nxch] = (j << 12) + k;; 100 } // if k != j; 101 } // if j!=n; 102 ; 103 if (p <= 0.) {; 104 det = 0;; 105 return false;; 106 }; 107 ; 108 det *= a[jj];; 109#ifdef XXX; 110 t = std::abs(det);; 111 if (t < 1e-19 || t > 1e19) {; 112 det = 0;; 113 return false;; 114 }; 115#endif; 116 ; 117 a[jj] = 1. / a[jj];; ",MatchSource.WIKI,doc/master/Dfactir_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Dfactir_8h_source.html
Performance,optimiz,optimized,". ROOT: math/smatrix/inc/Math/Dfactir.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Dfactir.h. Go to the documentation of this file. 1// @(#)root/smatrix:$Id$; 2// Authors: T. Glebe, L. Moneta 2005; 3 ; 4#ifndef ROOT_Math_Dfactir; 5#define ROOT_Math_Dfactir; 6// ********************************************************************; 7//; 8// source:; 9//; 10// type: source code; 11//; 12// created: 02. Apr 2001; 13//; 14// author: Thorsten Glebe; 15// HERA-B Collaboration; 16// Max-Planck-Institut fuer Kernphysik; 17// Saupfercheckweg 1; 18// 69117 Heidelberg; 19// Germany; 20// E-mail: T.Glebe@mpi-hd.mpg.de; 21//; 22// Description: Determinant of a square matrix, needed for Dfinv(); 23// Code was taken from CERNLIB::kernlib dfact function, translated; 24// from FORTRAN to C++ and optimized.; 25//; 26// changes:; 27// 02 Apr 2001 (TG) creation; 28//; 29// ********************************************************************; 30 ; 31#include <cmath>; 32 ; 33namespace ROOT {; 34 ; 35 namespace Math {; 36 ; 37 ; 38/** Dfactir.; 39 Function to compute the determinant from a square matrix, Det(A) of; 40 dimension idim and order n. A working area ir is returned which is; 41 needed by the Dfinv routine.; 42 ; 43 @author T. Glebe; 44*/; 45template <class Matrix, unsigned int n, unsigned int idim>; 46bool Dfactir(Matrix& rhs, typename Matrix::value_type& det, unsigned int* ir); 47 // int *n, float *a, int *idim, int *ir, int *ifail, float *det, int *jfail); 48{; 49 ; 50#ifdef XXX; 51 if (idim < n || n <= 0) {; 52 return false;; 53 }; 54#endif; 55 ; 56 ; 57 /* Initialized data */; 58 typename Matrix::value_type* a = rhs.Array();; 59 ; 60 /* Local variables */; 61 unsigned int nxch, i, j, k, l;; 62 typename Matrix::value_type p, q, tf;; 63 ; 64 /* Parameter adjustments */; 65 a -= idim + 1;; 66 --ir;; 67 ; 68 /* Function Body */; 69 ; 70 // fact.inc; 71 nxch = 0;; 72 det = 1.;; 73 for (j = 1; j <= n; ++j) {; 74 const unsigned int j",MatchSource.WIKI,doc/master/Dfactir_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Dfactir_8h_source.html
Integrability,rout,routine,"#)root/smatrix:$Id$; 2// Authors: T. Glebe, L. Moneta 2005; 3 ; 4#ifndef ROOT_Math_Dfinv; 5#define ROOT_Math_Dfinv; 6// ********************************************************************; 7//; 8// source:; 9//; 10// type: source code; 11//; 12// created: 03. Apr 2001; 13//; 14// author: Thorsten Glebe; 15// HERA-B Collaboration; 16// Max-Planck-Institut fuer Kernphysik; 17// Saupfercheckweg 1; 18// 69117 Heidelberg; 19// Germany; 20// E-mail: T.Glebe@mpi-hd.mpg.de; 21//; 22// Description: Matrix inversion; 23// Code was taken from CERNLIB::kernlib dfinv function, translated; 24// from FORTRAN to C++ and optimized.; 25//; 26// changes:; 27// 03 Apr 2001 (TG) creation; 28//; 29// ********************************************************************; 30 ; 31 ; 32namespace ROOT {; 33 ; 34 namespace Math {; 35 ; 36 ; 37 ; 38 ; 39/** Dfinv.; 40 Function to compute the inverse of a square matrix (\f$A^{-1}\f$) of; 41 dimension \f$idim\f$ and order \f$n\f$. The routine Dfactir must be called; 42 before Dfinv!; 43 ; 44 @author T. Glebe; 45*/; 46template <class Matrix, unsigned int n, unsigned int idim>; 47bool Dfinv(Matrix& rhs, unsigned int* ir) {; 48#ifdef XXX; 49 if (idim < n || n <= 0 || n==1) {; 50 return false;; 51 }; 52#endif; 53 ; 54 typename Matrix::value_type* a = rhs.Array();; 55 ; 56 /* Local variables */; 57 unsigned int nxch, i, j, k, m, ij;; 58 unsigned int im2, nm1, nmi;; 59 typename Matrix::value_type s31, s34, ti;; 60 ; 61 /* Parameter adjustments */; 62 a -= idim + 1;; 63 --ir;; 64 ; 65 /* Function Body */; 66 ; 67 /* finv.inc */; 68 ; 69 a[idim + 2] = -a[(idim << 1) + 2] * (a[idim + 1] * a[idim + 2]);; 70 a[(idim << 1) + 1] = -a[(idim << 1) + 1];; 71 ; 72 if (n != 2) {; 73 for (i = 3; i <= n; ++i) {; 74 const unsigned int ii = i * idim;; 75 const unsigned int iii = i + ii;; 76 const unsigned int imi = ii - idim;; 77 const unsigned int iimi = i + imi;; 78 im2 = i - 2;; 79 for (j = 1; j <= im2; ++j) {; 80 const unsigned int ji = j * idim;; 81 const unsigned",MatchSource.WIKI,doc/master/Dfinv_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Dfinv_8h_source.html
Modifiability,variab,variables,"/ Germany; 20// E-mail: T.Glebe@mpi-hd.mpg.de; 21//; 22// Description: Matrix inversion; 23// Code was taken from CERNLIB::kernlib dfinv function, translated; 24// from FORTRAN to C++ and optimized.; 25//; 26// changes:; 27// 03 Apr 2001 (TG) creation; 28//; 29// ********************************************************************; 30 ; 31 ; 32namespace ROOT {; 33 ; 34 namespace Math {; 35 ; 36 ; 37 ; 38 ; 39/** Dfinv.; 40 Function to compute the inverse of a square matrix (\f$A^{-1}\f$) of; 41 dimension \f$idim\f$ and order \f$n\f$. The routine Dfactir must be called; 42 before Dfinv!; 43 ; 44 @author T. Glebe; 45*/; 46template <class Matrix, unsigned int n, unsigned int idim>; 47bool Dfinv(Matrix& rhs, unsigned int* ir) {; 48#ifdef XXX; 49 if (idim < n || n <= 0 || n==1) {; 50 return false;; 51 }; 52#endif; 53 ; 54 typename Matrix::value_type* a = rhs.Array();; 55 ; 56 /* Local variables */; 57 unsigned int nxch, i, j, k, m, ij;; 58 unsigned int im2, nm1, nmi;; 59 typename Matrix::value_type s31, s34, ti;; 60 ; 61 /* Parameter adjustments */; 62 a -= idim + 1;; 63 --ir;; 64 ; 65 /* Function Body */; 66 ; 67 /* finv.inc */; 68 ; 69 a[idim + 2] = -a[(idim << 1) + 2] * (a[idim + 1] * a[idim + 2]);; 70 a[(idim << 1) + 1] = -a[(idim << 1) + 1];; 71 ; 72 if (n != 2) {; 73 for (i = 3; i <= n; ++i) {; 74 const unsigned int ii = i * idim;; 75 const unsigned int iii = i + ii;; 76 const unsigned int imi = ii - idim;; 77 const unsigned int iimi = i + imi;; 78 im2 = i - 2;; 79 for (j = 1; j <= im2; ++j) {; 80 const unsigned int ji = j * idim;; 81 const unsigned int jii = j + ii;; 82 s31 = 0.;; 83 for (k = j; k <= im2; ++k) {; 84 s31 += a[k + ji] * a[i + k * idim];; 85 a[jii] += a[j + (k + 1) * idim] * a[k + 1 + ii];; 86 } // for k; 87 a[i + ji] = -a[iii] * (a[i - 1 + ji] * a[iimi] + s31);; 88 a[jii] *= -1;; 89 } // for j; 90 a[iimi] = -a[iii] * (a[i - 1 + imi] * a[iimi]);; 91 a[i - 1 + ii] *= -1;; 92 } // for i; 93 } // if n!=2; 94 ; 95 nm1 = n - 1;; 96 for (i = 1; i <= nm1; ++",MatchSource.WIKI,doc/master/Dfinv_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Dfinv_8h_source.html
Performance,optimiz,optimized,". ROOT: math/smatrix/inc/Math/Dfinv.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Dfinv.h. Go to the documentation of this file. 1// @(#)root/smatrix:$Id$; 2// Authors: T. Glebe, L. Moneta 2005; 3 ; 4#ifndef ROOT_Math_Dfinv; 5#define ROOT_Math_Dfinv; 6// ********************************************************************; 7//; 8// source:; 9//; 10// type: source code; 11//; 12// created: 03. Apr 2001; 13//; 14// author: Thorsten Glebe; 15// HERA-B Collaboration; 16// Max-Planck-Institut fuer Kernphysik; 17// Saupfercheckweg 1; 18// 69117 Heidelberg; 19// Germany; 20// E-mail: T.Glebe@mpi-hd.mpg.de; 21//; 22// Description: Matrix inversion; 23// Code was taken from CERNLIB::kernlib dfinv function, translated; 24// from FORTRAN to C++ and optimized.; 25//; 26// changes:; 27// 03 Apr 2001 (TG) creation; 28//; 29// ********************************************************************; 30 ; 31 ; 32namespace ROOT {; 33 ; 34 namespace Math {; 35 ; 36 ; 37 ; 38 ; 39/** Dfinv.; 40 Function to compute the inverse of a square matrix (\f$A^{-1}\f$) of; 41 dimension \f$idim\f$ and order \f$n\f$. The routine Dfactir must be called; 42 before Dfinv!; 43 ; 44 @author T. Glebe; 45*/; 46template <class Matrix, unsigned int n, unsigned int idim>; 47bool Dfinv(Matrix& rhs, unsigned int* ir) {; 48#ifdef XXX; 49 if (idim < n || n <= 0 || n==1) {; 50 return false;; 51 }; 52#endif; 53 ; 54 typename Matrix::value_type* a = rhs.Array();; 55 ; 56 /* Local variables */; 57 unsigned int nxch, i, j, k, m, ij;; 58 unsigned int im2, nm1, nmi;; 59 typename Matrix::value_type s31, s34, ti;; 60 ; 61 /* Parameter adjustments */; 62 a -= idim + 1;; 63 --ir;; 64 ; 65 /* Function Body */; 66 ; 67 /* finv.inc */; 68 ; 69 a[idim + 2] = -a[(idim << 1) + 2] * (a[idim + 1] * a[idim + 2]);; 70 a[(idim << 1) + 1] = -a[(idim << 1) + 1];; 71 ; 72 if (n != 2) {; 73 for (i = 3; i <= n; ++i) {; 74 const unsigned int ii = i * idim;; 75 const unsigned int iii = i + ii;;",MatchSource.WIKI,doc/master/Dfinv_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Dfinv_8h_source.html
Integrability,depend,dependency,". ROOT: core/base Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. base Directory Reference. Directory dependency graph for base:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  doc;  ;  inc;  ;  src;  ;  v7;  . corebase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/dir_1c665cc5526164787b3a14a24f921a4b.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_1c665cc5526164787b3a14a24f921a4b.html
Availability,error,error,". ROOT: tutorials/graphs Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. graphs Directory Reference. Directory dependency graph for graphs:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  annotation3d.C;   This example show how to put some annotation on a 3D plot using 3D polylines. ;  ;  approx.C;   Macro to test interpolation function Approx ;  ;  bent.C;   Bent error bars ;  ;  bent.py;   Bent error bars. ;  ;  exclusiongraph.C;   Draw three graphs with an exclusion zone. ;  ;  exclusiongraph2.C;   Draw several graphs with an exclusion zones. ;  ;  gerrors.C;   Draw a graph with error bars ;  ;  gerrors2.C;   Draw two graphs with error bars ;  ;  gmultierrors.C;   Draw a graph with multiple y errors ;  ;  graph.C;   Draw a simple graph. ;  ;  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ;  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ;  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ;  graphpolar.C;   Create and draw a polar graph. ;  ;  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ;  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ;  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ;  graphShade.C;   Show how to shade an area between two graphs ;  ;  graphstruct.C;   Draw a simple graph structure. ;  ;  graphtext.C;   Draw a graph with text attached to each point. ;  ;  gtime.C;   Example of TGraphTime. ;  ;  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ;  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ;  hlGraph2.C;  This tutorial demonstrates ",MatchSource.WIKI,doc/master/dir_21ec31480a793facd4ea3dd8f2d42294.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_21ec31480a793facd4ea3dd8f2d42294.html
Integrability,depend,dependency,". ROOT: tutorials/graphs Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. graphs Directory Reference. Directory dependency graph for graphs:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  annotation3d.C;   This example show how to put some annotation on a 3D plot using 3D polylines. ;  ;  approx.C;   Macro to test interpolation function Approx ;  ;  bent.C;   Bent error bars ;  ;  bent.py;   Bent error bars. ;  ;  exclusiongraph.C;   Draw three graphs with an exclusion zone. ;  ;  exclusiongraph2.C;   Draw several graphs with an exclusion zones. ;  ;  gerrors.C;   Draw a graph with error bars ;  ;  gerrors2.C;   Draw two graphs with error bars ;  ;  gmultierrors.C;   Draw a graph with multiple y errors ;  ;  graph.C;   Draw a simple graph. ;  ;  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ;  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ;  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ;  graphpolar.C;   Create and draw a polar graph. ;  ;  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ;  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ;  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ;  graphShade.C;   Show how to shade an area between two graphs ;  ;  graphstruct.C;   Draw a simple graph structure. ;  ;  graphtext.C;   Draw a graph with text attached to each point. ;  ;  gtime.C;   Example of TGraphTime. ;  ;  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ;  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ;  hlGraph2.C;  This tutorial demonstrates ",MatchSource.WIKI,doc/master/dir_21ec31480a793facd4ea3dd8f2d42294.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_21ec31480a793facd4ea3dd8f2d42294.html
Testability,test,test,". ROOT: tutorials/graphs Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. graphs Directory Reference. Directory dependency graph for graphs:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  annotation3d.C;   This example show how to put some annotation on a 3D plot using 3D polylines. ;  ;  approx.C;   Macro to test interpolation function Approx ;  ;  bent.C;   Bent error bars ;  ;  bent.py;   Bent error bars. ;  ;  exclusiongraph.C;   Draw three graphs with an exclusion zone. ;  ;  exclusiongraph2.C;   Draw several graphs with an exclusion zones. ;  ;  gerrors.C;   Draw a graph with error bars ;  ;  gerrors2.C;   Draw two graphs with error bars ;  ;  gmultierrors.C;   Draw a graph with multiple y errors ;  ;  graph.C;   Draw a simple graph. ;  ;  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ;  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ;  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ;  graphpolar.C;   Create and draw a polar graph. ;  ;  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ;  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ;  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ;  graphShade.C;   Show how to shade an area between two graphs ;  ;  graphstruct.C;   Draw a simple graph structure. ;  ;  graphtext.C;   Draw a graph with text attached to each point. ;  ;  gtime.C;   Example of TGraphTime. ;  ;  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ;  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ;  hlGraph2.C;  This tutorial demonstrates ",MatchSource.WIKI,doc/master/dir_21ec31480a793facd4ea3dd8f2d42294.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_21ec31480a793facd4ea3dd8f2d42294.html
Usability,simpl,simple,". ROOT: tutorials/graphs Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. graphs Directory Reference. Directory dependency graph for graphs:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  annotation3d.C;   This example show how to put some annotation on a 3D plot using 3D polylines. ;  ;  approx.C;   Macro to test interpolation function Approx ;  ;  bent.C;   Bent error bars ;  ;  bent.py;   Bent error bars. ;  ;  exclusiongraph.C;   Draw three graphs with an exclusion zone. ;  ;  exclusiongraph2.C;   Draw several graphs with an exclusion zones. ;  ;  gerrors.C;   Draw a graph with error bars ;  ;  gerrors2.C;   Draw two graphs with error bars ;  ;  gmultierrors.C;   Draw a graph with multiple y errors ;  ;  graph.C;   Draw a simple graph. ;  ;  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ;  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ;  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ;  graphpolar.C;   Create and draw a polar graph. ;  ;  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ;  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ;  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ;  graphShade.C;   Show how to shade an area between two graphs ;  ;  graphstruct.C;   Draw a simple graph structure. ;  ;  graphtext.C;   Draw a graph with text attached to each point. ;  ;  gtime.C;   Example of TGraphTime. ;  ;  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ;  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ;  hlGraph2.C;  This tutorial demonstrates ",MatchSource.WIKI,doc/master/dir_21ec31480a793facd4ea3dd8f2d42294.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_21ec31480a793facd4ea3dd8f2d42294.html
Integrability,depend,dependency,". ROOT: core/base/inc Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. inc Directory Reference. Directory dependency graph for inc:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  ROOT;  . Files;  Bswapcpy.h;  ;  Buttons.h;  ;  Bytes.h;  ;  Byteswap.h;  ;  GLConstants.h;  ;  Gtypes.h;  ;  Htypes.h;  ;  KeySymbols.h;  ;  Match.h;  ;  MessageTypes.h;  ;  RConfig.h;  ;  Riostream.h;  ;  Rpair.h;  ;  RQ_OBJECT.h;  ;  RStipples.h;  ;  Rtypes.h;  ;  RtypesImp.h;  ;  Strlen.h;  ;  TApplication.h;  ;  TAtt3D.h;  ;  TAttAxis.h;  ;  TAttBBox.h;  ;  TAttBBox2D.h;  ;  TAttFill.h;  ;  TAttLine.h;  ;  TAttMarker.h;  ;  TAttPad.h;  ;  TAttText.h;  ;  TBase64.h;  ;  TBenchmark.h;  ;  TBuffer.h;  ;  TBuffer3D.h;  ;  TBuffer3DTypes.h;  ;  TColor.h;  ;  TColorGradient.h;  ;  TDatime.h;  ;  TDirectory.h;  ;  TEnv.h;  ;  TException.h;  ;  TExec.h;  ;  TFileCollection.h;  ;  TFileInfo.h;  ;  TFolder.h;  ;  TInetAddress.h;  ;  TMacro.h;  ;  TMathBase.h;  ;  TMD5.h;  ;  TMemberInspector.h;  ;  TMessageHandler.h;  ;  TNamed.h;  ;  TNotifyLink.h;  ;  TObject.h;  ;  TObjString.h;  ;  TParameter.h;  ;  TPluginManager.h;  ;  TPoint.h;  ;  TPRegexp.h;  ;  TProcessID.h;  ;  TProcessUUID.h;  ;  TQClass.h;  ;  TQCommand.h;  ;  TQConnection.h;  ;  TQObject.h;  ;  TRedirectOutputGuard.h;  ;  TRef.h;  ;  TRefCnt.h;  ;  TRegexp.h;  ;  TRemoteObject.h;  ;  TROOT.h;  ;  TRootIOCtor.h;  ;  TStopwatch.h;  ;  TStorage.h;  ;  TString.h;  ;  TStringLong.h;  ;  TStyle.h;  ;  TSysEvtHandler.h;  ;  TSystem.h;  ;  TSystemDirectory.h;  ;  TSystemFile.h;  ;  TTask.h;  ;  TThreadSlots.h;  ;  TTime.h;  ;  TTimer.h;  ;  TTimeStamp.h;  ;  TUri.h;  ;  TUrl.h;  ;  TUUID.h;  ;  TVersionCheck.h;  ;  TVirtualAuth.h;  ;  TVirtualFFT.h;  ;  TVirtualGL.h;  ;  TVirtualMapFile.h;  ;  TVirtualMonitoring.h;  ;  TVirtualMutex.h;  ;  TVirtualPad.h;  ;  TVirtualPadEditor.h;  ;  TVirtualPadPainter.h;  ;  TVirtualPerfStats.h;  ;  TVi",MatchSource.WIKI,doc/master/dir_581b2f84e81921659261a687f8475ad3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_581b2f84e81921659261a687f8475ad3.html
Integrability,depend,dependency,". ROOT: tutorials/io Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. io Directory Reference. Directory dependency graph for io:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  copyFiles.C;   Example of script showing how to copy all objects (including directories) from a source file. ;  ;  dirs.C;   This macro illustrates how to create a hierarchy of directories in a Root file. ;  ;  double32.C;   Tutorial illustrating use and precision of the Double32_t data type You should run this tutorial with ACLIC: a dictionary will be automatically created. ;  ;  fildir.C;   This macro displays the ROOT Directory data structure ;  ;  file.C;   This macro displays the physical ROOT file structure ;  ;  float16.C;   Tutorial illustrating use and precision of the Float16_t data type. ;  ;  hadd.C;   Macro to add histogram files This macro is kept for didactical purposes only: use instead the executable $ROOTSYS/bin/hadd ! ;  ;  importCode.C;   Example of script showing how to create a ROOT file with subdirectories. ;  ;  loopdir.C;   Example script to loop over all the objects of a ROOT file directory and print in Postscript all the TH1 derived objects. ;  ;  loopdir11.C;   Example script to loop over all the objects of a ROOT file directory and print in Postscript all the TH1 derived objects. ;  ;  mergeSelective.C;   Merge only part of the content of a set of files. ;  ;  readCode.C;   Example of script showing how to navigate in a ROOT file with sub-directories and read the objects in each sub-directory. ;  ;  testMergeCont.C;   Macro demonstrating the merging of containers. ;  ;  testTMPIFile.C;  This macro shows the usage of TMPIFile to simulate event reconstruction and merging them in parallel. ;  . tutorialsio. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/dir_715fafd9bc85e47ed5557926189f8f1b.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_715fafd9bc85e47ed5557926189f8f1b.html
Testability,test,testMergeCont,". ROOT: tutorials/io Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. io Directory Reference. Directory dependency graph for io:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  copyFiles.C;   Example of script showing how to copy all objects (including directories) from a source file. ;  ;  dirs.C;   This macro illustrates how to create a hierarchy of directories in a Root file. ;  ;  double32.C;   Tutorial illustrating use and precision of the Double32_t data type You should run this tutorial with ACLIC: a dictionary will be automatically created. ;  ;  fildir.C;   This macro displays the ROOT Directory data structure ;  ;  file.C;   This macro displays the physical ROOT file structure ;  ;  float16.C;   Tutorial illustrating use and precision of the Float16_t data type. ;  ;  hadd.C;   Macro to add histogram files This macro is kept for didactical purposes only: use instead the executable $ROOTSYS/bin/hadd ! ;  ;  importCode.C;   Example of script showing how to create a ROOT file with subdirectories. ;  ;  loopdir.C;   Example script to loop over all the objects of a ROOT file directory and print in Postscript all the TH1 derived objects. ;  ;  loopdir11.C;   Example script to loop over all the objects of a ROOT file directory and print in Postscript all the TH1 derived objects. ;  ;  mergeSelective.C;   Merge only part of the content of a set of files. ;  ;  readCode.C;   Example of script showing how to navigate in a ROOT file with sub-directories and read the objects in each sub-directory. ;  ;  testMergeCont.C;   Macro demonstrating the merging of containers. ;  ;  testTMPIFile.C;  This macro shows the usage of TMPIFile to simulate event reconstruction and merging them in parallel. ;  . tutorialsio. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/dir_715fafd9bc85e47ed5557926189f8f1b.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_715fafd9bc85e47ed5557926189f8f1b.html
Integrability,depend,dependency,". ROOT: tutorials/v7/ntuple Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ntuple Directory Reference. Directory dependency graph for ntuple:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  ntpl001_staff.C;   Write and read tabular data with RNTuple. ;  ;  ntpl002_vector.C;   Write and read STL vectors with RNTuple. ;  ;  ntpl004_dimuon.C;   Mini-Analysis on CMS OpenData with RDataFrame. ;  ;  ntpl005_introspection.C;   Write and read an RNTuple from a user-defined class. ;  ;  ntpl006_friends.C;   Work with befriended RNTuples. ;  ;  ntpl007_mtFill.C;   Example of multi-threaded writes using multiple REntry objects ;  ;  ntpl008_import.C;   Example of converting data stored in a TTree into an RNTuple ;  ;  ntpl009_parallelWriter.C;   Example of multi-threaded writes using RNTupleParallelWriter. ;  ;  ntpl010_skim.C;   Example creating a derived RNTuple ;  ;  ntpl011_global_temperatures.C;   This ROOT 7 example demonstrates how to use RNTuple in combination with ROOT 6 features like RDataframe and visualizations. ;  ;  ntpl012_processor.C;   Demonstrate the RNTupleProcessor using multiple RNTuples ;  ;  ntpl013_staged.C;   Example of staged cluster committing in multi-threaded writing using RNTupleParallelWriter. ;  ;  ntpl014_framework.C;   ;  . tutorialsv7ntuple. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/dir_74d0bdb54707d3eaa1a5a0931b591e7a.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_74d0bdb54707d3eaa1a5a0931b591e7a.html
Performance,multi-thread,multi-threaded,". ROOT: tutorials/v7/ntuple Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ntuple Directory Reference. Directory dependency graph for ntuple:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  ntpl001_staff.C;   Write and read tabular data with RNTuple. ;  ;  ntpl002_vector.C;   Write and read STL vectors with RNTuple. ;  ;  ntpl004_dimuon.C;   Mini-Analysis on CMS OpenData with RDataFrame. ;  ;  ntpl005_introspection.C;   Write and read an RNTuple from a user-defined class. ;  ;  ntpl006_friends.C;   Work with befriended RNTuples. ;  ;  ntpl007_mtFill.C;   Example of multi-threaded writes using multiple REntry objects ;  ;  ntpl008_import.C;   Example of converting data stored in a TTree into an RNTuple ;  ;  ntpl009_parallelWriter.C;   Example of multi-threaded writes using RNTupleParallelWriter. ;  ;  ntpl010_skim.C;   Example creating a derived RNTuple ;  ;  ntpl011_global_temperatures.C;   This ROOT 7 example demonstrates how to use RNTuple in combination with ROOT 6 features like RDataframe and visualizations. ;  ;  ntpl012_processor.C;   Demonstrate the RNTupleProcessor using multiple RNTuples ;  ;  ntpl013_staged.C;   Example of staged cluster committing in multi-threaded writing using RNTupleParallelWriter. ;  ;  ntpl014_framework.C;   ;  . tutorialsv7ntuple. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/dir_74d0bdb54707d3eaa1a5a0931b591e7a.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_74d0bdb54707d3eaa1a5a0931b591e7a.html
Integrability,depend,dependency,". ROOT: tutorials/v7 Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. v7 Directory Reference. Directory dependency graph for v7:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  ntuple;  . Files;  browser.cxx;  ;  concurrentfill.cxx;  ;  filedialog.cxx;  ;  fitpanel.cxx;  ;  fitpanel6.cxx;  ;  histops.cxx;  ;  perf.cxx;  ;  perfcomp.cxx;  ;  simple.cxx;  . tutorialsv7. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/dir_87a15b6630bbbec9854bba9437a28716.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_87a15b6630bbbec9854bba9437a28716.html
Performance,concurren,concurrentfill,". ROOT: tutorials/v7 Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. v7 Directory Reference. Directory dependency graph for v7:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  ntuple;  . Files;  browser.cxx;  ;  concurrentfill.cxx;  ;  filedialog.cxx;  ;  fitpanel.cxx;  ;  fitpanel6.cxx;  ;  histops.cxx;  ;  perf.cxx;  ;  perfcomp.cxx;  ;  simple.cxx;  . tutorialsv7. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/dir_87a15b6630bbbec9854bba9437a28716.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_87a15b6630bbbec9854bba9437a28716.html
Usability,simpl,simple,". ROOT: tutorials/v7 Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. v7 Directory Reference. Directory dependency graph for v7:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  ntuple;  . Files;  browser.cxx;  ;  concurrentfill.cxx;  ;  filedialog.cxx;  ;  fitpanel.cxx;  ;  fitpanel6.cxx;  ;  histops.cxx;  ;  perf.cxx;  ;  perfcomp.cxx;  ;  simple.cxx;  . tutorialsv7. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/dir_87a15b6630bbbec9854bba9437a28716.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_87a15b6630bbbec9854bba9437a28716.html
Integrability,depend,dependency,". ROOT: tutorials/tmva/keras Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. keras Directory Reference. Directory dependency graph for keras:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  ApplicationClassificationKeras.py;   This tutorial shows how to apply a trained model to new data. ;  ;  ApplicationRegressionKeras.py;   This tutorial shows how to apply a trained model to new data (regression). ;  ;  ClassificationKeras.py;   This tutorial shows how to do classification in TMVA with neural networks trained with keras. ;  ;  GenerateModel.py;   This tutorial shows how to define and generate a keras model for use with TMVA. ;  ;  MulticlassKeras.py;   This tutorial shows how to do multiclass classification in TMVA with neural networks trained with keras. ;  ;  RegressionKeras.py;   This tutorial shows how to do regression in TMVA with neural networks trained with keras. ;  . tutorialstmvakeras. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/dir_983ef7a33b0c59dc2d471f36240bf58a.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_983ef7a33b0c59dc2d471f36240bf58a.html
Availability,down,downloads,";   Implement a custom action to fill THns. ;  ;  df019_Cache.C;   Cache a processed RDataFrame in memory for further usage. ;  ;  df019_Cache.py;   Cache a processed RDataFrame in memory for further usage. ;  ;  df020_helpers.C;   Show usage of RDataFrame's helper tools, contained in ROOT/RDFHelpers.hxx. ;  ;  df021_createTGraph.C;   Fill a TGraph using RDataFrame. ;  ;  df021_createTGraph.py;   Fill a TGraph using RDataFrame. ;  ;  df022_useKahan.C;   Implement a custom action that evaluates a Kahan sum. ;  ;  df023_aggregate.C;   Use the Aggregate action to specify arbitrary data aggregations. ;  ;  df024_Display.C;   Use the Display action to inspect entry values. ;  ;  df024_Display.py;   Use the Display action to inspect entry values. ;  ;  df025_RNode.C;   Manipulate RDF objects in functions, loops and conditional branches. ;  ;  df026_AsNumpyArrays.py;   Read data from RDataFrame into Numpy arrays. ;  ;  df027_SQliteDependencyOverVersion.C;   Plot the ROOT downloads based on the version reading a remote sqlite3 file. ;  ;  df028_SQliteIPLocation.C;   Plot the location of ROOT downloads reading a remote sqlite3 file. ;  ;  df029_SQlitePlatformDistribution.C;   Use RDataFrame to display data about ROOT downloads. ;  ;  df030_SQliteVersionsOfROOT.C;   Read an sqlite3 databases with RDataFrame and plot statistics on ROOT downloads. ;  ;  df031_Stats.C;   Use the Stats action to extract the statistics of a column. ;  ;  df031_Stats.py;   Use the Stats action to extract the statistics of a column. ;  ;  df032_RDFFromNumpy.py;   Read data from Numpy arrays into RDataFrame. ;  ;  df033_Describe.py;   Get information about the dataframe with the convenience method Describe. ;  ;  df034_SaveGraph.C;   Basic SaveGraph usage. ;  ;  df034_SaveGraph.py;   Basic SaveGraph usage. ;  ;  df035_RDFFromPandas.py;   Read data from Pandas Data Frame into RDataFrame. ;  ;  df036_missingBranches.C;   ;  ;  df036_missingBranches.py;  ;  df037_TTreeEventMatching.C;   ;  ;  df037_TTre",MatchSource.WIKI,doc/master/dir_a1b0d055c02f6056ea201bfa3ee242a7.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_a1b0d055c02f6056ea201bfa3ee242a7.html
Deployability,update,update,"limit the amount of data processed. ;  ;  df006_ranges.py;   Use Range to limit the amount of data processed. ;  ;  df007_snapshot.C;   Write ROOT data with RDataFrame. ;  ;  df007_snapshot.py;   Write ROOT data with RDataFrame. ;  ;  df008_createDataSetFromScratch.C;   Create data from scratch with RDataFrame. ;  ;  df008_createDataSetFromScratch.py;   Create data from scratch with RDataFrame. ;  ;  df009_FromScratchVSTTree.C;   Compare creation of a ROOT dataset with RDataFrame and TTree. ;  ;  df010_trivialDataSource.C;   Use the ""trivial data source"", an example data source implementation. ;  ;  df010_trivialDataSource.py;   Use the ""trivial data source"", an example data source implementation. ;  ;  df012_DefinesAndFiltersAsStrings.C;   Use just-in-time-compiled Filters and Defines for quick prototyping. ;  ;  df012_DefinesAndFiltersAsStrings.py;   Use just-in-time-compiled Filters and Defines for quick prototyping. ;  ;  df013_InspectAnalysis.C;   Use callbacks to update a plot and a progress bar during the event loop. ;  ;  df014_CSVDataSource.C;   Process a CSV file with RDataFrame and the CSV data source. ;  ;  df014_CSVDataSource.py;   Process a CSV file with RDataFrame and the CSV data source. ;  ;  df015_LazyDataSource.C;   Use the lazy RDataFrame data source to concatenate computation graphs. ;  ;  df016_vecOps.C;   Process collections in RDataFrame with the help of RVec. ;  ;  df016_vecOps.py;   Process collections in RDataFrame with the help of RVec. ;  ;  df017_vecOpsHEP.C;   Use RVecs to plot the transverse momentum of selected particles. ;  ;  df017_vecOpsHEP.py;   Use RVecs to plot the transverse momentum of selected particles. ;  ;  df018_customActions.C;   Implement a custom action to fill THns. ;  ;  df019_Cache.C;   Cache a processed RDataFrame in memory for further usage. ;  ;  df019_Cache.py;   Cache a processed RDataFrame in memory for further usage. ;  ;  df020_helpers.C;   Show usage of RDataFrame's helper tools, contained in ROOT/RDFHelper",MatchSource.WIKI,doc/master/dir_a1b0d055c02f6056ea201bfa3ee242a7.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_a1b0d055c02f6056ea201bfa3ee242a7.html
Integrability,depend,dependency,". ROOT: tutorials/dataframe Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. dataframe Directory Reference. Directory dependency graph for dataframe:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  df000_simple.C;   Simple RDataFrame example in C++. ;  ;  df000_simple.py;   Simple RDataFrame example in Python. ;  ;  df001_introduction.C;   Basic RDataFrame usage. ;  ;  df001_introduction.py;   Basic usage of RDataFrame from python. ;  ;  df002_dataModel.C;   Show how to work with non-flat data models, e.g. ;  ;  df002_dataModel.py;   Show how to work with non-flat data models, e.g. ;  ;  df003_profiles.C;   Use TProfiles with RDataFrame. ;  ;  df003_profiles.py;   Use TProfiles with RDataFrame. ;  ;  df004_cutFlowReport.C;   Display cut/Filter efficiencies with RDataFrame. ;  ;  df004_cutFlowReport.py;   Display cut/Filter efficiencies with RDataFrame. ;  ;  df005_fillAnyObject.C;   Using the generic Fill action. ;  ;  df006_ranges.C;   Use Range to limit the amount of data processed. ;  ;  df006_ranges.py;   Use Range to limit the amount of data processed. ;  ;  df007_snapshot.C;   Write ROOT data with RDataFrame. ;  ;  df007_snapshot.py;   Write ROOT data with RDataFrame. ;  ;  df008_createDataSetFromScratch.C;   Create data from scratch with RDataFrame. ;  ;  df008_createDataSetFromScratch.py;   Create data from scratch with RDataFrame. ;  ;  df009_FromScratchVSTTree.C;   Compare creation of a ROOT dataset with RDataFrame and TTree. ;  ;  df010_trivialDataSource.C;   Use the ""trivial data source"", an example data source implementation. ;  ;  df010_trivialDataSource.py;   Use the ""trivial data source"", an example data source implementation. ;  ;  df012_DefinesAndFiltersAsStrings.C;   Use just-in-time-compiled Filters and Defines for quick prototyping. ;  ;  df012_DefinesAndFiltersAsStrings.py;   Use just-in-time-compiled Filters and Defines for quick prototyping. ;  ;",MatchSource.WIKI,doc/master/dir_a1b0d055c02f6056ea201bfa3ee242a7.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_a1b0d055c02f6056ea201bfa3ee242a7.html
Usability,progress bar,progress bar,"limit the amount of data processed. ;  ;  df006_ranges.py;   Use Range to limit the amount of data processed. ;  ;  df007_snapshot.C;   Write ROOT data with RDataFrame. ;  ;  df007_snapshot.py;   Write ROOT data with RDataFrame. ;  ;  df008_createDataSetFromScratch.C;   Create data from scratch with RDataFrame. ;  ;  df008_createDataSetFromScratch.py;   Create data from scratch with RDataFrame. ;  ;  df009_FromScratchVSTTree.C;   Compare creation of a ROOT dataset with RDataFrame and TTree. ;  ;  df010_trivialDataSource.C;   Use the ""trivial data source"", an example data source implementation. ;  ;  df010_trivialDataSource.py;   Use the ""trivial data source"", an example data source implementation. ;  ;  df012_DefinesAndFiltersAsStrings.C;   Use just-in-time-compiled Filters and Defines for quick prototyping. ;  ;  df012_DefinesAndFiltersAsStrings.py;   Use just-in-time-compiled Filters and Defines for quick prototyping. ;  ;  df013_InspectAnalysis.C;   Use callbacks to update a plot and a progress bar during the event loop. ;  ;  df014_CSVDataSource.C;   Process a CSV file with RDataFrame and the CSV data source. ;  ;  df014_CSVDataSource.py;   Process a CSV file with RDataFrame and the CSV data source. ;  ;  df015_LazyDataSource.C;   Use the lazy RDataFrame data source to concatenate computation graphs. ;  ;  df016_vecOps.C;   Process collections in RDataFrame with the help of RVec. ;  ;  df016_vecOps.py;   Process collections in RDataFrame with the help of RVec. ;  ;  df017_vecOpsHEP.C;   Use RVecs to plot the transverse momentum of selected particles. ;  ;  df017_vecOpsHEP.py;   Use RVecs to plot the transverse momentum of selected particles. ;  ;  df018_customActions.C;   Implement a custom action to fill THns. ;  ;  df019_Cache.C;   Cache a processed RDataFrame in memory for further usage. ;  ;  df019_Cache.py;   Cache a processed RDataFrame in memory for further usage. ;  ;  df020_helpers.C;   Show usage of RDataFrame's helper tools, contained in ROOT/RDFHelper",MatchSource.WIKI,doc/master/dir_a1b0d055c02f6056ea201bfa3ee242a7.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_a1b0d055c02f6056ea201bfa3ee242a7.html
Integrability,depend,dependency,". ROOT: core/cont/inc Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. inc Directory Reference. Directory dependency graph for inc:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  ROOT;  . Files;  TArray.h;  ;  TArrayC.h;  ;  TArrayD.h;  ;  TArrayF.h;  ;  TArrayI.h;  ;  TArrayL.h;  ;  TArrayL64.h;  ;  TArrayS.h;  ;  TBits.h;  ;  TBtree.h;  ;  TClassTable.h;  ;  TClonesArray.h;  ;  TCollection.h;  ;  TCollectionProxyInfo.h;  ;  TExMap.h;  ;  THashList.h;  ;  THashTable.h;  ;  TIterator.h;  ;  TList.h;  ;  TMap.h;  ;  TObjArray.h;  ;  TObjectTable.h;  ;  TOrdCollection.h;  ;  TRefArray.h;  ;  TRefTable.h;  ;  TSeqCollection.h;  ;  TSortedList.h;  ;  TVirtualCollectionProxy.h;  . corecontinc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/dir_a1b91ffd476e3b26d4c2a148c14f4d99.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_a1b91ffd476e3b26d4c2a148c14f4d99.html
Availability,error,error,". ROOT: tutorials/fit Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fit Directory Reference. Directory dependency graph for fit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  combinedFit.C;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ;  combinedFit.py;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ;  ConfidenceIntervals.C;   Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ;  ErrorIntegral.C;   Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit. ;  ;  exampleFit3D.C;   example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  ;  fit1.C;   Simple fitting example (1-d histogram with an interpreted function) ;  ;  fit2.C;   Fitting a 2-D histogram This tutorial illustrates : ;  ;  fit2a.C;   Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  ;  fit2d.C;   Example illustrating how to fit a 2-d histogram of type y=f(x) ;  ;  fit2dHist.C;   Example to fit two histograms at the same time via the Fitter class. ;  ;  fitCircle.C;   Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  ;  fitcont.C;   Example illustrating how to draw the n-sigma contour of a Minuit fit. ;  ;  fitConvolution.C;   Tutorial for convolution of two functions ;  ;  fitConvolution.py;   Tutorial for convolution of two functions ;  ;  fitEllipseTGraphDLSF.cxx;  ;  fitEllipseTGraphRMM.cxx;  ;  fitExclude.C;   Illustrates how to fit excluding points in a given range. ;  ;  fithist.C;   Example of fit where the model is histogram + function ;  ;  FitHistoInFile.C;   ;  ;  fitLinear.C;   Ex",MatchSource.WIKI,doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html
Deployability,configurat,configurations,"an be set: ;  ;  fitpanel_playback.C;  This file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit. ;  ;  fitslicesy.C;   Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads. ;  ;  FittingDemo.C;   Example for fitting signal/background. ;  ;  graph2dfit.C;   Fitting a TGraph2D ;  ;  Ifit.C;   Example of a program to fit non-equidistant data points ;  ;  langaus.C;   Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  ;  line3Dfit.C;   Fitting of a TGraph2D with a 3D straight line ;  ;  minuit2FitBench.C;   Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits. ;  ;  minuit2FitBench2D.C;   Minuit2 fit 2D benchmark. ;  ;  minuit2GausFit.C;   Perform fits with different configurations using Minuit2 ;  ;  multidimfit.C;   Multi-Dimensional Parametrisation and Fitting ;  ;  multifit.C;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ;  multifit.py;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ;  myfit.C;   Get in memory an histogram from a root file and fit a user defined function. ;  ;  NumericalMinimization.C;   Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers. ;  ;  NumericalMinimization.py;  ;  qa2.C;   Test generation of random numbers distributed according to a function defined by the user ;  ;  TestBinomial.C;   Perform a fit to a set of data with binomial ",MatchSource.WIKI,doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html
Integrability,depend,dependency,". ROOT: tutorials/fit Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fit Directory Reference. Directory dependency graph for fit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  combinedFit.C;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ;  combinedFit.py;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ;  ConfidenceIntervals.C;   Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ;  ErrorIntegral.C;   Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit. ;  ;  exampleFit3D.C;   example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  ;  fit1.C;   Simple fitting example (1-d histogram with an interpreted function) ;  ;  fit2.C;   Fitting a 2-D histogram This tutorial illustrates : ;  ;  fit2a.C;   Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  ;  fit2d.C;   Example illustrating how to fit a 2-d histogram of type y=f(x) ;  ;  fit2dHist.C;   Example to fit two histograms at the same time via the Fitter class. ;  ;  fitCircle.C;   Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  ;  fitcont.C;   Example illustrating how to draw the n-sigma contour of a Minuit fit. ;  ;  fitConvolution.C;   Tutorial for convolution of two functions ;  ;  fitConvolution.py;   Tutorial for convolution of two functions ;  ;  fitEllipseTGraphDLSF.cxx;  ;  fitEllipseTGraphRMM.cxx;  ;  fitExclude.C;   Illustrates how to fit excluding points in a given range. ;  ;  fithist.C;   Example of fit where the model is histogram + function ;  ;  FitHistoInFile.C;   ;  ;  fitLinear.C;   Ex",MatchSource.WIKI,doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html
Modifiability,variab,variables,". ROOT: tutorials/fit Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fit Directory Reference. Directory dependency graph for fit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  combinedFit.C;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ;  combinedFit.py;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ;  ConfidenceIntervals.C;   Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ;  ErrorIntegral.C;   Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit. ;  ;  exampleFit3D.C;   example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  ;  fit1.C;   Simple fitting example (1-d histogram with an interpreted function) ;  ;  fit2.C;   Fitting a 2-D histogram This tutorial illustrates : ;  ;  fit2a.C;   Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  ;  fit2d.C;   Example illustrating how to fit a 2-d histogram of type y=f(x) ;  ;  fit2dHist.C;   Example to fit two histograms at the same time via the Fitter class. ;  ;  fitCircle.C;   Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  ;  fitcont.C;   Example illustrating how to draw the n-sigma contour of a Minuit fit. ;  ;  fitConvolution.C;   Tutorial for convolution of two functions ;  ;  fitConvolution.py;   Tutorial for convolution of two functions ;  ;  fitEllipseTGraphDLSF.cxx;  ;  fitEllipseTGraphRMM.cxx;  ;  fitExclude.C;   Illustrates how to fit excluding points in a given range. ;  ;  fithist.C;   Example of fit where the model is histogram + function ;  ;  FitHistoInFile.C;   ;  ;  fitLinear.C;   Ex",MatchSource.WIKI,doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html
Performance,perform,performance,"Parameters can be set: ;  ;  fitNormSum.py;   Tutorial for normalized sum of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  ;  fitpanel_playback.C;  This file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit. ;  ;  fitslicesy.C;   Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads. ;  ;  FittingDemo.C;   Example for fitting signal/background. ;  ;  graph2dfit.C;   Fitting a TGraph2D ;  ;  Ifit.C;   Example of a program to fit non-equidistant data points ;  ;  langaus.C;   Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  ;  line3Dfit.C;   Fitting of a TGraph2D with a 3D straight line ;  ;  minuit2FitBench.C;   Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits. ;  ;  minuit2FitBench2D.C;   Minuit2 fit 2D benchmark. ;  ;  minuit2GausFit.C;   Perform fits with different configurations using Minuit2 ;  ;  multidimfit.C;   Multi-Dimensional Parametrisation and Fitting ;  ;  multifit.C;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ;  multifit.py;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ;  myfit.C;   Get in memory an histogram from a root file and fit a user defined function. ;  ;  NumericalMinimization.C;   Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers. ;  ;  NumericalMinimization.py;  ;  qa2.C;  ",MatchSource.WIKI,doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html
Safety,predict,predictor,". ROOT: tutorials/fit Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fit Directory Reference. Directory dependency graph for fit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  combinedFit.C;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ;  combinedFit.py;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ;  ConfidenceIntervals.C;   Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ;  ErrorIntegral.C;   Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit. ;  ;  exampleFit3D.C;   example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  ;  fit1.C;   Simple fitting example (1-d histogram with an interpreted function) ;  ;  fit2.C;   Fitting a 2-D histogram This tutorial illustrates : ;  ;  fit2a.C;   Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  ;  fit2d.C;   Example illustrating how to fit a 2-d histogram of type y=f(x) ;  ;  fit2dHist.C;   Example to fit two histograms at the same time via the Fitter class. ;  ;  fitCircle.C;   Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  ;  fitcont.C;   Example illustrating how to draw the n-sigma contour of a Minuit fit. ;  ;  fitConvolution.C;   Tutorial for convolution of two functions ;  ;  fitConvolution.py;   Tutorial for convolution of two functions ;  ;  fitEllipseTGraphDLSF.cxx;  ;  fitEllipseTGraphRMM.cxx;  ;  fitExclude.C;   Illustrates how to fit excluding points in a given range. ;  ;  fithist.C;   Example of fit where the model is histogram + function ;  ;  FitHistoInFile.C;   ;  ;  fitLinear.C;   Ex",MatchSource.WIKI,doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html
Testability,test,test,"   ;  ;  fitLinear.C;   Example of fitting with a linear function, using TLinearFitter This example is for a TGraphErrors, but it can also be used when fitting a histogram, a TGraph2D or a TMultiGraph ;  ;  fitLinear2.C;   Fit a 5d hyperplane by n points, using the linear fitter directly ;  ;  fitLinearRobust.C;   This tutorial shows how the least trimmed squares regression, included in the TLinearFitter class, can be used for fitting in cases when the data contains outliers. ;  ;  fitMultiGraph.C;   fitting a parabola to a multigraph of 3 partly overlapping graphs with different errors ;  ;  fitNormSum.C;   Tutorial for normalized sum of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  ;  fitNormSum.py;   Tutorial for normalized sum of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  ;  fitpanel_playback.C;  This file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit. ;  ;  fitslicesy.C;   Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads. ;  ;  FittingDemo.C;   Example for fitting signal/background. ;  ;  graph2dfit.C;   Fitting a TGraph2D ;  ;  Ifit.C;   Example of a program to fit non-equidistant data points ;  ;  langaus.C;   Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  ;  line3Dfit.C;   Fitting of a TGraph2D with a 3D straight line ;  ;  minuit2FitBench.C;   Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits. ;  ;  minuit2FitBench2D.C;   Minuit2 fit 2D benchmark. ;  ;  minuit2GausFit.C;   Perform fits with different configurations using Minuit2 ;  ;  multidimfit.C;   Multi-Dimensional Parametrisation and Fitting ;  ;  multifit.C;   Fitting mu",MatchSource.WIKI,doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_a29432302a7afdbe7cd0744ed0070754.html
Integrability,depend,dependency,". ROOT: core/foundation Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. foundation Directory Reference. Directory dependency graph for foundation:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  inc;  ;  res;  ;  src;  ;  v7;  . corefoundation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/dir_ac6de6fe74d4e903f2b7ff14e6aeb864.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_ac6de6fe74d4e903f2b7ff14e6aeb864.html
Integrability,depend,dependency,". ROOT: tutorials/tmva Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tmva Directory Reference. Directory dependency graph for tmva:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  envelope;  ;  keras;  ;  pytorch;  . Files;  createData.C;  Plot the variables. ;  ;  PyTorch_Generate_CNN_Model.py;  ;  RBatchGenerator_filters_vectors.py;  ;  RBatchGenerator_NumPy.py;   Example of getting batches of events from a ROOT dataset as Python generators of numpy arrays. ;  ;  RBatchGenerator_PyTorch.py;   Example of getting batches of events from a ROOT dataset into a basic PyTorch workflow. ;  ;  RBatchGenerator_TensorFlow.py;   Example of getting batches of events from a ROOT dataset into a basic TensorFlow workflow. ;  ;  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ;  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ;  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ;  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ;  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ;  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ;  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ;  tmva103_Application.C;   This tutorial illustrates how you can conveniently apply BDTs in C++ using the fast tree inference engine offered b",MatchSource.WIKI,doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html
Modifiability,variab,variables,". ROOT: tutorials/tmva Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tmva Directory Reference. Directory dependency graph for tmva:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  envelope;  ;  keras;  ;  pytorch;  . Files;  createData.C;  Plot the variables. ;  ;  PyTorch_Generate_CNN_Model.py;  ;  RBatchGenerator_filters_vectors.py;  ;  RBatchGenerator_NumPy.py;   Example of getting batches of events from a ROOT dataset as Python generators of numpy arrays. ;  ;  RBatchGenerator_PyTorch.py;   Example of getting batches of events from a ROOT dataset into a basic PyTorch workflow. ;  ;  RBatchGenerator_TensorFlow.py;   Example of getting batches of events from a ROOT dataset into a basic TensorFlow workflow. ;  ;  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ;  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ;  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ;  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ;  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ;  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ;  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ;  tmva103_Application.C;   This tutorial illustrates how you can conveniently apply BDTs in C++ using the fast tree inference engine offered b",MatchSource.WIKI,doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html
Testability,test,test,"rom a ROOT dataset into a basic TensorFlow workflow. ;  ;  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ;  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ;  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ;  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ;  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ;  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ;  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ;  tmva103_Application.C;   This tutorial illustrates how you can conveniently apply BDTs in C++ using the fast tree inference engine offered by TMVA. ;  ;  TMVA_CNN_Classification.C;   TMVA Classification Example Using a Convolutional Neural Network ;  ;  TMVA_CNN_Classification.py;   TMVA Classification Example Using a Convolutional Neural Network ;  ;  TMVA_Higgs_Classification.C;   Classification example of TMVA based on public Higgs UCI dataset ;  ;  TMVA_Higgs_Classification.py;   Classification example of TMVA based on public Higgs UCI dataset ;  ;  TMVA_RNN_Classification.C;   TMVA Classification Example Using a Recurrent Neural Network ;  ;  TMVA_RNN_Classification.py;   TMVA Classification Example Using a Recurrent Neural Network ;  ;  TMVA_SOFIE_GNN.py;  ;  TMVA_SOFIE_GNN_Application.C;  ;  TMVA_SOFIE_GNN_Parser.py;  ;  TMVA_SOFIE_Inference.py;   This macro provides an example of using a tra",MatchSource.WIKI,doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html
Usability,learn,learning,"atchGenerator_NumPy.py;   Example of getting batches of events from a ROOT dataset as Python generators of numpy arrays. ;  ;  RBatchGenerator_PyTorch.py;   Example of getting batches of events from a ROOT dataset into a basic PyTorch workflow. ;  ;  RBatchGenerator_TensorFlow.py;   Example of getting batches of events from a ROOT dataset into a basic TensorFlow workflow. ;  ;  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ;  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ;  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ;  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ;  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ;  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ;  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ;  tmva103_Application.C;   This tutorial illustrates how you can conveniently apply BDTs in C++ using the fast tree inference engine offered by TMVA. ;  ;  TMVA_CNN_Classification.C;   TMVA Classification Example Using a Convolutional Neural Network ;  ;  TMVA_CNN_Classification.py;   TMVA Classification Example Using a Convolutional Neural Network ;  ;  TMVA_Higgs_Classification.C;   Classification example of TMVA based on public Higgs UCI dataset ;  ;  TMVA_Higgs_Classification.py;   Classification example of TMVA based on public Higgs UCI dataset ;  ;  TMVA_RNN_Classification.C;   T",MatchSource.WIKI,doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html
Availability,fault,faulty,";   Example showing an histogram with reverse axis. ;  ;  sparsehist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ;  statsEditing.C;   Edit statistics box. ;  ;  testSmooth.C;   Histogram smoothing. ;  ;  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ;  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ;  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ;  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ;  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ;  thstackcolorscheme.C;   This example demonstrates how to use the accessible color schemes with THStack. ;  ;  thstackpalettecolor.C;   Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ;  tprofile2polyRealistic.C;   Different charges depending on region ;  ;  tprofile2polyRealisticModuleError.C;   Simulate faulty detector panel w.r.t. ;  ;  transpad.C;   Example of a canvas showing two histograms with different scales. ;  ;  twoscales.C;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ;  twoscales.py;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ;  xyplot.C;   Example showing how to produce a plot with an orthogonal axis system centered at (0,0). ;  ;  ZoomHistogram.C;   Changing the Range on the X-Axis of a Histogram ;  . tutorialshist. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html
Energy Efficiency,charge,charges,";   Example showing an histogram with reverse axis. ;  ;  sparsehist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ;  statsEditing.C;   Edit statistics box. ;  ;  testSmooth.C;   Histogram smoothing. ;  ;  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ;  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ;  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ;  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ;  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ;  thstackcolorscheme.C;   This example demonstrates how to use the accessible color schemes with THStack. ;  ;  thstackpalettecolor.C;   Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ;  tprofile2polyRealistic.C;   Different charges depending on region ;  ;  tprofile2polyRealisticModuleError.C;   Simulate faulty detector panel w.r.t. ;  ;  transpad.C;   Example of a canvas showing two histograms with different scales. ;  ;  twoscales.C;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ;  twoscales.py;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ;  xyplot.C;   Example showing how to produce a plot with an orthogonal axis system centered at (0,0). ;  ;  ZoomHistogram.C;   Changing the Range on the X-Axis of a Histogram ;  . tutorialshist. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html
Integrability,depend,dependency,". ROOT: tutorials/hist Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hist Directory Reference. Directory dependency graph for hist:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  candledecay.C;   Candle Decay, illustrate a time development of a certain value. ;  ;  candlehisto.C;   Example showing how to combine the various candle plot options. ;  ;  candleplot.C;   Example of candle plot with 2-D histograms. ;  ;  candleplotoption.C;   Example showing how to combine the various candle plot options. ;  ;  candleplotstack.C;   Example showing how a THStack with candle plot option. ;  ;  candleplotwhiskers.C;   Example of candle plot showing the whiskers definition. ;  ;  candlescaled.C;   Candle Scaled, illustrates what scaling does on candle and violin charts. ;  ;  ContourList.C;   Getting Contours From TH2D. ;  ;  cumulative.C;   Illustrate use of the TH1::GetCumulative method. ;  ;  draw2dopt.C;   Display the various 2-d drawing options ;  ;  DynamicSlice.C;   Show the slice of a TH2 following the mouse position. ;  ;  exec1.C;  Echo object at mouse position. ;  ;  exec2.C;  Echo object at mouse position and show a graphics line. ;  ;  Fibonacci.C;   A TH2Poly build with Fibonacci numbers. ;  ;  fillhistosauto2p.C;  Fill multiple histograms with different functions and automatic binning. ;  ;  fillrandom.C;   Fill a 1-D histogram from a parametric function. ;  ;  fillrandom.py;   Fill a 1-D histogram from a parametric function. ;  ;  FirstContour.C;   Make a contour plot and get the first contour in a TPolyMarker. ;  ;  h1ReadAndDraw.C;   Read a 1-D histogram from a ROOT File and draw it. ;  ;  h2_cut.C;   This example demonstrates how to display a 2D histogram and use TCutG object to select bins for drawing. ;  ;  h2proj.C;   This example demonstrates how to display a histogram and its two projections. ;  ;  hbars.C;   Example of bar charts with 1-d histograms. ",MatchSource.WIKI,doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html
Modifiability,variab,variable,"for it. ;  ;  ratioplot3.py;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ;  ratioplot4.C;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ;  ratioplot4.py;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ;  ratioplot5.C;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ;  ratioplot5.py;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ;  ratioplot6.C;   Example showing a fit residual plot, where the separation margin has been set to 0. ;  ;  ratioplot6.py;   Example showing a fit residual plot, where the separation margin has been set to 0. ;  ;  ratioplotOld.C;  Example displaying two histograms and their ratio. ;  ;  rebin.C;   Rebin a variable bin-width histogram. ;  ;  reverseaxis.C;   Example showing an histogram with reverse axis. ;  ;  sparsehist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ;  statsEditing.C;   Edit statistics box. ;  ;  testSmooth.C;   Histogram smoothing. ;  ;  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ;  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ;  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ;  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ;  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ;  thstackcolorscheme.C;   This example demonstrate",MatchSource.WIKI,doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html
Performance,perform,performance,"s custom dashed lines on the lower plot, specified by a vector of floats. ;  ;  ratioplot4.py;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ;  ratioplot5.C;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ;  ratioplot5.py;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ;  ratioplot6.C;   Example showing a fit residual plot, where the separation margin has been set to 0. ;  ;  ratioplot6.py;   Example showing a fit residual plot, where the separation margin has been set to 0. ;  ;  ratioplotOld.C;  Example displaying two histograms and their ratio. ;  ;  rebin.C;   Rebin a variable bin-width histogram. ;  ;  reverseaxis.C;   Example showing an histogram with reverse axis. ;  ;  sparsehist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ;  statsEditing.C;   Edit statistics box. ;  ;  testSmooth.C;   Histogram smoothing. ;  ;  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ;  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ;  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ;  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ;  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ;  thstackcolorscheme.C;   This example demonstrates how to use the accessible color schemes with THStack. ;  ;  thstackpalettecolor.C;   Palette coloring for histograms' stack is activated thanks to the options PFC (Pa",MatchSource.WIKI,doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html
Safety,detect,detector,";   Example showing an histogram with reverse axis. ;  ;  sparsehist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ;  statsEditing.C;   Edit statistics box. ;  ;  testSmooth.C;   Histogram smoothing. ;  ;  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ;  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ;  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ;  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ;  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ;  thstackcolorscheme.C;   This example demonstrates how to use the accessible color schemes with THStack. ;  ;  thstackpalettecolor.C;   Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ;  tprofile2polyRealistic.C;   Different charges depending on region ;  ;  tprofile2polyRealisticModuleError.C;   Simulate faulty detector panel w.r.t. ;  ;  transpad.C;   Example of a canvas showing two histograms with different scales. ;  ;  twoscales.C;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ;  twoscales.py;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ;  xyplot.C;   Example showing how to produce a plot with an orthogonal axis system centered at (0,0). ;  ;  ZoomHistogram.C;   Changing the Range on the X-Axis of a Histogram ;  . tutorialshist. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html
Security,access,accessible,"stogram. ;  ;  reverseaxis.C;   Example showing an histogram with reverse axis. ;  ;  sparsehist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ;  statsEditing.C;   Edit statistics box. ;  ;  testSmooth.C;   Histogram smoothing. ;  ;  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ;  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ;  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ;  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ;  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ;  thstackcolorscheme.C;   This example demonstrates how to use the accessible color schemes with THStack. ;  ;  thstackpalettecolor.C;   Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ;  tprofile2polyRealistic.C;   Different charges depending on region ;  ;  tprofile2polyRealisticModuleError.C;   Simulate faulty detector panel w.r.t. ;  ;  transpad.C;   Example of a canvas showing two histograms with different scales. ;  ;  twoscales.C;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ;  twoscales.py;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ;  xyplot.C;   Example showing how to produce a plot with an orthogonal axis system centered at (0,0). ;  ;  ZoomHistogram.C;   Changing the Range on the X-Axis of a Histogram ;  . tutorialshist. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time",MatchSource.WIKI,doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html
Testability,log,logscales," (Palette Line Color) and AMC (Palette Marker Color). ;  ;  hksimple.C;   Illustrates the advantages of a TH1K histogram ;  ;  hlabels1.C;   1-D histograms with alphanumeric labels ;  ;  hlabels2.C;   2-D histograms with alphanumeric labels. ;  ;  hlHisto1.C;  This tutorial demonstrates how the highlight mechanism can be used on an histogram. ;  ;  hlHisto2.C;  This tutorial demonstrates how the highlight mechanism can be used on an histogram. ;  ;  hlHisto3.C;  This tutorial demonstrates how the highlight mechanism can be used on a ntuple. ;  ;  hlHisto4.C;  This tutorial demonstrates how the highlight mechanism can be used on an histogram. ;  ;  hstack.C;   Example of stacked histograms: class THStack. ;  ;  hstackpads.C;   Drawing stack histograms on subpads. ;  ;  hsum.C;   Histograms filled and drawn in a loop. ;  ;  hsumTimer.C;   Demo of Timers. ;  ;  legendautoplaced.C;   The legend can be placed automatically in the current pad in an empty space found at painting time. ;  ;  logscales.C;   Draw parametric functions with log scales. ;  ;  movepalette.C;   When an histogram is drawn with the option COLZ, a palette is automatically drawn vertically on the right side of the plot. ;  ;  multicolor.C;   Use a THStack to show a 2-D hist with cells with different colors. ;  ;  NormalizeHistogram.C;   Normalizing a Histogram ;  ;  ratioplot1.C;   Example creating a simple ratio plot of two histograms using the pois division option. ;  ;  ratioplot1.py;   Example creating a simple ratio plot of two histograms using the pois division option. ;  ;  ratioplot2.C;   Example of a fit residual plot. ;  ;  ratioplot2.py;   Example of a fit residual plot. ;  ;  ratioplot3.C;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ;  ratioplot3.py;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ;  ratioplot4.C;   Example that shows custom dashed lines on the lower plot, specifi",MatchSource.WIKI,doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html
Usability,simpl,simple,"mechanism can be used on an histogram. ;  ;  hlHisto3.C;  This tutorial demonstrates how the highlight mechanism can be used on a ntuple. ;  ;  hlHisto4.C;  This tutorial demonstrates how the highlight mechanism can be used on an histogram. ;  ;  hstack.C;   Example of stacked histograms: class THStack. ;  ;  hstackpads.C;   Drawing stack histograms on subpads. ;  ;  hsum.C;   Histograms filled and drawn in a loop. ;  ;  hsumTimer.C;   Demo of Timers. ;  ;  legendautoplaced.C;   The legend can be placed automatically in the current pad in an empty space found at painting time. ;  ;  logscales.C;   Draw parametric functions with log scales. ;  ;  movepalette.C;   When an histogram is drawn with the option COLZ, a palette is automatically drawn vertically on the right side of the plot. ;  ;  multicolor.C;   Use a THStack to show a 2-D hist with cells with different colors. ;  ;  NormalizeHistogram.C;   Normalizing a Histogram ;  ;  ratioplot1.C;   Example creating a simple ratio plot of two histograms using the pois division option. ;  ;  ratioplot1.py;   Example creating a simple ratio plot of two histograms using the pois division option. ;  ;  ratioplot2.C;   Example of a fit residual plot. ;  ;  ratioplot2.py;   Example of a fit residual plot. ;  ;  ratioplot3.C;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ;  ratioplot3.py;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ;  ratioplot4.C;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ;  ratioplot4.py;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ;  ratioplot5.C;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ;  ratioplot5.py;   Example that shows how you can set the colors of the confidence interval bands by us",MatchSource.WIKI,doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html
Availability,error,error,". ROOT: tutorials/pyroot Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. pyroot Directory Reference. Directory dependency graph for pyroot:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  demo.py;  To run, do ""python <path-to>/demo.py"". ;  ;  demoshelp.py;   Display demo help. ;  ;  DynamicSlice.py;   Example of function called when a mouse event occurs in a pad. ;  ;  fit1.py;   Fit example. ;  ;  fit1_py.py;  ;  formula1.py;   TF1 example. ;  ;  geometry.py;   Geometry ;  ;  gerrors.py;   A Simple Graph with error bars ;  ;  graph.py;   A Simple Graph Example ;  ;  gui_ex.py;  A Simple GUI Example. ;  ;  h1ReadAndDraw.py;   A Simple histogram drawing example ;  ;  hsimple.py;   This program creates : ;  ;  hsum.py;   Simple example illustrating how to use the C++ interpreter ;  ;  mrt.py;   Build ROOT Ntuple from other source. ;  ;  na49geomfile.py;  Before executing this macro, the file makegeometry.C must have been executed. ;  ;  na49view.py;  This macro generates two views of the NA49 detector. ;  ;  na49visible.py;  Set visibility attributes for the NA49 geometry Set Shape attributes. ;  ;  ntuple1.py;   Ntuple drawing example. ;  ;  numberEntry.py;  Example frame with one box where the user can increase or decrease a number and the shown value will be updated accordingly. ;  ;  parse_CSV_file_with_TTree_ReadStream.py;  This function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream. ;  ;  pyroot001_arrayInterface.py;   This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data. ;  ;  pyroot002_pythonizationDecorator.py;   This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ;  ;  pyroot003_prettyPrinting.py;   This tutorial illustrates the pretty printing feature of PyRO",MatchSource.WIKI,doc/master/dir_d39463c0be040a84eab8424485bc26d4.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_d39463c0be040a84eab8424485bc26d4.html
Deployability,update,updated,". ;  ;  demoshelp.py;   Display demo help. ;  ;  DynamicSlice.py;   Example of function called when a mouse event occurs in a pad. ;  ;  fit1.py;   Fit example. ;  ;  fit1_py.py;  ;  formula1.py;   TF1 example. ;  ;  geometry.py;   Geometry ;  ;  gerrors.py;   A Simple Graph with error bars ;  ;  graph.py;   A Simple Graph Example ;  ;  gui_ex.py;  A Simple GUI Example. ;  ;  h1ReadAndDraw.py;   A Simple histogram drawing example ;  ;  hsimple.py;   This program creates : ;  ;  hsum.py;   Simple example illustrating how to use the C++ interpreter ;  ;  mrt.py;   Build ROOT Ntuple from other source. ;  ;  na49geomfile.py;  Before executing this macro, the file makegeometry.C must have been executed. ;  ;  na49view.py;  This macro generates two views of the NA49 detector. ;  ;  na49visible.py;  Set visibility attributes for the NA49 geometry Set Shape attributes. ;  ;  ntuple1.py;   Ntuple drawing example. ;  ;  numberEntry.py;  Example frame with one box where the user can increase or decrease a number and the shown value will be updated accordingly. ;  ;  parse_CSV_file_with_TTree_ReadStream.py;  This function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream. ;  ;  pyroot001_arrayInterface.py;   This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data. ;  ;  pyroot002_pythonizationDecorator.py;   This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ;  ;  pyroot003_prettyPrinting.py;   This tutorial illustrates the pretty printing feature of PyROOT, which reveals the content of the object if a string representation is requested, e.g., by Python's print statement. ;  ;  pyroot004_NumbaDeclare.py;   This tutorial illustrates how PyROOT supports declaring C++ callables from Python callables making them, for example, usable with RDataFrame. ;  ;  pyroot005_tfile_context_manager.",MatchSource.WIKI,doc/master/dir_d39463c0be040a84eab8424485bc26d4.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_d39463c0be040a84eab8424485bc26d4.html
Integrability,depend,dependency,". ROOT: tutorials/pyroot Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. pyroot Directory Reference. Directory dependency graph for pyroot:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  demo.py;  To run, do ""python <path-to>/demo.py"". ;  ;  demoshelp.py;   Display demo help. ;  ;  DynamicSlice.py;   Example of function called when a mouse event occurs in a pad. ;  ;  fit1.py;   Fit example. ;  ;  fit1_py.py;  ;  formula1.py;   TF1 example. ;  ;  geometry.py;   Geometry ;  ;  gerrors.py;   A Simple Graph with error bars ;  ;  graph.py;   A Simple Graph Example ;  ;  gui_ex.py;  A Simple GUI Example. ;  ;  h1ReadAndDraw.py;   A Simple histogram drawing example ;  ;  hsimple.py;   This program creates : ;  ;  hsum.py;   Simple example illustrating how to use the C++ interpreter ;  ;  mrt.py;   Build ROOT Ntuple from other source. ;  ;  na49geomfile.py;  Before executing this macro, the file makegeometry.C must have been executed. ;  ;  na49view.py;  This macro generates two views of the NA49 detector. ;  ;  na49visible.py;  Set visibility attributes for the NA49 geometry Set Shape attributes. ;  ;  ntuple1.py;   Ntuple drawing example. ;  ;  numberEntry.py;  Example frame with one box where the user can increase or decrease a number and the shown value will be updated accordingly. ;  ;  parse_CSV_file_with_TTree_ReadStream.py;  This function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream. ;  ;  pyroot001_arrayInterface.py;   This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data. ;  ;  pyroot002_pythonizationDecorator.py;   This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ;  ;  pyroot003_prettyPrinting.py;   This tutorial illustrates the pretty printing feature of PyRO",MatchSource.WIKI,doc/master/dir_d39463c0be040a84eab8424485bc26d4.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_d39463c0be040a84eab8424485bc26d4.html
Safety,detect,detector," . Loading...; Searching...; No Matches. pyroot Directory Reference. Directory dependency graph for pyroot:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Files;  demo.py;  To run, do ""python <path-to>/demo.py"". ;  ;  demoshelp.py;   Display demo help. ;  ;  DynamicSlice.py;   Example of function called when a mouse event occurs in a pad. ;  ;  fit1.py;   Fit example. ;  ;  fit1_py.py;  ;  formula1.py;   TF1 example. ;  ;  geometry.py;   Geometry ;  ;  gerrors.py;   A Simple Graph with error bars ;  ;  graph.py;   A Simple Graph Example ;  ;  gui_ex.py;  A Simple GUI Example. ;  ;  h1ReadAndDraw.py;   A Simple histogram drawing example ;  ;  hsimple.py;   This program creates : ;  ;  hsum.py;   Simple example illustrating how to use the C++ interpreter ;  ;  mrt.py;   Build ROOT Ntuple from other source. ;  ;  na49geomfile.py;  Before executing this macro, the file makegeometry.C must have been executed. ;  ;  na49view.py;  This macro generates two views of the NA49 detector. ;  ;  na49visible.py;  Set visibility attributes for the NA49 geometry Set Shape attributes. ;  ;  ntuple1.py;   Ntuple drawing example. ;  ;  numberEntry.py;  Example frame with one box where the user can increase or decrease a number and the shown value will be updated accordingly. ;  ;  parse_CSV_file_with_TTree_ReadStream.py;  This function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream. ;  ;  pyroot001_arrayInterface.py;   This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data. ;  ;  pyroot002_pythonizationDecorator.py;   This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ;  ;  pyroot003_prettyPrinting.py;   This tutorial illustrates the pretty printing feature of PyROOT, which reveals the content of the object if a string representation is requested, e",MatchSource.WIKI,doc/master/dir_d39463c0be040a84eab8424485bc26d4.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_d39463c0be040a84eab8424485bc26d4.html
Testability,log,log,"o generates two views of the NA49 detector. ;  ;  na49visible.py;  Set visibility attributes for the NA49 geometry Set Shape attributes. ;  ;  ntuple1.py;   Ntuple drawing example. ;  ;  numberEntry.py;  Example frame with one box where the user can increase or decrease a number and the shown value will be updated accordingly. ;  ;  parse_CSV_file_with_TTree_ReadStream.py;  This function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream. ;  ;  pyroot001_arrayInterface.py;   This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data. ;  ;  pyroot002_pythonizationDecorator.py;   This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ;  ;  pyroot003_prettyPrinting.py;   This tutorial illustrates the pretty printing feature of PyROOT, which reveals the content of the object if a string representation is requested, e.g., by Python's print statement. ;  ;  pyroot004_NumbaDeclare.py;   This tutorial illustrates how PyROOT supports declaring C++ callables from Python callables making them, for example, usable with RDataFrame. ;  ;  pyroot005_tfile_context_manager.py;   This tutorial demonstrates the usage of the TFile class as a Python context manager. ;  ;  pyroot006_tcontext_context_manager.py;   This tutorial demonstrates the usage of the TContext class as a Python context manager. ;  ;  ratioplot.py;   Display two histograms and their ratio. ;  ;  shapes.py;   Draw the geometry using the x3d viewver. ;  ;  staff.py;   example of macro to read data from an ascii file and create a root file with a Tree. ;  ;  surfaces.py;   Surfaces example ;  ;  tornado.py;  Tornado example. ;  ;  zdemo.py;   This macro is an example of graphs in log scales with annotations. ;  . tutorialspyroot. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/dir_d39463c0be040a84eab8424485bc26d4.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_d39463c0be040a84eab8424485bc26d4.html
Usability,usab,usable,"o generates two views of the NA49 detector. ;  ;  na49visible.py;  Set visibility attributes for the NA49 geometry Set Shape attributes. ;  ;  ntuple1.py;   Ntuple drawing example. ;  ;  numberEntry.py;  Example frame with one box where the user can increase or decrease a number and the shown value will be updated accordingly. ;  ;  parse_CSV_file_with_TTree_ReadStream.py;  This function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream. ;  ;  pyroot001_arrayInterface.py;   This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data. ;  ;  pyroot002_pythonizationDecorator.py;   This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ;  ;  pyroot003_prettyPrinting.py;   This tutorial illustrates the pretty printing feature of PyROOT, which reveals the content of the object if a string representation is requested, e.g., by Python's print statement. ;  ;  pyroot004_NumbaDeclare.py;   This tutorial illustrates how PyROOT supports declaring C++ callables from Python callables making them, for example, usable with RDataFrame. ;  ;  pyroot005_tfile_context_manager.py;   This tutorial demonstrates the usage of the TFile class as a Python context manager. ;  ;  pyroot006_tcontext_context_manager.py;   This tutorial demonstrates the usage of the TContext class as a Python context manager. ;  ;  ratioplot.py;   Display two histograms and their ratio. ;  ;  shapes.py;   Draw the geometry using the x3d viewver. ;  ;  staff.py;   example of macro to read data from an ascii file and create a root file with a Tree. ;  ;  surfaces.py;   Surfaces example ;  ;  tornado.py;  Tornado example. ;  ;  zdemo.py;   This macro is an example of graphs in log scales with annotations. ;  . tutorialspyroot. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/dir_d39463c0be040a84eab8424485bc26d4.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_d39463c0be040a84eab8424485bc26d4.html
Integrability,depend,dependency,". ROOT: tutorials Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tutorials Directory Reference. Directory dependency graph for tutorials:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  cocoa;  ;  cont;  ;  dataframe;  ;  eve;  ;  eve7;  ;  fft;  ;  fit;  ;  fitsio;  ;  foam;  ;  geom;  ;  gl;  ;  graphics;  ;  graphs;  ;  gui;  ;  hist;  ;  histfactory;  ;  http;  ;  image;  ;  io;  ;  legacy;  ;  math;  ;  matrix;  ;  mc;  ;  multicore;  ;  net;  ;  physics;  ;  proof;  ;  pyroot;  ;  pythia;  ;  quadp;  ;  r;  ;  rcanvas;  ;  roofit;  ;  roostats;  ;  spectrum;  ;  splot;  ;  sql;  ;  tmva;  ;  tree;  ;  unfold;  ;  unuran;  ;  v7;  ;  vecops;  ;  webcanv;  ;  webgui;  ;  xml;  . Files;  .enableImplicitMTWrapper.py;  ;  .rootlogon.py;  ;  demos.C;  This macro shows a control bar to run some of the ROOT tutorials. ;  ;  demoshelp.C;  This macro shows help on running the Demos. ;  ;  hsimple.C;   This program creates : ;  ;  rootlogoff.C;  Example of rootlogoff.C. ;  ;  rootlogon.C;  Example of rootlogon.C. ;  . tutorials. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/dir_d7ff98e99d8733492dd662d455f89a38.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_d7ff98e99d8733492dd662d455f89a38.html
Deployability,install,installed,".C;  Example to write & read a Tree built with a complex class inheritance tree. ;  ;  clonesA_Event.cxx;  ;  clonesA_Event.h;  ;  copytree.C;   Copy a subset of a Tree to a new Tree ;  ;  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ;  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ;  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ;  h1analysis.C;   Example of analysis class for the H1 data. ;  ;  h1analysis.h;  ;  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ;  h1analysisProxy.h;  ;  h1analysisProxyCut.C;  ;  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ;  h1analysisTreeReader.h;  ;  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ;  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ;  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ;  hsimpleReader.C;   TTreeReader simplest example. ;  ;  htest.C;   Save histograms in Tree branches ;  ;  hvector.C;   Write and read STL vectors in a tree. ;  ;  JetEvent.cxx;  ;  JetEvent.h;  ;  jets.C;  Usage of a Tree using the JetEvent class. ;  ;  ntuple1.C;   Simple tree analysis. ;  ;  parallelcoord.C;   Script illustrating the use of the TParallelCoord class ;  ;  parallelcoordtrans.C;   Use of transparency with ||-Coord. ;  ;  printSizes.C;   This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree. ;  ;  run_h1analysis.C;   Macro driving the analysis can specify file name and type ;  ;  spider.C;   TSpider example. ;  ;  staff.C;   Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tu",MatchSource.WIKI,doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html
Energy Efficiency,efficient,efficient,"pera instead. Directories;  dictionary;  . Files;  basic.C;   Read data from an ascii file and create a root file with an histogram and an ntuple. ;  ;  basic2.C;   Create can ntuple reading data from an ascii file. ;  ;  bill.C;   Benchmark comparing row-wise and column-wise storage performance ;  ;  cernbuild.C;   Read data (CERN staff) from an ascii file and create a root file with a Tree. ;  ;  cernstaff.C;   Playing with a Tree containing variables of type character ;  ;  circular.C;   Example of a circular Tree ;  ;  clonesA_Event.C;  Example to write & read a Tree built with a complex class inheritance tree. ;  ;  clonesA_Event.cxx;  ;  clonesA_Event.h;  ;  copytree.C;   Copy a subset of a Tree to a new Tree ;  ;  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ;  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ;  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ;  h1analysis.C;   Example of analysis class for the H1 data. ;  ;  h1analysis.h;  ;  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ;  h1analysisProxy.h;  ;  h1analysisProxyCut.C;  ;  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ;  h1analysisTreeReader.h;  ;  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ;  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ;  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ;  hsimpleReader.C;   TTreeReader simplest example. ;  ;  htest.C;   Save histograms in Tree branches ;  ;  hvector.C;   Write and read STL vectors in a tree. ;  ;  JetEvent.cxx;  ;  JetEvent.h;  ;  jets.C;  Usage of a Tree using the JetEvent class. ;  ;  ntuple1.C;   Simple ",MatchSource.WIKI,doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html
Integrability,depend,dependency,". ROOT: tutorials/tree Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tree Directory Reference. Directory dependency graph for tree:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  dictionary;  . Files;  basic.C;   Read data from an ascii file and create a root file with an histogram and an ntuple. ;  ;  basic2.C;   Create can ntuple reading data from an ascii file. ;  ;  bill.C;   Benchmark comparing row-wise and column-wise storage performance ;  ;  cernbuild.C;   Read data (CERN staff) from an ascii file and create a root file with a Tree. ;  ;  cernstaff.C;   Playing with a Tree containing variables of type character ;  ;  circular.C;   Example of a circular Tree ;  ;  clonesA_Event.C;  Example to write & read a Tree built with a complex class inheritance tree. ;  ;  clonesA_Event.cxx;  ;  clonesA_Event.h;  ;  copytree.C;   Copy a subset of a Tree to a new Tree ;  ;  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ;  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ;  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ;  h1analysis.C;   Example of analysis class for the H1 data. ;  ;  h1analysis.h;  ;  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ;  h1analysisProxy.h;  ;  h1analysisProxyCut.C;  ;  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ;  h1analysisTreeReader.h;  ;  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ;  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ;  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ;  hsimpleReader.",MatchSource.WIKI,doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html
Modifiability,variab,variables,". ROOT: tutorials/tree Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tree Directory Reference. Directory dependency graph for tree:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  dictionary;  . Files;  basic.C;   Read data from an ascii file and create a root file with an histogram and an ntuple. ;  ;  basic2.C;   Create can ntuple reading data from an ascii file. ;  ;  bill.C;   Benchmark comparing row-wise and column-wise storage performance ;  ;  cernbuild.C;   Read data (CERN staff) from an ascii file and create a root file with a Tree. ;  ;  cernstaff.C;   Playing with a Tree containing variables of type character ;  ;  circular.C;   Example of a circular Tree ;  ;  clonesA_Event.C;  Example to write & read a Tree built with a complex class inheritance tree. ;  ;  clonesA_Event.cxx;  ;  clonesA_Event.h;  ;  copytree.C;   Copy a subset of a Tree to a new Tree ;  ;  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ;  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ;  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ;  h1analysis.C;   Example of analysis class for the H1 data. ;  ;  h1analysis.h;  ;  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ;  h1analysisProxy.h;  ;  h1analysisProxyCut.C;  ;  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ;  h1analysisTreeReader.h;  ;  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ;  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ;  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ;  hsimpleReader.",MatchSource.WIKI,doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html
Performance,perform,performance,". ROOT: tutorials/tree Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. tree Directory Reference. Directory dependency graph for tree:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  dictionary;  . Files;  basic.C;   Read data from an ascii file and create a root file with an histogram and an ntuple. ;  ;  basic2.C;   Create can ntuple reading data from an ascii file. ;  ;  bill.C;   Benchmark comparing row-wise and column-wise storage performance ;  ;  cernbuild.C;   Read data (CERN staff) from an ascii file and create a root file with a Tree. ;  ;  cernstaff.C;   Playing with a Tree containing variables of type character ;  ;  circular.C;   Example of a circular Tree ;  ;  clonesA_Event.C;  Example to write & read a Tree built with a complex class inheritance tree. ;  ;  clonesA_Event.cxx;  ;  clonesA_Event.h;  ;  copytree.C;   Copy a subset of a Tree to a new Tree ;  ;  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ;  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ;  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ;  h1analysis.C;   Example of analysis class for the H1 data. ;  ;  h1analysis.h;  ;  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ;  h1analysisProxy.h;  ;  h1analysisProxyCut.C;  ;  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ;  h1analysisTreeReader.h;  ;  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ;  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ;  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ;  hsimpleReader.",MatchSource.WIKI,doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html
Usability,simpl,simplest,"t of a Tree to a new Tree, one branch in a separate file. ;  ;  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ;  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ;  h1analysis.C;   Example of analysis class for the H1 data. ;  ;  h1analysis.h;  ;  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ;  h1analysisProxy.h;  ;  h1analysisProxyCut.C;  ;  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ;  h1analysisTreeReader.h;  ;  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ;  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ;  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ;  hsimpleReader.C;   TTreeReader simplest example. ;  ;  htest.C;   Save histograms in Tree branches ;  ;  hvector.C;   Write and read STL vectors in a tree. ;  ;  JetEvent.cxx;  ;  JetEvent.h;  ;  jets.C;  Usage of a Tree using the JetEvent class. ;  ;  ntuple1.C;   Simple tree analysis. ;  ;  parallelcoord.C;   Script illustrating the use of the TParallelCoord class ;  ;  parallelcoordtrans.C;   Use of transparency with ||-Coord. ;  ;  printSizes.C;   This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree. ;  ;  run_h1analysis.C;   Macro driving the analysis can specify file name and type ;  ;  spider.C;   TSpider example. ;  ;  staff.C;   Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  ;  tcl.C;   How to write a TClonesArray to a TTree ;  ;  temperature.C;  This tutorial illustrates how to use the highlight mode with trees. ;  ;  tree.C;   Display the Tree data structur",MatchSource.WIKI,doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html
Integrability,depend,dependency,". ROOT: core/cont Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. cont Directory Reference. Directory dependency graph for cont:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  doc;  ;  inc;  ;  src;  . corecont. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/dir_dab74c5cdd3a71e5814fe91e0c8171fa.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_dab74c5cdd3a71e5814fe91e0c8171fa.html
Integrability,depend,dependency,". ROOT: core/foundation/inc Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. inc Directory Reference. Directory dependency graph for inc:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  ROOT;  . Files;  DllImport.h;  ;  ESTLType.h;  ;  RStringView.h;  ;  Rstrstream.h;  ;  RtypesCore.h;  ;  RVersion.h;  ;  TClassEdit.h;  ;  TError.h;  ;  ThreadLocalStorage.h;  . corefoundationinc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/dir_eb0888ddaad283ef2de2c9df75228bfd.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_eb0888ddaad283ef2de2c9df75228bfd.html
Integrability,depend,dependency,". ROOT: core Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. core Directory Reference. Directory dependency graph for core:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  base;  ;  clingutils;  ;  cont;  ;  dictgen;  ;  foundation;  ;  gui;  ;  imt;  ;  macosx;  ;  meta;  ;  metacling;  ;  multiproc;  ;  rint;  ;  testsupport;  ;  thread;  ;  unix;  ;  winnt;  ;  zip;  . core. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/dir_ed1accc5bc42b26d499c0c84b15b16d5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_ed1accc5bc42b26d499c0c84b15b16d5.html
Testability,test,testsupport,". ROOT: core Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. core Directory Reference. Directory dependency graph for core:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  base;  ;  clingutils;  ;  cont;  ;  dictgen;  ;  foundation;  ;  gui;  ;  imt;  ;  macosx;  ;  meta;  ;  metacling;  ;  multiproc;  ;  rint;  ;  testsupport;  ;  thread;  ;  unix;  ;  winnt;  ;  zip;  . core. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/dir_ed1accc5bc42b26d499c0c84b15b16d5.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/dir_ed1accc5bc42b26d499c0c84b15b16d5.html
Availability,avail,available,"tion parameters and a SparkContext object created with the desired options. After this initial setup, an RDataFrame with distributed capabilities is created and connected to the SparkContext instance. Finally, a couple of histograms are drawn from the created columns in the dataset.; import pyspark; import ROOT; ; # Point RDataFrame calls to Spark RDataFrame object; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; ; # Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; ; # Create a SparkConf object with all the desired Spark configuration parameters; sparkconf = pyspark.SparkConf().setAll(; {""spark.app.name"": ""distrdf001_spark_connection"",; ""spark.master"": ""local[2]"",; ""spark.driver.memory"": ""4g""}.items()); #",MatchSource.WIKI,doc/master/distrdf001__spark__connection_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/distrdf001__spark__connection_8py.html
Deployability,configurat,configuration,". ROOT: tutorials/dataframe/distrdf001_spark_connection.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; distrdf001_spark_connection.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Configure a Spark connection and fill two histograms distributedly. ; This tutorial shows the ingredients needed to setup the connection to a Spark cluster, namely a SparkConf object holding configuration parameters and a SparkContext object created with the desired options. After this initial setup, an RDataFrame with distributed capabilities is created and connected to the SparkContext instance. Finally, a couple of histograms are drawn from the created columns in the dataset.; import pyspark; import ROOT; ; # Point RDataFrame calls to Spark RDataFrame object; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; ; # Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_",MatchSource.WIKI,doc/master/distrdf001__spark__connection_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/distrdf001__spark__connection_8py.html
Modifiability,config,configuration,". ROOT: tutorials/dataframe/distrdf001_spark_connection.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; distrdf001_spark_connection.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Configure a Spark connection and fill two histograms distributedly. ; This tutorial shows the ingredients needed to setup the connection to a Spark cluster, namely a SparkConf object holding configuration parameters and a SparkContext object created with the desired options. After this initial setup, an RDataFrame with distributed capabilities is created and connected to the SparkContext instance. Finally, a couple of histograms are drawn from the created columns in the dataset.; import pyspark; import ROOT; ; # Point RDataFrame calls to Spark RDataFrame object; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; ; # Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_",MatchSource.WIKI,doc/master/distrdf001__spark__connection_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/distrdf001__spark__connection_8py.html
Performance,concurren,concurrent,"tion parameters and a SparkContext object created with the desired options. After this initial setup, an RDataFrame with distributed capabilities is created and connected to the SparkContext instance. Finally, a couple of histograms are drawn from the created columns in the dataset.; import pyspark; import ROOT; ; # Point RDataFrame calls to Spark RDataFrame object; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; ; # Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; ; # Create a SparkConf object with all the desired Spark configuration parameters; sparkconf = pyspark.SparkConf().setAll(; {""spark.app.name"": ""distrdf001_spark_connection"",; ""spark.master"": ""local[2]"",; ""spark.driver.memory"": ""4g""}.items()); #",MatchSource.WIKI,doc/master/distrdf001__spark__connection_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/distrdf001__spark__connection_8py.html
Security,access,access,"e SparkContext instance. Finally, a couple of histograms are drawn from the created columns in the dataset.; import pyspark; import ROOT; ; # Point RDataFrame calls to Spark RDataFrame object; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; ; # Setup the connection to Spark; # First create a dictionary with keys representing Spark specific configuration; # parameters. In this tutorial we use the following configuration parameters:; #; # 1. spark.app.name: The name of the Spark application; # 2. spark.master: The Spark endpoint responsible for running the; # application. With the syntax ""local[2]"" we signal Spark we want to run; # locally on the same machine with 2 cores, each running a separate; # process. The default behaviour of a Spark application would run; # locally on the same machine with as many concurrent processes as; # available cores, that could be also written as ""local[*]"".; #; # If you have access to a remote cluster you should substitute the endpoint URL; # of your Spark master in the form ""spark://HOST:PORT"" in the value of; # `spark.master`. Depending on the availability of your cluster you may request; # more computing nodes or cores per node with a similar configuration:; #; # sparkconf = pyspark.SparkConf().setAll(; # {""spark.master"": ""spark://HOST:PORT"",; # ""spark.executor.instances"": <number_of_nodes>,; # ""spark.executor.cores"" <cores_per_node>,}.items()); #; # You can find all configuration options and more details in the official Spark; # documentation at https://spark.apache.org/docs/latest/configuration.html .; ; # Create a SparkConf object with all the desired Spark configuration parameters; sparkconf = pyspark.SparkConf().setAll(; {""spark.app.name"": ""distrdf001_spark_connection"",; ""spark.master"": ""local[2]"",; ""spark.driver.memory"": ""4g""}.items()); # Create a SparkContext with the configuration stored in `sparkconf`; sparkcontext = pyspark.SparkContext(conf=sparkconf); ; # Create an RDataFrame that will use Spark as a back",MatchSource.WIKI,doc/master/distrdf001__spark__connection_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/distrdf001__spark__connection_8py.html
Availability,avail,available,"rectly the object previously created. In case the cluster was setup; externally, you need to provide an endpoint URL to the client, e.g.; 'https://myscheduler.domain:8786'.; ; Through Dask, you can connect to various types of cluster resources. For; example, you can connect together a set of machines through SSH and use them; to run your computations. This is done through the `SSHCluster` class. For; example:; ; ```python; from dask.distributed import SSHCluster; cluster = SSHCluster(; # A list with machine host names, the first name will be used as; # scheduler, following names will become workers.; hosts=[""machine1"",""machine2"",""machine3""],; # A dictionary of options for each worker node, here we set the number; # of cores to be used on each node.; worker_options={""nprocs"":4,},; ); ```; ; Another common usecase is interfacing Dask to a batch system like HTCondor or; Slurm. A separate package called dask-jobqueue (https://jobqueue.dask.org); extends the available Dask cluster classes to enable running Dask computations; as batch jobs. In this case, the cluster object usually receives the parameters; that would be written in the job description file. For example:; ; ```python; from dask_jobqueue import HTCondorCluster; cluster = HTCondorCluster(; cores=1,; memory='2000MB',; disk='1000MB',; ); # Use the scale method to send as many jobs as needed; cluster.scale(4); ```; ; In this tutorial, a cluster object is created for the local machine, using; multiprocessing (processes=True) on 2 workers (n_workers=2) each using only; 1 core (threads_per_worker=1) and 2GiB of RAM (memory_limit=""2GiB"").; """"""; cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB""); client = Client(cluster); return client; ; ; # This tutorial uses Python multiprocessing, so the creation of the cluster; # needs to be wrapped in the main clause as described in the Python docs; # https://docs.python.org/3/library/multiprocessing.html; if __name__ == ""__main__"":; ;",MatchSource.WIKI,doc/master/distrdf002__dask__connection_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/distrdf002__dask__connection_8py.html
Energy Efficiency,schedul,scheduler,". To use; only the local machine (e.g. your laptop), a `LocalCluster` object can be; used. This step can be skipped if you have access to an existing Dask; cluster; in that case, the cluster administrator should provide you with a; URL to connect to the cluster in step 2. More options for cluster creation; can be found in the Dask docs at; http://distributed.dask.org/en/stable/api.html#cluster .; 2. Creating a Dask client object that connects to the cluster. This accepts; directly the object previously created. In case the cluster was setup; externally, you need to provide an endpoint URL to the client, e.g.; 'https://myscheduler.domain:8786'.; ; Through Dask, you can connect to various types of cluster resources. For; example, you can connect together a set of machines through SSH and use them; to run your computations. This is done through the `SSHCluster` class. For; example:; ; ```python; from dask.distributed import SSHCluster; cluster = SSHCluster(; # A list with machine host names, the first name will be used as; # scheduler, following names will become workers.; hosts=[""machine1"",""machine2"",""machine3""],; # A dictionary of options for each worker node, here we set the number; # of cores to be used on each node.; worker_options={""nprocs"":4,},; ); ```; ; Another common usecase is interfacing Dask to a batch system like HTCondor or; Slurm. A separate package called dask-jobqueue (https://jobqueue.dask.org); extends the available Dask cluster classes to enable running Dask computations; as batch jobs. In this case, the cluster object usually receives the parameters; that would be written in the job description file. For example:; ; ```python; from dask_jobqueue import HTCondorCluster; cluster = HTCondorCluster(; cores=1,; memory='2000MB',; disk='1000MB',; ); # Use the scale method to send as many jobs as needed; cluster.scale(4); ```; ; In this tutorial, a cluster object is created for the local machine, using; multiprocessing (processes=True) on 2 workers (n_work",MatchSource.WIKI,doc/master/distrdf002__dask__connection_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/distrdf002__dask__connection_8py.html
Integrability,depend,depending,"...; No Matches. Namespaces ; distrdf002_dask_connection.py File ReferenceTutorials » Dataframe tutorials. Detailed Description; Configure a Dask connection and fill two histograms distributedly. ; This tutorial shows the ingredients needed to setup the connection to a Dask cluster (e.g. a LocalCluster for a single machine). After this initial setup, an RDataFrame with distributed capabilities is created and connected to a Dask Client instance. Finally, a couple of histograms are drawn from the created columns in the dataset. Relevant documentation can be found at http://distributed.dask.org/en/stable .; from dask.distributed import LocalCluster, Client; import ROOT; ; # Point RDataFrame calls to Dask RDataFrame object; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; ; ; def create_connection():; """"""; Setup connection to a Dask cluster. Two ingredients are needed:; 1. Creating a cluster object that represents computing resources. This can be; done in various ways depending on the type of resources at disposal. To use; only the local machine (e.g. your laptop), a `LocalCluster` object can be; used. This step can be skipped if you have access to an existing Dask; cluster; in that case, the cluster administrator should provide you with a; URL to connect to the cluster in step 2. More options for cluster creation; can be found in the Dask docs at; http://distributed.dask.org/en/stable/api.html#cluster .; 2. Creating a Dask client object that connects to the cluster. This accepts; directly the object previously created. In case the cluster was setup; externally, you need to provide an endpoint URL to the client, e.g.; 'https://myscheduler.domain:8786'.; ; Through Dask, you can connect to various types of cluster resources. For; example, you can connect together a set of machines through SSH and use them; to run your computations. This is done through the `SSHCluster` class. For; example:; ; ```python; from dask.distributed import SSHCluster; cluster = SSH",MatchSource.WIKI,doc/master/distrdf002__dask__connection_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/distrdf002__dask__connection_8py.html
Modifiability,extend,extends,"rectly the object previously created. In case the cluster was setup; externally, you need to provide an endpoint URL to the client, e.g.; 'https://myscheduler.domain:8786'.; ; Through Dask, you can connect to various types of cluster resources. For; example, you can connect together a set of machines through SSH and use them; to run your computations. This is done through the `SSHCluster` class. For; example:; ; ```python; from dask.distributed import SSHCluster; cluster = SSHCluster(; # A list with machine host names, the first name will be used as; # scheduler, following names will become workers.; hosts=[""machine1"",""machine2"",""machine3""],; # A dictionary of options for each worker node, here we set the number; # of cores to be used on each node.; worker_options={""nprocs"":4,},; ); ```; ; Another common usecase is interfacing Dask to a batch system like HTCondor or; Slurm. A separate package called dask-jobqueue (https://jobqueue.dask.org); extends the available Dask cluster classes to enable running Dask computations; as batch jobs. In this case, the cluster object usually receives the parameters; that would be written in the job description file. For example:; ; ```python; from dask_jobqueue import HTCondorCluster; cluster = HTCondorCluster(; cores=1,; memory='2000MB',; disk='1000MB',; ); # Use the scale method to send as many jobs as needed; cluster.scale(4); ```; ; In this tutorial, a cluster object is created for the local machine, using; multiprocessing (processes=True) on 2 workers (n_workers=2) each using only; 1 core (threads_per_worker=1) and 2GiB of RAM (memory_limit=""2GiB"").; """"""; cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB""); client = Client(cluster); return client; ; ; # This tutorial uses Python multiprocessing, so the creation of the cluster; # needs to be wrapped in the main clause as described in the Python docs; # https://docs.python.org/3/library/multiprocessing.html; if __name__ == ""__main__"":; ;",MatchSource.WIKI,doc/master/distrdf002__dask__connection_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/distrdf002__dask__connection_8py.html
Security,access,access," ingredients needed to setup the connection to a Dask cluster (e.g. a LocalCluster for a single machine). After this initial setup, an RDataFrame with distributed capabilities is created and connected to a Dask Client instance. Finally, a couple of histograms are drawn from the created columns in the dataset. Relevant documentation can be found at http://distributed.dask.org/en/stable .; from dask.distributed import LocalCluster, Client; import ROOT; ; # Point RDataFrame calls to Dask RDataFrame object; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; ; ; def create_connection():; """"""; Setup connection to a Dask cluster. Two ingredients are needed:; 1. Creating a cluster object that represents computing resources. This can be; done in various ways depending on the type of resources at disposal. To use; only the local machine (e.g. your laptop), a `LocalCluster` object can be; used. This step can be skipped if you have access to an existing Dask; cluster; in that case, the cluster administrator should provide you with a; URL to connect to the cluster in step 2. More options for cluster creation; can be found in the Dask docs at; http://distributed.dask.org/en/stable/api.html#cluster .; 2. Creating a Dask client object that connects to the cluster. This accepts; directly the object previously created. In case the cluster was setup; externally, you need to provide an endpoint URL to the client, e.g.; 'https://myscheduler.domain:8786'.; ; Through Dask, you can connect to various types of cluster resources. For; example, you can connect together a set of machines through SSH and use them; to run your computations. This is done through the `SSHCluster` class. For; example:; ; ```python; from dask.distributed import SSHCluster; cluster = SSHCluster(; # A list with machine host names, the first name will be used as; # scheduler, following names will become workers.; hosts=[""machine1"",""machine2"",""machine3""],; # A dictionary of options for each worker node, her",MatchSource.WIKI,doc/master/distrdf002__dask__connection_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/distrdf002__dask__connection_8py.html
Testability,mock,mock,"en in the job description file. For example:; ; ```python; from dask_jobqueue import HTCondorCluster; cluster = HTCondorCluster(; cores=1,; memory='2000MB',; disk='1000MB',; ); # Use the scale method to send as many jobs as needed; cluster.scale(4); ```; ; In this tutorial, a cluster object is created for the local machine, using; multiprocessing (processes=True) on 2 workers (n_workers=2) each using only; 1 core (threads_per_worker=1) and 2GiB of RAM (memory_limit=""2GiB"").; """"""; cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB""); client = Client(cluster); return client; ; ; # This tutorial uses Python multiprocessing, so the creation of the cluster; # needs to be wrapped in the main clause as described in the Python docs; # https://docs.python.org/3/library/multiprocessing.html; if __name__ == ""__main__"":; ; # Create the connection to the mock Dask cluster on the local machine; connection = create_connection(); # Create an RDataFrame that will use Dask as a backend for computations; df = RDataFrame(1000, daskclient=connection); ; # Set the random seed and define two columns of the dataset with random numbers.; ROOT.gRandom.SetSeed(1); df_1 = df.Define(""gaus"", ""gRandom->Gaus(10, 1)"").Define(""exponential"", ""gRandom->Exp(10)""); ; # Book an histogram for each column; h_gaus = df_1.Histo1D((""gaus"", ""Normal distribution"", 50, 0, 30), ""gaus""); h_exp = df_1.Histo1D((""exponential"", ""Exponential distribution"", 50, 0, 30), ""exponential""); ; # Plot the histograms side by side on a canvas; c = ROOT.TCanvas(""distrdf002"", ""distrdf002"", 800, 400); c.Divide(2, 1); c.cd(1); h_gaus.DrawCopy(); c.cd(2); h_exp.DrawCopy(); ; # Save the canvas; c.SaveAs(""distrdf002_dask_connection.png""); print(""Saved figure to distrdf002_dask_connection.png""); . DateFebruary 2022 ; AuthorVincenzo Eduardo Padulano ; Definition in file distrdf002_dask_connection.py. tutorialsdataframedistrdf002_dask_connection.py. ROOT master - Reference Guide Generated on Tue No",MatchSource.WIKI,doc/master/distrdf002__dask__connection_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/distrdf002__dask__connection_8py.html
Modifiability,variab,variable,"ng up real-time data representation for distributed computations. By calling the LiveVisualize function, you can observe the canvas updating with the intermediate results of the histograms as the distributed computation progresses.; from dask.distributed import LocalCluster, Client; import ROOT; ; # Import the live visualization function; LiveVisualize = ROOT.RDF.Experimental.Distributed.LiveVisualize; ; # Point RDataFrame calls to Dask RDataFrame object; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; ; # Function to create a Dask cluster and return the client; def create_connection():; cluster = LocalCluster(n_workers=4, threads_per_worker=1, processes=True, memory_limit=""2GiB""); client = Client(cluster); return client; ; # Function to fit a Gaussian function to the plot; def fit_gaus(plot):; plot.Fit(""gaus""); ; if __name__ == ""__main__"":; # Setup connection to a Dask cluster; connection = create_connection(); ; # Create an RDataFrame that will use Dask as a backend for computations; num_entries = 100000000; d = RDataFrame(num_entries, daskclient=connection, npartitions=30); ; # Define a gaussean distribution with a variable mean; dd = d.Define(""x"", f""gRandom->Gaus(10*rdfentry_/{num_entries}, 2)"")\; .Define(""y"", f""gRandom->Gaus(10*rdfentry_/{num_entries}, 3)"")\; ; # Create a 1D and a 2D histogram using the defined columns; h_normal_1d = dd.Histo1D((""normal_1d"", ""1D Histogram of a Normal Distribution"",; 100, -10, 20),; ""x""); ; h_normal_2d = dd.Histo2D((""normal_2d"", ""2D Histogram of a Normal Distribution"",; 100, -15, 25, ; 100, -15, 25; ), ""x"", ""y""); ; # Apply LiveVisualize to the histograms. ; # The `fit_gaus` function will be applied to the accumulating partial result ; # of the 1D histogram. The 2D histogram will not be further modified, just drawn. ; # Find more details about usage of LiveVisualize in the RDataFrame docs.; LiveVisualize({h_normal_1d: fit_gaus, h_normal_2d: None}); ; # Plot the histograms side by side on a canvas; c = ROOT.TCanvas(",MatchSource.WIKI,doc/master/distrdf003__live__visualization_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/distrdf003__live__visualization_8py.html
Integrability,rout,routine,"input matrix into the given host buffer. Function to be specialized by; 161 * the architecture-specific backend. */; 162 void CopyInput(HostBuffer_t &buffer, IndexIterator_t begin, size_t batchSize);; 163 /** Copy output matrix into the given host buffer. Function to be specialized; 164 * by the architecture-specific backend. */; 165 void CopyOutput(HostBuffer_t &buffer, IndexIterator_t begin, size_t batchSize);; 166 /** Copy weight matrix into the given host buffer. Function to be specialized; 167 * by the architecture-specific backend. */; 168 void CopyWeights(HostBuffer_t &buffer, IndexIterator_t begin, size_t batchSize);; 169 ; 170 BatchIterator_t begin() {return TBatchIterator<Data_t, AArchitecture>(*this);}; 171 BatchIterator_t end(); 172 {; 173 return TBatchIterator<Data_t, AArchitecture>(*this, fNSamples / fBatchSize);; 174 }; 175 ; 176 /** Shuffle the order of the samples in the batch. The shuffling is indirect,; 177 * i.e. only the indices are shuffled. No input data is moved by this; 178 * routine. */; 179 void Shuffle();; 180 ; 181 /** Return the next batch from the training set. The TDataLoader object; 182 * keeps an internal counter that cycles over the batches in the training; 183 * set. */; 184 TBatch<AArchitecture> GetBatch();; 185 ; 186};; 187 ; 188//; 189// TBatch Class.; 190//______________________________________________________________________________; 191template <typename AArchitecture>; 192TBatch<AArchitecture>::TBatch(Matrix_t &inputMatrix, Matrix_t &outputMatrix, Matrix_t &weightMatrix); 193 : fInputMatrix(inputMatrix), fOutputMatrix(outputMatrix), fWeightMatrix(weightMatrix); 194{; 195 // Nothing to do here.; 196}; 197 ; 198//; 199// TDataLoader Class.; 200//______________________________________________________________________________; 201template<typename Data_t, typename AArchitecture>; 202TDataLoader<Data_t, AArchitecture>::TDataLoader(; 203 const Data_t & data, size_t nSamples, size_t batchSize,; 204 size_t nInputFeatures, size_t nOut",MatchSource.WIKI,doc/master/DNN_2DataLoader_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DNN_2DataLoader_8h_source.html
Modifiability,variab,variable,"fDeviceBuffersDefinition DataLoader.h:146; TMVA::DNN::TDataLoader::operator=TDataLoader & operator=(const TDataLoader &)=default; TMVA::DNN::TDataLoader::Matrix_ttypename AArchitecture::Matrix_t Matrix_tDefinition DataLoader.h:134; TMVA::DNN::TDataLoader::fNStreamssize_t fNStreamsNumber of buffer pairs.Definition DataLoader.h:145; TMVA::DNN::TDataLoader::TDataLoaderTDataLoader(const Data_t &data, size_t nSamples, size_t batchSize, size_t nInputFeatures, size_t nOutputFeatures, size_t nStreams=1)Definition DataLoader.h:202; TMVA::DNN::TDataLoader::fBatchIndexsize_t fBatchIndexDefinition DataLoader.h:143; TMVA::DNN::TDataLoader::fBatchSizesize_t fBatchSizeDefinition DataLoader.h:140; TMVA::DNN::TDataLoader::HostBuffer_ttypename AArchitecture::HostBuffer_t HostBuffer_tDefinition DataLoader.h:132; TMVA::DNN::TDataLoader::Shufflevoid Shuffle()Shuffle the order of the samples in the batch.Definition DataLoader.h:269; TMVA::DNN::TDataLoader::fNOutputFeaturessize_t fNOutputFeaturesDefinition DataLoader.h:142; TMVA::DNN::TDataLoader::CopyWeightsvoid CopyWeights(HostBuffer_t &buffer, IndexIterator_t begin, size_t batchSize)Copy weight matrix into the given host buffer.; TMVA::DNN::TDataLoader::TDataLoaderTDataLoader(const TDataLoader &)=default; TMVA::DataSetInfoClass that contains all the data information.Definition DataSetInfo.h:62; TMatrixTTMatrixT.Definition TMatrixT.h:40; TMVA::DNN::IndexIterator_ttypename std::vector< size_t >::iterator IndexIterator_tDefinition DataLoader.h:42; TMVA::DNN::TMVAInput_tstd::tuple< const std::vector< Event * > &, const DataSetInfo & > TMVAInput_tDefinition DataLoader.h:40; TMVA::DNN::MatrixInput_tstd::tuple< const TMatrixT< Double_t > &, const TMatrixT< Double_t > &, const TMatrixT< Double_t > & > MatrixInput_tDefinition DataLoader.h:38; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22. tmvatmvaincTMVADNNDataLoader.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/DNN_2DataLoader_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DNN_2DataLoader_8h_source.html
Performance,load,loader,". ROOT: tmva/tmva/inc/TMVA/DNN/DataLoader.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. DataLoader.h. Go to the documentation of this file. 1// @(#)root/tmva/tmva/dnn:$Id$; 2// Author: Simon Pfreundschuh 08/08/16; 3 ; 4/*************************************************************************; 5 * Copyright (C) 2016, Simon Pfreundschuh *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/////////////////////////////////////////////////////////////////////; 13// Generic data loader for neural network input data. Provides a //; 14// high level abstraction for the transfer of training data to the //; 15// device. //; 16/////////////////////////////////////////////////////////////////////; 17 ; 18#ifndef TMVA_DNN_DATALOADER; 19#define TMVA_DNN_DATALOADER; 20 ; 21#include ""TMatrix.h""; 22#include ""TMVA/Event.h""; 23 ; 24#include <algorithm>; 25#include <random>; 26#include <vector>; 27#include <utility>; 28 ; 29namespace TMVA {; 30 ; 31class DataSetInfo;; 32 ; 33namespace DNN {; 34 ; 35//; 36// Input Data Types; 37//______________________________________________________________________________; 38using MatrixInput_t = std::tuple<const TMatrixT<Double_t> &, const TMatrixT<Double_t> &, const TMatrixT<Double_t> &>;; 39using TMVAInput_t =; 40 std::tuple<const std::vector<Event *> &, const DataSetInfo &>;; 41 ; 42using IndexIterator_t = typename std::vector<size_t>::iterator;; 43 ; 44/** TBatch; 45 *; 46 * Class representing training batches consisting of a matrix of input data; 47 * and a matrix of output data. The input and output data can be accessed using; 48 * the GetInput() and GetOutput() member functions.; 49 *; 50 * \tparam AArchitecture The underlying architecture.; 51 */; 52//_________________________________________________________",MatchSource.WIKI,doc/master/DNN_2DataLoader_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DNN_2DataLoader_8h_source.html
Security,access,accessed," of training data to the //; 15// device. //; 16/////////////////////////////////////////////////////////////////////; 17 ; 18#ifndef TMVA_DNN_DATALOADER; 19#define TMVA_DNN_DATALOADER; 20 ; 21#include ""TMatrix.h""; 22#include ""TMVA/Event.h""; 23 ; 24#include <algorithm>; 25#include <random>; 26#include <vector>; 27#include <utility>; 28 ; 29namespace TMVA {; 30 ; 31class DataSetInfo;; 32 ; 33namespace DNN {; 34 ; 35//; 36// Input Data Types; 37//______________________________________________________________________________; 38using MatrixInput_t = std::tuple<const TMatrixT<Double_t> &, const TMatrixT<Double_t> &, const TMatrixT<Double_t> &>;; 39using TMVAInput_t =; 40 std::tuple<const std::vector<Event *> &, const DataSetInfo &>;; 41 ; 42using IndexIterator_t = typename std::vector<size_t>::iterator;; 43 ; 44/** TBatch; 45 *; 46 * Class representing training batches consisting of a matrix of input data; 47 * and a matrix of output data. The input and output data can be accessed using; 48 * the GetInput() and GetOutput() member functions.; 49 *; 50 * \tparam AArchitecture The underlying architecture.; 51 */; 52//______________________________________________________________________________; 53template <typename AArchitecture>; 54class TBatch; 55{; 56private:; 57 ; 58 using Matrix_t = typename AArchitecture::Matrix_t;; 59 ; 60 Matrix_t fInputMatrix;; 61 Matrix_t fOutputMatrix;; 62 Matrix_t fWeightMatrix;; 63 ; 64public:; 65 TBatch(Matrix_t &, Matrix_t &, Matrix_t &);; 66 TBatch(const TBatch &) = default;; 67 TBatch( TBatch &&) = default;; 68 TBatch & operator=(const TBatch &) = default;; 69 TBatch & operator=( TBatch &&) = default;; 70 ; 71 /** Return the matrix representing the input data. */; 72 Matrix_t &GetInput() { return fInputMatrix; }; 73 /** Return the matrix representing the output data. */; 74 Matrix_t &GetOutput() { return fOutputMatrix; }; 75 /** Return the matrix holding the event weights. */; 76 Matrix_t &GetWeights() { return fWeightMatrix; }; 77};; 78 ;",MatchSource.WIKI,doc/master/DNN_2DataLoader_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DNN_2DataLoader_8h_source.html
Integrability,depend,depending,". ROOT: tutorials/io/double32.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. double32.C File ReferenceTutorials » IO tutorials. Detailed Description; Tutorial illustrating use and precision of the Double32_t data type You should run this tutorial with ACLIC: a dictionary will be automatically created. ; root > .x double32.C+; The following cases are supported for streaming a Double32_t type depending on the range declaration in the comment field of the data member:. Case Declaration . A Double32_t fNormal; . B Double32_t fTemperature; //[0,100] . C Double32_t fCharge; //[-1,1,2] . D Double32_t fVertex[3]; //[-30,30,10] . E Double32_t fChi2; //[0,0,6] . F Int_t fNsp;; Double32_t* fPointValue; //[fNsp][0,3] . Case A fNormal is converted from a Double_t to a Float_t; Case B fTemperature is converted to a 32 bit unsigned integer; Case C fCharge is converted to a 2 bits unsigned integer; Case D the array elements of fVertex are converted to an unsigned 10 bits integer; Case E fChi2 is converted to a Float_t with truncated precision at 6 bits; Case F the fNsp elements of array fPointvalue are converted to an unsigned 32 bit integer. Note that the range specifier must follow the dimension specifier. Case B has more precision than case A: 9 to 10 significative digits and 6 to 7 digits respectively. The range specifier has the general format: [xmin,xmax] or [xmin,xmax,nbits]. Examples; [0,1]; [-10,100];; [-pi,pi], [-pi/2,pi/4],[-2pi,2*pi]; [-10,100,16]; [0,0,8] Note that:; If nbits is not specified, or nbits <2 or nbits>32 it is set to 32; If (xmin==0 and xmax==0 and nbits <=14) the double word will be converted to a float and its mantissa truncated to nbits significative bits. IMPORTANT NOTE; Lets assume an original variable double x. When using the format [0,0,8] (i.e. range not specified) you get the best relative precision when storing and reading back the truncated x, say xt. The variance of (x-xt)/x will be better than",MatchSource.WIKI,doc/master/double32_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/double32_8C.html
Modifiability,variab,variable,"ormal is converted from a Double_t to a Float_t; Case B fTemperature is converted to a 32 bit unsigned integer; Case C fCharge is converted to a 2 bits unsigned integer; Case D the array elements of fVertex are converted to an unsigned 10 bits integer; Case E fChi2 is converted to a Float_t with truncated precision at 6 bits; Case F the fNsp elements of array fPointvalue are converted to an unsigned 32 bit integer. Note that the range specifier must follow the dimension specifier. Case B has more precision than case A: 9 to 10 significative digits and 6 to 7 digits respectively. The range specifier has the general format: [xmin,xmax] or [xmin,xmax,nbits]. Examples; [0,1]; [-10,100];; [-pi,pi], [-pi/2,pi/4],[-2pi,2*pi]; [-10,100,16]; [0,0,8] Note that:; If nbits is not specified, or nbits <2 or nbits>32 it is set to 32; If (xmin==0 and xmax==0 and nbits <=14) the double word will be converted to a float and its mantissa truncated to nbits significative bits. IMPORTANT NOTE; Lets assume an original variable double x. When using the format [0,0,8] (i.e. range not specified) you get the best relative precision when storing and reading back the truncated x, say xt. The variance of (x-xt)/x will be better than when specifying a range for the same number of bits. However the precision relative to the range (x-xt)/(xmax-xmin) will be worse, and vice-versa. The format [0,0,8] is also interesting when the range of x is infinite or unknown. ; #include ""ROOT/TSeq.hxx""; #include ""TCanvas.h""; #include ""TFile.h""; #include ""TGraph.h""; #include ""TH1.h""; #include ""TLegend.h""; #include ""TMath.h""; #include ""TRandom3.h""; #include ""TTree.h""; ; class DemoDouble32 {; private:; Double_t fD64; // reference member with full double precision; Double32_t fF32; // saved as a 32 bit Float_t; Double32_t fI32; //[-pi,pi] saved as a 32 bit unsigned int; Double32_t fI30; //[-pi,pi,30] saved as a 30 bit unsigned int; Double32_t fI28; //[-pi,pi,28] saved as a 28 bit unsigned int; Double32_t fI26; //[-pi",MatchSource.WIKI,doc/master/double32_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/double32_8C.html
Testability,log,logarithm," zip bytes in the branch if option =""*"" includes all sub-branches of this branc...Definition TBranch.cxx:2238; TCanvasThe Canvas class.Definition TCanvas.h:23; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; double; c1return c1Definition legend1.C:41; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::TSeqITSeq< int > TSeqIDefinition TSeq.hxx:203; TMVA_SOFIE_GNN_Parser.treetreeDefinition TMVA_SOFIE_GNN_Parser.py:169; TMath::RMSDouble_t RMS(Long64_t n, const T *a, const Double_t *w=nullptr)Returns the Standard Deviation of an array a with length n.Definition TMath.h:1188; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::Log10Double_t Log10(Double_t x)Returns the common (base-10) logarithm of x.Definition TMath.h:762; AuthorRene Brun ; Definition in file double32.C. tutorialsiodouble32.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/double32_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/double32_8C.html
Integrability,depend,depending,". ROOT: tutorials/io/double32.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. double32.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_io; 3/// \notebook -js; 4/// Tutorial illustrating use and precision of the Double32_t data type; 5/// You should run this tutorial with ACLIC: a dictionary will be automatically; 6/// created.; 7/// ~~~{.bash}; 8/// root > .x double32.C+; 9/// ~~~; 10/// The following cases are supported for streaming a Double32_t type; 11/// depending on the range declaration in the comment field of the data member:; 12///; 13/// Case | Declaration; 14/// -----|------------; 15/// A | Double32_t fNormal;; 16/// B | Double32_t fTemperature; //[0,100]; 17/// C | Double32_t fCharge; //[-1,1,2]; 18/// D | Double32_t fVertex[3]; //[-30,30,10]; 19/// E | Double32_t fChi2; //[0,0,6]; 20/// F | Int_t fNsp;<br>Double32_t* fPointValue; //[fNsp][0,3]; 21///; 22/// * Case A fNormal is converted from a Double_t to a Float_t; 23/// * Case B fTemperature is converted to a 32 bit unsigned integer; 24/// * Case C fCharge is converted to a 2 bits unsigned integer; 25/// * Case D the array elements of fVertex are converted to an unsigned 10 bits integer; 26/// * Case E fChi2 is converted to a Float_t with truncated precision at 6 bits; 27/// * Case F the fNsp elements of array fPointvalue are converted to an unsigned 32 bit integer. Note that the range specifier must follow the dimension specifier.; 28///; 29/// Case B has more precision than case A: 9 to 10 significative digits and 6 to 7 digits respectively.; 30/// The range specifier has the general format: [xmin,xmax] or [xmin,xmax,nbits]. Examples; 31/// * [0,1]; 32/// * [-10,100];; 33/// * [-pi,pi], [-pi/2,pi/4],[-2pi,2*pi]; 34/// * [-10,100,16]; 35/// * [0,0,8]; 36/// Note that:; 37/// * If nbits is not specified, or nbits <2 or nbits>32 it is set to 32; 38/// * If (xmin==0 and xmax==0 and nbits <=14) the double word will be converted t",MatchSource.WIKI,doc/master/double32_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/double32_8C_source.html
Modifiability,variab,variable,"Charge is converted to a 2 bits unsigned integer; 25/// * Case D the array elements of fVertex are converted to an unsigned 10 bits integer; 26/// * Case E fChi2 is converted to a Float_t with truncated precision at 6 bits; 27/// * Case F the fNsp elements of array fPointvalue are converted to an unsigned 32 bit integer. Note that the range specifier must follow the dimension specifier.; 28///; 29/// Case B has more precision than case A: 9 to 10 significative digits and 6 to 7 digits respectively.; 30/// The range specifier has the general format: [xmin,xmax] or [xmin,xmax,nbits]. Examples; 31/// * [0,1]; 32/// * [-10,100];; 33/// * [-pi,pi], [-pi/2,pi/4],[-2pi,2*pi]; 34/// * [-10,100,16]; 35/// * [0,0,8]; 36/// Note that:; 37/// * If nbits is not specified, or nbits <2 or nbits>32 it is set to 32; 38/// * If (xmin==0 and xmax==0 and nbits <=14) the double word will be converted to a float and its mantissa truncated to nbits significative bits.; 39///; 40/// ## IMPORTANT NOTE; 41/// Lets assume an original variable double x.; 42/// When using the format [0,0,8] (i.e. range not specified) you get the best; 43/// relative precision when storing and reading back the truncated x, say xt.; 44/// The variance of (x-xt)/x will be better than when specifying a range; 45/// for the same number of bits. However the precision relative to the; 46/// range (x-xt)/(xmax-xmin) will be worse, and vice-versa.; 47/// The format [0,0,8] is also interesting when the range of x is infinite; 48/// or unknown.; 49///; 50/// \macro_image; 51/// \macro_code; 52///; 53/// \author Rene Brun; 54 ; 55#include ""ROOT/TSeq.hxx""; 56#include ""TCanvas.h""; 57#include ""TFile.h""; 58#include ""TGraph.h""; 59#include ""TH1.h""; 60#include ""TLegend.h""; 61#include ""TMath.h""; 62#include ""TRandom3.h""; 63#include ""TTree.h""; 64 ; 65class DemoDouble32 {; 66private:; 67 Double_t fD64; // reference member with full double precision; 68 Double32_t fF32; // saved as a 32 bit Float_t; 69 Double32_t fI32; //[-pi,pi] save",MatchSource.WIKI,doc/master/double32_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/double32_8C_source.html
Testability,log,logarithm,"(Option_t *option="""") constReturn total number of zip bytes in the branch if option =""*"" includes all sub-branches of this branc...Definition TBranch.cxx:2238; TCanvasThe Canvas class.Definition TCanvas.h:23; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; double; c1return c1Definition legend1.C:41; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::TSeqITSeq< int > TSeqIDefinition TSeq.hxx:203; TMVA_SOFIE_GNN_Parser.treetreeDefinition TMVA_SOFIE_GNN_Parser.py:169; TMath::RMSDouble_t RMS(Long64_t n, const T *a, const Double_t *w=nullptr)Returns the Standard Deviation of an array a with length n.Definition TMath.h:1188; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::Log10Double_t Log10(Double_t x)Returns the common (base-10) logarithm of x.Definition TMath.h:762. tutorialsiodouble32.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/double32_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/double32_8C_source.html
Energy Efficiency,efficient,efficient,". ROOT: tutorials/tree/drawsparse.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. drawsparse.C File ReferenceTutorials » Tree tutorials. Detailed Description; Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ; The plot will contain one line for each filled bin, with the bin's coordinates on each axis, and the bin's content on the rightmost axis.; Run as .L $ROOTSYS/tutorials/tree/drawsparse.C+. ; ; ; #include ""TParallelCoord.h""; #include ""TParallelCoordVar.h""; #include ""TROOT.h""; #include ""TTree.h""; #include ""TLeaf.h""; #include ""THnSparse.h""; #include ""TAxis.h""; #include ""TCanvas.h""; #include ""TRandom.h""; #include ""TFile.h""; #include ""TH3.h""; ; TTree* toTree(THnSparse* h); {; // Creates a TTree and fills it with the coordinates of all; // filled bins. The tree will have one branch for each dimension,; // and one for the bin content.; ; Int_t dim = h->GetNdimensions();; TString name(h->GetName()); name += ""_tree"";; TString title(h->GetTitle()); title += "" tree"";; ; TTree* tree = new TTree(name, title);; Double_t* x = new Double_t[dim + 1];; memset(x, 0, sizeof(Double_t) * (dim + 1));; ; TString branchname;; for (Int_t d = 0; d < dim; ++d) {; if (branchname.Length()); branchname += "":"";; TAxis* axis = h->GetAxis(d);; branchname += axis->GetName();; branchname += ""/D"";; }; tree->Branch(""coord"", x, branchname);; tree->Branch(""bincontent"", &x[dim], ""bincontent/D"");; ; Int_t *bins = new Int_t[dim];; for (Long64_t i = 0; i < h->GetNbins(); ++i) {; x[dim] = h->GetBinContent(i, bins);; for (Int_t d = 0; d < dim; ++d) {; x[d] = h->GetAxis(d)->GetBinCenter(bins[d]);; }; ; tree->Fill();; }; ; delete [] bins;; //delete [] x;; return tree;; }; ; ; void drawsparse_draw(THnSparse* h); {; // Draw a THnSparse using TParallelCoord, creating a temporary TTree.; ; TTree* tree = toTree(h);; ; TString whatToDraw;; TIter iLeaf(tree->GetListOfLeaves());; const TLeaf* le",MatchSource.WIKI,doc/master/drawsparse_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/drawsparse_8C.html
Energy Efficiency,power,powerful," Histograms tutorials. Detailed Description; Show the slice of a TH2 following the mouse position. . ; ; void DynamicSlice(); {; // Create a new canvas.; TCanvas* c1 = new TCanvas(""c1"",""Dynamic Slice Example"", 10, 10, 700, 500);; ; //create a 2-d histogram, fill and draw it; TH2F *hpxpy = new TH2F(""hpxpy"", ""py vs px"", 40,-4,4, 40,-4,4);; hpxpy->SetStats(0);; Double_t px,py;; for (Int_t i = 0; i < 50000; i++) {; gRandom->Rannor(px,py);; hpxpy->Fill(px,py);; }; hpxpy->Draw(""col"");; ; //Add a TExec object to the canvas; c1->AddExec(""dynamic"", ""DynamicExec()"");; }; ; void DynamicExec(); {; // Example of function called when a mouse event occurs in a pad.; // When moving the mouse in the canvas, a second canvas shows the; // projection along X of the bin corresponding to the Y position; // of the mouse. The resulting histogram is fitted with a gaussian.; // A ""dynamic"" line shows the current bin position in Y.; // This more elaborated example can be used as a starting point; // to develop more powerful interactive applications exploiting Cling; // as a development engine.; ; static int pyold = 0;; ; float uxmin = gPad->GetUxmin();; float uxmax = gPad->GetUxmax();; int pxmin = gPad->XtoAbsPixel(uxmin);; int pxmax = gPad->XtoAbsPixel(uxmax);; int px = gPad->GetEventX();; int py = gPad->GetEventY();; TObject *select = gPad->GetSelected();; ; gPad->GetCanvas()->FeedbackMode(kTRUE);; if (pyold) {; // erase line at old position; gVirtualX->DrawLine(pxmin, pyold, pxmax, pyold);; pyold = 0;; }; ; if(!select || !select->InheritsFrom(TH2::Class())); return;; ; TH2 *h = (TH2*)select;; ; // draw a line at current position; gVirtualX->DrawLine(pxmin, py, pxmax, py);; pyold = py;; ; Float_t upy = gPad->AbsPixeltoY(py);; Float_t y = gPad->PadtoY(upy);; ; //create or set the new canvas c2; TVirtualPad *padsav = gPad;; TCanvas *c2 = (TCanvas*)gROOT->GetListOfCanvases()->FindObject(""c2"");; if(c2) delete c2->GetPrimitive(""Projection"");; else c2 = new TCanvas(""c2"",""Projection Canvas"",710,10,",MatchSource.WIKI,doc/master/DynamicSlice_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DynamicSlice_8C.html
Modifiability,inherit,inherits,"t(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::GetFunctionvirtual TF1 * GetFunction(const char *name) constReturn pointer to function with name.Definition TH1.cxx:9051; TH1::SetNamevoid SetName(const char *name) overrideChange the name of this histogram.Definition TH1.cxx:8960; TH1::SetStatsvirtual void SetStats(Bool_t stats=kTRUE)Set statistics option on/off.Definition TH1.cxx:8990; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH2Service class for 2-D histogram classes.Definition TH2.h:30; TH2::FillInt_t Fill(Double_t) overrideInvalid Fill method.Definition TH2.cxx:393; TH2::Classstatic TClass * Class(); TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TPad::FindObjectTObject * FindObject(const char *name) const overrideSearch if object named name is inside this pad or in pads inside this pad.Definition TPad.cxx:2700; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; TVirtualPad::cdvirtual TVirtualPad * cd(Int_t subpadnumber=0)=0; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; c2return c2Definition legend2.C:14; DynamicSliceDefinition DynamicSlice.py:1; AuthorsRene Brun, Sergey Linev ; Definition in file DynamicSlice",MatchSource.WIKI,doc/master/DynamicSlice_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DynamicSlice_8C.html
Energy Efficiency,power,powerful,". ROOT: tutorials/pyroot/DynamicSlice.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; DynamicSlice.py File ReferenceTutorials » PyRoot tutorials. Detailed Description; Example of function called when a mouse event occurs in a pad. ; When moving the mouse in the canvas, a second canvas shows the projection along X of the bin corresponding to the Y position of the mouse. The resulting histogram is fitted with a gaussian. A ""dynamic"" line shows the current bin position in Y. This more elaborated example can be used as a starting point to develop more powerful interactive applications exploiting CINT as a development engine.; Note that a class is used to hold on to the canvas that display the selected slice. ; import sys; import ctypes; ; from ROOT import gRandom, gPad, gROOT, gVirtualX; from ROOT import kTRUE, kRed; from ROOT import TCanvas, TH2, TH2F; ; ; class DynamicExec:; ; def __init__( self ):; self._cX = None; self._cY = None; self._old = None; ; def __call__( self ):; ; h = gPad.GetSelected();; if not h:; return; ; if not isinstance( h, TH2 ):; return; ; gPad.GetCanvas().FeedbackMode( kTRUE ); ; # erase old position and draw a line at current position; px = gPad.GetEventX(); py = gPad.GetEventY(); ; uxmin, uxmax = gPad.GetUxmin(), gPad.GetUxmax(); uymin, uymax = gPad.GetUymin(), gPad.GetUymax(); pxmin, pxmax = gPad.XtoAbsPixel( uxmin ), gPad.XtoAbsPixel( uxmax ); pymin, pymax = gPad.YtoAbsPixel( uymin ), gPad.YtoAbsPixel( uymax ); ; if self._old != None:; gVirtualX.DrawLine( pxmin, self._old[1], pxmax, self._old[1] ); gVirtualX.DrawLine( self._old[0], pymin, self._old[0], pymax ); gVirtualX.DrawLine( pxmin, py, pxmax, py ); gVirtualX.DrawLine( px, pymin, px, pymax ); ; self._old = px, py; ; upx = gPad.AbsPixeltoX( px ); x = gPad.PadtoX( upx ); upy = gPad.AbsPixeltoY( py ); y = gPad.PadtoY( upy ); ; padsav = gPad; ; # create or set the display canvases; if not self._cX:; self._cX = TCanvas( 'c2', 'P",MatchSource.WIKI,doc/master/DynamicSlice_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/DynamicSlice_8py.html
Integrability,depend,dependency,". ROOT: tmva/tmvagui/src/efficienciesMulticlass.cxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Typedefs |; Functions |; Variables ; efficienciesMulticlass.cxx File Reference. #include ""TMVA/efficienciesMulticlass.h""; #include ""TMVA/Config.h""; #include ""TMVA/tmvaglob.h""; #include ""TControlBar.h""; #include ""TFile.h""; #include ""TGraph.h""; #include ""TH2F.h""; #include ""TIterator.h""; #include ""TKey.h""; #include ""TROOT.h""; #include <iostream>. Include dependency graph for efficienciesMulticlass.cxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  EfficiencyPlotWrapper;  Note: This file assumes a certain structure on the input file. More...;  . Namespaces; namespace  TMVA;  create variable transformations ;  . Typedefs; using classcanvasmap_t = std::map< TString, EfficiencyPlotWrapper * >;  ; using roccurvelist_t = std::vector< std::tuple< TString, TString, TGraph * > >;  . Functions; std::vector< TString > TMVA::getclassnames (TString dataset, TString fin);  ; roccurvelist_t TMVA::getRocCurves (TDirectory *binDir, TString methodPrefix, TString graphNameRef);  ; void TMVA::plotEfficienciesMulticlass (roccurvelist_t rocCurves, classcanvasmap_t classCanvasMap);  . Variables; const char * BUTTON_TYPE = ""button"";  . Typedef Documentation. ◆ classcanvasmap_t. using classcanvasmap_t = std::map<TString, EfficiencyPlotWrapper *>. Definition at line 116 of file efficienciesMulticlass.cxx. ◆ roccurvelist_t. using roccurvelist_t = std::vector<std::tuple<TString, TString, TGraph *> >. Definition at line 117 of file efficienciesMulticlass.cxx. Variable Documentation. ◆ BUTTON_TYPE. const char* BUTTON_TYPE = ""button"". Definition at line 120 of file efficienciesMulticlass.cxx. tmvatmvaguisrcefficienciesMulticlass.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/efficienciesMulticlass_8cxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/efficienciesMulticlass_8cxx.html
Modifiability,variab,variable,". ROOT: tmva/tmvagui/src/efficienciesMulticlass.cxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Typedefs |; Functions |; Variables ; efficienciesMulticlass.cxx File Reference. #include ""TMVA/efficienciesMulticlass.h""; #include ""TMVA/Config.h""; #include ""TMVA/tmvaglob.h""; #include ""TControlBar.h""; #include ""TFile.h""; #include ""TGraph.h""; #include ""TH2F.h""; #include ""TIterator.h""; #include ""TKey.h""; #include ""TROOT.h""; #include <iostream>. Include dependency graph for efficienciesMulticlass.cxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  EfficiencyPlotWrapper;  Note: This file assumes a certain structure on the input file. More...;  . Namespaces; namespace  TMVA;  create variable transformations ;  . Typedefs; using classcanvasmap_t = std::map< TString, EfficiencyPlotWrapper * >;  ; using roccurvelist_t = std::vector< std::tuple< TString, TString, TGraph * > >;  . Functions; std::vector< TString > TMVA::getclassnames (TString dataset, TString fin);  ; roccurvelist_t TMVA::getRocCurves (TDirectory *binDir, TString methodPrefix, TString graphNameRef);  ; void TMVA::plotEfficienciesMulticlass (roccurvelist_t rocCurves, classcanvasmap_t classCanvasMap);  . Variables; const char * BUTTON_TYPE = ""button"";  . Typedef Documentation. ◆ classcanvasmap_t. using classcanvasmap_t = std::map<TString, EfficiencyPlotWrapper *>. Definition at line 116 of file efficienciesMulticlass.cxx. ◆ roccurvelist_t. using roccurvelist_t = std::vector<std::tuple<TString, TString, TGraph *> >. Definition at line 117 of file efficienciesMulticlass.cxx. Variable Documentation. ◆ BUTTON_TYPE. const char* BUTTON_TYPE = ""button"". Definition at line 120 of file efficienciesMulticlass.cxx. tmvatmvaguisrcefficienciesMulticlass.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/efficienciesMulticlass_8cxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/efficienciesMulticlass_8cxx.html
Usability,simpl,simple,"ne(0.66,0.24,0.66,0.26);; 282 line->Draw();; 283 line = new TLine(0.76,0.24,0.76,0.26);; 284 line->Draw();; 285 line = new TLine(0.86,0.24,0.86,0.26);; 286 line->Draw();; 287 line = new TLine(0.96,0.24,0.96,0.26);; 288 line->Draw();; 289}; c#define c(i)Definition RSha256.hxx:101; kWhite@ kWhiteDefinition Rtypes.h:65; TArrowDraw all kinds of Arrows.Definition TArrow.h:29; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextAnglevirtual void SetTextAngle(Float_t tangle=0)Set the text angle.Definition TAttText.h:43; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TPave::SetBorderSizevirtual void SetBorderSize(Int_t bordersize=4)Sets the border size of the TPave box and shadow.Definition TPave.h:77; TTextBase class for several text objects.Definition TText.h:22; lineTLine * lineDefinition entrylistblock_figure1.C:235; ptTPaveText * ptDefinition entrylistblock_figure1.C:7; textTText * textDefinition entrylistblock_figure1.C:9; arrowDefinition RArrowDS.hxx:17. treetreedocmacrosentrylistblock_f",MatchSource.WIKI,doc/master/entrylistblock__figure1_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/entrylistblock__figure1_8C_source.html
Availability,error,error,". ROOT: tutorials/fit/ErrorIntegral.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ErrorIntegral.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit. ; The error is estimated also using the correlations values obtained from the fit; run the macro doing:; .x ErrorIntegral.C; After having computed the integral and its error using the integral and the integral error using the generic functions TF1::Integral and TF1::IntegralError, we compute the integrals and its error analytically using the fact that the fitting function is \( f(x) = p[1]* sin(p[0]*x) \).; Therefore we have:; integral in [0,1] : ic = p[1]* (1-std::cos(p[0]) )/p[0]; derivative of integral with respect to p0: c0c = p[1] * (std::cos(p[0]) + p[0]*std::sin(p[0]) -1.)/p[0]/p[0]; derivative of integral with respect to p1: c1c = (1-std::cos(p[0]) )/p[0]. and then we can compute the integral error using error propagation and the covariance matrix for the parameters p obtained from the fit.; integral error : sic = std::sqrt( c0c*c0c * covMatrix(0,0) + c1c*c1c * covMatrix(1,1) + 2.* c0c*c1c * covMatrix(0,1)); Note that, if possible, one should fit directly the function integral, which are the number of events of the different components (e.g. signal and background). In this way one obtains a better and more correct estimate of the integrals uncertainties, since they are obtained directly from the fit without using the approximation of error propagation. This is possible in ROOT. when using the TF1NormSum class, see the tutorial fitNormSum.C. ; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 49.5952; NDf = 48; Edm = 1.61787e-06; NCalls = 58; p0 = 3.13205 +/- 0.0312726 ; p1 = 29.7625 +/- 1.00876 ; Covariance matrix from the fit ; 2x2 matrix is as follows; ; | 0 | 1 |; --------------------------",MatchSource.WIKI,doc/master/ErrorIntegral_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/ErrorIntegral_8C.html
Testability,test,test,"tegral(0,1);; ; auto covMatrix = fitResult->GetCovarianceMatrix();; std::cout << ""Covariance matrix from the fit "";; covMatrix.Print();; ; // need to pass covariance matrix to fit result.; // Parameters values are are stored inside the function but we can also retrieve from TFitResult; double sigma_integral = fitFunc->IntegralError(0,1, fitResult->GetParams() , covMatrix.GetMatrixArray());; ; std::cout << ""Integral = "" << integral << "" +/- "" << sigma_integral; << std::endl;; ; // estimated integral and error analytically; ; double * p = fitFunc->GetParameters();; double ic = p[1]* (1-std::cos(p[0]) )/p[0];; double c0c = p[1] * (std::cos(p[0]) + p[0]*std::sin(p[0]) -1.)/p[0]/p[0];; double c1c = (1-std::cos(p[0]) )/p[0];; ; // estimated error with correlations; double sic = std::sqrt( c0c*c0c * covMatrix(0,0) + c1c*c1c * covMatrix(1,1); + 2.* c0c*c1c * covMatrix(0,1));; ; if ( std::fabs(sigma_integral-sic) > 1.E-6*sic ); std::cout << "" ERROR: test failed : different analytical integral : ""; << ic << "" +/- "" << sic << std::endl;; }; f#define f(i)Definition RSha256.hxx:104; TF1.h; TFitResult.h; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; TH1D.h; TMath.h; TF11-Dim function classDefinition TF1.h:233; TF1::IntegralErrorvirtual Double_t IntegralError(Double_t a, Double_t b, const Double_t *params=nullptr, const Double_t *covmat=nullptr, Double_t epsilon=1.E-2)Return Error on Integral of a parametric function between a and b due to the parameter uncertainties ...Definition TF1.cxx:2708; TF1::Integralvirtual Double_t Integral(Double_t a, Double_t b, Double_t epsrel=1.e-12)IntegralOneDim or analytical integral.Definition TF1.cxx:2531; TF1::GetParametersvirtual Double_t * GetParameters() constDefinition TF1.h:548; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::SetParametervirtual void SetParameter(Int_t param, Double_t value)Definition TF1.h:667; TH1D1-D histogram with a double per channel",MatchSource.WIKI,doc/master/ErrorIntegral_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/ErrorIntegral_8C.html
Integrability,interface,interface,"; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// ROOT::ESTLType //; 19// //; 20// Enum describing STL collections and some std classes //; 21// This is used in TClassEdit, TStreamerInfo, TClassEdit //; 22// and TStreamerElement. //; 23// //; 24//////////////////////////////////////////////////////////////////////////; 25 ; 26namespace ROOT {; 27 ; 28 enum ESTLType {; 29 kNotSTL = 0,; 30 kSTLvector = 1,; 31 kSTLlist = 2,; 32 kSTLdeque = 3,; 33 kSTLmap = 4,; 34 kSTLmultimap = 5,; 35 kSTLset = 6,; 36 kSTLmultiset = 7,; 37 kSTLbitset = 8,; 38 // Here the c++11 containers start. Order counts. For example,; 39 // tstreamerelements in written rootfiles carry a value and we cannot; 40 // introduce shifts.; 41 kSTLforwardlist = 9,; 42 kSTLunorderedset = 10,; 43 kSTLunorderedmultiset = 11,; 44 kSTLunorderedmap = 12,; 45 kSTLunorderedmultimap = 13,; 46 kROOTRVec = 14, /* ROOT type with STL container interface */; 47 kSTLend = 15,; 48 kSTLany = 300 /* TVirtualStreamerInfo::kSTL */,; 49 kSTLstring = 365 /* TVirtualStreamerInfo::kSTLstring */,; 50 };; 51 ; 52}; 53 ; 54#endif; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::ESTLTypeESTLTypeDefinition ESTLType.h:28; ROOT::kSTLbitset@ kSTLbitsetDefinition ESTLType.h:37; ROOT::kSTLmap@ kSTLmapDefinition ESTLType.h:33; ROOT::kSTLunorderedmultiset@ kSTLunorderedmultisetDefinition ESTLType.h:43; ROOT::kROOTRVec@ kROOTRVecDefinition ESTLType.h:46; ROOT::kSTLend@ kSTLendDefinition ESTLType.h:47; ROOT::kSTLstring@ kSTLstringDefinition ESTLType.h:49; ROOT::kSTLset@ kSTLsetDefinition ESTLType.h:35; ROOT::kSTLmultiset@ kSTLmultisetDefinition ESTLType.h:36; ROOT::kSTLdeque@ kSTLdequeDefinition ESTLType.h:32; ROOT::kSTLvector@ kSTLvectorDefinition ESTLType.h:30; ROOT::kSTLany@ kSTLanyDefinition ESTLType.h:48; ROOT::kSTLunorderedmultimap@ kSTLunorderedmultimapDefinition ESTLType.h:45; ROOT::kS",MatchSource.WIKI,doc/master/ESTLType_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/ESTLType_8h_source.html
Testability,log,log,". ROOT: math/genvector/inc/Math/GenVector/etaMax.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. etaMax.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: W. Brown, M. Fischler, L. Moneta 2005; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2005 , FNAL MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11 ; 12// Header source file for function etaMax; 13//; 14// Created by: Mark Fischler at Thu Jun 2 2005; 15 ; 16 ; 17#ifndef ROOT_Math_GenVector_etaMax; 18#define ROOT_Math_GenVector_etaMax 1; 19 ; 20 ; 21#include <limits>; 22#include <cmath>; 23 ; 24 ; 25namespace ROOT {; 26 ; 27 namespace Math {; 28 ; 29 /**; 30 The following function could be called to provide the maximum possible; 31 value of pseudorapidity for a non-zero rho. This is log ( max/min ); 32 where max and min are the extrema of positive values for type; 33 long double.; 34 */; 35 inline; 36 long double etaMax_impl() {; 37 using std::log;; 38 return log ( std::numeric_limits<long double>::max()/256.0l ) -; 39 log ( std::numeric_limits<long double>::denorm_min()*256.0l ); 40 + 16.0 * log(2.0);; 41 // Actual usage of etaMax() simply returns the number 22756, which is; 42 // the answer this would supply, rounded to a higher integer.; 43 }; 44 ; 45 /**; 46 Function providing the maximum possible value of pseudorapidity for; 47 a non-zero rho, in the Scalar type with the largest dynamic range.; 48 */; 49 template <class T>; 50 inline; 51 T etaMax() {; 52 return static_cast<T>(22756.0);; 53 }; 54 ; 55 } // namespace Math; 56 ; 57} // namespace ROOT; 58 ; 59 ; 60#endif /* ROOT_Math_GenVector_etaMax */; MathNamespace for new Math classes and functions.; ROOT::Math::etaMax_impllong double etaMax_impl()The following function could be called to provide the maximum possible value of pseudorapidity for a ...Definition etaMa",MatchSource.WIKI,doc/master/etaMax_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/etaMax_8h_source.html
Usability,simpl,simply,"**************; 5 * *; 6 * Copyright (c) 2005 , FNAL MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11 ; 12// Header source file for function etaMax; 13//; 14// Created by: Mark Fischler at Thu Jun 2 2005; 15 ; 16 ; 17#ifndef ROOT_Math_GenVector_etaMax; 18#define ROOT_Math_GenVector_etaMax 1; 19 ; 20 ; 21#include <limits>; 22#include <cmath>; 23 ; 24 ; 25namespace ROOT {; 26 ; 27 namespace Math {; 28 ; 29 /**; 30 The following function could be called to provide the maximum possible; 31 value of pseudorapidity for a non-zero rho. This is log ( max/min ); 32 where max and min are the extrema of positive values for type; 33 long double.; 34 */; 35 inline; 36 long double etaMax_impl() {; 37 using std::log;; 38 return log ( std::numeric_limits<long double>::max()/256.0l ) -; 39 log ( std::numeric_limits<long double>::denorm_min()*256.0l ); 40 + 16.0 * log(2.0);; 41 // Actual usage of etaMax() simply returns the number 22756, which is; 42 // the answer this would supply, rounded to a higher integer.; 43 }; 44 ; 45 /**; 46 Function providing the maximum possible value of pseudorapidity for; 47 a non-zero rho, in the Scalar type with the largest dynamic range.; 48 */; 49 template <class T>; 50 inline; 51 T etaMax() {; 52 return static_cast<T>(22756.0);; 53 }; 54 ; 55 } // namespace Math; 56 ; 57} // namespace ROOT; 58 ; 59 ; 60#endif /* ROOT_Math_GenVector_etaMax */; MathNamespace for new Math classes and functions.; ROOT::Math::etaMax_impllong double etaMax_impl()The following function could be called to provide the maximum possible value of pseudorapidity for a ...Definition etaMax.h:36; ROOT::Math::etaMaxT etaMax()Function providing the maximum possible value of pseudorapidity for a non-zero rho,...Definition etaMax.h:51; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathgenvectorincMathGenVectoretaMax.h. ROOT mas",MatchSource.WIKI,doc/master/etaMax_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/etaMax_8h_source.html
Deployability,update,update,". ROOT: math/genvector/src/EulerAngles.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. EulerAngles.cxx. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: W. Brown, M. Fischler, L. Moneta 2005; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2005 , LCG ROOT FNAL MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Implementation file for rotation in 3 dimensions, represented by EulerAngles; 12//; 13// Created by: Mark Fischler Thurs June 9 2005; 14//; 15// Last update: $Id$; 16//; 17#include ""Math/GenVector/EulerAngles.h""; 18 ; 19#include <cmath>; 20 ; 21#include ""Math/GenVector/Cartesian3D.h""; 22#include ""Math/GenVector/DisplacementVector3D.h""; 23#include ""Math/GenVector/Rotation3D.h""; 24#include ""Math/GenVector/Quaternion.h""; 25#include ""Math/GenVector/RotationX.h""; 26#include ""Math/GenVector/RotationY.h""; 27#include ""Math/GenVector/RotationZ.h""; 28 ; 29#include ""Math/GenVector/AxisAnglefwd.h""; 30 ; 31namespace ROOT {; 32 ; 33namespace Math {; 34 ; 35// ========== Constructors and Assignment =====================; 36 ; 37void EulerAngles::Rectify(); 38{; 39 // rectify; 40 if ( fTheta < 0 || fTheta > Pi() ) {; 41 Scalar t = fTheta - std::floor( fTheta/(2*Pi()) ) * 2*Pi();; 42 if ( t <= Pi() ) {; 43 fTheta = t;; 44 } else {; 45 fTheta = 2*Pi() - t;; 46 fPhi = fPhi + Pi();; 47 fPsi = fPsi + Pi();; 48 }; 49 }; 50 ; 51 if ( fPhi <= -Pi()|| fPhi > Pi() ) {; 52 fPhi = fPhi - std::floor( fPhi/(2*Pi()) +.5 ) * 2*Pi();; 53 }; 54 ; 55 if ( fPsi <= -Pi()|| fPsi > Pi() ) {; 56 fPsi = fPsi - std::floor( fPsi/(2*Pi()) +.5 ) * 2*Pi();; 57 }; 58 ; 59} // Rectify(); 60 ; 61 ; 62// ========== Operations =====================; 63 ; 64// DisplacementVector3D< Cartesian3D<double> >; 65// EulerAngles::; 66// operator() (const DisplacementVector3D< Cartesian3D<double> > & v) const; 67// {; 68// r",MatchSource.WIKI,doc/master/EulerAngles_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/EulerAngles_8cxx_source.html
Performance,perform,performance," combine with a RotationX; 93 return EulerAngles ( Quaternion(*this) * r );; 94}; 95 ; 96EulerAngles EulerAngles::operator * (const RotationY & r) const {; 97 // combine with a RotationY; 98 return EulerAngles ( Quaternion(*this) * r );; 99}; 100 ; 101EulerAngles EulerAngles::operator * (const RotationZ & r) const {; 102 // combine with a RotationZ; 103 // TODO -- this can be made much faster because it merely adds; 104 // the r.Angle() to phi.; 105 Scalar newPhi = fPhi + r.Angle();; 106 if ( newPhi <= -Pi()|| newPhi > Pi() ) {; 107 newPhi = newPhi - std::floor( newPhi/(2*Pi()) +.5 ) * 2*Pi();; 108 }; 109 return EulerAngles ( newPhi, fTheta, fPsi );; 110}; 111 ; 112EulerAngles operator * ( RotationX const & r, EulerAngles const & e ) {; 113 return EulerAngles(r) * e; // TODO: improve performance; 114}; 115 ; 116EulerAngles operator * ( RotationY const & r, EulerAngles const & e ) {; 117 return EulerAngles(r) * e; // TODO: improve performance; 118}; 119 ; 120EulerAngles; 121operator * ( RotationZ const & r, EulerAngles const & e ) {; 122 return EulerAngles(r) * e; // TODO: improve performance; 123}; 124 ; 125// ========== I/O =====================; 126 ; 127std::ostream & operator<< (std::ostream & os, const EulerAngles & e) {; 128 // TODO - this will need changing for machine-readable issues; 129 // and even the human readable form may need formatting improvements; 130 os << ""\n{phi: "" << e.Phi() << "" theta: "" << e.Theta(); 131 << "" psi: "" << e.Psi() << ""}\n"";; 132 return os;; 133}; 134 ; 135 ; 136} //namespace Math; 137} //namespace ROOT; AxisAnglefwd.h; Cartesian3D.h; DisplacementVector3D.h; EulerAngles.h; Quaternion.h; Rotation3D.h; RotationX.h; RotationY.h; RotationZ.h; a#define a(i)Definition RSha256.hxx:99; e#define e(i)Definition RSha256.hxx:103; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefini",MatchSource.WIKI,doc/master/EulerAngles_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/EulerAngles_8cxx_source.html
Usability,simpl,simple,"->DrawLine(12,8,6,8);; ar1->DrawArrow(3,5,4.4,5,0.02,""|>"");; ar1->DrawArrow(7.8,5,8.9,5,0.02,""|>"");; }; ; TArrowDraw all kinds of Arrows.Definition TArrow.h:29; TArrow::DrawArrowvirtual TArrow * DrawArrow(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Float_t arrowsize=0, Option_t *option="""")Draw this arrow with new coordinates.Definition TArrow.cxx:135; TArrow::Drawvoid Draw(Option_t *option="""") overrideDraw this arrow with its current attributes.Definition TArrow.cxx:120; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TLine::DrawLinevirtual TLine * DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)Draw this line with new coordinates.Definition TLine.cxx:103; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::Drawvoid Draw(Option_t *option="""") overrideDraw this pavelabel with its current attributes.Definition TPaveLabel.cxx:88; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TTextBase class for several text objects.Definition TText.h",MatchSource.WIKI,doc/master/eval_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/eval_8C.html
Integrability,depend,dependency,". ROOT: tutorials/eve7/eveGeoBrowser.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; eveGeoBrowser.C File Reference. #include <ROOT/REveGeoTopNode.hxx>; #include <ROOT/REveManager.hxx>. Include dependency graph for eveGeoBrowser.C:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Functions; void eveGeoBrowser (bool showDet=true);  ; TGeoNode * getNodeFromPath (TGeoNode *top, std::string path);  ; TGeoNode * rootgeom ();  ; TGeoNode * testCmsGeo ();  . Function Documentation. ◆ eveGeoBrowser(). void eveGeoBrowser ; (; bool ; showDet = true). Definition at line 169 of file eveGeoBrowser.C. ◆ getNodeFromPath(). TGeoNode * getNodeFromPath ; (; TGeoNode * ; top, . std::string ; path . ). Definition at line 9 of file eveGeoBrowser.C. ◆ rootgeom(). TGeoNode * rootgeom ; (; ). Definition at line 47 of file eveGeoBrowser.C. ◆ testCmsGeo(). TGeoNode * testCmsGeo ; (; ). Definition at line 20 of file eveGeoBrowser.C. tutorialseve7eveGeoBrowser.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/eveGeoBrowser_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/eveGeoBrowser_8C.html
Testability,test,testCmsGeo,". ROOT: tutorials/eve7/eveGeoBrowser.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; eveGeoBrowser.C File Reference. #include <ROOT/REveGeoTopNode.hxx>; #include <ROOT/REveManager.hxx>. Include dependency graph for eveGeoBrowser.C:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Functions; void eveGeoBrowser (bool showDet=true);  ; TGeoNode * getNodeFromPath (TGeoNode *top, std::string path);  ; TGeoNode * rootgeom ();  ; TGeoNode * testCmsGeo ();  . Function Documentation. ◆ eveGeoBrowser(). void eveGeoBrowser ; (; bool ; showDet = true). Definition at line 169 of file eveGeoBrowser.C. ◆ getNodeFromPath(). TGeoNode * getNodeFromPath ; (; TGeoNode * ; top, . std::string ; path . ). Definition at line 9 of file eveGeoBrowser.C. ◆ rootgeom(). TGeoNode * rootgeom ; (; ). Definition at line 47 of file eveGeoBrowser.C. ◆ testCmsGeo(). TGeoNode * testCmsGeo ; (; ). Definition at line 20 of file eveGeoBrowser.C. tutorialseve7eveGeoBrowser.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/eveGeoBrowser_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/eveGeoBrowser_8C.html
Performance,cache,cacheDir,"on REveElement.cxx:855; ROOT::Experimental::REveGeoTopNodeDataDefinition REveGeoTopNode.hxx:17; ROOT::Experimental::REveGeoTopNodeVizDefinition REveGeoTopNode.hxx:40; ROOT::Experimental::REveManager::GetEventSceneREveScene * GetEventScene() constDefinition REveManager.hxx:184; ROOT::Experimental::REveManager::SpawnNewSceneREveScene * SpawnNewScene(const char *name, const char *title="""")Create a new scene.Definition REveManager.cxx:239; ROOT::Experimental::REveManager::SpawnNewViewerREveViewer * SpawnNewViewer(const char *name, const char *title="""")Create a new GL viewer.Definition REveManager.cxx:229; ROOT::Experimental::REveManager::Showvoid Show(const RWebDisplayArgs &args="""")Show eve manager in specified browser.Definition REveManager.cxx:1169; ROOT::Experimental::REveViewer::AddScenevirtual void AddScene(REveScene *scene)Add 'scene' to the list of scenes.Definition REveViewer.cxx:58; R; TFile::SetCacheFileDirstatic Bool_t SetCacheFileDir(std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE)Sets the directory where to locally stage/cache remote files.Definition TFile.cxx:4626; TGeoArb8Definition TGeoArb8.h:17; TGeoArb8::SetVertexvirtual void SetVertex(Int_t vnum, Double_t x, Double_t y); TGeoCombiTransClass describing rotation + translation.Definition TGeoMatrix.h:317; TGeoManagerThe manager class for any TGeo geometry.Definition TGeoManager.h:44; TGeoManager::MakeArb8TGeoVolume * MakeArb8(const char *name, TGeoMedium *medium, Double_t dz, Double_t *vertices=nullptr)Make an TGeoArb8 volume.Definition TGeoManager.cxx:3161; TGeoManager::Importstatic TGeoManager * Import(const char *filename, const char *name="""", Option_t *option="""")static function Import a geometry from a gdml or ROOT fileDefinition TGeoManager.cxx:4096; TGeoManager::CloseGeometryvoid CloseGeometry(Option_t *option=""d"")Closing geometry implies checking the geometry validity, fixing shapes with negative parameters (run-...Definition TGeoManager.cxx:1480; TGeoMana",MatchSource.WIKI,doc/master/eveGeoBrowser_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/eveGeoBrowser_8C_source.html
Testability,test,testCmsGeo,". ROOT: tutorials/eve7/eveGeoBrowser.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. eveGeoBrowser.C. Go to the documentation of this file. 1 ; 2#include <ROOT/REveGeoTopNode.hxx>; 3#include <ROOT/REveManager.hxx>; 4 ; 5 ; 6namespace REX = ROOT::Experimental;; 7 ; 8 ; 9TGeoNode *getNodeFromPath(TGeoNode *top, std::string path); 10{; 11 TGeoNode *node = top;; 12 std::istringstream f(path);; 13 std::string s;; 14 while (getline(f, s, '/')); 15 node = node->GetVolume()->FindNode(s.c_str());; 16 ; 17 return node;; 18}; 19 ; 20TGeoNode* testCmsGeo(); 21{; 22 TFile::SetCacheFileDir(""."");; 23 ; 24 TGeoManager::Import(""https://root.cern/files/cms.root"");; 25 ; 26 gGeoManager->DefaultColors();; 27 gGeoManager->GetVolume(""TRAK"")->InvisibleAll();; 28 gGeoManager->GetVolume(""HVP2"")->SetTransparency(20);; 29 gGeoManager->GetVolume(""HVEQ"")->SetTransparency(20);; 30 gGeoManager->GetVolume(""YE4"")->SetTransparency(10);; 31 gGeoManager->GetVolume(""YE3"")->SetTransparency(20);; 32 gGeoManager->GetVolume(""RB2"")->SetTransparency(99);; 33 gGeoManager->GetVolume(""RB3"")->SetTransparency(99);; 34 gGeoManager->GetVolume(""COCF"")->SetTransparency(99);; 35 gGeoManager->GetVolume(""HEC1"")->SetLineColor(7);; 36 gGeoManager->GetVolume(""EAP1"")->SetLineColor(7);; 37 gGeoManager->GetVolume(""EAP2"")->SetLineColor(7);; 38 gGeoManager->GetVolume(""EAP3"")->SetLineColor(7);; 39 gGeoManager->GetVolume(""EAP4"")->SetLineColor(7);; 40 gGeoManager->GetVolume(""HTC1"")->SetLineColor(2);; 41 ; 42 TGeoNode* top = gGeoManager->GetTopVolume()->FindNode(""CMSE_1"");; 43 TGeoNode* n = getNodeFromPath(top, ""MUON_1"");; 44 return top;; 45}; 46 ; 47TGeoNode* rootgeom(); 48{; 49 TGeoManager *geom = new TGeoManager(""simple1"", ""Simple geometry"");; 50 ; 51 TGeoMaterial *matVacuum = new TGeoMaterial(""Vacuum"", 0,0,0);; 52 TGeoMaterial *matAl = new TGeoMaterial(""Al"", 26.98,13,2.7);; 53// //--- define some media; 54 TGeoMedium *Vacuum = new TGeoMedium(""Vacuum"",1, matVacuum);; 55 TGeoMedium *",MatchSource.WIKI,doc/master/eveGeoBrowser_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/eveGeoBrowser_8C_source.html
Usability,simpl,simple,"PaveText(4,11,6,12);; p6->SetTextAlign(12);; p6->SetFillColor(42);; p6->AddText(""10 bytes"");; p6->Draw();; TText text;; text.SetTextAlign(12);; text.SetTextSize(0.04);; text.SetTextFont(72);; text.DrawText(6.2,11.5,""Header:Event_flag"");; text.DrawText(7.2,9.5,""Trigger_Info"");; text.DrawText(8.2,7.5,""Muon_Detector: TOF"");; text.DrawText(9.2,5.5,""Calorimeters"");; text.DrawText(10.2,3.5,""Forward_Detectors"");; text.DrawText(11.2,1.5,""TPCs"");; }; textOption_t Option_t TPoint TPoint const char textDefinition TGWin32VirtualXProxy.cxx:68; TArrowDraw all kinds of Arrows.Definition TArrow.h:29; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TCanvasThe Canvas class.Definition TCanvas.h:23; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TLine::DrawLinevirtual TLine * DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)Draw this line with new coordinates.Definition TLine.cxx:103; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TTextBase class for several text objects.Definition TText.h:22; lineTLine * lineDefinition entrylistblock_figure1.C:235; c1return c1Definition legend1.C:41; arrowDefinition RArrowDS.hxx:17; AuthorRene Brun ; Definition in file event.C. tutorialsgraphicsevent.C. ROOT master - Refere",MatchSource.WIKI,doc/master/event_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/event_8C.html
Availability,error,errors,"he predictor depends on 3 variables ; In the case of 1 or 2D one can use the TGraph classes but since no TGraph3D class exists this tutorial provide an example of fitting 3D points; ; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 993.065; NDf = 997; Edm = 2.2677e-24; NCalls = 7; p0 = 0.993546 +/- 0.00475134 ; p1 = 0.99397 +/- 0.00434249 ; p2 = 0.997895 +/- 0.000545663 ; Good fit : p-value = 0.529221; ; ; #include ""TRandom2.h""; #include ""TF3.h""; #include ""TError.h""; #include ""Fit/BinData.h""; #include ""Fit/Fitter.h""; #include ""Math/WrappedMultiTF1.h""; ; void exampleFit3D() {; ; const int n = 1000;; double x[n], y[n], z[n], v[n];; double ev = 0.1;; ; // generate the data; TRandom2 r;; for (int i = 0; i < n; ++i) {; x[i] = r.Uniform(0,10);; y[i] = r.Uniform(0,10);; z[i] = r.Uniform(0,10);; v[i] = sin(x[i] ) + cos(y[i]) + z[i] + r.Gaus(0,ev);; }; ; // create a 3d binned data structure; ROOT::Fit::BinData data(n,3);; double xx[3];; for(int i = 0; i < n; ++i) {; xx[0] = x[i];; xx[1] = y[i];; xx[2] = z[i];; // add the 3d-data coordinate, the predictor value (v[i]) and its errors; data.Add(xx, v[i], ev);; }; ; TF3 * f3 = new TF3(""f3"",""[0] * sin(x) + [1] * cos(y) + [2] * z"",0,10,0,10,0,10);; f3->SetParameters(2,2,2);; ROOT::Fit::Fitter fitter;; // wrapped the TF1 in a IParamMultiFunction interface for the Fitter class; ROOT::Math::WrappedMultiTF1 wf(*f3,3);; fitter.SetFunction(wf);; //; bool ret = fitter.Fit(data);; if (ret) {; const ROOT::Fit::FitResult & res = fitter.Result();; // print result (should be around 1); res.Print(std::cout);; // copy all fit result info (values, chi2, etc..) in TF3; f3->SetFitResult(res);; // test fit p-value (chi2 probability); double prob = res.Prob();; if (prob < 1.E-2); Error(""exampleFit3D"",""Bad data fit - fit p-value is %f"",prob);; else; std::cout << ""Good fit : p-value = "" << prob << std::endl;; ; }; else; Error(""exampleFit3D"",""3D fit failed"");; }; BinData.h; Fitter.h; TError.h; Errorvoid Error(const char ",MatchSource.WIKI,doc/master/exampleFit3D_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/exampleFit3D_8C.html
Integrability,depend,depends,". ROOT: tutorials/fit/exampleFit3D.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. exampleFit3D.C File ReferenceTutorials » Fit Tutorials. Detailed Description; example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ; In the case of 1 or 2D one can use the TGraph classes but since no TGraph3D class exists this tutorial provide an example of fitting 3D points; ; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 993.065; NDf = 997; Edm = 2.2677e-24; NCalls = 7; p0 = 0.993546 +/- 0.00475134 ; p1 = 0.99397 +/- 0.00434249 ; p2 = 0.997895 +/- 0.000545663 ; Good fit : p-value = 0.529221; ; ; #include ""TRandom2.h""; #include ""TF3.h""; #include ""TError.h""; #include ""Fit/BinData.h""; #include ""Fit/Fitter.h""; #include ""Math/WrappedMultiTF1.h""; ; void exampleFit3D() {; ; const int n = 1000;; double x[n], y[n], z[n], v[n];; double ev = 0.1;; ; // generate the data; TRandom2 r;; for (int i = 0; i < n; ++i) {; x[i] = r.Uniform(0,10);; y[i] = r.Uniform(0,10);; z[i] = r.Uniform(0,10);; v[i] = sin(x[i] ) + cos(y[i]) + z[i] + r.Gaus(0,ev);; }; ; // create a 3d binned data structure; ROOT::Fit::BinData data(n,3);; double xx[3];; for(int i = 0; i < n; ++i) {; xx[0] = x[i];; xx[1] = y[i];; xx[2] = z[i];; // add the 3d-data coordinate, the predictor value (v[i]) and its errors; data.Add(xx, v[i], ev);; }; ; TF3 * f3 = new TF3(""f3"",""[0] * sin(x) + [1] * cos(y) + [2] * z"",0,10,0,10,0,10);; f3->SetParameters(2,2,2);; ROOT::Fit::Fitter fitter;; // wrapped the TF1 in a IParamMultiFunction interface for the Fitter class; ROOT::Math::WrappedMultiTF1 wf(*f3,3);; fitter.SetFunction(wf);; //; bool ret = fitter.Fit(data);; if (ret) {; const ROOT::Fit::FitResult & res = fitter.Result();; // print result (should be around 1); res.Print(std::cout);; // copy all fit result info (values, chi2, etc..) in TF3; f3->SetFitResult(res);; // test fit p-value (chi2 prob",MatchSource.WIKI,doc/master/exampleFit3D_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/exampleFit3D_8C.html
Modifiability,variab,variables,". ROOT: tutorials/fit/exampleFit3D.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. exampleFit3D.C File ReferenceTutorials » Fit Tutorials. Detailed Description; example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ; In the case of 1 or 2D one can use the TGraph classes but since no TGraph3D class exists this tutorial provide an example of fitting 3D points; ; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 993.065; NDf = 997; Edm = 2.2677e-24; NCalls = 7; p0 = 0.993546 +/- 0.00475134 ; p1 = 0.99397 +/- 0.00434249 ; p2 = 0.997895 +/- 0.000545663 ; Good fit : p-value = 0.529221; ; ; #include ""TRandom2.h""; #include ""TF3.h""; #include ""TError.h""; #include ""Fit/BinData.h""; #include ""Fit/Fitter.h""; #include ""Math/WrappedMultiTF1.h""; ; void exampleFit3D() {; ; const int n = 1000;; double x[n], y[n], z[n], v[n];; double ev = 0.1;; ; // generate the data; TRandom2 r;; for (int i = 0; i < n; ++i) {; x[i] = r.Uniform(0,10);; y[i] = r.Uniform(0,10);; z[i] = r.Uniform(0,10);; v[i] = sin(x[i] ) + cos(y[i]) + z[i] + r.Gaus(0,ev);; }; ; // create a 3d binned data structure; ROOT::Fit::BinData data(n,3);; double xx[3];; for(int i = 0; i < n; ++i) {; xx[0] = x[i];; xx[1] = y[i];; xx[2] = z[i];; // add the 3d-data coordinate, the predictor value (v[i]) and its errors; data.Add(xx, v[i], ev);; }; ; TF3 * f3 = new TF3(""f3"",""[0] * sin(x) + [1] * cos(y) + [2] * z"",0,10,0,10,0,10);; f3->SetParameters(2,2,2);; ROOT::Fit::Fitter fitter;; // wrapped the TF1 in a IParamMultiFunction interface for the Fitter class; ROOT::Math::WrappedMultiTF1 wf(*f3,3);; fitter.SetFunction(wf);; //; bool ret = fitter.Fit(data);; if (ret) {; const ROOT::Fit::FitResult & res = fitter.Result();; // print result (should be around 1); res.Print(std::cout);; // copy all fit result info (values, chi2, etc..) in TF3; f3->SetFitResult(res);; // test fit p-value (chi2 prob",MatchSource.WIKI,doc/master/exampleFit3D_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/exampleFit3D_8C.html
Performance,perform,performing,"GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRandom2.h; WrappedMultiTF1.h; ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitResult::Printvoid Print(std::ostream &os, bool covmat=false) constprint the result and optionally covariance matrix and correlationsDefinition FitResult.cxx:389; ROOT::Fit::FitResult::Probdouble Prob() constp value of the fit (chi2 probability)Definition FitResult.cxx:320; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::Fitter::Resultconst FitResult & Result() constget fit resultDefinition Fitter.h:394; ROOT::Fit::Fitter::Fitbool Fit(const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)fit a data set using any generic model function If data set is binned a least square fit is performed...Definition Fitter.h:144; ROOT::Fit::Fitter::SetFunctionvoid SetFunction(const IModelFunction &func, bool useGradient=false)Set the fitted function (model function) from a parametric function interface.Definition Fitter.cxx:59; ROOT::Math::WrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::SetFitResultvirtual void SetFitResult(const ROOT::Fit::FitResult &result, const Int_t *ind",MatchSource.WIKI,doc/master/exampleFit3D_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/exampleFit3D_8C.html
Safety,predict,predictor,". ROOT: tutorials/fit/exampleFit3D.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. exampleFit3D.C File ReferenceTutorials » Fit Tutorials. Detailed Description; example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ; In the case of 1 or 2D one can use the TGraph classes but since no TGraph3D class exists this tutorial provide an example of fitting 3D points; ; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 993.065; NDf = 997; Edm = 2.2677e-24; NCalls = 7; p0 = 0.993546 +/- 0.00475134 ; p1 = 0.99397 +/- 0.00434249 ; p2 = 0.997895 +/- 0.000545663 ; Good fit : p-value = 0.529221; ; ; #include ""TRandom2.h""; #include ""TF3.h""; #include ""TError.h""; #include ""Fit/BinData.h""; #include ""Fit/Fitter.h""; #include ""Math/WrappedMultiTF1.h""; ; void exampleFit3D() {; ; const int n = 1000;; double x[n], y[n], z[n], v[n];; double ev = 0.1;; ; // generate the data; TRandom2 r;; for (int i = 0; i < n; ++i) {; x[i] = r.Uniform(0,10);; y[i] = r.Uniform(0,10);; z[i] = r.Uniform(0,10);; v[i] = sin(x[i] ) + cos(y[i]) + z[i] + r.Gaus(0,ev);; }; ; // create a 3d binned data structure; ROOT::Fit::BinData data(n,3);; double xx[3];; for(int i = 0; i < n; ++i) {; xx[0] = x[i];; xx[1] = y[i];; xx[2] = z[i];; // add the 3d-data coordinate, the predictor value (v[i]) and its errors; data.Add(xx, v[i], ev);; }; ; TF3 * f3 = new TF3(""f3"",""[0] * sin(x) + [1] * cos(y) + [2] * z"",0,10,0,10,0,10);; f3->SetParameters(2,2,2);; ROOT::Fit::Fitter fitter;; // wrapped the TF1 in a IParamMultiFunction interface for the Fitter class; ROOT::Math::WrappedMultiTF1 wf(*f3,3);; fitter.SetFunction(wf);; //; bool ret = fitter.Fit(data);; if (ret) {; const ROOT::Fit::FitResult & res = fitter.Result();; // print result (should be around 1); res.Print(std::cout);; // copy all fit result info (values, chi2, etc..) in TF3; f3->SetFitResult(res);; // test fit p-value (chi2 prob",MatchSource.WIKI,doc/master/exampleFit3D_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/exampleFit3D_8C.html
Testability,test,test,"1;; ; // generate the data; TRandom2 r;; for (int i = 0; i < n; ++i) {; x[i] = r.Uniform(0,10);; y[i] = r.Uniform(0,10);; z[i] = r.Uniform(0,10);; v[i] = sin(x[i] ) + cos(y[i]) + z[i] + r.Gaus(0,ev);; }; ; // create a 3d binned data structure; ROOT::Fit::BinData data(n,3);; double xx[3];; for(int i = 0; i < n; ++i) {; xx[0] = x[i];; xx[1] = y[i];; xx[2] = z[i];; // add the 3d-data coordinate, the predictor value (v[i]) and its errors; data.Add(xx, v[i], ev);; }; ; TF3 * f3 = new TF3(""f3"",""[0] * sin(x) + [1] * cos(y) + [2] * z"",0,10,0,10,0,10);; f3->SetParameters(2,2,2);; ROOT::Fit::Fitter fitter;; // wrapped the TF1 in a IParamMultiFunction interface for the Fitter class; ROOT::Math::WrappedMultiTF1 wf(*f3,3);; fitter.SetFunction(wf);; //; bool ret = fitter.Fit(data);; if (ret) {; const ROOT::Fit::FitResult & res = fitter.Result();; // print result (should be around 1); res.Print(std::cout);; // copy all fit result info (values, chi2, etc..) in TF3; f3->SetFitResult(res);; // test fit p-value (chi2 probability); double prob = res.Prob();; if (prob < 1.E-2); Error(""exampleFit3D"",""Bad data fit - fit p-value is %f"",prob);; else; std::cout << ""Good fit : p-value = "" << prob << std::endl;; ; }; else; Error(""exampleFit3D"",""3D fit failed"");; }; BinData.h; Fitter.h; TError.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TF3.h; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRandom2.h; WrappedMultiTF1.h; ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates,",MatchSource.WIKI,doc/master/exampleFit3D_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/exampleFit3D_8C.html
Testability,log,log,"nition RSha256.hxx:101; TAttAxis::SetLabelSizevirtual void SetLabelSize(Float_t size=0.04)Set size of axis labels.Definition TAttAxis.cxx:203; TAttAxis::SetTickLengthvirtual void SetTickLength(Float_t length=0.03)Set tick mark length.Definition TAttAxis.cxx:284; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TAxis::SetMoreLogLabelsvoid SetMoreLogLabels(Bool_t more=kTRUE)Set the kMoreLogLabels bit flag When this option is selected more labels are drawn when in log scale ...Definition TAxis.h:223; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t y)Set x and y values for point number i.Definition TGraph.cxx:2342; TGraph::SetNamevoid SetName(const char *name="""") overrideSet graph name.Definition TGraph.cxx:2381; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::SetDirectoryvirtual void SetDirectory(TDirectory *dir)By default, when a histogram is created, it is added to the ",MatchSource.WIKI,doc/master/exclusiongraph2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/exclusiongraph2_8C.html
Availability,error,error,". master. Reference Guide ; .  . Loading...; Searching...; No Matches. exec1.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Echo object at mouse position. ; Example of macro called when a pad is redrawn one must create a TExec object in the following way gPad->AddExec(""ex1"", "".x exec1.C"");; gPad#define gPadDefinition TVirtualPad.h:308; this macro prints the bin number and the bin content when one clicks on the histogram contour of any histogram in a pad; ; ; void exec1(); {; if (!gPad) {; Error(""exec1"", ""gPad is null, you are not supposed to run this macro"");; return;; }; ; Int_t event = gPad->GetEvent();; int px = gPad->GetEventX();; TObject *select = gPad->GetSelected();; ; if (select && select->InheritsFrom(TH1::Class())) {; TH1 *h = (TH1*)select;; Float_t xx = gPad->AbsPixeltoX(px);; Float_t x = gPad->PadtoX(xx);; Int_t binx = h->GetXaxis()->FindBin(x);; printf(""event=%d, hist:%s, bin=%d, content=%f\n"", event, h->GetName(), binx, h->GetBinContent(binx));; }; }; ; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TAxis::FindBinvirtual Int_t FindBin(Double_t x)Find bin number corresponding to abscissa x.Definition TAxis.cxx:293; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::Classstatic TClass * Class(); TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; xDouble_t x[n]Definition legend1.C:17; AuthorsRene Brun, Sergey Linev ; Definition in file exec1.C. tutorialshistexec1.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/exec1_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/exec1_8C.html
Modifiability,inherit,inherits,". master. Reference Guide ; .  . Loading...; Searching...; No Matches. exec1.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Echo object at mouse position. ; Example of macro called when a pad is redrawn one must create a TExec object in the following way gPad->AddExec(""ex1"", "".x exec1.C"");; gPad#define gPadDefinition TVirtualPad.h:308; this macro prints the bin number and the bin content when one clicks on the histogram contour of any histogram in a pad; ; ; void exec1(); {; if (!gPad) {; Error(""exec1"", ""gPad is null, you are not supposed to run this macro"");; return;; }; ; Int_t event = gPad->GetEvent();; int px = gPad->GetEventX();; TObject *select = gPad->GetSelected();; ; if (select && select->InheritsFrom(TH1::Class())) {; TH1 *h = (TH1*)select;; Float_t xx = gPad->AbsPixeltoX(px);; Float_t x = gPad->PadtoX(xx);; Int_t binx = h->GetXaxis()->FindBin(x);; printf(""event=%d, hist:%s, bin=%d, content=%f\n"", event, h->GetName(), binx, h->GetBinContent(binx));; }; }; ; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TAxis::FindBinvirtual Int_t FindBin(Double_t x)Find bin number corresponding to abscissa x.Definition TAxis.cxx:293; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::Classstatic TClass * Class(); TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; xDouble_t x[n]Definition legend1.C:17; AuthorsRene Brun, Sergey Linev ; Definition in file exec1.C. tutorialshistexec1.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/exec1_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/exec1_8C.html
Availability,error,error," TH2 *h = dynamic_cast<TH2 *>(select);; if(!h) return;; ; //erase old position and draw a line at current position; gVirtualX->DrawLine(pxmin, py, pxmax, py);; gPad->SetUniqueID(py);; ; Float_t upy = gPad->AbsPixeltoY(py);; Float_t y = gPad->PadtoY(upy);; ; //create or set the new canvas c2; auto padsav = gPad;; if(c2) delete c2->GetPrimitive(""Projection"");; else c2 = new TCanvas(""c2"",""Projection Canvas"",710,10,700,500);; c2->SetGrid();; c2->cd();; ; //draw slice corresponding to mouse position; Int_t biny = h->GetYaxis()->FindBin(y);; TH1D *hp = h->ProjectionX("""",biny,biny);; hp->SetName(""Projection"");; hp->SetTitle(TString::Format(""Projection of biny=%d"",biny));; hp->Fit(""gaus"",""ql"");; c2->Update();; ; padsav->cd();; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; gROOT#define gROOTDefinition TROOT.h:406; gVirtualX#define gVirtualXDefinition TVirtualX.h:337; ROOT::Fit::FitResult::Updatebool Update(const std::shared_ptr< ROOT::Math::Minimizer > &min, const ROOT::Fit::FitConfig &fconfig, bool isValid, unsigned int ncalls=0)Update the fit result with a new minimization status To be run only if same fit is performed with sam...Definition FitResult.cxx:224; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::SetTitlevoid SetTitle(const char *title) overrideChange/set the title.Definition TH1.cxx:6718; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::SetNamevoid SetName(const char *name) overrideChange the name of this histogram.Definition TH1.cxx:8960; TH2Service class ",MatchSource.WIKI,doc/master/exec2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/exec2_8C.html
Energy Efficiency,power,powerful,"hist/exec2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. exec2.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Echo object at mouse position and show a graphics line. ; Example of macro called when a mouse event occurs in a pad.; Example: TFile::Open(""hsimple.root"");; hpxpy->Draw(""colz"");; gPad->AddExec(""ex2"", "".x exec2.C"");; gPad#define gPadDefinition TVirtualPad.h:308; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; When moving the mouse in the canvas, a second canvas shows the projection along X of the bin corresponding to the Y position of the mouse. The resulting histogram is fitted with a gaussian. A ""dynamic"" line shows the current bin position in Y. This more elaborated example can be used as a starting point to develop more powerful interactive applications exploiting CLING as a development engine.; ; void exec2(); {; if (!gPad) {; Error(""exec2"", ""gPad is null, you are not supposed to run this macro"");; return;; }; ; int px = gPad->GetEventX();; int py = gPad->GetEventY();; float uxmin = gPad->GetUxmin();; float uxmax = gPad->GetUxmax();; int pxmin = gPad->XtoAbsPixel(uxmin);; int pxmax = gPad->XtoAbsPixel(uxmax);; TObject *select = gPad->GetSelected();; TCanvas *c2 = (TCanvas*)gROOT->GetListOfCanvases()->FindObject(""c2"");; ; gPad->GetCanvas()->FeedbackMode(kTRUE);; ; int pyold = gPad->GetUniqueID(); // misuse of pad unique for last draw position; ; if (pyold && c2) {; // erase line at old position; gVirtualX->DrawLine(pxmin, pyold, pxmax, pyold);; gPad->SetUniqueID(0);; }; ; TH2 *h = dynamic_cast<TH2 *>(select);; if(!h) return;; ; //erase old position and draw a line at current position; gVirtualX->DrawLine(pxmin, py, pxmax, py);; gPad->SetUniqueID(py);; ; Float_t upy = gPad->AbsPixeltoY(py);; Float_t y",MatchSource.WIKI,doc/master/exec2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/exec2_8C.html
Performance,perform,performed,"e new canvas c2; auto padsav = gPad;; if(c2) delete c2->GetPrimitive(""Projection"");; else c2 = new TCanvas(""c2"",""Projection Canvas"",710,10,700,500);; c2->SetGrid();; c2->cd();; ; //draw slice corresponding to mouse position; Int_t biny = h->GetYaxis()->FindBin(y);; TH1D *hp = h->ProjectionX("""",biny,biny);; hp->SetName(""Projection"");; hp->SetTitle(TString::Format(""Projection of biny=%d"",biny));; hp->Fit(""gaus"",""ql"");; c2->Update();; ; padsav->cd();; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; gROOT#define gROOTDefinition TROOT.h:406; gVirtualX#define gVirtualXDefinition TVirtualX.h:337; ROOT::Fit::FitResult::Updatebool Update(const std::shared_ptr< ROOT::Math::Minimizer > &min, const ROOT::Fit::FitConfig &fconfig, bool isValid, unsigned int ncalls=0)Update the fit result with a new minimization status To be run only if same fit is performed with sam...Definition FitResult.cxx:224; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::SetTitlevoid SetTitle(const char *title) overrideChange/set the title.Definition TH1.cxx:6718; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::SetNamevoid SetName(const char *name) overrideChange the name of this histogram.Definition TH1.cxx:8960; TH2Service class for 2-D histogram classes.Definition TH2.h:30; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetUniqueIDvirtual UInt_t GetUniqueID() constReturn the unique object id.Definition TObject.cxx:462; TObject::SetUniqueIDvirtual void SetUniqueID(UInt_t uid)Set ",MatchSource.WIKI,doc/master/exec2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/exec2_8C.html
Integrability,wrap,wrapper,"ced by rows, cols; 29// 10 Okt 2001 (TG) added print() and operator<<() for Expr class; 30//; 31// ********************************************************************; 32 ; 33/**; 34\defgroup Expression Expression Template Classes; 35\ingroup SMatrixGroup; 36*/; 37 ; 38//==============================================================================; 39// Expr: class representing SVector expressions; 40//=============================================================================; 41 ; 42// modified BinaryOp with two extension BinaryOpCopyL and BinaryOpCopyR to store the; 43// object in BinaryOp by value and not reference. When used with constant BinaryOp reference give problems; 44// on some compilers (like Windows) where a temporary Constant object is ccreated and then destructed; 45 ; 46 ; 47#include <iomanip>; 48#include <iostream>; 49 ; 50namespace ROOT {; 51 ; 52 namespace Math {; 53 ; 54 ; 55 ; 56// template <class T, unsigned int D, unsigned int D2> class MatRepStd;; 57 ; 58/**; 59 Expression wrapper class for Vector objects; 60 ; 61 @ingroup Expression; 62*/; 63template <class ExprType, class T, unsigned int D >; 64class VecExpr {; 65 ; 66public:; 67 typedef T value_type;; 68 ; 69 ///; 70 VecExpr(const ExprType& rhs) :; 71 rhs_(rhs) {}; 72 ; 73 ///; 74 ~VecExpr() {}; 75 ; 76 ///; 77 inline T apply(unsigned int i) const {; 78 return rhs_.apply(i);; 79 }; 80 ; 81 inline T operator() (unsigned int i) const {; 82 return rhs_.apply(i);; 83 }; 84 ; 85 ; 86#ifdef OLD_IMPL; 87 ///; 88 static const unsigned int rows = D;; 89 ///; 90 ///static const unsigned int cols = D2;; 91#else; 92 // use enumerations; 93 enum {; 94 ; 95 kRows = D; 96 ; 97 };; 98#endif; 99 ; 100 /**; 101 function to determine if any use operand; 102 is being used (has same memory address); 103 */; 104 inline bool IsInUse (const T * p) const {; 105 return rhs_.IsInUse(p);; 106 }; 107 ; 108 ; 109 /// used by operator<<(); 110 std::ostream& print(std::ostream& os) const {; 111 os.setf(std::ios::rig",MatchSource.WIKI,doc/master/Expression_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Expression_8h_source.html
Safety,avoid,avoid,"hs) :; 144 rhs_(rhs) {}; 145 ; 146 ///; 147 ~Expr() {}; 148 ; 149 ///; 150 inline T apply(unsigned int i) const {; 151 return rhs_.apply(i);; 152 }; 153 inline T operator() (unsigned int i, unsigned j) const {; 154 return rhs_(i,j);; 155 }; 156 ; 157 /**; 158 function to determine if any use operand; 159 is being used (has same memory address); 160 */; 161 inline bool IsInUse (const T * p) const {; 162 return rhs_.IsInUse(p);; 163 }; 164 ; 165 ; 166 ; 167#ifdef OLD_IMPL; 168 ///; 169 static const unsigned int rows = D;; 170 ///; 171 static const unsigned int cols = D2;; 172#else; 173 // use enumerations; 174 enum {; 175 ///; 176 kRows = D,; 177 ///; 178 kCols = D2; 179 };; 180#endif; 181 ; 182 /// used by operator<<(); 183 /// simplify to use apply(i,j); 184 std::ostream& print(std::ostream& os) const {; 185 os.setf(std::ios::right,std::ios::adjustfield);; 186 os << ""[ "";; 187 for (unsigned int i=0; i < D; ++i) {; 188 unsigned int d2 = D2; // to avoid some annoying warnings in case of vectors (D2 = 0); 189 for (unsigned int j=0; j < D2; ++j) {; 190 os << std::setw(12) << this->operator() (i,j);; 191 if ((!((j+1)%12)) && (j < d2-1)); 192 os << std::endl << "" ..."";; 193 }; 194 if (i != D - 1); 195 os << std::endl << "" "";; 196 }; 197 os << "" ]"";; 198 ; 199 return os;; 200 }; 201 ; 202private:; 203 ExprType rhs_; // cannot be a reference!; 204};; 205 ; 206//==============================================================================; 207// operator<<; 208//==============================================================================; 209template <class A, class T, unsigned int D>; 210inline std::ostream& operator<<(std::ostream& os, const VecExpr<A,T,D>& rhs) {; 211 return rhs.print(os);; 212}; 213 ; 214template <class A, class T, unsigned int D1, unsigned int D2, class R1>; 215inline std::ostream& operator<<(std::ostream& os, const Expr<A,T,D1,D2,R1>& rhs) {; 216 return rhs.print(os);; 217}; 218 ; 219/**; 220 BinaryOperation class; 221 A class representing binary op",MatchSource.WIKI,doc/master/Expression_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Expression_8h_source.html
Usability,simpl,simplify," 129 Expression wrapper class for Matrix objects; 130 ; 131 @ingroup Expression; 132*/; 133 ; 134template <class T, unsigned int D, unsigned int D2> class MatRepStd;; 135 ; 136template <class ExprType, class T, unsigned int D, unsigned int D2 = 1,; 137 class R1=MatRepStd<T,D,D2> >; 138class Expr {; 139public:; 140 typedef T value_type;; 141 ; 142 ///; 143 Expr(const ExprType& rhs) :; 144 rhs_(rhs) {}; 145 ; 146 ///; 147 ~Expr() {}; 148 ; 149 ///; 150 inline T apply(unsigned int i) const {; 151 return rhs_.apply(i);; 152 }; 153 inline T operator() (unsigned int i, unsigned j) const {; 154 return rhs_(i,j);; 155 }; 156 ; 157 /**; 158 function to determine if any use operand; 159 is being used (has same memory address); 160 */; 161 inline bool IsInUse (const T * p) const {; 162 return rhs_.IsInUse(p);; 163 }; 164 ; 165 ; 166 ; 167#ifdef OLD_IMPL; 168 ///; 169 static const unsigned int rows = D;; 170 ///; 171 static const unsigned int cols = D2;; 172#else; 173 // use enumerations; 174 enum {; 175 ///; 176 kRows = D,; 177 ///; 178 kCols = D2; 179 };; 180#endif; 181 ; 182 /// used by operator<<(); 183 /// simplify to use apply(i,j); 184 std::ostream& print(std::ostream& os) const {; 185 os.setf(std::ios::right,std::ios::adjustfield);; 186 os << ""[ "";; 187 for (unsigned int i=0; i < D; ++i) {; 188 unsigned int d2 = D2; // to avoid some annoying warnings in case of vectors (D2 = 0); 189 for (unsigned int j=0; j < D2; ++j) {; 190 os << std::setw(12) << this->operator() (i,j);; 191 if ((!((j+1)%12)) && (j < d2-1)); 192 os << std::endl << "" ..."";; 193 }; 194 if (i != D - 1); 195 os << std::endl << "" "";; 196 }; 197 os << "" ]"";; 198 ; 199 return os;; 200 }; 201 ; 202private:; 203 ExprType rhs_; // cannot be a reference!; 204};; 205 ; 206//==============================================================================; 207// operator<<; 208//==============================================================================; 209template <class A, class T, unsigned int D>; 210inline std:",MatchSource.WIKI,doc/master/Expression_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Expression_8h_source.html
Usability,simpl,simple,"rlyArc(110, 30, 12.5*sqrt(2), 315, 45);; gluon1->Draw();; ; t.DrawLatex(135,6,""#bar{q}"");; t.DrawLatex(135,55,""q"");; t.DrawLatex(135,30,""g"");; c1->Update();; gStyle->SetLineWidth(linsav);; }; a#define a(i)Definition RSha256.hxx:99; Int_tint Int_tDefinition RtypesCore.h:45; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TArcCreate an Arc.Definition TArc.h:26; TAttLine::GetLineWidthvirtual Width_t GetLineWidth() constReturn the line width.Definition TAttLine.h:35; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TCurlyArcImplements curly or wavy arcs used to draw Feynman diagrams.Definition TCurlyArc.h:16; TCurlyLineImplements curly or wavy polylines used to draw Feynman diagrams.Definition TCurlyLine.h:19; TCurlyLine::SetWavyvirtual void SetWavy()Set wavy.Definition TCurlyLine.cxx:369; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLatex::DrawLatexTLatex * DrawLatex(Double_t x, Double_t y, const char *text)Make a copy of this object with the new parameters And copy object attributes.Definition TLatex.cxx:1943; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPolyLine::Drawvoid Draw(Option_t *option="""") overrideDraw this polyline with its current attributes.Definition TPolyLine.cxx:215; c1return c1Definition legend1.C:41; ginitstatic int ginitDefinition rsalib.cxx:256; lTLine lDefinition textangle.C:4; AuthorOtto Schaile ; Definition in file feynman.C. tutorialsgraphicsfeynman.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/feynman_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/feynman_8C.html
Testability,log,logical,"wText(9.2, 10,""Deleted"");; hori->DrawText(9.2, 9.5,""Object"");; line->DrawLine( 6.9, 8.5, 10.5, 11);; line->DrawLine( 6.9, 11, 10.5, 8.5);; TText *tbig = new TText(17,9.75,""............"");; tbig->SetTextAlign(22);; tbig->SetTextSize(0.03);; tbig->Draw();; tbig->DrawText(2.6, 7, ""fBEGIN"");; tbig->DrawText(20., 7, ""fEND"");; arrow->DrawArrow( 2.6,7, 2.6,8.4,0.01,""|>"");; arrow->DrawArrow( 20,7, 20,8.4,0.01,""|>"");; ; //file header; TPaveText *header = new TPaveText(0.5,.2,9.4,6.5);; header->SetFillColor(44);; header->Draw();; TText *fh=header->AddText(""File Header"");; fh->SetTextAlign(22);; fh->SetTextSize(0.04);; header->SetTextSize(0.027);; header->SetTextAlign(12);; header->AddText("" "");; header->AddLine(0,0,0,0);; header->AddText(""\""root\"": Root File Identifier"");; header->AddText(""fVersion: File version identifier"");; header->AddText(""fBEGIN: Pointer to first data record"");; header->AddText(""fEND: Pointer to first free word at EOF"");; header->AddText(""fSeekFree: Pointer to FREE data record"");; header->AddText(""fNbytesFree: Number of bytes in FREE"");; header->AddText(""fNfree: Number of free data records"");; header->AddText(""fNbytesName: Number of bytes in name/title"");; header->AddText(""fUnits: Number of bytes for pointers"");; header->AddText(""fCompress: Compression level"");; ; //logical record header; TPaveText *lrecord = new TPaveText(10,0.2,19.5,6.5);; lrecord->SetFillColor(33);; lrecord->Draw();; TText *tlrh = lrecord->AddText(""Logical Record Header (TKEY)"");; tlrh->SetTextAlign(22);; tlrh->SetTextSize(0.04);; lrecord->SetTextSize(0.027);; lrecord->SetTextAlign(12);; lrecord->AddText("" "");; lrecord->AddLine(0,0,0,0);; lrecord->AddText(""fNbytes: Length of compressed object"");; lrecord->AddText(""fVersion: Key version identifier"");; lrecord->AddText(""fObjLen: Length of uncompressed object"");; lrecord->AddText(""fDatime: Date/Time when written to store"");; lrecord->AddText(""fKeylen: Number of bytes for the key"");; lrecord->AddText(""fCycle : Cycle number"");; lrecord->Ad",MatchSource.WIKI,doc/master/file_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/file_8C.html
Usability,simpl,simple,"lrecord->AddText(""fSeekKey: Pointer to object on file"");; lrecord->AddText(""fSeekPdir: Pointer to directory on file"");; lrecord->AddText(""fClassName: class name of the object"");; lrecord->AddText(""fName: name of the object"");; lrecord->AddText(""fTitle: title of the object"");; ; c1->Update();; c1->Print(""file.png"");; }; TArrowDraw all kinds of Arrows.Definition TArrow.h:29; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttLine::SetLineStylevirtual void SetLineStyle(Style_t lstyle)Set the line style.Definition TAttLine.h:42; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextAnglevirtual void SetTextAngle(Float_t tangle=0)Set the text angle.Definition TAttText.h:43; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TLine::DrawLinevirtual TLine * DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)Draw this line with new coordinates.Definition TLine.cxx:103; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::Drawvoid Draw(Option_t *option="""") overrideDraw this pavelabel with its current attributes.Definition TPaveLabel.cxx:88; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::AddLinevirtual TLine * AddLine(Double_t x1=0, Double_t y1=0, Double_t x2=0, Double_t y2=0)Add a new graphics line to this pavetext.Definition TPaveText.cxx:177; TPaveText::Drawvoi",MatchSource.WIKI,doc/master/file_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/file_8C.html
Energy Efficiency,power,power-of-two,". ROOT: tutorials/hist/fillhistosauto2p.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fillhistosauto2p.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Fill multiple histograms with different functions and automatic binning. ; Illustrates merging with the power-of-two autobin algorithm; ; OBJ: TStatistic min Mean = -0.219 +- 0.09858 RMS = 0.31172 Count = 10 Min = -0.7688 Max = 0.187; OBJ: TStatistic max Mean = 6.2275 +- 0.1806 RMS = 0.57103 Count = 10 Min = 5.5275 Max = 7.3222; OBJ: TStatistic dif Mean = 6.4465 +- 0.2203 RMS = 0.69652 Count = 10 Min = 5.3405 Max = 7.6243; OBJ: TStatistic mean Mean = 3.0008 +- 0.005044 RMS = 0.01595 Count = 10 Min = 2.9789 Max = 3.0264; OBJ: TStatistic rms Mean = 1.005 +- 0.01028 RMS = 0.032511 Count = 10 Min = 0.95837 Max = 1.0666; ent: 10010; TH1.Print Name = myh0, Entries= 10010, Total sum= 10004; TH1.Print Name = myhref, Entries= 10010, Total sum= 10010; ; #include ""TF1.h""; #include ""TH1D.h""; #include ""TMath.h""; #include ""TF1.h""; #include ""TCanvas.h""; #include ""TRandom3.h""; #include ""TStatistic.h""; #include ""TFile.h""; #include ""TStyle.h""; ; TF1 *gam = new TF1(""gam"", ""1/(1+0.1*x*0.1*x)"", -100., 100.);; TF1 *gam1 = new TF1(""gam"", ""1/(1+0.1*x*0.1*x)"", -1., .25);; TF1 *iga = new TF1(""inv gam"", ""1.-1/(1+0.1*x*0.1*x)"", -100., 100.);; TF1 *iga1 = new TF1(""inv gam"", ""1.-1/(1+0.1*x*0.1*x)"", -.5, 1.);; ; void fillhistosauto2p(unsigned opt = 1, unsigned n = 1001); {; ; UInt_t nh = 10;; UInt_t bsize = 1000;; ; TRandom3 rndm((Long64_t)time(0));; ; // Standard autobinning reference; auto href = new TH1D(""myhref"", ""current"", 50, 0., -1.);; href->SetBuffer(bsize);; ; // New autobinning 1-histo reference; auto href2 = new TH1D(""myhref"", ""Auto P2, sequential"", 50, 0., -1.);; href2->SetBit(TH1::kAutoBinPTwo);; href2->SetBuffer(bsize);; ; TList *hlist = new TList;; ; Int_t nbins = 50;; ; TStatistic x(""min""), y(""max""), d(""dif""), a(""mean""), r(""rms"");; for (UInt_t j = 0; j < nh;",MatchSource.WIKI,doc/master/fillhistosauto2p_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fillhistosauto2p_8C.html
Modifiability,variab,variable,"omputation of statisti...Definition TH1.cxx:6925; TH1::kAutoBinPTwo@ kAutoBinPTwodifferent than 1.Definition TH1.h:174; TH1::Printvoid Print(Option_t *option="""") const overridePrint some global quantities for this histogram.Definition TH1.cxx:7009; TH1::GetEntriesvirtual Double_t GetEntries() constReturn the current number of entries.Definition TH1.cxx:4423; TH1::Mergevirtual Long64_t Merge(TCollection *list)Definition TH1.h:345; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::RemoveTObject * Remove(TObject *obj) overrideRemove object from the list.Definition TList.cxx:820; TList::FirstTObject * First() const overrideReturn the first object in the list. Returns 0 when list is empty.Definition TList.cxx:657; TObject::DrawClonevirtual TObject * DrawClone(Option_t *option="""") constDraw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1).Definition TObject.cxx:305; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TStatisticStatistical variable, defined by its mean and variance (RMS).Definition TStatistic.h:33; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; c3return c3Definition legend3.C:15; DateNovember 2017 ; AuthorGerardo Ganis ; Definition in file fillhistosauto2p.C. tutorialshistfillhistosauto2p.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/fillhistosauto2p_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fillhistosauto2p_8C.html
Availability,avail,available,". ROOT: core/base/doc/macros/fillpatterns.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fillpatterns.C. Go to the documentation of this file. 1void box(Int_t pat, Double_t x1, Double_t y1, Double_t x2, Double_t y2); 2{; 3 // Draw an box using the fill pattern ""pat"" with the ""pat"" value; 4 // written on top.; 5 ; 6 TBox b;; 7 b.SetFillColor(1);; 8 b.SetFillStyle(pat); b.DrawBox(x1,y1,x2,y2);; 9 b.SetFillStyle(0) ; b.DrawBox(x1,y1,x2,y2);; 10 b.SetFillColor(0) ; b.SetFillStyle(1000) ;; 11 Double_t dx = (x2-x1)/3;; 12 Double_t dy = (y2-y1)/3;; 13 Double_t h = (y2-y1)/2.5;; 14 b.DrawBox(x1+dx, y1+dy, x2-dx, y2-dy);; 15 b.SetFillStyle(0);; 16 b.DrawBox(x1+dx, y1+dy, x2-dx, y2-dy);; 17 ; 18 TLatex l;; 19 l.SetTextAlign(22); l.SetTextSize(h);; 20 l.DrawLatex((x1+x2)/2, (y1+y2)/2, Form(""%d"",pat));; 21}; 22 ; 23TCanvas * fillpatterns(int w=500, int h=700); 24{; 25 // Fill patterns example. This macro shows the available fill patterns.; 26 // The first table displays the 25 fixed patterns. They cannot be; 27 // customized unlike the hatches displayed in the second table which be; 28 // cutomized using:; 29 // - gStyle->SetHatchesSpacing() to define the spacing between hatches.; 30 // - gStyle->SetHatchesLineWidth() to define the hatches line width.; 31 //; 32 // Author: Olivier Couet.; 33 ; 34 TCanvas *Pat = new TCanvas(""Fill Patterns"", """",0,0,w,h);; 35 Pat->Range(0,0,1,1);; 36 Pat->SetBorderSize(2);; 37 Pat->SetFrameFillColor(0);; 38 Double_t bh = 0.059;; 39 Double_t db = 0.01;; 40 Double_t y = 0.995;; 41 Int_t i,j=3001;; 42 ; 43 // Fixed patterns.; 44 for (i=1; i<=5; i++) {; 45 box(j++, 0.01, y-bh, 0.19, y);; 46 box(j++, 0.21, y-bh, 0.39, y);; 47 box(j++, 0.41, y-bh, 0.59, y);; 48 box(j++, 0.61, y-bh, 0.79, y);; 49 box(j++, 0.81, y-bh, 0.99, y);; 50 y = y-bh-db;; 51 }; 52 ; 53 // Hatches; 54 y = y-3*db;; 55 gStyle->SetHatchesSpacing(2.0);; 56 gStyle->SetHatchesLineWidth(1);; 57 Int_t j1 = 3144;; 58 Int_t j2 = 3305;; 59 Int_t ",MatchSource.WIKI,doc/master/fillpatterns_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fillpatterns_8C_source.html
Security,access,accessed,". ROOT: tutorials/hist/FirstContour.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. FirstContour.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Make a contour plot and get the first contour in a TPolyMarker. ; This macro generates a color contour plot by selecting entries from an ntuple file. The TGraph object corresponding to the first contour line is accessed and displayed into a separate canvas.; ; void FirstContour(); {; TString dir = gROOT->GetTutorialDir();; dir.Append(""/hsimple.C"");; dir.ReplaceAll(""/./"",""/"");; if (!gInterpreter->IsLoaded(dir.Data())) gInterpreter->LoadMacro(dir.Data());; TFile *file = (TFile*)gROOT->ProcessLineFast(""hsimple(1)"");; if (!file) return;; TTree *ntuple = (TTree*)file->Get(""ntuple"");; ; TCanvas *c1 = new TCanvas(""c1"",""Contours"",10,10,800,600);; ntuple->Draw(""py:px"",""px*px+py*py < 20"", ""contz,list"");; ; //we must call Update to force the canvas to be painted. When; //painting the contour plot, the list of contours is generated; //and a reference to it added to the Root list of special objects; c1->Update();; ; TCanvas *c2 = new TCanvas(""c2"",""First contour"",100,100,800,600);; ; ; TObjArray *contours =; (TObjArray*)gROOT->GetListOfSpecials()->FindObject(""contours"");; if (!contours) return;; TList *lcontour1 = (TList*)contours->At(0);; if (!lcontour1) return;; TGraph *gc1 = (TGraph*)lcontour1->First();; if (!gc1) return;; if (gc1->GetN() < 10) return;; gc1->SetMarkerStyle(21);; gc1->Draw(""alp"");; ; //We make a TCutG object with the array obtained from this graph; TCutG *cutg = new TCutG(""cutg"",gc1->GetN(),gc1->GetX(),gc1->GetY());; ; //We create a polymarker object with npmax points.; const Int_t npmax = 50000;; TPolyMarker *pm = new TPolyMarker(npmax);; Int_t np = 0;; while(1) {; Double_t x = -4 +8*gRandom->Rndm();; Double_t y = -4 +8*gRandom->Rndm();; if (cutg->IsInside(x,y)) {; pm->SetPoint(np,x,y);; np++;; if (np == npmax) break;; }; }; pm->Draw();; }; Int_",MatchSource.WIKI,doc/master/FirstContour_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FirstContour_8C.html
Energy Efficiency,power,powerful,". ROOT: tutorials/graphics/first.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. first.C File ReferenceTutorials » Graphics tutorials. Detailed Description; Show some basic primitives. . ; void first() {; ; TCanvas *nut = new TCanvas(""nut"", ""FirstSession"",100,10,700,900);; nut->Range(0,0,20,24);; nut->SetFillColor(10);; nut->SetBorderSize(2);; ; TPaveLabel *pl = new TPaveLabel(3,22,17,23.7,; ""My first ROOT interactive session"",""br"");; pl->SetFillColor(18);; pl->Draw();; ; TText t(0,0,""a"");; t.SetTextFont(62);; t.SetTextSize(0.025);; t.SetTextAlign(12);; t.DrawText(2,20.3,""ROOT is based on CLING, a powerful C/C++ interpreter."");; t.DrawText(2,19.3,""Blocks of lines can be entered within {...}."");; t.DrawText(2,18.3,""Previous typed lines can be recalled."");; ; t.SetTextFont(72);; t.SetTextSize(0.026);; t.DrawText(3,17,""Root > float x=5; float y=7;"");; t.DrawText(3,16,""Root > x*sqrt(y)"");; t.DrawText(3,14,; ""Root > for (int i=2;i<7;i++) printf(\""sqrt(%d) = %f\\n\"",i,sqrt(i));"");; t.DrawText(3,10,""Root > TF1 f1(\""f1\"",\""sin(x)/x\"",0,10)"");; t.DrawText(3, 9,""Root > f1.Draw()"");; t.SetTextFont(81);; t.SetTextSize(0.018);; t.DrawText(4,15,""(float) 13.2288f"");; t.DrawText(4,13.3,""sqrt(2) = 1.414214"");; t.DrawText(4,12.7,""sqrt(3) = 1.732051"");; t.DrawText(4,12.1,""sqrt(4) = 2.000000"");; t.DrawText(4,11.5,""sqrt(5) = 2.236068"");; t.DrawText(4,10.9,""sqrt(6) = 2.449490"");; ; TPad *pad = new TPad(""pad"",""pad"",.2,.05,.8,.35);; pad->Draw();; pad->cd();; pad->SetGrid();; TF1 *f1 = new TF1(""f1"",""sin(x)/x"",0,10);; f1->Draw();; }; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF1.cxx:1333; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::SetB",MatchSource.WIKI,doc/master/first_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/first_8C.html
Availability,error,error,"(TF1*) gROOT.FindObject(""sqroot""); //; TF1 * sqroot = nullptr;; file->GetObject(""sqroot"",sqroot);; if (!sqroot){; Error(""fit1.C"",""Cannot find object sqroot of type TF1\n"");; return;; }; sqroot->Print();; ; //; // Now get and fit histogram h1f with the function sqroot; //; TH1F* h1f = nullptr;; file->GetObject(""h1f"",h1f);; if (!h1f){; Error(""fit1.C"",""Cannot find object h1f of type TH1F\n"");; return;; }; h1f->SetFillColor(45);; h1f->Fit(""sqroot"");; ; // We now annotate the picture by creating a PaveText object; // and displaying the list of commands in this macro; //; TPaveText * fitlabel = new TPaveText(0.6,0.4,0.9,0.75,""NDC"");; fitlabel->SetTextAlign(12);; fitlabel->SetFillColor(42);; fitlabel->ReadFile(Form(""%sfit1_C.txt"",dir.Data()));; fitlabel->Draw();; c1->Update();; gBenchmark->Show(""fit1"");; }; TBenchmark.h; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; TCanvas.h; TError.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TF1.h; TFile.h; TFrame.h; TH1.h; TInterpreter.h; TPaveText.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TString.h; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; TSystem.h; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showvirtual void Show(const char *name)Stops Benchmark name and Prints results.Definition TBenchmark.cxx:155; TCanvasThe Canvas class.Definition TCanvas.h:23; TDirectory::GetObjectvoid GetObject(const char *namecycle, T *&ptr)Get an object with proper type checking.Definition TDirectory.h:212; TF11-Dim function classDefinition TF1.h:233; TF1::Printvoid Print(Option_t *option="""") const over",MatchSource.WIKI,doc/master/fit1_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fit1_8C.html
Security,access,access," TBenchmark::Showvirtual void Show(const char *name)Stops Benchmark name and Prints results.Definition TBenchmark.cxx:155; TCanvasThe Canvas class.Definition TCanvas.h:23; TDirectory::GetObjectvoid GetObject(const char *namecycle, T *&ptr)Get an object with proper type checking.Definition TDirectory.h:212; TF11-Dim function classDefinition TF1.h:233; TF1::Printvoid Print(Option_t *option="""") const overrideThis method must be overridden when a class wants to print itself.Definition TF1.cxx:2897; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFile::lsvoid ls(Option_t *option="""") const overrideList file contents.Definition TFile.cxx:1457; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; c1return c1Definition legend1.C:41; fit1_py.fitlabelfitlabelDefinition fit1_py.py:12; fit1Definition fit1.py:1; AuthorRene Brun ; Definition in file fit1.C. tutorialsfitfit1.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/fit1_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fit1_8C.html
Energy Efficiency,power,power,"ams[ 5] *= ratio;; f2params[10] *= ratio;; f2->SetParameters(f2params);; h2->Fit(""f2"",""N"");; auto cutg = new TCutG(""cutg"",5);; cutg->SetPoint(0,-7,-7);; cutg->SetPoint(1, 2,-7);; cutg->SetPoint(2, 2, 2);; cutg->SetPoint(3,-7, 2);; cutg->SetPoint(4,-7,-7);; h2->Draw(""lego2 0"");; h2->SetFillColor(38);; f2->SetNpx(80);; f2->SetNpy(80);; f2->Draw(""surf1 same bb [cutg]"");; return c;; }; c#define c(i)Definition RSha256.hxx:101; TCanvas.h; TCutG.h; TF2.h; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; TH2.h; nentriesint nentriesDefinition THbookFile.cxx:91; TMath.h; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TCanvasThe Canvas class.Definition TCanvas.h:23; TCutGGraphical cut class.Definition TCutG.h:20; TF2A 2-Dim function with parameters.Definition TF2.h:29; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; double; xDouble_t x[n]Definition legend1.C:17; RooFit::Detail::MathFuncs::ratiodouble ratio(double numerator, double denominator)Definition MathFuncs.h:103; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; AuthorRene Brun ; Definition in file fit2a.C. tutorialsfitfit2a.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/fit2a_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fit2a_8C.html
Availability,error,errors,"+ my2;; }; h->Fill(x,y);; ; }; }; ; ; ; ; int fit2dHist(int option=1) {; ; // create two histograms; ; int nbx1 = 50;; int nby1 = 50;; int nbx2 = 50;; int nby2 = 50;; double xlow1 = 0.;; double ylow1 = 0.;; double xup1 = 10.;; double yup1 = 10.;; double xlow2 = 5.;; double ylow2 = 5.;; double xup2 = 20.;; double yup2 = 20.;; ; auto h1 = new TH2D(""h1"",""core"",nbx1,xlow1,xup1,nby1,ylow1,yup1);; auto h2 = new TH2D(""h2"",""tails"",nbx2,xlow2,xup2,nby2,ylow2,yup2);; ; double iniParams[10] = { 100, 6., 2., 7., 3, 100, 12., 3., 11., 2. };; // create fit function; TF2 * func = new TF2(""func"",my2Dfunc,xlow2,xup2,ylow2,yup2, 10);; func->SetParameters(iniParams);; ; // fill Histos; int n1 = 1000000;; int n2 = 1000000;; FillHisto(h1,n1,iniParams);; FillHisto(h2,n2,iniParams);; ; // scale histograms to same heights (for fitting); double dx1 = (xup1-xlow1)/double(nbx1);; double dy1 = (yup1-ylow1)/double(nby1);; double dx2 = (xup2-xlow2)/double(nbx2);; double dy2 = (yup2-ylow2)/double(nby2);; // scale histo 2 to scale of 1; h2->Sumw2();; h2->Scale( ( double(n1) * dx1 * dy1 ) / ( double(n2) * dx2 * dy2 ) );; ; bool global = false;; if (option > 10) global = true;; // do global combined fit; if (global) {; // fill data structure for fit (coordinates + values + errors); std::cout << ""Do global fit"" << std::endl;; // fit now all the function together; ; ROOT::Fit::Fitter fitter;; //The default minimizer is Minuit, you can also try Minuit2; ; MyFcn myFcn(h1,h2);; fitter.SetFCN(10, myFcn);; if (option%10 == 2) fitter.Config().SetMinimizer(""Minuit2"");; ; // set parameter initial value, name and step size; for (int i = 0; i < 10; ++i) {; fitter.Config().ParSettings(i) = ROOT::Fit::ParameterSettings(func->GetParName(i), func->GetParameter(i), 0.01);; }; ; bool ret = fitter.FitFCN();; if (!ret) {; Error(""fit2DHist"",""Fit Failed to converge"");; return -1;; }; ; //get result; double minParams[10];; double parErrors[10];; for (int i = 0; i < 10; ++i) {; minParams[i] = fitter.Result().Parameter(i);; ",MatchSource.WIKI,doc/master/fit2dHist_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fit2dHist_8C.html
Deployability,configurat,configuration,"FcnValue() constReturn value of the objective function (chi2 or likelihood) used in the fit.Definition FitResult.h:111; ROOT::Fit::FitResult::Edmdouble Edm() constExpected distance from minimum.Definition FitResult.h:117; ROOT::Fit::FitResult::NFreeParametersunsigned int NFreeParameters() constget total number of free parametersDefinition FitResult.h:125; ROOT::Fit::FitResult::Parameterdouble Parameter(unsigned int i) constparameter value by indexDefinition FitResult.h:174; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::Fitter::Resultconst FitResult & Result() constget fit resultDefinition Fitter.h:394; ROOT::Fit::Fitter::FitFCNbool FitFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Fit using the a generic FCN function as a C++ callable object implementing double () (const double *)...Definition Fitter.h:649; ROOT::Fit::Fitter::Configconst FitConfig & Config() constaccess to the fit configuration (const method)Definition Fitter.h:422; ROOT::Fit::Fitter::SetFCNbool SetFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Set a generic FCN function as a C++ callable object implementing double () (const double *) Note that...Definition Fitter.h:656; ROOT::Fit::ParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/re...Definition ParameterSettings.h:33; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetBinCentervirtual Double_t GetBinCenter(Int_t bin) constReturn center of bin.Definition TAxis.cxx:478; TCanvasThe Canvas class.Definition TCanvas.h:23; TF1::SetNDFvirtual void SetNDF(Int_t ndf)Set the number of degrees of freedom ndf should be the number of points used in a fit - the number of...Definition TF1.cxx:3419; TF1::SetChisquarevirtual void SetChisquare(Double_t chi2)Definition TF1.h:640; TF1::SetParErrorsvirtual",MatchSource.WIKI,doc/master/fit2dHist_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fit2dHist_8C.html
Modifiability,config,configuration,"FcnValue() constReturn value of the objective function (chi2 or likelihood) used in the fit.Definition FitResult.h:111; ROOT::Fit::FitResult::Edmdouble Edm() constExpected distance from minimum.Definition FitResult.h:117; ROOT::Fit::FitResult::NFreeParametersunsigned int NFreeParameters() constget total number of free parametersDefinition FitResult.h:125; ROOT::Fit::FitResult::Parameterdouble Parameter(unsigned int i) constparameter value by indexDefinition FitResult.h:174; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::Fitter::Resultconst FitResult & Result() constget fit resultDefinition Fitter.h:394; ROOT::Fit::Fitter::FitFCNbool FitFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Fit using the a generic FCN function as a C++ callable object implementing double () (const double *)...Definition Fitter.h:649; ROOT::Fit::Fitter::Configconst FitConfig & Config() constaccess to the fit configuration (const method)Definition Fitter.h:422; ROOT::Fit::Fitter::SetFCNbool SetFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Set a generic FCN function as a C++ callable object implementing double () (const double *) Note that...Definition Fitter.h:656; ROOT::Fit::ParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/re...Definition ParameterSettings.h:33; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetBinCentervirtual Double_t GetBinCenter(Int_t bin) constReturn center of bin.Definition TAxis.cxx:478; TCanvasThe Canvas class.Definition TCanvas.h:23; TF1::SetNDFvirtual void SetNDF(Int_t ndf)Set the number of degrees of freedom ndf should be the number of points used in a fit - the number of...Definition TF1.cxx:3419; TF1::SetChisquarevirtual void SetChisquare(Double_t chi2)Definition TF1.h:640; TF1::SetParErrorsvirtual",MatchSource.WIKI,doc/master/fit2dHist_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fit2dHist_8C.html
Performance,perform,performing,"h:308; ROOT::Fit::FitConfig::SetMinimizervoid SetMinimizer(const char *type, const char *algo=nullptr)set minimizer typeDefinition FitConfig.h:179; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitResult::Errordouble Error(unsigned int i) constparameter error by indexDefinition FitResult.h:179; ROOT::Fit::FitResult::MinFcnValuedouble MinFcnValue() constReturn value of the objective function (chi2 or likelihood) used in the fit.Definition FitResult.h:111; ROOT::Fit::FitResult::Edmdouble Edm() constExpected distance from minimum.Definition FitResult.h:117; ROOT::Fit::FitResult::NFreeParametersunsigned int NFreeParameters() constget total number of free parametersDefinition FitResult.h:125; ROOT::Fit::FitResult::Parameterdouble Parameter(unsigned int i) constparameter value by indexDefinition FitResult.h:174; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::Fitter::Resultconst FitResult & Result() constget fit resultDefinition Fitter.h:394; ROOT::Fit::Fitter::FitFCNbool FitFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Fit using the a generic FCN function as a C++ callable object implementing double () (const double *)...Definition Fitter.h:649; ROOT::Fit::Fitter::Configconst FitConfig & Config() constaccess to the fit configuration (const method)Definition Fitter.h:422; ROOT::Fit::Fitter::SetFCNbool SetFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Set a generic FCN function as a C++ callable object implementing double () (const double *) Note that...Definition Fitter.h:656; ROOT::Fit::ParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/re...Definition ParameterSettings.h:33; TAxisC",MatchSource.WIKI,doc/master/fit2dHist_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fit2dHist_8C.html
Energy Efficiency,power,power,"x[0]-par[1])/par[2]);; double r2 = double((x[1]-par[3])/par[4]);; return par[0]*TMath::Exp(-0.5*(r1*r1+r2*r2));; }; double fun2(double *x, double *par) {; double *p1 = &par[0];; double *p2 = &par[5];; double *p3 = &par[10];; double result = g2(x,p1) + g2(x,p2) + g2(x,p3);; return result;; }; ; void fit2() {; const int npar = 15;; double f2params[npar] =; {100,-3,3,-3,3,160,0,0.8,0,0.9,40,4,0.7,4,0.7};; TF2 *f2 = new TF2(""f2"",fun2,-10,10,-10,10, npar);; f2->SetParameters(f2params);; ; //Create an histogram and fill it randomly with f2; TH2F *h2 = new TH2F(""h2"",""from f2"",40,-10,10,40,-10,10);; int nentries = 100000;; h2->FillRandom(""f2"",nentries);; //Fit h2 with original function f2; float ratio = 4*nentries/100000;; f2params[ 0] *= ratio;; f2params[ 5] *= ratio;; f2params[10] *= ratio;; f2->SetParameters(f2params);; h2->Fit(""f2"");; }; TF2.h; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; TH2.h; nentriesint nentriesDefinition THbookFile.cxx:91; TMath.h; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF2A 2-Dim function with parameters.Definition TF2.h:29; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; double; xDouble_t x[n]Definition legend1.C:17; RooFit::Detail::MathFuncs::ratiodouble ratio(double numerator, double denominator)Definition MathFuncs.h:103; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; AuthorRene Brun ; Definition in file fit2.C. tutorialsfitfit2.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/fit2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fit2_8C.html
Availability,error,errors,". ROOT: tutorials/fit/fitCircle.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fitCircle.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ; root > .x fitCircle.C (10000 points by default); root > .x fitCircle.C(100); (with only 100 points; root > .x fitCircle.C++(100000); with ACLIC; pointsOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t pointsDefinition TGWin32VirtualXProxy.cxx:148. ; ****************************************; Minimizer is Minuit2 / Migrad; MinFCN = 903.174; NDf = 0; Edm = 8.44653e-07; NCalls = 65; x0 = 0.00667903 +/- 0.0141774 ; y0 = 0.00535479 +/- 0.0141954 ; R = 3.995 +/- 0.0100048 ; ; #include ""TCanvas.h""; #include ""TRandom3.h""; #include ""TGraph.h""; #include ""TMath.h""; #include ""TArc.h""; #include ""Fit/Fitter.h""; #include <Math/Functor.h>; ; //____________________________________________________________________; void fitCircle(int n=10000) {; //generates n points around a circle and fit them; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,600);; c1->SetGrid();; TGraph* gr = new TGraph(n);; if (n> 999) gr->SetMarkerStyle(1);; else gr->SetMarkerStyle(3);; TRandom3 r;; double x,y;; for (int i=0;i<n;i++) {; r.Circle(x,y,r.Gaus(4,0.3));; gr->SetPoint(i,x,y);; }; c1->DrawFrame(-5,-5,5,5);; gr->Draw(""p"");; ; ; auto chi2Function = [&](const double *par) {; //minimisation function computing the sum of squares of residuals; // looping at the graph points; int np = gr->GetN();; double f = 0;; double *x = gr->GetX();; double *y = gr->GetY();; for (int i=0;i<np;i++) {; double u = x[i] - par[0];; double v = y[i] - par[1];; double dr = par[2] - std::sqrt(u*u+v*v);; f += dr*dr;; }; return f;; };; ; // wrap chi2 function in a function object for the fit; // 3 ",MatchSource.WIKI,doc/master/fitCircle_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitCircle_8C.html
Deployability,configurat,configuration,"ributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; TGraph.h; TMath.h; TRandom3.h; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::Fitter::Resultconst FitResult & Result() constget fit resultDefinition Fitter.h:394; ROOT::Fit::Fitter::FitFCNbool FitFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Fit using the a generic FCN function as a C++ callable object implementing double () (const double *)...Definition Fitter.h:649; ROOT::Fit::Fitter::Configconst FitConfig & Config() constaccess to the fit configuration (const method)Definition Fitter.h:422; ROOT::Fit::Fitter::SetFCNbool SetFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Set a generic FCN function as a C++ callable object implementing double () (const double *) Note that...Definition Fitter.h:656; ROOT::Fit::ParameterSettings::SetNamevoid SetName(const std::string &name)interactionDefinition ParameterSettings.h:113; ROOT::Math::FunctorDocumentation for class Functor class.Definition Functor.h:47; TArcCreate an Arc.Definition TArc.h:26; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker st",MatchSource.WIKI,doc/master/fitCircle_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitCircle_8C.html
Integrability,wrap,wrap,"e-07; NCalls = 65; x0 = 0.00667903 +/- 0.0141774 ; y0 = 0.00535479 +/- 0.0141954 ; R = 3.995 +/- 0.0100048 ; ; #include ""TCanvas.h""; #include ""TRandom3.h""; #include ""TGraph.h""; #include ""TMath.h""; #include ""TArc.h""; #include ""Fit/Fitter.h""; #include <Math/Functor.h>; ; //____________________________________________________________________; void fitCircle(int n=10000) {; //generates n points around a circle and fit them; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,600);; c1->SetGrid();; TGraph* gr = new TGraph(n);; if (n> 999) gr->SetMarkerStyle(1);; else gr->SetMarkerStyle(3);; TRandom3 r;; double x,y;; for (int i=0;i<n;i++) {; r.Circle(x,y,r.Gaus(4,0.3));; gr->SetPoint(i,x,y);; }; c1->DrawFrame(-5,-5,5,5);; gr->Draw(""p"");; ; ; auto chi2Function = [&](const double *par) {; //minimisation function computing the sum of squares of residuals; // looping at the graph points; int np = gr->GetN();; double f = 0;; double *x = gr->GetX();; double *y = gr->GetY();; for (int i=0;i<np;i++) {; double u = x[i] - par[0];; double v = y[i] - par[1];; double dr = par[2] - std::sqrt(u*u+v*v);; f += dr*dr;; }; return f;; };; ; // wrap chi2 function in a function object for the fit; // 3 is the number of fit parameters (size of array par); ROOT::Math::Functor fcn(chi2Function,3);; ROOT::Fit::Fitter fitter;; ; ; double pStart[3] = {0,0,1};; fitter.SetFCN(fcn, pStart);; fitter.Config().ParSettings(0).SetName(""x0"");; fitter.Config().ParSettings(1).SetName(""y0"");; fitter.Config().ParSettings(2).SetName(""R"");; ; // do the fit; bool ok = fitter.FitFCN();; if (!ok) {; Error(""line3Dfit"",""Line3D Fit failed"");; }; ; const ROOT::Fit::FitResult & result = fitter.Result();; result.Print(std::cout);; ; //Draw the circle on top of the points; TArc *arc = new TArc(result.Parameter(0),result.Parameter(1),result.Parameter(2));; arc->SetLineColor(kRed);; arc->SetLineWidth(4);; arc->SetFillStyle(0);; arc->Draw();; }; Fitter.h; Functor.h; f#define f(i)Definition RSha256.hxx:104; kRed@ kRedDefinition Rtypes.h:66",MatchSource.WIKI,doc/master/fitCircle_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitCircle_8C.html
Modifiability,config,configuration,"ributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; TGraph.h; TMath.h; TRandom3.h; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::Fitter::Resultconst FitResult & Result() constget fit resultDefinition Fitter.h:394; ROOT::Fit::Fitter::FitFCNbool FitFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Fit using the a generic FCN function as a C++ callable object implementing double () (const double *)...Definition Fitter.h:649; ROOT::Fit::Fitter::Configconst FitConfig & Config() constaccess to the fit configuration (const method)Definition Fitter.h:422; ROOT::Fit::Fitter::SetFCNbool SetFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Set a generic FCN function as a C++ callable object implementing double () (const double *) Note that...Definition Fitter.h:656; ROOT::Fit::ParameterSettings::SetNamevoid SetName(const std::string &name)interactionDefinition ParameterSettings.h:113; ROOT::Math::FunctorDocumentation for class Functor class.Definition Functor.h:47; TArcCreate an Arc.Definition TArc.h:26; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker st",MatchSource.WIKI,doc/master/fitCircle_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitCircle_8C.html
Performance,perform,performing,"inition TGWin32VirtualXProxy.cxx:222; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; TGraph.h; TMath.h; TRandom3.h; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::Fitter::Resultconst FitResult & Result() constget fit resultDefinition Fitter.h:394; ROOT::Fit::Fitter::FitFCNbool FitFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Fit using the a generic FCN function as a C++ callable object implementing double () (const double *)...Definition Fitter.h:649; ROOT::Fit::Fitter::Configconst FitConfig & Config() constaccess to the fit configuration (const method)Definition Fitter.h:422; ROOT::Fit::Fitter::SetFCNbool SetFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Set a generic FCN function as a C++ callable object implementing double () (const double *) Note that...Definition Fitter.h:656; ROOT::Fit::ParameterSettings::SetNamevoid SetName(const std::string &name)interactionDefinition ParameterSettings.h:113; ROOT::Math::FunctorDocumentation for class Functor cl",MatchSource.WIKI,doc/master/fitCircle_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitCircle_8C.html
Availability,error,errors,". Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Author: L. Moneta Thu Sep 21 16:21:29 2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Implementation file for class FitConfig; 12 ; 13#include ""Fit/FitConfig.h""; 14 ; 15#include ""Fit/FitResult.h""; 16 ; 17#include ""Math/IParamFunction.h""; 18#include ""Math/Util.h""; 19 ; 20#include ""Math/Minimizer.h""; 21#include ""Math/Factory.h""; 22 ; 23#include <cmath>; 24 ; 25#include <string>; 26#include <sstream>; 27 ; 28#include ""Math/Error.h""; 29 ; 30//#define DEBUG; 31#ifdef DEBUG; 32#endif; 33 ; 34namespace ROOT {; 35 ; 36namespace Fit {; 37 ; 38 ; 39 ; 40FitConfig::FitConfig(unsigned int npar) :; 41 fNormErrors(false),; 42 fParabErrors(false), // ensure that in any case correct parabolic errors are estimated; 43 fMinosErrors(false), // do full Minos error analysis for all parameters; 44 fUpdateAfterFit(true), // update after fit; 45 fWeightCorr(false),; 46 fSettings(std::vector<ParameterSettings>(npar) ); 47{; 48 // constructor implementation; 49}; 50 ; 51 ; 52FitConfig::~FitConfig(); 53{; 54 // destructor implementation. No Operations; 55}; 56 ; 57FitConfig::FitConfig(const FitConfig &rhs) {; 58 // Implementation of copy constructor; 59 (*this) = rhs;; 60}; 61 ; 62FitConfig & FitConfig::operator = (const FitConfig &rhs) {; 63 // Implementation of assignment operator.; 64 if (this == &rhs) return *this; // time saving self-test; 65 ; 66 fNormErrors = rhs.fNormErrors;; 67 fParabErrors = rhs.fParabErrors;; 68 fMinosErrors = rhs.fMinosErrors;; 69 fUpdateAfterFit = rhs.fUpdateAfterFit;; 70 fWeightCorr = rhs.fWeightCorr;; 71 ; 72 fSettings = rhs.fSettings;; 73 fMinosParams = rhs.fMinosParams;; 74 ; 75 fMinimizerOpts = rhs.fMinimizerOpts;; 76 ; 77 return *this;; 78}; 79 ; 80void FitConfig::SetFromFitResult(const Fit",MatchSource.WIKI,doc/master/FitConfig_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitConfig_8cxx_source.html
Deployability,update,update,". Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Author: L. Moneta Thu Sep 21 16:21:29 2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Implementation file for class FitConfig; 12 ; 13#include ""Fit/FitConfig.h""; 14 ; 15#include ""Fit/FitResult.h""; 16 ; 17#include ""Math/IParamFunction.h""; 18#include ""Math/Util.h""; 19 ; 20#include ""Math/Minimizer.h""; 21#include ""Math/Factory.h""; 22 ; 23#include <cmath>; 24 ; 25#include <string>; 26#include <sstream>; 27 ; 28#include ""Math/Error.h""; 29 ; 30//#define DEBUG; 31#ifdef DEBUG; 32#endif; 33 ; 34namespace ROOT {; 35 ; 36namespace Fit {; 37 ; 38 ; 39 ; 40FitConfig::FitConfig(unsigned int npar) :; 41 fNormErrors(false),; 42 fParabErrors(false), // ensure that in any case correct parabolic errors are estimated; 43 fMinosErrors(false), // do full Minos error analysis for all parameters; 44 fUpdateAfterFit(true), // update after fit; 45 fWeightCorr(false),; 46 fSettings(std::vector<ParameterSettings>(npar) ); 47{; 48 // constructor implementation; 49}; 50 ; 51 ; 52FitConfig::~FitConfig(); 53{; 54 // destructor implementation. No Operations; 55}; 56 ; 57FitConfig::FitConfig(const FitConfig &rhs) {; 58 // Implementation of copy constructor; 59 (*this) = rhs;; 60}; 61 ; 62FitConfig & FitConfig::operator = (const FitConfig &rhs) {; 63 // Implementation of assignment operator.; 64 if (this == &rhs) return *this; // time saving self-test; 65 ; 66 fNormErrors = rhs.fNormErrors;; 67 fParabErrors = rhs.fParabErrors;; 68 fMinosErrors = rhs.fMinosErrors;; 69 fUpdateAfterFit = rhs.fUpdateAfterFit;; 70 fWeightCorr = rhs.fWeightCorr;; 71 ; 72 fSettings = rhs.fSettings;; 73 fMinosParams = rhs.fMinosParams;; 74 ; 75 fMinimizerOpts = rhs.fMinimizerOpts;; 76 ; 77 return *this;; 78}; 79 ; 80void FitConfig::SetFromFitResult(const Fit",MatchSource.WIKI,doc/master/FitConfig_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitConfig_8cxx_source.html
Energy Efficiency,adapt,adapted,"191 if (defaultMinim != minim_newDefault ) fMinimizerOpts.SetMinimizerType(minim_newDefault.c_str());; 192 ; 193 if (min == nullptr) {; 194 // if creation of minimizer failed force the use by default of Minuit; 195 std::string minim2 = ""Minuit"";; 196 if (minimType == ""Minuit"") minim2 = ""Minuit2"";; 197 if (minimType != minim2 ) {; 198 std::string msg = ""Could not create the "" + minimType + "" minimizer. Try using the minimizer "" + minim2;; 199 MATH_WARN_MSG(""FitConfig::CreateMinimizer"",msg.c_str());; 200 min = ROOT::Math::Factory::CreateMinimizer(minim2,""Migrad"");; 201 if (min == nullptr) {; 202 MATH_ERROR_MSG(""FitConfig::CreateMinimizer"",""Could not create the Minuit2 minimizer"");; 203 return nullptr;; 204 }; 205 SetMinimizer( minim2.c_str(),""Migrad"");; 206 }; 207 else {; 208 std::string msg = ""Could not create the Minimizer "" + minimType;; 209 MATH_ERROR_MSG(""FitConfig::CreateMinimizer"",msg.c_str());; 210 return nullptr;; 211 }; 212 }; 213 ; 214 // set default max of function calls according to the number of parameters; 215 // formula from Minuit2 (adapted); 216 if (fMinimizerOpts.MaxFunctionCalls() == 0) {; 217 unsigned int npar = fSettings.size();; 218 int maxfcn = 1000 + 100*npar + 5*npar*npar;; 219 fMinimizerOpts.SetMaxFunctionCalls(maxfcn);; 220 }; 221 ; 222 ; 223 // set default minimizer control parameters; 224 min->SetPrintLevel( fMinimizerOpts.PrintLevel() );; 225 min->SetMaxFunctionCalls( fMinimizerOpts.MaxFunctionCalls() );; 226 min->SetMaxIterations( fMinimizerOpts.MaxIterations() );; 227 min->SetTolerance( fMinimizerOpts.Tolerance() );; 228 min->SetPrecision( fMinimizerOpts.Precision() );; 229 min->SetValidError( fParabErrors );; 230 min->SetStrategy( fMinimizerOpts.Strategy() );; 231 min->SetErrorDef( fMinimizerOpts.ErrorDef() );; 232 // set extra options if existing; 233 if (fMinimizerOpts.ExtraOptions()); 234 min->SetExtraOptions(*fMinimizerOpts.ExtraOptions());; 235 ; 236 return min;; 237}; 238 ; 239std::string FitConfig::MinimizerName() const; 240{; ",MatchSource.WIKI,doc/master/FitConfig_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitConfig_8cxx_source.html
Integrability,interface,interface,"ptions::DefaultMinimizerTypestatic const std::string & DefaultMinimizerType()Definition MinimizerOptions.cxx:100; ROOT::Math::MinimizerOptions::DefaultMinimizerAlgostatic const std::string & DefaultMinimizerAlgo()Definition MinimizerOptions.cxx:85; ROOT::Math::MinimizerOptions::MinimizerTypeconst std::string & MinimizerType() consttype of minimizerDefinition MinimizerOptions.h:198; ROOT::Math::MinimizerOptions::MaxIterationsunsigned int MaxIterations() constmax iterationsDefinition MinimizerOptions.h:180; ROOT::Math::MinimizerOptions::MaxFunctionCallsunsigned int MaxFunctionCalls() constmax number of function callsDefinition MinimizerOptions.h:177; ROOT::Math::MinimizerOptions::PrintLevelint PrintLevel() constnon-static methods for retrieving optionsDefinition MinimizerOptions.h:174; ROOT::Math::MinimizerOptions::SetMinimizerAlgorithmvoid SetMinimizerAlgorithm(const char *type)set minimizer algorithmDefinition MinimizerOptions.h:234; ROOT::Math::MinimizerAbstract Minimizer class, defining the interface for the various minimizer (like Minuit2,...Definition Minimizer.h:119; ROOT::Math::Minimizer::SetMaxIterationsvoid SetMaxIterations(unsigned int maxiter)set maximum iterations (one iteration can have many function calls)Definition Minimizer.h:334; ROOT::Math::Minimizer::SetErrorDefvoid SetErrorDef(double up)set scale for calculating the errorsDefinition Minimizer.h:347; ROOT::Math::Minimizer::SetValidErrorvoid SetValidError(bool on)flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit)Definition Minimizer.h:350; ROOT::Math::Minimizer::SetTolerancevoid SetTolerance(double tol)set the toleranceDefinition Minimizer.h:337; ROOT::Math::Minimizer::SetPrintLevelvoid SetPrintLevel(int level)set print levelDefinition Minimizer.h:328; ROOT::Math::Minimizer::SetStrategyvoid SetStrategy(int strategyLevel)set the strategyDefinition Minimizer.h:344; ROOT::Math::Minimizer::SetPrecisionvoid SetPrecision(double prec)set in the minimizer the obj",MatchSource.WIKI,doc/master/FitConfig_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitConfig_8cxx_source.html
Modifiability,config,configuration,"142 // if a vector of parameters is given and parameters are not existing or are of different size; 143 bool createNew = false;; 144 if (npar != fSettings.size() ) {; 145 fSettings.clear();; 146 fSettings.reserve(npar);; 147 createNew = true;; 148 }; 149 unsigned int i = 0;; 150 const double * end = params+npar;; 151 for (const double * ipar = params; ipar != end; ++ipar) {; 152 double val = *ipar;; 153 double step = 0;; 154 if (vstep == nullptr) {; 155 step = 0.3*std::fabs(val); // step size is 30% of par value; 156 //double step = 2.0*std::fabs(val); // step size is 30% of par value; 157 if (val == 0) step = 0.3;; 158 }; 159 else; 160 step = vstep[i];; 161 ; 162 if (createNew); 163 fSettings.push_back( ParameterSettings(""Par_"" + ROOT::Math::Util::ToString(i), val, step ) );; 164 else {; 165 fSettings[i].SetValue(val);; 166 fSettings[i].SetStepSize(step);; 167 }; 168 ; 169 i++;; 170 }; 171}; 172 ; 173ROOT::Math::Minimizer * FitConfig::CreateMinimizer() {; 174 // create minimizer according to the chosen configuration using the; 175 // plug-in manager; 176 ; 177 // in case of empty string usesd default values; 178 if (fMinimizerOpts.MinimizerType().empty()); 179 fMinimizerOpts.SetMinimizerType(ROOT::Math::MinimizerOptions::DefaultMinimizerType().c_str());; 180 if (fMinimizerOpts.MinimizerAlgorithm().empty()); 181 fMinimizerOpts.SetMinimizerAlgorithm(ROOT::Math::MinimizerOptions::DefaultMinimizerAlgo().c_str());; 182 ; 183 const std::string &minimType = fMinimizerOpts.MinimizerType();; 184 const std::string & algoType = fMinimizerOpts.MinimizerAlgorithm();; 185 ; 186 std::string defaultMinim = ROOT::Math::MinimizerOptions::DefaultMinimizerType();; 187 ; 188 ROOT::Math::Minimizer * min = ROOT::Math::Factory::CreateMinimizer(minimType, algoType);; 189 // check if a different minimizer is used (in case a default value is passed, then set correctly in FitConfig); 190 const std::string & minim_newDefault = ROOT::Math::MinimizerOptions::DefaultMinimizerType();; 191 if (defa",MatchSource.WIKI,doc/master/FitConfig_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitConfig_8cxx_source.html
Performance,perform,perform,"() constmax iterationsDefinition MinimizerOptions.h:180; ROOT::Math::MinimizerOptions::MaxFunctionCallsunsigned int MaxFunctionCalls() constmax number of function callsDefinition MinimizerOptions.h:177; ROOT::Math::MinimizerOptions::PrintLevelint PrintLevel() constnon-static methods for retrieving optionsDefinition MinimizerOptions.h:174; ROOT::Math::MinimizerOptions::SetMinimizerAlgorithmvoid SetMinimizerAlgorithm(const char *type)set minimizer algorithmDefinition MinimizerOptions.h:234; ROOT::Math::MinimizerAbstract Minimizer class, defining the interface for the various minimizer (like Minuit2,...Definition Minimizer.h:119; ROOT::Math::Minimizer::SetMaxIterationsvoid SetMaxIterations(unsigned int maxiter)set maximum iterations (one iteration can have many function calls)Definition Minimizer.h:334; ROOT::Math::Minimizer::SetErrorDefvoid SetErrorDef(double up)set scale for calculating the errorsDefinition Minimizer.h:347; ROOT::Math::Minimizer::SetValidErrorvoid SetValidError(bool on)flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit)Definition Minimizer.h:350; ROOT::Math::Minimizer::SetTolerancevoid SetTolerance(double tol)set the toleranceDefinition Minimizer.h:337; ROOT::Math::Minimizer::SetPrintLevelvoid SetPrintLevel(int level)set print levelDefinition Minimizer.h:328; ROOT::Math::Minimizer::SetStrategyvoid SetStrategy(int strategyLevel)set the strategyDefinition Minimizer.h:344; ROOT::Math::Minimizer::SetPrecisionvoid SetPrecision(double prec)set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer wi...Definition Minimizer.h:341; ROOT::Math::Minimizer::SetMaxFunctionCallsvoid SetMaxFunctionCalls(unsigned int maxfcn)set maximum of function callsDefinition Minimizer.h:331; ROOT::Math::Minimizer::SetExtraOptionsvoid SetExtraOptions(const IOptions &extraOptions)set only the extra optionsDefinition Minimizer.h:358; Factory.h; HFit::FitTFitResultPtr Fit(FitObject *h1, TF1 *f1, Fop",MatchSource.WIKI,doc/master/FitConfig_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitConfig_8cxx_source.html
Testability,test,test,"ory.h""; 22 ; 23#include <cmath>; 24 ; 25#include <string>; 26#include <sstream>; 27 ; 28#include ""Math/Error.h""; 29 ; 30//#define DEBUG; 31#ifdef DEBUG; 32#endif; 33 ; 34namespace ROOT {; 35 ; 36namespace Fit {; 37 ; 38 ; 39 ; 40FitConfig::FitConfig(unsigned int npar) :; 41 fNormErrors(false),; 42 fParabErrors(false), // ensure that in any case correct parabolic errors are estimated; 43 fMinosErrors(false), // do full Minos error analysis for all parameters; 44 fUpdateAfterFit(true), // update after fit; 45 fWeightCorr(false),; 46 fSettings(std::vector<ParameterSettings>(npar) ); 47{; 48 // constructor implementation; 49}; 50 ; 51 ; 52FitConfig::~FitConfig(); 53{; 54 // destructor implementation. No Operations; 55}; 56 ; 57FitConfig::FitConfig(const FitConfig &rhs) {; 58 // Implementation of copy constructor; 59 (*this) = rhs;; 60}; 61 ; 62FitConfig & FitConfig::operator = (const FitConfig &rhs) {; 63 // Implementation of assignment operator.; 64 if (this == &rhs) return *this; // time saving self-test; 65 ; 66 fNormErrors = rhs.fNormErrors;; 67 fParabErrors = rhs.fParabErrors;; 68 fMinosErrors = rhs.fMinosErrors;; 69 fUpdateAfterFit = rhs.fUpdateAfterFit;; 70 fWeightCorr = rhs.fWeightCorr;; 71 ; 72 fSettings = rhs.fSettings;; 73 fMinosParams = rhs.fMinosParams;; 74 ; 75 fMinimizerOpts = rhs.fMinimizerOpts;; 76 ; 77 return *this;; 78}; 79 ; 80void FitConfig::SetFromFitResult(const FitResult &result) {; 81 // Implementation of setting of parameters from the result of the fit; 82 // all the other options will stay the same.; 83 // If the size of parameters do not match they will be re-created; 84 // but in that case the bound on the parameter will be lost; 85 ; 86 unsigned int npar = result.NPar();; 87 if (fSettings.size() != npar) {; 88 fSettings.clear();; 89 fSettings.resize(npar);; 90 }; 91 // fill the parameter settings; 92 for (unsigned int i = 0; i < npar; ++i) {; 93 if (result.IsParameterFixed(i) ); 94 fSettings[i].Set(result.ParName(i), result.Value(i) );; 95 e",MatchSource.WIKI,doc/master/FitConfig_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitConfig_8cxx_source.html
Usability,clear,clear,"plementation of copy constructor; 59 (*this) = rhs;; 60}; 61 ; 62FitConfig & FitConfig::operator = (const FitConfig &rhs) {; 63 // Implementation of assignment operator.; 64 if (this == &rhs) return *this; // time saving self-test; 65 ; 66 fNormErrors = rhs.fNormErrors;; 67 fParabErrors = rhs.fParabErrors;; 68 fMinosErrors = rhs.fMinosErrors;; 69 fUpdateAfterFit = rhs.fUpdateAfterFit;; 70 fWeightCorr = rhs.fWeightCorr;; 71 ; 72 fSettings = rhs.fSettings;; 73 fMinosParams = rhs.fMinosParams;; 74 ; 75 fMinimizerOpts = rhs.fMinimizerOpts;; 76 ; 77 return *this;; 78}; 79 ; 80void FitConfig::SetFromFitResult(const FitResult &result) {; 81 // Implementation of setting of parameters from the result of the fit; 82 // all the other options will stay the same.; 83 // If the size of parameters do not match they will be re-created; 84 // but in that case the bound on the parameter will be lost; 85 ; 86 unsigned int npar = result.NPar();; 87 if (fSettings.size() != npar) {; 88 fSettings.clear();; 89 fSettings.resize(npar);; 90 }; 91 // fill the parameter settings; 92 for (unsigned int i = 0; i < npar; ++i) {; 93 if (result.IsParameterFixed(i) ); 94 fSettings[i].Set(result.ParName(i), result.Value(i) );; 95 else {; 96 fSettings[i].Set( result.ParName(i), result.Value(i), result.Error(i) );; 97 // check if parameter is bound; 98 double lower = 0;; 99 double upper = 0;; 100 if (result.ParameterBounds(i,lower,upper) ) {; 101 if (lower == -std::numeric_limits<double>::infinity()) fSettings[i].SetUpperLimit(upper);; 102 else if (upper == std::numeric_limits<double>::infinity()) fSettings[i].SetLowerLimit(lower);; 103 else fSettings[i].SetLimits(lower,upper);; 104 }; 105 ; 106 // query if parameter needs to run Minos; 107 if (result.HasMinosError(i) ) {; 108 if (fMinosParams.empty()) {; 109 fMinosErrors = true;; 110 fMinosParams.reserve(npar-i);; 111 }; 112 fMinosParams.push_back(i);; 113 }; 114 }; 115 }; 116 ; 117 // set information about errors; 118 SetNormErrors( result.NormalizedErr",MatchSource.WIKI,doc/master/FitConfig_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitConfig_8cxx_source.html
Availability,error,errors,,MatchSource.WIKI,doc/master/FitConfig_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitConfig_8h_source.html
Deployability,configurat,configuration,"3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class FitConfig; 12 ; 13#ifndef ROOT_Fit_FitConfig; 14#define ROOT_Fit_FitConfig; 15 ; 16 ; 17#include ""Fit/ParameterSettings.h""; 18 ; 19#include ""Math/MinimizerOptions.h""; 20 ; 21#include ""Math/IParamFunctionfwd.h""; 22 ; 23#include ""TMath.h""; 24 ; 25#include <vector>; 26#include <string>; 27 ; 28namespace ROOT {; 29 ; 30 namespace Math {; 31 ; 32 class Minimizer;; 33 class MinimizerOptions;; 34 }; 35 ; 36 namespace Fit {; 37 ; 38 class FitResult;; 39 ; 40//___________________________________________________________________________________; 41/**; 42 Class describing the configuration of the fit, options and parameter settings; 43 using the ROOT::Fit::ParameterSettings class; 44 ; 45 @ingroup FitMain; 46*/; 47class FitConfig {; 48 ; 49public:; 50 ; 51 /**; 52 Default constructor; 53 */; 54 FitConfig (unsigned int npar = 0);; 55 ; 56 ; 57 /*; 58 Copy constructor; 59 */; 60 FitConfig(const FitConfig & rhs);; 61 ; 62 /**; 63 Destructor; 64 */; 65 ~FitConfig ();; 66 ; 67 /*; 68 Assignment operator; 69 */; 70 FitConfig & operator= (const FitConfig & rhs);; 71 ; 72 ; 73 /**; 74 get the parameter settings for the i-th parameter (const method); 75 */; 76 const ParameterSettings & ParSettings(unsigned int i) const { return fSettings.at(i); }; 77 ; 78 /**; 79 get the parameter settings for the i-th parameter (non-const method); 80 */; 81 ParameterSettings & ParSettings(unsigned int i) { return fSettings.at(i); }; 82 ; 83 /**; 84 get the vector of parameter settings (const method); 85 */; 86 const std::vector<ROOT::Fit::ParameterSettings> & ParamsSettings() const { return fSettings; }; 87 ; 88 /**; 89 get the vector of parameter settings (non-const method); 90 */; 91 std::vector<ROOT::Fit::ParameterSettings> & ParamsSetting",MatchSource.WIKI,doc/master/FitConfig_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitConfig_8h_source.html
Integrability,interface,interface,"rameter (non const method)Definition FitConfig.h:167; ROOT::Fit::FitConfig::MinosErrorsbool MinosErrors() constdo minos errors analysis on the parametersDefinition FitConfig.h:208; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::ParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/re...Definition ParameterSettings.h:33; ROOT::Math::IBaseParam::Parametersvirtual const double * Parameters() const =0Access the parameter values.; ROOT::Math::IBaseParam::ParameterNamevirtual std::string ParameterName(unsigned int i) constReturn the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default nam...Definition IParamFunction.h:86; ROOT::Math::IBaseParam::NParvirtual unsigned int NPar() const =0Return the number of Parameters.; ROOT::Math::IParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a d...Definition IParamFunction.h:108; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; ROOT::Math::MinimizerOptions::SetMinimizerTypevoid SetMinimizerType(const char *type)set minimizer typeDefinition MinimizerOptions.h:231; ROOT::Math::MinimizerOptions::MinimizerAlgorithmconst std::string & MinimizerAlgorithm() consttype of algorithmDefinition MinimizerOptions.h:201; ROOT::Math::MinimizerOptions::MinimizerTypeconst std::string & MinimizerType() consttype of minimizerDefinition MinimizerOptions.h:198; ROOT::Math::MinimizerOptions::SetMinimizerAlgorithmvoid SetMinimizerAlgorithm(const char *type)set minimizer algorithmDefinition MinimizerOptions.h:234; ROOT::Math::MinimizerAbstract Minimizer class, defining the interface for the various minimizer (like Minuit2,...Definition Minimizer.h:119; RooFit::MinimizerRooCmdArg Minimizer(const char *type, const char *alg=nullptr)Definition RooGlob",MatchSource.WIKI,doc/master/FitConfig_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitConfig_8h_source.html
Modifiability,config,configuration,"3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class FitConfig; 12 ; 13#ifndef ROOT_Fit_FitConfig; 14#define ROOT_Fit_FitConfig; 15 ; 16 ; 17#include ""Fit/ParameterSettings.h""; 18 ; 19#include ""Math/MinimizerOptions.h""; 20 ; 21#include ""Math/IParamFunctionfwd.h""; 22 ; 23#include ""TMath.h""; 24 ; 25#include <vector>; 26#include <string>; 27 ; 28namespace ROOT {; 29 ; 30 namespace Math {; 31 ; 32 class Minimizer;; 33 class MinimizerOptions;; 34 }; 35 ; 36 namespace Fit {; 37 ; 38 class FitResult;; 39 ; 40//___________________________________________________________________________________; 41/**; 42 Class describing the configuration of the fit, options and parameter settings; 43 using the ROOT::Fit::ParameterSettings class; 44 ; 45 @ingroup FitMain; 46*/; 47class FitConfig {; 48 ; 49public:; 50 ; 51 /**; 52 Default constructor; 53 */; 54 FitConfig (unsigned int npar = 0);; 55 ; 56 ; 57 /*; 58 Copy constructor; 59 */; 60 FitConfig(const FitConfig & rhs);; 61 ; 62 /**; 63 Destructor; 64 */; 65 ~FitConfig ();; 66 ; 67 /*; 68 Assignment operator; 69 */; 70 FitConfig & operator= (const FitConfig & rhs);; 71 ; 72 ; 73 /**; 74 get the parameter settings for the i-th parameter (const method); 75 */; 76 const ParameterSettings & ParSettings(unsigned int i) const { return fSettings.at(i); }; 77 ; 78 /**; 79 get the parameter settings for the i-th parameter (non-const method); 80 */; 81 ParameterSettings & ParSettings(unsigned int i) { return fSettings.at(i); }; 82 ; 83 /**; 84 get the vector of parameter settings (const method); 85 */; 86 const std::vector<ROOT::Fit::ParameterSettings> & ParamsSettings() const { return fSettings; }; 87 ; 88 /**; 89 get the vector of parameter settings (non-const method); 90 */; 91 std::vector<ROOT::Fit::ParameterSettings> & ParamsSetting",MatchSource.WIKI,doc/master/FitConfig_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitConfig_8h_source.html
Performance,perform,performed,"const { return fNormErrors; }; 203 ; 204 ///do analysis for parabolic errors; 205 bool ParabErrors() const { return fParabErrors; }; 206 ; 207 ///do minos errors analysis on the parameters; 208 bool MinosErrors() const { return fMinosErrors; }; 209 ; 210 ///Update configuration after a fit using the FitResult; 211 bool UpdateAfterFit() const { return fUpdateAfterFit; }; 212 ; 213 ///Apply Weight correction for error matrix computation; 214 bool UseWeightCorrection() const { return fWeightCorr; }; 215 ; 216 ; 217 /// return vector of parameter indices for which the Minos Error will be computed; 218 const std::vector<unsigned int> & MinosParams() const { return fMinosParams; }; 219 ; 220 /**; 221 set the option to normalize the error on the result according to chi2/ndf; 222 */; 223 void SetNormErrors(bool on = true) { fNormErrors= on; }; 224 ; 225 ///set parabolic errors; 226 void SetParabErrors(bool on = true) { fParabErrors = on; }; 227 ; 228 ///set Minos errors computation to be performed after fitting; 229 void SetMinosErrors(bool on = true) { fMinosErrors = on; }; 230 ; 231 ///apply the weight correction for error matrix computation; 232 void SetWeightCorrection(bool on = true) { fWeightCorr = on; }; 233 ; 234 /// set parameter indices for running Minos; 235 /// this can be used for running Minos on a subset of parameters - otherwise is run on all of them; 236 /// if MinosErrors() is set; 237 void SetMinosErrors(const std::vector<unsigned int> & paramInd ) {; 238 fMinosErrors = true;; 239 fMinosParams = paramInd;; 240 }; 241 ; 242 ///Update configuration after a fit using the FitResult; 243 void SetUpdateAfterFit(bool on = true) { fUpdateAfterFit = on; }; 244 ; 245 ; 246 /**; 247 static function to control default minimizer type and algorithm; 248 */; 249 static void SetDefaultMinimizer(const char *type, const char *algo = nullptr);; 250 ; 251 ; 252 ; 253 ; 254protected:; 255 ; 256 ; 257private:; 258 ; 259 bool fNormErrors; ///< flag for error normalization; 260 ",MatchSource.WIKI,doc/master/FitConfig_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitConfig_8h_source.html
Safety,avoid,avoid,"ate the configuration after a fit using the resultDefinition FitConfig.h:262; ROOT::Fit::FitConfig::operator=FitConfig & operator=(const FitConfig &rhs)Definition FitConfig.cxx:62; ROOT::Fit::FitConfig::MinimizerOptionsROOT::Math::MinimizerOptions & MinimizerOptions()access to the minimizer control parameter (non const method)Definition FitConfig.h:167; ROOT::Fit::FitConfig::MinosErrorsbool MinosErrors() constdo minos errors analysis on the parametersDefinition FitConfig.h:208; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::ParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/re...Definition ParameterSettings.h:33; ROOT::Math::IBaseParam::Parametersvirtual const double * Parameters() const =0Access the parameter values.; ROOT::Math::IBaseParam::ParameterNamevirtual std::string ParameterName(unsigned int i) constReturn the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default nam...Definition IParamFunction.h:86; ROOT::Math::IBaseParam::NParvirtual unsigned int NPar() const =0Return the number of Parameters.; ROOT::Math::IParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a d...Definition IParamFunction.h:108; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; ROOT::Math::MinimizerOptions::SetMinimizerTypevoid SetMinimizerType(const char *type)set minimizer typeDefinition MinimizerOptions.h:231; ROOT::Math::MinimizerOptions::MinimizerAlgorithmconst std::string & MinimizerAlgorithm() consttype of algorithmDefinition MinimizerOptions.h:201; ROOT::Math::MinimizerOptions::MinimizerTypeconst std::string & MinimizerType() consttype of minimizerDefinition MinimizerOptions.h:198; ROOT::Math::MinimizerOptions::SetMinimizerAlgorithmvoid SetMinimizerAlgorithm(const char ",MatchSource.WIKI,doc/master/FitConfig_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitConfig_8h_source.html
Security,access,access,"(ParameterSettings(func.ParameterName(i), val, step));; 130#ifdef DEBUG; 131 std::cout << ""FitConfig: add parameter "" << func.ParameterName(i) << "" val = "" << val << std::endl;; 132#endif; 133 i++;; 134 }; 135 }; 136 ; 137 /**; 138 set the parameter settings from number of parameters and a vector of values and optionally step values. If there are not existing or number of parameters does not match existing one, create a new parameter setting list.; 139 */; 140 void SetParamsSettings(unsigned int npar, const double * params, const double * vstep = nullptr);; 141 ; 142 /*; 143 Set the parameter settings from a vector of parameter settings; 144 */; 145 void SetParamsSettings (const std::vector<ROOT::Fit::ParameterSettings>& pars) {; 146 fSettings = pars;; 147 }; 148 ; 149 ; 150 /*; 151 Set the parameter settings from a fit Result; 152 */; 153 void SetFromFitResult (const FitResult & rhs);; 154 ; 155 ; 156 ; 157 /**; 158 create a new minimizer according to chosen configuration; 159 */; 160 ROOT::Math::Minimizer * CreateMinimizer();; 161 ; 162 ; 163 ; 164 /**; 165 access to the minimizer control parameter (non const method); 166 */; 167 ROOT::Math::MinimizerOptions & MinimizerOptions() { return fMinimizerOpts; }; 168 ; 169 ; 170 /**; 171 set all the minimizer options using class MinimizerOptions; 172 */; 173 void SetMinimizerOptions(const ROOT::Math::MinimizerOptions & minopt);; 174 ; 175 ; 176 /**; 177 set minimizer type; 178 */; 179 void SetMinimizer(const char *type, const char *algo = nullptr) {; 180 if (type) fMinimizerOpts.SetMinimizerType(type);; 181 if (algo) fMinimizerOpts.SetMinimizerAlgorithm(algo);; 182 }; 183 ; 184 /**; 185 return type of minimizer package; 186 */; 187 const std::string & MinimizerType() const { return fMinimizerOpts.MinimizerType(); }; 188 ; 189 /**; 190 return type of minimizer algorithms; 191 */; 192 const std::string & MinimizerAlgoType() const { return fMinimizerOpts.MinimizerAlgorithm(); }; 193 ; 194 /**; 195 * return Minimizer full nam",MatchSource.WIKI,doc/master/FitConfig_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitConfig_8h_source.html
Usability,clear,clear,"gs; }; 87 ; 88 /**; 89 get the vector of parameter settings (non-const method); 90 */; 91 std::vector<ROOT::Fit::ParameterSettings> & ParamsSettings() { return fSettings; }; 92 ; 93 /**; 94 number of parameters settings; 95 */; 96 unsigned int NPar() const { return fSettings.size(); }; 97 ; 98 /**; 99 return a vector of stored parameter values (i.e initial fit parameters); 100 */; 101 std::vector<double> ParamsValues() const;; 102 ; 103 ; 104 /**; 105 set the parameter settings from a model function.; 106 Create always new parameter setting list from a given model function; 107 */; 108 template <class T>; 109 void CreateParamsSettings(const ROOT::Math::IParamMultiFunctionTempl<T> &func) {; 110 // initialize from model function; 111 // set the parameters values from the function; 112 unsigned int npar = func.NPar();; 113 const double *begin = func.Parameters();; 114 if (!begin) {; 115 fSettings = std::vector<ParameterSettings>(npar);; 116 return;; 117 }; 118 ; 119 fSettings.clear();; 120 fSettings.reserve(npar);; 121 const double *end = begin + npar;; 122 unsigned int i = 0;; 123 for (const double *ipar = begin; ipar != end; ++ipar) {; 124 double val = *ipar;; 125 double step = 0.3 * fabs(val); // step size is 30% of par value; 126 // double step = 2.0*fabs(val); // step size is 30% of par value; 127 if (val == 0) step = 0.3;; 128 ; 129 fSettings.push_back(ParameterSettings(func.ParameterName(i), val, step));; 130#ifdef DEBUG; 131 std::cout << ""FitConfig: add parameter "" << func.ParameterName(i) << "" val = "" << val << std::endl;; 132#endif; 133 i++;; 134 }; 135 }; 136 ; 137 /**; 138 set the parameter settings from number of parameters and a vector of values and optionally step values. If there are not existing or number of parameters does not match existing one, create a new parameter setting list.; 139 */; 140 void SetParamsSettings(unsigned int npar, const double * params, const double * vstep = nullptr);; 141 ; 142 /*; 143 Set the parameter settings from a vector ",MatchSource.WIKI,doc/master/FitConfig_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitConfig_8h_source.html
Availability,error,error,"date();; ; TCanvas *c2 = new TCanvas(""c2"",""contours"",10,10,600,800);; c2->Divide(1,2);; c2->cd(1);; /*get first contour for parameter 1 versus parameter 2*/; TGraph *gr12 = (TGraph*)gMinuit->Contour(40,1,2);; gr12->Draw(""alp"");; c2->cd(2);; /*Get contour for parameter 0 versus parameter 2 for ERRDEF=2*/; gMinuit->SetErrorDef(4); //note 4 and not 2!; TGraph *gr2 = (TGraph*)gMinuit->Contour(80,0,2);; gr2->SetFillColor(42);; gr2->Draw(""alf"");; /*Get contour for parameter 0 versus parameter 2 for ERRDEF=1*/; gMinuit->SetErrorDef(1);; TGraph *gr1 = (TGraph*)gMinuit->Contour(80,0,2);; gr1->SetFillColor(38);; gr1->Draw(""lf"");; }; h#define h(i)Definition RSha256.hxx:106; TCanvas.h; TGraph.h; TH1F.h; TMinuit.h; gMinuitR__EXTERN TMinuit * gMinuitDefinition TMinuit.h:271; TVirtualFitter.h; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TMinuit::SetErrorDefvirtual Int_t SetErrorDef(Double_t up)To get the n-sigma contour the error def parameter ""up"" has to set to n^2.Definition TMinuit.cxx:908; TMinuit::Contourvirtual TObject * Contour(Int_t npoints=10, Int_t pa1=0, Int_t pa2=1)Creates a TGraph object describing the n-sigma contour of a TMinuit fit.Definition TMinuit.cxx:653; TVirtualFitter::SetDefaultFitterstatic void SetDefaultFitter(const char *name="""")static: set name of default fitterDefinition TVirtualFitter.cxx:245; c1return c1Definition legend1.C:41; c2return c2Definition legend2.C:14; AuthorRene Brun ; Definition in file fitcont.C. tutorialsfitfitcont.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/fitcont_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitcont_8C.html
Integrability,rout,routine,". ROOT: tutorials/fit/fitcont.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fitcont.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Example illustrating how to draw the n-sigma contour of a Minuit fit. ; To get the n-sigma contour the ERRDEF parameter in Minuit has to set to n^2. The fcn function has to be set before the routine is called.; WARNING!!! This test works only with TMinuit; The TGraph object is created via the interpreter. The user must cast it to a TGraph*. ; FCN=96.6163 FROM MIGRAD STATUS=CONVERGED 62 CALLS 63 TOTAL; EDM=2.07594e-08 STRATEGY= 1 ERROR MATRIX ACCURATE ; EXT PARAMETER STEP FIRST ; NO. NAME VALUE ERROR SIZE DERIVATIVE ; 1 Constant 1.43454e+02 2.29666e+00 9.00732e-03 -6.49594e-05; 2 Mean 1.60911e-02 1.30402e-02 6.28520e-05 3.57224e-03; 3 Sigma 9.87683e-01 9.45637e-03 1.24479e-05 2.14428e-02; ; #include <TCanvas.h>; #include <TGraph.h>; #include <TH1F.h>; #include <TMinuit.h>; #include <TVirtualFitter.h>; ; void fitcont(); {; //be sure default is Minuit since we will use gMinuit; TVirtualFitter::SetDefaultFitter(""Minuit"");; ; TCanvas *c1 = new TCanvas(""c1"");; TH1F *h = new TH1F(""h"",""My histogram"",100,-3,3);; h->FillRandom(""gaus"",6000);; h->Fit(""gaus"");; c1->Update();; ; TCanvas *c2 = new TCanvas(""c2"",""contours"",10,10,600,800);; c2->Divide(1,2);; c2->cd(1);; /*get first contour for parameter 1 versus parameter 2*/; TGraph *gr12 = (TGraph*)gMinuit->Contour(40,1,2);; gr12->Draw(""alp"");; c2->cd(2);; /*Get contour for parameter 0 versus parameter 2 for ERRDEF=2*/; gMinuit->SetErrorDef(4); //note 4 and not 2!; TGraph *gr2 = (TGraph*)gMinuit->Contour(80,0,2);; gr2->SetFillColor(42);; gr2->Draw(""alf"");; /*Get contour for parameter 0 versus parameter 2 for ERRDEF=1*/; gMinuit->SetErrorDef(1);; TGraph *gr1 = (TGraph*)gMinuit->Contour(80,0,2);; gr1->SetFillColor(38);; gr1->Draw(""lf"");; }; h#define h(i)Definition RSha256.hxx:106; TCanvas.h; TGraph.h; TH1F.h; TMinuit.h; gMinuitR__EXTERN",MatchSource.WIKI,doc/master/fitcont_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitcont_8C.html
Testability,test,test,". ROOT: tutorials/fit/fitcont.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fitcont.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Example illustrating how to draw the n-sigma contour of a Minuit fit. ; To get the n-sigma contour the ERRDEF parameter in Minuit has to set to n^2. The fcn function has to be set before the routine is called.; WARNING!!! This test works only with TMinuit; The TGraph object is created via the interpreter. The user must cast it to a TGraph*. ; FCN=96.6163 FROM MIGRAD STATUS=CONVERGED 62 CALLS 63 TOTAL; EDM=2.07594e-08 STRATEGY= 1 ERROR MATRIX ACCURATE ; EXT PARAMETER STEP FIRST ; NO. NAME VALUE ERROR SIZE DERIVATIVE ; 1 Constant 1.43454e+02 2.29666e+00 9.00732e-03 -6.49594e-05; 2 Mean 1.60911e-02 1.30402e-02 6.28520e-05 3.57224e-03; 3 Sigma 9.87683e-01 9.45637e-03 1.24479e-05 2.14428e-02; ; #include <TCanvas.h>; #include <TGraph.h>; #include <TH1F.h>; #include <TMinuit.h>; #include <TVirtualFitter.h>; ; void fitcont(); {; //be sure default is Minuit since we will use gMinuit; TVirtualFitter::SetDefaultFitter(""Minuit"");; ; TCanvas *c1 = new TCanvas(""c1"");; TH1F *h = new TH1F(""h"",""My histogram"",100,-3,3);; h->FillRandom(""gaus"",6000);; h->Fit(""gaus"");; c1->Update();; ; TCanvas *c2 = new TCanvas(""c2"",""contours"",10,10,600,800);; c2->Divide(1,2);; c2->cd(1);; /*get first contour for parameter 1 versus parameter 2*/; TGraph *gr12 = (TGraph*)gMinuit->Contour(40,1,2);; gr12->Draw(""alp"");; c2->cd(2);; /*Get contour for parameter 0 versus parameter 2 for ERRDEF=2*/; gMinuit->SetErrorDef(4); //note 4 and not 2!; TGraph *gr2 = (TGraph*)gMinuit->Contour(80,0,2);; gr2->SetFillColor(42);; gr2->Draw(""alf"");; /*Get contour for parameter 0 versus parameter 2 for ERRDEF=1*/; gMinuit->SetErrorDef(1);; TGraph *gr1 = (TGraph*)gMinuit->Contour(80,0,2);; gr1->SetFillColor(38);; gr1->Draw(""lf"");; }; h#define h(i)Definition RSha256.hxx:106; TCanvas.h; TGraph.h; TH1F.h; TMinuit.h; gMinuitR__EXTERN",MatchSource.WIKI,doc/master/fitcont_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitcont_8C.html
Integrability,wrap,wrapping," #include <TCanvas.h>; #include <TRandom.h>; #include <TF1Convolution.h>; #include <TF1.h>; #include <TH1F.h>; ; void fitConvolution(); {; // Construction of histogram to fit.; TH1F *h_ExpGauss = new TH1F(""h_ExpGauss"", ""Exponential convoluted by Gaussian"", 100, 0., 5.);; for (int i = 0; i < 1e6; i++) {; // Gives a alpha of -0.3 in the exp.; double x = gRandom->Exp(1. / 0.3);; x += gRandom->Gaus(0., 3.);; // Probability density function of the addition of two variables is the; // convolution of two density functions.; h_ExpGauss->Fill(x);; }; ; TF1Convolution *f_conv = new TF1Convolution(""expo"", ""gaus"", -1, 6, true);; f_conv->SetRange(-1., 6.);; f_conv->SetNofPointsFFT(1000);; TF1 *f = new TF1(""f"", *f_conv, 0., 5., f_conv->GetNpar());; f->SetParameters(1., -0.3, 0., 1.);; ; // Fit.; h_ExpGauss->Fit(""f"");; }; f#define f(i)Definition RSha256.hxx:104; TCanvas.h; TF1Convolution.h; TF1.h; TH1F.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TF1ConvolutionClass wrapping convolution of two functions.Definition TF1Convolution.h:20; TF1Convolution::GetNparInt_t GetNpar() constDefinition TF1Convolution.h:68; TF1Convolution::SetRangevoid SetRange(Double_t a, Double_t b) overrideSet the actual range used for the convolution.Definition TF1Convolution.cxx:452; TF1Convolution::SetNofPointsFFTvoid SetNofPointsFFT(Int_t n)Set the number of points used for the FFT convolution.Definition TF1Convolution.cxx:382; TF11-Dim function classDefinition TF1.h:233; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribut",MatchSource.WIKI,doc/master/fitConvolution_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitConvolution_8C.html
Modifiability,variab,variables,". ROOT: tutorials/fit/fitConvolution.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fitConvolution.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Tutorial for convolution of two functions . ; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 298.12; NDf = 96; Edm = 1.67196e-06; NCalls = 448; p0 = 7.32861 +/- 0.0370492 ; p1 = 0.0733018 +/- 0.00243973 ; p2 = -2.26418 +/- 0.0491372 ; p3 = 1.12808 +/- 0.0628185 ; ; #include <TCanvas.h>; #include <TRandom.h>; #include <TF1Convolution.h>; #include <TF1.h>; #include <TH1F.h>; ; void fitConvolution(); {; // Construction of histogram to fit.; TH1F *h_ExpGauss = new TH1F(""h_ExpGauss"", ""Exponential convoluted by Gaussian"", 100, 0., 5.);; for (int i = 0; i < 1e6; i++) {; // Gives a alpha of -0.3 in the exp.; double x = gRandom->Exp(1. / 0.3);; x += gRandom->Gaus(0., 3.);; // Probability density function of the addition of two variables is the; // convolution of two density functions.; h_ExpGauss->Fill(x);; }; ; TF1Convolution *f_conv = new TF1Convolution(""expo"", ""gaus"", -1, 6, true);; f_conv->SetRange(-1., 6.);; f_conv->SetNofPointsFFT(1000);; TF1 *f = new TF1(""f"", *f_conv, 0., 5., f_conv->GetNpar());; f->SetParameters(1., -0.3, 0., 1.);; ; // Fit.; h_ExpGauss->Fit(""f"");; }; f#define f(i)Definition RSha256.hxx:104; TCanvas.h; TF1Convolution.h; TF1.h; TH1F.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TF1ConvolutionClass wrapping convolution of two functions.Definition TF1Convolution.h:20; TF1Convolution::GetNparInt_t GetNpar() constDefinition TF1Convolution.h:68; TF1Convolution::SetRangevoid SetRange(Double_t a, Double_t b) overrideSet the actual range used for the convolution.Definition TF1Convolution.cxx:452; TF1Convolution::SetNofPointsFFTvoid SetNofPointsFFT(Int_t n)Set the number of points used for the FFT convolution.Definition TF1Convolution.cxx:382; TF11-Dim function classDefinition TF1.h:233; TH",MatchSource.WIKI,doc/master/fitConvolution_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitConvolution_8C.html
Integrability,wrap,wrapping,"h>; 15#include <TF1.h>; 16#include <TH1F.h>; 17 ; 18void fitConvolution(); 19{; 20 // Construction of histogram to fit.; 21 TH1F *h_ExpGauss = new TH1F(""h_ExpGauss"", ""Exponential convoluted by Gaussian"", 100, 0., 5.);; 22 for (int i = 0; i < 1e6; i++) {; 23 // Gives a alpha of -0.3 in the exp.; 24 double x = gRandom->Exp(1. / 0.3);; 25 x += gRandom->Gaus(0., 3.);; 26 // Probability density function of the addition of two variables is the; 27 // convolution of two density functions.; 28 h_ExpGauss->Fill(x);; 29 }; 30 ; 31 TF1Convolution *f_conv = new TF1Convolution(""expo"", ""gaus"", -1, 6, true);; 32 f_conv->SetRange(-1., 6.);; 33 f_conv->SetNofPointsFFT(1000);; 34 TF1 *f = new TF1(""f"", *f_conv, 0., 5., f_conv->GetNpar());; 35 f->SetParameters(1., -0.3, 0., 1.);; 36 ; 37 // Fit.; 38 h_ExpGauss->Fit(""f"");; 39}; f#define f(i)Definition RSha256.hxx:104; TCanvas.h; TF1Convolution.h; TF1.h; TH1F.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TF1ConvolutionClass wrapping convolution of two functions.Definition TF1Convolution.h:20; TF1Convolution::GetNparInt_t GetNpar() constDefinition TF1Convolution.h:68; TF1Convolution::SetRangevoid SetRange(Double_t a, Double_t b) overrideSet the actual range used for the convolution.Definition TF1Convolution.cxx:452; TF1Convolution::SetNofPointsFFTvoid SetNofPointsFFT(Int_t n)Set the number of points used for the FFT convolution.Definition TF1Convolution.cxx:382; TF11-Dim function classDefinition TF1.h:233; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribut",MatchSource.WIKI,doc/master/fitConvolution_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitConvolution_8C_source.html
Modifiability,variab,variables,". ROOT: tutorials/fit/fitConvolution.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fitConvolution.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_fit; 3/// \notebook -js; 4/// Tutorial for convolution of two functions; 5///; 6/// \macro_image; 7/// \macro_output; 8/// \macro_code; 9///; 10/// \author Aurelie Flandi; 11 ; 12#include <TCanvas.h>; 13#include <TRandom.h>; 14#include <TF1Convolution.h>; 15#include <TF1.h>; 16#include <TH1F.h>; 17 ; 18void fitConvolution(); 19{; 20 // Construction of histogram to fit.; 21 TH1F *h_ExpGauss = new TH1F(""h_ExpGauss"", ""Exponential convoluted by Gaussian"", 100, 0., 5.);; 22 for (int i = 0; i < 1e6; i++) {; 23 // Gives a alpha of -0.3 in the exp.; 24 double x = gRandom->Exp(1. / 0.3);; 25 x += gRandom->Gaus(0., 3.);; 26 // Probability density function of the addition of two variables is the; 27 // convolution of two density functions.; 28 h_ExpGauss->Fill(x);; 29 }; 30 ; 31 TF1Convolution *f_conv = new TF1Convolution(""expo"", ""gaus"", -1, 6, true);; 32 f_conv->SetRange(-1., 6.);; 33 f_conv->SetNofPointsFFT(1000);; 34 TF1 *f = new TF1(""f"", *f_conv, 0., 5., f_conv->GetNpar());; 35 f->SetParameters(1., -0.3, 0., 1.);; 36 ; 37 // Fit.; 38 h_ExpGauss->Fit(""f"");; 39}; f#define f(i)Definition RSha256.hxx:104; TCanvas.h; TF1Convolution.h; TF1.h; TH1F.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TF1ConvolutionClass wrapping convolution of two functions.Definition TF1Convolution.h:20; TF1Convolution::GetNparInt_t GetNpar() constDefinition TF1Convolution.h:68; TF1Convolution::SetRangevoid SetRange(Double_t a, Double_t b) overrideSet the actual range used for the convolution.Definition TF1Convolution.cxx:452; TF1Convolution::SetNofPointsFFTvoid SetNofPointsFFT(Int_t n)Set the number of points used for the FFT convolution.Definition TF1Convolution.cxx:382; TF11-Dim function classDefinition TF1.h:233; TH1F1-D histogram with a float per chann",MatchSource.WIKI,doc/master/fitConvolution_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitConvolution_8C_source.html
Modifiability,variab,variables,". ROOT: tutorials/fit/fitConvolution.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; fitConvolution.py File ReferenceTutorials » Fit Tutorials. Detailed Description; Tutorial for convolution of two functions . ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 298.12; NDf = 96; Edm = 1.67196e-06; NCalls = 448; p0 = 7.32861 +/- 0.0370492 ; p1 = 0.0733018 +/- 0.00243973 ; p2 = -2.26418 +/- 0.0491372 ; p3 = 1.12808 +/- 0.0628185 ; ; import ROOT; ; # Construction of histogram to fit.; h_ExpGauss = ROOT.TH1F(""h_ExpGauss"", ""Exponential convoluted by Gaussian"", 100, 0.0, 5.0); for i in range(1000000):; # Gives a alpha of -0.3 in the exp.; x = ROOT.gRandom.Exp(1.0 / 0.3); x += ROOT.gRandom.Gaus(0.0, 3.0); # Probability density function of the addition of two variables is the; # convolution of two density functions.; h_ExpGauss.Fill(x); ; f_conv = ROOT.TF1Convolution(""expo"", ""gaus"", -1, 6, True); f_conv.SetRange(-1.0, 6.0); f_conv.SetNofPointsFFT(1000); f = ROOT.TF1(""f"", f_conv, 0.0, 5.0, f_conv.GetNpar()); f.SetParameters(1.0, -0.3, 0.0, 1.0); ; c1 = ROOT.TCanvas(""c1"", ""c1"", 800, 1000); ; # Fit and draw result of the fit; h_ExpGauss.Fit(""f""); ; c1.SaveAs(""fitConvolution.png""); AuthorJonas Rembser, Aurelie Flandi (C++ version) ; Definition in file fitConvolution.py. tutorialsfitfitConvolution.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/fitConvolution_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitConvolution_8py.html
Modifiability,variab,variables,". ROOT: tutorials/fit/fitConvolution.py Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fitConvolution.py. Go to the documentation of this file. 1## \file; 2## \ingroup tutorial_fit; 3## \notebook; 4## Tutorial for convolution of two functions; 5##; 6## \macro_image; 7## \macro_output; 8## \macro_code; 9##; 10## \author Jonas Rembser, Aurelie Flandi (C++ version); 11 ; 12import ROOT; 13 ; 14# Construction of histogram to fit.; 15h_ExpGauss = ROOT.TH1F(""h_ExpGauss"", ""Exponential convoluted by Gaussian"", 100, 0.0, 5.0); 16for i in range(1000000):; 17 # Gives a alpha of -0.3 in the exp.; 18 x = ROOT.gRandom.Exp(1.0 / 0.3); 19 x += ROOT.gRandom.Gaus(0.0, 3.0); 20 # Probability density function of the addition of two variables is the; 21 # convolution of two density functions.; 22 h_ExpGauss.Fill(x); 23 ; 24f_conv = ROOT.TF1Convolution(""expo"", ""gaus"", -1, 6, True); 25f_conv.SetRange(-1.0, 6.0); 26f_conv.SetNofPointsFFT(1000); 27f = ROOT.TF1(""f"", f_conv, 0.0, 5.0, f_conv.GetNpar()); 28f.SetParameters(1.0, -0.3, 0.0, 1.0); 29 ; 30c1 = ROOT.TCanvas(""c1"", ""c1"", 800, 1000); 31 ; 32# Fit and draw result of the fit; 33h_ExpGauss.Fit(""f""); 34 ; 35c1.SaveAs(""fitConvolution.png""). tutorialsfitfitConvolution.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/fitConvolution_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitConvolution_8py_source.html
Testability,test,tested,"4731 +/- 0.946564 ; p1 = -4.81581 +/- 0.26533 ; ; #include <TH1.h>; #include <TF1.h>; #include <TROOT.h>; ; bool reject;; double fline(double *x, double *par); {; if (reject && x[0] > 2.5 && x[0] < 3.5) {; TF1::RejectPoint();; return 0;; }; return par[0] + par[1]*x[0];; }; ; void fitExclude() {; //Create a source function; TF1 *f1 = new TF1(""f1"",""[0] +[1]*x +gaus(2)"",0,5);; f1->SetParameters(6,-1,5,3,0.2);; // create and fill histogram according to the source function; TH1F *h = new TH1F(""h"",""background + signal"",100,0,5);; h->FillRandom(""f1"",2000);; TF1 *fl = new TF1(""fl"",fline,0,5,2);; fl->SetParameters(2,-1);; //fit only the linear background excluding the signal area; reject = true;; h->Fit(fl,""0"");; reject = false;; //store 2 separate functions for visualization; TF1 *fleft = new TF1(""fleft"",fline,0,2.5,2);; fleft->SetParameters(fl->GetParameters());; h->GetListOfFunctions()->Add(fleft);; gROOT->GetListOfFunctions()->Remove(fleft);; TF1 *fright = new TF1(""fright"",fline,3.5,5,2);; fright->SetParameters(fl->GetParameters());; h->GetListOfFunctions()->Add(fright);; gROOT->GetListOfFunctions()->Remove(fright);; h->Draw();; }; ; h#define h(i)Definition RSha256.hxx:106; TF1.h; TH1.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TF11-Dim function classDefinition TF1.h:233; TF1::RejectPointstatic void RejectPoint(Bool_t reject=kTRUE)Static function to set the global flag to reject points the fgRejectPoint global flag is tested by al...Definition TF1.cxx:3683; TF1::GetParametersvirtual Double_t * GetParameters() constDefinition TF1.h:548; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; xDouble_t x[n]Definition legend1.C:17; f1TF1 * f1Definition legend1.C:11; AuthorRene Brun ; Definition in file fitExclude.C. tutorialsfitfitExclude.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/fitExclude_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitExclude_8C.html
Energy Efficiency,power,power," to signal + background; ; histgen();; ; TFile *f = new TFile(""background.root"");; background = (TH1F*)f->Get(""background""); //pointer used in ftotal; TH1F *result = (TH1F*)f->Get(""result"");; ; TF1 *ftot = new TF1(""ftot"",ftotal,0,10,4);; double norm = result->GetMaximum();; ftot->SetParameters(0.5*norm,5,.2,norm);; ftot->SetParLimits(0,.3*norm,norm);; ; result->Fit(""ftot"",""b"");; }; f#define f(i)Definition RSha256.hxx:104; h#define h(i)Definition RSha256.hxx:106; TF1.h; TFile.h; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; TH1F.h; TAxis::FindBinvirtual Int_t FindBin(Double_t x)Find bin number corresponding to abscissa x.Definition TAxis.cxx:293; TF11-Dim function classDefinition TF1.h:233; TF1::SetParLimitsvirtual void SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax)Set lower and upper limits for parameter ipar.Definition TF1.cxx:3507; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::GetBinContentvirtual Double_t GetBinContent(Int_t bin) constReturn content of bin number bin.Definition TH1.cxx:5061; xDouble_t x[n]Definition legend1.C:17; f1TF1 * f1Definition legend1.C:11; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; AuthorRene Brun ; Definition in file fithist.C. tutorialsfitfithist.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/fithist_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fithist_8C.html
Availability,error,errors,"re the fastest to fit; lf->SetFormula(""hyp5"");; ; double *x=new double[n*10*5];; double *y=new double[n*10];; double *e=new double[n*10];; ; //Create the points and put them into the fitter; for (i=0; i<n; i++){; x[0 + i*5] = randNum.Uniform(-10, 10);; x[1 + i*5] = randNum.Uniform(-10, 10);; x[2 + i*5] = randNum.Uniform(-10, 10);; x[3 + i*5] = randNum.Uniform(-10, 10);; x[4 + i*5] = randNum.Uniform(-10, 10);; e[i] = 0.01;; y[i] = 4*x[0+i*5] + x[1+i*5] + 2*x[2+i*5] + 3*x[3+i*5] + 0.2*x[4+i*5] + randNum.Gaus()*e[i];; }; ; //To avoid copying the data into the fitter, the following function can be used:; lf->AssignData(n, 5, x, y, e);; //A different way to put the points into the fitter would be to use; //the AddPoint function for each point. This way the points are copied and stored; //inside the fitter; ; //Perform the fitting and look at the results; lf->Eval();; TVectorD params;; TVectorD errors;; lf->GetParameters(params);; lf->GetErrors(errors);; for (int i=0; i<6; i++); printf(""par[%d]=%f+-%f\n"", i, params(i), errors(i));; double chisquare=lf->GetChisquare();; printf(""chisquare=%f\n"", chisquare);; ; ; //Now suppose you want to add some more points and see if the parameters will change; for (i=n; i<n*2; i++) {; x[0+i*5] = randNum.Uniform(-10, 10);; x[1+i*5] = randNum.Uniform(-10, 10);; x[2+i*5] = randNum.Uniform(-10, 10);; x[3+i*5] = randNum.Uniform(-10, 10);; x[4+i*5] = randNum.Uniform(-10, 10);; e[i] = 0.01;; y[i] = 4*x[0+i*5] + x[1+i*5] + 2*x[2+i*5] + 3*x[3+i*5] + 0.2*x[4+i*5] + randNum.Gaus()*e[i];; }; ; //Assign the data the same way as before; lf->AssignData(n*2, 5, x, y, e);; lf->Eval();; lf->GetParameters(params);; lf->GetErrors(errors);; printf(""\nMore Points:\n"");; for (int i=0; i<6; i++); printf(""par[%d]=%f+-%f\n"", i, params(i), errors(i));; chisquare=lf->GetChisquare();; printf(""chisquare=%.15f\n"", chisquare);; ; ; //Suppose, you are not satisfied with the result and want to try a different formula; //Without a constant:; //Since the AssignData() funct",MatchSource.WIKI,doc/master/fitLinear2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitLinear2_8C.html
Deployability,release,released," printf(""chisquare=%.15f\n"", chisquare);; ; ; //Suppose, you are not satisfied with the result and want to try a different formula; //Without a constant:; //Since the AssignData() function was used, you don't have to add all points to the fitter again; lf->SetFormula(""x0++x1++x2++x3++x4"");; ; lf->Eval();; lf->GetParameters(params);; lf->GetErrors(errors);; printf(""\nWithout Constant\n"");; for (int i=0; i<5; i++); printf(""par[%d]=%f+-%f\n"", i, params(i), errors(i));; chisquare=lf->GetChisquare();; printf(""chisquare=%f\n"", chisquare);; ; //Now suppose that you want to fix the value of one of the parameters; //Let's fix the first parameter at 4:; lf->SetFormula(""hyp5"");; lf->FixParameter(1, 4);; lf->Eval();; lf->GetParameters(params);; lf->GetErrors(errors);; printf(""\nFixed Constant:\n"");; for (i=0; i<6; i++); printf(""par[%d]=%f+-%f\n"", i, params(i), errors(i));; chisquare=lf->GetChisquare();; printf(""chisquare=%.15f\n"", chisquare);; ; //The fixed parameters can then be released by the ReleaseParameter method; delete lf;; ; }; ; e#define e(i)Definition RSha256.hxx:103; TF1.h; TLinearFitter.h; TRandom.h; TLinearFitterDefinition TLinearFitter.h:153; TLinearFitter::GetChisquarevirtual Double_t GetChisquare()Get the Chisquare.Definition TLinearFitter.cxx:1074; TLinearFitter::GetErrorsvirtual void GetErrors(TVectorD &vpar)Returns parameter errors.Definition TLinearFitter.cxx:1328; TLinearFitter::Evalvirtual Int_t Eval()Perform the fit and evaluate the parameters Returns 0 if the fit is ok, 1 if there are errors.Definition TLinearFitter.cxx:874; TLinearFitter::AssignDatavirtual void AssignData(Int_t npoints, Int_t xncols, Double_t *x, Double_t *y, Double_t *e=nullptr)This function is to use when you already have all the data in arrays and don't want to copy them into...Definition TLinearFitter.cxx:583; TLinearFitter::GetParametersvirtual void GetParameters(TVectorD &vpar)Returns parameter values.Definition TLinearFitter.cxx:1341; TLinearFitter::FixParametervoid FixParameter",MatchSource.WIKI,doc/master/fitLinear2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitLinear2_8C.html
Safety,avoid,avoid,"[1]=4.000000+-1.000000; par[2]=0.999884+-0.000125; par[3]=2.000070+-0.000123; par[4]=2.999910+-0.000127; par[5]=0.199920+-0.000130; chisquare=145.602523231220914; ; #include ""TLinearFitter.h""; #include ""TF1.h""; #include ""TRandom.h""; ; void fitLinear2(); {; int n=100;; int i;; TRandom randNum;; TLinearFitter *lf=new TLinearFitter(5);; ; //The predefined ""hypN"" functions are the fastest to fit; lf->SetFormula(""hyp5"");; ; double *x=new double[n*10*5];; double *y=new double[n*10];; double *e=new double[n*10];; ; //Create the points and put them into the fitter; for (i=0; i<n; i++){; x[0 + i*5] = randNum.Uniform(-10, 10);; x[1 + i*5] = randNum.Uniform(-10, 10);; x[2 + i*5] = randNum.Uniform(-10, 10);; x[3 + i*5] = randNum.Uniform(-10, 10);; x[4 + i*5] = randNum.Uniform(-10, 10);; e[i] = 0.01;; y[i] = 4*x[0+i*5] + x[1+i*5] + 2*x[2+i*5] + 3*x[3+i*5] + 0.2*x[4+i*5] + randNum.Gaus()*e[i];; }; ; //To avoid copying the data into the fitter, the following function can be used:; lf->AssignData(n, 5, x, y, e);; //A different way to put the points into the fitter would be to use; //the AddPoint function for each point. This way the points are copied and stored; //inside the fitter; ; //Perform the fitting and look at the results; lf->Eval();; TVectorD params;; TVectorD errors;; lf->GetParameters(params);; lf->GetErrors(errors);; for (int i=0; i<6; i++); printf(""par[%d]=%f+-%f\n"", i, params(i), errors(i));; double chisquare=lf->GetChisquare();; printf(""chisquare=%f\n"", chisquare);; ; ; //Now suppose you want to add some more points and see if the parameters will change; for (i=n; i<n*2; i++) {; x[0+i*5] = randNum.Uniform(-10, 10);; x[1+i*5] = randNum.Uniform(-10, 10);; x[2+i*5] = randNum.Uniform(-10, 10);; x[3+i*5] = randNum.Uniform(-10, 10);; x[4+i*5] = randNum.Uniform(-10, 10);; e[i] = 0.01;; y[i] = 4*x[0+i*5] + x[1+i*5] + 2*x[2+i*5] + 3*x[3+i*5] + 0.2*x[4+i*5] + randNum.Gaus()*e[i];; }; ; //Assign the data the same way as before; lf->AssignData(n*2, 5, x, y, e);; lf->Eval();; lf-",MatchSource.WIKI,doc/master/fitLinear2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitLinear2_8C.html
Availability,robust,robust,". ROOT: tutorials/fit/fitLinearRobust.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fitLinearRobust.C File ReferenceTutorials » Fit Tutorials. Detailed Description; This tutorial shows how the least trimmed squares regression, included in the TLinearFitter class, can be used for fitting in cases when the data contains outliers. ; Here the fitting is done via the TGraph::Fit function with option ""rob"": If you want to use the linear fitter directly for computing the robust fitting coefficients, just use the TLinearFitter::EvalRobust function instead of TLinearFitter::Eval. ; Ordinary least squares:; ****************************************; Minimizer is Linear / Migrad; Chi2 = 606758; NDf = 246; p0 = 15.724 +/- 0.0887641 ; p1 = -0.835912 +/- 0.14096 ; p2 = -3.40616 +/- 0.0607296 ; p3 = 4.82569 +/- 0.0602628 ; Resistant Least trimmed squares fit:; ****************************************; Minimizer is Linear / Robust (h=0.75); Chi2 = 634792; NDf = 246; p0 = 1.00953; p1 = 1.71148; p2 = 2.97937; p3 = 4.07752; ; #include ""TRandom.h""; #include ""TGraphErrors.h""; #include ""TF1.h""; #include ""TCanvas.h""; #include ""TLegend.h""; ; void fitLinearRobust(); {; //First generate a dataset, where 20% of points are spoiled by large; //errors; int npoints = 250;; int fraction = int(0.8*npoints);; double *x = new double[npoints];; double *y = new double[npoints];; double *e = new double[npoints];; TRandom r;; int i;; for (i=0; i<fraction; i++){; //the good part of the sample; x[i]=r.Uniform(-2, 2);; e[i]=1;; y[i]=1 + 2*x[i] + 3*x[i]*x[i] + 4*x[i]*x[i]*x[i] + e[i]*r.Gaus();; }; for (i=fraction; i<npoints; i++){; //the bad part of the sample; x[i]=r.Uniform(-1, 1);; e[i]=1;; y[i] = 1 + 2*x[i] + 3*x[i]*x[i] + 4*x[i]*x[i]*x[i] + r.Landau(10, 5);; }; ; TGraphErrors *grr = new TGraphErrors(npoints, x, y, nullptr, e);; grr->SetMinimum(-30);; grr->SetMaximum(80);; TF1 *ffit1 = new TF1(""ffit1"", ""pol3"", -5, 5);; TF1 *ffit2 = new TF1(""ffit2"", ""pol3",MatchSource.WIKI,doc/master/fitLinearRobust_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitLinearRobust_8C.html
Availability,error,errors,"tting 3 TGraphErrors with linear functions"");; myc->SetGrid();; ; //Generate points along a 3rd degree polynomial:; makePoints(n, x, y, e, 3);; TGraphErrors *gre3 = new TGraphErrors(n, x, y, nullptr, e);; gre3->Draw(""a*"");; //Fit the graph with the predefined ""pol3"" function; gre3->Fit(""pol3"");; //Access the fit results; TF1 *f3 = gre3->GetFunction(""pol3"");; f3->SetLineWidth(1);; ; //Generate points along a sin(x)+sin(2x) function; makePoints(n, x, y, e, 2);; TGraphErrors *gre2=new TGraphErrors(n, x, y, nullptr, e);; gre2->Draw(""*same"");; gre2->SetMarkerColor(kBlue);; gre2->SetLineColor(kBlue);; //The fitting function can be predefined and passed to the Fit function; //The ""++"" mean that the linear fitter should be used, and the following; //formula is equivalent to ""[0]*sin(x) + [1]*sin(2*x)""; //A function, defined this way, is in no way different from any other TF1,; //it can be evaluated, drawn, you can get its parameters, etc.; //The fit result (parameter values, parameter errors, chisquare, etc) are; //written into the fitting function.; TF1 *f2 = new TF1(""f2"", ""sin(x) ++ sin(2*x)"", -2, 2);; gre2->Fit(f2);; f2 = gre2->GetFunction(""f2"");; f2->SetLineColor(kBlue);; f2->SetLineWidth(1);; ; //Generate points along a -2+exp(-x) function; makePoints(n, x, y, e, 4);; TGraphErrors *gre4=new TGraphErrors(n, x, y, nullptr, e);; gre4->Draw(""*same"");; gre4->SetMarkerColor(kRed);; gre4->SetLineColor(kRed);; //If you don't want to define the function, you can just pass the string; //with the formula:; gre4->Fit(""1 ++ exp(-x)"");; //Access the fit results:; TF1 *f4 = gre4->GetFunction(""1 ++ exp(-x)"");; f4->SetName(""f4"");; f4->SetLineColor(kRed);; f4->SetLineWidth(1);; ; TLegend *leg = new TLegend(0.3, 0.7, 0.65, 0.9);; leg->AddEntry(gre3, "" -7 + 2*x*x + x*x*x"", ""p"");; leg->AddEntry(gre2, ""sin(x) + sin(2*x)"", ""p"");; leg->AddEntry(gre4, ""-2 + exp(-x)"", ""p"");; leg->Draw();; ; }; ; void makePoints(int n, double *x, double *y, double *e, int p); {; int i;; TRandom r;; ; if (p==2) {;",MatchSource.WIKI,doc/master/fitLinear_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitLinear_8C.html
Energy Efficiency,power,power,"2VirtualXProxy.cxx:168; TGraphErrors.h; TLegend.h; TMath.h; TRandom.h; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraph::GetFunctionTF1 * GetFunction(const char *name) constReturn pointer to function with name.Definition TGraph.cxx:1416; TGraph::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)Fit this graph with function with name fname.Definition TGraph.cxx:1254; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TNamed::SetNamevirtual void SetName(const char *name)Set the name of the TNamed.Definition TNamed.cxx:140; TPad::SetGridvoid SetGrid(Int_t valuex=1, Int_t valuey=1) overrideDefinition TPad.h:335; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; leglegDefinition legend1.C:34; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; AuthorAnna Kreshuk ; Definition in file fitLinear.C. tutorialsfitfitLinear.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/fitLinear_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitLinear_8C.html
Availability,error,errors,". ROOT: tutorials/fit/fitMultiGraph.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fitMultiGraph.C File ReferenceTutorials » Fit Tutorials. Detailed Description; fitting a parabola to a multigraph of 3 partly overlapping graphs with different errors . ; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 95.1374; NDf = 87; Edm = 8.90994e-21; NCalls = 55; p0 = 3.21134 +/- 0.428055 ; p1 = 1.87952 +/- 0.248404 ; p2 = 1.00914 +/- 0.0349228 ; ; #include ""TMultiGraph.h""; #include ""TRandom.h""; #include ""TF1.h""; #include ""TGraphErrors.h""; #include ""TCanvas.h""; #include ""TMath.h""; ; void fitMultiGraph(); {; int n = 30;; double *xvalues1 = new double[n];; double *xvalues2 = new double[n];; double *xvalues3 = new double[n];; double *yvalues1 = new double[n];; double *yvalues2 = new double[n];; double *yvalues3 = new double[n];; double *evalues1 = new double[n];; double *evalues2 = new double[n];; double *evalues3 = new double[n];; ; //generate the data for the graphs; TRandom r;; int i;; for (i=0; i<n; i++) {; xvalues1[i] = r.Uniform(0.1, 5);; xvalues2[i] = r.Uniform(3, 8);; xvalues3[i] = r.Uniform(9, 15);; yvalues1[i] = 3 + 2*xvalues1[i] + xvalues1[i]*xvalues1[i] + r.Gaus();; yvalues2[i] = 3 + 2*xvalues2[i] + xvalues2[i]*xvalues2[i] + r.Gaus()*10;; evalues1[i] = 1;; evalues2[i] = 10;; evalues3[i] = 20;; yvalues3[i] = 3 + 2*xvalues3[i] + xvalues3[i]*xvalues3[i] + r.Gaus()*20;; }; ; //create the graphs and set their drawing options; TGraphErrors *gr1 = new TGraphErrors(n, xvalues1, yvalues1, nullptr, evalues1);; TGraphErrors *gr2 = new TGraphErrors(n, xvalues2, yvalues2, nullptr, evalues2);; TGraphErrors *gr3 = new TGraphErrors(n, xvalues3, yvalues3, nullptr, evalues3);; gr1->SetLineColor(kRed);; gr2->SetLineColor(kBlue);; gr2->SetMarkerStyle(24);; gr2->SetMarkerSize(0.3);; gr3->SetLineColor(kGreen);; gr3->SetMarkerStyle(24);; gr3->SetMarkerSize(0.3);; ; //add the graphs to the multigraph; TMultiGrap",MatchSource.WIKI,doc/master/fitMultiGraph_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitMultiGraph_8C.html
Security,access,access,"+ 2*xvalues3[i] + xvalues3[i]*xvalues3[i] + r.Gaus()*20;; }; ; //create the graphs and set their drawing options; TGraphErrors *gr1 = new TGraphErrors(n, xvalues1, yvalues1, nullptr, evalues1);; TGraphErrors *gr2 = new TGraphErrors(n, xvalues2, yvalues2, nullptr, evalues2);; TGraphErrors *gr3 = new TGraphErrors(n, xvalues3, yvalues3, nullptr, evalues3);; gr1->SetLineColor(kRed);; gr2->SetLineColor(kBlue);; gr2->SetMarkerStyle(24);; gr2->SetMarkerSize(0.3);; gr3->SetLineColor(kGreen);; gr3->SetMarkerStyle(24);; gr3->SetMarkerSize(0.3);; ; //add the graphs to the multigraph; TMultiGraph *mg=new TMultiGraph(""mg"",; ""TMultiGraph of 3 TGraphErrors"");; mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; ; TCanvas *myc = new TCanvas(""myc"",; ""Fitting a MultiGraph of 3 TGraphErrors"");; myc->SetGrid();; ; mg->Draw(""ap"");; ; //fit; mg->Fit(""pol2"", ""F"");; ; //access to the fit function; TF1 *fpol = mg->GetFunction(""pol2"");; fpol->SetLineWidth(1);; ; }; ; void fitminuit(); {; int n = 30;; double *xvalues1 = new double[n];; double *xvalues2 = new double[n];; double *xvalues3 = new double[n];; double *yvalues1 = new double[n];; double *yvalues2 = new double[n];; double *yvalues3 = new double[n];; double *evalues1 = new double[n];; double *evalues2 = new double[n];; double *evalues3 = new double[n];; double *xtotal = new double[n*3];; double *ytotal = new double[n*3];; double *etotal = new double[n*3];; ; TRandom r;; int i;; for (i=0; i<n; i++) {; xvalues1[i] = r.Uniform(-3, -1);; xvalues2[i] = r.Uniform(-1, 1);; xvalues3[i] = r.Uniform(1, 3);; yvalues1[i] = TMath::Gaus(xvalues1[i], 0, 1);; yvalues2[i] = TMath::Gaus(xvalues2[i], 0, 1);; evalues1[i] = 0.00001;; evalues2[i] = 0.00001;; evalues3[i] = 0.00001;; yvalues3[i] = TMath::Gaus(xvalues3[i], 0, 1);; }; for (i=0; i<n; i++); {xtotal[i]=xvalues1[i]; ytotal[i]=yvalues1[i]; etotal[i]=0.00001;}; for (i=n; i<2*n; i++); {xtotal[i] = xvalues2[i-n]; ytotal[i]=yvalues2[i-n]; etotal[i]=0.00001;}; for (i=2*n; i<3*n; i++); {xtotal[i] = xvalues3[i-2*n",MatchSource.WIKI,doc/master/fitMultiGraph_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitMultiGraph_8C.html
Availability,avail,available,"..........; // 1) :; TF1NormSum *fnorm_exp_cb = new TF1NormSum(f_cb, f_exp, nsig, nbkg);; // 4) :; ; TF1 *f_sum = new TF1(""fsum"", *fnorm_exp_cb, -5., 5., fnorm_exp_cb->GetNpar());; ; // III.:; f_sum->SetParameters(fnorm_exp_cb->GetParameters().data());; f_sum->SetParName(1, ""NBackground"");; f_sum->SetParName(0, ""NSignal"");; for (int i = 2; i < f_sum->GetNpar(); ++i); f_sum->SetParName(i, fnorm_exp_cb->GetParName(i));; ; // GENERATE HISTOGRAM TO FIT ..............................................................; TStopwatch w;; w.Start();; TH1D *h_sum = new TH1D(""h_ExpCB"", ""Exponential Bkg + CrystalBall function"", nBins, -5., 5.);; h_sum->FillRandom(""fsum"", nEvents);; printf(""Time to generate %d events: "", nEvents);; w.Print();; ; // need to scale histogram with width since we are fitting a density; h_sum->Sumw2();; h_sum->Scale(1., ""width"");; ; // fit - use Minuit2 if available; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""Minuit2"");; new TCanvas(""Fit"", ""Fit"", 800, 1000);; // do a least-square fit of the spectrum; auto result = h_sum->Fit(""fsum"", ""SQ"");; result->Print();; h_sum->Draw();; printf(""Time to fit using ROOT TF1Normsum: "");; w.Print();; ; // test if parameters are fine; std::vector<double> pref = {nsig, nbkg, signal_mean};; for (unsigned int i = 0; i < pref.size(); ++i) {; if (!TMath::AreEqualAbs(pref[i], f_sum->GetParameter(i), f_sum->GetParError(i) * 10.)); Error(""testFitNormSum"", ""Difference found in fitted %s - difference is %g sigma"", f_sum->GetParName(i),; (f_sum->GetParameter(i) - pref[i]) / f_sum->GetParError(i));; }; ; gStyle->SetOptStat(0);; // add parameters; auto t1 = new TLatex(; -2.5, 300000, TString::Format(""%s = %8.0f #pm %4.0f"", ""NSignal"", f_sum->GetParameter(0), f_sum->GetParError(0)));; auto t2 = new TLatex(; -2.5, 270000, TString::Format(""%s = %8.0f #pm %4.0f"", ""Nbackgr"", f_sum->GetParameter(1), f_sum->GetParError(1)));; t1->Draw();; t2->Draw();; }; MinimizerOptions.h; TCanvas.h; Errorvoid Error(const char *location, const char *msg",MatchSource.WIKI,doc/master/fitNormSum_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitNormSum_8C.html
Testability,test,test,"->GetParameters().data());; f_sum->SetParName(1, ""NBackground"");; f_sum->SetParName(0, ""NSignal"");; for (int i = 2; i < f_sum->GetNpar(); ++i); f_sum->SetParName(i, fnorm_exp_cb->GetParName(i));; ; // GENERATE HISTOGRAM TO FIT ..............................................................; TStopwatch w;; w.Start();; TH1D *h_sum = new TH1D(""h_ExpCB"", ""Exponential Bkg + CrystalBall function"", nBins, -5., 5.);; h_sum->FillRandom(""fsum"", nEvents);; printf(""Time to generate %d events: "", nEvents);; w.Print();; ; // need to scale histogram with width since we are fitting a density; h_sum->Sumw2();; h_sum->Scale(1., ""width"");; ; // fit - use Minuit2 if available; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""Minuit2"");; new TCanvas(""Fit"", ""Fit"", 800, 1000);; // do a least-square fit of the spectrum; auto result = h_sum->Fit(""fsum"", ""SQ"");; result->Print();; h_sum->Draw();; printf(""Time to fit using ROOT TF1Normsum: "");; w.Print();; ; // test if parameters are fine; std::vector<double> pref = {nsig, nbkg, signal_mean};; for (unsigned int i = 0; i < pref.size(); ++i) {; if (!TMath::AreEqualAbs(pref[i], f_sum->GetParameter(i), f_sum->GetParError(i) * 10.)); Error(""testFitNormSum"", ""Difference found in fitted %s - difference is %g sigma"", f_sum->GetParName(i),; (f_sum->GetParameter(i) - pref[i]) / f_sum->GetParError(i));; }; ; gStyle->SetOptStat(0);; // add parameters; auto t1 = new TLatex(; -2.5, 300000, TString::Format(""%s = %8.0f #pm %4.0f"", ""NSignal"", f_sum->GetParameter(0), f_sum->GetParError(0)));; auto t2 = new TLatex(; -2.5, 270000, TString::Format(""%s = %8.0f #pm %4.0f"", ""Nbackgr"", f_sum->GetParameter(1), f_sum->GetParError(1)));; t1->Draw();; t2->Draw();; }; MinimizerOptions.h; TCanvas.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TF1NormSum.h; TF1.h; TFitResult.h; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; resultOption_t Option_t TPoint TPoint const char GetTextMagnitu",MatchSource.WIKI,doc/master/fitNormSum_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitNormSum_8C.html
Availability,avail,available," nbkg);; 52 // 4) :; 53 ; 54 TF1 *f_sum = new TF1(""fsum"", *fnorm_exp_cb, -5., 5., fnorm_exp_cb->GetNpar());; 55 ; 56 // III.:; 57 f_sum->SetParameters(fnorm_exp_cb->GetParameters().data());; 58 f_sum->SetParName(1, ""NBackground"");; 59 f_sum->SetParName(0, ""NSignal"");; 60 for (int i = 2; i < f_sum->GetNpar(); ++i); 61 f_sum->SetParName(i, fnorm_exp_cb->GetParName(i));; 62 ; 63 // GENERATE HISTOGRAM TO FIT ..............................................................; 64 TStopwatch w;; 65 w.Start();; 66 TH1D *h_sum = new TH1D(""h_ExpCB"", ""Exponential Bkg + CrystalBall function"", nBins, -5., 5.);; 67 h_sum->FillRandom(""fsum"", nEvents);; 68 printf(""Time to generate %d events: "", nEvents);; 69 w.Print();; 70 ; 71 // need to scale histogram with width since we are fitting a density; 72 h_sum->Sumw2();; 73 h_sum->Scale(1., ""width"");; 74 ; 75 // fit - use Minuit2 if available; 76 ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""Minuit2"");; 77 new TCanvas(""Fit"", ""Fit"", 800, 1000);; 78 // do a least-square fit of the spectrum; 79 auto result = h_sum->Fit(""fsum"", ""SQ"");; 80 result->Print();; 81 h_sum->Draw();; 82 printf(""Time to fit using ROOT TF1Normsum: "");; 83 w.Print();; 84 ; 85 // test if parameters are fine; 86 std::vector<double> pref = {nsig, nbkg, signal_mean};; 87 for (unsigned int i = 0; i < pref.size(); ++i) {; 88 if (!TMath::AreEqualAbs(pref[i], f_sum->GetParameter(i), f_sum->GetParError(i) * 10.)); 89 Error(""testFitNormSum"", ""Difference found in fitted %s - difference is %g sigma"", f_sum->GetParName(i),; 90 (f_sum->GetParameter(i) - pref[i]) / f_sum->GetParError(i));; 91 }; 92 ; 93 gStyle->SetOptStat(0);; 94 // add parameters; 95 auto t1 = new TLatex(; 96 -2.5, 300000, TString::Format(""%s = %8.0f #pm %4.0f"", ""NSignal"", f_sum->GetParameter(0), f_sum->GetParError(0)));; 97 auto t2 = new TLatex(; 98 -2.5, 270000, TString::Format(""%s = %8.0f #pm %4.0f"", ""Nbackgr"", f_sum->GetParameter(1), f_sum->GetParError(1)));; 99 t1->Draw();; 100 t2->Draw();; 101}; MinimizerOptio",MatchSource.WIKI,doc/master/fitNormSum_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitNormSum_8C_source.html
Testability,test,test,"rName(0, ""NSignal"");; 60 for (int i = 2; i < f_sum->GetNpar(); ++i); 61 f_sum->SetParName(i, fnorm_exp_cb->GetParName(i));; 62 ; 63 // GENERATE HISTOGRAM TO FIT ..............................................................; 64 TStopwatch w;; 65 w.Start();; 66 TH1D *h_sum = new TH1D(""h_ExpCB"", ""Exponential Bkg + CrystalBall function"", nBins, -5., 5.);; 67 h_sum->FillRandom(""fsum"", nEvents);; 68 printf(""Time to generate %d events: "", nEvents);; 69 w.Print();; 70 ; 71 // need to scale histogram with width since we are fitting a density; 72 h_sum->Sumw2();; 73 h_sum->Scale(1., ""width"");; 74 ; 75 // fit - use Minuit2 if available; 76 ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""Minuit2"");; 77 new TCanvas(""Fit"", ""Fit"", 800, 1000);; 78 // do a least-square fit of the spectrum; 79 auto result = h_sum->Fit(""fsum"", ""SQ"");; 80 result->Print();; 81 h_sum->Draw();; 82 printf(""Time to fit using ROOT TF1Normsum: "");; 83 w.Print();; 84 ; 85 // test if parameters are fine; 86 std::vector<double> pref = {nsig, nbkg, signal_mean};; 87 for (unsigned int i = 0; i < pref.size(); ++i) {; 88 if (!TMath::AreEqualAbs(pref[i], f_sum->GetParameter(i), f_sum->GetParError(i) * 10.)); 89 Error(""testFitNormSum"", ""Difference found in fitted %s - difference is %g sigma"", f_sum->GetParName(i),; 90 (f_sum->GetParameter(i) - pref[i]) / f_sum->GetParError(i));; 91 }; 92 ; 93 gStyle->SetOptStat(0);; 94 // add parameters; 95 auto t1 = new TLatex(; 96 -2.5, 300000, TString::Format(""%s = %8.0f #pm %4.0f"", ""NSignal"", f_sum->GetParameter(0), f_sum->GetParError(0)));; 97 auto t2 = new TLatex(; 98 -2.5, 270000, TString::Format(""%s = %8.0f #pm %4.0f"", ""Nbackgr"", f_sum->GetParameter(1), f_sum->GetParError(1)));; 99 t1->Draw();; 100 t2->Draw();; 101}; MinimizerOptions.h; TCanvas.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TF1NormSum.h; TF1.h; TFitResult.h; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; resultOption_t",MatchSource.WIKI,doc/master/fitNormSum_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitNormSum_8C_source.html
Availability,avail,available,"meter_values.data()); # Note: in the C++ tutorial, the parameter value sync is done in one line with:; # ```C++; # f_sum->SetParameters(fnorm_exp_cb->GetParameters().data());; # ```; # However, TF1NormSum::GetParameters() returns an std::vector by value, which; # doesn't survive long enough in Python. That's why we have to explicitly; # assign it to a variable first and can't use a temporary.; ; f_sum.SetParName(1, ""NBackground""); f_sum.SetParName(0, ""NSignal""); for i in range(2, f_sum.GetNpar()):; f_sum.SetParName(i, fnorm_exp_cb.GetParName(i)); ; # GENERATE HISTOGRAM TO FIT ..............................................................; w = ROOT.TStopwatch(); w.Start(); h_sum = ROOT.TH1D(""h_ExpCB"", ""Exponential Bkg + CrystalBall function"", nBins, -5.0, 5.0); h_sum.FillRandom(""fsum"", nEvents); print(""Time to generate {0} events: "".format(nEvents)); w.Print(); ; # need to scale histogram with width since we are fitting a density; h_sum.Sumw2(); h_sum.Scale(1.0, ""width""); ; # fit - use Minuit2 if available; ROOT.Math.MinimizerOptions.SetDefaultMinimizer(""Minuit2""); c1 = ROOT.TCanvas(""Fit"", ""Fit"", 800, 1000); # do a least-square fit of the spectrum; result = h_sum.Fit(""fsum"", ""SQ""); result.Print(); h_sum.Draw(); print(""Time to fit using ROOT TF1Normsum: ""); w.Print(); ; # test if parameters are fine; for i, pref in enumerate([nsig, nbkg, signal_mean]):; if not ROOT.TMath.AreEqualAbs(pref, f_sum.GetParameter(i), f_sum.GetParError(i) * 10.0):; ROOT.Error(; ""testFitNormSum"",; ""Difference found in fitted {0} - difference is {1:.2f} sigma"".format(; f_sum.GetParName(i), (f_sum.GetParameter(i) - pref) / f_sum.GetParError(i); ),; ); ; ROOT.gStyle.SetOptStat(0); # add parameters; t1 = ROOT.TLatex(-2.5, 300000, ""NSignal = {0:g} #pm {1:g}"".format(f_sum.GetParameter(0), f_sum.GetParError(0))); t2 = ROOT.TLatex(-2.5, 270000, ""Nbackgr = {0:g} #pm {1:g}"".format(f_sum.GetParameter(1), f_sum.GetParError(1))); t1.Draw(); t2.Draw(); ; c1.SaveAs(""fitNormSum.png""); formatOption_t Option_t",MatchSource.WIKI,doc/master/fitNormSum_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitNormSum_8py.html
Modifiability,variab,variable,"using ROOT TF1Normsum: ; ; import ROOT; ; nsig = 50000; nbkg = 1000000; nEvents = nsig + nbkg; nBins = 1000; ; signal_mean = 3.0; f_cb = ROOT.TF1(""MyCrystalBall"", ""crystalball"", -5.0, 5.0); f_exp = ROOT.TF1(""MyExponential"", ""expo"", -5.0, 5.0); ; # I.:; f_exp.SetParameters(1.0, -0.3); f_cb.SetParameters(1, signal_mean, 0.3, 2, 1.5); ; # CONSTRUCTION OF THE TF1NORMSUM OBJECT ........................................; # 1) :; fnorm_exp_cb = ROOT.TF1NormSum(f_cb, f_exp, nsig, nbkg); # 4) :; ; f_sum = ROOT.TF1(""fsum"", fnorm_exp_cb, -5.0, 5.0, fnorm_exp_cb.GetNpar()); ; # III.:; parameter_values = fnorm_exp_cb.GetParameters(); f_sum.SetParameters(parameter_values.data()); # Note: in the C++ tutorial, the parameter value sync is done in one line with:; # ```C++; # f_sum->SetParameters(fnorm_exp_cb->GetParameters().data());; # ```; # However, TF1NormSum::GetParameters() returns an std::vector by value, which; # doesn't survive long enough in Python. That's why we have to explicitly; # assign it to a variable first and can't use a temporary.; ; f_sum.SetParName(1, ""NBackground""); f_sum.SetParName(0, ""NSignal""); for i in range(2, f_sum.GetNpar()):; f_sum.SetParName(i, fnorm_exp_cb.GetParName(i)); ; # GENERATE HISTOGRAM TO FIT ..............................................................; w = ROOT.TStopwatch(); w.Start(); h_sum = ROOT.TH1D(""h_ExpCB"", ""Exponential Bkg + CrystalBall function"", nBins, -5.0, 5.0); h_sum.FillRandom(""fsum"", nEvents); print(""Time to generate {0} events: "".format(nEvents)); w.Print(); ; # need to scale histogram with width since we are fitting a density; h_sum.Sumw2(); h_sum.Scale(1.0, ""width""); ; # fit - use Minuit2 if available; ROOT.Math.MinimizerOptions.SetDefaultMinimizer(""Minuit2""); c1 = ROOT.TCanvas(""Fit"", ""Fit"", 800, 1000); # do a least-square fit of the spectrum; result = h_sum.Fit(""fsum"", ""SQ""); result.Print(); h_sum.Draw(); print(""Time to fit using ROOT TF1Normsum: ""); w.Print(); ; # test if parameters are fine; for i, pref in enumerate([nsi",MatchSource.WIKI,doc/master/fitNormSum_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitNormSum_8py.html
Testability,test,test,"tly; # assign it to a variable first and can't use a temporary.; ; f_sum.SetParName(1, ""NBackground""); f_sum.SetParName(0, ""NSignal""); for i in range(2, f_sum.GetNpar()):; f_sum.SetParName(i, fnorm_exp_cb.GetParName(i)); ; # GENERATE HISTOGRAM TO FIT ..............................................................; w = ROOT.TStopwatch(); w.Start(); h_sum = ROOT.TH1D(""h_ExpCB"", ""Exponential Bkg + CrystalBall function"", nBins, -5.0, 5.0); h_sum.FillRandom(""fsum"", nEvents); print(""Time to generate {0} events: "".format(nEvents)); w.Print(); ; # need to scale histogram with width since we are fitting a density; h_sum.Sumw2(); h_sum.Scale(1.0, ""width""); ; # fit - use Minuit2 if available; ROOT.Math.MinimizerOptions.SetDefaultMinimizer(""Minuit2""); c1 = ROOT.TCanvas(""Fit"", ""Fit"", 800, 1000); # do a least-square fit of the spectrum; result = h_sum.Fit(""fsum"", ""SQ""); result.Print(); h_sum.Draw(); print(""Time to fit using ROOT TF1Normsum: ""); w.Print(); ; # test if parameters are fine; for i, pref in enumerate([nsig, nbkg, signal_mean]):; if not ROOT.TMath.AreEqualAbs(pref, f_sum.GetParameter(i), f_sum.GetParError(i) * 10.0):; ROOT.Error(; ""testFitNormSum"",; ""Difference found in fitted {0} - difference is {1:.2f} sigma"".format(; f_sum.GetParName(i), (f_sum.GetParameter(i) - pref) / f_sum.GetParError(i); ),; ); ; ROOT.gStyle.SetOptStat(0); # add parameters; t1 = ROOT.TLatex(-2.5, 300000, ""NSignal = {0:g} #pm {1:g}"".format(f_sum.GetParameter(0), f_sum.GetParError(0))); t2 = ROOT.TLatex(-2.5, 270000, ""Nbackgr = {0:g} #pm {1:g}"".format(f_sum.GetParameter(1), f_sum.GetParError(1))); t1.Draw(); t2.Draw(); ; c1.SaveAs(""fitNormSum.png""); formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetS",MatchSource.WIKI,doc/master/fitNormSum_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitNormSum_8py.html
Availability,avail,available,"e parameter value sync is done in one line with:; 49# ```C++; 50# f_sum->SetParameters(fnorm_exp_cb->GetParameters().data());; 51# ```; 52# However, TF1NormSum::GetParameters() returns an std::vector by value, which; 53# doesn't survive long enough in Python. That's why we have to explicitly; 54# assign it to a variable first and can't use a temporary.; 55 ; 56f_sum.SetParName(1, ""NBackground""); 57f_sum.SetParName(0, ""NSignal""); 58for i in range(2, f_sum.GetNpar()):; 59 f_sum.SetParName(i, fnorm_exp_cb.GetParName(i)); 60 ; 61# GENERATE HISTOGRAM TO FIT ..............................................................; 62w = ROOT.TStopwatch(); 63w.Start(); 64h_sum = ROOT.TH1D(""h_ExpCB"", ""Exponential Bkg + CrystalBall function"", nBins, -5.0, 5.0); 65h_sum.FillRandom(""fsum"", nEvents); 66print(""Time to generate {0} events: "".format(nEvents)); 67w.Print(); 68 ; 69# need to scale histogram with width since we are fitting a density; 70h_sum.Sumw2(); 71h_sum.Scale(1.0, ""width""); 72 ; 73# fit - use Minuit2 if available; 74ROOT.Math.MinimizerOptions.SetDefaultMinimizer(""Minuit2""); 75c1 = ROOT.TCanvas(""Fit"", ""Fit"", 800, 1000); 76# do a least-square fit of the spectrum; 77result = h_sum.Fit(""fsum"", ""SQ""); 78result.Print(); 79h_sum.Draw(); 80print(""Time to fit using ROOT TF1Normsum: ""); 81w.Print(); 82 ; 83# test if parameters are fine; 84for i, pref in enumerate([nsig, nbkg, signal_mean]):; 85 if not ROOT.TMath.AreEqualAbs(pref, f_sum.GetParameter(i), f_sum.GetParError(i) * 10.0):; 86 ROOT.Error(; 87 ""testFitNormSum"",; 88 ""Difference found in fitted {0} - difference is {1:.2f} sigma"".format(; 89 f_sum.GetParName(i), (f_sum.GetParameter(i) - pref) / f_sum.GetParError(i); 90 ),; 91 ); 92 ; 93ROOT.gStyle.SetOptStat(0); 94# add parameters; 95t1 = ROOT.TLatex(-2.5, 300000, ""NSignal = {0:g} #pm {1:g}"".format(f_sum.GetParameter(0), f_sum.GetParError(0))); 96t2 = ROOT.TLatex(-2.5, 270000, ""Nbackgr = {0:g} #pm {1:g}"".format(f_sum.GetParameter(1), f_sum.GetParError(1))); 97t1.Draw(); 98t2.Dr",MatchSource.WIKI,doc/master/fitNormSum_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitNormSum_8py_source.html
Modifiability,variab,variable," = 1000000; 27nEvents = nsig + nbkg; 28nBins = 1000; 29 ; 30signal_mean = 3.0; 31f_cb = ROOT.TF1(""MyCrystalBall"", ""crystalball"", -5.0, 5.0); 32f_exp = ROOT.TF1(""MyExponential"", ""expo"", -5.0, 5.0); 33 ; 34# I.:; 35f_exp.SetParameters(1.0, -0.3); 36f_cb.SetParameters(1, signal_mean, 0.3, 2, 1.5); 37 ; 38# CONSTRUCTION OF THE TF1NORMSUM OBJECT ........................................; 39# 1) :; 40fnorm_exp_cb = ROOT.TF1NormSum(f_cb, f_exp, nsig, nbkg); 41# 4) :; 42 ; 43f_sum = ROOT.TF1(""fsum"", fnorm_exp_cb, -5.0, 5.0, fnorm_exp_cb.GetNpar()); 44 ; 45# III.:; 46parameter_values = fnorm_exp_cb.GetParameters(); 47f_sum.SetParameters(parameter_values.data()); 48# Note: in the C++ tutorial, the parameter value sync is done in one line with:; 49# ```C++; 50# f_sum->SetParameters(fnorm_exp_cb->GetParameters().data());; 51# ```; 52# However, TF1NormSum::GetParameters() returns an std::vector by value, which; 53# doesn't survive long enough in Python. That's why we have to explicitly; 54# assign it to a variable first and can't use a temporary.; 55 ; 56f_sum.SetParName(1, ""NBackground""); 57f_sum.SetParName(0, ""NSignal""); 58for i in range(2, f_sum.GetNpar()):; 59 f_sum.SetParName(i, fnorm_exp_cb.GetParName(i)); 60 ; 61# GENERATE HISTOGRAM TO FIT ..............................................................; 62w = ROOT.TStopwatch(); 63w.Start(); 64h_sum = ROOT.TH1D(""h_ExpCB"", ""Exponential Bkg + CrystalBall function"", nBins, -5.0, 5.0); 65h_sum.FillRandom(""fsum"", nEvents); 66print(""Time to generate {0} events: "".format(nEvents)); 67w.Print(); 68 ; 69# need to scale histogram with width since we are fitting a density; 70h_sum.Sumw2(); 71h_sum.Scale(1.0, ""width""); 72 ; 73# fit - use Minuit2 if available; 74ROOT.Math.MinimizerOptions.SetDefaultMinimizer(""Minuit2""); 75c1 = ROOT.TCanvas(""Fit"", ""Fit"", 800, 1000); 76# do a least-square fit of the spectrum; 77result = h_sum.Fit(""fsum"", ""SQ""); 78result.Print(); 79h_sum.Draw(); 80print(""Time to fit using ROOT TF1Normsum: ""); 81w.Print(); 82",MatchSource.WIKI,doc/master/fitNormSum_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitNormSum_8py_source.html
Testability,test,test," 55 ; 56f_sum.SetParName(1, ""NBackground""); 57f_sum.SetParName(0, ""NSignal""); 58for i in range(2, f_sum.GetNpar()):; 59 f_sum.SetParName(i, fnorm_exp_cb.GetParName(i)); 60 ; 61# GENERATE HISTOGRAM TO FIT ..............................................................; 62w = ROOT.TStopwatch(); 63w.Start(); 64h_sum = ROOT.TH1D(""h_ExpCB"", ""Exponential Bkg + CrystalBall function"", nBins, -5.0, 5.0); 65h_sum.FillRandom(""fsum"", nEvents); 66print(""Time to generate {0} events: "".format(nEvents)); 67w.Print(); 68 ; 69# need to scale histogram with width since we are fitting a density; 70h_sum.Sumw2(); 71h_sum.Scale(1.0, ""width""); 72 ; 73# fit - use Minuit2 if available; 74ROOT.Math.MinimizerOptions.SetDefaultMinimizer(""Minuit2""); 75c1 = ROOT.TCanvas(""Fit"", ""Fit"", 800, 1000); 76# do a least-square fit of the spectrum; 77result = h_sum.Fit(""fsum"", ""SQ""); 78result.Print(); 79h_sum.Draw(); 80print(""Time to fit using ROOT TF1Normsum: ""); 81w.Print(); 82 ; 83# test if parameters are fine; 84for i, pref in enumerate([nsig, nbkg, signal_mean]):; 85 if not ROOT.TMath.AreEqualAbs(pref, f_sum.GetParameter(i), f_sum.GetParError(i) * 10.0):; 86 ROOT.Error(; 87 ""testFitNormSum"",; 88 ""Difference found in fitted {0} - difference is {1:.2f} sigma"".format(; 89 f_sum.GetParName(i), (f_sum.GetParameter(i) - pref) / f_sum.GetParError(i); 90 ),; 91 ); 92 ; 93ROOT.gStyle.SetOptStat(0); 94# add parameters; 95t1 = ROOT.TLatex(-2.5, 300000, ""NSignal = {0:g} #pm {1:g}"".format(f_sum.GetParameter(0), f_sum.GetParError(0))); 96t2 = ROOT.TLatex(-2.5, 270000, ""Nbackgr = {0:g} #pm {1:g}"".format(f_sum.GetParameter(1), f_sum.GetParError(1))); 97t1.Draw(); 98t2.Draw(); 99 ; 100c1.SaveAs(""fitNormSum.png""); formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValue",MatchSource.WIKI,doc/master/fitNormSum_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitNormSum_8py_source.html
Integrability,interface,interface,"tSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; fsOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize fsDefinition TGWin32VirtualXProxy.cxx:102; TRecorder.h; TSystemFile.h; TSystem.h; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TRecorderClass provides direct recorder/replayer interface for a user.Definition TRecorder.h:266; TRecorder::kReplaying@ kReplayingDefinition TRecorder.h:296; TSystem::GetPathInfoint GetPathInfo(const char *path, Long_t *id, Long_t *size, Long_t *flags, Long_t *modtime)Get info about a file: id, size, flags, modification time.Definition TSystem.cxx:1398; TSystem::Sleepvirtual void Sleep(UInt_t milliSec)Sleep milliSec milli seconds.Definition TSystem.cxx:437; TSystem::ProcessEventsvirtual Bool_t ProcessEvents()Process pending events (GUI, timers, sockets).Definition TSystem.cxx:416; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; FileStat_tDefinition TSystem.h:122; AuthorDavid Gonzalez Maline ; Definition in file fitpanel_playback.C. tutorialsfitfitpanel_playback.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/fitpanel__playback_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitpanel__playback_8C.html
Testability,test,test,". ROOT: tutorials/fit/fitpanel_playback.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fitpanel_playback.C File ReferenceTutorials » Fit Tutorials. Detailed Description; This file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit. ; This implies trying the Set Parameters dialog and the Advanced one.; At every operation, a png file will be saved. These files will be later on compared with some references values, to have an estimation of the goodness of the test.; ; #include ""TSystem.h""; #include ""TSystemFile.h""; #include ""TRecorder.h""; #include ""Riostream.h""; ; int file_size(const char *filename); {; FileStat_t fs;; gSystem->GetPathInfo(filename, fs);; return (int)fs.fSize;; }; ; void fitpanel_playback(); {; auto * r = new TRecorder();; r->Replay(""http://root.cern/files/fitpanel_playback.root"");; ; // wait for the recorder to finish the replay; while (r->GetState() == TRecorder::kReplaying) {; gSystem->ProcessEvents();; gSystem->Sleep(1);; }; ; int Step_Err = 100;; int Step1_Ref = 15691;; int Step2_Ref = 15691;; int Step3_Ref = 17632;; int Step4_Ref = 12305;; int Step5_Ref = 11668;; ; int Step1_Size = file_size(""Step1.png"");; int Step2_Size = file_size(""Step2.png"");; int Step3_Size = file_size(""Step3.png"");; int Step4_Size = file_size(""Step4.png"");; int Step5_Size = file_size(""Step5.png"");; ; ; std::cout << ""**********************************************************************"" << std::endl;; std::cout << ""* Report of fitpanel_playback.C *"" << std::endl;; std::cout << ""**********************************************************************"" << std::endl;; ; if (TMath::Abs(Step1_Ref-Step1_Size) <= Step_Err) {; std::cout << ""Step1: ............................................................ OK"" << std::endl;; } else {; std::cout << ""Step1: ........................................................ FAILED"" <<",MatchSource.WIKI,doc/master/fitpanel__playback_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/fitpanel__playback_8C.html
Availability,error,errors,"nclude <iostream>; 36#include <iomanip>; 37 ; 38namespace ROOT {; 39 ; 40 namespace Fit {; 41 ; 42 ; 43const int gInitialResultStatus = -99; // use this special convention to flag it when printing result; 44 ; 45FitResult::FitResult() :; 46 fValid(false), fNormalized(false), fNFree(0), fNdf(0), fNCalls(0),; 47 fStatus(-1), fCovStatus(0), fVal(0), fEdm(-1), fChi2(-1); 48{; 49 // Default constructor implementation.; 50}; 51 ; 52FitResult::FitResult(const FitConfig & fconfig) :; 53 fValid(false),; 54 fNormalized(false),; 55 fNFree(0),; 56 fNdf(0),; 57 fNCalls(0),; 58 fStatus(gInitialResultStatus),; 59 fCovStatus(0),; 60 fVal(0),; 61 fEdm(-1),; 62 fChi2(-1),; 63 fFitFunc(nullptr),; 64 fParams(std::vector<double>( fconfig.NPar() ) ),; 65 fErrors(std::vector<double>( fconfig.NPar() ) ),; 66 fParNames(std::vector<std::string> ( fconfig.NPar() ) ); 67{; 68 // create a Fit result from a fit config (i.e. with initial parameter values; 69 // and errors equal to step values; 70 // The model function is NULL in this case; 71 ; 72 // set minimizer type and algorithm; 73 fMinimType = fconfig.MinimizerType();; 74 // append algorithm name for minimizer that support it; 75 if ( (fMinimType.find(""Fumili"") == std::string::npos) &&; 76 (fMinimType.find(""GSLMultiFit"") == std::string::npos); 77 ) {; 78 if (!fconfig.MinimizerAlgoType().empty()) fMinimType += "" / "" + fconfig.MinimizerAlgoType();; 79 }; 80 ; 81 // get parameter values and errors (step sizes); 82 unsigned int npar = fconfig.NPar();; 83 for (unsigned int i = 0; i < npar; ++i ) {; 84 const ParameterSettings & par = fconfig.ParSettings(i);; 85 fParams[i] = par.Value();; 86 fErrors[i] = par.StepSize();; 87 fParNames[i] = par.Name();; 88 if (par.IsFixed() ) fFixedParams[i] = true;; 89 else fNFree++;; 90 if (par.IsBound() ) {; 91 double lower = (par.HasLowerLimit()) ? par.LowerLimit() : - std::numeric_limits<double>::infinity() ;; 92 double upper = (par.HasUpperLimit()) ? par.UpperLimit() : std::numeric_limits<double>::infinity() ;;",MatchSource.WIKI,doc/master/FitResult_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitResult_8cxx_source.html
Deployability,configurat,configuration,"t result from config - nfree "" << fNFree << std::endl;; 98}; 99 ; 100void FitResult::FillResult(const std::shared_ptr<ROOT::Math::Minimizer> & min, const FitConfig & fconfig, const std::shared_ptr<IModelFunction> & func,; 101 bool isValid, unsigned int sizeOfData, int fitType, const ROOT::Math::IMultiGenFunction * chi2func, unsigned int ncalls ); 102{; 103 // Fill the FitResult after minimization using result from Minimizers; 104 ; 105 // minimizer must exist; 106 assert(min);; 107 ; 108 fValid = isValid;; 109 fNFree= min->NFree();; 110 fNCalls = min->NCalls();; 111 fStatus = min->Status();; 112 fCovStatus= min->CovMatrixStatus();; 113 fVal = min->MinValue();; 114 fEdm = min->Edm();; 115 ; 116 fMinimizer= min;; 117 fFitFunc = func;; 118 ; 119 fMinimType = fconfig.MinimizerName();; 120 ; 121 // replace ncalls if minimizer does not support it (they are taken then from the FitMethodFunction); 122 if (fNCalls == 0) fNCalls = ncalls;; 123 ; 124 const unsigned int npar = min->NDim();; 125 if (npar == 0) return;; 126 ; 127 if (min->X() ); 128 fParams = std::vector<double>(min->X(), min->X() + npar);; 129 else {; 130 // case minimizer does not provide minimum values (it failed) take from configuration; 131 fParams.resize(npar);; 132 for (unsigned int i = 0; i < npar; ++i ) {; 133 fParams[i] = ( fconfig.ParSettings(i).Value() );; 134 }; 135 }; 136 ; 137 if (sizeOfData > min->NFree() ) fNdf = sizeOfData - min->NFree();; 138 ; 139 ; 140 // set right parameters in function (in case minimizer did not do before); 141 // do also when fit is not valid; 142 if (func ) {; 143 // I think we can avoid cloning the model function; 144 //fFitFunc = dynamic_cast<IModelFunction *>( func->Clone() );; 145 //assert(fFitFunc);; 146 fFitFunc->SetParameters(&fParams.front());; 147 }; 148 else {; 149 // when no fFitFunc is present take parameters from FitConfig; 150 fParNames.resize( npar );; 151 for (unsigned int i = 0; i < npar; ++i ) {; 152 fParNames[i] = fconfig.ParSettings(i).Name();; 153 }; ",MatchSource.WIKI,doc/master/FitResult_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitResult_8cxx_source.html
Integrability,wrap,wrap,"ttings::LowerLimitdouble LowerLimit() constreturn lower limit valueDefinition ParameterSettings.h:94; ROOT::Fit::ParameterSettings::Nameconst std::string & Name() constreturn nameDefinition ParameterSettings.h:108; ROOT::Fit::ParameterSettings::HasLowerLimitbool HasLowerLimit() constcheck if parameter has lower limitDefinition ParameterSettings.h:100; ROOT::Fit::ParameterSettings::Valuedouble Value() constreturn parameter valueDefinition ParameterSettings.h:90; ROOT::Fit::ParameterSettings::StepSizedouble StepSize() constreturn step sizeDefinition ParameterSettings.h:92; ROOT::Fit::ParameterSettings::UpperLimitdouble UpperLimit() constreturn upper limit valueDefinition ParameterSettings.h:96; ROOT::Fit::ParameterSettings::IsBoundbool IsBound() constcheck if is boundDefinition ParameterSettings.h:104; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::OneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parametric function in one dimensional one.Definition OneDimFunctionAdapter.h:213; ROOT::Math::RichardsonDerivatorUser class for calculating the derivatives of a function.Definition RichardsonDerivator.h:55; double; ROOT::Math::chisquared_cdf_cdouble chisquared_cdf_c(double x, double r, double x0=0)Complement of the cumulative distribution function of the distribution with degrees of freedom (upp...Definition ProbFuncMathCore.cxx:57; ROOT::Math::normal_quantiledouble normal_quantile(double z, double sigma)Inverse ( ) of the cumulative distribution function of the lower tail of the normal (Gaussian) distri...Definition QuantFuncMathCore.cxx:134; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; HFit::FitTFitResultPtr Fit(FitObject *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)Definition HFitImpl.cxx:133; ROOT::Fit::gInitialResultStatusconst int gInitial",MatchSource.WIKI,doc/master/FitResult_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitResult_8cxx_source.html
Modifiability,config,config,"ath.h""; 30#include ""Math/RichardsonDerivator.h""; 31#include ""Math/Error.h""; 32 ; 33#include <cassert>; 34#include <cmath>; 35#include <iostream>; 36#include <iomanip>; 37 ; 38namespace ROOT {; 39 ; 40 namespace Fit {; 41 ; 42 ; 43const int gInitialResultStatus = -99; // use this special convention to flag it when printing result; 44 ; 45FitResult::FitResult() :; 46 fValid(false), fNormalized(false), fNFree(0), fNdf(0), fNCalls(0),; 47 fStatus(-1), fCovStatus(0), fVal(0), fEdm(-1), fChi2(-1); 48{; 49 // Default constructor implementation.; 50}; 51 ; 52FitResult::FitResult(const FitConfig & fconfig) :; 53 fValid(false),; 54 fNormalized(false),; 55 fNFree(0),; 56 fNdf(0),; 57 fNCalls(0),; 58 fStatus(gInitialResultStatus),; 59 fCovStatus(0),; 60 fVal(0),; 61 fEdm(-1),; 62 fChi2(-1),; 63 fFitFunc(nullptr),; 64 fParams(std::vector<double>( fconfig.NPar() ) ),; 65 fErrors(std::vector<double>( fconfig.NPar() ) ),; 66 fParNames(std::vector<std::string> ( fconfig.NPar() ) ); 67{; 68 // create a Fit result from a fit config (i.e. with initial parameter values; 69 // and errors equal to step values; 70 // The model function is NULL in this case; 71 ; 72 // set minimizer type and algorithm; 73 fMinimType = fconfig.MinimizerType();; 74 // append algorithm name for minimizer that support it; 75 if ( (fMinimType.find(""Fumili"") == std::string::npos) &&; 76 (fMinimType.find(""GSLMultiFit"") == std::string::npos); 77 ) {; 78 if (!fconfig.MinimizerAlgoType().empty()) fMinimType += "" / "" + fconfig.MinimizerAlgoType();; 79 }; 80 ; 81 // get parameter values and errors (step sizes); 82 unsigned int npar = fconfig.NPar();; 83 for (unsigned int i = 0; i < npar; ++i ) {; 84 const ParameterSettings & par = fconfig.ParSettings(i);; 85 fParams[i] = par.Value();; 86 fErrors[i] = par.StepSize();; 87 fParNames[i] = par.Name();; 88 if (par.IsFixed() ) fFixedParams[i] = true;; 89 else fNFree++;; 90 if (par.IsBound() ) {; 91 double lower = (par.HasLowerLimit()) ? par.LowerLimit() : - std::numeric_limit",MatchSource.WIKI,doc/master/FitResult_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitResult_8cxx_source.html
Performance,perform,performed,"finition FitConfig.h:192; ROOT::Fit::FitConfig::NParunsigned int NPar() constnumber of parameters settingsDefinition FitConfig.h:96; ROOT::Fit::FitConfig::MinimizerNamestd::string MinimizerName() constreturn Minimizer full name (type / algorithm)Definition FitConfig.cxx:239; ROOT::Fit::FitConfig::MinimizerTypeconst std::string & MinimizerType() constreturn type of minimizer packageDefinition FitConfig.h:187; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitResult::fGlobalCCstd::vector< double > fGlobalCCglobal Correlation coefficientDefinition FitResult.h:363; ROOT::Fit::FitResult::fNFreeunsigned int fNFreenumber of fit free parameters (total parameters are in size of parameter vector)Definition FitResult.h:345; ROOT::Fit::FitResult::Updatebool Update(const std::shared_ptr< ROOT::Math::Minimizer > &min, const ROOT::Fit::FitConfig &fconfig, bool isValid, unsigned int ncalls=0)Update the fit result with a new minimization status To be run only if same fit is performed with sam...Definition FitResult.cxx:224; ROOT::Fit::FitResult::fBoundParamsstd::map< unsigned int, unsigned int > fBoundParamslist of limited parametersDefinition FitResult.h:358; ROOT::Fit::FitResult::FittedBinDataconst BinData * FittedBinData() constreturn BinData used in the fit (return a nullptr in case a different fit is done or the data are not ...Definition FitResult.cxx:631; ROOT::Fit::FitResult::FillResultvoid FillResult(const std::shared_ptr< ROOT::Math::Minimizer > &min, const FitConfig &fconfig, const std::shared_ptr< IModelFunction > &f, bool isValid, unsigned int sizeOfData=0, int fitType=1, const ROOT::Math::IMultiGenFunction *chi2func=nullptr, unsigned int ncalls=0)Fill the fit result from a Minimizer instance after fitting Run also Minos if requested from the conf...Definition FitResult.cxx:100; ROOT::Fit::FitResult::UpperErrordouble UpperErro",MatchSource.WIKI,doc/master/FitResult_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitResult_8cxx_source.html
Safety,avoid,avoid,"ls = min->NCalls();; 111 fStatus = min->Status();; 112 fCovStatus= min->CovMatrixStatus();; 113 fVal = min->MinValue();; 114 fEdm = min->Edm();; 115 ; 116 fMinimizer= min;; 117 fFitFunc = func;; 118 ; 119 fMinimType = fconfig.MinimizerName();; 120 ; 121 // replace ncalls if minimizer does not support it (they are taken then from the FitMethodFunction); 122 if (fNCalls == 0) fNCalls = ncalls;; 123 ; 124 const unsigned int npar = min->NDim();; 125 if (npar == 0) return;; 126 ; 127 if (min->X() ); 128 fParams = std::vector<double>(min->X(), min->X() + npar);; 129 else {; 130 // case minimizer does not provide minimum values (it failed) take from configuration; 131 fParams.resize(npar);; 132 for (unsigned int i = 0; i < npar; ++i ) {; 133 fParams[i] = ( fconfig.ParSettings(i).Value() );; 134 }; 135 }; 136 ; 137 if (sizeOfData > min->NFree() ) fNdf = sizeOfData - min->NFree();; 138 ; 139 ; 140 // set right parameters in function (in case minimizer did not do before); 141 // do also when fit is not valid; 142 if (func ) {; 143 // I think we can avoid cloning the model function; 144 //fFitFunc = dynamic_cast<IModelFunction *>( func->Clone() );; 145 //assert(fFitFunc);; 146 fFitFunc->SetParameters(&fParams.front());; 147 }; 148 else {; 149 // when no fFitFunc is present take parameters from FitConfig; 150 fParNames.resize( npar );; 151 for (unsigned int i = 0; i < npar; ++i ) {; 152 fParNames[i] = fconfig.ParSettings(i).Name();; 153 }; 154 }; 155 ; 156 ; 157 // check for fixed or limited parameters; 158 unsigned int nfree = 0;; 159 if (!fParamBounds.empty()) fParamBounds.clear();; 160 for (unsigned int ipar = 0; ipar < npar; ++ipar) {; 161 const ParameterSettings & par = fconfig.ParSettings(ipar);; 162 if (par.IsFixed() ) fFixedParams[ipar] = true;; 163 else nfree++;; 164 if (par.IsBound() ) {; 165 double lower = (par.HasLowerLimit()) ? par.LowerLimit() : - std::numeric_limits<double>::infinity() ;; 166 double upper = (par.HasUpperLimit()) ? par.UpperLimit() : std::numeric_l",MatchSource.WIKI,doc/master/FitResult_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitResult_8cxx_source.html
Testability,assert,assert,"g.NPar();; 83 for (unsigned int i = 0; i < npar; ++i ) {; 84 const ParameterSettings & par = fconfig.ParSettings(i);; 85 fParams[i] = par.Value();; 86 fErrors[i] = par.StepSize();; 87 fParNames[i] = par.Name();; 88 if (par.IsFixed() ) fFixedParams[i] = true;; 89 else fNFree++;; 90 if (par.IsBound() ) {; 91 double lower = (par.HasLowerLimit()) ? par.LowerLimit() : - std::numeric_limits<double>::infinity() ;; 92 double upper = (par.HasUpperLimit()) ? par.UpperLimit() : std::numeric_limits<double>::infinity() ;; 93 fBoundParams[i] = fParamBounds.size();; 94 fParamBounds.push_back(std::make_pair(lower,upper));; 95 }; 96 }; 97 std::cout << ""create fit result from config - nfree "" << fNFree << std::endl;; 98}; 99 ; 100void FitResult::FillResult(const std::shared_ptr<ROOT::Math::Minimizer> & min, const FitConfig & fconfig, const std::shared_ptr<IModelFunction> & func,; 101 bool isValid, unsigned int sizeOfData, int fitType, const ROOT::Math::IMultiGenFunction * chi2func, unsigned int ncalls ); 102{; 103 // Fill the FitResult after minimization using result from Minimizers; 104 ; 105 // minimizer must exist; 106 assert(min);; 107 ; 108 fValid = isValid;; 109 fNFree= min->NFree();; 110 fNCalls = min->NCalls();; 111 fStatus = min->Status();; 112 fCovStatus= min->CovMatrixStatus();; 113 fVal = min->MinValue();; 114 fEdm = min->Edm();; 115 ; 116 fMinimizer= min;; 117 fFitFunc = func;; 118 ; 119 fMinimType = fconfig.MinimizerName();; 120 ; 121 // replace ncalls if minimizer does not support it (they are taken then from the FitMethodFunction); 122 if (fNCalls == 0) fNCalls = ncalls;; 123 ; 124 const unsigned int npar = min->NDim();; 125 if (npar == 0) return;; 126 ; 127 if (min->X() ); 128 fParams = std::vector<double>(min->X(), min->X() + npar);; 129 else {; 130 // case minimizer does not provide minimum values (it failed) take from configuration; 131 fParams.resize(npar);; 132 for (unsigned int i = 0; i < npar; ++i ) {; 133 fParams[i] = ( fconfig.ParSettings(i).Value() );; 134 }",MatchSource.WIKI,doc/master/FitResult_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitResult_8cxx_source.html
Usability,clear,clear," from configuration; 131 fParams.resize(npar);; 132 for (unsigned int i = 0; i < npar; ++i ) {; 133 fParams[i] = ( fconfig.ParSettings(i).Value() );; 134 }; 135 }; 136 ; 137 if (sizeOfData > min->NFree() ) fNdf = sizeOfData - min->NFree();; 138 ; 139 ; 140 // set right parameters in function (in case minimizer did not do before); 141 // do also when fit is not valid; 142 if (func ) {; 143 // I think we can avoid cloning the model function; 144 //fFitFunc = dynamic_cast<IModelFunction *>( func->Clone() );; 145 //assert(fFitFunc);; 146 fFitFunc->SetParameters(&fParams.front());; 147 }; 148 else {; 149 // when no fFitFunc is present take parameters from FitConfig; 150 fParNames.resize( npar );; 151 for (unsigned int i = 0; i < npar; ++i ) {; 152 fParNames[i] = fconfig.ParSettings(i).Name();; 153 }; 154 }; 155 ; 156 ; 157 // check for fixed or limited parameters; 158 unsigned int nfree = 0;; 159 if (!fParamBounds.empty()) fParamBounds.clear();; 160 for (unsigned int ipar = 0; ipar < npar; ++ipar) {; 161 const ParameterSettings & par = fconfig.ParSettings(ipar);; 162 if (par.IsFixed() ) fFixedParams[ipar] = true;; 163 else nfree++;; 164 if (par.IsBound() ) {; 165 double lower = (par.HasLowerLimit()) ? par.LowerLimit() : - std::numeric_limits<double>::infinity() ;; 166 double upper = (par.HasUpperLimit()) ? par.UpperLimit() : std::numeric_limits<double>::infinity() ;; 167 fBoundParams[ipar] = fParamBounds.size();; 168 fParamBounds.push_back(std::make_pair(lower,upper));; 169 }; 170 }; 171 // check if nfree (from FitConfig) and fNFree (from minimizer) are consistent; 172 if (nfree != fNFree ) {; 173 MATH_ERROR_MSG(""FitResult"",""FitConfiguration and Minimizer result are not consistent"");; 174 std::cout << ""Number of free parameters from FitConfig = "" << nfree << std::endl;; 175 std::cout << ""Number of free parameters from Minimizer = "" << fNFree << std::endl;; 176 }; 177 ; 178 // if flag is binned compute a chi2 when a chi2 function is given; 179 if (fitType == 1) {; 180 if ",MatchSource.WIKI,doc/master/FitResult_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitResult_8cxx_source.html
Availability,error,error,". ROOT: math/mathcore/inc/Fit/FitResult.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. FitResult.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Author: L. Moneta Wed Aug 30 11:05:34 2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class FitResult; 12 ; 13#ifndef ROOT_Fit_FitResult; 14#define ROOT_Fit_FitResult; 15 ; 16#include ""Math/IFunctionfwd.h""; 17#include ""Math/IParamFunctionfwd.h""; 18 ; 19#include <vector>; 20#include <map>; 21#include <string>; 22#include <cmath>; 23#include <memory>; 24 ; 25namespace ROOT {; 26 ; 27 namespace Math {; 28 class Minimizer;; 29 }; 30 ; 31 ; 32 namespace Fit {; 33 ; 34 class FitConfig;; 35 class FitData;; 36 class BinData;; 37 ; 38//___________________________________________________________________________________; 39/**; 40 class containing the result of the fit and all the related information; 41 (fitted parameter values, error, covariance matrix and minimizer result information); 42 Contains a pointer also to the fitted (model) function, modified with the fit parameter values.; 43 When the fit is valid, it is constructed from a Minimizer and a model function pointer; 44 ; 45 @ingroup FitMain; 46*/; 47class FitResult {; 48 ; 49public:; 50 ; 51 typedef ROOT::Math::IParamMultiFunction IModelFunction;; 52 ; 53 /**; 54 Default constructor for an empty (non valid) fit result; 55 */; 56 FitResult ();; 57 ; 58 /**; 59 Constructor from a fit-config for a dummy fit; 60 (e.g. when only one fcn evaluation is done); 61 */; 62 FitResult (const FitConfig & fconfig);; 63 ; 64 // default copy constructor and assignment can be used; 65 ; 66 /**; 67 Destructor; 68 */; 69 virtual ~FitResult () {}; 70 ; 71 ; 72public:; 73 ; 74 /**; 75 Fill the fit result from a M",MatchSource.WIKI,doc/master/FitResult_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitResult_8h_source.html
Deployability,configurat,configuration,"parameter values, error, covariance matrix and minimizer result information); 42 Contains a pointer also to the fitted (model) function, modified with the fit parameter values.; 43 When the fit is valid, it is constructed from a Minimizer and a model function pointer; 44 ; 45 @ingroup FitMain; 46*/; 47class FitResult {; 48 ; 49public:; 50 ; 51 typedef ROOT::Math::IParamMultiFunction IModelFunction;; 52 ; 53 /**; 54 Default constructor for an empty (non valid) fit result; 55 */; 56 FitResult ();; 57 ; 58 /**; 59 Constructor from a fit-config for a dummy fit; 60 (e.g. when only one fcn evaluation is done); 61 */; 62 FitResult (const FitConfig & fconfig);; 63 ; 64 // default copy constructor and assignment can be used; 65 ; 66 /**; 67 Destructor; 68 */; 69 virtual ~FitResult () {}; 70 ; 71 ; 72public:; 73 ; 74 /**; 75 Fill the fit result from a Minimizer instance after fitting; 76 Run also Minos if requested from the configuration; 77 */; 78 void FillResult(const std::shared_ptr<ROOT::Math::Minimizer> & min, const FitConfig & fconfig, const std::shared_ptr<IModelFunction> & f,; 79 bool isValid, unsigned int sizeOfData = 0, int fitType = 1, const ROOT::Math::IMultiGenFunction *chi2func = nullptr, unsigned int ncalls = 0);; 80 ; 81 ; 82 /**; 83 Update the fit result with a new minimization status; 84 To be run only if same fit is performed with same configuration; 85 Note that in this case MINOS is not re-run. If one wants to run also MINOS; 86 a new result must be created; 87 */; 88 bool Update(const std::shared_ptr<ROOT::Math::Minimizer> & min, const ROOT::Fit::FitConfig & fconfig, bool isValid, unsigned int ncalls = 0);; 89 ; 90 /** minimization quantities **/; 91 ; 92 /// minimizer type; 93 const std::string & MinimizerType() const { return fMinimType; }; 94 ; 95 /**; 96 True if fit successful, otherwise false.; 97 A fit is considered successful if the minimizer succeeded in finding the; 98 minimum. It could happen that subsequent operations like error analysis (e.g.",MatchSource.WIKI,doc/master/FitResult_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitResult_8h_source.html
Energy Efficiency,allocate,allocates,"nst;; 207 ; 208 /// parameter global correlation coefficient; 209 double GlobalCC(unsigned int i) const {; 210 return (i < fGlobalCC.size() ) ? fGlobalCC[i] : -1;; 211 }; 212 ; 213 ; 214 /// retrieve covariance matrix element; 215 double CovMatrix (unsigned int i, unsigned int j) const {; 216 if ( i >= fErrors.size() || j >= fErrors.size() ) return 0;; 217 if (fCovMatrix.empty()) return 0; // no matrix is available in case of non-valid fits; 218 if ( j < i ); 219 return fCovMatrix[j + i* (i+1) / 2];; 220 else; 221 return fCovMatrix[i + j* (j+1) / 2];; 222 }; 223 ; 224 /// retrieve correlation elements; 225 double Correlation(unsigned int i, unsigned int j ) const {; 226 if ( i >= fErrors.size() || j >= fErrors.size() ) return 0;; 227 if (fCovMatrix.empty()) return 0; // no matrix is available in case of non-valid fits; 228 double tmp = CovMatrix(i,i)*CovMatrix(j,j);; 229 return ( tmp > 0) ? CovMatrix(i,j)/ std::sqrt(tmp) : 0;; 230 }; 231 ; 232 /// fill covariance matrix elements using a generic matrix class implementing operator(i,j); 233 /// the matrix must be previously allocates with right size (npar * npar); 234 template<class Matrix>; 235 void GetCovarianceMatrix(Matrix & mat) const {; 236 unsigned int npar = fErrors.size();; 237 if (fCovMatrix.size() != npar*(npar+1)/2 ) return; // do nothing; 238 for (unsigned int i = 0; i< npar; ++i) {; 239 for (unsigned int j = 0; j<=i; ++j) {; 240 mat(i,j) = fCovMatrix[j + i*(i+1)/2 ];; 241 if (i != j) mat(j,i) = mat(i,j);; 242 }; 243 }; 244 }; 245 ; 246 /// fill a correlation matrix elements using a generic symmetric matrix class implementing operator(i,j); 247 /// the matrix must be previously allocates with right size (npar * npar); 248 template<class Matrix>; 249 void GetCorrelationMatrix(Matrix & mat) const {; 250 unsigned int npar = fErrors.size();; 251 if (fCovMatrix.size() != npar*(npar+1)/2) return; // do nothing; 252 for (unsigned int i = 0; i< npar; ++i) {; 253 for (unsigned int j = 0; j<=i; ++j) {; 254 double tm",MatchSource.WIKI,doc/master/FitResult_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitResult_8h_source.html
Modifiability,config,config,"r class FitResult; 12 ; 13#ifndef ROOT_Fit_FitResult; 14#define ROOT_Fit_FitResult; 15 ; 16#include ""Math/IFunctionfwd.h""; 17#include ""Math/IParamFunctionfwd.h""; 18 ; 19#include <vector>; 20#include <map>; 21#include <string>; 22#include <cmath>; 23#include <memory>; 24 ; 25namespace ROOT {; 26 ; 27 namespace Math {; 28 class Minimizer;; 29 }; 30 ; 31 ; 32 namespace Fit {; 33 ; 34 class FitConfig;; 35 class FitData;; 36 class BinData;; 37 ; 38//___________________________________________________________________________________; 39/**; 40 class containing the result of the fit and all the related information; 41 (fitted parameter values, error, covariance matrix and minimizer result information); 42 Contains a pointer also to the fitted (model) function, modified with the fit parameter values.; 43 When the fit is valid, it is constructed from a Minimizer and a model function pointer; 44 ; 45 @ingroup FitMain; 46*/; 47class FitResult {; 48 ; 49public:; 50 ; 51 typedef ROOT::Math::IParamMultiFunction IModelFunction;; 52 ; 53 /**; 54 Default constructor for an empty (non valid) fit result; 55 */; 56 FitResult ();; 57 ; 58 /**; 59 Constructor from a fit-config for a dummy fit; 60 (e.g. when only one fcn evaluation is done); 61 */; 62 FitResult (const FitConfig & fconfig);; 63 ; 64 // default copy constructor and assignment can be used; 65 ; 66 /**; 67 Destructor; 68 */; 69 virtual ~FitResult () {}; 70 ; 71 ; 72public:; 73 ; 74 /**; 75 Fill the fit result from a Minimizer instance after fitting; 76 Run also Minos if requested from the configuration; 77 */; 78 void FillResult(const std::shared_ptr<ROOT::Math::Minimizer> & min, const FitConfig & fconfig, const std::shared_ptr<IModelFunction> & f,; 79 bool isValid, unsigned int sizeOfData = 0, int fitType = 1, const ROOT::Math::IMultiGenFunction *chi2func = nullptr, unsigned int ncalls = 0);; 80 ; 81 ; 82 /**; 83 Update the fit result with a new minimization status; 84 To be run only if same fit is performed with same config",MatchSource.WIKI,doc/master/FitResult_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitResult_8h_source.html
Performance,perform,performed,"parameter values, error, covariance matrix and minimizer result information); 42 Contains a pointer also to the fitted (model) function, modified with the fit parameter values.; 43 When the fit is valid, it is constructed from a Minimizer and a model function pointer; 44 ; 45 @ingroup FitMain; 46*/; 47class FitResult {; 48 ; 49public:; 50 ; 51 typedef ROOT::Math::IParamMultiFunction IModelFunction;; 52 ; 53 /**; 54 Default constructor for an empty (non valid) fit result; 55 */; 56 FitResult ();; 57 ; 58 /**; 59 Constructor from a fit-config for a dummy fit; 60 (e.g. when only one fcn evaluation is done); 61 */; 62 FitResult (const FitConfig & fconfig);; 63 ; 64 // default copy constructor and assignment can be used; 65 ; 66 /**; 67 Destructor; 68 */; 69 virtual ~FitResult () {}; 70 ; 71 ; 72public:; 73 ; 74 /**; 75 Fill the fit result from a Minimizer instance after fitting; 76 Run also Minos if requested from the configuration; 77 */; 78 void FillResult(const std::shared_ptr<ROOT::Math::Minimizer> & min, const FitConfig & fconfig, const std::shared_ptr<IModelFunction> & f,; 79 bool isValid, unsigned int sizeOfData = 0, int fitType = 1, const ROOT::Math::IMultiGenFunction *chi2func = nullptr, unsigned int ncalls = 0);; 80 ; 81 ; 82 /**; 83 Update the fit result with a new minimization status; 84 To be run only if same fit is performed with same configuration; 85 Note that in this case MINOS is not re-run. If one wants to run also MINOS; 86 a new result must be created; 87 */; 88 bool Update(const std::shared_ptr<ROOT::Math::Minimizer> & min, const ROOT::Fit::FitConfig & fconfig, bool isValid, unsigned int ncalls = 0);; 89 ; 90 /** minimization quantities **/; 91 ; 92 /// minimizer type; 93 const std::string & MinimizerType() const { return fMinimType; }; 94 ; 95 /**; 96 True if fit successful, otherwise false.; 97 A fit is considered successful if the minimizer succeeded in finding the; 98 minimum. It could happen that subsequent operations like error analysis (e.g.",MatchSource.WIKI,doc/master/FitResult_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitResult_8h_source.html
Testability,log,log-likelihood,"s() const { return fStatus; }; 129 ; 130 ///covariance matrix status code; 131 /// using Minuit convention : =0 not calculated, =1 approximated, =2 made pos def , =3 accurate; 132 ; 133 int CovMatrixStatus() const { return fCovStatus; }; 134 ; 135 /** fitting quantities **/; 136 ; 137 /// Return pointer to model (fit) function with fitted parameter values.; 138 /// Pointer is managed internally. I must not be deleted; 139 const IModelFunction * FittedFunction() const {; 140 return fFitFunc.get();; 141 }; 142 ; 143 /// return BinData used in the fit (return a nullptr in case a different fit is done; 144 /// or the data are not available; 145 /// Pointer is managed internally, it must not be deleted; 146 const BinData * FittedBinData() const;; 147 ; 148 ; 149 /// Return the Chi2 value after fitting; 150 /// In case of unbinned fits (or not defined one, see the documentation of Fitter::FitFCN) return -1; 151 /// In case of binned likelihood fits (Poisson Likelihood) return the 2 * negative log-likelihood ratio; 152 /// using the definition of Baker-Cousins; 153 double Chi2() const { return fChi2; }; 154 ; 155 /// Number of degree of freedom; 156 unsigned int Ndf() const { return fNdf; }; 157 ; 158 /// p value of the fit (chi2 probability); 159 double Prob() const;; 160 ; 161 /// parameter errors (return st::vector); 162 const std::vector<double> & Errors() const { return fErrors; }; 163 /// parameter errors (return const pointer); 164 const double * GetErrors() const { return fErrors.empty() ? nullptr : &fErrors.front(); }; 165 ; 166 /// parameter values (return std::vector); 167 const std::vector<double> & Parameters() const { return fParams; }; 168 /// parameter values (return const pointer); 169 const double * GetParams() const { return &fParams.front(); }; 170 ; 171 /// parameter value by index; 172 double Value(unsigned int i) const { return fParams[i]; }; 173 /// parameter value by index; 174 double Parameter(unsigned int i) const { return fParams[i]; }; 175 ; 176",MatchSource.WIKI,doc/master/FitResult_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitResult_8h_source.html
Availability,error,error,"**************************************; 5 * *; 6 * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Implementation file for class Fitter; 12 ; 13 ; 14#include ""Fit/Fitter.h""; 15#include ""Fit/Chi2FCN.h""; 16#include ""Fit/PoissonLikelihoodFCN.h""; 17#include ""Fit/LogLikelihoodFCN.h""; 18#include ""Math/Minimizer.h""; 19#include ""Math/MinimizerOptions.h""; 20#include ""Math/FitMethodFunction.h""; 21#include ""Fit/BasicFCN.h""; 22#include ""Fit/BinData.h""; 23#include ""Fit/UnBinData.h""; 24#include ""Fit/FcnAdapter.h""; 25#include ""Fit/FitConfig.h""; 26#include ""Fit/FitResult.h""; 27#include ""Math/Error.h""; 28 ; 29#include <memory>; 30 ; 31#include ""Math/IParamFunction.h""; 32 ; 33#include ""Math/MultiDimParamFunctionAdapter.h""; 34 ; 35// #include ""TMatrixDSym.h""; 36// for debugging; 37//#include ""TMatrixD.h""; 38// #include <iomanip>; 39 ; 40namespace ROOT {; 41 ; 42 namespace Fit {; 43 ; 44// use a static variable to get default minimizer options for error def; 45// to see if user has changed it later on. If it has not been changed we set; 46// for the likelihood method an error def of 0.5; 47// t.b.d : multiply likelihood by 2 so have same error def definition as chi2; 48 double gDefaultErrorDef = ROOT::Math::MinimizerOptions::DefaultErrorDef();; 49 ; 50 ; 51Fitter::Fitter(const std::shared_ptr<FitResult> & result) :; 52 fResult(result); 53{; 54 if (result->fFitFunc) SetFunction(*fResult->fFitFunc); // this will create also the configuration; 55 if (result->fObjFunc) fObjFunction = fResult->fObjFunc;; 56 if (result->fFitData) fData = fResult->fFitData;; 57}; 58 ; 59void Fitter::SetFunction(const IModelFunction & func, bool useGradient); 60{; 61 ; 62 fUseGradient = useGradient;; 63 if (fUseGradient) {; 64 const IGradModelFunction * gradFunc = dynamic_cast<const IGradModelFunction*>(&func);; 65 if (gradFunc) {; 66 SetFunction(*gradFunc, true);; 67 return;; 68 }; 69 else {; 70 MATH_WARN_M",MatchSource.WIKI,doc/master/Fitter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html
Deployability,configurat,configuration,"th/MultiDimParamFunctionAdapter.h""; 34 ; 35// #include ""TMatrixDSym.h""; 36// for debugging; 37//#include ""TMatrixD.h""; 38// #include <iomanip>; 39 ; 40namespace ROOT {; 41 ; 42 namespace Fit {; 43 ; 44// use a static variable to get default minimizer options for error def; 45// to see if user has changed it later on. If it has not been changed we set; 46// for the likelihood method an error def of 0.5; 47// t.b.d : multiply likelihood by 2 so have same error def definition as chi2; 48 double gDefaultErrorDef = ROOT::Math::MinimizerOptions::DefaultErrorDef();; 49 ; 50 ; 51Fitter::Fitter(const std::shared_ptr<FitResult> & result) :; 52 fResult(result); 53{; 54 if (result->fFitFunc) SetFunction(*fResult->fFitFunc); // this will create also the configuration; 55 if (result->fObjFunc) fObjFunction = fResult->fObjFunc;; 56 if (result->fFitData) fData = fResult->fFitData;; 57}; 58 ; 59void Fitter::SetFunction(const IModelFunction & func, bool useGradient); 60{; 61 ; 62 fUseGradient = useGradient;; 63 if (fUseGradient) {; 64 const IGradModelFunction * gradFunc = dynamic_cast<const IGradModelFunction*>(&func);; 65 if (gradFunc) {; 66 SetFunction(*gradFunc, true);; 67 return;; 68 }; 69 else {; 70 MATH_WARN_MSG(""Fitter::SetFunction"",""Requested function does not provide gradient - use it as non-gradient function "");; 71 }; 72 }; 73 fUseGradient = false;; 74 ; 75 // set the fit model function (clone the given one and keep a copy ); 76 //std::cout << ""set a non-grad function"" << std::endl;; 77 ; 78 fFunc = std::shared_ptr<IModelFunction>(dynamic_cast<IModelFunction *>(func.Clone() ) );; 79 assert(fFunc);; 80 ; 81 // creates the parameter settings; 82 fConfig.CreateParamsSettings(*fFunc);; 83 fFunc_v.reset();; 84}; 85 ; 86void Fitter::SetFunction(const IModel1DFunction & func, bool useGradient); 87{; 88 fUseGradient = useGradient;; 89 if (fUseGradient) {; 90 const IGradModel1DFunction * gradFunc = dynamic_cast<const IGradModel1DFunction*>(&func);; 91 if (gradFunc) {; 92 SetFunction",MatchSource.WIKI,doc/master/Fitter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html
Energy Efficiency,adapt,adapter,"delFunction*>(&func);; 65 if (gradFunc) {; 66 SetFunction(*gradFunc, true);; 67 return;; 68 }; 69 else {; 70 MATH_WARN_MSG(""Fitter::SetFunction"",""Requested function does not provide gradient - use it as non-gradient function "");; 71 }; 72 }; 73 fUseGradient = false;; 74 ; 75 // set the fit model function (clone the given one and keep a copy ); 76 //std::cout << ""set a non-grad function"" << std::endl;; 77 ; 78 fFunc = std::shared_ptr<IModelFunction>(dynamic_cast<IModelFunction *>(func.Clone() ) );; 79 assert(fFunc);; 80 ; 81 // creates the parameter settings; 82 fConfig.CreateParamsSettings(*fFunc);; 83 fFunc_v.reset();; 84}; 85 ; 86void Fitter::SetFunction(const IModel1DFunction & func, bool useGradient); 87{; 88 fUseGradient = useGradient;; 89 if (fUseGradient) {; 90 const IGradModel1DFunction * gradFunc = dynamic_cast<const IGradModel1DFunction*>(&func);; 91 if (gradFunc) {; 92 SetFunction(*gradFunc, true);; 93 return;; 94 }; 95 else {; 96 MATH_WARN_MSG(""Fitter::SetFunction"",""Requested function does not provide gradient - use it as non-gradient function "");; 97 }; 98 }; 99 fUseGradient = false;; 100 //std::cout << ""set a 1d function"" << std::endl;; 101 ; 102 // function is cloned when creating the adapter; 103 fFunc = std::shared_ptr<IModelFunction>(new ROOT::Math::MultiDimParamFunctionAdapter(func));; 104 ; 105 // creates the parameter settings; 106 fConfig.CreateParamsSettings(*fFunc);; 107 fFunc_v.reset();; 108}; 109 ; 110void Fitter::SetFunction(const IGradModelFunction & func, bool useGradient); 111{; 112 fUseGradient = useGradient;; 113 //std::cout << ""set a grad function"" << std::endl;; 114 // set the fit model function (clone the given one and keep a copy ); 115 fFunc = std::shared_ptr<IModelFunction>( dynamic_cast<IGradModelFunction *> ( func.Clone() ) );; 116 assert(fFunc);; 117 ; 118 // creates the parameter settings; 119 fConfig.CreateParamsSettings(*fFunc);; 120 fFunc_v.reset();; 121}; 122 ; 123 ; 124void Fitter::SetFunction(const IGradModel1DFunction ",MatchSource.WIKI,doc/master/Fitter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html
Integrability,adapter,adapter,"delFunction*>(&func);; 65 if (gradFunc) {; 66 SetFunction(*gradFunc, true);; 67 return;; 68 }; 69 else {; 70 MATH_WARN_MSG(""Fitter::SetFunction"",""Requested function does not provide gradient - use it as non-gradient function "");; 71 }; 72 }; 73 fUseGradient = false;; 74 ; 75 // set the fit model function (clone the given one and keep a copy ); 76 //std::cout << ""set a non-grad function"" << std::endl;; 77 ; 78 fFunc = std::shared_ptr<IModelFunction>(dynamic_cast<IModelFunction *>(func.Clone() ) );; 79 assert(fFunc);; 80 ; 81 // creates the parameter settings; 82 fConfig.CreateParamsSettings(*fFunc);; 83 fFunc_v.reset();; 84}; 85 ; 86void Fitter::SetFunction(const IModel1DFunction & func, bool useGradient); 87{; 88 fUseGradient = useGradient;; 89 if (fUseGradient) {; 90 const IGradModel1DFunction * gradFunc = dynamic_cast<const IGradModel1DFunction*>(&func);; 91 if (gradFunc) {; 92 SetFunction(*gradFunc, true);; 93 return;; 94 }; 95 else {; 96 MATH_WARN_MSG(""Fitter::SetFunction"",""Requested function does not provide gradient - use it as non-gradient function "");; 97 }; 98 }; 99 fUseGradient = false;; 100 //std::cout << ""set a 1d function"" << std::endl;; 101 ; 102 // function is cloned when creating the adapter; 103 fFunc = std::shared_ptr<IModelFunction>(new ROOT::Math::MultiDimParamFunctionAdapter(func));; 104 ; 105 // creates the parameter settings; 106 fConfig.CreateParamsSettings(*fFunc);; 107 fFunc_v.reset();; 108}; 109 ; 110void Fitter::SetFunction(const IGradModelFunction & func, bool useGradient); 111{; 112 fUseGradient = useGradient;; 113 //std::cout << ""set a grad function"" << std::endl;; 114 // set the fit model function (clone the given one and keep a copy ); 115 fFunc = std::shared_ptr<IModelFunction>( dynamic_cast<IGradModelFunction *> ( func.Clone() ) );; 116 assert(fFunc);; 117 ; 118 // creates the parameter settings; 119 fConfig.CreateParamsSettings(*fFunc);; 120 fFunc_v.reset();; 121}; 122 ; 123 ; 124void Fitter::SetFunction(const IGradModel1DFunction ",MatchSource.WIKI,doc/master/Fitter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html
Modifiability,variab,variable,"**************************************; 5 * *; 6 * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Implementation file for class Fitter; 12 ; 13 ; 14#include ""Fit/Fitter.h""; 15#include ""Fit/Chi2FCN.h""; 16#include ""Fit/PoissonLikelihoodFCN.h""; 17#include ""Fit/LogLikelihoodFCN.h""; 18#include ""Math/Minimizer.h""; 19#include ""Math/MinimizerOptions.h""; 20#include ""Math/FitMethodFunction.h""; 21#include ""Fit/BasicFCN.h""; 22#include ""Fit/BinData.h""; 23#include ""Fit/UnBinData.h""; 24#include ""Fit/FcnAdapter.h""; 25#include ""Fit/FitConfig.h""; 26#include ""Fit/FitResult.h""; 27#include ""Math/Error.h""; 28 ; 29#include <memory>; 30 ; 31#include ""Math/IParamFunction.h""; 32 ; 33#include ""Math/MultiDimParamFunctionAdapter.h""; 34 ; 35// #include ""TMatrixDSym.h""; 36// for debugging; 37//#include ""TMatrixD.h""; 38// #include <iomanip>; 39 ; 40namespace ROOT {; 41 ; 42 namespace Fit {; 43 ; 44// use a static variable to get default minimizer options for error def; 45// to see if user has changed it later on. If it has not been changed we set; 46// for the likelihood method an error def of 0.5; 47// t.b.d : multiply likelihood by 2 so have same error def definition as chi2; 48 double gDefaultErrorDef = ROOT::Math::MinimizerOptions::DefaultErrorDef();; 49 ; 50 ; 51Fitter::Fitter(const std::shared_ptr<FitResult> & result) :; 52 fResult(result); 53{; 54 if (result->fFitFunc) SetFunction(*fResult->fFitFunc); // this will create also the configuration; 55 if (result->fObjFunc) fObjFunction = fResult->fObjFunc;; 56 if (result->fFitData) fData = fResult->fFitData;; 57}; 58 ; 59void Fitter::SetFunction(const IModelFunction & func, bool useGradient); 60{; 61 ; 62 fUseGradient = useGradient;; 63 if (fUseGradient) {; 64 const IGradModelFunction * gradFunc = dynamic_cast<const IGradModelFunction*>(&func);; 65 if (gradFunc) {; 66 SetFunction(*gradFunc, true);; 67 return;; 68 }; 69 else {; 70 MATH_WARN_M",MatchSource.WIKI,doc/master/Fitter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html
Performance,perform,perform,"0}; 241 ; 242bool Fitter::SetFCN(MinuitFCN_t fcn, int npar, const double *params, unsigned int dataSize, int fitType); 243{; 244 // set TMinuit style FCN type (global function pointer); 245 // create corresponding objective function from that function; 246 ; 247 if (npar == 0) {; 248 npar = fConfig.ParamsSettings().size();; 249 if (npar == 0) {; 250 MATH_ERROR_MSG(""Fitter::FitFCN"", ""Fit Parameter settings have not been created "");; 251 return false;; 252 }; 253 }; 254 ; 255 ROOT::Fit::FcnAdapter newFcn(fcn, npar);; 256 return DoSetFCN(false,newFcn, params, dataSize, fitType);; 257}; 258 ; 259bool Fitter::FitFCN(MinuitFCN_t fcn, int npar, const double *params, unsigned int dataSize, int fitType); 260{; 261 // fit using Minuit style FCN type (global function pointer); 262 // create corresponding objective function from that function; 263 if (!SetFCN(fcn, npar, params, dataSize, fitType)); 264 return false;; 265 fUseGradient = false;; 266 return FitFCN();; 267}; 268 ; 269bool Fitter::FitFCN(); 270{; 271 // fit using the previously set FCN function; 272 ; 273 ; 274 if (!fExtObjFunction && !fObjFunction) {; 275 MATH_ERROR_MSG(""Fitter::FitFCN"", ""Objective function has not been set"");; 276 return false;; 277 }; 278 // look if FCN is of a known type and we can get retrieve the model function and data objects; 279 if (!fFunc || !fData); 280 ExamineFCN();; 281 // init the minimizer; 282 if (!DoInitMinimizer()); 283 return false;; 284 // perform the minimization; 285 return DoMinimization();; 286}; 287 ; 288bool Fitter::EvalFCN(); 289{; 290 // evaluate the FCN using the stored values in fConfig; 291 ; 292 if (fFunc && fResult->FittedFunction() == nullptr); 293 fFunc.reset();; 294 ; 295 if (!ObjFunction()) {; 296 MATH_ERROR_MSG(""Fitter::FitFCN"", ""Objective function has not been set"");; 297 return false;; 298 }; 299 // create a Fit result from the fit configuration; 300 fResult = std::make_unique<ROOT::Fit::FitResult>(fConfig);; 301 // evaluate one time the FCN; 302 double fcnval",MatchSource.WIKI,doc/master/Fitter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html
Safety,avoid,avoid,"e computed just after the minimization; 597 // (in DoMinimization) aftewr minimizing if the; 598 // FitConfig::MinosErrors() flag is set; 599 ; 600 if (!fMinimizer) {; 601 MATH_ERROR_MSG(""Fitter::CalculateMinosErrors"",""Minimizer does not exist - cannot calculate Minos errors"");; 602 return false;; 603 }; 604 ; 605 if (!fResult || fResult->IsEmpty() ) {; 606 MATH_ERROR_MSG(""Fitter::CalculateMinosErrors"",""Invalid Fit Result - cannot calculate Minos errors"");; 607 return false;; 608 }; 609 ; 610 if (fFitType == ROOT::Math::FitMethodFunction::kLogLikelihood && fConfig.UseWeightCorrection() ) {; 611 MATH_ERROR_MSG(""Fitter::CalculateMinosErrors"",""Computation of MINOS errors not implemented for weighted likelihood fits"");; 612 return false;; 613 }; 614 ; 615 // update minimizer (but cannot re-create in this case). Must use an existing one; 616 if (!DoUpdateMinimizerOptions(false)) {; 617 MATH_ERROR_MSG(""Fitter::CalculateHessErrors"",""Error re-initializing the minimizer"");; 618 return false;; 619 }; 620 ; 621 // set flag to compute Minos error to false in FitConfig to avoid that; 622 // following minimizaiton calls perform unwanted Minos error calculations; 623 /// fConfig.SetMinosErrors(false);; 624 ; 625 ; 626 const std::vector<unsigned int> & ipars = fConfig.MinosParams();; 627 unsigned int n = (!ipars.empty()) ? ipars.size() : fResult->Parameters().size();; 628 bool ok = false;; 629 ; 630 int iparNewMin = 0;; 631 int iparMax = n;; 632 int iter = 0;; 633 // rerun minos for the parameters run before a new Minimum has been found; 634 do {; 635 if (iparNewMin > 0); 636 MATH_INFO_MSG(""Fitter::CalculateMinosErrors"",""Run again Minos for some parameters because a new Minimum has been found"");; 637 iparNewMin = 0;; 638 for (int i = 0; i < iparMax; ++i) {; 639 double elow, eup;; 640 unsigned int index = (!ipars.empty()) ? ipars[i] : i;; 641 bool ret = fMinimizer->GetMinosError(index, elow, eup);; 642 // flags case when a new minimum has been found; 643 if ((fMinimizer->MinosStatus(",MatchSource.WIKI,doc/master/Fitter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html
Security,access,access,"r matrix computation.Definition FitConfig.h:214; ROOT::Fit::FitConfig::ParamsSettingsconst std::vector< ROOT::Fit::ParameterSettings > & ParamsSettings() constget the vector of parameter settings (const method)Definition FitConfig.h:86; ROOT::Fit::FitConfig::CreateMinimizerROOT::Math::Minimizer * CreateMinimizer()create a new minimizer according to chosen configurationDefinition FitConfig.cxx:173; ROOT::Fit::FitConfig::CreateParamsSettingsvoid CreateParamsSettings(const ROOT::Math::IParamMultiFunctionTempl< T > &func)set the parameter settings from a model function.Definition FitConfig.h:109; ROOT::Fit::FitConfig::MinimizerTypeconst std::string & MinimizerType() constreturn type of minimizer packageDefinition FitConfig.h:187; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitConfig::MinimizerOptionsROOT::Math::MinimizerOptions & MinimizerOptions()access to the minimizer control parameter (non const method)Definition FitConfig.h:167; ROOT::Fit::FitConfig::MinosErrorsbool MinosErrors() constdo minos errors analysis on the parametersDefinition FitConfig.h:208; ROOT::Fit::Fitter::EvalFCNbool EvalFCN()Perform a simple FCN evaluation.Definition Fitter.cxx:288; ROOT::Fit::Fitter::fExtObjFunctionconst ROOT::Math::IMultiGenFunction * fExtObjFunction! pointer to an external FCNDefinition Fitter.h:576; ROOT::Fit::Fitter::FitFCNbool FitFCN()Perform a fit with the previously set FCN function.Definition Fitter.cxx:269; ROOT::Fit::Fitter::DoUpdateFitConfigvoid DoUpdateFitConfig()Definition Fitter.cxx:860; ROOT::Fit::Fitter::DoMinimizationbool DoMinimization(std::unique_ptr< ObjFunc_t > f, const ROOT::Math::IMultiGenFunction *chifunc=nullptr)do minimizationDefinition Fitter.cxx:836; ROOT::Fit::Fitter::DoSetFCNbool DoSetFCN(bool useExtFCN, const ROOT::Math::IMultiGenFunction &fcn, const double *params, unsigned int dataSize, int fitType)S",MatchSource.WIKI,doc/master/Fitter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html
Testability,assert,assert,"esult) :; 52 fResult(result); 53{; 54 if (result->fFitFunc) SetFunction(*fResult->fFitFunc); // this will create also the configuration; 55 if (result->fObjFunc) fObjFunction = fResult->fObjFunc;; 56 if (result->fFitData) fData = fResult->fFitData;; 57}; 58 ; 59void Fitter::SetFunction(const IModelFunction & func, bool useGradient); 60{; 61 ; 62 fUseGradient = useGradient;; 63 if (fUseGradient) {; 64 const IGradModelFunction * gradFunc = dynamic_cast<const IGradModelFunction*>(&func);; 65 if (gradFunc) {; 66 SetFunction(*gradFunc, true);; 67 return;; 68 }; 69 else {; 70 MATH_WARN_MSG(""Fitter::SetFunction"",""Requested function does not provide gradient - use it as non-gradient function "");; 71 }; 72 }; 73 fUseGradient = false;; 74 ; 75 // set the fit model function (clone the given one and keep a copy ); 76 //std::cout << ""set a non-grad function"" << std::endl;; 77 ; 78 fFunc = std::shared_ptr<IModelFunction>(dynamic_cast<IModelFunction *>(func.Clone() ) );; 79 assert(fFunc);; 80 ; 81 // creates the parameter settings; 82 fConfig.CreateParamsSettings(*fFunc);; 83 fFunc_v.reset();; 84}; 85 ; 86void Fitter::SetFunction(const IModel1DFunction & func, bool useGradient); 87{; 88 fUseGradient = useGradient;; 89 if (fUseGradient) {; 90 const IGradModel1DFunction * gradFunc = dynamic_cast<const IGradModel1DFunction*>(&func);; 91 if (gradFunc) {; 92 SetFunction(*gradFunc, true);; 93 return;; 94 }; 95 else {; 96 MATH_WARN_MSG(""Fitter::SetFunction"",""Requested function does not provide gradient - use it as non-gradient function "");; 97 }; 98 }; 99 fUseGradient = false;; 100 //std::cout << ""set a 1d function"" << std::endl;; 101 ; 102 // function is cloned when creating the adapter; 103 fFunc = std::shared_ptr<IModelFunction>(new ROOT::Math::MultiDimParamFunctionAdapter(func));; 104 ; 105 // creates the parameter settings; 106 fConfig.CreateParamsSettings(*fFunc);; 107 fFunc_v.reset();; 108}; 109 ; 110void Fitter::SetFunction(const IGradModelFunction & func, bool useGradient); 111{;",MatchSource.WIKI,doc/master/Fitter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html
Usability,simpl,simply,"s when the objective function stored is a Chi2Func or a PoissonLikelihood; 983 // This also set the model function correctly if it has not been set; 984 ; 985 if ( GetDataFromFCN<BasicFCN<ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction, BinData> >() ) return;; 986 if ( GetDataFromFCN<BasicFCN<ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction, UnBinData> >() ) return;; 987 ; 988 if ( GetDataFromFCN<BasicFCN<ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction, BinData> >() ) return;; 989 if ( GetDataFromFCN<BasicFCN<ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction, UnBinData> >() ) return;; 990 ; 991 //MATH_INFO_MSG(""Fitter::ExamineFCN"",""Objective function is not of a known type - FitData and ModelFunction objects are not available"");; 992 return;; 993}; 994 ; 995 } // end namespace Fit; 996 ; 997} // end namespace ROOT; BasicFCN.h; BinData.h; Chi2FCN.h; Error.h; MATH_INFO_MSG#define MATH_INFO_MSG(loc, str)Pre-processor macro to report messages which can be configured to use ROOT error or simply an std::io...Definition Error.h:77; MATH_ERROR_MSG#define MATH_ERROR_MSG(loc, str)Definition Error.h:83; MATH_WARN_MSG#define MATH_WARN_MSG(loc, str)Definition Error.h:80; FcnAdapter.h; FitConfig.h; FitMethodFunction.h; FitResult.h; Fitter.h; IParamFunction.h; LogLikelihoodFCN.h; MinimizerOptions.h; Minimizer.h; MultiDimParamFunctionAdapter.h; PoissonLikelihoodFCN.h; f#define f(i)Definition RSha256.hxx:104; h#define h(i)Definition RSha256.hxx:106; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefi",MatchSource.WIKI,doc/master/Fitter_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html
Integrability,depend,dependency,". ROOT: math/mathcore/inc/Fit/Fitter.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Typedefs ; Fitter.h File Reference. #include ""Fit/BinData.h""; #include ""Fit/UnBinData.h""; #include ""Fit/FitConfig.h""; #include ""ROOT/EExecutionPolicy.hxx""; #include ""Fit/FitResult.h""; #include ""Math/IParamFunction.h""; #include <memory>; #include ""Math/WrappedFunction.h"". Include dependency graph for Fitter.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Fit::Fitter;  Fitter class, entry point for performing all type of fits. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Fit;  Namespace for the fitting classes. ;  ; namespace  ROOT::Math;  . Typedefs; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > ROOT::Math::FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > ROOT::Math::FitMethodGradFunction;  . mathmathcoreincFitFitter.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/Fitter_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Fitter_8h.html
Performance,perform,performing,". ROOT: math/mathcore/inc/Fit/Fitter.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Typedefs ; Fitter.h File Reference. #include ""Fit/BinData.h""; #include ""Fit/UnBinData.h""; #include ""Fit/FitConfig.h""; #include ""ROOT/EExecutionPolicy.hxx""; #include ""Fit/FitResult.h""; #include ""Math/IParamFunction.h""; #include <memory>; #include ""Math/WrappedFunction.h"". Include dependency graph for Fitter.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Fit::Fitter;  Fitter class, entry point for performing all type of fits. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Fit;  Namespace for the fitting classes. ;  ; namespace  ROOT::Math;  . Typedefs; typedef BasicFitMethodFunction< ROOT::Math::IMultiGenFunction > ROOT::Math::FitMethodFunction;  ; typedef BasicFitMethodFunction< ROOT::Math::IMultiGradFunction > ROOT::Math::FitMethodGradFunction;  . mathmathcoreincFitFitter.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/Fitter_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Fitter_8h.html
Availability,error,errors,"Math::IMultiGenFunction> FitMethodFunction;; 44 typedef BasicFitMethodFunction<ROOT::Math::IMultiGradFunction> FitMethodGradFunction;; 45 ; 46 }; 47 ; 48 /**; 49 Namespace for the fitting classes; 50 @ingroup Fit; 51 */; 52 ; 53 namespace Fit {; 54 ; 55/**; 56 @defgroup FitMain User Fitting classes; 57 ; 58 Main Classes used for fitting a given data set; 59 @ingroup Fit; 60*/; 61 ; 62 ; 63//___________________________________________________________________________________; 64/**; 65 Fitter class, entry point for performing all type of fits.; 66 Fits are performed using the generic ROOT::Fit::Fitter::Fit method.; 67 The inputs are the data points and a model function (using a ROOT::Math::IParamFunction); 68 The result of the fit is returned and kept internally in the ROOT::Fit::FitResult class.; 69 The configuration of the fit (parameters, options, etc...) are specified in the; 70 ROOT::Math::FitConfig class.; 71 After fitting the config of the fit will be modified to have the new values the resulting; 72 parameter of the fit with step sizes equal to the errors. FitConfig can be preserved with; 73 initial parameters by calling FitConfig.SetUpdateAfterFit(false);; 74 ; 75 @ingroup FitMain; 76*/; 77class Fitter {; 78 ; 79public:; 80 ; 81 typedef ROOT::Math::IParamMultiFunction IModelFunction;; 82 template <class T>; 83 using IModelFunctionTempl = ROOT::Math::IParamMultiFunctionTempl<T>;; 84#ifdef R__HAS_VECCORE; 85 typedef ROOT::Math::IParametricFunctionMultiDimTempl<ROOT::Double_v> IModelFunction_v;; 86 typedef ROOT::Math::IParamMultiGradFunctionTempl<ROOT::Double_v> IGradModelFunction_v;; 87#else; 88 typedef ROOT::Math::IParamMultiFunction IModelFunction_v;; 89 typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction_v;; 90#endif; 91 typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction;; 92 typedef ROOT::Math::IParamFunction IModel1DFunction;; 93 typedef ROOT::Math::IParamGradFunction IGradModel1DFunction;; 94 ; 95 typedef ROOT::Math::IMultiGenFuncti",MatchSource.WIKI,doc/master/Fitter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html
Deployability,configurat,configuration,"fwd file; 40 template<class FunctionType> class BasicFitMethodFunction;; 41 ; 42 // define the normal and gradient function; 43 typedef BasicFitMethodFunction<ROOT::Math::IMultiGenFunction> FitMethodFunction;; 44 typedef BasicFitMethodFunction<ROOT::Math::IMultiGradFunction> FitMethodGradFunction;; 45 ; 46 }; 47 ; 48 /**; 49 Namespace for the fitting classes; 50 @ingroup Fit; 51 */; 52 ; 53 namespace Fit {; 54 ; 55/**; 56 @defgroup FitMain User Fitting classes; 57 ; 58 Main Classes used for fitting a given data set; 59 @ingroup Fit; 60*/; 61 ; 62 ; 63//___________________________________________________________________________________; 64/**; 65 Fitter class, entry point for performing all type of fits.; 66 Fits are performed using the generic ROOT::Fit::Fitter::Fit method.; 67 The inputs are the data points and a model function (using a ROOT::Math::IParamFunction); 68 The result of the fit is returned and kept internally in the ROOT::Fit::FitResult class.; 69 The configuration of the fit (parameters, options, etc...) are specified in the; 70 ROOT::Math::FitConfig class.; 71 After fitting the config of the fit will be modified to have the new values the resulting; 72 parameter of the fit with step sizes equal to the errors. FitConfig can be preserved with; 73 initial parameters by calling FitConfig.SetUpdateAfterFit(false);; 74 ; 75 @ingroup FitMain; 76*/; 77class Fitter {; 78 ; 79public:; 80 ; 81 typedef ROOT::Math::IParamMultiFunction IModelFunction;; 82 template <class T>; 83 using IModelFunctionTempl = ROOT::Math::IParamMultiFunctionTempl<T>;; 84#ifdef R__HAS_VECCORE; 85 typedef ROOT::Math::IParametricFunctionMultiDimTempl<ROOT::Double_v> IModelFunction_v;; 86 typedef ROOT::Math::IParamMultiGradFunctionTempl<ROOT::Double_v> IGradModelFunction_v;; 87#else; 88 typedef ROOT::Math::IParamMultiFunction IModelFunction_v;; 89 typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction_v;; 90#endif; 91 typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction;; ",MatchSource.WIKI,doc/master/Fitter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html
Integrability,interface,interface,"94 ; 95 typedef ROOT::Math::IMultiGenFunction BaseFunc;; 96 typedef ROOT::Math::IMultiGradFunction BaseGradFunc;; 97 ; 98 ; 99 /**; 100 Default constructor; 101 */; 102 Fitter () {}; 103 ; 104 /**; 105 Constructor from a result; 106 */; 107 Fitter (const std::shared_ptr<FitResult> & result);; 108 ; 109 ; 110 /**; 111 Destructor.; 112 Make it virtual in case users derive from Fitter class to extend it by adding new methods.; 113 This is needed to avoid a warning seen when doing from Python; 114 (see ROOT issue [#12391](https://github.com/root-project/root/issues/12391) ).; 115 Note that the Fitter class does not provide virtual functions to be re-implemented by derived classes.; 116 */; 117 virtual ~Fitter () {}; 118 ; 119 /**; 120 Copy constructor (disabled, class is not copyable); 121 */; 122 Fitter(const Fitter &) = delete;; 123 ; 124 /**; 125 Assignment operator (disabled, class is not copyable); 126 */; 127 Fitter & operator = (const Fitter &) = delete;; 128 ; 129 ; 130public:; 131 ; 132 /**; 133 fit a data set using any generic model function; 134 If data set is binned a least square fit is performed; 135 If data set is unbinned a maximum likelihood fit (not extended) is done; 136 Pre-requisite on the function:; 137 it must implement the 1D or multidimensional parametric function interface.; 138 Note that both the input data and the function object are copied by the Fitter.; 139 */; 140 template <class Data, class Function,; 141 class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value ||; 142 std::is_same<Function, int>::value),; 143 Function>::type>; 144 bool Fit(const Data &data, const Function &func,; 145 const ROOT::EExecutionPolicy &executionPolicy = ROOT::EExecutionPolicy::kSequential); 146 {; 147 SetFunction(func);; 148 return Fit(data, executionPolicy);; 149 }; 150 ; 151 /**; 152 Fit a binned data set using a least square fit.; 153 Note that the provided input data are copied in the Fitter class.; 154 Use the next func",MatchSource.WIKI,doc/master/Fitter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html
Modifiability,config,configuration,"fwd file; 40 template<class FunctionType> class BasicFitMethodFunction;; 41 ; 42 // define the normal and gradient function; 43 typedef BasicFitMethodFunction<ROOT::Math::IMultiGenFunction> FitMethodFunction;; 44 typedef BasicFitMethodFunction<ROOT::Math::IMultiGradFunction> FitMethodGradFunction;; 45 ; 46 }; 47 ; 48 /**; 49 Namespace for the fitting classes; 50 @ingroup Fit; 51 */; 52 ; 53 namespace Fit {; 54 ; 55/**; 56 @defgroup FitMain User Fitting classes; 57 ; 58 Main Classes used for fitting a given data set; 59 @ingroup Fit; 60*/; 61 ; 62 ; 63//___________________________________________________________________________________; 64/**; 65 Fitter class, entry point for performing all type of fits.; 66 Fits are performed using the generic ROOT::Fit::Fitter::Fit method.; 67 The inputs are the data points and a model function (using a ROOT::Math::IParamFunction); 68 The result of the fit is returned and kept internally in the ROOT::Fit::FitResult class.; 69 The configuration of the fit (parameters, options, etc...) are specified in the; 70 ROOT::Math::FitConfig class.; 71 After fitting the config of the fit will be modified to have the new values the resulting; 72 parameter of the fit with step sizes equal to the errors. FitConfig can be preserved with; 73 initial parameters by calling FitConfig.SetUpdateAfterFit(false);; 74 ; 75 @ingroup FitMain; 76*/; 77class Fitter {; 78 ; 79public:; 80 ; 81 typedef ROOT::Math::IParamMultiFunction IModelFunction;; 82 template <class T>; 83 using IModelFunctionTempl = ROOT::Math::IParamMultiFunctionTempl<T>;; 84#ifdef R__HAS_VECCORE; 85 typedef ROOT::Math::IParametricFunctionMultiDimTempl<ROOT::Double_v> IModelFunction_v;; 86 typedef ROOT::Math::IParamMultiGradFunctionTempl<ROOT::Double_v> IGradModelFunction_v;; 87#else; 88 typedef ROOT::Math::IParamMultiFunction IModelFunction_v;; 89 typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction_v;; 90#endif; 91 typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction;; ",MatchSource.WIKI,doc/master/Fitter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html
Performance,perform,performing,"***********************************************************/; 10 ; 11// Header file for class Fitter; 12 ; 13#ifndef ROOT_Fit_Fitter; 14#define ROOT_Fit_Fitter; 15 ; 16/**; 17@defgroup Fit Fitting and Parameter Estimation; 18 ; 19Classes used for fitting (regression analysis) and estimation of parameter values given a data sample.; 20 ; 21@ingroup MathCore; 22 ; 23*/; 24 ; 25#include ""Fit/BinData.h""; 26#include ""Fit/UnBinData.h""; 27#include ""Fit/FitConfig.h""; 28#include ""ROOT/EExecutionPolicy.hxx""; 29#include ""Fit/FitResult.h""; 30#include ""Math/IParamFunction.h""; 31#include <memory>; 32 ; 33namespace ROOT {; 34 ; 35 ; 36 namespace Math {; 37 class Minimizer;; 38 ; 39 // should maybe put this in a FitMethodFunctionfwd file; 40 template<class FunctionType> class BasicFitMethodFunction;; 41 ; 42 // define the normal and gradient function; 43 typedef BasicFitMethodFunction<ROOT::Math::IMultiGenFunction> FitMethodFunction;; 44 typedef BasicFitMethodFunction<ROOT::Math::IMultiGradFunction> FitMethodGradFunction;; 45 ; 46 }; 47 ; 48 /**; 49 Namespace for the fitting classes; 50 @ingroup Fit; 51 */; 52 ; 53 namespace Fit {; 54 ; 55/**; 56 @defgroup FitMain User Fitting classes; 57 ; 58 Main Classes used for fitting a given data set; 59 @ingroup Fit; 60*/; 61 ; 62 ; 63//___________________________________________________________________________________; 64/**; 65 Fitter class, entry point for performing all type of fits.; 66 Fits are performed using the generic ROOT::Fit::Fitter::Fit method.; 67 The inputs are the data points and a model function (using a ROOT::Math::IParamFunction); 68 The result of the fit is returned and kept internally in the ROOT::Fit::FitResult class.; 69 The configuration of the fit (parameters, options, etc...) are specified in the; 70 ROOT::Math::FitConfig class.; 71 After fitting the config of the fit will be modified to have the new values the resulting; 72 parameter of the fit with step sizes equal to the errors. FitConfig can be preserved with; 7",MatchSource.WIKI,doc/master/Fitter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html
Safety,avoid,avoid,"pedef ROOT::Math::IParametricFunctionMultiDimTempl<ROOT::Double_v> IModelFunction_v;; 86 typedef ROOT::Math::IParamMultiGradFunctionTempl<ROOT::Double_v> IGradModelFunction_v;; 87#else; 88 typedef ROOT::Math::IParamMultiFunction IModelFunction_v;; 89 typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction_v;; 90#endif; 91 typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction;; 92 typedef ROOT::Math::IParamFunction IModel1DFunction;; 93 typedef ROOT::Math::IParamGradFunction IGradModel1DFunction;; 94 ; 95 typedef ROOT::Math::IMultiGenFunction BaseFunc;; 96 typedef ROOT::Math::IMultiGradFunction BaseGradFunc;; 97 ; 98 ; 99 /**; 100 Default constructor; 101 */; 102 Fitter () {}; 103 ; 104 /**; 105 Constructor from a result; 106 */; 107 Fitter (const std::shared_ptr<FitResult> & result);; 108 ; 109 ; 110 /**; 111 Destructor.; 112 Make it virtual in case users derive from Fitter class to extend it by adding new methods.; 113 This is needed to avoid a warning seen when doing from Python; 114 (see ROOT issue [#12391](https://github.com/root-project/root/issues/12391) ).; 115 Note that the Fitter class does not provide virtual functions to be re-implemented by derived classes.; 116 */; 117 virtual ~Fitter () {}; 118 ; 119 /**; 120 Copy constructor (disabled, class is not copyable); 121 */; 122 Fitter(const Fitter &) = delete;; 123 ; 124 /**; 125 Assignment operator (disabled, class is not copyable); 126 */; 127 Fitter & operator = (const Fitter &) = delete;; 128 ; 129 ; 130public:; 131 ; 132 /**; 133 fit a data set using any generic model function; 134 If data set is binned a least square fit is performed; 135 If data set is unbinned a maximum likelihood fit (not extended) is done; 136 Pre-requisite on the function:; 137 it must implement the 1D or multidimensional parametric function interface.; 138 Note that both the input data and the function object are copied by the Fitter.; 139 */; 140 template <class Data, class Function,; 141 class cond = typename std",MatchSource.WIKI,doc/master/Fitter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html
Security,access,access, 391 /**; 392 get fit result; 393 */; 394 const FitResult & Result() const {; 395 assert( fResult.get() );; 396 return *fResult;; 397 }; 398 ; 399 ; 400 /**; 401 perform an error analysis on the result using the Hessian; 402 Errors are obtained from the inverse of the Hessian matrix; 403 To be called only after fitting and when a minimizer supporting the Hessian calculations is used; 404 otherwise an error (false) is returned.; 405 A new FitResult with the Hessian result will be produced; 406 */; 407 bool CalculateHessErrors();; 408 ; 409 /**; 410 perform an error analysis on the result using MINOS; 411 To be called only after fitting and when a minimizer supporting MINOS is used; 412 otherwise an error (false) is returned.; 413 The result will be appended in the fit result class; 414 Optionally a vector of parameter indices can be passed for selecting; 415 the parameters to analyse using FitConfig::SetMinosErrors; 416 */; 417 bool CalculateMinosErrors();; 418 ; 419 /**; 420 access to the fit configuration (const method); 421 */; 422 const FitConfig & Config() const { return fConfig; }; 423 ; 424 /**; 425 access to the configuration (non const method); 426 */; 427 FitConfig & Config() { return fConfig; }; 428 ; 429 /**; 430 query if fit is binned. In cse of false the fit can be unbinned; 431 or is not defined (like in case of fitting through a ROOT::Fit::Fitter::FitFCN); 432 */; 433 bool IsBinFit() const { return fBinFit; }; 434 ; 435 /**; 436 return pointer to last used minimizer; 437 (is NULL in case fit is not yet done); 438 This pointer is guaranteed to be valid as far as the fitter class is valid and a new fit is not redone.; 439 To be used only after fitting.; 440 The pointer should not be stored and will be invalided after performing a new fitting.; 441 In this case a new instance of ROOT::Math::Minimizer will be re-created and can be; 442 obtained calling again GetMinimizer(); 443 */; 444 ROOT::Math::Minimizer * GetMinimizer() const { return fMinimizer.get(),MatchSource.WIKI,doc/master/Fitter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html
Testability,log,log-likelihood,"::EExecutionPolicy::kSequential) {; 158 return LeastSquareFit(data, executionPolicy);; 159 }; 160 ; 161 /**; 162 Fit a binned data set using a least square fit.; 163 Pass the input data using a `shared_ptr` for NOT copying the input data.; 164 */; 165 bool Fit(const std::shared_ptr<BinData> & data, const ROOT::EExecutionPolicy &executionPolicy = ROOT::EExecutionPolicy::kSequential) {; 166 return LeastSquareFit(data, executionPolicy);; 167 }; 168 ; 169 /**; 170 Fit a binned data set using a least square fit copying the input data.; 171 */; 172 bool LeastSquareFit(const BinData & data, const ROOT::EExecutionPolicy &executionPolicy = ROOT::EExecutionPolicy::kSequential) {; 173 SetData(data);; 174 return DoLeastSquareFit(executionPolicy);; 175 }; 176 /**; 177 Fit a binned data set using a least square fit NOT copying the input data.; 178 */; 179 bool LeastSquareFit(const std::shared_ptr<BinData> & data, const ROOT::EExecutionPolicy &executionPolicy = ROOT::EExecutionPolicy::kSequential) {; 180 SetData(data);; 181 return DoLeastSquareFit(executionPolicy);; 182 }; 183 ; 184 /**; 185 Fit an un-binned data set using the negative log-likelihood method.; 186 This function copies the input data.; 187 */; 188 bool Fit(const UnBinData & data, bool extended = false, const ROOT::EExecutionPolicy &executionPolicy = ROOT::EExecutionPolicy::kSequential) {; 189 return LikelihoodFit(data, extended, executionPolicy);; 190 }; 191 /**; 192 Fit an un-binned data set using the negative log-likelihood method.; 193 This function uses a `shared_ptr` to avoid copying the input data.; 194 */; 195 bool Fit(const std::shared_ptr<UnBinData> & data, bool extended = false, const ROOT::EExecutionPolicy &executionPolicy = ROOT::EExecutionPolicy::kSequential) {; 196 return LikelihoodFit(data, extended, executionPolicy);; 197 }; 198 ; 199 /**; 200 Binned Likelihood fit copying the input data.; 201 Default is extended.; 202 */; 203 bool LikelihoodFit(const BinData &data, bool extended = true,; 204 const RO",MatchSource.WIKI,doc/master/Fitter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html
Usability,simpl,simple,"332 ; 333 ; 334 /**; 335 fit using user provided FCN with Minuit-like interface; 336 If npar = 0 it is assumed that the parameters are specified in the parameter settings created before; 337 For the options same consideration as in the previous method; 338 */; 339 typedef void (* MinuitFCN_t )(int &npar, double *gin, double &f, double *u, int flag);; 340 bool FitFCN( MinuitFCN_t fcn, int npar = 0, const double *params = nullptr, unsigned int dataSize = 0, int fitType = 0);; 341 ; 342 /**; 343 set objective function using user provided FCN with Minuit-like interface; 344 If npar = 0 it is assumed that the parameters are specified in the parameter settings created before; 345 For the options same consideration as in the previous method; 346 */; 347 bool SetFCN( MinuitFCN_t fcn, int npar = 0, const double *params = nullptr, unsigned int dataSize = 0, int fitType = 0);; 348 ; 349 /**; 350 Perform a fit with the previously set FCN function. Require SetFCN before; 351 */; 352 bool FitFCN();; 353 ; 354 /**; 355 Perform a simple FCN evaluation. FitResult will be modified and contain the value of the FCN; 356 */; 357 bool EvalFCN();; 358 ; 359 ; 360 ; 361 /**; 362 Set the fitted function (model function) from a parametric function interface; 363 */; 364 void SetFunction(const IModelFunction & func, bool useGradient = false);; 365 ; 366 /**; 367 Set the fitted function (model function) from a vectorized parametric function interface; 368 */; 369#ifdef R__HAS_VECCORE; 370 template <class NotCompileIfScalarBackend = std::enable_if<!(std::is_same<double, ROOT::Double_v>::value)>>; 371 void SetFunction(const IModelFunction_v &func, bool useGradient = false);; 372 ; 373 template <class NotCompileIfScalarBackend = std::enable_if<!(std::is_same<double, ROOT::Double_v>::value)>>; 374 void SetFunction(const IGradModelFunction_v &func, bool useGradient = true);; 375#endif; 376 /**; 377 Set the fitted function from a parametric 1D function interface; 378 */; 379 void SetFunction(const IM",MatchSource.WIKI,doc/master/Fitter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html
Integrability,depend,dependency,". ROOT: math/mathcore/src/FitUtil.cxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Functions ; FitUtil.cxx File Reference. #include ""Fit/FitUtil.h""; #include ""Fit/BinData.h""; #include ""Fit/UnBinData.h""; #include ""Math/IFunctionfwd.h""; #include ""Math/IParamFunction.h""; #include ""Math/Integrator.h""; #include ""Math/IntegratorMultiDim.h""; #include ""Math/WrappedFunction.h""; #include ""Math/OneDimFunctionAdapter.h""; #include ""Math/RichardsonDerivator.h""; #include ""Math/Error.h""; #include ""Math/Util.h""; #include <limits>; #include <cmath>; #include <cassert>; #include <algorithm>; #include <numeric>; #include ""TROOT.h"". Include dependency graph for FitUtil.cxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  ROOT::Fit::FitUtil::ParamDerivFunc< GradFunc >;  ; class  ROOT::Fit::FitUtil::SimpleGradientCalculator;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Fit;  Namespace for the fitting classes. ;  ; namespace  ROOT::Fit::FitUtil;  namespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ;  . Functions; template<class GFunc > ; void ROOT::Fit::FitUtil::CalculateGradientIntegral (const GFunc &gfunc, const double *x1, const double *x2, const double *p, double *g);  ; bool ROOT::Fit::FitUtil::CheckInfNaNValue (double &rval);  ; double ROOT::Fit::FitUtil::CorrectValue (double rval);  . mathmathcoresrcFitUtil.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/FitUtil_8cxx.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/FitUtil_8cxx.html
Performance,load,load,". ROOT: tutorials/foam/foam_demopers.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. foam_demopers.C File ReferenceTutorials » FOAM tutorials. Detailed Description; This simple macro demonstrates persistency of FOAM object. ; First run macro foam_demo.C to create file foam_demo.root with FOAM object.; Next type root -l foam_demopers.C from shell command line; ; #include ""Riostream.h""; #include ""TFile.h""; #include ""TFoam.h""; #include ""TROOT.h""; #include ""TSystem.h""; #include ""TFoamIntegrand.h""; ; ; Int_t foam_demopers(); {; ; // need to load the foam_demo tutorial for the definition of the function; TString macroName = gROOT->GetTutorialDir();; macroName.Append(""/foam/foam_demo.C"");; gROOT->ProcessLine(TString::Format("".L %s+"",macroName.Data()));; ; //******************************************; cout<<""====================== TestVector ================================""<<endl;; TFile fileA(""foam_demo.root"");; fileA.cd();; cout<<""------------------------------------------------------------------""<<endl;; fileA.ls();; cout<<""------------------------------------------------------------------""<<endl;; fileA.Map();; cout<<""------------------------------------------------------------------""<<endl;; fileA.ShowStreamerInfo();; cout<<""------------------------------------------------------------------""<<endl;; fileA.GetListOfKeys()->Print();; cout<<""------------------------------------------------------------------""<<endl;; //*******************************************; TFoam *FoamX = (TFoam*)fileA.Get(""FoamX"");; //*******************************************; // FoamX->PrintCells();; FoamX->CheckAll(1);; ; //N.B. the integrand functions need to be reset; // because cannot be made persistent; TFoamIntegrand * rho = (TFoamIntegrand*) gROOT->ProcessLine(""return new TFDISTR();"");; FoamX->SetRho(rho);; ; Double_t MCvect[2]; // 2-dim vector generated in the MC run; ; for(long loop=0; loop<50000; loop++){; FoamX->MakeEvent(); // generat",MatchSource.WIKI,doc/master/foam__demopers_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/foam__demopers_8C.html
Usability,simpl,simple,". ROOT: tutorials/foam/foam_demopers.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. foam_demopers.C File ReferenceTutorials » FOAM tutorials. Detailed Description; This simple macro demonstrates persistency of FOAM object. ; First run macro foam_demo.C to create file foam_demo.root with FOAM object.; Next type root -l foam_demopers.C from shell command line; ; #include ""Riostream.h""; #include ""TFile.h""; #include ""TFoam.h""; #include ""TROOT.h""; #include ""TSystem.h""; #include ""TFoamIntegrand.h""; ; ; Int_t foam_demopers(); {; ; // need to load the foam_demo tutorial for the definition of the function; TString macroName = gROOT->GetTutorialDir();; macroName.Append(""/foam/foam_demo.C"");; gROOT->ProcessLine(TString::Format("".L %s+"",macroName.Data()));; ; //******************************************; cout<<""====================== TestVector ================================""<<endl;; TFile fileA(""foam_demo.root"");; fileA.cd();; cout<<""------------------------------------------------------------------""<<endl;; fileA.ls();; cout<<""------------------------------------------------------------------""<<endl;; fileA.Map();; cout<<""------------------------------------------------------------------""<<endl;; fileA.ShowStreamerInfo();; cout<<""------------------------------------------------------------------""<<endl;; fileA.GetListOfKeys()->Print();; cout<<""------------------------------------------------------------------""<<endl;; //*******************************************; TFoam *FoamX = (TFoam*)fileA.Get(""FoamX"");; //*******************************************; // FoamX->PrintCells();; FoamX->CheckAll(1);; ; //N.B. the integrand functions need to be reset; // because cannot be made persistent; TFoamIntegrand * rho = (TFoamIntegrand*) gROOT->ProcessLine(""return new TFDISTR();"");; FoamX->SetRho(rho);; ; Double_t MCvect[2]; // 2-dim vector generated in the MC run; ; for(long loop=0; loop<50000; loop++){; FoamX->MakeEvent(); // generat",MatchSource.WIKI,doc/master/foam__demopers_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/foam__demopers_8C.html
Testability,test,testing,"LSE)Load a shared library.Definition TSystem.cxx:1857; ; ; #include ""Riostream.h""; #include ""TFile.h""; #include ""TFoam.h""; #include ""TH1.h""; #include ""TMath.h""; #include ""TFoamIntegrand.h""; #include ""TRandom3.h""; ; class TFDISTR: public TFoamIntegrand {; public:; TFDISTR(){};; Double_t Density(int nDim, Double_t *Xarg){; // Integrand for mFOAM; Double_t Fun1,Fun2,R1,R2;; Double_t pos1=1e0/3e0;; Double_t pos2=2e0/3e0;; Double_t Gam1= 0.100e0; // as in JPC; Double_t Gam2= 0.100e0; // as in JPC; Double_t sPi = sqrt(TMath::Pi());; Double_t xn1=1e0;; Double_t xn2=1e0;; int i;; R1=0;; R2=0;; for(i = 0 ; i<nDim ; i++){; R1=R1+(Xarg[i] -pos1)*(Xarg[i] -pos1);; R2=R2+(Xarg[i] -pos2)*(Xarg[i] -pos2);; xn1=xn1*Gam1*sPi;; xn2=xn2*Gam2*sPi;; }; R1 = sqrt(R1);; R2 = sqrt(R2);; Fun1 = exp(-(R1*R1)/(Gam1*Gam1))/xn1; // Gaussian delta-like profile; Fun2 = exp(-(R2*R2)/(Gam2*Gam2))/xn2; // Gaussian delta-like profile; return 0.5e0*(Fun1+ Fun2);; }; ClassDef(TFDISTR,1) //Class of testing functions for FOAM; };; ClassImp(TFDISTR); ; Int_t foam_demo(); {; TFile RootFile(""foam_demo.root"",""RECREATE"",""histograms"");; long loop;; Double_t MCresult,MCerror,MCwt;; //-----------------------------------------; long NevTot = 50000; // Total MC statistics; Int_t kDim = 2; // total dimension; Int_t nCells = 500; // Number of Cells; Int_t nSampl = 200; // Number of MC events per cell in build-up; Int_t nBin = 8; // Number of bins in build-up; Int_t OptRej = 1; // Wted events for OptRej=0; wt=1 for OptRej=1 (default); Int_t OptDrive = 2; // (D=2) Option, type of Drive =0,1,2 for TrueVol,Sigma,WtMax; Int_t EvPerBin = 25; // Maximum events (equiv.) per bin in buid-up; Int_t Chat = 1; // Chat level; //-----------------------------------------; TRandom *PseRan = new TRandom3(); // Create random number generator; TFoam *FoamX = new TFoam(""FoamX""); // Create Simulator; TFoamIntegrand *rho= new TFDISTR();; PseRan->SetSeed(4357);; //-----------------------------------------; cout<<""***** Demonstration Progra",MatchSource.WIKI,doc/master/foam__demo_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/foam__demo_8C.html
Modifiability,variab,variable,". ROOT: tutorials/graphics/formula1.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. formula1.C File ReferenceTutorials » Graphics tutorials. Detailed Description; Display interpreted functions. . ; void formula1() {; TCanvas *c1 = new TCanvas(""c1"",""Example with Formula"",200,10,700,500);; //; // We create a formula object and compute the value of this formula; // for two different values of the x variable.; //; auto form1 = new TFormula(""form1"",""sqrt(abs(x))"");; form1->Eval(2);; form1->Eval(-45);; //; // Create a one dimensional function and draw it; //; auto fun1 = new TF1(""fun1"",""abs(sin(x)/x)"",0,10);; c1->SetGridx();; c1->SetGridy();; fun1->Draw();; c1->Update();; //; // Before leaving this demo, we print the list of objects known to ROOT; //; if (gObjectTable) gObjectTable->Print();; }; gObjectTableR__EXTERN TObjectTable * gObjectTableDefinition TObjectTable.h:82; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TFormulaThe Formula class.Definition TFormula.h:89; TObjectTable::Printvoid Print(Option_t *option="""") const overridePrint the object table.Definition TObjectTable.cxx:120; c1return c1Definition legend1.C:41; formula1Definition formula1.py:1; AuthorRene Brun ; Definition in file formula1.C. tutorialsgraphicsformula1.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/formula1_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/formula1_8C.html
Modifiability,variab,variable,". ROOT: tutorials/pyroot/formula1.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; formula1.py File ReferenceTutorials » PyRoot tutorials. Detailed Description; TF1 example. . ; from ROOT import TCanvas, TFormula, TF1; from ROOT import gROOT, gObjectTable; ; c1 = TCanvas( 'c1', 'Example with Formula', 200, 10, 700, 500 ); ; # We create a formula object and compute the value of this formula; # for two different values of the x variable.; form1 = TFormula( 'form1', 'sqrt(abs(x))' ); form1.Eval( 2 ); form1.Eval( -45 ); ; # Create a one dimensional function and draw it; fun1 = TF1( 'fun1', 'abs(sin(x)/x)', 0, 10 ); c1.SetGridx(); c1.SetGridy(); fun1.Draw(); c1.Update(); ; # Before leaving this demo, we print the list of objects known to ROOT; #; if ( gObjectTable ):; gObjectTable.Print(); TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TFormulaThe Formula class.Definition TFormula.h:89; AuthorWim Lavrijsen ; Definition in file formula1.py. tutorialspyrootformula1.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/formula1_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/formula1_8py.html
Integrability,wrap,wrap,". ROOT: math/mathcore/inc/Math/Functor.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functor.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Author: L. Moneta Mon Nov 13 15:58:13 2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for Functor classes.; 12// designed is inspired by the Loki Functor; 13 ; 14#ifndef ROOT_Math_Functor; 15#define ROOT_Math_Functor; 16 ; 17#include ""Math/IFunction.h""; 18 ; 19// #ifndef Root_Math_StaticCheck; 20// #include ""Math/StaticCheck.h""; 21// #endif; 22 ; 23#include <memory>; 24#include <functional>; 25#include <vector>; 26 ; 27namespace ROOT {; 28 ; 29namespace Math {; 30 ; 31/**; 32 Documentation for class Functor class.; 33 It is used to wrap in a very simple and convenient way multi-dimensional function objects.; 34 It can wrap all the following types:; 35 <ul>; 36 <li> any C++ callable object implementation double operator()( const double * ); 37 <li> a free C function of type double ()(const double * ); 38 <li> an std::function of type std::function<double (double const *)>; 39 <li> a member function with the correct signature like Foo::Eval(const double * ).; 40 In this case one pass the object pointer and a pointer to the member function (&Foo::Eval); 41 </ul>; 42 The function dimension is required when constructing the functor.; 43 ; 44 @ingroup GenFunc; 45 ; 46 */; 47class Functor : public IBaseFunctionMultiDim {; 48 ; 49public:; 50 ; 51 /// Default constructor.; 52 Functor () {}; 53 ; 54 /// Construct from a pointer to member function (multi-dim type).; 55 template <class PtrObj, typename MemFn>; 56 Functor(const PtrObj& p, MemFn memFn, unsigned int dim ); 57 : fDim{dim}, fFunc{std::bind(memFn, p, std::placeholders::_1)}; 58 {}; 59 ; 60 /// Cons",MatchSource.WIKI,doc/master/Functor_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Functor_8h_source.html
Usability,simpl,simple,". ROOT: math/mathcore/inc/Math/Functor.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functor.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Author: L. Moneta Mon Nov 13 15:58:13 2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for Functor classes.; 12// designed is inspired by the Loki Functor; 13 ; 14#ifndef ROOT_Math_Functor; 15#define ROOT_Math_Functor; 16 ; 17#include ""Math/IFunction.h""; 18 ; 19// #ifndef Root_Math_StaticCheck; 20// #include ""Math/StaticCheck.h""; 21// #endif; 22 ; 23#include <memory>; 24#include <functional>; 25#include <vector>; 26 ; 27namespace ROOT {; 28 ; 29namespace Math {; 30 ; 31/**; 32 Documentation for class Functor class.; 33 It is used to wrap in a very simple and convenient way multi-dimensional function objects.; 34 It can wrap all the following types:; 35 <ul>; 36 <li> any C++ callable object implementation double operator()( const double * ); 37 <li> a free C function of type double ()(const double * ); 38 <li> an std::function of type std::function<double (double const *)>; 39 <li> a member function with the correct signature like Foo::Eval(const double * ).; 40 In this case one pass the object pointer and a pointer to the member function (&Foo::Eval); 41 </ul>; 42 The function dimension is required when constructing the functor.; 43 ; 44 @ingroup GenFunc; 45 ; 46 */; 47class Functor : public IBaseFunctionMultiDim {; 48 ; 49public:; 50 ; 51 /// Default constructor.; 52 Functor () {}; 53 ; 54 /// Construct from a pointer to member function (multi-dim type).; 55 template <class PtrObj, typename MemFn>; 56 Functor(const PtrObj& p, MemFn memFn, unsigned int dim ); 57 : fDim{dim}, fFunc{std::bind(memFn, p, std::placeholders::_1)}; 58 {}; 59 ; 60 /// Cons",MatchSource.WIKI,doc/master/Functor_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Functor_8h_source.html
Testability,log,logarithmic,". ROOT: tutorials/graphics/gaxis2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. gaxis2.C File ReferenceTutorials » Graphics tutorials. Detailed Description; Example illustrating how to draw TGaxis with labels defined by a function. . ; void gaxis2(){; gStyle->SetOptStat(0);; ; TH2F *h2 = new TH2F(""h"",""Axes"",100,0,10,100,-2,2);; h2->Draw();; ; TF1 *f1 = new TF1(""f1"",""-x"",-10,10);; TGaxis *A1 = new TGaxis(0,2,10,2,""f1"",510,""-"");; A1->SetTitle(""axis with decreasing values"");; A1->Draw();; ; TF1 *f2 = new TF1(""f2"",""exp(x)"",0,2);; TGaxis *A2 = new TGaxis(1,1,9,1,""f2"");; A2->SetTitle(""exponential axis"");; A2->SetLabelSize(0.03);; A2->SetTitleSize(0.03);; A2->SetTitleOffset(1.2);; A2->Draw();; ; TF1 *f3 = new TF1(""f3"",""log10(x)"",1,1000);; TGaxis *A3 = new TGaxis(2,-2,2,0,""f3"",505,""G"");; A3->SetTitle(""logarithmic axis"");; A3->SetLabelSize(0.03);; A3->SetTitleSize(0.03);; A3->SetTitleOffset(1.2);; A3->Draw();; }; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TF11-Dim function classDefinition TF1.h:233; TGaxisThe axis painter class.Definition TGaxis.h:24; TGaxis::SetTitleOffsetvoid SetTitleOffset(Float_t titleoffset=1)Definition TGaxis.h:128; TGaxis::SetTitleSizevoid SetTitleSize(Float_t titlesize)Definition TGaxis.h:129; TGaxis::SetTitlevirtual void SetTitle(const char *title="""")Change the title of the axis.Definition TGaxis.cxx:2942; TGaxis::SetLabelSizevoid SetLabelSize(Float_t labelsize)Definition TGaxis.h:107; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; f1TF1 * f1Definition legend1.C:11; AuthorOlivier Couet ; Definition in file gaxis2.C. tutorialsgraphicsgaxis2.C. ROOT master - ",MatchSource.WIKI,doc/master/gaxis2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/gaxis2_8C.html
Safety,avoid,avoid,". ROOT: tutorials/graphics/gaxis.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. gaxis.C File ReferenceTutorials » Graphics tutorials. Detailed Description; Simple example illustrating how to draw TGaxis objects in various formats. . ; void gaxis(){; auto c1 = new TCanvas(""c1"",""Examples of TGaxis"",10,10,700,500);; c1->Range(-10,-1,10,1);; ; auto axis1 = new TGaxis(-4.5,-0.2,5.5,-0.2,-6,8,510,"""");; axis1->Draw();; ; auto axis2 = new TGaxis(-4.5,0.2,5.5,0.2,0.001,10000,510,""G"");; axis2->Draw();; ; auto axis3 = new TGaxis(-9,-0.8,-9,0.8,-8,8,50510,"""");; axis3->SetTitle(""axis3"");; axis3->SetTitleOffset(0.5);; axis3->Draw();; ; auto axis4 = new TGaxis(-7,-0.8,-7,0.8,1,10000,50510,""G"");; axis4->SetTitle(""axis4"");; axis4->Draw();; ; auto axis5 = new TGaxis(-4.5,-0.6,5.5,-0.6,1.2,1.32,80506,""-+"");; axis5->SetLabelSize(0.03);; axis5->SetTextFont(72);; axis5->Draw();; ; auto axis6 = new TGaxis(-4.5,0.5,5.5,0.5,100,900,50510,""-"");; axis6->Draw();; ; auto axis7 = new TGaxis(-5.5,0.85,5.5,0.85,0,4.3e-6,510,"""");; axis7->Draw();; ; auto axis8 = new TGaxis(8,-0.8,8,0.8,0,9000,50510,""+L"");; axis8->Draw();; ; // One can make a vertical axis going top->bottom. However the two x values should be; // slightly different to avoid labels overlapping.; auto axis9 = new TGaxis(6.5,0.8,6.499,-0.8,0,90,50510,""-"");; axis9->Draw();; }; TCanvasThe Canvas class.Definition TCanvas.h:23; TGaxisThe axis painter class.Definition TGaxis.h:24; c1return c1Definition legend1.C:41; AuthorsRene Brun, Olivier Couet ; Definition in file gaxis.C. tutorialsgraphicsgaxis.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/gaxis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/gaxis_8C.html
Deployability,configurat,configuration,"return gOpts[algoname];; 64 return *opt;; 65 }; 66 ; 67 void GenAlgoOptions::PrintAllDefault(std::ostream & os) {; 68 const OptionsMap & gOpts = GenAlgoOptUtil::gAlgoOptions;; 69 for ( OptionsMap::const_iterator pos = gOpts.begin();; 70 pos != gOpts.end(); ++pos) {; 71 os << ""Default specific options for algorithm "" << pos->first << "" : "" << std::endl;; 72 (pos->second).Print(os);; 73 }; 74 }; 75 ; 76 } // end namespace Math; 77 ; 78} // end namespace ROOT; 79 ; GenAlgoOptions.h; ROOT::Math::GenAlgoOptionsclass implementing generic options for a numerical algorithm Just store the options in a map of strin...Definition GenAlgoOptions.h:32; ROOT::Math::GenAlgoOptions::PrintAllDefaultstatic void PrintAllDefault(std::ostream &os=std::cout)print all the default optionsDefinition GenAlgoOptions.cxx:67; ROOT::Math::GenAlgoOptions::Printvoid Print(std::ostream &os=std::cout) const overrideprint optionsDefinition GenAlgoOptions.h:114; ROOT::Math::GenAlgoOptions::Defaultstatic IOptions & Default(const char *algoname)Definition GenAlgoOptions.cxx:55; ROOT::Math::GenAlgoOptions::FindDefaultstatic IOptions * FindDefault(const char *algoname)Definition GenAlgoOptions.cxx:48; ROOT::Math::IOptionsGeneric interface for defining configuration options of a numerical algorithm.Definition IOptions.h:28; MathNamespace for new Math classes and functions.; ROOT::Math::GenAlgoOptUtil::gAlgoOptionsstatic OptionsMap gAlgoOptionsDefinition GenAlgoOptions.cxx:30; ROOT::Math::GenAlgoOptUtil::DoFindDefaultIOptions * DoFindDefault(std::string &algoname, OptionsMap &gOpts)Definition GenAlgoOptions.cxx:33; ROOT::Math::OptionsMapstd::map< std::string, ROOT::Math::GenAlgoOptions > OptionsMapDefinition GenAlgoOptions.cxx:25; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoresrcGenAlgoOptions.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/GenAlgoOptions_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenAlgoOptions_8cxx_source.html
Integrability,interface,interface,"return gOpts[algoname];; 64 return *opt;; 65 }; 66 ; 67 void GenAlgoOptions::PrintAllDefault(std::ostream & os) {; 68 const OptionsMap & gOpts = GenAlgoOptUtil::gAlgoOptions;; 69 for ( OptionsMap::const_iterator pos = gOpts.begin();; 70 pos != gOpts.end(); ++pos) {; 71 os << ""Default specific options for algorithm "" << pos->first << "" : "" << std::endl;; 72 (pos->second).Print(os);; 73 }; 74 }; 75 ; 76 } // end namespace Math; 77 ; 78} // end namespace ROOT; 79 ; GenAlgoOptions.h; ROOT::Math::GenAlgoOptionsclass implementing generic options for a numerical algorithm Just store the options in a map of strin...Definition GenAlgoOptions.h:32; ROOT::Math::GenAlgoOptions::PrintAllDefaultstatic void PrintAllDefault(std::ostream &os=std::cout)print all the default optionsDefinition GenAlgoOptions.cxx:67; ROOT::Math::GenAlgoOptions::Printvoid Print(std::ostream &os=std::cout) const overrideprint optionsDefinition GenAlgoOptions.h:114; ROOT::Math::GenAlgoOptions::Defaultstatic IOptions & Default(const char *algoname)Definition GenAlgoOptions.cxx:55; ROOT::Math::GenAlgoOptions::FindDefaultstatic IOptions * FindDefault(const char *algoname)Definition GenAlgoOptions.cxx:48; ROOT::Math::IOptionsGeneric interface for defining configuration options of a numerical algorithm.Definition IOptions.h:28; MathNamespace for new Math classes and functions.; ROOT::Math::GenAlgoOptUtil::gAlgoOptionsstatic OptionsMap gAlgoOptionsDefinition GenAlgoOptions.cxx:30; ROOT::Math::GenAlgoOptUtil::DoFindDefaultIOptions * DoFindDefault(std::string &algoname, OptionsMap &gOpts)Definition GenAlgoOptions.cxx:33; ROOT::Math::OptionsMapstd::map< std::string, ROOT::Math::GenAlgoOptions > OptionsMapDefinition GenAlgoOptions.cxx:25; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoresrcGenAlgoOptions.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/GenAlgoOptions_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenAlgoOptions_8cxx_source.html
Modifiability,config,configuration,"return gOpts[algoname];; 64 return *opt;; 65 }; 66 ; 67 void GenAlgoOptions::PrintAllDefault(std::ostream & os) {; 68 const OptionsMap & gOpts = GenAlgoOptUtil::gAlgoOptions;; 69 for ( OptionsMap::const_iterator pos = gOpts.begin();; 70 pos != gOpts.end(); ++pos) {; 71 os << ""Default specific options for algorithm "" << pos->first << "" : "" << std::endl;; 72 (pos->second).Print(os);; 73 }; 74 }; 75 ; 76 } // end namespace Math; 77 ; 78} // end namespace ROOT; 79 ; GenAlgoOptions.h; ROOT::Math::GenAlgoOptionsclass implementing generic options for a numerical algorithm Just store the options in a map of strin...Definition GenAlgoOptions.h:32; ROOT::Math::GenAlgoOptions::PrintAllDefaultstatic void PrintAllDefault(std::ostream &os=std::cout)print all the default optionsDefinition GenAlgoOptions.cxx:67; ROOT::Math::GenAlgoOptions::Printvoid Print(std::ostream &os=std::cout) const overrideprint optionsDefinition GenAlgoOptions.h:114; ROOT::Math::GenAlgoOptions::Defaultstatic IOptions & Default(const char *algoname)Definition GenAlgoOptions.cxx:55; ROOT::Math::GenAlgoOptions::FindDefaultstatic IOptions * FindDefault(const char *algoname)Definition GenAlgoOptions.cxx:48; ROOT::Math::IOptionsGeneric interface for defining configuration options of a numerical algorithm.Definition IOptions.h:28; MathNamespace for new Math classes and functions.; ROOT::Math::GenAlgoOptUtil::gAlgoOptionsstatic OptionsMap gAlgoOptionsDefinition GenAlgoOptions.cxx:30; ROOT::Math::GenAlgoOptUtil::DoFindDefaultIOptions * DoFindDefault(std::string &algoname, OptionsMap &gOpts)Definition GenAlgoOptions.cxx:33; ROOT::Math::OptionsMapstd::map< std::string, ROOT::Math::GenAlgoOptions > OptionsMapDefinition GenAlgoOptions.cxx:25; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoresrcGenAlgoOptions.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/GenAlgoOptions_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenAlgoOptions_8cxx_source.html
Availability,error,error,"size_t InputHeight, size_t InputWidth, size_t Depth,; 91 size_t Height, size_t Width, size_t WeightsNSlices, std::vector<size_t> WeightsNRows,; 92 std::vector<size_t> WeightsNCols, size_t BiasesNSlices, std::vector<size_t> BiasesNRows,; 93 std::vector<size_t> BiasesNCols, size_t OutputNSlices, size_t OutputNRows, size_t OutputNCols,; 94 EInitialization Init);; 95 ; 96 /*! Copy the layer provided as a pointer */; 97 VGeneralLayer(VGeneralLayer<Architecture_t> *layer);; 98 ; 99 /*! Copy Constructor */; 100 VGeneralLayer(const VGeneralLayer &);; 101 ; 102 /*! Virtual Destructor. */; 103 virtual ~VGeneralLayer();; 104 ; 105 /*! Initialize the weights and biases according to the given initialization method. */; 106 virtual void Initialize();; 107 ; 108 /*! Computes activation of the layer for the given input. The input; 109 * must be in 3D tensor form with the different matrices corresponding to; 110 * different events in the batch. */; 111 virtual void Forward(Tensor_t &input, bool applyDropout = false) = 0;; 112 ; 113 /*! Backpropagates the error. Must only be called directly at the corresponding; 114 * call to Forward(...). */; 115 virtual void Backward(Tensor_t &gradients_backward, const Tensor_t &activations_backward ) = 0;; 116 ///// std::vector<Matrix_t> &inp1, std::vector<Matrix_t> &inp2) = 0;; 117 ; 118 /*! Reset some training flags after a loop on all batches; 119 Some layer (e.g. batchnormalization) might need to implement the function in case some operations; 120 are needed after looping an all batches */; 121 virtual void ResetTraining() {}; 122 ; 123 /*! Updates the weights and biases, given the learning rate */; 124 void Update(const Scalar_t learningRate);; 125 ; 126 /*! Updates the weights, given the gradients and the learning rate, */; 127 void UpdateWeights(const std::vector<Matrix_t> &weightGradients, const Scalar_t learningRate);; 128 ; 129 /*! Updates the biases, given the gradients and the learning rate. */; 130 void UpdateBiases(const std::vector<M",MatchSource.WIKI,doc/master/GeneralLayer_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GeneralLayer_8h_source.html
Deployability,integrat,integrated,". ROOT: tmva/tmva/inc/TMVA/DNN/GeneralLayer.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. GeneralLayer.h. Go to the documentation of this file. 1// @(#)root/tmva/tmva/dnn:$Id$; 2// Author: Vladimir Ilievski; 3 ; 4/**********************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 6 * Package: TMVA *; 7 * Class : TGeneralLayer *; 8 * *; 9 * *; 10 * Description: *; 11 * General Deep Neural Network Layer *; 12 * *; 13 * Authors (alphabetical): *; 14 * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; 15 * *; 16 * Copyright (c) 2005-2015: *; 17 * CERN, Switzerland *; 18 * U. of Victoria, Canada *; 19 * MPI-K Heidelberg, Germany *; 20 * U. of Bonn, Germany *; 21 * *; 22 * Redistribution and use in source and binary forms, with or without *; 23 * modification, are permitted according to the terms listed in LICENSE *; 24 * (see tmva/doc/LICENSE) *; 25 **********************************************************************************/; 26 ; 27#ifndef TMVA_DNN_GENERALLAYER; 28#define TMVA_DNN_GENERALLAYER; 29 ; 30#include <sstream>; 31#include <limits>; 32#include <vector>; 33#include <string>; 34 ; 35// for xml; 36#include ""TMVA/Tools.h""; 37#include ""TError.h"" // for R__ASSERT; 38 ; 39#include ""TMVA/DNN/Functions.h""; 40 ; 41namespace TMVA {; 42namespace DNN {; 43 ; 44/** \class VGeneralLayer; 45 Generic General Layer class.; 46 ; 47 This class represents the general class for all layers in the Deep Learning; 48 Module.; 49 */; 50template <typename Architecture_t>; 51class VGeneralLayer {; 52 ; 53 using Tensor_t = typename Architecture_t::Tensor_t;; 54 using Matrix_t = typename Architecture_t::Matrix_t;; 55 using Scalar_t = typename Architecture_t::Scalar_t;; 56 ; 57 ; 58protected:; 59 size_t fBatchSize; ///< Batch size used for training and evaluation; 60 ; 61 size_t fInputDepth; ///< The depth of the previous ",MatchSource.WIKI,doc/master/GeneralLayer_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GeneralLayer_8h_source.html
Integrability,integrat,integrated,". ROOT: tmva/tmva/inc/TMVA/DNN/GeneralLayer.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. GeneralLayer.h. Go to the documentation of this file. 1// @(#)root/tmva/tmva/dnn:$Id$; 2// Author: Vladimir Ilievski; 3 ; 4/**********************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 6 * Package: TMVA *; 7 * Class : TGeneralLayer *; 8 * *; 9 * *; 10 * Description: *; 11 * General Deep Neural Network Layer *; 12 * *; 13 * Authors (alphabetical): *; 14 * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; 15 * *; 16 * Copyright (c) 2005-2015: *; 17 * CERN, Switzerland *; 18 * U. of Victoria, Canada *; 19 * MPI-K Heidelberg, Germany *; 20 * U. of Bonn, Germany *; 21 * *; 22 * Redistribution and use in source and binary forms, with or without *; 23 * modification, are permitted according to the terms listed in LICENSE *; 24 * (see tmva/doc/LICENSE) *; 25 **********************************************************************************/; 26 ; 27#ifndef TMVA_DNN_GENERALLAYER; 28#define TMVA_DNN_GENERALLAYER; 29 ; 30#include <sstream>; 31#include <limits>; 32#include <vector>; 33#include <string>; 34 ; 35// for xml; 36#include ""TMVA/Tools.h""; 37#include ""TError.h"" // for R__ASSERT; 38 ; 39#include ""TMVA/DNN/Functions.h""; 40 ; 41namespace TMVA {; 42namespace DNN {; 43 ; 44/** \class VGeneralLayer; 45 Generic General Layer class.; 46 ; 47 This class represents the general class for all layers in the Deep Learning; 48 Module.; 49 */; 50template <typename Architecture_t>; 51class VGeneralLayer {; 52 ; 53 using Tensor_t = typename Architecture_t::Tensor_t;; 54 using Matrix_t = typename Architecture_t::Matrix_t;; 55 using Scalar_t = typename Architecture_t::Scalar_t;; 56 ; 57 ; 58protected:; 59 size_t fBatchSize; ///< Batch size used for training and evaluation; 60 ; 61 size_t fInputDepth; ///< The depth of the previous ",MatchSource.WIKI,doc/master/GeneralLayer_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GeneralLayer_8h_source.html
Modifiability,layers,layers,"*; 12 * *; 13 * Authors (alphabetical): *; 14 * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; 15 * *; 16 * Copyright (c) 2005-2015: *; 17 * CERN, Switzerland *; 18 * U. of Victoria, Canada *; 19 * MPI-K Heidelberg, Germany *; 20 * U. of Bonn, Germany *; 21 * *; 22 * Redistribution and use in source and binary forms, with or without *; 23 * modification, are permitted according to the terms listed in LICENSE *; 24 * (see tmva/doc/LICENSE) *; 25 **********************************************************************************/; 26 ; 27#ifndef TMVA_DNN_GENERALLAYER; 28#define TMVA_DNN_GENERALLAYER; 29 ; 30#include <sstream>; 31#include <limits>; 32#include <vector>; 33#include <string>; 34 ; 35// for xml; 36#include ""TMVA/Tools.h""; 37#include ""TError.h"" // for R__ASSERT; 38 ; 39#include ""TMVA/DNN/Functions.h""; 40 ; 41namespace TMVA {; 42namespace DNN {; 43 ; 44/** \class VGeneralLayer; 45 Generic General Layer class.; 46 ; 47 This class represents the general class for all layers in the Deep Learning; 48 Module.; 49 */; 50template <typename Architecture_t>; 51class VGeneralLayer {; 52 ; 53 using Tensor_t = typename Architecture_t::Tensor_t;; 54 using Matrix_t = typename Architecture_t::Matrix_t;; 55 using Scalar_t = typename Architecture_t::Scalar_t;; 56 ; 57 ; 58protected:; 59 size_t fBatchSize; ///< Batch size used for training and evaluation; 60 ; 61 size_t fInputDepth; ///< The depth of the previous layer or input.; 62 size_t fInputHeight; ///< The height of the previous layer or input.; 63 size_t fInputWidth; ///< The width of the previous layer or input.; 64 ; 65 size_t fDepth; ///< The depth of the layer.; 66 size_t fHeight; ///< The height of the layer.; 67 size_t fWidth; ///< The width of this layer.; 68 ; 69 bool fIsTraining; ///< Flag indicating the mode; 70 ; 71 std::vector<Matrix_t> fWeights; ///< The weights associated to the layer.; 72 std::vector<Matrix_t> fBiases; ///< The biases associated to the layer.; 73 ; 74 std::vector<Mat",MatchSource.WIKI,doc/master/GeneralLayer_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GeneralLayer_8h_source.html
Testability,assert,assert,"Gradients[i], -learningRate);; 453 }; 454}; 455 ; 456//_________________________________________________________________________________________________; 457template <typename Architecture_t>; 458auto VGeneralLayer<Architecture_t>::CopyWeights(const std::vector<Matrix_t> &otherWeights) -> void; 459{; 460 ; 461 for (size_t i = 0; i < fWeights.size(); i++) {; 462 Architecture_t::Copy(fWeights[i], otherWeights[i]);; 463 }; 464}; 465 ; 466//_________________________________________________________________________________________________; 467template <typename Architecture_t>; 468auto VGeneralLayer<Architecture_t>::CopyBiases(const std::vector<Matrix_t> &otherBiases) -> void; 469{; 470 for (size_t i = 0; i < fBiases.size(); i++) {; 471 Architecture_t::Copy(fBiases[i], otherBiases[i]);; 472 }; 473}; 474 ; 475//_________________________________________________________________________________________________; 476template <typename Architecture_t>; 477template <typename Arch>; 478void VGeneralLayer<Architecture_t>::CopyParameters(const VGeneralLayer<Arch> &layer); 479{; 480 //assert(!std::is_same<Arch, Architecture_t>::value);; 481 // copy weights from a different architecture- default generic implementation; 482 Architecture_t::CopyDiffArch(this->GetWeights(), layer.GetWeights());; 483 Architecture_t::CopyDiffArch(this->GetBiases(), layer.GetBiases());; 484 ; 485 // copy also the additional layer parameters; 486 auto params = layer.GetExtraLayerParameters();; 487 if (params.size() > 0) {; 488 auto paramsToCopy = GetExtraLayerParameters();; 489 Architecture_t::CopyDiffArch(paramsToCopy, params );; 490 SetExtraLayerParameters(paramsToCopy);; 491 }; 492}; 493 ; 494//_________________________________________________________________________________________________; 495template <typename Architecture_t>; 496auto VGeneralLayer<Architecture_t>::WriteTensorToXML(void * node, const char * name, const std::vector<Matrix_t> & tensor) -> void; 497{; 498 auto xmlengine = gTools().xmlengi",MatchSource.WIKI,doc/master/GeneralLayer_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GeneralLayer_8h_source.html
Usability,learn,learning,"e given initialization method. */; 106 virtual void Initialize();; 107 ; 108 /*! Computes activation of the layer for the given input. The input; 109 * must be in 3D tensor form with the different matrices corresponding to; 110 * different events in the batch. */; 111 virtual void Forward(Tensor_t &input, bool applyDropout = false) = 0;; 112 ; 113 /*! Backpropagates the error. Must only be called directly at the corresponding; 114 * call to Forward(...). */; 115 virtual void Backward(Tensor_t &gradients_backward, const Tensor_t &activations_backward ) = 0;; 116 ///// std::vector<Matrix_t> &inp1, std::vector<Matrix_t> &inp2) = 0;; 117 ; 118 /*! Reset some training flags after a loop on all batches; 119 Some layer (e.g. batchnormalization) might need to implement the function in case some operations; 120 are needed after looping an all batches */; 121 virtual void ResetTraining() {}; 122 ; 123 /*! Updates the weights and biases, given the learning rate */; 124 void Update(const Scalar_t learningRate);; 125 ; 126 /*! Updates the weights, given the gradients and the learning rate, */; 127 void UpdateWeights(const std::vector<Matrix_t> &weightGradients, const Scalar_t learningRate);; 128 ; 129 /*! Updates the biases, given the gradients and the learning rate. */; 130 void UpdateBiases(const std::vector<Matrix_t> &biasGradients, const Scalar_t learningRate);; 131 ; 132 /*! Updates the weight gradients, given some other weight gradients and learning rate. */; 133 void UpdateWeightGradients(const std::vector<Matrix_t> &weightGradients, const Scalar_t learningRate);; 134 ; 135 /*! Updates the bias gradients, given some other weight gradients and learning rate. */; 136 void UpdateBiasGradients(const std::vector<Matrix_t> &biasGradients, const Scalar_t learningRate);; 137 ; 138 /*! Copies the weights provided as an input. */; 139 void CopyWeights(const std::vector<Matrix_t> &otherWeights);; 140 ; 141 /*! Copies the biases provided as an input. */; 142 void CopyBiases(const std:",MatchSource.WIKI,doc/master/GeneralLayer_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GeneralLayer_8h_source.html
Availability,error,errors,"d the return value ...Definition GeneticMinimizer.cxx:368; ROOT::Math::GeneticMinimizer::SetRandomSeedvoid SetRandomSeed(int seed)Definition GeneticMinimizer.h:94; ROOT::Math::GeneticMinimizer::NFreeunsigned int NFree() const overridenumber of free variables (real dimension of the problem) this is <= Function().NDim() which is the to...Definition GeneticMinimizer.cxx:355; ROOT::Math::GeneticMinimizer::SetLimitedVariablebool SetLimitedVariable(unsigned int, const std::string &, double, double, double, double) overrideset a new upper/lower limited variable (override if minimizer supports them ) otherwise as default se...Definition GeneticMinimizer.cxx:146; ROOT::Math::GeneticMinimizer::SetOptionsvirtual void SetOptions(const ROOT::Math::MinimizerOptions &opt)Definition GeneticMinimizer.cxx:217; ROOT::Math::GeneticMinimizer::MinValuedouble MinValue() const overridereturn minimum function valueDefinition GeneticMinimizer.cxx:331; ROOT::Math::GeneticMinimizer::Errorsconst double * Errors() const overridereturn errors at the minimumDefinition GeneticMinimizer.cxx:366; ROOT::Math::GeneticMinimizer::NCallsunsigned int NCalls() const overridenumber of function calls to reach the minimumDefinition GeneticMinimizer.cxx:340; ROOT::Math::GeneticMinimizer::Minimizebool Minimize() overridemethod to perform the minimizationDefinition GeneticMinimizer.cxx:252; ROOT::Math::GeneticMinimizer::GetGeneticOptionsvoid GetGeneticOptions(ROOT::Math::MinimizerOptions &opt) constDefinition GeneticMinimizer.cxx:191; ROOT::Math::GeneticMinimizer::ProvidesErrorbool ProvidesError() const overrideminimizer provides error and error matrixDefinition GeneticMinimizer.cxx:365; ROOT::Math::GeneticMinimizer::SetVariablebool SetVariable(unsigned int ivar, const std::string &name, double val, double step) overrideset a new free variableDefinition GeneticMinimizer.cxx:153; ROOT::Math::GeneticMinimizer::fResultstd::vector< double > fResultDefinition GeneticMinimizer.h:109; ROOT::Math::GeneticMinimizer::fFitne",MatchSource.WIKI,doc/master/GeneticMinimizer_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GeneticMinimizer_8h_source.html
Integrability,interface,interface,"tion GeneticMinimizer.cxx:126; ROOT::Math::GeneticMinimizer::OptionsROOT::Math::MinimizerOptions Options() const overrideretrieve the minimizer options (implement derived class if needed)Definition GeneticMinimizer.cxx:185; ROOT::Math::GeneticMinimizer::fParametersGeneticMinimizerParameters fParametersDefinition GeneticMinimizer.h:111; ROOT::Math::GeneticMinimizer::SetFunctionvoid SetFunction(const ROOT::Math::IMultiGenFunction &func) overrideset the function to minimizeDefinition GeneticMinimizer.cxx:137; ROOT::Math::GeneticMinimizer::SetFixedVariablebool SetFixedVariable(unsigned int ivar, const std::string &name, double val) overrideset a new fixed variable (override if minimizer supports them )Definition GeneticMinimizer.cxx:165; ROOT::Math::IBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; ROOT::Math::MinimizerAbstract Minimizer class, defining the interface for the various minimizer (like Minuit2,...Definition Minimizer.h:119; ROOT::Math::Minimizer::SetFunctionvirtual void SetFunction(const ROOT::Math::IMultiGenFunction &func)=0set the function to minimize; TMVA::IFitterTargetInterface for a fitter 'target'.Definition IFitterTarget.h:44; TMVA::IntervalThe TMVA::Interval Class.Definition Interval.h:61; double; int; MathNamespace for new Math classes and functions.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; ROOT::Math::GeneticMinimizerParametersDefinition GeneticMinimizer.h:35; ROOT::Math::GeneticMinimizerParameters::fCyclesInt_t fCyclesDefinition GeneticMinimizer.h:39; ROOT::Math::GeneticMinimizerParameters::fSC_rateInt_t fSC_rateDefinition GeneticMinimizer.h:41; ROOT::Math::GeneticMinimizerParameters::fSC_stepsInt_t fSC_stepsDefinition GeneticMinimizer.h:",MatchSource.WIKI,doc/master/GeneticMinimizer_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GeneticMinimizer_8h_source.html
Modifiability,variab,variables,") const;; 105 ; 106 std::vector<TMVA::Interval*> fRanges;; 107 TMVA::IFitterTarget* fFitness;; 108 double fMinValue;; 109 std::vector<double> fResult;; 110 ; 111 GeneticMinimizerParameters fParameters;; 112 ; 113};; 114 ; 115 ; 116 } // end namespace Math; 117} // end namespace ROOT; 118 ; 119#endif /* ROOT_Math_GeneticMinimizer */; Minimizer.h; RtypesCore.h; namechar name[80]Definition TGX11.cxx:110; ROOT::Math::GeneticMinimizerGeneticMinimizer.Definition GeneticMinimizer.h:61; ROOT::Math::GeneticMinimizer::Xconst double * X() const overridereturn pointer to X values at the minimumDefinition GeneticMinimizer.cxx:336; ROOT::Math::GeneticMinimizer::fMinValuedouble fMinValueDefinition GeneticMinimizer.h:108; ROOT::Math::GeneticMinimizer::MinimizerParametersconst GeneticMinimizerParameters & MinimizerParameters() constDefinition GeneticMinimizer.h:96; ROOT::Math::GeneticMinimizer::NDimunsigned int NDim() const overridethis is <= Function().NDim() which is the total number of variables (free+ constrained ones)Definition GeneticMinimizer.cxx:348; ROOT::Math::GeneticMinimizer::CovMatrixdouble CovMatrix(unsigned int i, unsigned int j) const overridereturn covariance matrices element for variables ivar,jvar if the variable is fixed the return value ...Definition GeneticMinimizer.cxx:368; ROOT::Math::GeneticMinimizer::SetRandomSeedvoid SetRandomSeed(int seed)Definition GeneticMinimizer.h:94; ROOT::Math::GeneticMinimizer::NFreeunsigned int NFree() const overridenumber of free variables (real dimension of the problem) this is <= Function().NDim() which is the to...Definition GeneticMinimizer.cxx:355; ROOT::Math::GeneticMinimizer::SetLimitedVariablebool SetLimitedVariable(unsigned int, const std::string &, double, double, double, double) overrideset a new upper/lower limited variable (override if minimizer supports them ) otherwise as default se...Definition GeneticMinimizer.cxx:146; ROOT::Math::GeneticMinimizer::SetOptionsvirtual void SetOptions(const ROOT::Math::MinimizerOpti",MatchSource.WIKI,doc/master/GeneticMinimizer_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GeneticMinimizer_8h_source.html
Performance,perform,perform," this is <= Function().NDim() which is the to...Definition GeneticMinimizer.cxx:355; ROOT::Math::GeneticMinimizer::SetLimitedVariablebool SetLimitedVariable(unsigned int, const std::string &, double, double, double, double) overrideset a new upper/lower limited variable (override if minimizer supports them ) otherwise as default se...Definition GeneticMinimizer.cxx:146; ROOT::Math::GeneticMinimizer::SetOptionsvirtual void SetOptions(const ROOT::Math::MinimizerOptions &opt)Definition GeneticMinimizer.cxx:217; ROOT::Math::GeneticMinimizer::MinValuedouble MinValue() const overridereturn minimum function valueDefinition GeneticMinimizer.cxx:331; ROOT::Math::GeneticMinimizer::Errorsconst double * Errors() const overridereturn errors at the minimumDefinition GeneticMinimizer.cxx:366; ROOT::Math::GeneticMinimizer::NCallsunsigned int NCalls() const overridenumber of function calls to reach the minimumDefinition GeneticMinimizer.cxx:340; ROOT::Math::GeneticMinimizer::Minimizebool Minimize() overridemethod to perform the minimizationDefinition GeneticMinimizer.cxx:252; ROOT::Math::GeneticMinimizer::GetGeneticOptionsvoid GetGeneticOptions(ROOT::Math::MinimizerOptions &opt) constDefinition GeneticMinimizer.cxx:191; ROOT::Math::GeneticMinimizer::ProvidesErrorbool ProvidesError() const overrideminimizer provides error and error matrixDefinition GeneticMinimizer.cxx:365; ROOT::Math::GeneticMinimizer::SetVariablebool SetVariable(unsigned int ivar, const std::string &name, double val, double step) overrideset a new free variableDefinition GeneticMinimizer.cxx:153; ROOT::Math::GeneticMinimizer::fResultstd::vector< double > fResultDefinition GeneticMinimizer.h:109; ROOT::Math::GeneticMinimizer::fFitnessTMVA::IFitterTarget * fFitnessDefinition GeneticMinimizer.h:107; ROOT::Math::GeneticMinimizer::fRangesstd::vector< TMVA::Interval * > fRangesDefinition GeneticMinimizer.h:106; ROOT::Math::GeneticMinimizer::SetParametersvoid SetParameters(const GeneticMinimizerParameters &params)Definitio",MatchSource.WIKI,doc/master/GeneticMinimizer_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GeneticMinimizer_8h_source.html
Deployability,update,update,"o to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: W. Brown, M. Fischler, L. Moneta 2005; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2005 , LCG ROOT MathLib Team (FNAL component) *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Support templates (class and function) for stream i/o of vectors; 12// This is a utuility to allow for control, via manipulators, of the; 13// form of; 14//; 15// Created by: W. E. Brown and M. Fischler at Tue Jun 21 2005; 16//; 17// Last update: Tue Jun 21 2005; 18//; 19#ifndef ROOT_Math_GenVector_GenVectorIO; 20#define ROOT_Math_GenVector_GenVectorIO 1; 21 ; 22#include <cctype>; 23#include <iostream>; 24 ; 25 ; 26namespace ROOT {; 27namespace Math {; 28 ; 29namespace detail {; 30 ; 31 ; 32// -------- Manipulator support ----------; 33 ; 34 ; 35enum manip_t { open, sep, close, bitforbit };; 36 ; 37 ; 38inline int; 39 ios_data( int k ); 40{; 41 static int const ios_data[4] = { std::ios::xalloc() // open; 42 , std::ios::xalloc() // sep; 43 , std::ios::xalloc() // close; 44 , std::ios::xalloc() // bitforbit; 45 };; 46 ; 47 return ios_data[k];; 48 ; 49} // ios_data(); 50 ; 51 ; 52template< class char_t, class traits_t >; 53 inline char_t; 54 get_manip( std::basic_ios<char_t,traits_t> & ios; 55 , manip_t m; 56 ); 57{; 58 char_t ch = static_cast<char_t>( ios.iword( ios_data(m) ) );; 59 if( ch ) return ch;; 60 ; 61 switch( m ); 62 { default : return ios.widen( '?' );; 63 case open : return ios.widen( '(' );; 64 case close : return ios.widen( ')' );; 65 case sep : return ios.widen( ',' );; 66 case bitforbit : return ch;; 67 }; 68 ; 69} // get_manip<>(); 70 ; 71 ; 72template< class char_t, class traits_t >; 73 inline void; 74 set_manip( std::basic_ios<char_t,traits_t> & ios; 75 , manip_t m; 76 , char_t ch; 77 ); 78{; 79 ios.iword( ios_data(m) ) = static_cast<long>(ch);; 80 ; 81} // set_manip<>(); 82 ; 83 ; 84temp",MatchSource.WIKI,doc/master/GenVectorIO_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVectorIO_8h_source.html
Deployability,update,update,". ROOT: math/genvector/inc/Math/GenVector/AxisAngle.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. AxisAngle.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: W. Brown, M. Fischler, L. Moneta 2005; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2005 , LCG ROOT MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class AxisAngle; 12//; 13// Created by: Lorenzo Moneta at Wed May 11 10:37:10 2005; 14//; 15// Last update: Wed May 11 10:37:10 2005; 16//; 17#ifndef ROOT_Math_GenVector_AxisAngle; 18#define ROOT_Math_GenVector_AxisAngle 1; 19 ; 20#include ""Math/GenVector/Rotation3D.h""; 21#include ""Math/GenVector/DisplacementVector3D.h""; 22#include ""Math/GenVector/PositionVector3D.h""; 23#include ""Math/GenVector/LorentzVector.h""; 24#include ""Math/GenVector/3DConversions.h""; 25#include <algorithm>; 26#include <cassert>; 27 ; 28 ; 29namespace ROOT {; 30namespace Math {; 31 ; 32 ; 33//__________________________________________________________________________________________; 34 /**; 35 AxisAngle class describing rotation represented with direction axis (3D Vector) and an; 36 angle of rotation around that axis.; 37 ; 38 @ingroup GenVector; 39 ; 40 @sa Overview of the @ref GenVector ""physics vector library""; 41 */; 42class AxisAngle {; 43 ; 44public:; 45 ; 46 typedef double Scalar;; 47 ; 48 /**; 49 definition of vector axis; 50 */; 51 typedef DisplacementVector3D<Cartesian3D<Scalar> > AxisVector;; 52 ; 53 ; 54 /**; 55 Default constructor (axis is z and angle is zero); 56 */; 57 AxisAngle() : fAxis(0,0,1), fAngle(0) { }; 58 ; 59 /**; 60 Construct from a non-zero vector (x,y,z) and an angle.; 61 Precondition: the Vector needs to implement x(), y(), z(), and unit(); 62 */; 63 template<class AnyVector>; 64 AxisAngle(const AnyVector & v, Scalar angle) :; 65 fAxis(v.unit()), f",MatchSource.WIKI,doc/master/GenVector_2AxisAngle_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2AxisAngle_8h_source.html
Security,access,access,"151 *begin = fAngle;; 152 }; 153 ; 154 /**; 155 Set components from a non-zero vector (x,y,z) and an angle.; 156 Precondition: the Vector needs to implement x(), y(), z(), and unit(); 157 */; 158 template<class AnyVector>; 159 void SetComponents(const AnyVector & v, Scalar angle) {; 160 fAxis=v.unit();; 161 fAngle=angle;; 162 }; 163 ; 164 /**; 165 Set components into a non-zero vector (x,y,z) and an angle.; 166 The vector is intended to be a cartesian displacement vector; 167 but any vector class assignable from one will work.; 168 */; 169 template<class AnyVector>; 170 void GetComponents(AnyVector & axis, Scalar & angle) const {; 171 axis = fAxis;; 172 angle = fAngle;; 173 }; 174 ; 175 /**; 176 access to rotation axis; 177 */; 178 AxisVector Axis() const { return fAxis; }; 179 ; 180 /**; 181 access to rotation angle; 182 */; 183 Scalar Angle() const { return fAngle; }; 184 ; 185 // =========== operations ==============; 186 ; 187 /**; 188 Rotation operation on a cartesian vector; 189 */; 190 typedef DisplacementVector3D<Cartesian3D<double>, DefaultCoordinateSystemTag > XYZVector;; 191 XYZVector operator() (const XYZVector & v) const;; 192 ; 193 /**; 194 Rotation operation on a displacement vector in any coordinate system; 195 */; 196 template <class CoordSystem, class Tag>; 197 DisplacementVector3D<CoordSystem, Tag>; 198 operator() (const DisplacementVector3D<CoordSystem, Tag> & v) const {; 199 DisplacementVector3D< Cartesian3D<double> > xyz(v.X(), v.Y(), v.Z());; 200 DisplacementVector3D< Cartesian3D<double> > rxyz = operator()(xyz);; 201 DisplacementVector3D< CoordSystem, Tag > vNew;; 202 vNew.SetXYZ( rxyz.X(), rxyz.Y(), rxyz.Z() );; 203 return vNew;; 204 }; 205 ; 206 /**; 207 Rotation operation on a position vector in any coordinate system; 208 */; 209 template <class CoordSystem, class Tag>; 210 PositionVector3D<CoordSystem, Tag>; 211 operator() (const PositionVector3D<CoordSystem,Tag> & p) const {; 212 DisplacementVector3D< Cartesian3D<double>,Tag > xyz(p);; 21",MatchSource.WIKI,doc/master/GenVector_2AxisAngle_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2AxisAngle_8h_source.html
Testability,assert,assert,"stexpr AxisAngle(const OtherRotation & r) {gv_detail::convert(r,*this);}; 95 ; 96 ; 97 /**; 98 Assign from another supported rotation type (see gv_detail::convert ); 99 */; 100 template <class OtherRotation>; 101 AxisAngle & operator=( OtherRotation const & r ) {; 102 gv_detail::convert(r,*this);; 103 return *this;; 104 }; 105 ; 106 // ======== Components ==============; 107 ; 108 /**; 109 Set the axis and then the angle given a pair of pointers or iterators; 110 defining the beginning and end of an array of four Scalars.; 111 Precondition: The first three components are assumed to represent; 112 the rotation axis vector and the 4-th the rotation angle.; 113 The angle is assumed to be in the range (-pi,pi].; 114 The axis vector is automatically normalized to be a unit vector; 115 */; 116 template<class IT>; 117 void SetComponents(IT begin, IT end) {; 118 IT a = begin; IT b = ++begin; IT c = ++begin;; 119 fAxis.SetCoordinates(*a,*b,*c);; 120 fAngle = *(++begin);; 121 (void)end;; 122 assert (++begin==end);; 123 // re-normalize the vector; 124 double tot = fAxis.R();; 125 if (tot > 0) fAxis /= tot;; 126 }; 127 ; 128 /**; 129 Get the axis and then the angle into data specified by an iterator begin; 130 and another to the end of the desired data (4 past start).; 131 */; 132 template<class IT>; 133 void GetComponents(IT begin, IT end) const {; 134 IT a = begin; IT b = ++begin; IT c = ++begin;; 135 fAxis.GetCoordinates(*a,*b,*c);; 136 *(++begin) = fAngle;; 137 (void)end;; 138 assert (++begin==end);; 139 }; 140 ; 141 /**; 142 Get the axis and then the angle into data specified by an iterator begin; 143 */; 144 template<class IT>; 145 void GetComponents(IT begin) const {; 146 double ax,ay,az = 0;; 147 fAxis.GetCoordinates(ax,ay,az);; 148 *begin++ = ax;; 149 *begin++ = ay;; 150 *begin++ = az;; 151 *begin = fAngle;; 152 }; 153 ; 154 /**; 155 Set components from a non-zero vector (x,y,z) and an angle.; 156 Precondition: the Vector needs to implement x(), y(), z(), and unit(); 1",MatchSource.WIKI,doc/master/GenVector_2AxisAngle_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2AxisAngle_8h_source.html
Energy Efficiency,efficient,efficient,"e <class OtherCoords>; 96 explicit constexpr DisplacementVector2D( const PositionVector2D<OtherCoords,Tag> & p) :; 97 fCoordinates ( p.Coordinates() ) { }; 98 ; 99 ; 100 /**; 101 Construct from a foreign 2D vector type, for example, Hep2Vector; 102 Precondition: v must implement methods x() and y(); 103 */; 104 template <class ForeignVector>; 105 explicit constexpr DisplacementVector2D( const ForeignVector & v) :; 106 fCoordinates ( Cartesian2D<Scalar>( v.x(), v.y() ) ) { }; 107 ; 108 ; 109 ; 110 // compiler-generated copy ctor and dtor are fine.; 111 ; 112 // ------ assignment ------; 113 ; 114 /**; 115 Assignment operator from a displacement vector of arbitrary type; 116 */; 117 template <class OtherCoords>; 118 DisplacementVector2D & operator=; 119 ( const DisplacementVector2D<OtherCoords, Tag> & v) {; 120 fCoordinates = v.Coordinates();; 121 return *this;; 122 }; 123 ; 124 /**; 125 Assignment operator from a position vector; 126 (not necessarily efficient unless one or the other is Cartesian); 127 */; 128 template <class OtherCoords>; 129 DisplacementVector2D & operator=; 130 ( const PositionVector2D<OtherCoords,Tag> & rhs) {; 131 SetXY(rhs.x(), rhs.y() );; 132 return *this;; 133 }; 134 ; 135 ; 136 /**; 137 Assignment from a foreign 2D vector type, for example, Hep2Vector; 138 Precondition: v must implement methods x() and y(); 139 */; 140 template <class ForeignVector>; 141 DisplacementVector2D & operator= ( const ForeignVector & v) {; 142 SetXY( v.x(), v.y() );; 143 return *this;; 144 }; 145 ; 146 ; 147 // ------ Set, Get, and access coordinate data ------; 148 ; 149 /**; 150 Retrieve a copy of the coordinates object; 151 */; 152 CoordSystem Coordinates() const {; 153 return fCoordinates;; 154 }; 155 ; 156 /**; 157 Set internal data based on 2 Scalar numbers.; 158 These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector; 159 */; 160 DisplacementVector2D<CoordSystem, Tag>& SetCoordinates( Scalar a, Scalar b) {; 161 fCoordinates.SetCoordin",MatchSource.WIKI,doc/master/GenVector_2DisplacementVector2D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2DisplacementVector2D_8h_source.html
Performance,perform,perform,"System, Tag>& SetX (Scalar a) {; 248 fCoordinates.SetX(a);; 249 return *this;; 250 }; 251 ; 252 /**; 253 Change Y - Cartesian2D coordinates only; 254 */; 255 DisplacementVector2D<CoordSystem, Tag>& SetY (Scalar a) {; 256 fCoordinates.SetY(a);; 257 return *this;; 258 }; 259 ; 260 ; 261 /**; 262 Change R - Polar2D coordinates only; 263 */; 264 DisplacementVector2D<CoordSystem, Tag>& SetR (Scalar a) {; 265 fCoordinates.SetR(a);; 266 return *this;; 267 }; 268 ; 269 ; 270 /**; 271 Change Phi - Polar2D coordinates; 272 */; 273 DisplacementVector2D<CoordSystem, Tag>& SetPhi (Scalar ang) {; 274 fCoordinates.SetPhi(ang);; 275 return *this;; 276 }; 277 ; 278 ; 279 ; 280 // ------ Operations combining two vectors ------; 281 // -- need to have the specialized version in order to avoid; 282 ; 283 /**; 284 Return the scalar (dot) product of two displacement vectors.; 285 It is possible to perform the product for any type of vector coordinates,; 286 but they must have the same coordinate system tag; 287 */; 288 template< class OtherCoords >; 289 Scalar Dot( const DisplacementVector2D<OtherCoords,Tag> & v) const {; 290 return X()*v.X() + Y()*v.Y();; 291 }; 292 /**; 293 Return the scalar (dot) product of two vectors.; 294 It is possible to perform the product for any classes; 295 implementing x() and y() member functions; 296 */; 297 template< class OtherVector >; 298 Scalar Dot( const OtherVector & v) const {; 299 return X()*v.x() + Y()*v.y();; 300 }; 301 ; 302 ; 303 ; 304 /**; 305 Self Addition with a displacement vector.; 306 */; 307 template <class OtherCoords>; 308 DisplacementVector2D & operator+=; 309 (const DisplacementVector2D<OtherCoords,Tag> & v) {; 310 SetXY( X() + v.X(), Y() + v.Y() );; 311 return *this;; 312 }; 313 ; 314 /**; 315 Self Difference with a displacement vector.; 316 */; 317 template <class OtherCoords>; 318 DisplacementVector2D & operator-=; 319 (const DisplacementVector2D<OtherCoords,Tag> & v) {; 320 SetXY( x() - v.x(), y() - v.y() );; 321 return *this;; ",MatchSource.WIKI,doc/master/GenVector_2DisplacementVector2D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2DisplacementVector2D_8h_source.html
Safety,avoid,avoid,"= R();; 239 return tot == 0 ? *this : DisplacementVector2D(*this) / tot;; 240 }; 241 ; 242 // ------ Setting individual elements present in coordinate system ------; 243 ; 244 /**; 245 Change X - Cartesian2D coordinates only; 246 */; 247 DisplacementVector2D<CoordSystem, Tag>& SetX (Scalar a) {; 248 fCoordinates.SetX(a);; 249 return *this;; 250 }; 251 ; 252 /**; 253 Change Y - Cartesian2D coordinates only; 254 */; 255 DisplacementVector2D<CoordSystem, Tag>& SetY (Scalar a) {; 256 fCoordinates.SetY(a);; 257 return *this;; 258 }; 259 ; 260 ; 261 /**; 262 Change R - Polar2D coordinates only; 263 */; 264 DisplacementVector2D<CoordSystem, Tag>& SetR (Scalar a) {; 265 fCoordinates.SetR(a);; 266 return *this;; 267 }; 268 ; 269 ; 270 /**; 271 Change Phi - Polar2D coordinates; 272 */; 273 DisplacementVector2D<CoordSystem, Tag>& SetPhi (Scalar ang) {; 274 fCoordinates.SetPhi(ang);; 275 return *this;; 276 }; 277 ; 278 ; 279 ; 280 // ------ Operations combining two vectors ------; 281 // -- need to have the specialized version in order to avoid; 282 ; 283 /**; 284 Return the scalar (dot) product of two displacement vectors.; 285 It is possible to perform the product for any type of vector coordinates,; 286 but they must have the same coordinate system tag; 287 */; 288 template< class OtherCoords >; 289 Scalar Dot( const DisplacementVector2D<OtherCoords,Tag> & v) const {; 290 return X()*v.X() + Y()*v.Y();; 291 }; 292 /**; 293 Return the scalar (dot) product of two vectors.; 294 It is possible to perform the product for any classes; 295 implementing x() and y() member functions; 296 */; 297 template< class OtherVector >; 298 Scalar Dot( const OtherVector & v) const {; 299 return X()*v.x() + Y()*v.y();; 300 }; 301 ; 302 ; 303 ; 304 /**; 305 Self Addition with a displacement vector.; 306 */; 307 template <class OtherCoords>; 308 DisplacementVector2D & operator+=; 309 (const DisplacementVector2D<OtherCoords,Tag> & v) {; 310 SetXY( X() + v.X(), Y() + v.Y() );; 311 return *this;; 312 ",MatchSource.WIKI,doc/master/GenVector_2DisplacementVector2D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2DisplacementVector2D_8h_source.html
Security,access,access,"isplacement vector of arbitrary type; 116 */; 117 template <class OtherCoords>; 118 DisplacementVector2D & operator=; 119 ( const DisplacementVector2D<OtherCoords, Tag> & v) {; 120 fCoordinates = v.Coordinates();; 121 return *this;; 122 }; 123 ; 124 /**; 125 Assignment operator from a position vector; 126 (not necessarily efficient unless one or the other is Cartesian); 127 */; 128 template <class OtherCoords>; 129 DisplacementVector2D & operator=; 130 ( const PositionVector2D<OtherCoords,Tag> & rhs) {; 131 SetXY(rhs.x(), rhs.y() );; 132 return *this;; 133 }; 134 ; 135 ; 136 /**; 137 Assignment from a foreign 2D vector type, for example, Hep2Vector; 138 Precondition: v must implement methods x() and y(); 139 */; 140 template <class ForeignVector>; 141 DisplacementVector2D & operator= ( const ForeignVector & v) {; 142 SetXY( v.x(), v.y() );; 143 return *this;; 144 }; 145 ; 146 ; 147 // ------ Set, Get, and access coordinate data ------; 148 ; 149 /**; 150 Retrieve a copy of the coordinates object; 151 */; 152 CoordSystem Coordinates() const {; 153 return fCoordinates;; 154 }; 155 ; 156 /**; 157 Set internal data based on 2 Scalar numbers.; 158 These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector; 159 */; 160 DisplacementVector2D<CoordSystem, Tag>& SetCoordinates( Scalar a, Scalar b) {; 161 fCoordinates.SetCoordinates(a, b);; 162 return *this;; 163 }; 164 ; 165 ; 166 /**; 167 get internal data into 2 Scalar numbers.; 168 These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector; 169 */; 170 void GetCoordinates( Scalar& a, Scalar& b) const; 171 { fCoordinates.GetCoordinates(a, b); }; 172 ; 173 ; 174 /**; 175 set the values of the vector from the cartesian components (x,y); 176 (if the vector is held in polar coordinates,; 177 then (x, y) are converted to that form); 178 */; 179 DisplacementVector2D<CoordSystem, Tag>& SetXY (Scalar a, Scalar b) {; 180 fCoordinates.SetXY(a,b);; 181 return *this;; 182 }; 183 ; 184 // ----",MatchSource.WIKI,doc/master/GenVector_2DisplacementVector2D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2DisplacementVector2D_8h_source.html
Deployability,update,update,". ROOT: math/genvector/inc/Math/GenVector/DisplacementVector3D.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. DisplacementVector3D.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: W. Brown, M. Fischler, L. Moneta 2005; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2005 , LCG ROOT MathLib Team and *; 7 * FNAL LCG ROOT MathLib Team *; 8 * *; 9 * *; 10 **********************************************************************/; 11 ; 12// Header source file for class DisplacementVector3D; 13//; 14// Created by: Lorenzo Moneta at Mon May 30 12:21:43 2005; 15// Major rewrite: M. FIschler at Wed Jun 8 2005; 16//; 17// Last update: $Id$; 18//; 19 ; 20#ifndef ROOT_Math_GenVector_DisplacementVector3D; 21#define ROOT_Math_GenVector_DisplacementVector3D 1; 22 ; 23#include ""Math/GenVector/Cartesian3D.h""; 24 ; 25#include ""Math/GenVector/PositionVector3Dfwd.h""; 26 ; 27#include ""Math/GenVector/GenVectorIO.h""; 28 ; 29#include ""Math/GenVector/BitReproducible.h""; 30 ; 31#include ""Math/GenVector/CoordinateSystemTags.h""; 32 ; 33#include <cassert>; 34 ; 35 ; 36namespace ROOT {; 37 ; 38 namespace Math {; 39 ; 40 ; 41//__________________________________________________________________________________________; 42 /**; 43 Class describing a generic displacement vector in 3 dimensions.; 44 This class is templated on the type of Coordinate system.; 45 One example is the XYZVector which is a vector based on; 46 double precision x,y,z data members by using the; 47 ROOT::Math::Cartesian3D<double> Coordinate system.; 48 The class is having also an extra template parameter, the coordinate system tag,; 49 to be able to identify (tag) vector described in different reference coordinate system,; 50 like global or local coordinate systems.; 51 ; 52 @ingroup GenVector; 53 ; 54 @sa Overview of the @ref GenVector ""physics vector library""; 55 */; 56 ; 57 template <class Coor",MatchSource.WIKI,doc/master/GenVector_2DisplacementVector3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2DisplacementVector3D_8h_source.html
Energy Efficiency,efficient,efficient,"construct from a generic linear algebra vector of at least size 3; 112 implementing operator [].; 113 \par v LAVector; 114 \par index0 index where coordinates starts (typically zero); 115 It works for all Coordinates types,; 116 ( x= v[index0] for Cartesian and r=v[index0] for Polar ); 117 */; 118 template <class LAVector>; 119 constexpr DisplacementVector3D(const LAVector & v, size_t index0 ) {; 120 fCoordinates = CoordSystem ( v[index0], v[index0+1], v[index0+2] );; 121 }; 122#endif; 123 ; 124 // compiler-generated copy ctor and dtor are fine.; 125 ; 126 // ------ assignment ------; 127 ; 128 /**; 129 Assignment operator from a displacement vector of arbitrary type; 130 */; 131 template <class OtherCoords>; 132 DisplacementVector3D & operator=; 133 ( const DisplacementVector3D<OtherCoords, Tag> & v) {; 134 fCoordinates = v.Coordinates();; 135 return *this;; 136 }; 137 ; 138 /**; 139 Assignment operator from a position vector; 140 (not necessarily efficient unless one or the other is Cartesian); 141 */; 142 template <class OtherCoords>; 143 DisplacementVector3D & operator=; 144 ( const PositionVector3D<OtherCoords,Tag> & rhs) {; 145 SetXYZ(rhs.x(), rhs.y(), rhs.z());; 146 return *this;; 147 }; 148 ; 149 ; 150 /**; 151 Assignment from a foreign 3D vector type, for example, Hep3Vector; 152 Precondition: v must implement methods x(), y() and z(); 153 */; 154 template <class ForeignVector>; 155 DisplacementVector3D & operator= ( const ForeignVector & v) {; 156 SetXYZ( v.x(), v.y(), v.z() );; 157 return *this;; 158 }; 159 ; 160 ; 161#ifdef LATER; 162 /**; 163 assign from a generic linear algebra vector of at least size 3; 164 implementing operator []. This could be also a C array; 165 \par v LAVector; 166 \par index0 index where coordinates starts (typically zero); 167 It works for all Coordinates types,; 168 ( x= v[index0] for Cartesian and r=v[index0] for Polar ); 169 */; 170 template <class LAVector>; 171 DisplacementVector3D & assignFrom(const LAVector & v, size_t i",MatchSource.WIKI,doc/master/GenVector_2DisplacementVector3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2DisplacementVector3D_8h_source.html
Modifiability,rewrite,rewrite,". ROOT: math/genvector/inc/Math/GenVector/DisplacementVector3D.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. DisplacementVector3D.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: W. Brown, M. Fischler, L. Moneta 2005; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2005 , LCG ROOT MathLib Team and *; 7 * FNAL LCG ROOT MathLib Team *; 8 * *; 9 * *; 10 **********************************************************************/; 11 ; 12// Header source file for class DisplacementVector3D; 13//; 14// Created by: Lorenzo Moneta at Mon May 30 12:21:43 2005; 15// Major rewrite: M. FIschler at Wed Jun 8 2005; 16//; 17// Last update: $Id$; 18//; 19 ; 20#ifndef ROOT_Math_GenVector_DisplacementVector3D; 21#define ROOT_Math_GenVector_DisplacementVector3D 1; 22 ; 23#include ""Math/GenVector/Cartesian3D.h""; 24 ; 25#include ""Math/GenVector/PositionVector3Dfwd.h""; 26 ; 27#include ""Math/GenVector/GenVectorIO.h""; 28 ; 29#include ""Math/GenVector/BitReproducible.h""; 30 ; 31#include ""Math/GenVector/CoordinateSystemTags.h""; 32 ; 33#include <cassert>; 34 ; 35 ; 36namespace ROOT {; 37 ; 38 namespace Math {; 39 ; 40 ; 41//__________________________________________________________________________________________; 42 /**; 43 Class describing a generic displacement vector in 3 dimensions.; 44 This class is templated on the type of Coordinate system.; 45 One example is the XYZVector which is a vector based on; 46 double precision x,y,z data members by using the; 47 ROOT::Math::Cartesian3D<double> Coordinate system.; 48 The class is having also an extra template parameter, the coordinate system tag,; 49 to be able to identify (tag) vector described in different reference coordinate system,; 50 like global or local coordinate systems.; 51 ; 52 @ingroup GenVector; 53 ; 54 @sa Overview of the @ref GenVector ""physics vector library""; 55 */; 56 ; 57 template <class Coor",MatchSource.WIKI,doc/master/GenVector_2DisplacementVector3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2DisplacementVector3D_8h_source.html
Performance,perform,perform,"ctor3D<CoordSystem, Tag>& SetTheta (Scalar ang) { fCoordinates.SetTheta(ang); return *this;}; 377 ; 378 /**; 379 Change Phi - Polar3D or CylindricalEta3D coordinates; 380 */; 381 DisplacementVector3D<CoordSystem, Tag>& SetPhi (Scalar ang) { fCoordinates.SetPhi(ang); return *this;}; 382 ; 383 /**; 384 Change Rho - CylindricalEta3D coordinates only; 385 */; 386 DisplacementVector3D<CoordSystem, Tag>& SetRho (Scalar rr) { fCoordinates.SetRho(rr); return *this;}; 387 ; 388 /**; 389 Change Eta - CylindricalEta3D coordinates only; 390 */; 391 DisplacementVector3D<CoordSystem, Tag>& SetEta (Scalar etaval) { fCoordinates.SetEta(etaval); return *this;}; 392 ; 393 ; 394 // ------ Operations combining two vectors ------; 395 // -- need to have the specialized version in order to avoid; 396 ; 397 /**; 398 Return the scalar (dot) product of two displacement vectors.; 399 It is possible to perform the product for any type of vector coordinates,; 400 but they must have the same coordinate system tag; 401 */; 402 template< class OtherCoords >; 403 Scalar Dot( const DisplacementVector3D<OtherCoords,Tag> & v) const {; 404 return X()*v.X() + Y()*v.Y() + Z()*v.Z();; 405 }; 406 /**; 407 Return the scalar (dot) product of two vectors.; 408 It is possible to perform the product for any classes; 409 implementing x(), y() and z() member functions; 410 */; 411 template< class OtherVector >; 412 Scalar Dot( const OtherVector & v) const {; 413 return X()*v.x() + Y()*v.y() + Z()*v.z();; 414 }; 415 ; 416 /**; 417 Return vector (cross) product of two displacement vectors,; 418 as a vector in the coordinate system of this class.; 419 It is possible to perform the product for any type of vector coordinates,; 420 but they must have the same coordinate system tag; 421 */; 422 template <class OtherCoords>; 423 DisplacementVector3D Cross( const DisplacementVector3D<OtherCoords,Tag> & v) const {; 424 DisplacementVector3D result;; 425 result.SetXYZ ( Y()*v.Z() - v.Y()*Z(),; 426 Z()*v.X() - v.Z()*X(),; 42",MatchSource.WIKI,doc/master/GenVector_2DisplacementVector3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2DisplacementVector3D_8h_source.html
Safety,avoid,avoid,"s;}; 367 ; 368 /**; 369 Change R - Polar3D coordinates only; 370 */; 371 DisplacementVector3D<CoordSystem, Tag>& SetR (Scalar rr) { fCoordinates.SetR(rr); return *this;}; 372 ; 373 /**; 374 Change Theta - Polar3D coordinates only; 375 */; 376 DisplacementVector3D<CoordSystem, Tag>& SetTheta (Scalar ang) { fCoordinates.SetTheta(ang); return *this;}; 377 ; 378 /**; 379 Change Phi - Polar3D or CylindricalEta3D coordinates; 380 */; 381 DisplacementVector3D<CoordSystem, Tag>& SetPhi (Scalar ang) { fCoordinates.SetPhi(ang); return *this;}; 382 ; 383 /**; 384 Change Rho - CylindricalEta3D coordinates only; 385 */; 386 DisplacementVector3D<CoordSystem, Tag>& SetRho (Scalar rr) { fCoordinates.SetRho(rr); return *this;}; 387 ; 388 /**; 389 Change Eta - CylindricalEta3D coordinates only; 390 */; 391 DisplacementVector3D<CoordSystem, Tag>& SetEta (Scalar etaval) { fCoordinates.SetEta(etaval); return *this;}; 392 ; 393 ; 394 // ------ Operations combining two vectors ------; 395 // -- need to have the specialized version in order to avoid; 396 ; 397 /**; 398 Return the scalar (dot) product of two displacement vectors.; 399 It is possible to perform the product for any type of vector coordinates,; 400 but they must have the same coordinate system tag; 401 */; 402 template< class OtherCoords >; 403 Scalar Dot( const DisplacementVector3D<OtherCoords,Tag> & v) const {; 404 return X()*v.X() + Y()*v.Y() + Z()*v.Z();; 405 }; 406 /**; 407 Return the scalar (dot) product of two vectors.; 408 It is possible to perform the product for any classes; 409 implementing x(), y() and z() member functions; 410 */; 411 template< class OtherVector >; 412 Scalar Dot( const OtherVector & v) const {; 413 return X()*v.x() + Y()*v.y() + Z()*v.z();; 414 }; 415 ; 416 /**; 417 Return vector (cross) product of two displacement vectors,; 418 as a vector in the coordinate system of this class.; 419 It is possible to perform the product for any type of vector coordinates,; 420 but they must have the same coordi",MatchSource.WIKI,doc/master/GenVector_2DisplacementVector3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2DisplacementVector3D_8h_source.html
Security,access,access,"onst PositionVector3D<OtherCoords,Tag> & rhs) {; 145 SetXYZ(rhs.x(), rhs.y(), rhs.z());; 146 return *this;; 147 }; 148 ; 149 ; 150 /**; 151 Assignment from a foreign 3D vector type, for example, Hep3Vector; 152 Precondition: v must implement methods x(), y() and z(); 153 */; 154 template <class ForeignVector>; 155 DisplacementVector3D & operator= ( const ForeignVector & v) {; 156 SetXYZ( v.x(), v.y(), v.z() );; 157 return *this;; 158 }; 159 ; 160 ; 161#ifdef LATER; 162 /**; 163 assign from a generic linear algebra vector of at least size 3; 164 implementing operator []. This could be also a C array; 165 \par v LAVector; 166 \par index0 index where coordinates starts (typically zero); 167 It works for all Coordinates types,; 168 ( x= v[index0] for Cartesian and r=v[index0] for Polar ); 169 */; 170 template <class LAVector>; 171 DisplacementVector3D & assignFrom(const LAVector & v, size_t index0 = 0) {; 172 fCoordinates = CoordSystem ( v[index0], v[index0+1], v[index0+2] );; 173 return *this;; 174 }; 175#endif; 176 ; 177 // ------ Set, Get, and access coordinate data ------; 178 ; 179 /**; 180 Retrieve a copy of the coordinates object; 181 */; 182 CoordSystem Coordinates() const {; 183 return fCoordinates;; 184 }; 185 ; 186 /**; 187 Set internal data based on a C-style array of 3 Scalar numbers; 188 */; 189 DisplacementVector3D<CoordSystem, Tag>& SetCoordinates( const Scalar src[] ); 190 { fCoordinates.SetCoordinates(src); return *this; }; 191 ; 192 /**; 193 Set internal data based on 3 Scalar numbers; 194 */; 195 DisplacementVector3D<CoordSystem, Tag>& SetCoordinates( Scalar a, Scalar b, Scalar c ); 196 { fCoordinates.SetCoordinates(a, b, c); return *this; }; 197 ; 198 /**; 199 Set internal data based on 3 Scalars at *begin to *end; 200 */; 201 template <class IT>; 202 DisplacementVector3D<CoordSystem, Tag>& SetCoordinates( IT begin, IT end ); 203 { IT a = begin; IT b = ++begin; IT c = ++begin;; 204 (void)end;; 205 assert (++begin==end);; 206 SetCoordinates (*a,*b,*c",MatchSource.WIKI,doc/master/GenVector_2DisplacementVector3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2DisplacementVector3D_8h_source.html
Testability,assert,assert," 172 fCoordinates = CoordSystem ( v[index0], v[index0+1], v[index0+2] );; 173 return *this;; 174 }; 175#endif; 176 ; 177 // ------ Set, Get, and access coordinate data ------; 178 ; 179 /**; 180 Retrieve a copy of the coordinates object; 181 */; 182 CoordSystem Coordinates() const {; 183 return fCoordinates;; 184 }; 185 ; 186 /**; 187 Set internal data based on a C-style array of 3 Scalar numbers; 188 */; 189 DisplacementVector3D<CoordSystem, Tag>& SetCoordinates( const Scalar src[] ); 190 { fCoordinates.SetCoordinates(src); return *this; }; 191 ; 192 /**; 193 Set internal data based on 3 Scalar numbers; 194 */; 195 DisplacementVector3D<CoordSystem, Tag>& SetCoordinates( Scalar a, Scalar b, Scalar c ); 196 { fCoordinates.SetCoordinates(a, b, c); return *this; }; 197 ; 198 /**; 199 Set internal data based on 3 Scalars at *begin to *end; 200 */; 201 template <class IT>; 202 DisplacementVector3D<CoordSystem, Tag>& SetCoordinates( IT begin, IT end ); 203 { IT a = begin; IT b = ++begin; IT c = ++begin;; 204 (void)end;; 205 assert (++begin==end);; 206 SetCoordinates (*a,*b,*c);; 207 return *this;; 208 }; 209 ; 210 /**; 211 get internal data into 3 Scalar numbers; 212 */; 213 void GetCoordinates( Scalar& a, Scalar& b, Scalar& c ) const; 214 { fCoordinates.GetCoordinates(a, b, c); }; 215 ; 216 /**; 217 get internal data into a C-style array of 3 Scalar numbers; 218 */; 219 void GetCoordinates( Scalar dest[] ) const; 220 { fCoordinates.GetCoordinates(dest); }; 221 ; 222 /**; 223 get internal data into 3 Scalars at *begin to *end (3 past begin); 224 */; 225 template <class IT>; 226 void GetCoordinates( IT begin, IT end ) const; 227 { IT a = begin; IT b = ++begin; IT c = ++begin;; 228 (void)end;; 229 assert (++begin==end);; 230 GetCoordinates (*a,*b,*c);; 231 }; 232 /**; 233 get internal data into 3 Scalars starting at *begin; 234 */; 235 template <class IT>; 236 void GetCoordinates( IT begin) const {; 237 Scalar a = Scalar(0);; 238 Scalar b = Scalar(0);; 239 Scalar c = Scalar",MatchSource.WIKI,doc/master/GenVector_2DisplacementVector3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2DisplacementVector3D_8h_source.html
Deployability,update,update,". ROOT: math/genvector/inc/Math/GenVector/EulerAngles.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. EulerAngles.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: W. Brown, M. Fischler, L. Moneta 2005; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2005 , LCG ROOT MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class EulerAngles; 12//; 13// Created by: Lorenzo Moneta at Tue May 10 17:55:10 2005; 14//; 15// Last update: Tue May 10 17:55:10 2005; 16//; 17#ifndef ROOT_Math_GenVector_EulerAngles; 18#define ROOT_Math_GenVector_EulerAngles 1; 19 ; 20#include ""Math/GenVector/Rotation3D.h""; 21#include ""Math/GenVector/DisplacementVector3D.h""; 22#include ""Math/GenVector/PositionVector3D.h""; 23#include ""Math/GenVector/LorentzVector.h""; 24#include ""Math/GenVector/3DConversions.h""; 25#include <algorithm>; 26#include <cassert>; 27 ; 28namespace ROOT {; 29namespace Math {; 30 ; 31 ; 32//__________________________________________________________________________________________; 33 /**; 34 EulerAngles class describing rotation as three angles (Euler Angles).; 35 The Euler angles definition matches that of Classical Mechanics (Goldstein).; 36 It is also the same convention defined in; 37 <A HREF=""http://mathworld.wolfram.com/EulerAngles.html"">mathworld</A>; 38 and used in Mathematica and CLHEP. Note that the ROOT class TRotation defines; 39 a slightly different convention.; 40 ; 41 @ingroup GenVector; 42 ; 43 @sa Overview of the @ref GenVector ""physics vector library""; 44 */; 45class EulerAngles {; 46 ; 47public:; 48 ; 49 typedef double Scalar;; 50 ; 51 /**; 52 Default constructor; 53 */; 54 constexpr EulerAngles() : fPhi(0.0), fTheta(0.0), fPsi(0.0) { }; 55 ; 56 /**; 57 Constructor from phi, theta and psi; 58 */; 59 EulerAngles( Scalar phi, Scalar theta, Scalar psi )",MatchSource.WIKI,doc/master/GenVector_2EulerAngles_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2EulerAngles_8h_source.html
Testability,assert,assert,"detail::convert(r, *this); }; 120 ; 121 ; 122 /**; 123 Assign from an AxisAngle; 124 */; 125 EulerAngles &; 126 operator=( AxisAngle const & a ) { return operator=(EulerAngles(a)); }; 127 ; 128 /**; 129 Assign from a Quaternion; 130 */; 131 EulerAngles &; 132 operator=( Quaternion const & q ) {return operator=(EulerAngles(q)); }; 133 ; 134 /**; 135 Assign from an axial rotation; 136 */; 137 EulerAngles &; 138 operator=( RotationZ const & r ) { return operator=(EulerAngles(r)); }; 139 EulerAngles &; 140 operator=( RotationY const & r ) { return operator=(EulerAngles(r)); }; 141 EulerAngles &; 142 operator=( RotationX const & r ) { return operator=(EulerAngles(r)); }; 143 ; 144#endif; 145 ; 146 // ======== Components ==============; 147 ; 148 /**; 149 Set the three Euler angles given a pair of pointers or iterators; 150 defining the beginning and end of an array of three Scalars.; 151 */; 152 template<class IT>; 153 void SetComponents(IT begin, IT end) {; 154 fPhi = *begin++;; 155 fTheta = *begin++;; 156 fPsi = *begin++;; 157 (void)end;; 158 assert(begin == end);; 159 Rectify(); // Added 27 Jan. 06 JMM; 160 }; 161 ; 162 /**; 163 Get the axis and then the angle into data specified by an iterator begin; 164 and another to the end of the desired data (4 past start).; 165 */; 166 template<class IT>; 167 void GetComponents(IT begin, IT end) const {; 168 *begin++ = fPhi;; 169 *begin++ = fTheta;; 170 *begin++ = fPsi;; 171 (void)end;; 172 assert(begin == end);; 173 }; 174 ; 175 /**; 176 Get the axis and then the angle into data specified by an iterator begin; 177 */; 178 template<class IT>; 179 void GetComponents(IT begin) const {; 180 *begin++ = fPhi;; 181 *begin++ = fTheta;; 182 *begin = fPsi;; 183 }; 184 ; 185 /**; 186 Set the components phi, theta, psi based on three Scalars.; 187 */; 188 void SetComponents(Scalar phi, Scalar theta, Scalar psi) {; 189 fPhi=phi; fTheta=theta; fPsi=psi;; 190 Rectify(); // Added 27 Jan. 06 JMM; 191 }; 192 ; 193 /**; 194 Get the components ph",MatchSource.WIKI,doc/master/GenVector_2EulerAngles_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2EulerAngles_8h_source.html
Availability,toler,tolerance," Throw(); 518 // mechanism or at least load a NAN if not.; 519 const Scalar ee = E();; 520 const Scalar pp = P();; 521 using std::log;; 522 return Scalar(0.5) * log((ee + pp) / (ee - pp));; 523 }; 524 ; 525 /**; 526 Determine if momentum-energy can represent a physical massive particle; 527 */; 528 bool isTimelike( ) const {; 529 Scalar ee = E(); Scalar pp = P(); return ee*ee > pp*pp;; 530 }; 531 ; 532 /**; 533 Determine if momentum-energy can represent a massless particle; 534 */; 535 bool isLightlike( Scalar tolerance; 536 = 100*std::numeric_limits<Scalar>::epsilon() ) const {; 537 Scalar ee = E(); Scalar pp = P(); Scalar delta = ee-pp;; 538 if ( ee==0 ) return pp==0;; 539 return delta*delta < tolerance * ee*ee;; 540 }; 541 ; 542 /**; 543 Determine if momentum-energy is spacelike, and represents a tachyon; 544 */; 545 bool isSpacelike( ) const {; 546 Scalar ee = E(); Scalar pp = P(); return ee*ee < pp*pp;; 547 }; 548 ; 549 typedef DisplacementVector3D< Cartesian3D<Scalar> > BetaVector;; 550 ; 551 /**; 552 The beta vector for the boost that would bring this vector into; 553 its center of mass frame (zero momentum); 554 */; 555 BetaVector BoostToCM( ) const {; 556 if (E() == 0) {; 557 if (P() == 0) {; 558 return BetaVector();; 559 } else {; 560 // TODO - should attempt to Throw with msg about; 561 // boostVector computed for LorentzVector with t=0; 562 return -Vect()/E();; 563 }; 564 }; 565 if (M2() <= 0) {; 566 // TODO - should attempt to Throw with msg about; 567 // boostVector computed for a non-timelike LorentzVector; 568 }; 569 return -Vect()/E();; 570 }; 571 ; 572 /**; 573 The beta vector for the boost that would bring this vector into; 574 its center of mass frame (zero momentum); 575 */; 576 template <class Other4Vector>; 577 BetaVector BoostToCM(const Other4Vector& v ) const {; 578 Scalar eSum = E() + v.E();; 579 DisplacementVector3D< Cartesian3D<Scalar> > vecSum = Vect() + v.Vect();; 580 if (eSum == 0) {; 581 if (vecSum.Mag2() == 0) {; 582 return BetaVecto",MatchSource.WIKI,doc/master/GenVector_2LorentzVector_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html
Deployability,update,update,". ROOT: math/genvector/inc/Math/GenVector/LorentzVector.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. LorentzVector.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: W. Brown, M. Fischler, L. Moneta 2005; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2005 , LCG ROOT MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class LorentzVector; 12//; 13// Created by: moneta at Tue May 31 17:06:09 2005; 14// Major mods by: fischler at Wed Jul 20 2005; 15//; 16// Last update: $Id$; 17//; 18#ifndef ROOT_Math_GenVector_LorentzVector; 19#define ROOT_Math_GenVector_LorentzVector 1; 20 ; 21#include ""Math/GenVector/PxPyPzE4D.h""; 22 ; 23#include ""Math/GenVector/DisplacementVector3D.h""; 24 ; 25#include ""Math/GenVector/GenVectorIO.h""; 26 ; 27#include <cmath>; 28#include <string>; 29 ; 30namespace ROOT {; 31 ; 32 namespace Math {; 33 ; 34//__________________________________________________________________________________________; 35/** @ingroup GenVector; 36 ; 37Class describing a generic LorentzVector in the 4D space-time,; 38using the specified coordinate system for the spatial vector part.; 39The metric used for the LorentzVector is (-,-,-,+).; 40In the case of LorentzVector we don't distinguish the concepts; 41of points and displacement vectors as in the 3D case,; 42since the main use case for 4D Vectors is to describe the kinematics of; 43relativistic particles. A LorentzVector behaves like a; 44DisplacementVector in 4D. The Minkowski components could be viewed as; 45v and t, or for kinematic 4-vectors, as p and E.; 46 ; 47ROOT provides specialisations and aliases to them of the ROOT::Math::LorentzVector template:; 48- ROOT::Math::PtEtaPhiMVector based on pt (rho),eta,phi and M (t) coordinates in double precision; 49- ROOT::Math::PtEtaPhiEVector based on pt (rho),eta",MatchSource.WIKI,doc/master/GenVector_2LorentzVector_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html
Energy Efficiency,energy,energy,"tor is (-,-,-,+).; 40In the case of LorentzVector we don't distinguish the concepts; 41of points and displacement vectors as in the 3D case,; 42since the main use case for 4D Vectors is to describe the kinematics of; 43relativistic particles. A LorentzVector behaves like a; 44DisplacementVector in 4D. The Minkowski components could be viewed as; 45v and t, or for kinematic 4-vectors, as p and E.; 46 ; 47ROOT provides specialisations and aliases to them of the ROOT::Math::LorentzVector template:; 48- ROOT::Math::PtEtaPhiMVector based on pt (rho),eta,phi and M (t) coordinates in double precision; 49- ROOT::Math::PtEtaPhiEVector based on pt (rho),eta,phi and E (t) coordinates in double precision; 50- ROOT::Math::PxPyPzMVector based on px,py,pz and M (mass) coordinates in double precision; 51- ROOT::Math::PxPyPzEVector based on px,py,pz and E (energy) coordinates in double precision; 52- ROOT::Math::XYZTVector based on x,y,z,t coordinates (cartesian) in double precision (same as PxPyPzEVector); 53- ROOT::Math::XYZTVectorF based on x,y,z,t coordinates (cartesian) in float precision (same as PxPyPzEVector but float); 54 ; 55@sa Overview of the @ref GenVector ""physics vector library""; 56*/; 57 ; 58 template< class CoordSystem >; 59 class LorentzVector {; 60 ; 61 public:; 62 ; 63 // ------ ctors ------; 64 ; 65 typedef typename CoordSystem::Scalar Scalar;; 66 typedef CoordSystem CoordinateType;; 67 ; 68 /**; 69 default constructor of an empty vector (Px = Py = Pz = E = 0 ); 70 */; 71 LorentzVector ( ) : fCoordinates() { }; 72 ; 73 /**; 74 generic constructors from four scalar values.; 75 The association between values and coordinate depends on the; 76 coordinate system. For PxPyPzE4D,; 77 \param a scalar value (Px); 78 \param b scalar value (Py); 79 \param c scalar value (Pz); 80 \param d scalar value (E); 81 */; 82 LorentzVector(const Scalar & a,; 83 const Scalar & b,; 84 const Scalar & c,; 85 const Scalar & d) :; 86 fCoordinates(a , b, c, d) { }; 87 ; 88 /**; 89 construct",MatchSource.WIKI,doc/master/GenVector_2LorentzVector_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html
Integrability,depend,depends,"(rho),eta,phi and E (t) coordinates in double precision; 50- ROOT::Math::PxPyPzMVector based on px,py,pz and M (mass) coordinates in double precision; 51- ROOT::Math::PxPyPzEVector based on px,py,pz and E (energy) coordinates in double precision; 52- ROOT::Math::XYZTVector based on x,y,z,t coordinates (cartesian) in double precision (same as PxPyPzEVector); 53- ROOT::Math::XYZTVectorF based on x,y,z,t coordinates (cartesian) in float precision (same as PxPyPzEVector but float); 54 ; 55@sa Overview of the @ref GenVector ""physics vector library""; 56*/; 57 ; 58 template< class CoordSystem >; 59 class LorentzVector {; 60 ; 61 public:; 62 ; 63 // ------ ctors ------; 64 ; 65 typedef typename CoordSystem::Scalar Scalar;; 66 typedef CoordSystem CoordinateType;; 67 ; 68 /**; 69 default constructor of an empty vector (Px = Py = Pz = E = 0 ); 70 */; 71 LorentzVector ( ) : fCoordinates() { }; 72 ; 73 /**; 74 generic constructors from four scalar values.; 75 The association between values and coordinate depends on the; 76 coordinate system. For PxPyPzE4D,; 77 \param a scalar value (Px); 78 \param b scalar value (Py); 79 \param c scalar value (Pz); 80 \param d scalar value (E); 81 */; 82 LorentzVector(const Scalar & a,; 83 const Scalar & b,; 84 const Scalar & c,; 85 const Scalar & d) :; 86 fCoordinates(a , b, c, d) { }; 87 ; 88 /**; 89 constructor from a LorentzVector expressed in different; 90 coordinates, or using a different Scalar type; 91 */; 92 template< class Coords >; 93 explicit constexpr LorentzVector(const LorentzVector<Coords> & v ) :; 94 fCoordinates( v.Coordinates() ) { }; 95 ; 96 /**; 97 Construct from a foreign 4D vector type, for example, HepLorentzVector; 98 Precondition: v must implement methods x(), y(), z(), and t(); 99 */; 100 template<class ForeignLorentzVector,; 101 typename = decltype(std::declval<ForeignLorentzVector>().x(); 102 + std::declval<ForeignLorentzVector>().y(); 103 + std::declval<ForeignLorentzVector>().z(); 104 + std::declval<ForeignLorentzV",MatchSource.WIKI,doc/master/GenVector_2LorentzVector_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html
Performance,load,load, LorentzVector operator * ( const Scalar & a) const {; 469 LorentzVector tmp(*this);; 470 tmp *= a;; 471 return tmp;; 472 }; 473 ; 474 /**; 475 Divide a LorentzVector by a scalar quantity; 476 \param a scalar quantity of type a; 477 \return a new mathcoreLorentzVector q = v / a same type as v; 478 */; 479 LorentzVector<CoordSystem> operator / ( const Scalar & a) const {; 480 LorentzVector<CoordSystem> tmp(*this);; 481 tmp /= a;; 482 return tmp;; 483 }; 484 ; 485 /**; 486 Negative of a LorentzVector (q = - v ); 487 \return a new LorentzVector with opposite direction and time; 488 */; 489 LorentzVector operator - () const {; 490 //LorentzVector<CoordinateType> v(*this);; 491 //v.Negate();; 492 return operator*( Scalar(-1) );; 493 }; 494 LorentzVector operator + () const {; 495 return *this;; 496 }; 497 ; 498 // ---- Relativistic Properties ----; 499 ; 500 /**; 501 Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]; 502 */; 503 Scalar Rapidity() const {; 504 // TODO - It would be good to check that E > Pz and use the Throw(); 505 // mechanism or at least load a NAN if not.; 506 // We should then move the code to a .cpp file.; 507 const Scalar ee = E();; 508 const Scalar ppz = Pz();; 509 using std::log;; 510 return Scalar(0.5) * log((ee + ppz) / (ee - ppz));; 511 }; 512 ; 513 /**; 514 Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]; 515 */; 516 Scalar ColinearRapidity() const {; 517 // TODO - It would be good to check that E > P and use the Throw(); 518 // mechanism or at least load a NAN if not.; 519 const Scalar ee = E();; 520 const Scalar pp = P();; 521 using std::log;; 522 return Scalar(0.5) * log((ee + pp) / (ee - pp));; 523 }; 524 ; 525 /**; 526 Determine if momentum-energy can represent a physical massive particle; 527 */; 528 bool isTimelike( ) const {; 529 Scalar ee = E(); Scalar pp = P(); return ee*ee > pp*pp;; 530 }; 531 ; 532 /**; 533 Determine if momentum-energy can represent a massless particle; 534 */; 535 bool isLightlike( Sca,MatchSource.WIKI,doc/master/GenVector_2LorentzVector_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html
Safety,avoid,avoid,"oostVector computed for a non-timelike LorentzVector; 568 }; 569 return -Vect()/E();; 570 }; 571 ; 572 /**; 573 The beta vector for the boost that would bring this vector into; 574 its center of mass frame (zero momentum); 575 */; 576 template <class Other4Vector>; 577 BetaVector BoostToCM(const Other4Vector& v ) const {; 578 Scalar eSum = E() + v.E();; 579 DisplacementVector3D< Cartesian3D<Scalar> > vecSum = Vect() + v.Vect();; 580 if (eSum == 0) {; 581 if (vecSum.Mag2() == 0) {; 582 return BetaVector();; 583 } else {; 584 // TODO - should attempt to Throw with msg about; 585 // boostToCM computed for two 4-vectors with combined t=0; 586 return BetaVector(vecSum/eSum);; 587 }; 588 // TODO - should attempt to Throw with msg about; 589 // boostToCM computed for two 4-vectors with combined e=0; 590 }; 591 return BetaVector (vecSum * (-1./eSum));; 592 }; 593 ; 594 //beta and gamma; 595 ; 596 /**; 597 Return beta scalar value; 598 */; 599 Scalar Beta() const {; 600 if ( E() == 0 ) {; 601 if ( P2() == 0); 602 // to avoid Nan; 603 return 0;; 604 else {; 605 GenVector::Throw (""LorentzVector::Beta() - beta computed for LorentzVector with t = 0. Return an Infinite result"");; 606 return 1./E();; 607 }; 608 }; 609 if ( M2() <= 0 ) {; 610 GenVector::Throw (""LorentzVector::Beta() - beta computed for non-timelike LorentzVector . Result is physically meaningless"" );; 611 }; 612 return P() / E();; 613 }; 614 /**; 615 Return Gamma scalar value; 616 */; 617 Scalar Gamma() const {; 618 const Scalar v2 = P2();; 619 const Scalar t2 = E() * E();; 620 if (E() == 0) {; 621 if ( P2() == 0) {; 622 return 1;; 623 } else {; 624 GenVector::Throw (""LorentzVector::Gamma() - gamma computed for LorentzVector with t = 0. Return a zero result"");; 625 ; 626 }; 627 }; 628 if ( t2 < v2 ) {; 629 GenVector::Throw (""LorentzVector::Gamma() - gamma computed for a spacelike LorentzVector. Imaginary result"");; 630 return 0;; 631 }; 632 else if ( t2 == v2 ) {; 633 GenVector::Throw (""LorentzVector::Gamma() - gamm",MatchSource.WIKI,doc/master/GenVector_2LorentzVector_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html
Security,access,access,"eclval<ForeignLorentzVector>().x(); 141 + std::declval<ForeignLorentzVector>().y(); 142 + std::declval<ForeignLorentzVector>().z(); 143 + std::declval<ForeignLorentzVector>().t())>; 144 LorentzVector & operator = ( const ForeignLorentzVector & v) {; 145 SetXYZT( v.x(), v.y(), v.z(), v.t() );; 146 return *this;; 147 }; 148 ; 149#ifdef LATER; 150 /**; 151 assign from a generic linear algebra vector implementing operator []; 152 and with a size of at least 4; 153 In this case v[0] is the first data member; 154 ( Px for a PxPyPzE4D base); 155 \param v LA vector; 156 \param index0 index of first vector element (Px); 157 */; 158 template< class LAVector >; 159 LorentzVector & AssignFrom(const LAVector & v, size_t index0=0 ) {; 160 fCoordinates.SetCoordinates( v[index0], v[index0+1], v[index0+2], v[index0+3] );; 161 return *this;; 162 }; 163#endif; 164 ; 165 // ------ Set, Get, and access coordinate data ------; 166 ; 167 /**; 168 Retrieve a const reference to the coordinates object; 169 */; 170 const CoordSystem & Coordinates() const {; 171 return fCoordinates;; 172 }; 173 ; 174 /**; 175 Set internal data based on an array of 4 Scalar numbers; 176 */; 177 LorentzVector<CoordSystem>& SetCoordinates( const Scalar src[] ) {; 178 fCoordinates.SetCoordinates(src);; 179 return *this;; 180 }; 181 ; 182 /**; 183 Set internal data based on 4 Scalar numbers; 184 */; 185 LorentzVector<CoordSystem>& SetCoordinates( Scalar a, Scalar b, Scalar c, Scalar d ) {; 186 fCoordinates.SetCoordinates(a, b, c, d);; 187 return *this;; 188 }; 189 ; 190 /**; 191 Set internal data based on 4 Scalars at *begin to *end; 192 */; 193 template< class IT >; 194 LorentzVector<CoordSystem>& SetCoordinates( IT begin, IT end ) {; 195 IT a = begin; IT b = ++begin; IT c = ++begin; IT d = ++begin;; 196 (void)end;; 197 assert (++begin==end);; 198 SetCoordinates (*a,*b,*c,*d);; 199 return *this;; 200 }; 201 ; 202 /**; 203 get internal data into 4 Scalar numbers; 204 */; 205 void GetCoordinates( Scalar& a, Scalar& b",MatchSource.WIKI,doc/master/GenVector_2LorentzVector_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html
Testability,assert,assert,"ndex0], v[index0+1], v[index0+2], v[index0+3] );; 161 return *this;; 162 }; 163#endif; 164 ; 165 // ------ Set, Get, and access coordinate data ------; 166 ; 167 /**; 168 Retrieve a const reference to the coordinates object; 169 */; 170 const CoordSystem & Coordinates() const {; 171 return fCoordinates;; 172 }; 173 ; 174 /**; 175 Set internal data based on an array of 4 Scalar numbers; 176 */; 177 LorentzVector<CoordSystem>& SetCoordinates( const Scalar src[] ) {; 178 fCoordinates.SetCoordinates(src);; 179 return *this;; 180 }; 181 ; 182 /**; 183 Set internal data based on 4 Scalar numbers; 184 */; 185 LorentzVector<CoordSystem>& SetCoordinates( Scalar a, Scalar b, Scalar c, Scalar d ) {; 186 fCoordinates.SetCoordinates(a, b, c, d);; 187 return *this;; 188 }; 189 ; 190 /**; 191 Set internal data based on 4 Scalars at *begin to *end; 192 */; 193 template< class IT >; 194 LorentzVector<CoordSystem>& SetCoordinates( IT begin, IT end ) {; 195 IT a = begin; IT b = ++begin; IT c = ++begin; IT d = ++begin;; 196 (void)end;; 197 assert (++begin==end);; 198 SetCoordinates (*a,*b,*c,*d);; 199 return *this;; 200 }; 201 ; 202 /**; 203 get internal data into 4 Scalar numbers; 204 */; 205 void GetCoordinates( Scalar& a, Scalar& b, Scalar& c, Scalar & d ) const; 206 { fCoordinates.GetCoordinates(a, b, c, d); }; 207 ; 208 /**; 209 get internal data into an array of 4 Scalar numbers; 210 */; 211 void GetCoordinates( Scalar dest[] ) const; 212 { fCoordinates.GetCoordinates(dest); }; 213 ; 214 /**; 215 get internal data into 4 Scalars at *begin to *end; 216 */; 217 template <class IT>; 218 void GetCoordinates( IT begin, IT end ) const; 219 { IT a = begin; IT b = ++begin; IT c = ++begin; IT d = ++begin;; 220 (void)end;; 221 assert (++begin==end);; 222 GetCoordinates (*a,*b,*c,*d);; 223 }; 224 ; 225 /**; 226 get internal data into 4 Scalars at *begin; 227 */; 228 template <class IT>; 229 void GetCoordinates( IT begin ) const {; 230 Scalar a,b,c,d = 0;; 231 GetCoordinates (a,b,c,d);; 232 *",MatchSource.WIKI,doc/master/GenVector_2LorentzVector_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html
Availability,avail,available,"**************************/; 10 ; 11// Header file for class LorentzVector; 12//; 13// Created by: moneta at Fri Dec 02 2005; 14//; 15// Last update: $Id$; 16//; 17#ifndef ROOT_Math_GenVector_Plane3D; 18#define ROOT_Math_GenVector_Plane3D 1; 19 ; 20#include <type_traits>; 21 ; 22#include ""Math/GenVector/DisplacementVector3D.h""; 23#include ""Math/GenVector/PositionVector3D.h""; 24 ; 25 ; 26 ; 27namespace ROOT {; 28 ; 29namespace Math {; 30 ; 31namespace Impl {; 32 ; 33//_______________________________________________________________________________; 34/**; 35 Class describing a geometrical plane in 3 dimensions.; 36 A Plane3D is a 2 dimensional surface spanned by two linearly independent vectors.; 37 The plane is described by the equation; 38 \f$ a*x + b*y + c*z + d = 0 \f$ where (a,b,c) are the components of the; 39 normal vector to the plane \f$ n = (a,b,c) \f$ and \f$ d = - n \dot x \f$, where x is any point; 40 belonging to plane.; 41 More information on the mathematics describing a plane in 3D is available on; 42 <A HREF=http://mathworld.wolfram.com/Plane.html>MathWord</A>.; 43 The Plane3D class contains the 4 scalar values in T which represent the; 44 four coefficients, fA, fB, fC, fD. fA, fB, fC are the normal components normalized to 1,; 45 i.e. fA**2 + fB**2 + fC**2 = 1; 46 ; 47 @ingroup GenVector; 48 ; 49 @sa Overview of the @ref GenVector ""physics vector library""; 50*/; 51 ; 52template <typename T = double>; 53class Plane3D {; 54 ; 55public:; 56 // ------ ctors ------; 57 ; 58 typedef T Scalar;; 59 ; 60 typedef DisplacementVector3D<Cartesian3D<T>, DefaultCoordinateSystemTag> Vector;; 61 typedef PositionVector3D<Cartesian3D<T>, DefaultCoordinateSystemTag> Point;; 62 ; 63 /**; 64 default constructor create plane z = 0; 65 */; 66 Plane3D() : fA(0), fB(0), fC(1), fD(0) {}; 67 ; 68 /**; 69 generic constructors from the four scalar values describing the plane; 70 according to the equation ax + by + cz + d = 0; 71 \param a scalar value; 72 \param b scalar value; 73 ",MatchSource.WIKI,doc/master/GenVector_2Plane3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2Plane3D_8h_source.html
Deployability,update,update,". ROOT: math/genvector/inc/Math/GenVector/Plane3D.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Plane3D.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: L. Moneta 12/2005; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2005 , LCG ROOT MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class LorentzVector; 12//; 13// Created by: moneta at Fri Dec 02 2005; 14//; 15// Last update: $Id$; 16//; 17#ifndef ROOT_Math_GenVector_Plane3D; 18#define ROOT_Math_GenVector_Plane3D 1; 19 ; 20#include <type_traits>; 21 ; 22#include ""Math/GenVector/DisplacementVector3D.h""; 23#include ""Math/GenVector/PositionVector3D.h""; 24 ; 25 ; 26 ; 27namespace ROOT {; 28 ; 29namespace Math {; 30 ; 31namespace Impl {; 32 ; 33//_______________________________________________________________________________; 34/**; 35 Class describing a geometrical plane in 3 dimensions.; 36 A Plane3D is a 2 dimensional surface spanned by two linearly independent vectors.; 37 The plane is described by the equation; 38 \f$ a*x + b*y + c*z + d = 0 \f$ where (a,b,c) are the components of the; 39 normal vector to the plane \f$ n = (a,b,c) \f$ and \f$ d = - n \dot x \f$, where x is any point; 40 belonging to plane.; 41 More information on the mathematics describing a plane in 3D is available on; 42 <A HREF=http://mathworld.wolfram.com/Plane.html>MathWord</A>.; 43 The Plane3D class contains the 4 scalar values in T which represent the; 44 four coefficients, fA, fB, fC, fD. fA, fB, fC are the normal components normalized to 1,; 45 i.e. fA**2 + fB**2 + fC**2 = 1; 46 ; 47 @ingroup GenVector; 48 ; 49 @sa Overview of the @ref GenVector ""physics vector library""; 50*/; 51 ; 52template <typename T = double>; 53class Plane3D {; 54 ; 55public:; 56 // ------ ctors ------; 57 ; 58 typedef T Scalar;; 59 ; 60 typedef Displa",MatchSource.WIKI,doc/master/GenVector_2Plane3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2Plane3D_8h_source.html
Safety,avoid,avoid,"PositionVector3D<T, U>(pxyz.X(), pxyz.Y(), pxyz.Z());; 203 }; 204 ; 205 // ------------------- Equality -----------------; 206 ; 207 /**; 208 Exact equality; 209 */; 210 bool operator==(const Plane3D &rhs) const { return (fA == rhs.fA && fB == rhs.fB && fC == rhs.fC && fD == rhs.fD); }; 211 bool operator!=(const Plane3D &rhs) const { return !(operator==(rhs)); }; 212 ; 213protected:; 214 /**; 215 Normalize the normal (a,b,c) plane components; 216 */; 217 template <typename SCALAR = T, typename std::enable_if<std::is_arithmetic<SCALAR>::value>::type * = nullptr>; 218 void Normalize(); 219 {; 220 // normalize the plane; 221 using std::sqrt;; 222 const SCALAR s = sqrt(fA * fA + fB * fB + fC * fC);; 223 // what to do if s = 0 ?; 224 if (s == SCALAR(0)) {; 225 fD = SCALAR(0);; 226 } else {; 227 const SCALAR w = Scalar(1) / s;; 228 fA *= w;; 229 fB *= w;; 230 fC *= w;; 231 fD *= w;; 232 }; 233 }; 234 ; 235 /**; 236 Normalize the normal (a,b,c) plane components; 237 */; 238 template <typename SCALAR = T, typename std::enable_if<!std::is_arithmetic<SCALAR>::value>::type * = nullptr>; 239 void Normalize(); 240 {; 241 // normalize the plane; 242 using std::sqrt;; 243 SCALAR s = sqrt(fA * fA + fB * fB + fC * fC);; 244 // what to do if s = 0 ?; 245 const auto m = (s == SCALAR(0));; 246 // set zero entries to 1 in the vector to avoid /0 later on; 247 s(m) = SCALAR(1);; 248 fD(m) = SCALAR(0);; 249 const SCALAR w = SCALAR(1) / s;; 250 fA *= w;; 251 fB *= w;; 252 fC *= w;; 253 fD *= w;; 254 }; 255 ; 256private:; 257 // internal method to construct class from a vector and a point; 258 void BuildFromVecAndPoint(const Vector &n, const Point &p); 259 {; 260 // build from a normal vector and a point; 261 fA = n.X();; 262 fB = n.Y();; 263 fC = n.Z();; 264 fD = -n.Dot(p);; 265 Normalize();; 266 }; 267 ; 268 // internal method to construct class from 3 points; 269 void BuildFrom3Points(const Point &p1, const Point &p2, const Point &p3); 270 {; 271 // plane from three points; 272 // normal ",MatchSource.WIKI,doc/master/GenVector_2Plane3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2Plane3D_8h_source.html
Security,access,access," b);; 144 return *this;; 145 }; 146 ; 147 ; 148 /**; 149 get internal data into 2 Scalar numbers.; 150 These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector; 151 */; 152 void GetCoordinates( Scalar& a, Scalar& b) const; 153 { fCoordinates.GetCoordinates(a, b); }; 154 ; 155 ; 156 /**; 157 set the values of the vector from the cartesian components (x,y); 158 (if the vector is held in polar coordinates,; 159 then (x, y) are converted to that form); 160 */; 161 PositionVector2D<CoordSystem, Tag>& SetXY (Scalar a, Scalar b) {; 162 fCoordinates.SetXY (a,b);; 163 return *this;; 164 }; 165 ; 166 // ------------------- Equality -----------------; 167 ; 168 /**; 169 Exact equality; 170 */; 171 bool operator==(const PositionVector2D & rhs) const {; 172 return fCoordinates==rhs.fCoordinates;; 173 }; 174 bool operator!= (const PositionVector2D & rhs) const {; 175 return !(operator==(rhs));; 176 }; 177 ; 178 // ------ Individual element access, in various coordinate systems ------; 179 ; 180 /**; 181 Dimension; 182 */; 183 unsigned int Dimension() const { return fDimension; };; 184 ; 185 /**; 186 Cartesian X, converting if necessary from internal coordinate system.; 187 */; 188 Scalar X() const { return fCoordinates.X(); }; 189 ; 190 /**; 191 Cartesian Y, converting if necessary from internal coordinate system.; 192 */; 193 Scalar Y() const { return fCoordinates.Y(); }; 194 ; 195 /**; 196 Polar R, converting if necessary from internal coordinate system.; 197 */; 198 Scalar R() const { return fCoordinates.R(); }; 199 ; 200 /**; 201 Polar phi, converting if necessary from internal coordinate system.; 202 */; 203 Scalar Phi() const { return fCoordinates.Phi(); }; 204 ; 205 /**; 206 Magnitute squared ( r^2 in spherical coordinate); 207 */; 208 Scalar Mag2() const { return fCoordinates.Mag2();}; 209 ; 210 ; 211 // It is physically meaningless to speak of the unit vector corresponding; 212 // to a point.; 213 ; 214 // ------ Setting individual elements presen",MatchSource.WIKI,doc/master/GenVector_2PositionVector2D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2PositionVector2D_8h_source.html
Deployability,update,update,". ROOT: math/genvector/inc/Math/GenVector/PositionVector3D.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. PositionVector3D.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: W. Brown, M. Fischler, L. Moneta 2005; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2005 , LCG ROOT MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class PositionVector3D; 12//; 13// Created by: Lorenzo Moneta at Mon May 30 15:25:04 2005; 14//; 15// Last update: $Id$; 16//; 17#ifndef ROOT_Math_GenVector_PositionVector3D; 18#define ROOT_Math_GenVector_PositionVector3D 1; 19 ; 20#include ""Math/GenVector/DisplacementVector3Dfwd.h""; 21 ; 22#include ""Math/GenVector/Cartesian3D.h""; 23 ; 24#include ""Math/GenVector/GenVectorIO.h""; 25 ; 26#include ""Math/GenVector/BitReproducible.h""; 27 ; 28#include ""Math/GenVector/CoordinateSystemTags.h""; 29 ; 30 ; 31#include <cassert>; 32 ; 33namespace ROOT {; 34 ; 35 namespace Math {; 36 ; 37 ; 38//__________________________________________________________________________________________; 39 /**; 40 Class describing a generic position vector (point) in 3 dimensions.; 41 This class is templated on the type of Coordinate system.; 42 One example is the XYZPoint which is a vector based on; 43 double precision x,y,z data members by using the; 44 ROOT::Math::Cartesian3D<double> Coordinate system.; 45 The class is having also an extra template parameter, the coordinate system tag,; 46 to be able to identify (tag) vector described in different reference coordinate system,; 47 like global or local coordinate systems.; 48 ; 49 @ingroup GenVector; 50 ; 51 @sa Overview of the @ref GenVector ""physics vector library""; 52 */; 53 ; 54 template <class CoordSystem, class Tag = DefaultCoordinateSystemTag >; 55 class PositionVector3D {; 56 ; 57 public:; 58 ; 59 typedef ty",MatchSource.WIKI,doc/master/GenVector_2PositionVector3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2PositionVector3D_8h_source.html
Security,access,access,"; 223 */; 224 template <class IT>; 225 void GetCoordinates( IT begin ) const {; 226 Scalar a = Scalar(0);; 227 Scalar b = Scalar(0);; 228 Scalar c = Scalar(0);; 229 GetCoordinates(a, b, c);; 230 *begin++ = a;; 231 *begin++ = b;; 232 *begin = c;; 233 }; 234 ; 235 /**; 236 set the values of the vector from the cartesian components (x,y,z); 237 (if the vector is held in polar or cylindrical eta coordinates,; 238 then (x, y, z) are converted to that form); 239 */; 240 PositionVector3D<CoordSystem, Tag>& SetXYZ (Scalar a, Scalar b, Scalar c) {; 241 fCoordinates.SetXYZ(a,b,c);; 242 return *this;; 243 }; 244 ; 245 // ------------------- Equality -----------------; 246 ; 247 /**; 248 Exact equality; 249 */; 250 bool operator==(const PositionVector3D & rhs) const {; 251 return fCoordinates==rhs.fCoordinates;; 252 }; 253 bool operator!= (const PositionVector3D & rhs) const {; 254 return !(operator==(rhs));; 255 }; 256 ; 257 // ------ Individual element access, in various coordinate systems ------; 258 ; 259 /**; 260 Dimension; 261 */; 262 unsigned int Dimension() const; 263 {; 264 return fDimension;; 265 };; 266 ; 267 /**; 268 Cartesian X, converting if necessary from internal coordinate system.; 269 */; 270 Scalar X() const { return fCoordinates.X(); }; 271 ; 272 /**; 273 Cartesian Y, converting if necessary from internal coordinate system.; 274 */; 275 Scalar Y() const { return fCoordinates.Y(); }; 276 ; 277 /**; 278 Cartesian Z, converting if necessary from internal coordinate system.; 279 */; 280 Scalar Z() const { return fCoordinates.Z(); }; 281 ; 282 /**; 283 Polar R, converting if necessary from internal coordinate system.; 284 */; 285 Scalar R() const { return fCoordinates.R(); }; 286 ; 287 /**; 288 Polar theta, converting if necessary from internal coordinate system.; 289 */; 290 Scalar Theta() const { return fCoordinates.Theta(); }; 291 ; 292 /**; 293 Polar phi, converting if necessary from internal coordinate system.; 294 */; 295 Scalar Phi() const { return fCoordin",MatchSource.WIKI,doc/master/GenVector_2PositionVector3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2PositionVector3D_8h_source.html
Testability,assert,assert,"tionVector3D & assignFrom(const LAVector & v, size_t index0 = 0) {; 162 fCoordinates = CoordSystem ( v[index0], v[index0+1], v[index0+2] );; 163 return *this;; 164 }; 165#endif; 166 ; 167 /**; 168 Retrieve a copy of the coordinates object; 169 */; 170 const CoordSystem & Coordinates() const {; 171 return fCoordinates;; 172 }; 173 ; 174 /**; 175 Set internal data based on a C-style array of 3 Scalar numbers; 176 */; 177 PositionVector3D<CoordSystem, Tag>& SetCoordinates( const Scalar src[] ); 178 { fCoordinates.SetCoordinates(src); return *this; }; 179 ; 180 /**; 181 Set internal data based on 3 Scalar numbers; 182 */; 183 PositionVector3D<CoordSystem, Tag>& SetCoordinates( Scalar a, Scalar b, Scalar c ); 184 { fCoordinates.SetCoordinates(a, b, c); return *this; }; 185 ; 186 /**; 187 Set internal data based on 3 Scalars at *begin to *end; 188 */; 189 template <class IT>; 190 PositionVector3D<CoordSystem, Tag>& SetCoordinates( IT begin, IT end ); 191 { IT a = begin; IT b = ++begin; IT c = ++begin;; 192 (void)end;; 193 assert (++begin==end);; 194 SetCoordinates (*a,*b,*c);; 195 return *this;; 196 }; 197 ; 198 /**; 199 get internal data into 3 Scalar numbers; 200 */; 201 void GetCoordinates( Scalar& a, Scalar& b, Scalar& c ) const; 202 { fCoordinates.GetCoordinates(a, b, c); }; 203 ; 204 /**; 205 get internal data into a C-style array of 3 Scalar numbers; 206 */; 207 void GetCoordinates( Scalar dest[] ) const; 208 { fCoordinates.GetCoordinates(dest); }; 209 ; 210 /**; 211 get internal data into 3 Scalars at *begin to *end (3 past begin); 212 */; 213 template <class IT>; 214 void GetCoordinates( IT begin, IT end ) const; 215 { IT a = begin; IT b = ++begin; IT c = ++begin;; 216 (void)end;; 217 assert (++begin==end);; 218 GetCoordinates (*a,*b,*c);; 219 }; 220 ; 221 /**; 222 get internal data into 3 Scalars at *begin; 223 */; 224 template <class IT>; 225 void GetCoordinates( IT begin ) const {; 226 Scalar a = Scalar(0);; 227 Scalar b = Scalar(0);; 228 Scalar c = Scalar(0);",MatchSource.WIKI,doc/master/GenVector_2PositionVector3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2PositionVector3D_8h_source.html
Deployability,update,update,". ROOT: math/genvector/inc/Math/GenVector/Quaternion.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Quaternion.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: W. Brown, M. Fischler, L. Moneta 2005; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2005 , LCG ROOT FNAL MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for rotation in 3 dimensions, represented by a quaternion; 12// Created by: Mark Fischler Thurs June 9 2005; 13//; 14// Last update: $Id$; 15//; 16#ifndef ROOT_Math_GenVector_Quaternion; 17#define ROOT_Math_GenVector_Quaternion 1; 18 ; 19 ; 20#include ""Math/GenVector/Cartesian3D.h""; 21#include ""Math/GenVector/DisplacementVector3D.h""; 22#include ""Math/GenVector/PositionVector3D.h""; 23#include ""Math/GenVector/LorentzVector.h""; 24#include ""Math/GenVector/3DConversions.h""; 25#include ""Math/GenVector/3DDistances.h""; 26 ; 27#include <algorithm>; 28#include <cassert>; 29 ; 30 ; 31namespace ROOT {; 32namespace Math {; 33 ; 34 ; 35//__________________________________________________________________________________________; 36 /**; 37 Rotation class with the (3D) rotation represented by; 38 a unit quaternion (u, i, j, k).; 39 This is the optimal representation for multiplication of multiple; 40 rotations, and for computation of group-manifold-invariant distance; 41 between two rotations.; 42 See also ROOT::Math::AxisAngle, ROOT::Math::EulerAngles, and ROOT::Math::Rotation3D.; 43 ; 44 @ingroup GenVector; 45 ; 46 @sa Overview of the @ref GenVector ""physics vector library""; 47 */; 48 ; 49class Quaternion {; 50 ; 51public:; 52 ; 53 typedef double Scalar;; 54 ; 55 // ========== Constructors and Assignment =====================; 56 ; 57 /**; 58 Default constructor (identity rotation); 59 */; 60 Quaternion(); 61 : fU(1.0); 62 , fI(0.0); 63 , fJ(0.0); 64 , fK(0.",MatchSource.WIKI,doc/master/GenVector_2Quaternion_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2Quaternion_8h_source.html
Testability,assert,assert," 83 /**; 84 Construct from four Scalars representing the coefficients of u, i, j, k; 85 */; 86 Quaternion(Scalar u, Scalar i, Scalar j, Scalar k) :; 87 fU(u), fI(i), fJ(j), fK(k) { }; 88 ; 89 // The compiler-generated copy ctor, copy assignment, and dtor are OK.; 90 ; 91 /**; 92 Re-adjust components to eliminate small deviations from |Q| = 1; 93 orthonormality.; 94 */; 95 void Rectify();; 96 ; 97 /**; 98 Assign from another supported rotation type (see gv_detail::convert ); 99 */; 100 template <class OtherRotation>; 101 Quaternion & operator=( OtherRotation const & r ) {; 102 gv_detail::convert(r,*this);; 103 return *this;; 104 }; 105 ; 106 // ======== Components ==============; 107 ; 108 /**; 109 Set the four components given an iterator to the start of; 110 the desired data, and another to the end (4 past start).; 111 */; 112 template<class IT>; 113 void SetComponents(IT begin, IT end) {; 114 fU = *begin++;; 115 fI = *begin++;; 116 fJ = *begin++;; 117 fK = *begin++;; 118 (void)end;; 119 assert (end==begin);; 120 }; 121 ; 122 /**; 123 Get the components into data specified by an iterator begin; 124 and another to the end of the desired data (4 past start).; 125 */; 126 template<class IT>; 127 void GetComponents(IT begin, IT end) const {; 128 *begin++ = fU;; 129 *begin++ = fI;; 130 *begin++ = fJ;; 131 *begin++ = fK;; 132 (void)end;; 133 assert (end==begin);; 134 }; 135 ; 136 /**; 137 Get the components into data specified by an iterator begin; 138 */; 139 template<class IT>; 140 void GetComponents(IT begin ) const {; 141 *begin++ = fU;; 142 *begin++ = fI;; 143 *begin++ = fJ;; 144 *begin = fK;; 145 }; 146 ; 147 /**; 148 Set the components based on four Scalars. The sum of the squares of; 149 these Scalars should be 1; no checking is done.; 150 */; 151 void SetComponents(Scalar u, Scalar i, Scalar j, Scalar k) {; 152 fU=u; fI=i; fJ=j; fK=k;; 153 }; 154 ; 155 /**; 156 Get the components into four Scalars.; 157 */; 158 void GetComponents(Scalar & u, Scalar & i, Scalar & ",MatchSource.WIKI,doc/master/GenVector_2Quaternion_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2Quaternion_8h_source.html
Deployability,update,update,". ROOT: math/genvector/inc/Math/GenVector/Rotation3D.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Rotation3D.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: W. Brown, M. Fischler, L. Moneta 2005; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2005 , LCG ROOT FNAL MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class Rotation in 3 dimensions, represented by 3x3 matrix; 12//; 13// Created by: Mark Fischler Thurs June 9 2005; 14//; 15// Last update: $Id$; 16//; 17#ifndef ROOT_Math_GenVector_Rotation3D; 18#define ROOT_Math_GenVector_Rotation3D 1; 19 ; 20 ; 21#include ""Math/GenVector/Cartesian3D.h""; 22#include ""Math/GenVector/DisplacementVector3D.h""; 23#include ""Math/GenVector/PositionVector3D.h""; 24#include ""Math/GenVector/PxPyPzE4D.h""; 25#include ""Math/GenVector/LorentzVector.h""; 26#include ""Math/GenVector/3DConversions.h""; 27#include ""Math/GenVector/3DDistances.h""; 28 ; 29#include ""Math/GenVector/Rotation3Dfwd.h""; 30#include ""Math/GenVector/AxisAnglefwd.h""; 31#include ""Math/GenVector/EulerAnglesfwd.h""; 32#include ""Math/GenVector/Quaternionfwd.h""; 33#include ""Math/GenVector/RotationXfwd.h""; 34#include ""Math/GenVector/RotationYfwd.h""; 35#include ""Math/GenVector/RotationZfwd.h""; 36 ; 37 ; 38#include <algorithm>; 39#include <cassert>; 40#include <iostream>; 41 ; 42 ; 43namespace ROOT {; 44namespace Math {; 45 ; 46 ; 47//__________________________________________________________________________________________; 48 /**; 49 Rotation class with the (3D) rotation represented by; 50 a 3x3 orthogonal matrix.; 51 This is the optimal representation for application to vectors.; 52 See also ROOT::Math::AxisAngle, ROOT::Math::EulerAngles, and ROOT::Math::Quaternion for; 53 classes which have conversion operators to Rotation3D.; 54 ; 55 All Rotations types (not onl",MatchSource.WIKI,doc/master/GenVector_2Rotation3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2Rotation3D_8h_source.html
Performance,perform,performed,") { gv_detail::convert(a, *this); }; 104 ; 105 /**; 106 Construct from EulerAngles; 107 */; 108 explicit Rotation3D( EulerAngles const & e ) { gv_detail::convert(e, *this); }; 109 ; 110 /**; 111 Construct from RotationZYX; 112 */; 113 explicit Rotation3D( RotationZYX const & e ) { gv_detail::convert(e, *this); }; 114 ; 115 /**; 116 Construct from a Quaternion; 117 */; 118 explicit Rotation3D( Quaternion const & q ) { gv_detail::convert(q, *this); }; 119 ; 120 /**; 121 Construct from an axial rotation; 122 */; 123 explicit Rotation3D( RotationZ const & r ) { gv_detail::convert(r, *this); }; 124 explicit Rotation3D( RotationY const & r ) { gv_detail::convert(r, *this); }; 125 explicit Rotation3D( RotationX const & r ) { gv_detail::convert(r, *this); }; 126 ; 127 /**; 128 Construct from a linear algebra matrix of size at least 3x3,; 129 which must support operator()(i,j) to obtain elements (0,0) thru (2,2).; 130 Precondition: The matrix is assumed to be orthonormal. No checking; 131 or re-adjusting is performed.; 132 */; 133 template<class ForeignMatrix>; 134 explicit constexpr Rotation3D(const ForeignMatrix & m) { SetComponents(m); }; 135 ; 136 /**; 137 Construct from three orthonormal vectors (which must have methods; 138 x(), y() and z()) which will be used as the columns of the rotation; 139 matrix. The orthonormality will be checked, and values adjusted; 140 so that the result will always be a good rotation matrix.; 141 */; 142 template<class ForeignVector>; 143 Rotation3D(const ForeignVector& v1,; 144 const ForeignVector& v2,; 145 const ForeignVector& v3 ) { SetComponents(v1, v2, v3); }; 146 ; 147 // compiler generated destruuctor is ok; 148 ; 149 /**; 150 Raw constructor from nine Scalar components (without any checking); 151 */; 152 Rotation3D(Scalar xx, Scalar xy, Scalar xz,; 153 Scalar yx, Scalar yy, Scalar yz,; 154 Scalar zx, Scalar zy, Scalar zz); 155 {; 156 SetComponents (xx, xy, xz, yx, yy, yz, zx, zy, zz);; 157 }; 158 ; 159 // need to implement assignment",MatchSource.WIKI,doc/master/GenVector_2Rotation3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2Rotation3D_8h_source.html
Safety,avoid,avoid,"bra matrix of size at least 3x3,; 129 which must support operator()(i,j) to obtain elements (0,0) thru (2,2).; 130 Precondition: The matrix is assumed to be orthonormal. No checking; 131 or re-adjusting is performed.; 132 */; 133 template<class ForeignMatrix>; 134 explicit constexpr Rotation3D(const ForeignMatrix & m) { SetComponents(m); }; 135 ; 136 /**; 137 Construct from three orthonormal vectors (which must have methods; 138 x(), y() and z()) which will be used as the columns of the rotation; 139 matrix. The orthonormality will be checked, and values adjusted; 140 so that the result will always be a good rotation matrix.; 141 */; 142 template<class ForeignVector>; 143 Rotation3D(const ForeignVector& v1,; 144 const ForeignVector& v2,; 145 const ForeignVector& v3 ) { SetComponents(v1, v2, v3); }; 146 ; 147 // compiler generated destruuctor is ok; 148 ; 149 /**; 150 Raw constructor from nine Scalar components (without any checking); 151 */; 152 Rotation3D(Scalar xx, Scalar xy, Scalar xz,; 153 Scalar yx, Scalar yy, Scalar yz,; 154 Scalar zx, Scalar zy, Scalar zz); 155 {; 156 SetComponents (xx, xy, xz, yx, yy, yz, zx, zy, zz);; 157 }; 158 ; 159 // need to implement assignment operator to avoid using the templated one; 160 ; 161 /**; 162 Assignment operator; 163 */; 164 Rotation3D &; 165 operator=( Rotation3D const & rhs ) {; 166 SetComponents( rhs.fM[0], rhs.fM[1], rhs.fM[2],; 167 rhs.fM[3], rhs.fM[4], rhs.fM[5],; 168 rhs.fM[6], rhs.fM[7], rhs.fM[8] );; 169 return *this;; 170 }; 171 ; 172 /**; 173 Assign from an AxisAngle; 174 */; 175 Rotation3D &; 176 operator=( AxisAngle const & a ) { return operator=(Rotation3D(a)); }; 177 ; 178 /**; 179 Assign from EulerAngles; 180 */; 181 Rotation3D &; 182 operator=( EulerAngles const & e ) { return operator=(Rotation3D(e)); }; 183 ; 184 /**; 185 Assign from RotationZYX; 186 */; 187 Rotation3D &; 188 operator=( RotationZYX const & r ) { return operator=(Rotation3D(r)); }; 189 ; 190 /**; 191 Assign from a Quaternion; 192 */; 193 R",MatchSource.WIKI,doc/master/GenVector_2Rotation3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2Rotation3D_8h_source.html
Security,access,access,"pecified by an iterator begin; 275 and another to the end of the desired data (9 past start).; 276 */; 277 template<class IT>; 278 void GetComponents(IT begin, IT end) const {; 279 for (int i = 0; i <9; ++i) {; 280 *begin = fM[i];; 281 ++begin;; 282 }; 283 (void)end;; 284 assert (end==begin);; 285 }; 286 ; 287 /**; 288 Get the 9 matrix components into data specified by an iterator begin; 289 */; 290 template<class IT>; 291 void GetComponents(IT begin) const {; 292 std::copy ( fM, fM+9, begin );; 293 }; 294 ; 295 /**; 296 Set components from a linear algebra matrix of size at least 3x3,; 297 which must support operator()(i,j) to obtain elements (0,0) thru (2,2).; 298 Precondition: The matrix is assumed to be orthonormal. NO checking; 299 or re-adjusting is performed.; 300 */; 301 template<class ForeignMatrix>; 302 void; 303 SetRotationMatrix (const ForeignMatrix & m) {; 304 fM[kXX]=m(0,0); fM[kXY]=m(0,1); fM[kXZ]=m(0,2);; 305 fM[kYX]=m(1,0); fM[kYY]=m(1,1); fM[kYZ]=m(1,2);; 306 fM[kZX]=m(2,0); fM[kZY]=m(2,1); fM[kZZ]=m(2,2);; 307 }; 308 ; 309 /**; 310 Get components into a linear algebra matrix of size at least 3x3,; 311 which must support operator()(i,j) for write access to elements; 312 (0,0) thru (2,2).; 313 */; 314 template<class ForeignMatrix>; 315 void; 316 GetRotationMatrix (ForeignMatrix & m) const {; 317 m(0,0)=fM[kXX]; m(0,1)=fM[kXY]; m(0,2)=fM[kXZ];; 318 m(1,0)=fM[kYX]; m(1,1)=fM[kYY]; m(1,2)=fM[kYZ];; 319 m(2,0)=fM[kZX]; m(2,1)=fM[kZY]; m(2,2)=fM[kZZ];; 320 }; 321 ; 322 /**; 323 Set the components from nine scalars -- UNCHECKED for orthonormaility; 324 */; 325 void; 326 SetComponents (Scalar xx, Scalar xy, Scalar xz,; 327 Scalar yx, Scalar yy, Scalar yz,; 328 Scalar zx, Scalar zy, Scalar zz) {; 329 fM[kXX]=xx; fM[kXY]=xy; fM[kXZ]=xz;; 330 fM[kYX]=yx; fM[kYY]=yy; fM[kYZ]=yz;; 331 fM[kZX]=zx; fM[kZY]=zy; fM[kZZ]=zz;; 332 }; 333 ; 334 /**; 335 Get the nine components into nine scalars; 336 */; 337 void; 338 GetComponents (Scalar &xx, Scalar &xy, Scalar &xz,;",MatchSource.WIKI,doc/master/GenVector_2Rotation3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2Rotation3D_8h_source.html
Testability,assert,assert,"]=v1.x(); fM[kXY]=v2.x(); fM[kXZ]=v3.x();; 239 fM[kYX]=v1.y(); fM[kYY]=v2.y(); fM[kYZ]=v3.y();; 240 fM[kZX]=v1.z(); fM[kZY]=v2.z(); fM[kZZ]=v3.z();; 241 Rectify();; 242 }; 243 ; 244 /**; 245 Get components into three vectors which will be the (orthonormal); 246 columns of the rotation matrix. (The vector class must have a; 247 constructor from 3 Scalars.); 248 */; 249 template<class ForeignVector>; 250 void; 251 GetComponents ( ForeignVector& v1,; 252 ForeignVector& v2,; 253 ForeignVector& v3 ) const {; 254 v1 = ForeignVector ( fM[kXX], fM[kYX], fM[kZX] );; 255 v2 = ForeignVector ( fM[kXY], fM[kYY], fM[kZY] );; 256 v3 = ForeignVector ( fM[kXZ], fM[kYZ], fM[kZZ] );; 257 }; 258 ; 259 /**; 260 Set the 9 matrix components given an iterator to the start of; 261 the desired data, and another to the end (9 past start).; 262 */; 263 template<class IT>; 264 void SetComponents(IT begin, IT end) {; 265 for (int i = 0; i <9; ++i) {; 266 fM[i] = *begin;; 267 ++begin;; 268 }; 269 (void)end;; 270 assert (end==begin);; 271 }; 272 ; 273 /**; 274 Get the 9 matrix components into data specified by an iterator begin; 275 and another to the end of the desired data (9 past start).; 276 */; 277 template<class IT>; 278 void GetComponents(IT begin, IT end) const {; 279 for (int i = 0; i <9; ++i) {; 280 *begin = fM[i];; 281 ++begin;; 282 }; 283 (void)end;; 284 assert (end==begin);; 285 }; 286 ; 287 /**; 288 Get the 9 matrix components into data specified by an iterator begin; 289 */; 290 template<class IT>; 291 void GetComponents(IT begin) const {; 292 std::copy ( fM, fM+9, begin );; 293 }; 294 ; 295 /**; 296 Set components from a linear algebra matrix of size at least 3x3,; 297 which must support operator()(i,j) to obtain elements (0,0) thru (2,2).; 298 Precondition: The matrix is assumed to be orthonormal. NO checking; 299 or re-adjusting is performed.; 300 */; 301 template<class ForeignMatrix>; 302 void; 303 SetRotationMatrix (const ForeignMatrix & m) {; 304 fM[kXX]=m(0,0); fM[kXY]=m(0,1)",MatchSource.WIKI,doc/master/GenVector_2Rotation3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2Rotation3D_8h_source.html
Deployability,update,update,". ROOT: math/genvector/inc/Math/GenVector/RotationX.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. RotationX.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: W. Brown, M. Fischler, L. Moneta 2005; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2005 , LCG ROOT FNAL MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class RotationZ representing a rotation about the Z axis; 12//; 13// Created by: Mark Fischler Mon July 18 2005; 14//; 15// Last update: $Id$; 16//; 17#ifndef ROOT_Math_GenVector_RotationX; 18#define ROOT_Math_GenVector_RotationX 1; 19 ; 20 ; 21#include ""Math/GenVector/Cartesian3D.h""; 22#include ""Math/GenVector/DisplacementVector3D.h""; 23#include ""Math/GenVector/PositionVector3D.h""; 24#include ""Math/GenVector/LorentzVector.h""; 25#include ""Math/GenVector/3DDistances.h""; 26 ; 27#include ""Math/GenVector/RotationXfwd.h""; 28 ; 29#include <cmath>; 30 ; 31namespace ROOT {; 32namespace Math {; 33 ; 34 ; 35//__________________________________________________________________________________________; 36 /**; 37 Rotation class representing a 3D rotation about the X axis by the angle of rotation.; 38 For efficiency reason, in addition to the angle, the sine and cosine of the angle are held; 39 ; 40 @ingroup GenVector; 41 ; 42 @sa Overview of the @ref GenVector ""physics vector library""; 43 */; 44 ; 45class RotationX {; 46 ; 47public:; 48 ; 49 typedef double Scalar;; 50 ; 51 ; 52 // ========== Constructors and Assignment =====================; 53 ; 54 /**; 55 Default constructor (identity rotation); 56 */; 57 RotationX() : fAngle(0), fSin(0), fCos(1) { }; 58 ; 59 /**; 60 Construct from an angle; 61 */; 62 explicit RotationX( Scalar angle ) : fAngle(angle),; 63 fSin(std::sin(angle)),; 64 fCos(std::cos(angle)); 65 {; 66 Rectify();; 67 }; 68 ; 69 // The compil",MatchSource.WIKI,doc/master/GenVector_2RotationX_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2RotationX_8h_source.html
Deployability,update,update,". ROOT: math/genvector/inc/Math/GenVector/RotationY.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. RotationY.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: W. Brown, M. Fischler, L. Moneta 2005; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2005 , LCG ROOT FNAL MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class RotationY representing a rotation about the Y axis; 12//; 13// Created by: Mark Fischler Mon July 18 2005; 14//; 15// Last update: $Id$; 16//; 17#ifndef ROOT_Math_GenVector_RotationY; 18#define ROOT_Math_GenVector_RotationY 1; 19 ; 20 ; 21#include ""Math/GenVector/Cartesian3D.h""; 22#include ""Math/GenVector/DisplacementVector3D.h""; 23#include ""Math/GenVector/PositionVector3D.h""; 24#include ""Math/GenVector/LorentzVector.h""; 25#include ""Math/GenVector/3DDistances.h""; 26 ; 27#include ""Math/GenVector/RotationYfwd.h""; 28 ; 29#include <cmath>; 30 ; 31namespace ROOT {; 32namespace Math {; 33 ; 34 ; 35//__________________________________________________________________________________________; 36 /**; 37 Rotation class representing a 3D rotation about the Y axis by the angle of rotation.; 38 For efficiency reason, in addition to the angle, the sine and cosine of the angle are held; 39 ; 40 @ingroup GenVector; 41 ; 42 @sa Overview of the @ref GenVector ""physics vector library""; 43 */; 44 ; 45class RotationY {; 46 ; 47public:; 48 ; 49 typedef double Scalar;; 50 ; 51 ; 52 // ========== Constructors and Assignment =====================; 53 ; 54 /**; 55 Default constructor (identity rotation); 56 */; 57 RotationY() : fAngle(0), fSin(0), fCos(1) { }; 58 ; 59 /**; 60 Construct from an angle; 61 */; 62 explicit RotationY( Scalar angle ) : fAngle(angle),; 63 fSin(std::sin(angle)),; 64 fCos(std::cos(angle)); 65 {; 66 Rectify();; 67 }; 68 ; 69 // The compil",MatchSource.WIKI,doc/master/GenVector_2RotationY_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2RotationY_8h_source.html
Deployability,update,update,". ROOT: math/genvector/inc/Math/GenVector/RotationZYX.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. RotationZYX.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: J. Palacios, L. Moneta 2007; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2007 , LCG ROOT MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class Rotation in 3 dimensions, described by 3 Z-Y-X Euler angles; 12// representing a rotation along Z, Y and X; 13//; 14// Created by: Lorenzo Moneta, Wed. May 22, 2007; 15//; 16// Last update: $Id$; 17//; 18#ifndef ROOT_Math_GenVector_RotationZYX; 19#define ROOT_Math_GenVector_RotationZYX 1; 20 ; 21#include ""Math/Math.h""; 22 ; 23#include ""Math/GenVector/Rotation3D.h""; 24 ; 25 ; 26#include ""Math/GenVector/DisplacementVector3D.h""; 27 ; 28#include ""Math/GenVector/PositionVector3D.h""; 29 ; 30#include ""Math/GenVector/LorentzVector.h""; 31 ; 32#include ""Math/GenVector/3DConversions.h""; 33 ; 34 ; 35#include <algorithm>; 36#include <cassert>; 37#include <iostream>; 38 ; 39 ; 40namespace ROOT {; 41namespace Math {; 42 ; 43 ; 44//__________________________________________________________________________________________; 45 /**; 46 Rotation class with the (3D) rotation represented by; 47 angles describing first a rotation of; 48 an angle phi (yaw) about the Z axis,; 49 followed by a rotation of an angle theta (pitch) about the Y axis,; 50 followed by a third rotation of an angle psi (roll) about the X axis.; 51 Note that the rotations are extrinsic rotations happening around a fixed coordinate system. ; 52 This is different than the convention of the ROOT::Math::EulerAngles class, where the rotation are intrinsic. ; 53 Also it has not to be confused with the typical Goldstein definition of the Euler Angles; 54 (Z-X-Z or 313 sequence) which is used by the ROOT::M",MatchSource.WIKI,doc/master/GenVector_2RotationZYX_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2RotationZYX_8h_source.html
Testability,assert,assert,"6 */; 97 void Rectify();; 98 ; 99 ; 100 // ======== Construction and Assignment From other Rotation Forms ==================; 101 ; 102 /**; 103 Construct from another supported rotation type (see gv_detail::convert ); 104 */; 105 template <class OtherRotation>; 106 explicit constexpr RotationZYX(const OtherRotation & r) {gv_detail::convert(r,*this);}; 107 ; 108 ; 109 /**; 110 Assign from another supported rotation type (see gv_detail::convert ); 111 */; 112 template <class OtherRotation>; 113 RotationZYX & operator=( OtherRotation const & r ) {; 114 gv_detail::convert(r,*this);; 115 return *this;; 116 }; 117 ; 118 ; 119 // ======== Components ==============; 120 ; 121 /**; 122 Set the three Euler angles given a pair of pointers or iterators; 123 defining the beginning and end of an array of three Scalars.; 124 */; 125 template<class IT>; 126 void SetComponents(IT begin, IT end) {; 127 fPhi = *begin++;; 128 fTheta = *begin++;; 129 fPsi = *begin++;; 130 (void)end;; 131 assert(begin == end);; 132 Rectify();; 133 }; 134 ; 135 /**; 136 Get the axis and then the angle into data specified by an iterator begin; 137 and another to the end of the desired data (4 past start).; 138 */; 139 template<class IT>; 140 void GetComponents(IT begin, IT end) const {; 141 *begin++ = fPhi;; 142 *begin++ = fTheta;; 143 *begin++ = fPsi;; 144 (void)end;; 145 assert(begin == end);; 146 }; 147 ; 148 /**; 149 Get the axis and then the angle into data specified by an iterator begin; 150 */; 151 template<class IT>; 152 void GetComponents(IT begin) const {; 153 *begin++ = fPhi;; 154 *begin++ = fTheta;; 155 *begin = fPsi;; 156 }; 157 ; 158 /**; 159 Set the components phi, theta, psi based on three Scalars.; 160 */; 161 void SetComponents(Scalar phi, Scalar theta, Scalar psi) {; 162 fPhi=phi; fTheta=theta; fPsi=psi;; 163 Rectify();; 164 }; 165 ; 166 /**; 167 Get the components phi, theta, psi into three Scalars.; 168 */; 169 void GetComponents(Scalar & phi, Scalar & theta, Scalar & psi) const {; 170",MatchSource.WIKI,doc/master/GenVector_2RotationZYX_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2RotationZYX_8h_source.html
Deployability,update,update,". ROOT: math/genvector/inc/Math/GenVector/RotationZ.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. RotationZ.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: W. Brown, M. Fischler, L. Moneta 2005; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2005 , LCG ROOT FNAL MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class RotationZ representing a rotation about the Z axis; 12//; 13// Created by: Mark Fischler Mon July 18 2005; 14//; 15// Last update: $Id$; 16//; 17#ifndef ROOT_Math_GenVector_RotationZ; 18#define ROOT_Math_GenVector_RotationZ 1; 19 ; 20 ; 21#include ""Math/GenVector/Cartesian3D.h""; 22#include ""Math/GenVector/DisplacementVector3D.h""; 23#include ""Math/GenVector/PositionVector3D.h""; 24#include ""Math/GenVector/LorentzVector.h""; 25#include ""Math/GenVector/3DDistances.h""; 26 ; 27#include ""Math/GenVector/RotationZfwd.h""; 28 ; 29#include <cmath>; 30 ; 31namespace ROOT {; 32namespace Math {; 33 ; 34 ; 35//__________________________________________________________________________________________; 36 /**; 37 Rotation class representing a 3D rotation about the Z axis by the angle of rotation.; 38 For efficiency reason, in addition to the angle, the sine and cosine of the angle are held; 39 ; 40 @ingroup GenVector; 41 ; 42 @sa Overview of the @ref GenVector ""physics vector library""; 43 */; 44 ; 45class RotationZ {; 46 ; 47public:; 48 ; 49 typedef double Scalar;; 50 ; 51 ; 52 // ========== Constructors and Assignment =====================; 53 ; 54 /**; 55 Default constructor (identity rotation); 56 */; 57 RotationZ() : fAngle(0), fSin(0), fCos(1) { }; 58 ; 59 /**; 60 Construct from an angle; 61 */; 62 explicit RotationZ( Scalar angle ) : fAngle(angle),; 63 fSin(std::sin(angle)),; 64 fCos(std::cos(angle)); 65 {; 66 Rectify();; 67 }; 68 ; 69 // The compil",MatchSource.WIKI,doc/master/GenVector_2RotationZ_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2RotationZ_8h_source.html
Availability,error,error,"scalar); 792 */; 793 template <typename SCALAR = T, typename std::enable_if<std::is_arithmetic<SCALAR>::value>::type * = nullptr>; 794 void Invert(); 795 {; 796 //; 797 // Name: Transform3D::inverse Date: 24.09.96; 798 // Author: E.Chernyaev (IHEP/Protvino) Revised:; 799 //; 800 // Function: Find inverse affine transformation.; 801 ; 802 T detxx = fM[kYY] * fM[kZZ] - fM[kYZ] * fM[kZY];; 803 T detxy = fM[kYX] * fM[kZZ] - fM[kYZ] * fM[kZX];; 804 T detxz = fM[kYX] * fM[kZY] - fM[kYY] * fM[kZX];; 805 T det = fM[kXX] * detxx - fM[kXY] * detxy + fM[kXZ] * detxz;; 806 if (det == T(0)) {; 807 std::cerr << ""Transform3D::inverse error: zero determinant"" << std::endl;; 808 return;; 809 }; 810 det = T(1) / det;; 811 detxx *= det;; 812 detxy *= det;; 813 detxz *= det;; 814 T detyx = (fM[kXY] * fM[kZZ] - fM[kXZ] * fM[kZY]) * det;; 815 T detyy = (fM[kXX] * fM[kZZ] - fM[kXZ] * fM[kZX]) * det;; 816 T detyz = (fM[kXX] * fM[kZY] - fM[kXY] * fM[kZX]) * det;; 817 T detzx = (fM[kXY] * fM[kYZ] - fM[kXZ] * fM[kYY]) * det;; 818 T detzy = (fM[kXX] * fM[kYZ] - fM[kXZ] * fM[kYX]) * det;; 819 T detzz = (fM[kXX] * fM[kYY] - fM[kXY] * fM[kYX]) * det;; 820 SetComponents(detxx, -detyx, detzx, -detxx * fM[kDX] + detyx * fM[kDY] - detzx * fM[kDZ], -detxy, detyy, -detzy,; 821 detxy * fM[kDX] - detyy * fM[kDY] + detzy * fM[kDZ], detxz, -detyz, detzz,; 822 -detxz * fM[kDX] + detyz * fM[kDY] - detzz * fM[kDZ]);; 823 }; 824 ; 825 /**; 826 Invert the transformation in place (vectorised); 827 */; 828 template <typename SCALAR = T, typename std::enable_if<!std::is_arithmetic<SCALAR>::value>::type * = nullptr>; 829 void Invert(); 830 {; 831 //; 832 // Name: Transform3D::inverse Date: 24.09.96; 833 // Author: E.Chernyaev (IHEP/Protvino) Revised:; 834 //; 835 // Function: Find inverse affine transformation.; 836 ; 837 T detxx = fM[kYY] * fM[kZZ] - fM[kYZ] * fM[kZY];; 838 T detxy = fM[kYX] * fM[kZZ] - fM[kYZ] * fM[kZX];; 839 T detxz = fM[kYX] * fM[kZY] - fM[kYY] * fM[kZX];; 840 T det = fM[kXX] * detxx - fM[kXY] ",MatchSource.WIKI,doc/master/GenVector_2Transform3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2Transform3D_8h_source.html
Security,access,access,"onents into data specified by an iterator begin; 484 and another to the end of the desired data (12 past start).; 485 */; 486 template<class IT>; 487 void GetComponents(IT begin, IT end) const {; 488 for (int i = 0; i <12; ++i) {; 489 *begin = fM[i];; 490 ++begin;; 491 }; 492 (void)end;; 493 assert (end==begin);; 494 }; 495 ; 496 /**; 497 Get the 12 matrix components into data specified by an iterator begin; 498 */; 499 template<class IT>; 500 void GetComponents(IT begin) const {; 501 std::copy(fM, fM + 12, begin);; 502 }; 503 ; 504 /**; 505 Set components from a linear algebra matrix of size at least 3x4,; 506 which must support operator()(i,j) to obtain elements (0,0) thru (2,3).; 507 The 3x3 sub-block is assumed to be the rotation part and the translations vector; 508 are described by the 4-th column; 509 */; 510 template<class ForeignMatrix>; 511 void; 512 SetTransformMatrix (const ForeignMatrix & m) {; 513 fM[kXX]=m(0,0); fM[kXY]=m(0,1); fM[kXZ]=m(0,2); fM[kDX]=m(0,3);; 514 fM[kYX]=m(1,0); fM[kYY]=m(1,1); fM[kYZ]=m(1,2); fM[kDY]=m(1,3);; 515 fM[kZX]=m(2,0); fM[kZY]=m(2,1); fM[kZZ]=m(2,2); fM[kDZ]=m(2,3);; 516 }; 517 ; 518 /**; 519 Get components into a linear algebra matrix of size at least 3x4,; 520 which must support operator()(i,j) for write access to elements; 521 (0,0) thru (2,3).; 522 */; 523 template<class ForeignMatrix>; 524 void; 525 GetTransformMatrix (ForeignMatrix & m) const {; 526 m(0,0)=fM[kXX]; m(0,1)=fM[kXY]; m(0,2)=fM[kXZ]; m(0,3)=fM[kDX];; 527 m(1,0)=fM[kYX]; m(1,1)=fM[kYY]; m(1,2)=fM[kYZ]; m(1,3)=fM[kDY];; 528 m(2,0)=fM[kZX]; m(2,1)=fM[kZY]; m(2,2)=fM[kZZ]; m(2,3)=fM[kDZ];; 529 }; 530 ; 531 ; 532 /**; 533 Set the components from 12 scalars; 534 */; 535 void SetComponents(T xx, T xy, T xz, T dx, T yx, T yy, T yz, T dy, T zx, T zy, T zz, T dz); 536 {; 537 fM[kXX]=xx; fM[kXY]=xy; fM[kXZ]=xz; fM[kDX]=dx;; 538 fM[kYX]=yx; fM[kYY]=yy; fM[kYZ]=yz; fM[kDY]=dy;; 539 fM[kZX]=zx; fM[kZY]=zy; fM[kZZ]=zz; fM[kDZ]=dz;; 540 }; 541 ; 542 /**; 543 Get the comp",MatchSource.WIKI,doc/master/GenVector_2Transform3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2Transform3D_8h_source.html
Testability,assert,assert,"; 445 Transform3D(T xx, T xy, T xz, T dx, T yx, T yy, T yz, T dy, T zx, T zy, T zz, T dz); 446 {; 447 SetComponents (xx, xy, xz, dx, yx, yy, yz, dy, zx, zy, zz, dz);; 448 }; 449 ; 450 ; 451 /**; 452 Construct from a linear algebra matrix of size at least 3x4,; 453 which must support operator()(i,j) to obtain elements (0,0) thru (2,3).; 454 The 3x3 sub-block is assumed to be the rotation part and the translations vector; 455 are described by the 4-th column; 456 */; 457 template <class ForeignMatrix>; 458 Transform3D<T> &operator=(const ForeignMatrix &m); 459 {; 460 SetComponents(m);; 461 return *this;; 462 }; 463 ; 464 ; 465 // ======== Components ==============; 466 ; 467 ; 468 /**; 469 Set the 12 matrix components given an iterator to the start of; 470 the desired data, and another to the end (12 past start).; 471 */; 472 template<class IT>; 473 void SetComponents(IT begin, IT end) {; 474 for (int i = 0; i <12; ++i) {; 475 fM[i] = *begin;; 476 ++begin;; 477 }; 478 (void)end;; 479 assert (end==begin);; 480 }; 481 ; 482 /**; 483 Get the 12 matrix components into data specified by an iterator begin; 484 and another to the end of the desired data (12 past start).; 485 */; 486 template<class IT>; 487 void GetComponents(IT begin, IT end) const {; 488 for (int i = 0; i <12; ++i) {; 489 *begin = fM[i];; 490 ++begin;; 491 }; 492 (void)end;; 493 assert (end==begin);; 494 }; 495 ; 496 /**; 497 Get the 12 matrix components into data specified by an iterator begin; 498 */; 499 template<class IT>; 500 void GetComponents(IT begin) const {; 501 std::copy(fM, fM + 12, begin);; 502 }; 503 ; 504 /**; 505 Set components from a linear algebra matrix of size at least 3x4,; 506 which must support operator()(i,j) to obtain elements (0,0) thru (2,3).; 507 The 3x3 sub-block is assumed to be the rotation part and the translations vector; 508 are described by the 4-th column; 509 */; 510 template<class ForeignMatrix>; 511 void; 512 SetTransformMatrix (const ForeignMatrix & m) {; 513 fM[kXX]=m",MatchSource.WIKI,doc/master/GenVector_2Transform3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2Transform3D_8h_source.html
Usability,simpl,simple," ; 23#include ""Math/GenVector/PositionVector3D.h""; 24 ; 25#include ""Math/GenVector/Rotation3D.h""; 26 ; 27#include ""Math/GenVector/Translation3D.h""; 28 ; 29 ; 30#include ""Math/GenVector/AxisAnglefwd.h""; 31#include ""Math/GenVector/EulerAnglesfwd.h""; 32#include ""Math/GenVector/Quaternionfwd.h""; 33#include ""Math/GenVector/RotationZYXfwd.h""; 34#include ""Math/GenVector/RotationXfwd.h""; 35#include ""Math/GenVector/RotationYfwd.h""; 36#include ""Math/GenVector/RotationZfwd.h""; 37 ; 38#include <iostream>; 39#include <type_traits>; 40#include <cmath>; 41 ; 42//#include ""Math/Vector3Dfwd.h""; 43 ; 44 ; 45 ; 46namespace ROOT {; 47 ; 48namespace Math {; 49 ; 50namespace Impl {; 51 ; 52//_________________________________________________________________________________________; 53/**; 54 Basic 3D Transformation class describing a rotation and then a translation; 55 The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data.; 56 They are represented and held in this class like a 3x4 matrix (a simple array of 12 numbers).; 57 ; 58 The class can be constructed from any 3D rotation object; 59 (ROOT::Math::Rotation3D, ROOT::Math::AxisAngle, ROOT::Math::Quaternion, etc...) and/or; 60 a 3D Vector (ROOT::Math::DislacementVector3D or via ROOT::Math::Translation ) representing a Translation.; 61 The Transformation is defined by applying first the rotation and then the translation.; 62 A transformation defined by applying first a translation and then a rotation is equivalent to the; 63 transformation obtained applying first the rotation and then a translation equivalent to the rotated vector.; 64 The operator * can be used to obtain directly such transformations, in addition to combine various; 65 transformations.; 66 Keep in mind that the operator * (like in the case of rotations ) is not commutative.; 67 The operator * is used (in addition to operator() ) to apply a transformations on the vector; 68 (DisplacementVector3D and LorentzVector classes) and point (Po",MatchSource.WIKI,doc/master/GenVector_2Transform3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2Transform3D_8h_source.html
Performance,perform,performs,"**********************/; 10 ; 11// Header file for class Translation3D; 12//; 13// Created by: Lorenzo Moneta October 21 2005; 14//; 15//; 16#ifndef ROOT_Math_GenVector_Translation3D; 17#define ROOT_Math_GenVector_Translation3D 1; 18 ; 19 ; 20#include ""Math/GenVector/DisplacementVector3D.h""; 21 ; 22#include ""Math/GenVector/Plane3D.h""; 23 ; 24#include ""Math/GenVector/PositionVector3Dfwd.h""; 25 ; 26#include ""Math/GenVector/LorentzVectorfwd.h""; 27 ; 28#include <iostream>; 29#include <type_traits>; 30 ; 31namespace ROOT {; 32 ; 33namespace Math {; 34 ; 35namespace Impl {; 36 ; 37//____________________________________________________________________________________________________; 38/**; 39 Class describing a 3 dimensional translation. It can be combined (using the operator *); 40 with the ROOT::Math::Rotation3D classes and ROOT::Math::Transform3D to obtained combined; 41 transformations and to operate on points and vectors.; 42 Note that a the translation applied to a Vector object (DisplacementVector3D and LorentzVector classes); 43 performs a noop, i.e. it returns the same vector. A translation can be applied only to the Point objects; 44 (PositionVector3D classes).; 45 ; 46 @ingroup GenVector; 47 ; 48 @sa Overview of the @ref GenVector ""physics vector library""; 49 ; 50*/; 51 ; 52template <typename T = double>; 53class Translation3D {; 54 ; 55public:; 56 typedef T Scalar;; 57 ; 58 typedef DisplacementVector3D<Cartesian3D<T>, DefaultCoordinateSystemTag> Vector;; 59 ; 60 /**; 61 Default constructor ( zero translation ); 62 */; 63 Translation3D() {}; 64 ; 65 /**; 66 Construct given a pair of pointers or iterators defining the; 67 beginning and end of an array of 3 Scalars representing the z,y,z of the translation vector; 68 */; 69 template<class IT>; 70 Translation3D(IT begin, IT end); 71 {; 72 fVect.SetCoordinates(begin,end);; 73 }; 74 ; 75 /**; 76 Construct from x,y,z values representing the translation; 77 */; 78 Translation3D(T dx, T dy, T dz) : fVect(Vector(dx, dy,",MatchSource.WIKI,doc/master/GenVector_2Translation3D_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GenVector_2Translation3D_8h_source.html
Deployability,toggle,toggle,"dObject(""geom_help"");; if (c) {; c->Clear();; c->Update();; c->cd();; } else {; c = new TCanvas(""geom_help"",""Help to run demos"",200,10,700,600);; }; ; TPaveText *welcome = new TPaveText(.1,.8,.9,.97);; welcome->AddText(""Welcome to the new geometry package"");; welcome->SetTextFont(32);; welcome->SetTextColor(4);; welcome->SetFillColor(24);; welcome->Draw();; ; TPaveText *hdemo = new TPaveText(.05,.05,.95,.7);; hdemo->SetTextAlign(12);; hdemo->SetTextFont(52);; hdemo->AddText(""- Demo for building TGeo basic shapes and simple geometry. Shape parameters are"");; hdemo->AddText("" displayed in the right pad"");; hdemo->AddText(""- Click left mouse button to execute one demo"");; hdemo->AddText(""- While pointing the mouse to the pad containing the geometry, do:"");; hdemo->AddText(""- .... click-and-move to rotate"");; hdemo->AddText(""- .... press j/k to zoom/unzoom"");; hdemo->AddText(""- .... press l/h/u/i to move the view center around"");; hdemo->AddText(""- Click Ray-trace ON/OFF to toggle ray-tracing"");; hdemo->AddText(""- Use <View with x3d> from the <View> menu to get an x3d view"");; hdemo->AddText(""- .... same methods to rotate/zoom/move the view"");; hdemo->AddText(""- Execute box(1,8) to divide a box in 8 equal slices along X"");; hdemo->AddText(""- Most shapes can be divided on X,Y,Z,Rxy or Phi :"");; hdemo->AddText(""- .... root[0] <shape>(IAXIS, NDIV, START, STEP);"");; hdemo->AddText("" .... IAXIS = 1,2,3 meaning (X,Y,Z) or (Rxy, Phi, Z)"");; hdemo->AddText("" .... NDIV = number of slices"");; hdemo->AddText("" .... START = start slicing position"");; hdemo->AddText("" .... STEP = division step"");; hdemo->AddText(""- Click Comments ON/OFF to toggle comments"");; hdemo->AddText(""- Click Ideal/Align geometry to see how alignment works"");; hdemo->AddText("" "");; hdemo->SetAllWith(""...."",""color"",2);; hdemo->SetAllWith(""...."",""font"",72);; hdemo->SetAllWith(""...."",""size"",0.03);; ; hdemo->Draw();; ; c->Update();; }; ; //__________________________________________________________________________",MatchSource.WIKI,doc/master/geodemo_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/geodemo_8C.html
Integrability,rout,rout,"gGeoManager->MakeHype(""HYPE"",med,10, 45 ,20,45,40);; TGeoHype *hype = (TGeoHype*)vol->GetShape();; vol->SetLineColor(randomColor());; vol->SetLineWidth(2);; top->AddNode(vol,1);; gGeoManager->CloseGeometry();; gGeoManager->SetNsegments(80);; ; top->Draw();; ; MakePicture();; if (!comments) return;; c->cd(2);; TPaveText *pt = new TPaveText(0.01,0.01,0.99,0.99);; pt->SetLineColor(1);; TText *text = pt->AddText(""TGeoHype - Hyperboloid class"");; text->SetTextColor(2);; AddMemberInfo(pt, ""fRmin"", hype->GetRmin(), ""minimum inner radius"");; AddMemberInfo(pt, ""fStIn"", hype->GetStIn(), ""inner surface stereo angle [deg]"");; AddMemberInfo(pt, ""fRmax"", hype->GetRmax(), ""minimum outer radius"");; AddMemberInfo(pt, ""fStOut"",hype->GetStOut(),""outer surface stereo angle [deg]"");; AddMemberInfo(pt, ""fDz"", hype->GetDz(), ""half-length on Z axis"");; pt->AddText(""----- A hyperboloid is described by the equation:"");; pt->AddText(""----- r^2 - (tan(stereo)*z)^2 = rmin^2; where: r = x*x + y*y"");; pt->AddText(""----- Create with: TGeoHype *hype = new TGeoHype(rin, stin, rout, stout, dz);"");; pt->AddText(""----- rin < rout; rout > 0"");; pt->AddText(""----- rin = 0; stin > 0 => inner surface conical"");; pt->AddText(""----- stin/stout = 0 => corresponding surface cylindrical"");; AddExecInfo(pt, ""hype"");; pt->Draw();; c->cd(1);; }; ; //______________________________________________________________________________; void pcon(Int_t iaxis=0, Int_t ndiv=8, Double_t start=0, Double_t step=0); {; auto c = create_canvas(""A polycone"");; ; if (gGeoManager) delete gGeoManager;; new TGeoManager(""pcon"", ""poza10"");; TGeoMaterial *mat = new TGeoMaterial(""Al"", 26.98,13,2.7);; TGeoMedium *med = new TGeoMedium(""MED"",1,mat);; TGeoVolume *top = gGeoManager->MakeBox(""TOP"",med,100,100,100);; gGeoManager->SetTopVolume(top);; TGeoVolume *vol = gGeoManager->MakePcon(""PCON"",med, -30.0,300,4);; TGeoPcon *pcon = (TGeoPcon*)(vol->GetShape());; pcon->DefineSection(0,0,15,20);; pcon->DefineSection(1,20,15,20);; pcon->DefineSectio",MatchSource.WIKI,doc/master/geodemo_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/geodemo_8C.html
Modifiability,config,configurable,"h; TPaveText.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TRandom3.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TSystem.h; TView.h; TVirtualGeoPainter.h; TVirtualPad.h; gPad#define gPadDefinition TVirtualPad.h:308; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operati...Definition TControlBar.h:26; TControlBar::Showvoid Show()Show control bar.Definition TControlBar.cxx:317; TControlBar::AddButtonvoid AddButton(TControlBarButton *button)Add button.Definition TControlBar.cxx:141; TGeoArb8Definition TGeoArb8.h:17; TGeoArb8::GetDzDouble_t GetDz() constDefinition TGeoArb8.h:66; TGeoArb8::SetVertexvirtual void SetVertex(Int_t vnum, Double_t x, Double_t y); TGeoArb8::GetVerticesDouble_t * GetVertices()Definition TGeoArb8.h:71; TGeoAtt::SetVisRaytracevoid SetVisRaytrace(Bool_t flag=kTRUE)Definition TGeoAtt.h:66; TGeoBBoxDefinition TGeoBBox.h:17; TGeoBBox::GetDZvirtual Double_t GetDZ() constDefinition TGeoBBox.h:81; TGeoCompositeShapeComposite shapes are Boolean combinations of two or more shape components.Definition TGeoCompositeShape.h:27; TGeoConeSegDefinition TGeoCone.h:99; TGeoConeSeg::GetPhi1Double_t GetPhi1() constDefinition TGeoCone.h:166; TGeoConeSeg::GetPhi2Double_t GetPhi2() constDefinitio",MatchSource.WIKI,doc/master/geodemo_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/geodemo_8C.html
Performance,perform,performed,") {; for (Int_t j=1; j<=10; j++) {; TGeoPhysicalNode *node = nullptr;; auto name = TString::Format(""TOP_1/SX_%d/SY_%d/CELL_1"",i,j);; if (list) node = (TGeoPhysicalNode*)list->At(10*(i-1)+j-1);; if (!node) node = gGeoManager->MakePhysicalNode(name.Data());; TGeoTranslation *tr;; if (node->IsAligned()) {; tr = (TGeoTranslation*)node->GetNode()->GetMatrix();; tr->SetTranslation(2.*gRandom->Rndm(), 2.*gRandom->Rndm(),0.);; } else {; tr = new TGeoTranslation(2.*gRandom->Rndm(), 2.*gRandom->Rndm(),0.);; }; node->Align(tr);; }; }; if (gPad) {; gPad->Modified();; gPad->Update();; }; }; ; //______________________________________________________________________________; void geodemo (); {; // root[0] .x geodemo.C; // root[1] box(); //draw a TGeoBBox with description; //; // The box can be divided on one axis.; //; // root[2] box(iaxis, ndiv, start, step);; //; // where: iaxis = 1,2 or 3, meaning (X,Y,Z) or (Rxy, phi, Z) depending on shape type; // ndiv = number of slices; // start = starting position (must be in shape range); // step = division step; // If step=0, all range of a given axis will be divided; //; // The same can procedure can be performed for visualizing other shapes.; // When drawing one shape after another, the old geometry/canvas will be deleted.; TControlBar *bar = new TControlBar(""vertical"", ""TGeo shapes"",10,10);; bar->AddButton(""How to run "",""help()"",""Instructions for running this macro"");; bar->AddButton(""Arb8 "",""arb8()"",""An arbitrary polyhedron defined by vertices (max 8) sitting on 2 parallel planes"");; bar->AddButton(""Box "",""box()"",""A box shape."");; bar->AddButton(""Composite "",""composite()"",""A composite shape"");; bar->AddButton(""Cone "",""cone()"",""A conical tube"");; bar->AddButton(""Cone segment"",""coneseg()"",""A conical segment"");; bar->AddButton(""Cut tube "",""ctub()"",""A cut tube segment"");; bar->AddButton(""Elliptical tube"",""eltu()"",""An elliptical tube"");; bar->AddButton(""Extruded poly"",""xtru()"",""A general polygone extrusion"");; bar->AddButton(""Hyperboloid ",MatchSource.WIKI,doc/master/geodemo_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/geodemo_8C.html
Security,access,access,"h; TPaveText.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TRandom3.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TSystem.h; TView.h; TVirtualGeoPainter.h; TVirtualPad.h; gPad#define gPadDefinition TVirtualPad.h:308; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operati...Definition TControlBar.h:26; TControlBar::Showvoid Show()Show control bar.Definition TControlBar.cxx:317; TControlBar::AddButtonvoid AddButton(TControlBarButton *button)Add button.Definition TControlBar.cxx:141; TGeoArb8Definition TGeoArb8.h:17; TGeoArb8::GetDzDouble_t GetDz() constDefinition TGeoArb8.h:66; TGeoArb8::SetVertexvirtual void SetVertex(Int_t vnum, Double_t x, Double_t y); TGeoArb8::GetVerticesDouble_t * GetVertices()Definition TGeoArb8.h:71; TGeoAtt::SetVisRaytracevoid SetVisRaytrace(Bool_t flag=kTRUE)Definition TGeoAtt.h:66; TGeoBBoxDefinition TGeoBBox.h:17; TGeoBBox::GetDZvirtual Double_t GetDZ() constDefinition TGeoBBox.h:81; TGeoCompositeShapeComposite shapes are Boolean combinations of two or more shape components.Definition TGeoCompositeShape.h:27; TGeoConeSegDefinition TGeoCone.h:99; TGeoConeSeg::GetPhi1Double_t GetPhi1() constDefinition TGeoCone.h:166; TGeoConeSeg::GetPhi2Double_t GetPhi2() constDefinitio",MatchSource.WIKI,doc/master/geodemo_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/geodemo_8C.html
Testability,log,logical,"hapeName:transfName> components related by Boolean operators"");; pt->AddText(""----- Boolean operators can be: (+) union, (-) subtraction and (*) intersection"");; pt->AddText(""----- Use parenthesis in the expression to force precedence"");; AddExecInfo(pt, ""composite"");; pt->Draw();; c->cd(1);; }; ; //______________________________________________________________________________; void ideal(); {; // This is an ideal geometry. In real life, some geometry pieces are moved/rotated; // with respect to their ideal positions. This is called alignment. Alignment; // operations can be handled by TGeo starting from a CLOSED geometry (applied a posteriori); // Alignment is handled by PHYSICAL NODES, representing an unique object in geometry.; //; // Creating physical nodes:; // 1. TGeoPhysicalNode *node = gGeoManager->MakePhysicalNode(const char *path); // - creates a physical node represented by path; // - path can be : TOP_1/A_2/B_3; // - B_3 is the 'final node' e.g. the logical node represented by this physical node; // 2. TGeoPhysicalNode *node = gGeoManager->MakePhysicalNode(); // - creates a physical node representing the current modeller state; ; // Setting visualisation options for TGeoPhysicalNode *node:; // 1. node->SetVisibility(Bool_t flag); // set node visible(*) or invisible; // 2. node->SetIsVolAtt(Bool_t flag); // set line attributes to match the ones of the volumes in the branch; // - default - TRUE; // - when called with FALSE - the attributes defined for the physical node will be taken; // node->SetLineColor(color);; // node->SetLineWidth(width);; // node->SetLineStyle(style);; // 3. node->SetVisibleFull(Bool_t flag); // not only last node in the branch is visible (default); //; // Activating/deactivating physical nodes drawing - not needed in case of alignment; ; // Aligning physical nodes; //==========================; // node->Align(TGeoMatrix *newmat, TGeoShape *newshape, Bool_t check=kFALSE);; // newmat = new matrix to replace final node LOCAL matrix; //",MatchSource.WIKI,doc/master/geodemo_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/geodemo_8C.html
Usability,simpl,simple,"return (1+Int_t(color));; }; ; //______________________________________________________________________________; void raytrace() {; raytracing = !raytracing;; if (gGeoManager && gPad) {; auto top = gGeoManager->GetTopVolume();; bool drawn = gPad->GetListOfPrimitives()->FindObject(top);; if (drawn) top->SetVisRaytrace(raytracing);; gPad->Modified();; gPad->Update();; }; }; ; //______________________________________________________________________________; void help() {; ; auto c =(TCanvas *) gROOT->GetListOfCanvases()->FindObject(""geom_help"");; if (c) {; c->Clear();; c->Update();; c->cd();; } else {; c = new TCanvas(""geom_help"",""Help to run demos"",200,10,700,600);; }; ; TPaveText *welcome = new TPaveText(.1,.8,.9,.97);; welcome->AddText(""Welcome to the new geometry package"");; welcome->SetTextFont(32);; welcome->SetTextColor(4);; welcome->SetFillColor(24);; welcome->Draw();; ; TPaveText *hdemo = new TPaveText(.05,.05,.95,.7);; hdemo->SetTextAlign(12);; hdemo->SetTextFont(52);; hdemo->AddText(""- Demo for building TGeo basic shapes and simple geometry. Shape parameters are"");; hdemo->AddText("" displayed in the right pad"");; hdemo->AddText(""- Click left mouse button to execute one demo"");; hdemo->AddText(""- While pointing the mouse to the pad containing the geometry, do:"");; hdemo->AddText(""- .... click-and-move to rotate"");; hdemo->AddText(""- .... press j/k to zoom/unzoom"");; hdemo->AddText(""- .... press l/h/u/i to move the view center around"");; hdemo->AddText(""- Click Ray-trace ON/OFF to toggle ray-tracing"");; hdemo->AddText(""- Use <View with x3d> from the <View> menu to get an x3d view"");; hdemo->AddText(""- .... same methods to rotate/zoom/move the view"");; hdemo->AddText(""- Execute box(1,8) to divide a box in 8 equal slices along X"");; hdemo->AddText(""- Most shapes can be divided on X,Y,Z,Rxy or Phi :"");; hdemo->AddText(""- .... root[0] <shape>(IAXIS, NDIV, START, STEP);"");; hdemo->AddText("" .... IAXIS = 1,2,3 meaning (X,Y,Z) or (Rxy, Phi, Z)"");; hdemo->AddText("" ..",MatchSource.WIKI,doc/master/geodemo_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/geodemo_8C.html
Safety,detect,detector,". ROOT: tutorials/geom/geomAlice.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. geomAlice.C File ReferenceTutorials » Geometry tutorials. Detailed Description; Script drawing a detector geometry (here ALICE). ; by default the geometry is drawn using the GL viewer Using the TBrowser, you can select other components if the file containing the geometry is not found in the local directory, it is automatically read from the ROOT web site. ; void geomAlice(); {; TGeoManager::Import(""http://root.cern/files/alice2.root"");; gGeoManager->DefaultColors();; // gGeoManager->SetVisLevel(4);; gGeoManager->GetVolume(""HALL"")->InvisibleAll();; gGeoManager->GetVolume(""ZDCC"")->InvisibleAll();; gGeoManager->GetVolume(""ZDCA"")->InvisibleAll();; gGeoManager->GetVolume(""L3MO"")->InvisibleAll();; gGeoManager->GetVolume(""YOUT1"")->InvisibleAll();; gGeoManager->GetVolume(""YOUT2"")->InvisibleAll();; gGeoManager->GetVolume(""YSAA"")->InvisibleAll();; gGeoManager->GetVolume(""RB24"")->InvisibleAll();; gGeoManager->GetVolume(""RB26Pipe"")->InvisibleAll();; gGeoManager->GetVolume(""DDIP"")->InvisibleAll();; gGeoManager->GetVolume(""DCM0"")->InvisibleAll();; // gGeoManager->GetVolume(""PPRD"")->InvisibleAll();; gGeoManager->GetVolume(""BRS1"")->InvisibleAll();; gGeoManager->GetVolume(""BRS4"")->InvisibleAll();; // gGeoManager->GetVolume(""Dipole"")->InvisibleAll();; gGeoManager->GetVolume(""ZN1"")->InvisibleAll();; gGeoManager->GetVolume(""Q13T"")->InvisibleAll();; gGeoManager->GetVolume(""ZP1"")->InvisibleAll();; gGeoManager->GetVolume(""QTD1"")->InvisibleAll();; gGeoManager->GetVolume(""QTD2"")->InvisibleAll();; gGeoManager->GetVolume(""QBS7"")->InvisibleAll();; gGeoManager->GetVolume(""QA07"")->InvisibleAll();; gGeoManager->GetVolume(""MD1V"")->InvisibleAll();; gGeoManager->GetVolume(""QTD3"")->InvisibleAll();; gGeoManager->GetVolume(""QTD4"")->InvisibleAll();; gGeoManager->GetVolume(""QTD5"")->InvisibleAll();; gGeoManager->GetVolume(""QBS3"")->InvisibleAll();; gGeoManager->GetVolume(""QBS4""",MatchSource.WIKI,doc/master/geomAlice_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/geomAlice_8C.html
Safety,detect,detector,". ROOT: tutorials/geom/geomAlice_itsv.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. geomAlice_itsv.C File ReferenceTutorials » Geometry tutorials. Detailed Description; Script drawing a detector geometry (here ITSV from Alice). ; By default the geometry is drawn using the GL viewer Using the TBrowser, you can select other components if the file containing the geometry is not found in the local directory, it is automatically read from the ROOT web site. ; void geomAlice_itsv() {; TGeoManager::Import(""http://root.cern/files/alice2.root"");; gGeoManager->DefaultColors();; gGeoManager->GetVolume(""ITSV"")->Draw(""ogl"");; new TBrowser;; }; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; TGeoManager::Importstatic TGeoManager * Import(const char *filename, const char *name="""", Option_t *option="""")static function Import a geometry from a gdml or ROOT fileDefinition TGeoManager.cxx:4096; TGeoManager::GetVolumeTGeoVolume * GetVolume(const char *name) constSearch for a named volume. All trailing blanks stripped.Definition TGeoManager.cxx:2942; TGeoManager::DefaultColorsvoid DefaultColors()Set default volume colors according to A of material.Definition TGeoManager.cxx:2259; TGeoVolume::Drawvoid Draw(Option_t *option="""") overridedraw top volume according to optionDefinition TGeoVolume.cxx:1206; AuthorRene Brun ; Definition in file geomAlice_itsv.C. tutorialsgeomgeomAlice_itsv.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/geomAlice__itsv_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/geomAlice__itsv_8C.html
Safety,detect,detector,". ROOT: tutorials/geom/geomAtlas.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. geomAtlas.C File ReferenceTutorials » Geometry tutorials. Detailed Description; Script drawing a detector geometry (here ATLAS). ; by default the geometry is drawn using the GL viewer Using the TBrowser, you can select other components if the file containing the geometry is not found in the local directory, it is automatically read from the ROOT web site. ; void geomAtlas() {; TGeoManager::Import(""http://root.cern/files/atlas.root"");; //gGeoManager->DefaultColors();; gGeoManager->SetMaxVisNodes(5000);; //gGeoManager->SetVisLevel(4);; gGeoManager->GetVolume(""ATLS"")->Draw(""ogl"");; new TBrowser;; }; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; TGeoManager::Importstatic TGeoManager * Import(const char *filename, const char *name="""", Option_t *option="""")static function Import a geometry from a gdml or ROOT fileDefinition TGeoManager.cxx:4096; TGeoManager::GetVolumeTGeoVolume * GetVolume(const char *name) constSearch for a named volume. All trailing blanks stripped.Definition TGeoManager.cxx:2942; TGeoManager::SetMaxVisNodesvoid SetMaxVisNodes(Int_t maxnodes=10000)set the maximum number of visible nodes.Definition TGeoManager.cxx:2380; TGeoVolume::Drawvoid Draw(Option_t *option="""") overridedraw top volume according to optionDefinition TGeoVolume.cxx:1206; AuthorRene Brun ; Definition in file geomAtlas.C. tutorialsgeomgeomAtlas.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/geomAtlas_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/geomAtlas_8C.html
Safety,detect,detector,". ROOT: tutorials/geom/geomBrahms.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. geomBrahms.C File ReferenceTutorials » Geometry tutorials. Detailed Description; Script drawing a detector geometry (here BRAHMS). ; by default the geometry is drawn using the GL viewer Using the TBrowser, you can select other components if the file containing the geometry is not found in the local directory, it is automatically read from the ROOT web site. ; void geomBrahms() {; TGeoManager::Import(""http://root.cern/files/brahms.root"");; gGeoManager->GetVolume(""CAVE"")->Draw(""ogl"");; new TBrowser;; }; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; TGeoManager::Importstatic TGeoManager * Import(const char *filename, const char *name="""", Option_t *option="""")static function Import a geometry from a gdml or ROOT fileDefinition TGeoManager.cxx:4096; TGeoManager::GetVolumeTGeoVolume * GetVolume(const char *name) constSearch for a named volume. All trailing blanks stripped.Definition TGeoManager.cxx:2942; TGeoVolume::Drawvoid Draw(Option_t *option="""") overridedraw top volume according to optionDefinition TGeoVolume.cxx:1206; AuthorRene Brun ; Definition in file geomBrahms.C. tutorialsgeomgeomBrahms.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/geomBrahms_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/geomBrahms_8C.html
Safety,detect,detector,". ROOT: tutorials/geom/geomD0.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. geomD0.C File ReferenceTutorials » Geometry tutorials. Detailed Description; Script drawing a detector geometry (here D0). ; by default the geometry is drawn using the GL viewer Using the TBrowser, you can select other components if the file containing the geometry is not found in the local directory, it is automatically read from the ROOT web site.; run with .x geomD0.C top level detectors are transparent; or .x geomD0.C(1) top level detectors are visible. ; void RecursiveInvisible(TGeoVolume *vol);; void RecursiveTransparency(TGeoVolume *vol, Int_t transp);; ; void geomD0(Int_t allVisible=0) {; TGeoManager::Import(""http://root.cern/files/d0.root"");; gGeoManager->DefaultColors();; gGeoManager->SetMaxVisNodes(40000);; //gGeoManager->SetVisLevel(4);; if (!allVisible) {; RecursiveInvisible(gGeoManager->GetVolume(""D0-""));; RecursiveInvisible(gGeoManager->GetVolume(""D0+""));; RecursiveInvisible(gGeoManager->GetVolume(""D0WZ""));; RecursiveInvisible(gGeoManager->GetVolume(""D0WL""));; RecursiveTransparency(gGeoManager->GetVolume(""MUON""), 90);; }; ; gGeoManager->GetVolume(""D0"")->Draw(""ogl"");; }; ; void RecursiveInvisible(TGeoVolume *vol); {; vol->InvisibleAll();; Int_t nd = vol->GetNdaughters();; for (Int_t i=0; i<nd; i++) {; RecursiveInvisible(vol->GetNode(i)->GetVolume());; }; }; ; void RecursiveTransparency(TGeoVolume *vol, Int_t transp); {; vol->SetTransparency(transp);; Int_t nd = vol->GetNdaughters();; for (Int_t i=0; i<nd; i++) {; RecursiveTransparency(vol->GetNode(i)->GetVolume(), transp);; }; }; Int_tint Int_tDefinition RtypesCore.h:45; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TGeoManager::Importstatic TGeoManager * Import(const char *filename, const char *name="""", Option_t *option="""")static function Import a geometry from a gdml or ROOT fileDefinition TGeoManager.cxx:4096; TGeoManager::GetVolumeTGeoVolume *",MatchSource.WIKI,doc/master/geomD0_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/geomD0_8C.html
Modifiability,config,configurable,"; TGeoManager.h; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; gROOT#define gROOTDefinition TROOT.h:406; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; gPad#define gPadDefinition TVirtualPad.h:308; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operati...Definition TControlBar.h:26; TControlBar::Showvoid Show()Show control bar.Definition TControlBar.cxx:317; TControlBar::AddButtonvoid AddButton(TControlBarButton *button)Add button.Definition TControlBar.cxx:141; TGeoAtt::SetVisRaytracevoid SetVisRaytrace(Bool_t flag=kTRUE)Definition TGeoAtt.h:66; TGeoBBoxDefinition TGeoBBox.h:17; TGeoCompositeShapeComposite shapes are Boolean combinations of two or more shape components.Definition TGeoCompositeShape.h:27; TGeoManagerThe manager class for any TGeo geometry.Definition TGeoManager.h:44; TGeoManager::CloseGeometryvoid CloseGeometry(Option_t *option=""d"")Closing geometry implies checking the geometry validity, fixing shapes with negative parameters (run-...Definition TGeoManager.cxx:1480; TGeoManager::MakeBoxTGeoVolume * MakeBox(const char *name, TGeoMedium *medium, Double_t dx, Double_t dy, Double_t dz)Make in one step a volume pointing to a box shape with given medium.Definition ",MatchSource.WIKI,doc/master/geom_2csgdemo_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/geom_2csgdemo_8C.html
Security,access,access,"; TGeoManager.h; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; gROOT#define gROOTDefinition TROOT.h:406; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; gPad#define gPadDefinition TVirtualPad.h:308; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operati...Definition TControlBar.h:26; TControlBar::Showvoid Show()Show control bar.Definition TControlBar.cxx:317; TControlBar::AddButtonvoid AddButton(TControlBarButton *button)Add button.Definition TControlBar.cxx:141; TGeoAtt::SetVisRaytracevoid SetVisRaytrace(Bool_t flag=kTRUE)Definition TGeoAtt.h:66; TGeoBBoxDefinition TGeoBBox.h:17; TGeoCompositeShapeComposite shapes are Boolean combinations of two or more shape components.Definition TGeoCompositeShape.h:27; TGeoManagerThe manager class for any TGeo geometry.Definition TGeoManager.h:44; TGeoManager::CloseGeometryvoid CloseGeometry(Option_t *option=""d"")Closing geometry implies checking the geometry validity, fixing shapes with negative parameters (run-...Definition TGeoManager.cxx:1480; TGeoManager::MakeBoxTGeoVolume * MakeBox(const char *name, TGeoMedium *medium, Double_t dx, Double_t dy, Double_t dz)Make in one step a volume pointing to a box shape with given medium.Definition ",MatchSource.WIKI,doc/master/geom_2csgdemo_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/geom_2csgdemo_8C.html
Availability,error,error,". ROOT: tutorials/graphs/gerrors2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. gerrors2.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Draw two graphs with error bars . ; void gerrors2() {; TCanvas *c1 = new TCanvas(""c1"",""gerrors2"",200,10,700,500);; c1->SetGrid();; ; // draw a frame to define the range; TH1F *hr = c1->DrawFrame(-0.4,0,1.2,12);; hr->SetXTitle(""X title"");; hr->SetYTitle(""Y title"");; c1->GetFrame()->SetBorderSize(12);; ; // create first graph; const Int_t n1 = 10;; Double_t xval1[] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Double_t yval1[] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t ex1[] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t ey1[] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; TGraphErrors *gr1 = new TGraphErrors(n1,xval1,yval1,ex1,ey1);; gr1->SetMarkerColor(kBlue);; gr1->SetMarkerStyle(21);; gr1->Draw(""LP"");; ; // create second graph; const Int_t n2 = 10;; Float_t xval2[] = {-0.28, 0.005, 0.19, 0.29, 0.45, 0.56,0.65,0.80,0.90,1.01};; Float_t yval2[] = {0.82,3.86,7,9,10,10.55,9.64,7.26,5.42,2};; Float_t ex2[] = {.04,.12,.08,.06,.05,.04,.07,.06,.08,.04};; Float_t ey2[] = {.6,.8,.7,.4,.3,.3,.4,.5,.6,.7};; TGraphErrors *gr2 = new TGraphErrors(n2,xval2,yval2,ex2,ey2);; gr2->SetMarkerColor(kRed);; gr2->SetMarkerStyle(20);; gr2->Draw(""LP"");; }; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; Double_tdouble Double_tDefinition RtypesCore.h:59; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraph::Drawvoid Draw(Option_t *chopt=""",MatchSource.WIKI,doc/master/gerrors2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/gerrors2_8C.html
Availability,error,error,". ROOT: tutorials/graphs/gerrors.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. gerrors.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Draw a graph with error bars . ; void gerrors() {; TCanvas *c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; ; c1->SetGrid();; c1->GetFrame()->SetBorderSize(12);; ; const Int_t n = 10;; Float_t x[n] = {-0.22, 0.05, 0.25, 0.35, 0.5, 0.61,0.7,0.85,0.89,0.95};; Float_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Float_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Float_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; TGraphErrors *gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetTitle(""TGraphErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; ; c1->Update();; }; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; eyDouble_t ey[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; exDouble_t ex[n]Definition legend1.C:17; gerrorsDefinition gerrors.py:1; AuthorRene Brun ; Definition in file gerrors.C. tutorialsgraphsgerrors.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ;",MatchSource.WIKI,doc/master/gerrors_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/gerrors_8C.html
Availability,error,error,". ROOT: tutorials/pyroot/gerrors.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; gerrors.py File ReferenceTutorials » PyRoot tutorials. Detailed Description; A Simple Graph with error bars . ; from ROOT import TCanvas, TGraphErrors; from ROOT import gROOT; from array import array; ; c1 = TCanvas( 'c1', 'A Simple Graph with error bars', 200, 10, 700, 500 ); ; c1.SetGrid(); c1.GetFrame().SetFillColor( 21 ); c1.GetFrame().SetBorderSize( 12 ); ; n = 10;; x = array( 'f', [ -0.22, 0.05, 0.25, 0.35, 0.5, 0.61, 0.7, 0.85, 0.89, 0.95 ] ); ex = array( 'f', [ 0.05, 0.1, 0.07, 0.07, 0.04, 0.05, 0.06, 0.07, 0.08, 0.05 ] ); y = array( 'f', [ 1, 2.9, 5.6, 7.4, 9.0, 9.6, 8.7, 6.3, 4.5, 1 ] ); ey = array( 'f', [ 0.8, 0.7, 0.6, 0.5, 0.4, 0.4, 0.5, 0.6, 0.7, 0.8 ] ); ; gr = TGraphErrors( n, x, y, ex, ey ); gr.SetTitle( 'TGraphErrors Example' ); gr.SetMarkerColor( 4 ); gr.SetMarkerStyle( 21 ); gr.Draw( 'ALP' ); ; c1.Update(); SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; SetBorderSizec SetBorderSize(2); AuthorWim Lavrijsen ; Definition in file gerrors.py. tutorialspyrootgerrors.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/gerrors_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/gerrors_8py.html
Modifiability,config,configurable,"xt(""You can select one of back box planes, press middle mouse button and move cursor-"");; hdemo->AddText(""this will create \""slice\"" (TF does not support yet)."");; hdemo->AddText(""After the slice was created, you can project it on a back box"");; hdemo->AddText("" ---press key 'p' (now implemented only for surf options )."");; hdemo->AddText(""Left double click removes all slices/projections."");; ; hdemo->Draw();; ; }; kBlue@ kBlueDefinition Rtypes.h:66; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TCanvasThe Canvas class.Definition TCanvas.h:23; TControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operati...Definition TControlBar.h:26; TControlBar::Showvoid Show()Show control bar.Definition TControlBar.cxx:317; TControlBar::AddButtonvoid AddButton(TControlBarButton *button)Add button.Definition TControlBar.cxx:141; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::Drawvoid Draw(Option_t *option="""") overrideDraw this pavelabel with its current attributes.Definition TPaveLabel.cxx:88; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; AuthorTimur Pocheptsov ; Definition in file gldemos.C. tutorialsglgldemos.C. ROOT master - Reference Guide ",MatchSource.WIKI,doc/master/gldemos_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/gldemos_8C.html
Security,access,access,"xt(""You can select one of back box planes, press middle mouse button and move cursor-"");; hdemo->AddText(""this will create \""slice\"" (TF does not support yet)."");; hdemo->AddText(""After the slice was created, you can project it on a back box"");; hdemo->AddText("" ---press key 'p' (now implemented only for surf options )."");; hdemo->AddText(""Left double click removes all slices/projections."");; ; hdemo->Draw();; ; }; kBlue@ kBlueDefinition Rtypes.h:66; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TCanvasThe Canvas class.Definition TCanvas.h:23; TControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operati...Definition TControlBar.h:26; TControlBar::Showvoid Show()Show control bar.Definition TControlBar.cxx:317; TControlBar::AddButtonvoid AddButton(TControlBarButton *button)Add button.Definition TControlBar.cxx:141; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::Drawvoid Draw(Option_t *option="""") overrideDraw this pavelabel with its current attributes.Definition TPaveLabel.cxx:88; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; AuthorTimur Pocheptsov ; Definition in file gldemos.C. tutorialsglgldemos.C. ROOT master - Reference Guide ",MatchSource.WIKI,doc/master/gldemos_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/gldemos_8C.html
Testability,log,log,"(u,...Definition TGLParametric.h:35; where FORMULA is the same string (mathematical expression), as in TF2, but you should use 'u' (or 'U') instead of 'x' and 'v' (or 'V') instead of 'y'.; Call equation->Draw(); Parametric surfaces support 21 color ""schemes"", you can change the color:; place mouse cursor above surface (surface is selected in pad); press 's' or 'S'. ; void glparametric(); {; gStyle->SetCanvasPreferGL(kTRUE);; TCanvas *c = new TCanvas(""canvas"",""Parametric surfaces with gl"", 100, 10,; 700, 700);; c->SetFillColor(42);; gStyle->SetFrameFillColor(42);; ; c->Divide(2, 2);; c->cd(1);; TGLParametricEquation *p1 = new TGLParametricEquation(""Conchoid"",; ""1.2 ^ u * (1 + cos(v)) * cos(u)"",; ""1.2 ^ u * (1 + cos(v)) * sin(u)"",; ""1.2 ^ u * sin(v) - 1.5 * 1.2 ^ u"",; 0., 6 * TMath::Pi(), 0., TMath::TwoPi());; p1->Draw();; ; c->cd(2);; TGLParametricEquation *p2 = new TGLParametricEquation(""Apple"",; ""cos(u) * (4 + 3.8 * cos(v)) "",; ""sin(u) * (4 + 3.8 * cos(v))"",; ""(cos(v) + sin(v) - 1) * (1 + sin(v)) * log(1 - pi * v / 10) + 7.5 * sin(v)"",; 0, TMath::TwoPi(), -TMath::Pi(), TMath::Pi());; p2->Draw();; ; c->cd(3);; TGLParametricEquation *p3 = new TGLParametricEquation(""Toupie"",; ""(abs(u) - 1) ^ 2 * cos(v)"",; ""(abs(u) - 1) ^ 2 * sin(v)"",; ""u"",; -1., 1., 0, TMath::TwoPi());; p3->Draw();; ; c->cd(4);; TGLParametricEquation *p4 = new TGLParametricEquation(""Trangluoid trefoil"",; ""2 * sin(3 * u) / (2 + cos(v))"",; ""2 * (sin(u) + 2 * sin(2 * u)) / (2 + cos(v + 2 * pi / 3))"",; ""(cos(u) - 2 * cos(2 * u)) * (2 + cos(v)) * (2 + cos(v + 2 * pi / 3)) / 4"",; -TMath::Pi(), TMath::Pi(), -TMath::Pi(), TMath::Pi());; p4->Draw();; }; c#define c(i)Definition RSha256.hxx:101; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TCanvasThe Canvas class.Definition TCanvas.h:23; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TStyle::SetFrameFillColorvoid SetFrameFillColor",MatchSource.WIKI,doc/master/glparametric_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/glparametric_8C.html
Deployability,configurat,configuration,"tion TGLLightSet.h:28; TGLLightSet::SetLightvoid SetLight(ELight light, Bool_t on)Set a light on/off.Definition TGLLightSet.cxx:55; TGLOrthoCameraOrthographic projection camera.Definition TGLOrthoCamera.h:36; TGLOrthoCamera::SetEnableRotatevoid SetEnableRotate(Bool_t x)Definition TGLOrthoCamera.h:80; TGLRnrCtx::kFill@ kFillDefinition TGLRnrCtx.h:46; TGLRnrCtx::kWireFrame@ kWireFrameDefinition TGLRnrCtx.h:48; TGLRnrCtx::kOutline@ kOutlineDefinition TGLRnrCtx.h:47; TGLSAViewerThe top level standalone GL-viewer - created via plugin manager.Definition TGLSAViewer.h:38; TGLSAViewer::GetFrameTGCompositeFrame * GetFrame() constReturn the main-frame.Definition TGLSAViewer.cxx:325; TGLViewerBase::SetStylevoid SetStyle(Short_t st)Definition TGLViewerBase.h:111; TGLViewerBase GL viewer object - used by both standalone and embedded (in pad) GL.Definition TGLViewer.h:55; TGLViewer::SetPerspectiveCameravoid SetPerspectiveCamera(ECameraType camera, Double_t fov, Double_t dolly, Double_t center[3], Double_t hRotate, Double_t vRotate)Set a perspective camera to supplied configuration - note this does not need to be the current camera...Definition TGLViewer.cxx:1957; TGLViewer::ECameraTypeECameraTypeDefinition TGLViewer.h:61; TQObject::ConnectBool_t Connect(const char *signal, const char *receiver_class, void *receiver, const char *slot)Non-static method is used to connect from the signal of this object to the receiver slot.Definition TQObject.cxx:869; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TTimerHandles synchronous and a-synchronous timer events.Definition TTimer.h:51; TMath::PiOver2constexpr Double_t PiOver2()Definition TMath.h:51; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::TwoPiconstexpr Double_t TwoPi()Definition TMath.h:44; v@ vDefinition rootcling_impl.cxx:3699; AuthorRichard Maunder ; Definition in file glViewerExercise.C. tutorialsglglViewerExercise.C. ROOT master - Refe",MatchSource.WIKI,doc/master/glViewerExercise_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/glViewerExercise_8C.html
Modifiability,plugin,plugin,"_t Option_t styleDefinition TGWin32VirtualXProxy.cxx:46; gROOT#define gROOTDefinition TROOT.h:406; TRandom.h; TTimer.h; TVirtualPad.h; gPad#define gPadDefinition TVirtualPad.h:308; TGLLightSetEncapsulates a set of lights for OpenGL.Definition TGLLightSet.h:22; TGLLightSet::kLightLeft@ kLightLeftDefinition TGLLightSet.h:27; TGLLightSet::kLightBottom@ kLightBottomDefinition TGLLightSet.h:26; TGLLightSet::kLightTop@ kLightTopDefinition TGLLightSet.h:25; TGLLightSet::kLightRight@ kLightRightDefinition TGLLightSet.h:28; TGLLightSet::SetLightvoid SetLight(ELight light, Bool_t on)Set a light on/off.Definition TGLLightSet.cxx:55; TGLOrthoCameraOrthographic projection camera.Definition TGLOrthoCamera.h:36; TGLOrthoCamera::SetEnableRotatevoid SetEnableRotate(Bool_t x)Definition TGLOrthoCamera.h:80; TGLRnrCtx::kFill@ kFillDefinition TGLRnrCtx.h:46; TGLRnrCtx::kWireFrame@ kWireFrameDefinition TGLRnrCtx.h:48; TGLRnrCtx::kOutline@ kOutlineDefinition TGLRnrCtx.h:47; TGLSAViewerThe top level standalone GL-viewer - created via plugin manager.Definition TGLSAViewer.h:38; TGLSAViewer::GetFrameTGCompositeFrame * GetFrame() constReturn the main-frame.Definition TGLSAViewer.cxx:325; TGLViewerBase::SetStylevoid SetStyle(Short_t st)Definition TGLViewerBase.h:111; TGLViewerBase GL viewer object - used by both standalone and embedded (in pad) GL.Definition TGLViewer.h:55; TGLViewer::SetPerspectiveCameravoid SetPerspectiveCamera(ECameraType camera, Double_t fov, Double_t dolly, Double_t center[3], Double_t hRotate, Double_t vRotate)Set a perspective camera to supplied configuration - note this does not need to be the current camera...Definition TGLViewer.cxx:1957; TGLViewer::ECameraTypeECameraTypeDefinition TGLViewer.h:61; TQObject::ConnectBool_t Connect(const char *signal, const char *receiver_class, void *receiver, const char *slot)Non-static method is used to connect from the signal of this object to the receiver slot.Definition TQObject.cxx:869; TRandomThis is the base class for the ROOT R",MatchSource.WIKI,doc/master/glViewerExercise_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/glViewerExercise_8C.html
Testability,test,test,". ROOT: tutorials/gl/glViewerLOD.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. glViewerLOD.C File ReferenceTutorials » OpenGL tutorials. Detailed Description; To set the Level Of Details when rendering geometry shapes. ; ; void glViewerLOD(Int_t reqNodes = 1000, Bool_t randomDist = kTRUE,; Bool_t reqSpheres = kTRUE, Bool_t reqTubes = kTRUE); {; TGeoManager * geom = new TGeoManager(""LODTest"", ""GL viewer LOD test"");; geom->SetNsegments(4); // Doesn't matter keep low; TGeoMaterial *matEmptySpace = new TGeoMaterial(""EmptySpace"", 0, 0, 0);; TGeoMaterial *matSolid = new TGeoMaterial(""Solid"" , .938, 1., 10000.);; ; TGeoMedium *medEmptySpace = new TGeoMedium(""Empty"", 1, matEmptySpace);; TGeoMedium *medSolid = new TGeoMedium(""Solid"", 1, matSolid);; ; Double_t sizeBase = 20.0;; Double_t worldRadius;; if (randomDist) {; worldRadius = pow(reqNodes,.5)*sizeBase;; } else {; worldRadius = pow(reqNodes,.3)*sizeBase;; }; ; TGeoVolume *top = geom->MakeBox; (""WORLD"", medEmptySpace, worldRadius, worldRadius, worldRadius);; geom->SetTopVolume(top);; ; gRandom->SetSeed();; ; // Create random number of unique sphere shapes - up to 25% of; // total placed sphere requested; UInt_t volumeCount = gRandom->Integer(reqNodes/4)+1;; TGeoVolume ** volumes = new TGeoVolume *[volumeCount];; TGeoVolume * volume;; UInt_t i;; Double_t dummy;; ; for (i = 0; i < volumeCount; i++) {; char name[128];; sprintf(name, ""Volume_%d"", i);; ; // Random volume shape; Int_t type = -1;; if (reqSpheres && reqTubes) {; type = gRandom->Integer(2);; if (type == 1); type += gRandom->Integer(3);; }; else if(reqSpheres); type = 0;; else if(reqTubes); type = 1 + gRandom->Integer(3);; ; // Random dimensions; Double_t rMin = gRandom->Rndm() * sizeBase;; Double_t rMax = rMin + gRandom->Rndm() * sizeBase * 2.0;; Double_t dz = pow(gRandom->Rndm(),2.0) * sizeBase * 15.0;; Double_t phi1 = gRandom->Rndm() * 90.0;; Double_t phi2 = phi1 + gRandom->Rndm() * 270.0;; ; // Pick random co",MatchSource.WIKI,doc/master/glViewerLOD_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/glViewerLOD_8C.html
Usability,learn,learn,". ROOT: tutorials/gl/glvox2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. glvox2.C File ReferenceTutorials » OpenGL tutorials. Detailed Description; This macro demonstrates how to use ""glcol"" option for TH3 and how to create user defined TRANSFER FUNCTION: transfer function maps bin value to voxel's opacity. ; codomain is [0, 1] (1. - non-transparent, 0.5 is semitransparent, etc.) To pass transparency function into painting algorithm, you have to:; Create TF1 object (with symbolic expression like ""0.5 * (sin(x) + 1)"": ...; TF1 * tf = new TF1(""TransferFunction"", ""0.5 * (sin(x) + 1)"", -10., 10.);; ...; TF11-Dim function classDefinition TF1.h:233; IMPORTANT, the name of TF1 object MUST be ""TransferFunction"".; Add this function into a hist's list of functions: ...; TList * lof = hist->GetListOfFunctions();; if (lof) lof->Add(tf);; ...; It's also possible to use your own function and pass it into TF1, please read TF1 documentation to learn how. This macro is to be compiled: TF1 is extremely slow with interpreted function as an argument. ; ; #include ""TStyle.h""; #include ""TList.h""; #include ""TH3.h""; #include ""TF1.h""; ; namespace {; ; Double_t my_transfer_function(const Double_t *x, const Double_t * /*param*/); {; // Bin values in our example range from -2 to 1.; // Let's make values from -2. to -1.5 more transparent:; if (*x < -1.5); return 0.008;; ; if (*x < -0.5); return 0.015;; ; if (*x < 0.); return 0.02;; ; if (*x < 0.5); return 0.03;; ; if (*x < 0.8); return 0.04;; ; return 0.05;; }; ; } // namespace; ; void glvox2(); {; //Create and fill TH3.; const UInt_t nX = 30;; const Double_t xMin = -1., xMax = 1., xStep = (xMax - xMin) / (nX - 1);; ; const UInt_t nY = 30;; const Double_t yMin = -1., yMax = 1., yStep = (yMax - yMin) / (nY - 1);; ; const UInt_t nZ = 30;; const Double_t zMin = -1., zMax = 1., zStep = (zMax - zMin) / (nZ - 1);; ; TH3F *hist = new TH3F(""glvoxel"", ""glvoxel"", nX, -1., 1., nY, -1., 1., nZ, -1., 1.);",MatchSource.WIKI,doc/master/glvox2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/glvox2_8C.html
Energy Efficiency,green,green,"renceTutorials » OpenGL tutorials. Detailed Description; Gradient fill with transparency and the ""SAME"" option. ; To use this macro you need OpenGL enabled in pad: either set OpenGL.CanvasPreferGL to 1 in $ROOTSYS/etc/system.rootrc; or call gStyle->SetCanvasPreferGL(kTRUE); before canvas created. ; //Includes for ACLiC (cling does not need them).; #include ""TColorGradient.h""; #include ""TCanvas.h""; #include ""TError.h""; #include ""TColor.h""; #include ""TStyle.h""; #include ""TH1F.h""; ; void grad2(bool gl = true); {; //Make sure canvas supports OpenGL.; gStyle->SetCanvasPreferGL(gl);; ; //2. Check that we have a canvas with an OpenGL support.; auto cnv = new TCanvas(""grad2"", ""gradient demo 2"", 100, 100, 800, 600);; if (!cnv->UseGL() && !cnv->IsWeb()); ::Warning(""grad2"", ""This macro requires either OpenGL or Web canvas to correctly handle gradient colors"");; ; //3. Custom colors:; // a) Custom semi-transparent red.; auto customRed = TColor::GetColor((Float_t) 1., 0., 0., 0.5);; ; // Custom semi-transparent green.; auto customGreen = TColor::GetColor((Float_t) 0., 1., 0., 0.5);; ; // 4. Linear gradient colors; // b) Gradient (from our semi-transparent red to ROOT's kOrange).; // Linear gradient is defined by: 1) angle in grad; // 2) colors (to interpolate between them),; // If necessary, TLinearGradient object can be retrieved and modified later; ; auto grad1 = TColor::GetLinearGradient(90., {customRed, kOrange});; ; //Vertical gradient fill.; auto grad2 = TColor::GetLinearGradient(90., {customGreen, kBlue});; ; auto hist = new TH1F(""a2"", ""b2"", 10, -2., 3.);; auto hist2 = new TH1F(""c3"", ""d3"", 10, -3., 3.);; hist->FillRandom(""landau"", 100000);; hist2->FillRandom(""gaus"", 100000);; ; hist->SetFillColor(grad1);; hist2->SetFillColor(grad2);; ; hist2->Draw();; hist->Draw(""SAME"");; }; Float_tfloat Float_tDefinition RtypesCore.h:57; kOrange@ kOrangeDefinition Rtypes.h:67; kBlue@ kBlueDefinition Rtypes.h:66; TCanvas.h; TColorGradient.h; TColor.h; TError.h; Warningvoid Warning(const c",MatchSource.WIKI,doc/master/gl_2grad2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/gl_2grad2_8C.html
Energy Efficiency,allocate,allocated,". ROOT: tutorials/gl/gradients.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. gradients.C File ReferenceTutorials » OpenGL tutorials. Detailed Description; Features: . Radial and linear gradients; Transparent/semitransparent colours. ; //Includes for ACLiC:; #include ""TColorGradient.h""; #include ""TCanvas.h""; #include ""TError.h""; #include ""TStyle.h""; #include ""TText.h""; #include ""TPie.h""; ; ; void gradients(bool gl = true); {; //Find free colour indices in the ROOT's palette for:; //1. A radial gradient for TPie;; //2. A linear gradient for TCanvas; //3. A fully transparent fill color for a nested pad.; ; gStyle->SetCanvasPreferGL(gl);; ; auto c = new TCanvas(""cpie"",""Gradient colours demo"", 700, 700);; //Before we allocated any new colour or created any object:; if (!c->UseGL() && !c->IsWeb()); ::Warning(""gradients"", ""This macro requires either OpenGL or Web canvas to correctly handle gradient colors"");; ; //Linear gradient is defined by: 1) colors (to interpolate between them),; //2) coordinates for these colors along the gradient axis [0., 1.] (must be sorted!).; //3) Start and end points for a gradient, you specify them in some NDC rect ([0,0 - 1,1]),; //and this rect is either: bounding rect of your polygon/object to fill; //(gradient->SetCoordinateMode(TColorGradient::kObjectBoundingMode)); //or bounding rect of a pad (gradient->SetCoordinateMode(TColorGradient::kPadMode)).; //kObjectBoundingMode is the default one.; ; ; //Draw a text in the canvas (the object above the text will be; //semi-transparent):; auto t = new TText(0.05, 0.7, ""Can you see the text?"");; t->Draw();; ; //We create a nested pad on top to render a TPie in,; //this way we still have a text (below) + TPie with; //a fancy colour on top.; auto pad = new TPad(""p"", ""p"", 0., 0., 1., 1.);; ; //TPad itself is fully transparent:; auto transparentFill = TColor::GetColor((Float_t) 1., 1., 1., 0.);; pad->SetFillColor(transparentFill);; //Add our pad into",MatchSource.WIKI,doc/master/gl_2gradients_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/gl_2gradients_8C.html
Modifiability,variab,variables,"rtualGLProxy.cxx:39; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TNtuple.h; TParallelCoordRange.h; TParallelCoordVar.h; TParallelCoord.h; gROOT#define gROOTDefinition TROOT.h:406; TRandom.h; TStyle.h; gPad#define gPadDefinition TVirtualPad.h:308; TCanvasThe Canvas class.Definition TCanvas.h:23; TColorThe color creation and management class.Definition TColor.h:21; TColor::GetColorstatic Int_t GetColor(const char *hexcolor)Static method returning color number for color specified by hex color string of form: ""#rrggbb"",...Definition TColor.cxx:1920; TColor::SetAlphavirtual void SetAlpha(Float_t a)Definition TColor.h:70; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TParallelCoordVarTParallelCoord axes.Definition TParallelCoordVar.h:24; TParallelCoordVar::SetHistogramHeightvoid SetHistogramHeight(Double_t h=0)Set the height of the bar histogram.Definition TParallelCoordVar.cxx:892; TParallelCoordVar::Drawvoid Draw(Option_t *option="""") overrideDraw the axis.Definition TParallelCoordVar.cxx:150; TParallelCoordParallel Coordinates class.Definition TParallelCoord.h:28; TParallelCoord::SetLineColorvoid SetLineColor(Color_t col)Definition TParallelCoord.h:127; TParallelCoord::GetVarListTList * GetVarList()Definition TParallelCoord.h:102; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDef",MatchSource.WIKI,doc/master/gl_2parallelcoordtrans_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/gl_2parallelcoordtrans_8C.html
Usability,simpl,simple,"rtualGLProxy.cxx:39; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TNtuple.h; TParallelCoordRange.h; TParallelCoordVar.h; TParallelCoord.h; gROOT#define gROOTDefinition TROOT.h:406; TRandom.h; TStyle.h; gPad#define gPadDefinition TVirtualPad.h:308; TCanvasThe Canvas class.Definition TCanvas.h:23; TColorThe color creation and management class.Definition TColor.h:21; TColor::GetColorstatic Int_t GetColor(const char *hexcolor)Static method returning color number for color specified by hex color string of form: ""#rrggbb"",...Definition TColor.cxx:1920; TColor::SetAlphavirtual void SetAlpha(Float_t a)Definition TColor.h:70; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TParallelCoordVarTParallelCoord axes.Definition TParallelCoordVar.h:24; TParallelCoordVar::SetHistogramHeightvoid SetHistogramHeight(Double_t h=0)Set the height of the bar histogram.Definition TParallelCoordVar.cxx:892; TParallelCoordVar::Drawvoid Draw(Option_t *option="""") overrideDraw the axis.Definition TParallelCoordVar.cxx:150; TParallelCoordParallel Coordinates class.Definition TParallelCoord.h:28; TParallelCoord::SetLineColorvoid SetLineColor(Color_t col)Definition TParallelCoord.h:127; TParallelCoord::GetVarListTList * GetVarList()Definition TParallelCoord.h:102; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDef",MatchSource.WIKI,doc/master/gl_2parallelcoordtrans_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/gl_2parallelcoordtrans_8C.html
Availability,error,error,"r == -1) {; ::Error(""add_ellipse"", ""failed to find a new color index for a gradient fill"");; return false;; }; ; TEllipse * const newEllipse = new TEllipse(xC, yC, r, r);; newEllipse->SetFillColor(newColor);; newEllipse->Draw();; ; return true;; }; ; //______________________________________________________________________; void radialgradients(bool gl = true); {; gRandom->SetSeed(4357);; ; gStyle->SetCanvasPreferGL(gl);; ; auto cnv = new TCanvas(""radialgradients"", ""radial gradients"", 800, 800);; if (!cnv->UseGL() && !cnv->IsWeb()); ::Warning(""radialgradients"", ""This macro requires either OpenGL or Web canvas to correctly handle gradient colors"");; ; for (unsigned i = 0; i < 100; ++i); add_ellipse(gRandom->Rndm(), gRandom->Rndm(), 0.5 * gRandom->Rndm());; }; Color_tshort Color_tDefinition RtypesCore.h:85; Double_tdouble Double_tDefinition RtypesCore.h:59; TCanvas.h; TColorGradient.h; TEllipse.h; TError.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; gROOT#define gROOTDefinition TROOT.h:406; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; colorsColor * colorsDefinition X3DBuffer.c:21; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; TColor::GetRadialGradientstatic Int_t GetRadialGradient(Double_t r, const std::vector< Int_t > &colors, const std::vector< Double_t > &positions={})Static function: Returns the rad",MatchSource.WIKI,doc/master/gl_2radialgradients_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/gl_2radialgradients_8C.html
Energy Efficiency,green,green,"""You can see the transparency ONLY in a pdf or png output (\""File\""->\""Save As\"" ->...)\n""; ""To have transparency in a canvas graphics, you need either OpenGL or Web rendering enabled"");; ; // 2. Some arbitrary histograms.; auto h1 = new TH1F(""TH1F 1"", ""TH1F 1"", 100, -1.5, 1.5);; h1->FillRandom(""gaus"");; ; auto h2 = new TH1F(""TH1F 2"", ""TH1F 2"", 100, -1.5, 0.);; h2->FillRandom(""gaus"");; ; auto h3 = new TH1F(""TH1F 3"", ""TH1F 3"", 100, 0.5, 2.);; h3->FillRandom(""landau"");; ; // 3. Now overlapping transparent pads.; auto pad1 = new TPad(""transparent pad 1"", ""transparent pad 1"", 0.1, 0.1, 0.7, 0.7);; pad1->SetFillColor(TColor::GetColor((Float_t) 1., 0.2, 0.2, 0.25)); // transparent pink, here's the magic!; c1->cd();; pad1->Draw();; pad1->cd();; h1->Draw(""lego2"");; ; auto pad2 = new TPad(""transparent pad 2"", ""transparent pad 2"", 0.2, 0.2, 0.8, 0.8);; pad2->SetFillColor(TColor::GetColor((Float_t) 0.2, 1., 0.2, 0.25)); // transparent green, here's the magic!; c1->cd();; pad2->Draw();; pad2->cd();; h2->Draw();; ; auto pad3 = new TPad(""transparent pad 3"", ""transparent pad 3"", 0.3, 0.3, 0.9, 0.9);; pad3->SetFillColor(TColor::GetColor((Float_t) 0.2, 1., 1., 0.15)); // transparent blue, here's the magic!; c1->cd();; pad3->Draw();; pad3->cd();; h3->Draw();; }; ; Float_tfloat Float_tDefinition RtypesCore.h:57; TCanvas.h; TColor.h; TError.h; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; TH1F.h; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TCanvasThe Canvas class.Definition TCanvas.h:23; TColor::GetColorstatic Int_t GetColor(const char *hexcolor)Static method returning color number for color specified by hex color string of form: ""#rrggbb"",...Definition TColor.cxx:1920; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following di",MatchSource.WIKI,doc/master/gl_2transparentpad_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/gl_2transparentpad_8C.html
Testability,test,test,"nt text. The macro requires OpenGL or Web-based canvas. ; //Includes for ACLiC (cling does not need them).; #include ""TPaveText.h""; #include ""TCanvas.h""; #include ""TRandom.h""; #include ""TError.h""; #include ""TColor.h""; #include ""TStyle.h""; #include ""TH1F.h""; ; void transp_text(bool gl = true); {; // 1. Create special transparent colors for both pavetext fill color and text color.; auto grayColorIndex = TColor::GetColor((Float_t) 0.8, 0.8, 0.8, 0.85);; auto blackColorIndex = TColor::GetColor((Float_t) 0., 0., 0., 0.5);; ; // 2. Create a TCanvas.; gStyle->SetCanvasPreferGL(gl);; ; auto c1 = new TCanvas(""transp_text"",""transparent text demo"", 10, 10, 900, 500);; if (!c1->UseGL() && !c1->IsWeb()); ::Warning(""transp_text"", ""to use this macro you need either OpenGL or Web"");; ; c1->SetGrid();; c1->SetBottomMargin(0.15);; ; const Int_t nx = 20;; const char *people[nx] = {""Jean"",""Pierre"",""Marie"",""Odile"",; ""Sebastien"",""Fons"",""Rene"",""Nicolas"",""Xavier"",""Greg"",; ""Bjarne"",""Anton"",""Otto"",""Eddy"",""Peter"",""Pasha"",; ""Philippe"",""Suzanne"",""Jeff"",""Valery""};; ; auto h = new TH1F(""h4"", ""test"", nx, 0, nx);; ; h->SetFillColor(38);; for (Int_t i = 0; i < 5000; ++i); h->Fill(gRandom->Gaus(0.5 * nx, 0.2 * nx));; ; h->SetStats(false);; for (Int_t i = 1; i <= nx; ++i); h->GetXaxis()->SetBinLabel(i, people[i - 1]);; ; h->Draw();; ; auto pt = new TPaveText(0.3, 0.3, 0.98, 0.98, ""brNDC"");; //Transparent 'rectangle' with transparent text.; pt->SetFillColor(grayColorIndex);; pt->SetTextColor(blackColorIndex);; ; pt->SetTextSize(0.5);; pt->SetTextAlign(12);; ; pt->AddText(""Hello"");; pt->Draw();; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; TCanvas.h; TColor.h; TError.h; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; TH1F.h; TPaveText.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TStyle.h; gStyleR__EXTERN T",MatchSource.WIKI,doc/master/gl_2transp__text_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/gl_2transp__text_8C.html
Availability,error,errors,". ROOT: tutorials/graphs/gmultierrors.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. gmultierrors.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Draw a graph with multiple y errors . ; void gmultierrors() {; TCanvas *c1 = new TCanvas(""c1"", ""A Simple Graph with multiple y-errors"", 200, 10, 700, 500);; c1->SetGrid();; c1->GetFrame()->SetBorderSize(12);; ; const Int_t np = 5;; Double_t x[np] = {0, 1, 2, 3, 4};; Double_t y[np] = {0, 2, 4, 1, 3};; Double_t exl[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t exh[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; Double_t eylstat[np] = {1, 0.5, 1, 0.5, 1};; Double_t eyhstat[np] = {0.5, 1, 0.5, 1, 0.5};; Double_t eylsys[np] = {0.5, 0.4, 0.8, 0.3, 1.2};; Double_t eyhsys[np] = {0.6, 0.7, 0.6, 0.4, 0.8};; ; TGraphMultiErrors* gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", np, x, y, exl, exh, eylstat, eyhstat);; gme->AddYError(np, eylsys, eyhsys);; gme->SetMarkerStyle(20);; gme->SetLineColor(kRed);; gme->GetAttLine(0)->SetLineColor(kRed);; gme->GetAttLine(1)->SetLineColor(kBlue);; gme->GetAttFill(1)->SetFillStyle(0);; ; // Graph and x erros drawn with ""APS""; // Stat Errors drawn with ""Z""; // Sys Errors drawn with ""5 s=0.5""; gme->Draw(""APS ; Z ; 5 s=0.5"");; ; c1->Update();; }; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t npDefinition TGWin32VirtualXProx",MatchSource.WIKI,doc/master/gmultierrors_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/gmultierrors_8C.html
Availability,error,error,"e_t x) const {; 300 return ROOT::Math::exponential_cdf(x, fParams[0]);; 301 }; 302 ; 303 void GoFTest::LogSample() {; 304 transform(fSamples[0].begin(), fSamples[0].end(), fSamples[0].begin(),; 305 std::function<Double_t(Double_t)>(TMath::Log));; 306 }; 307 ; 308/* ; 309 Taken from (1); 310*/ ; 311 Double_t GoFTest::GetSigmaN(const std::vector<size_t> & ns, size_t N) {; 312 // compute moments of AD distribution (from Scholz-Stephen paper, paragraph 3); 313 ; 314 Double_t sigmaN = 0.0, h = 0.0, H = 0.0, g = 0.0, a, b, c, d, k = ns.size();; 315 ; 316 for (size_t i = 0; i < ns.size(); ++i) {; 317 H += 1.0 / double( ns[i] );; 318 }; 319 ; 320 // use approximate formulas for large N; 321 // cache Sum( 1 / i); 322 if (N < 2000) { ; 323 std::vector<double> invI(N); ; 324 for (size_t i = 1; i <= N - 1; ++i) {; 325 invI[i] = 1.0 / i; ; 326 h += invI[i]; ; 327 }; 328 for (size_t i = 1; i <= N - 2; ++i) {; 329 double tmp = invI[N-i];; 330 for (size_t j = i + 1; j <= N - 1; ++j) {; 331 g += tmp * invI[j];; 332 }; 333 }; 334 }; 335 else {; 336 // for N larger than 2000 error difference in g is ~ 5 10^-3 while in h is at the level of 10^-5; 337 const double emc = 0.5772156649015328606065120900824024; // Euler-Mascheroni constant; 338 h = std::log(double(N-1) ) + emc;; 339 g = (M_PI)*(M_PI)/6.0;; 340 }; 341 double k2 = std::pow(k,2);; 342 a = (4 * g - 6) * k + (10 - 6 * g) * H - 4 * g + 6;; 343 b = (2 * g - 4) * k2 + 8 * h * k + (2 * g - 14 * h - 4) * H - 8 * h + 4 * g - 6;; 344 c = (6 * h + 2 * g - 2) * k2 + (4 * h - 4 *g + 6) * k + (2 * h - 6) * H + 4 * h;; 345 d = (2 * h + 6) * k2 - 4 * h * k;; 346 sigmaN += a * std::pow(double(N),3) + b * std::pow(double(N),2) + c * N + d;; 347 sigmaN /= ( double(N - 1) * double(N - 2) * double(N - 3) );; 348 sigmaN = TMath::Sqrt(sigmaN);; 349 return sigmaN;; 350 }; 351 ; 352 ; 353 Double_t GoFTest::PValueADKSamples(size_t nsamples, Double_t tx) {; 354 ; 355 /*; 356 Computation of p-values according to ; 357 ""K-Sample Anderson-Darling Tests"" b",MatchSource.WIKI,doc/master/GoFTest_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html
Deployability,integrat,integration,") constKolmogorov-Smirnov 2-Samples Test.Definition GoFTest.cxx:896; ROOT::Math::GoFTest::fSamplesstd::vector< std::vector< Double_t > > fSamplesThe input data.Definition GoFTest.h:243; ROOT::Math::GoFTest::PValueAD1SampleDouble_t PValueAD1Sample(Double_t A2) constComputation of the 1-Sample Anderson-Darling Test's p-value.Definition GoFTest.cxx:483; ROOT::Math::GoFTest::AndersonDarlingTestvoid AndersonDarlingTest(Double_t &pvalue, Double_t &testStat) constPerforms the Anderson-Darling 1-Sample Test.Definition GoFTest.cxx:862; ROOT::Math::GoFTest::ExponentialCDFDouble_t ExponentialCDF(Double_t x) constDefinition GoFTest.cxx:299; ROOT::Math::GoFTest::SetParametersvoid SetParameters(const std::vector< double > &params)Sets the distribution parameters.Definition GoFTest.cxx:204; ROOT::Math::IBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evalua...Definition IFunction.h:112; ROOT::Math::IntegratorOneDimUser Class for performing numerical integration of a function in one dimension.Definition Integrator.h:98; ROOT::Math::IntegratorOneDim::IntegralUpdouble IntegralUp(const IGenFunction &f, double a)evaluate the Integral of a function f over the semi-infinite interval (a,+inf)Definition Integrator.h:278; ROOT::Math::IntegratorOneDim::SetFunctionvoid SetFunction(Function &f)method to set the a generic integration functionDefinition Integrator.h:492; ROOT::Math::IntegratorOneDim::Integraldouble Integral(Function &f, double a, double b)evaluate the Integral of a function f over the defined interval (a,b)Definition Integrator.h:499; ROOT::Math::IntegratorOneDim::IntegralLowdouble IntegralLow(const IGenFunction &f, double b)evaluate the Integral of a function f over the over the semi-infinite interval (-inf,...Definition Integrator.h:296; ROOT::Math::PDFIntegralDefinition GoFTest.cxx:77; ROOT::Math::PDFIntegral::PDFIntegralPDFIntegral(const IGenFunction &pdf, Double_t xmin=0, Double_t xmax=-1)Definition GoFTest.cx",MatchSource.WIKI,doc/master/GoFTest_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html
Energy Efficiency,allocate,allocate,"n) {; 535 int i;; 536 int sum = 0;; 537 ; 538 for (i = 0; i < n; i++) {; 539 sum += x[i];; 540 }; 541 ; 542 return(sum);; 543}; 544 ; 545 ; 546void adkTestStat(double *adk, const std::vector<std::vector<double> > & samples, const std::vector<double> & zstar) {; 547 ; 548 int i;; 549 int j;; 550 ; 551 int nsum; /* total sample size = n_1 + ... + n_k */; 552 int k = samples.size();; 553 int l = zstar.size();; 554 ; 555 /* fij records the number of observations in the ith sample coinciding; 556 with zstar[j], where i = 1, ..., k, and j = 1, ..., l */; 557 std::vector<int> fij (k*l);; 558 /* lvec is an integer vector with length l,; 559 whose jth entry = \sum_{i=1}^{k} f_{ij}, i.e., the multiplicity; 560 of zstar[j] */; 561 std::vector<int> lvec(l);; 562 ; 563 /* for computation */; 564 double mij;; 565 double maij;; 566 double innerSum;; 567 double aInnerSum;; 568 double bj;; 569 double baj;; 570 double tmp;; 571 ; 572 /* samples is a two-dimensional double array with length k;; 573 it stores an array of k pointers to double arrays which are; 574 the k samples being compared */; 575// double **samples;; 576 ; 577 /* dynamically allocate memory */; 578 //std::vector< std::vector<double> > samples(k);; 579 std::vector<int> ns(k);; 580 nsum = 0;; 581 for (i = 0; i < k; i++) {; 582 ns[i] = samples[i].size();; 583 nsum += ns[i];; 584 }; 585 ; 586 /* fij: k*l integer matrix, where l is the length of zstar and; 587 k is the number of samples being compared; 588 lvec: integer vector of length l, records the multiplicity of; 589 each element of zstar */; 590 for (j = 0; j < l; j++) {; 591 lvec[j] = 0;; 592 for (i = 0; i < k; i++) {; 593 fij[i + j*k] = getCount(zstar[j], &samples[i][0], ns[i]);; 594 lvec[j] += fij[i + j*k];; 595 }; 596 }; 597 ; 598 // loop on samples to compute the adk's; 599 // Formula (6) and (7) of the paper; 600 adk[0] = adk[1] = 0;; 601 for (i = 0; i < k; i++) {; 602 mij = 0;; 603 maij = 0;; 604 innerSum = 0;; 605 aInnerSum = 0;; 606 ; 607 for (j = 0; j < l;",MatchSource.WIKI,doc/master/GoFTest_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html
Integrability,wrap,wrapper,"(c) 2006 , LCG ROOT MathLib Team *; 6 * *; 7 * *; 8 **********************************************************************/; 9// implementation file for GoFTest; 10 ; 11 ; 12#include <algorithm>; 13#include <functional>; 14#include <iostream>; 15#include <map>; 16#include <memory>; 17#include <numeric>; 18#include <cstring>; 19#include <cassert>; 20 ; 21#include ""Math/Error.h""; 22#include ""Math/Math.h""; 23#include ""Math/IFunction.h""; 24#include ""Math/IFunctionfwd.h""; 25#include ""Math/Integrator.h""; 26#include ""Math/ProbFuncMathCore.h""; 27#include ""Math/WrappedFunction.h""; 28 ; 29#include ""Math/GoFTest.h""; 30 ; 31#include ""Fit/BinData.h""; 32 ; 33#include ""TStopwatch.h""; 34 ; 35/* Note: The references mentioned here are stated in GoFTest.h */; 36 ; 37namespace ROOT {; 38namespace Math {; 39 ; 40 struct CDFWrapper : public IGenFunction {; 41 // wrapper around a cdf function to re-scale for the range; 42 Double_t fXmin; // lower range for x; 43 Double_t fXmax; // lower range for x; 44 Double_t fNorm; // normalization; 45 const IGenFunction* fCDF; // cdf pointer (owned by the class); 46 ; 47 ; 48 ~CDFWrapper() override { if (fCDF) delete fCDF; }; 49 ; 50 CDFWrapper(const IGenFunction& cdf, Double_t xmin=0, Double_t xmax=-1) :; 51 fCDF(cdf.Clone()); 52 {; 53 if (xmin >= xmax) {; 54 fNorm = 1;; 55 fXmin = -std::numeric_limits<double>::infinity();; 56 fXmax = std::numeric_limits<double>::infinity();; 57 }; 58 else {; 59 fNorm = cdf(xmax) - cdf(xmin);; 60 fXmin = xmin;; 61 fXmax = xmax;; 62 }; 63 }; 64 ; 65 Double_t DoEval(Double_t x) const override {; 66 if (x <= fXmin) return 0;; 67 if (x >= fXmax) return 1.0;; 68 return (*fCDF)(x)/fNorm;; 69 }; 70 ; 71 IGenFunction* Clone() const override {; 72 return new CDFWrapper(*fCDF,fXmin,fXmax);; 73 }; 74 };; 75 ; 76 ; 77 class PDFIntegral : public IGenFunction {; 78 Double_t fXmin; // lower range for x; 79 Double_t fXmax; // lower range for x; 80 Double_t fNorm; // normalization; 81 mutable IntegratorOneDim fIntegral;; 82 const IG",MatchSource.WIKI,doc/master/GoFTest_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html
Performance,cache,cache," 292 SetSamples(std::vector<const Double_t*>(1, sample), std::vector<size_t>(1, sampleSize));; 293 }; 294 ; 295 Double_t GoFTest::GaussianCDF(Double_t x) const {; 296 return ROOT::Math::normal_cdf(x, fParams[1], fParams[0]);; 297 }; 298 ; 299 Double_t GoFTest::ExponentialCDF(Double_t x) const {; 300 return ROOT::Math::exponential_cdf(x, fParams[0]);; 301 }; 302 ; 303 void GoFTest::LogSample() {; 304 transform(fSamples[0].begin(), fSamples[0].end(), fSamples[0].begin(),; 305 std::function<Double_t(Double_t)>(TMath::Log));; 306 }; 307 ; 308/* ; 309 Taken from (1); 310*/ ; 311 Double_t GoFTest::GetSigmaN(const std::vector<size_t> & ns, size_t N) {; 312 // compute moments of AD distribution (from Scholz-Stephen paper, paragraph 3); 313 ; 314 Double_t sigmaN = 0.0, h = 0.0, H = 0.0, g = 0.0, a, b, c, d, k = ns.size();; 315 ; 316 for (size_t i = 0; i < ns.size(); ++i) {; 317 H += 1.0 / double( ns[i] );; 318 }; 319 ; 320 // use approximate formulas for large N; 321 // cache Sum( 1 / i); 322 if (N < 2000) { ; 323 std::vector<double> invI(N); ; 324 for (size_t i = 1; i <= N - 1; ++i) {; 325 invI[i] = 1.0 / i; ; 326 h += invI[i]; ; 327 }; 328 for (size_t i = 1; i <= N - 2; ++i) {; 329 double tmp = invI[N-i];; 330 for (size_t j = i + 1; j <= N - 1; ++j) {; 331 g += tmp * invI[j];; 332 }; 333 }; 334 }; 335 else {; 336 // for N larger than 2000 error difference in g is ~ 5 10^-3 while in h is at the level of 10^-5; 337 const double emc = 0.5772156649015328606065120900824024; // Euler-Mascheroni constant; 338 h = std::log(double(N-1) ) + emc;; 339 g = (M_PI)*(M_PI)/6.0;; 340 }; 341 double k2 = std::pow(k,2);; 342 a = (4 * g - 6) * k + (10 - 6 * g) * H - 4 * g + 6;; 343 b = (2 * g - 4) * k2 + 8 * h * k + (2 * g - 14 * h - 4) * H - 8 * h + 4 * g - 6;; 344 c = (6 * h + 2 * g - 2) * k2 + (4 * h - 4 *g + 6) * k + (2 * h - 6) * H + 4 * h;; 345 d = (2 * h + 6) * k2 - 4 * h * k;; 346 sigmaN += a * std::pow(double(N),3) + b * std::pow(double(N),2) + c * N + d;; 347 sigmaN /= ( double(N - ",MatchSource.WIKI,doc/master/GoFTest_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html
Safety,avoid,avoid,"t tx) {; 354 ; 355 /*; 356 Computation of p-values according to ; 357 ""K-Sample Anderson-Darling Tests"" by F.W. Scholz ; 358 and M.A. Stephens (1987), Journal of the American Statistical Association, ; 359 Vol 82, No. 399, pp 918-924.; 360 Code from kSamples package from R (author F. Scholtz); 361 ; 362 This function uses the upper T_m quantiles as obtained via simulation of; 363 the Anderson-Darling test statistics (Nsim = 2*10^6) with sample sizes n=500; 364 for each sample, and after standardization, in order to emulate the Table 1 ; 365 values given in the above reference. However, here we estimate p-quantiles; 366 for p = .00001,.00005,.0001,.0005,.001,.005,.01,.025,.05,.075,; 367 .1,.2,.3,.4,.5,.6,.7,.8,.9,.925,.95,.975,.99,.9925,.995,.9975,.999,; 368 .99925,.9995,.99975,.9999,.999925,.99995,.999975,.99999; 369 First the appropriate p-quantiles are determined from those simulated; 370 for ms = 1,2,3,4,6,8,10, Inf, interpolating to the given value of m. ; 371 Since we use only m=2 we avoid this interpolation. ; 372 ; 373 Next linear inetrpolation to find the observed p value given the observed test statistic value. ; 374 We use interpolation in the test statistic -> log((1-p)/p) domain; 375 and we extrapolatelinearly) beyond p = .00001 and .99999.; 376 */; 377 ; 378 // sample values ; 379 //double ms[] = { 1, 2, 3, 4, 6, 8, 10, TMath::Infinity() };; 380 //int ns = ms.size();; 381 const int ns = 8;; 382 double ts[ ] = { -1.1954, -1.5806, -1.8172, ; 383 -2.0032, -2.2526, -2.4204, -2.5283, -4.2649, -1.1786, -1.5394, ; 384 -1.7728, -1.9426, -2.1685, -2.3288, -2.4374, -3.8906, -1.166, ; 385 -1.5193, -1.7462, -1.9067, -2.126, -2.2818, -2.3926, -3.719, ; 386 -1.1407, -1.4659, -1.671, -1.8105, -2.0048, -2.1356, -2.2348, ; 387 -3.2905, -1.1253, -1.4371, -1.6314, -1.7619, -1.9396, -2.0637, ; 388 -2.1521, -3.0902, -1.0777, -1.3503, -1.5102, -1.6177, -1.761, ; 389 -1.8537, -1.9178, -2.5758, -1.0489, -1.2984, -1.4415, -1.5355, ; 390 -1.6625, -1.738, -1.7936, -2.3263, -0.9978",MatchSource.WIKI,doc/master/GoFTest_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html
Testability,assert,assert,";; 121 }; 122 };; 123 ; 124 void GoFTest::SetDistribution(EDistribution dist, const std::vector<double> & distParams ) {; 125 if (!(kGaussian <= dist && dist <= kExponential)) {; 126 MATH_ERROR_MSG(""SetDistribution"", ""Cannot set distribution type! Distribution type option must be enabled."");; 127 return;; 128 }; 129 fDist = dist;; 130 SetParameters(distParams);; 131 SetCDF();; 132 }; 133 ; 134 GoFTest::GoFTest( size_t sample1Size, const Double_t* sample1, size_t sample2Size, const Double_t* sample2 ); 135 : fDist(kUndefined),; 136 fSamples(std::vector<std::vector<Double_t> >(2)),; 137 fTestSampleFromH0(kFALSE) {; 138 Bool_t badSampleArg = sample1 == nullptr || sample1Size == 0;; 139 if (badSampleArg) {; 140 std::string msg = ""'sample1"";; 141 msg += !sample1Size ? ""Size' cannot be zero"" : ""' cannot be zero-length"";; 142 MATH_ERROR_MSG(""GoFTest"", msg.c_str());; 143 assert(!badSampleArg);; 144 }; 145 badSampleArg = sample2 == nullptr || sample2Size == 0;; 146 if (badSampleArg) {; 147 std::string msg = ""'sample2"";; 148 msg += !sample2Size ? ""Size' cannot be zero"" : ""' cannot be zero-length"";; 149 MATH_ERROR_MSG(""GoFTest"", msg.c_str());; 150 assert(!badSampleArg);; 151 }; 152 std::vector<const Double_t*> samples(2);; 153 std::vector<size_t> samplesSizes(2);; 154 samples[0] = sample1;; 155 samples[1] = sample2;; 156 samplesSizes[0] = sample1Size;; 157 samplesSizes[1] = sample2Size;; 158 SetSamples(samples, samplesSizes);; 159 }; 160 ; 161 GoFTest::GoFTest(size_t sampleSize, const Double_t* sample, EDistribution dist, const std::vector<double> & distParams); 162 : fDist(dist),; 163 fSamples(std::vector<std::vector<Double_t> >(1)),; 164 fTestSampleFromH0(kTRUE) {; 165 Bool_t badSampleArg = sample == nullptr || sampleSize == 0;; 166 if (badSampleArg) {; 167 std::string msg = ""'sample"";; 168 msg += !sampleSize ? ""Size' cannot be zero"" : ""' cannot be zero-length"";; 169 MATH_ERROR_MSG(""GoFTest"", msg.c_str());; 170 assert(!badSampleArg);; 171 }; 172 std::vector<const Double_t*> s",MatchSource.WIKI,doc/master/GoFTest_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html
Availability,error,errors,"The Canvas class.Definition TCanvas.h:23; TF1::SetMaximumvirtual void SetMaximum(Double_t maximum=-1111)Set the maximum value along Y for this function In case the function is already drawn,...Definition TF1.cxx:3394; TF1::SetTitlevoid SetTitle(const char *title="""") overrideSet function title if title has the form ""fffffff;xxxx;yyyy"", it is assumed that the function title i...Definition TF1.cxx:3558; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::Evalvirtual Double_t Eval(Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) constEvaluate this function.Definition TF1.cxx:1439; TF2A 2-Dim function with parameters.Definition TF2.h:29; TF2::GetRandom2virtual void GetRandom2(Double_t &xrandom, Double_t &yrandom, TRandom *rng=nullptr)Return 2 random numbers following this function shape.Definition TF2.cxx:547; TF2::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF2.cxx:259; TGraph2DErrorsGraph 2D class with errors.Definition TGraph2DErrors.h:26; TGraph2DErrors::SetPointvoid SetPoint(Int_t i, Double_t x, Double_t y, Double_t z) overrideSet x, y and z values for point number i.Definition TGraph2DErrors.cxx:404; TGraph2DErrors::SetPointErrorvirtual void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez)Set ex, ey and ez values for point number i.Definition TGraph2DErrors.cxx:446; TGraph2D::FindObjectTObject * FindObject(const char *name) const overridesearch object named name in the list of functionsDefinition TGraph2D.cxx:791; TGraph2D::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""")Fits this graph with function with name fname Predefined functions such as gaus, expo and poln are au...Definition TGraph2D.cxx:815; TGraph2D::Drawvoid Draw(Option_t *option=""P0"") overrideSpecific drawing options can be used to paint a TGraph2D:Definition TGraph2D.cxx:762; TRandomThis is the base class for the ROOT Random number generators",MatchSource.WIKI,doc/master/graph2derrorsfit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/graph2derrorsfit_8C.html
Availability,error,errors,"The Canvas class.Definition TCanvas.h:23; TF1::SetMaximumvirtual void SetMaximum(Double_t maximum=-1111)Set the maximum value along Y for this function In case the function is already drawn,...Definition TF1.cxx:3394; TF1::SetTitlevoid SetTitle(const char *title="""") overrideSet function title if title has the form ""fffffff;xxxx;yyyy"", it is assumed that the function title i...Definition TF1.cxx:3558; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::Evalvirtual Double_t Eval(Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) constEvaluate this function.Definition TF1.cxx:1439; TF2A 2-Dim function with parameters.Definition TF2.h:29; TF2::GetRandom2virtual void GetRandom2(Double_t &xrandom, Double_t &yrandom, TRandom *rng=nullptr)Return 2 random numbers following this function shape.Definition TF2.cxx:547; TF2::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF2.cxx:259; TGraph2DErrorsGraph 2D class with errors.Definition TGraph2DErrors.h:26; TGraph2DErrors::SetPointvoid SetPoint(Int_t i, Double_t x, Double_t y, Double_t z) overrideSet x, y and z values for point number i.Definition TGraph2DErrors.cxx:404; TGraph2DErrors::SetPointErrorvirtual void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez)Set ex, ey and ez values for point number i.Definition TGraph2DErrors.cxx:446; TGraph2D::FindObjectTObject * FindObject(const char *name) const overridesearch object named name in the list of functionsDefinition TGraph2D.cxx:791; TGraph2D::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""")Fits this graph with function with name fname Predefined functions such as gaus, expo and poln are au...Definition TGraph2D.cxx:815; TGraph2D::Drawvoid Draw(Option_t *option=""P0"") overrideSpecific drawing options can be used to paint a TGraph2D:Definition TGraph2D.cxx:762; TRandomThis is the base class for the ROOT Random number generators",MatchSource.WIKI,doc/master/graph2derrorsfit_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/graph2derrorsfit_8C_source.html
Availability,error,errorx,". ROOT: tutorials/graphs/graphApply.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. graphApply.C File ReferenceTutorials » Graphs tutorials. Detailed Description; A macro to demonstrate the functionality of TGraph::Apply() method. ; TGraph::Apply applies a function f to all the data TGraph points. f may be a 1-D function TF1 or 2-d function TF2. The Y values of the graph are replaced by the new values computed using the function. ; void graphApply(); {; const Int_t npoints=3;; Double_t xaxis[npoints] = {1.,2.,3.};; Double_t yaxis[npoints] = {10.,20.,30.};; Double_t errorx[npoints] = {0.5,0.5,0.5};; Double_t errory[npoints] = {5.,5.,5.};; ; Double_t exl[npoints] = {0.5,0.5,0.5};; Double_t exh[npoints] = {0.5,0.5,0.5};; Double_t eyl[npoints] = {5.,5.,5.};; Double_t eyh[npoints] = {5.,5.,5.};; ; TGraph *gr1 = new TGraph(npoints,xaxis,yaxis);; TGraphErrors *gr2 = new TGraphErrors(npoints,xaxis,yaxis,errorx,errory);; TGraphAsymmErrors *gr3 = new TGraphAsymmErrors(npoints,xaxis,yaxis,exl,exh,eyl,eyh);; TF2 *ff = new TF2(""ff"",""-1./y"");; ; TCanvas *c1 = new TCanvas(""c1"",""c1"");; c1->Divide(2,3);; ; // TGraph; c1->cd(1);; gr1->DrawClone(""A*"");; c1->cd(2);; gr1->Apply(ff);; gr1->Draw(""A*"");; ; // TGraphErrors; c1->cd(3);; gr2->DrawClone(""A*"");; c1->cd(4);; gr2->Apply(ff);; gr2->Draw(""A*"");; ; // TGraphAsymmErrors; c1->cd(5);; gr3->DrawClone(""A*"");; c1->cd(6);; gr3->Apply(ff);; gr3->Draw(""A*"");; }; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; TCanvasThe Canvas class.Definition TCanvas.h:23; TF2A 2-Dim function with parameters.Definition TF2.h:29; TGraphAsymmErrorsTGraph with asymmetric error bars.Definition TGraphAsymmErrors.h:26; TGraphAsymmErrors::Applyvoid Apply(TF1 *f) overrideApply a function to all data points .Definition TGraphAsymmErrors.cxx:468; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraphErrors::Applyvoid Apply(TF1 *f) overri",MatchSource.WIKI,doc/master/graphApply_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/graphApply_8C.html
Availability,error,error,"s()->SetMoreLogLabels();; graphe->GetYaxis()->SetMoreLogLabels();; graphe->Draw(""a pl rx ry"");; ; // TGraphAsymmErrors; auto graphae = new TGraphAsymmErrors();; graphae->GetXaxis()->SetNdivisions(514);; graphae->GetYaxis()->SetNdivisions(514);; graphae->SetMarkerStyle(kCircle);; graphae->SetPoint(0,5,5);; graphae->SetPointError(0,1,3,3,1);; graphae->SetPoint(1,9,9);; graphae->SetPointError(1,1,3,1,3);; ; c->cd(4);; gPad->SetGrid();; graphae->Draw(""a pl "");; ; c->cd(5);; gPad->SetGrid();; graphae->Draw(""a pl rx ry "");; ; c->cd(6);; gPad->SetGrid();; gPad->SetLogx();; gPad->SetLogy();; graphae->GetXaxis()->SetMoreLogLabels();; graphae->GetYaxis()->SetMoreLogLabels();; graphae->Draw(""a pl rx ry"");; ; // TGraphBentErrors; auto graphbe = new TGraphBentErrors();; graphbe->GetXaxis()->SetNdivisions(514);; graphbe->GetYaxis()->SetNdivisions(514);; graphbe->SetMarkerStyle(kCircle);; graphbe->SetPoint(0,5,5);; graphbe->SetPointError(0,1,3,3,1,.5,.2,.5,.2);; graphbe->SetPoint(1,9,9);; graphbe->SetPointError(1,1,3,1,3,-.5,-.2,-.5,-.2);; ; c->cd(7);; gPad->SetGrid();; graphbe->Draw(""a pl "");; ; c->cd(8);; gPad->SetGrid();; graphbe->Draw(""a pl rx ry "");; ; c->cd(9);; gPad->SetGrid();; gPad->SetLogx();; gPad->SetLogy();; graphbe->GetXaxis()->SetMoreLogLabels();; graphbe->GetYaxis()->SetMoreLogLabels();; graphbe->Draw(""a pl rx ry"");; }; c#define c(i)Definition RSha256.hxx:101; kCircle@ kCircleDefinition TAttMarker.h:53; gPad#define gPadDefinition TVirtualPad.h:308; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphAsymmErrorsTGraph with asymmetric error bars.Definition TGraphAsymmErrors.h:26; TGraphBentErrorsA TGraphBentErrors is a TGraph with bent, asymmetric error bars.Definition TGraphBentErrors.h:25; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; AuthorOlivier Couet ; Definition in file graphreverse.C. tutorialsgraphsgraphreverse.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/graphreverse_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/graphreverse_8C.html
Testability,test,test,". ROOT: tutorials/graphs/graphreverse.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. graphreverse.C File ReferenceTutorials » Graphs tutorials. Detailed Description; This example test all the various case of reverse graphs combined with logarithmic scale. . ; void graphreverse() {; auto c = new TCanvas(""c"",""Reversed graphs"",0,0,900,900);; c->Divide(3,3);; ; // TGraphErrors; auto graphe = new TGraphErrors();; graphe->GetXaxis()->SetNdivisions(514);; graphe->GetYaxis()->SetNdivisions(514);; graphe->SetMarkerStyle(kCircle);; graphe->SetPoint(0,5,5);; graphe->SetPointError(0,1,3);; graphe->SetPoint(1,9,9);; graphe->SetPointError(1,1,3);; ; c->cd(1);; gPad->SetGrid();; graphe->Draw(""a pl "");; ; c->cd(2);; gPad->SetGrid();; graphe->Draw(""a pl rx ry "");; ; c->cd(3);; gPad->SetGrid();; gPad->SetLogx();; gPad->SetLogy();; graphe->GetXaxis()->SetMoreLogLabels();; graphe->GetYaxis()->SetMoreLogLabels();; graphe->Draw(""a pl rx ry"");; ; // TGraphAsymmErrors; auto graphae = new TGraphAsymmErrors();; graphae->GetXaxis()->SetNdivisions(514);; graphae->GetYaxis()->SetNdivisions(514);; graphae->SetMarkerStyle(kCircle);; graphae->SetPoint(0,5,5);; graphae->SetPointError(0,1,3,3,1);; graphae->SetPoint(1,9,9);; graphae->SetPointError(1,1,3,1,3);; ; c->cd(4);; gPad->SetGrid();; graphae->Draw(""a pl "");; ; c->cd(5);; gPad->SetGrid();; graphae->Draw(""a pl rx ry "");; ; c->cd(6);; gPad->SetGrid();; gPad->SetLogx();; gPad->SetLogy();; graphae->GetXaxis()->SetMoreLogLabels();; graphae->GetYaxis()->SetMoreLogLabels();; graphae->Draw(""a pl rx ry"");; ; // TGraphBentErrors; auto graphbe = new TGraphBentErrors();; graphbe->GetXaxis()->SetNdivisions(514);; graphbe->GetYaxis()->SetNdivisions(514);; graphbe->SetMarkerStyle(kCircle);; graphbe->SetPoint(0,5,5);; graphbe->SetPointError(0,1,3,3,1,.5,.2,.5,.2);; graphbe->SetPoint(1,9,9);; graphbe->SetPointError(1,1,3,1,3,-.5,-.2,-.5,-.2);; ; c->cd(7);; gPad->SetGrid();; graphbe->Draw(""a pl "");; ; c->cd(8);;",MatchSource.WIKI,doc/master/graphreverse_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/graphreverse_8C.html
Deployability,install,installed,". ROOT: tutorials/graphs/graphstruct.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. graphstruct.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Draw a simple graph structure. ; The graph layout is made using graphviz. This macro creates some nodes and edges and change a few graphical attributes on some of them. ; TCanvas* graphstruct(); {; #if __has_include(""TGraphStruct.h"") // handy check on whether gviz was installed; TGraphStruct *gs = new TGraphStruct();; ; // create some nodes and put them in the graph in one go ...; TGraphNode *n0 = gs->AddNode(""n0"",""Node 0"");; TGraphNode *n1 = gs->AddNode(""n1"",""First node"");; TGraphNode *n2 = gs->AddNode(""n2"",""Second node"");; TGraphNode *n3 = gs->AddNode(""n3"",""Third node"");; TGraphNode *n4 = gs->AddNode(""n4"",""Fourth node"");; TGraphNode *n5 = gs->AddNode(""n5"",""5th node"");; TGraphNode *n6 = gs->AddNode(""n6"",""Node number six"");; TGraphNode *n7 = gs->AddNode(""n7"",""Node 7"");; TGraphNode *n8 = gs->AddNode(""n8"",""Node 8"");; TGraphNode *n9 = gs->AddNode(""n9"",""Node 9"");; ; n4->SetTextSize(0.03);; n6->SetTextSize(0.03);; n2->SetTextSize(0.04);; ; n3->SetTextFont(132);; ; n0->SetTextColor(kRed);; ; n9->SetFillColor(kRed-10);; n0->SetFillColor(kYellow-9);; n7->SetFillColor(kViolet-9);; ; // some edges ...; gs->AddEdge(n0,n1)->SetLineColor(kRed);; TGraphEdge *e06 = gs->AddEdge(n0,n6);; e06->SetLineColor(kRed-3);; e06->SetLineWidth(4);; gs->AddEdge(n1,n7);; gs->AddEdge(n4,n6);; gs->AddEdge(n3,n9);; gs->AddEdge(n6,n8);; gs->AddEdge(n7,n2);; gs->AddEdge(n8,n3);; gs->AddEdge(n2,n3);; gs->AddEdge(n9,n0);; gs->AddEdge(n1,n4);; gs->AddEdge(n1,n6);; gs->AddEdge(n2,n5);; gs->AddEdge(n3,n6);; gs->AddEdge(n4,n5);; ; TCanvas *c = new TCanvas(""c"",""c"",800,600);; c->SetFillColor(38);; gs->Draw();; return c;; #else; return new TCanvas(""c"",""c"",800,600);; #endif; }; c#define c(i)Definition RSha256.hxx:101; kRed@ kRedDefinition Rtypes.h:66; kYellow@ kYellowDefinition Rtypes.h:66; kViolet@",MatchSource.WIKI,doc/master/graphstruct_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/graphstruct_8C.html
Integrability,interface,interface,"gs->AddEdge(n1,n6);; gs->AddEdge(n2,n5);; gs->AddEdge(n3,n6);; gs->AddEdge(n4,n5);; ; TCanvas *c = new TCanvas(""c"",""c"",800,600);; c->SetFillColor(38);; gs->Draw();; return c;; #else; return new TCanvas(""c"",""c"",800,600);; #endif; }; c#define c(i)Definition RSha256.hxx:101; kRed@ kRedDefinition Rtypes.h:66; kYellow@ kYellowDefinition Rtypes.h:66; kViolet@ kVioletDefinition Rtypes.h:67; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphEdgeAn edge object connecting two nodes which can be added in a TGraphStruct.Definition TGraphEdge.h:25; TGraphNodeA graph node object which can be added in a TGraphStruct.Definition TGraphNode.h:27; TGraphStructThe Graph Structure is an interface to the graphviz package.Definition TGraphStruct.h:24; TGraphStruct::AddNodevoid AddNode(TGraphNode *node)Add the node ""node"" in this TGraphStruct.Definition TGraphStruct.cxx:114; TGraphStruct::Drawvoid Draw(Option_t *option="""") overrideDraw the graph.Definition TGraphStruct.cxx:158; TGraphStruct::AddEdgevoid AddEdge(TGraphEdge *edge)Add the edge ""edge"" in this TGraphStruct.Definition TGraphStruct.cxx:88; NoteFor this to work, ROOT has to be compiled with gviz ON ; AuthorOlivier Couet ; Definition in file graphstruct.C. tutorialsgraphsgraphstruct.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/graphstruct_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/graphstruct_8C.html
Usability,simpl,simple,". ROOT: tutorials/graphs/graphstruct.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. graphstruct.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Draw a simple graph structure. ; The graph layout is made using graphviz. This macro creates some nodes and edges and change a few graphical attributes on some of them. ; TCanvas* graphstruct(); {; #if __has_include(""TGraphStruct.h"") // handy check on whether gviz was installed; TGraphStruct *gs = new TGraphStruct();; ; // create some nodes and put them in the graph in one go ...; TGraphNode *n0 = gs->AddNode(""n0"",""Node 0"");; TGraphNode *n1 = gs->AddNode(""n1"",""First node"");; TGraphNode *n2 = gs->AddNode(""n2"",""Second node"");; TGraphNode *n3 = gs->AddNode(""n3"",""Third node"");; TGraphNode *n4 = gs->AddNode(""n4"",""Fourth node"");; TGraphNode *n5 = gs->AddNode(""n5"",""5th node"");; TGraphNode *n6 = gs->AddNode(""n6"",""Node number six"");; TGraphNode *n7 = gs->AddNode(""n7"",""Node 7"");; TGraphNode *n8 = gs->AddNode(""n8"",""Node 8"");; TGraphNode *n9 = gs->AddNode(""n9"",""Node 9"");; ; n4->SetTextSize(0.03);; n6->SetTextSize(0.03);; n2->SetTextSize(0.04);; ; n3->SetTextFont(132);; ; n0->SetTextColor(kRed);; ; n9->SetFillColor(kRed-10);; n0->SetFillColor(kYellow-9);; n7->SetFillColor(kViolet-9);; ; // some edges ...; gs->AddEdge(n0,n1)->SetLineColor(kRed);; TGraphEdge *e06 = gs->AddEdge(n0,n6);; e06->SetLineColor(kRed-3);; e06->SetLineWidth(4);; gs->AddEdge(n1,n7);; gs->AddEdge(n4,n6);; gs->AddEdge(n3,n9);; gs->AddEdge(n6,n8);; gs->AddEdge(n7,n2);; gs->AddEdge(n8,n3);; gs->AddEdge(n2,n3);; gs->AddEdge(n9,n0);; gs->AddEdge(n1,n4);; gs->AddEdge(n1,n6);; gs->AddEdge(n2,n5);; gs->AddEdge(n3,n6);; gs->AddEdge(n4,n5);; ; TCanvas *c = new TCanvas(""c"",""c"",800,600);; c->SetFillColor(38);; gs->Draw();; return c;; #else; return new TCanvas(""c"",""c"",800,600);; #endif; }; c#define c(i)Definition RSha256.hxx:101; kRed@ kRedDefinition Rtypes.h:66; kYellow@ kYellowDefinition Rtypes.h:66; kViolet@",MatchSource.WIKI,doc/master/graphstruct_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/graphstruct_8C.html
Deployability,update,updated,". ROOT: tutorials/graphs/graphtext.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. graphtext.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Draw a graph with text attached to each point. ; The text is drawn in a TExec function attached to the TGraph, therefore if the a graph's point is moved interactively, the text will be automatically updated. ; void graphtext() {; TCanvas *c = new TCanvas(""c"",""A Simple Graph Example with Text"",700,500);; c->SetGrid();; ; const Int_t n = 10;; auto gr = new TGraph(n);; gr->SetTitle(""A Simple Graph Example with Text"");; gr->SetMarkerStyle(20);; auto ex = new TExec(""ex"",""drawtext();"");; gr->GetListOfFunctions()->Add(ex);; ; Double_t x, y;; for (Int_t i=0;i<n;i++) {; x = i*0.1;; y = 10*sin(x+0.2);; gr->SetPoint(i,x,y);; ; }; gr->Draw(""ALP"");; }; ; void drawtext(); {; Int_t i,n;; Double_t x,y;; TLatex l;; ; l.SetTextSize(0.025);; l.SetTextFont(42);; l.SetTextAlign(21);; l.SetTextColor(kBlue);; ; auto g = (TGraph*)gPad->GetListOfPrimitives()->FindObject(""Graph"");; n = g->GetN();; ; for (i=0; i<n; i++) {; g->GetPoint(i,x,y);; l.PaintText(x,y+0.2,Form(""(%4.2f,%4.2f)"",x,y));; }; }; ; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; kBlue@ kBlueDefinition Rtypes.h:66; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; gPad#define gPadDefinition TVirtualPad.h:308; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad.Definition TExec.h:26; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::SetPointvirtual void SetPoin",MatchSource.WIKI,doc/master/graphtext_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/graphtext_8C.html
Usability,simpl,simple,". ROOT: tutorials/graphs/graph.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. graph.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Draw a simple graph. . ; void graph() {; TCanvas *c1 = new TCanvas(""c1"",""A Simple Graph Example"",200,10,700,500);; ; c1->SetGrid();; ; const Int_t n = 20;; Double_t x[n], y[n];; for (Int_t i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 10*sin(x[i]+0.2);; printf("" i %i %f %f \n"",i,x[i],y[i]);; }; TGraph *gr = new TGraph(n,x,y);; gr->SetLineColor(2);; gr->SetLineWidth(4);; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->SetTitle(""a simple graph"");; gr->GetXaxis()->SetTitle(""X title"");; gr->GetYaxis()->SetTitle(""Y title"");; gr->Draw(""ACP"");; ; // TCanvas::Update() draws the frame, after which one can change it; c1->Update();; c1->GetFrame()->SetBorderSize(12);; c1->Modified();; }; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::GetXaxisTAxis * GetXaxis() constGet x axis of the graph.Definition TGraph.cxx:1566; TGraph::GetYaxisTAxis * GetYaxis() constGet y axis of the graph.Definition TGraph.cxx:1575; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; TNamed::SetTit",MatchSource.WIKI,doc/master/graph_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/graph_8C.html
Security,access,access,"e Graph Example . i 0 0.000000 1.986693 ; i 1 0.100000 2.955202 ; i 2 0.200000 3.894183 ; i 3 0.300000 4.794255 ; i 4 0.400000 5.646425 ; i 5 0.500000 6.442177 ; i 6 0.600000 7.173561 ; i 7 0.700000 7.833269 ; i 8 0.800000 8.414710 ; i 9 0.900000 8.912074 ; i 10 1.000000 9.320391 ; i 11 1.100000 9.635582 ; i 12 1.200000 9.854497 ; i 13 1.300000 9.974950 ; i 14 1.400000 9.995736 ; i 15 1.500000 9.916648 ; i 16 1.600000 9.738476 ; i 17 1.700000 9.463001 ; i 18 1.800000 9.092974 ; i 19 1.900000 8.632094 ; ; from __future__ import print_function; from ROOT import TCanvas, TGraph; from ROOT import gROOT; from math import sin; from array import array; ; ; c1 = TCanvas( 'c1', 'A Simple Graph Example', 200, 10, 700, 500 ); ; c1.SetFillColor( 42 ); c1.SetGrid(); ; n = 20; x, y = array( 'd' ), array( 'd' ); ; for i in range( n ):; x.append( 0.1*i ); y.append( 10*sin( x[i]+0.2 ) ); print(' i %i %f %f ' % (i,x[i],y[i])); ; gr = TGraph( n, x, y ); gr.SetLineColor( 2 ); gr.SetLineWidth( 4 ); gr.SetMarkerColor( 4 ); gr.SetMarkerStyle( 21 ); gr.SetTitle( 'a simple graph' ); gr.GetXaxis().SetTitle( 'X title' ); gr.GetYaxis().SetTitle( 'Y title' ); gr.Draw( 'ACP' ); ; # TCanvas.Update() draws the frame, after which one can change it; c1.Update(); c1.GetFrame().SetFillColor( 21 ); c1.GetFrame().SetBorderSize( 12 ); c1.Modified(); c1.Update(); # If the graph does not appear, try using the ""i"" flag, e.g. ""python3 -i graph.py""; # This will access the interactive mode after executing the script, and thereby persist; # long enough for the graph to appear.; SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; SetBorderSizec SetBorderSize(2); AuthorWim Lavrijsen ; Definition in file graph.py. tutorialspyrootgraph.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/graph_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/graph_8py.html
Usability,simpl,simple,"e Graph Example . i 0 0.000000 1.986693 ; i 1 0.100000 2.955202 ; i 2 0.200000 3.894183 ; i 3 0.300000 4.794255 ; i 4 0.400000 5.646425 ; i 5 0.500000 6.442177 ; i 6 0.600000 7.173561 ; i 7 0.700000 7.833269 ; i 8 0.800000 8.414710 ; i 9 0.900000 8.912074 ; i 10 1.000000 9.320391 ; i 11 1.100000 9.635582 ; i 12 1.200000 9.854497 ; i 13 1.300000 9.974950 ; i 14 1.400000 9.995736 ; i 15 1.500000 9.916648 ; i 16 1.600000 9.738476 ; i 17 1.700000 9.463001 ; i 18 1.800000 9.092974 ; i 19 1.900000 8.632094 ; ; from __future__ import print_function; from ROOT import TCanvas, TGraph; from ROOT import gROOT; from math import sin; from array import array; ; ; c1 = TCanvas( 'c1', 'A Simple Graph Example', 200, 10, 700, 500 ); ; c1.SetFillColor( 42 ); c1.SetGrid(); ; n = 20; x, y = array( 'd' ), array( 'd' ); ; for i in range( n ):; x.append( 0.1*i ); y.append( 10*sin( x[i]+0.2 ) ); print(' i %i %f %f ' % (i,x[i],y[i])); ; gr = TGraph( n, x, y ); gr.SetLineColor( 2 ); gr.SetLineWidth( 4 ); gr.SetMarkerColor( 4 ); gr.SetMarkerStyle( 21 ); gr.SetTitle( 'a simple graph' ); gr.GetXaxis().SetTitle( 'X title' ); gr.GetYaxis().SetTitle( 'Y title' ); gr.Draw( 'ACP' ); ; # TCanvas.Update() draws the frame, after which one can change it; c1.Update(); c1.GetFrame().SetFillColor( 21 ); c1.GetFrame().SetBorderSize( 12 ); c1.Modified(); c1.Update(); # If the graph does not appear, try using the ""i"" flag, e.g. ""python3 -i graph.py""; # This will access the interactive mode after executing the script, and thereby persist; # long enough for the graph to appear.; SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; SetBorderSizec SetBorderSize(2); AuthorWim Lavrijsen ; Definition in file graph.py. tutorialspyrootgraph.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/graph_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/graph_8py.html
Security,access,access,". ROOT: tutorials/pyroot/graph.py Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. graph.py. Go to the documentation of this file. 1## \file; 2## \ingroup tutorial_pyroot; 3## \notebook; 4## A Simple Graph Example; 5##; 6## \macro_image; 7## \macro_output; 8## \macro_code; 9##; 10## \author Wim Lavrijsen; 11 ; 12from __future__ import print_function; 13from ROOT import TCanvas, TGraph; 14from ROOT import gROOT; 15from math import sin; 16from array import array; 17 ; 18 ; 19c1 = TCanvas( 'c1', 'A Simple Graph Example', 200, 10, 700, 500 ); 20 ; 21c1.SetFillColor( 42 ); 22c1.SetGrid(); 23 ; 24n = 20; 25x, y = array( 'd' ), array( 'd' ); 26 ; 27for i in range( n ):; 28 x.append( 0.1*i ); 29 y.append( 10*sin( x[i]+0.2 ) ); 30 print(' i %i %f %f ' % (i,x[i],y[i])); 31 ; 32gr = TGraph( n, x, y ); 33gr.SetLineColor( 2 ); 34gr.SetLineWidth( 4 ); 35gr.SetMarkerColor( 4 ); 36gr.SetMarkerStyle( 21 ); 37gr.SetTitle( 'a simple graph' ); 38gr.GetXaxis().SetTitle( 'X title' ); 39gr.GetYaxis().SetTitle( 'Y title' ); 40gr.Draw( 'ACP' ); 41 ; 42# TCanvas.Update() draws the frame, after which one can change it; 43c1.Update(); 44c1.GetFrame().SetFillColor( 21 ); 45c1.GetFrame().SetBorderSize( 12 ); 46c1.Modified(); 47c1.Update(); 48# If the graph does not appear, try using the ""i"" flag, e.g. ""python3 -i graph.py""; 49# This will access the interactive mode after executing the script, and thereby persist; 50# long enough for the graph to appear.; SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; SetBorderSizec SetBorderSize(2). tutorialspyrootgraph.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/graph_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/graph_8py_source.html
Usability,simpl,simple,". ROOT: tutorials/pyroot/graph.py Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. graph.py. Go to the documentation of this file. 1## \file; 2## \ingroup tutorial_pyroot; 3## \notebook; 4## A Simple Graph Example; 5##; 6## \macro_image; 7## \macro_output; 8## \macro_code; 9##; 10## \author Wim Lavrijsen; 11 ; 12from __future__ import print_function; 13from ROOT import TCanvas, TGraph; 14from ROOT import gROOT; 15from math import sin; 16from array import array; 17 ; 18 ; 19c1 = TCanvas( 'c1', 'A Simple Graph Example', 200, 10, 700, 500 ); 20 ; 21c1.SetFillColor( 42 ); 22c1.SetGrid(); 23 ; 24n = 20; 25x, y = array( 'd' ), array( 'd' ); 26 ; 27for i in range( n ):; 28 x.append( 0.1*i ); 29 y.append( 10*sin( x[i]+0.2 ) ); 30 print(' i %i %f %f ' % (i,x[i],y[i])); 31 ; 32gr = TGraph( n, x, y ); 33gr.SetLineColor( 2 ); 34gr.SetLineWidth( 4 ); 35gr.SetMarkerColor( 4 ); 36gr.SetMarkerStyle( 21 ); 37gr.SetTitle( 'a simple graph' ); 38gr.GetXaxis().SetTitle( 'X title' ); 39gr.GetYaxis().SetTitle( 'Y title' ); 40gr.Draw( 'ACP' ); 41 ; 42# TCanvas.Update() draws the frame, after which one can change it; 43c1.Update(); 44c1.GetFrame().SetFillColor( 21 ); 45c1.GetFrame().SetBorderSize( 12 ); 46c1.Modified(); 47c1.Update(); 48# If the graph does not appear, try using the ""i"" flag, e.g. ""python3 -i graph.py""; 49# This will access the interactive mode after executing the script, and thereby persist; 50# long enough for the graph to appear.; SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; SetBorderSizec SetBorderSize(2). tutorialspyrootgraph.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/graph_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/graph_8py_source.html
Energy Efficiency,green,green,"ented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/graph_legend.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/graph_legend.html
Modifiability,inherit,inheritance,". ROOT: Graph Legend. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Graph Legend. This page explains how to interpret the graphs that are generated by doxygen.; Consider the following example: /*! Invisible class because of truncation */; class Invisible { };; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or use",MatchSource.WIKI,doc/master/graph_legend.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/graph_legend.html
Security,access,accessible,"ented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/graph_legend.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/graph_legend.html
Usability,undo,undocumented,"ented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/graph_legend.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/graph_legend.html
Integrability,interface,interface,"gle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; gPad#define gPadDefinition TVirtualPad.h:308; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::SetDirectoryvirtual void SetDirectory(TDirectory *dir)By default, when a histogram is created, it is added to the list of histogram objects in the current ...Definition TH1.cxx:8937; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TRecorderClass provides direct recorder/replayer interface for a user.Definition TRecorder.h:266; TRecorder::Stopvoid Stop(Bool_t guiCommand=kFALSE)Stopps recording events.Definition TRecorder.cxx:230; TRecorder::Startvoid Start(const char *filename, Option_t *option=""RECREATE"", Window_t *w=nullptr, Int_t winCount=0)Starts recording events.Definition TRecorder.cxx:221; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; c1return c1Definition legend1.C:41; h1TH1F * h1Definition legend1.C:5; c2return c2Definition legend2.C:14; Note: The previous commands should be copy/pasted into a ROOT session, not executed as a macro. The interactive editing shows. Object editing using object editors; Direct editing on the graphics canvas; Saving PS and bitmap files.; Saving as a .C file: C++ code corresponding to the modifications is saved. The sketch of the recorded actions is; On the canvas c1. Open View/Editor; Select histogram; Change ",MatchSource.WIKI,doc/master/graph__edit__playback_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/graph__edit__playback_8C.html
Performance,perform,perform,". ROOT: tutorials/graphics/graph_edit_playback.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. graph_edit_playback.C File ReferenceTutorials » Graphics tutorials. Detailed Description; This macro plays a recorded ROOT session showing how to perform various interactive graphical editing operations. ; The initial graphics setup was created using the following root commands: TRecorder *t = new TRecorder();; t->Start(""graphedit_playback.root"");; gStyle->SetPalette(1);; TCanvas *c2 = new TCanvas(""c2"",""c2"",0,0,700,500);; TH2F* h2 = new TH2F(""h2"",""Random 2D Gaussian"",40,-4,4,40,-4,4);; h2->SetDirectory(0);; TRandom r;; for (int i=0;i<50000;i++) h2->Fill(r.Gaus(),r.Gaus());; h2->Draw();; gPad->Update();; TCanvas *c1 = new TCanvas(""c1"",""c1"",0,0,700,500);; TH1F* h1 = new TH1F(""h1"",""Random 1D Gaussian"",100,-4,4);; h1->SetDirectory(0);; h1->FillRandom(""gaus"",10000);; h1->Draw();; gPad->Update();; ; // Here the following ""sketch"" was done.; ; t->Stop();; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; gPad#define gPadDefinition TVirtualPad.h:308; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::SetDirectoryvirtual void SetDirectory(TDirectory *dir)By default, when a histogram is created, it is added to the list of histogram objects in the current ...Definition TH1.cxx:8937; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH2F2-D histogram with a float",MatchSource.WIKI,doc/master/graph__edit__playback_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/graph__edit__playback_8C.html
Testability,log,log,"r/replayer interface for a user.Definition TRecorder.h:266; TRecorder::Stopvoid Stop(Bool_t guiCommand=kFALSE)Stopps recording events.Definition TRecorder.cxx:230; TRecorder::Startvoid Start(const char *filename, Option_t *option=""RECREATE"", Window_t *w=nullptr, Int_t winCount=0)Starts recording events.Definition TRecorder.cxx:221; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; c1return c1Definition legend1.C:41; h1TH1F * h1Definition legend1.C:5; c2return c2Definition legend2.C:14; Note: The previous commands should be copy/pasted into a ROOT session, not executed as a macro. The interactive editing shows. Object editing using object editors; Direct editing on the graphics canvas; Saving PS and bitmap files.; Saving as a .C file: C++ code corresponding to the modifications is saved. The sketch of the recorded actions is; On the canvas c1. Open View/Editor; Select histogram; Change fill style; Change fill color; Move stat box; Change fill color; Move title; Change fill color using wheel color; Select Y axis; Change axis title; Select X axis; Change axis title; Select histogram; Go in binning; Change range; Move range; On the canvas menu set grid Y; On the canvas menu set grid X; On the canvas menu set log Y; Increase the range; Close View/Editor; Open the Tool Bar; Create a text ""Comment""; Create an arrow; Change the arrow size; Close the Tool Bar; Save as PS file; Save as C file; Close c1 On the canvas c2. Open View/Editor; Select histogram; Select COL; Select Palette; Move Stats; Select Overflows; Select histogram; Select 3D; Select SURF1; Rotate Surface; Go in binning; Change X range; Change Y range; Close View/Editor; Save as GIF file; Save as C file; Close c2 AuthorOlivier Couet . Definition in file graph_edit_playback.C. tutorialsgraphicsgraph_edit_playback.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/graph__edit__playback_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/graph__edit__playback_8C.html
Availability,avail,available,". ROOT: Base ROOT classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files |; Classes ; Base ROOT classesCore ROOT classes. ; The Base classes of ROOT. ; The base classes of the ROOT system provide the core of the system. They are available to all other classes. They range from a set of abstract interfaces (TVirtualXXXXX classes), to a wide range of basic utility classes providing basic services like strings, regular expression, timers, date/time, md5 checksumming, signal/slots event handling, plugin handler, run-config resource processor, etc. etc. . Files; file  RConversionRuleParser.cxx;  ; file  RDirectory.cxx;  ; file  RDirectory.hxx;  ; file  RDirectoryEntry.hxx;  ; file  RError.cxx;  ; file  RError.hxx;  ; file  RFile.cxx;  ; file  RFile.hxx;  ; file  RIndexIter.hxx;  ; file  RLogger.cxx;  ; file  RLogger.hxx;  ; file  RNotFn.hxx;  ; file  RRangeCast.hxx;  ; file  RSpan.hxx;  ; file  span.hxx;  ; file  StringUtils.hxx;  ; file  TClassEdit.cxx;  . Classes; class  ROOT::Experimental::RError;  Captures diagnostics related to a ROOT runtime error. More...;  ; class  ROOT::Experimental::RException;  Base class for all ROOT issued exceptions. More...;  ; class  ROOT::Experimental::RResult< T >;  The class is used as a return type for operations that can fail; wraps a value of type T or an RError. More...;  ; class  ROOT::Experimental::RResultBase;  Common handling of the error case for RResult<T> (T != void) and RResult<void> More...;  ; class  TApplication;  This class creates the ROOT Application Environment that interfaces to the windowing system eventloop and eventhandlers. More...;  ; class  TApplicationImp;  ABC describing GUI independent application implementation protocol. More...;  ; class  TAtt3D;  Use this attribute class when an object should have 3D capabilities. More...;  ; class  TAttAxis;  Manages histogram axis attributes. More...;  ; class  TAttBBox;  Helper for management of bounding-box information. More...;",MatchSource.WIKI,doc/master/group__Base.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Base.html
Integrability,interface,interfaces,". ROOT: Base ROOT classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files |; Classes ; Base ROOT classesCore ROOT classes. ; The Base classes of ROOT. ; The base classes of the ROOT system provide the core of the system. They are available to all other classes. They range from a set of abstract interfaces (TVirtualXXXXX classes), to a wide range of basic utility classes providing basic services like strings, regular expression, timers, date/time, md5 checksumming, signal/slots event handling, plugin handler, run-config resource processor, etc. etc. . Files; file  RConversionRuleParser.cxx;  ; file  RDirectory.cxx;  ; file  RDirectory.hxx;  ; file  RDirectoryEntry.hxx;  ; file  RError.cxx;  ; file  RError.hxx;  ; file  RFile.cxx;  ; file  RFile.hxx;  ; file  RIndexIter.hxx;  ; file  RLogger.cxx;  ; file  RLogger.hxx;  ; file  RNotFn.hxx;  ; file  RRangeCast.hxx;  ; file  RSpan.hxx;  ; file  span.hxx;  ; file  StringUtils.hxx;  ; file  TClassEdit.cxx;  . Classes; class  ROOT::Experimental::RError;  Captures diagnostics related to a ROOT runtime error. More...;  ; class  ROOT::Experimental::RException;  Base class for all ROOT issued exceptions. More...;  ; class  ROOT::Experimental::RResult< T >;  The class is used as a return type for operations that can fail; wraps a value of type T or an RError. More...;  ; class  ROOT::Experimental::RResultBase;  Common handling of the error case for RResult<T> (T != void) and RResult<void> More...;  ; class  TApplication;  This class creates the ROOT Application Environment that interfaces to the windowing system eventloop and eventhandlers. More...;  ; class  TApplicationImp;  ABC describing GUI independent application implementation protocol. More...;  ; class  TAtt3D;  Use this attribute class when an object should have 3D capabilities. More...;  ; class  TAttAxis;  Manages histogram axis attributes. More...;  ; class  TAttBBox;  Helper for management of bounding-box information. More...;",MatchSource.WIKI,doc/master/group__Base.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Base.html
Modifiability,plugin,plugin,". ROOT: Base ROOT classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files |; Classes ; Base ROOT classesCore ROOT classes. ; The Base classes of ROOT. ; The base classes of the ROOT system provide the core of the system. They are available to all other classes. They range from a set of abstract interfaces (TVirtualXXXXX classes), to a wide range of basic utility classes providing basic services like strings, regular expression, timers, date/time, md5 checksumming, signal/slots event handling, plugin handler, run-config resource processor, etc. etc. . Files; file  RConversionRuleParser.cxx;  ; file  RDirectory.cxx;  ; file  RDirectory.hxx;  ; file  RDirectoryEntry.hxx;  ; file  RError.cxx;  ; file  RError.hxx;  ; file  RFile.cxx;  ; file  RFile.hxx;  ; file  RIndexIter.hxx;  ; file  RLogger.cxx;  ; file  RLogger.hxx;  ; file  RNotFn.hxx;  ; file  RRangeCast.hxx;  ; file  RSpan.hxx;  ; file  span.hxx;  ; file  StringUtils.hxx;  ; file  TClassEdit.cxx;  . Classes; class  ROOT::Experimental::RError;  Captures diagnostics related to a ROOT runtime error. More...;  ; class  ROOT::Experimental::RException;  Base class for all ROOT issued exceptions. More...;  ; class  ROOT::Experimental::RResult< T >;  The class is used as a return type for operations that can fail; wraps a value of type T or an RError. More...;  ; class  ROOT::Experimental::RResultBase;  Common handling of the error case for RResult<T> (T != void) and RResult<void> More...;  ; class  TApplication;  This class creates the ROOT Application Environment that interfaces to the windowing system eventloop and eventhandlers. More...;  ; class  TApplicationImp;  ABC describing GUI independent application implementation protocol. More...;  ; class  TAtt3D;  Use this attribute class when an object should have 3D capabilities. More...;  ; class  TAttAxis;  Manages histogram axis attributes. More...;  ; class  TAttBBox;  Helper for management of bounding-box information. More...;",MatchSource.WIKI,doc/master/group__Base.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Base.html
Performance,perform,performance,"herefore it is not recommended to use it in new long-term production code. But, depending on the context, using TTask might still be a valid solution. More...;  ; class  TTime;  Basic time type with millisecond precision. More...;  ; class  TTimer;  Handles synchronous and a-synchronous timer events. More...;  ; class  TTimeStamp;  The TTimeStamp encapsulates seconds and ns since EPOCH. More...;  ; class  TUri;  This class represents a RFC 3986 compatible URI. More...;  ; class  TUrl;  This class represents a WWW compatible URL. More...;  ; class  TUUID;  This class defines a UUID (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). More...;  ; class  TVersionCheck;  Used to check if the shared library or plugin is compatible with the current version of ROOT. More...;  ; class  TVirtualFFT;  TVirtualFFT is an interface class for Fast Fourier Transforms. More...;  ; class  TVirtualMapFile;  Abstract base class for TMapFile. More...;  ; class  TVirtualMonitoring;  Provides the interface for externel Monitoring. More...;  ; class  TVirtualMutex;  This class implements a mutex interface. More...;  ; class  TVirtualPad;  TVirtualPad is an abstract base class for the Pad and Canvas classes. More...;  ; class  TVirtualPadEditor;  Abstract base class used by ROOT graphics editor. More...;  ; class  TVirtualPadPainter;  To make it possible to use GL for 2D graphic in a TPad/TCanvas. More...;  ; class  TVirtualPerfStats;  Provides the interface for the PROOF internal performance measurement and event tracing. More...;  ; class  TVirtualPS;  TVirtualPS is an abstract interface to Postscript, PDF, SVG. More...;  ; class  TVirtualViewer3D;  Abstract 3D shapes viewer. More...;  ; class  TVirtualX;  Semi-Abstract base class defining a generic interface to the underlying, low level, native graphics backend (X11, Win32, MacOS, OpenGL...). More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Base.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Base.html
Security,checksum,checksumming,". ROOT: Base ROOT classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files |; Classes ; Base ROOT classesCore ROOT classes. ; The Base classes of ROOT. ; The base classes of the ROOT system provide the core of the system. They are available to all other classes. They range from a set of abstract interfaces (TVirtualXXXXX classes), to a wide range of basic utility classes providing basic services like strings, regular expression, timers, date/time, md5 checksumming, signal/slots event handling, plugin handler, run-config resource processor, etc. etc. . Files; file  RConversionRuleParser.cxx;  ; file  RDirectory.cxx;  ; file  RDirectory.hxx;  ; file  RDirectoryEntry.hxx;  ; file  RError.cxx;  ; file  RError.hxx;  ; file  RFile.cxx;  ; file  RFile.hxx;  ; file  RIndexIter.hxx;  ; file  RLogger.cxx;  ; file  RLogger.hxx;  ; file  RNotFn.hxx;  ; file  RRangeCast.hxx;  ; file  RSpan.hxx;  ; file  span.hxx;  ; file  StringUtils.hxx;  ; file  TClassEdit.cxx;  . Classes; class  ROOT::Experimental::RError;  Captures diagnostics related to a ROOT runtime error. More...;  ; class  ROOT::Experimental::RException;  Base class for all ROOT issued exceptions. More...;  ; class  ROOT::Experimental::RResult< T >;  The class is used as a return type for operations that can fail; wraps a value of type T or an RError. More...;  ; class  ROOT::Experimental::RResultBase;  Common handling of the error case for RResult<T> (T != void) and RResult<void> More...;  ; class  TApplication;  This class creates the ROOT Application Environment that interfaces to the windowing system eventloop and eventhandlers. More...;  ; class  TApplicationImp;  ABC describing GUI independent application implementation protocol. More...;  ; class  TAtt3D;  Use this attribute class when an object should have 3D capabilities. More...;  ; class  TAttAxis;  Manages histogram axis attributes. More...;  ; class  TAttBBox;  Helper for management of bounding-box information. More...;",MatchSource.WIKI,doc/master/group__Base.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Base.html
Testability,benchmark,benchmarking,".;  ; class  TApplication;  This class creates the ROOT Application Environment that interfaces to the windowing system eventloop and eventhandlers. More...;  ; class  TApplicationImp;  ABC describing GUI independent application implementation protocol. More...;  ; class  TAtt3D;  Use this attribute class when an object should have 3D capabilities. More...;  ; class  TAttAxis;  Manages histogram axis attributes. More...;  ; class  TAttBBox;  Helper for management of bounding-box information. More...;  ; class  TAttBBox2D;  Abstract base class for elements drawn in the editor. More...;  ; class  TAttFill;  Fill Area Attributes class. More...;  ; class  TAttLine;  Line Attributes class. More...;  ; class  TAttMarker;  Marker Attributes class. More...;  ; class  TAttPad;  Manages default Pad attributes. More...;  ; class  TAttText;  Text Attributes class. More...;  ; class  TBase64;  This code implements the Base64 encoding and decoding. More...;  ; class  TBenchmark;  This class is a ROOT utility to help benchmarking applications. More...;  ; class  TBrowser;  Using a TBrowser one can browse all ROOT objects. More...;  ; class  TBrowserImp;  ABC describing GUI independent browser implementation protocol. More...;  ; class  TBuffer;  Buffer base class used for serializing objects. More...;  ; class  TBuffer3D;  Generic 3D primitive description class. More...;  ; class  TCanvasImp;  ABC describing GUI independent main window (with menubar, scrollbars and a drawing area). More...;  ; class  TColor;  The color creation and management class. More...;  ; class  TColorGradient;  TColorGradient extends basic TColor. More...;  ; class  TVirtualPad::TContext;  small helper class to store/restore gPad context in TPad methods More...;  ; class  TDirectory::TContext;  TDirectory::TContext keeps track and restore the current directory. More...;  ; class  TContextMenu;  This class provides an interface to context sensitive popup menus. More...;  ; class  TContextMenuImp;  This class",MatchSource.WIKI,doc/master/group__Base.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Base.html
Integrability,interface,interface,c. More...;  ; class  TArrow;  Draw all kinds of Arrows. More...;  ; class  TAttImage;  TImage attributes. More...;  ; class  TAxisModLab;  TAxis helper class used to store the modified labels. More...;  ; class  TBox;  Create a Box. More...;  ; class  TCandle;  The candle plot painter class. More...;  ; class  TCrown;  To draw a Crown. More...;  ; class  TCurlyArc;  Implements curly or wavy arcs used to draw Feynman diagrams. More...;  ; class  TCurlyLine;  Implements curly or wavy polylines used to draw Feynman diagrams. More...;  ; class  TCutG;  Graphical cut class. More...;  ; class  TDiamond;  Draw a Diamond. More...;  ; class  TEllipse;  Draw Ellipses. More...;  ; class  TFrame;  Define a Frame. More...;  ; class  TGaxis;  The axis painter class. More...;  ; class  TGraphPolar;  To draw a polar graph. More...;  ; class  TGraphPolargram;  To draw polar axis. More...;  ; class  TGraphQQ;  This class allows to draw quantile-quantile plots. More...;  ; class  TImage;  An abstract interface to image processing library. More...;  ; class  TImagePalette;  A class to define a conversion from pixel values to pixel color. More...;  ; class  TLatex;  To draw Mathematical Formula. More...;  ; class  TLegend;  This class displays a legend box (TPaveText) containing several legend entries. More...;  ; class  TLegendEntry;  Storage class for one entry of a TLegend. More...;  ; class  TLine;  Use the TLine constructor to create a simple line. More...;  ; class  TLink;  Special TText object used to show hyperlinks. More...;  ; class  TMarker;  Manages Markers. More...;  ; class  TMathText;  To draw TeX Mathematical Formula. More...;  ; class  TPaletteEditor;  Edit the palette via a GUI. More...;  ; class  TPave;  A TBox with a bordersize and a shadow option. More...;  ; class  TPaveLabel;  A Pave (see TPave) with a text centered in the Pave. More...;  ; class  TPaveStats;  The histogram statistics painter class. More...;  ; class  TPavesText;  A PaveText (see TPaveText) with s,MatchSource.WIKI,doc/master/group__BasicGraphics.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__BasicGraphics.html
Usability,simpl,simple,"iagrams. More...;  ; class  TCurlyLine;  Implements curly or wavy polylines used to draw Feynman diagrams. More...;  ; class  TCutG;  Graphical cut class. More...;  ; class  TDiamond;  Draw a Diamond. More...;  ; class  TEllipse;  Draw Ellipses. More...;  ; class  TFrame;  Define a Frame. More...;  ; class  TGaxis;  The axis painter class. More...;  ; class  TGraphPolar;  To draw a polar graph. More...;  ; class  TGraphPolargram;  To draw polar axis. More...;  ; class  TGraphQQ;  This class allows to draw quantile-quantile plots. More...;  ; class  TImage;  An abstract interface to image processing library. More...;  ; class  TImagePalette;  A class to define a conversion from pixel values to pixel color. More...;  ; class  TLatex;  To draw Mathematical Formula. More...;  ; class  TLegend;  This class displays a legend box (TPaveText) containing several legend entries. More...;  ; class  TLegendEntry;  Storage class for one entry of a TLegend. More...;  ; class  TLine;  Use the TLine constructor to create a simple line. More...;  ; class  TLink;  Special TText object used to show hyperlinks. More...;  ; class  TMarker;  Manages Markers. More...;  ; class  TMathText;  To draw TeX Mathematical Formula. More...;  ; class  TPaletteEditor;  Edit the palette via a GUI. More...;  ; class  TPave;  A TBox with a bordersize and a shadow option. More...;  ; class  TPaveLabel;  A Pave (see TPave) with a text centered in the Pave. More...;  ; class  TPaveStats;  The histogram statistics painter class. More...;  ; class  TPavesText;  A PaveText (see TPaveText) with several stacked paves. More...;  ; class  TPaveText;  A Pave (see TPave) with text, lines or/and boxes inside. More...;  ; class  TPie;  Draw a Pie Chart,. More...;  ; class  TPieSlice;  A slice of a piechart, see the TPie class. More...;  ; class  TPoints;  2-D graphics point (world coordinates). More...;  ; class  TPolyLine;  Defined by an array on N points in a 2-D space. More...;  ; class  TText;  Base class for se",MatchSource.WIKI,doc/master/group__BasicGraphics.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__BasicGraphics.html
Energy Efficiency,efficient,efficient," Array of floats (32 bits per element). More...;  ; class  TArrayI;  Array of integers (32 bits per element). More...;  ; class  TArrayL;  Array of longs (32 or 64 bits per element). More...;  ; class  TArrayL64;  Array of long64s (64 bits per element). More...;  ; class  TArrayS;  Array of shorts (16 bits per element). More...;  ; class  TBits;  Container of bits. More...;  ; class  TBtree;  B-tree class. More...;  ; class  TClassTable;  This class registers for all classes their name, id and dictionary function in a hash table. More...;  ; class  TClonesArray;  An array of clone (identical) objects. More...;  ; class  TCollection;  Collection abstract base class. More...;  ; class  THashList;  THashList implements a hybrid collection class consisting of a hash table and a list to store TObject's. More...;  ; class  THashTable;  THashTable implements a hash table to store TObject's. More...;  ; class  TIterator;  Iterator abstract base class. More...;  ; class  TList;  A doubly linked list. More...;  ; class  TMap;  TMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval (therefore TMap does not conserve the order of the entries). More...;  ; class  TObjArray;  An array of TObjects. More...;  ; class  TObjectTable;  This class registers all instances of TObject and its derived classes in a hash table. More...;  ; class  TOrdCollection;  Ordered collection. More...;  ; class  TRefArray;  An array of references to TObjects. More...;  ; class  TRefTable;  A TRefTable maintains the association between a referenced object and the parent object supporting this referenced object. More...;  ; class  ROOT::TSeq< T >;  A pseudo container class which is a generator of indices. More...;  ; class  TSeqCollection;  Sequenceable collection abstract base class. More...;  ; class  TSortedList;  A sorted doubly linked list. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Containers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Containers.html
Modifiability,polymorphi,polymorphic,". ROOT: Containers. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; ContainersCore ROOT classes. ; The containers and generators the ROOT framework offers. ; Collections are a key feature of the ROOT system. Many, if not most, of the applications you write will use collections. If you have used polymorphic C++ collections before, some of this material will be review. However, much of this tutorial covers aspects of collections specific to the ROOT system. In this tutorial the following features will be demonstrated:. Using collections; How to create instances of collections; The difference between lists, ordered collections, hash-tables, maps, etc.; How to add and remove elements of a collection; How to search a collection for a specific element; How to access and modify collection elements; How to iterate over a collection; How to manage memory for collections and collection elements; How collection elements are tested for equality (IsEqual()); How collection elements are compared (Compare()) in case of sorted collections; How collection elements are hashed (Hash()) in hash tables . Classes; class  TArray;  Abstract array base class. More...;  ; class  TArrayC;  Array of chars or bytes (8 bits per element). More...;  ; class  TArrayD;  Array of doubles (64 bits per element). More...;  ; class  TArrayF;  Array of floats (32 bits per element). More...;  ; class  TArrayI;  Array of integers (32 bits per element). More...;  ; class  TArrayL;  Array of longs (32 or 64 bits per element). More...;  ; class  TArrayL64;  Array of long64s (64 bits per element). More...;  ; class  TArrayS;  Array of shorts (16 bits per element). More...;  ; class  TBits;  Container of bits. More...;  ; class  TBtree;  B-tree class. More...;  ; class  TClassTable;  This class registers for all classes their name, id and dictionary function in a hash table. More...;  ; class  TClonesArray;  An array of clone (identical) objects. More...;  ; class  TColl",MatchSource.WIKI,doc/master/group__Containers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Containers.html
Security,hash,hash-tables,". ROOT: Containers. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; ContainersCore ROOT classes. ; The containers and generators the ROOT framework offers. ; Collections are a key feature of the ROOT system. Many, if not most, of the applications you write will use collections. If you have used polymorphic C++ collections before, some of this material will be review. However, much of this tutorial covers aspects of collections specific to the ROOT system. In this tutorial the following features will be demonstrated:. Using collections; How to create instances of collections; The difference between lists, ordered collections, hash-tables, maps, etc.; How to add and remove elements of a collection; How to search a collection for a specific element; How to access and modify collection elements; How to iterate over a collection; How to manage memory for collections and collection elements; How collection elements are tested for equality (IsEqual()); How collection elements are compared (Compare()) in case of sorted collections; How collection elements are hashed (Hash()) in hash tables . Classes; class  TArray;  Abstract array base class. More...;  ; class  TArrayC;  Array of chars or bytes (8 bits per element). More...;  ; class  TArrayD;  Array of doubles (64 bits per element). More...;  ; class  TArrayF;  Array of floats (32 bits per element). More...;  ; class  TArrayI;  Array of integers (32 bits per element). More...;  ; class  TArrayL;  Array of longs (32 or 64 bits per element). More...;  ; class  TArrayL64;  Array of long64s (64 bits per element). More...;  ; class  TArrayS;  Array of shorts (16 bits per element). More...;  ; class  TBits;  Container of bits. More...;  ; class  TBtree;  B-tree class. More...;  ; class  TClassTable;  This class registers for all classes their name, id and dictionary function in a hash table. More...;  ; class  TClonesArray;  An array of clone (identical) objects. More...;  ; class  TColl",MatchSource.WIKI,doc/master/group__Containers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Containers.html
Testability,test,tested,". ROOT: Containers. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; ContainersCore ROOT classes. ; The containers and generators the ROOT framework offers. ; Collections are a key feature of the ROOT system. Many, if not most, of the applications you write will use collections. If you have used polymorphic C++ collections before, some of this material will be review. However, much of this tutorial covers aspects of collections specific to the ROOT system. In this tutorial the following features will be demonstrated:. Using collections; How to create instances of collections; The difference between lists, ordered collections, hash-tables, maps, etc.; How to add and remove elements of a collection; How to search a collection for a specific element; How to access and modify collection elements; How to iterate over a collection; How to manage memory for collections and collection elements; How collection elements are tested for equality (IsEqual()); How collection elements are compared (Compare()) in case of sorted collections; How collection elements are hashed (Hash()) in hash tables . Classes; class  TArray;  Abstract array base class. More...;  ; class  TArrayC;  Array of chars or bytes (8 bits per element). More...;  ; class  TArrayD;  Array of doubles (64 bits per element). More...;  ; class  TArrayF;  Array of floats (32 bits per element). More...;  ; class  TArrayI;  Array of integers (32 bits per element). More...;  ; class  TArrayL;  Array of longs (32 or 64 bits per element). More...;  ; class  TArrayL64;  Array of long64s (64 bits per element). More...;  ; class  TArrayS;  Array of shorts (16 bits per element). More...;  ; class  TBits;  Container of bits. More...;  ; class  TBtree;  B-tree class. More...;  ; class  TClassTable;  This class registers for all classes their name, id and dictionary function in a hash table. More...;  ; class  TClonesArray;  An array of clone (identical) objects. More...;  ; class  TColl",MatchSource.WIKI,doc/master/group__Containers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Containers.html
Energy Efficiency,adapt,adapter,". ROOT: Function Classes and Interfaces. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Classes ; Function Classes and InterfacesMath » MathCore. ; Interfaces (abstract classes) and Base classes used in MathCore and MathMore numerical methods for describing function classes. ; They define function and gradient evaluation and as well the functionality for dealing with parameters in the case of parametric functions which are used for fitting and data modeling. Included are also adapter classes, such as functors, to wrap generic callable C++ objects in the desired interface. . Modules;  Generic Function Evaluation Interfaces;  Interface classes for evaluation of function object classes in one or multi-dimensions. ;  ;  Parametric Function Evaluation Interfaces.;  Interfaces classes for evaluation of parametric functions. ;  . Classes; class  ROOT::Math::WrappedMultiTF1Templ< T >;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  ROOT::Math::WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__CppFunctions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__CppFunctions.html
Integrability,adapter,adapter,". ROOT: Function Classes and Interfaces. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Classes ; Function Classes and InterfacesMath » MathCore. ; Interfaces (abstract classes) and Base classes used in MathCore and MathMore numerical methods for describing function classes. ; They define function and gradient evaluation and as well the functionality for dealing with parameters in the case of parametric functions which are used for fitting and data modeling. Included are also adapter classes, such as functors, to wrap generic callable C++ objects in the desired interface. . Modules;  Generic Function Evaluation Interfaces;  Interface classes for evaluation of function object classes in one or multi-dimensions. ;  ;  Parametric Function Evaluation Interfaces.;  Interfaces classes for evaluation of parametric functions. ;  . Classes; class  ROOT::Math::WrappedMultiTF1Templ< T >;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  ROOT::Math::WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__CppFunctions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__CppFunctions.html
Modifiability,adapt,adapter,". ROOT: Function Classes and Interfaces. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Classes ; Function Classes and InterfacesMath » MathCore. ; Interfaces (abstract classes) and Base classes used in MathCore and MathMore numerical methods for describing function classes. ; They define function and gradient evaluation and as well the functionality for dealing with parameters in the case of parametric functions which are used for fitting and data modeling. Included are also adapter classes, such as functors, to wrap generic callable C++ objects in the desired interface. . Modules;  Generic Function Evaluation Interfaces;  Interface classes for evaluation of function object classes in one or multi-dimensions. ;  ;  Parametric Function Evaluation Interfaces.;  Interfaces classes for evaluation of parametric functions. ;  . Classes; class  ROOT::Math::WrappedMultiTF1Templ< T >;  Class to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm. More...;  ; class  ROOT::Math::WrappedTF1;  Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__CppFunctions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__CppFunctions.html
Integrability,interface,interface,". ROOT: Dataframe. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files |; Classes ; Dataframe. ; ROOT's RDataFrame allows to analyse data stored in TTrees with a high level interface. . Files; file  ActionHelpers.hxx;  ; file  RMergeableValue.hxx;  . Classes; class  GraphCreatorHelper;  Helper class that provides the operation graph nodes. More...;  ; class  ROOT::Internal::RDF::GraphDrawing::GraphNode;  Class used to create the operation graph to be printed in the dot representation. More...;  ; class  ROOT::Internal::RDF::RAction< Helper, PrevNode, ColumnTypes_t >;  A RDataFrame node that produces a result. More...;  ; class  ROOT::RDF::RArrowDS;  RDataFrame data source class to interface with Apache Arrow. More...;  ; class  RColumnReaderBase;  Pure virtual base class for all column reader types. More...;  ; class  ROOT::Internal::RDF::RColumnRegister;  A binder for user-defined columns, variations and aliases. More...;  ; class  ROOT::RDF::RCsvDS;  RDataFrame data source class for reading CSV files. More...;  ; class  ROOT::RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  ROOT::RDF::Experimental::RDatasetSpec;  The dataset specification for RDataFrame. More...;  ; class  ROOT::RDF::RDataSource;  RDataSource defines an API that RDataFrame can use to read arbitrary data formats. More...;  ; class  ROOT::RDF::RDFDescription;  A DFDescription contains useful information about a given RDataFrame computation graph. More...;  ; class  ROOT::RDF::RDisplay;  This class is the textual representation of the content of a columnar dataset. More...;  ; class  ROOT::Internal::RDF::RDisplayElement;  Helper class to let Display print compact tabular representations of the events. More...;  ; class  ROOT::RDF::RInterface< Proxied, DataSource >;  The public interface to the RDataFrame federation of classes. More...;  ; class ",MatchSource.WIKI,doc/master/group__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__dataframe.html
Availability,error,error,". ROOT: Fit Data Classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Fit Data ClassesMath » MathCore » Fitting and Parameter Estimation. ; Classes for describing the input data for fitting. . Classes; class  ROOT::Fit::BinData;  Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: More...;  ; struct  ROOT::Fit::DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  ROOT::Fit::DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  ROOT::Fit::FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  ROOT::Fit::SparseData;  SparseData class representing the data of a THNSparse histogram The data needs to be converted to a BinData class before fitting using the GetBinData functions. More...;  ; class  ROOT::Fit::UnBinData;  Class describing the un-binned data sets (just x coordinates values) of any dimensions. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__FitData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__FitData.html
Usability,simpl,simple,". ROOT: Fit Data Classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Fit Data ClassesMath » MathCore » Fitting and Parameter Estimation. ; Classes for describing the input data for fitting. . Classes; class  ROOT::Fit::BinData;  Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: More...;  ; struct  ROOT::Fit::DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  ROOT::Fit::DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  ROOT::Fit::FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  ROOT::Fit::SparseData;  SparseData class representing the data of a THNSparse histogram The data needs to be converted to a BinData class before fitting using the GetBinData functions. More...;  ; class  ROOT::Fit::UnBinData;  Class describing the un-binned data sets (just x coordinates values) of any dimensions. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__FitData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__FitData.html
Availability,error,error,". ROOT: User Fitting classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes ; User Fitting classesMath » MathCore » Fitting and Parameter Estimation. ; Main Classes used for fitting a given data set. . Namespaces; namespace  ROOT::Fit::FitUtil;  namespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ;  . Classes; class  ROOT::Fit::FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  ROOT::Fit::FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  ROOT::Fit::Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  ROOT::Fit::ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__FitMain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__FitMain.html
Deployability,configurat,configuration,". ROOT: User Fitting classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes ; User Fitting classesMath » MathCore » Fitting and Parameter Estimation. ; Main Classes used for fitting a given data set. . Namespaces; namespace  ROOT::Fit::FitUtil;  namespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ;  . Classes; class  ROOT::Fit::FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  ROOT::Fit::FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  ROOT::Fit::Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  ROOT::Fit::ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__FitMain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__FitMain.html
Modifiability,config,configuration,". ROOT: User Fitting classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes ; User Fitting classesMath » MathCore » Fitting and Parameter Estimation. ; Main Classes used for fitting a given data set. . Namespaces; namespace  ROOT::Fit::FitUtil;  namespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ;  . Classes; class  ROOT::Fit::FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  ROOT::Fit::FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  ROOT::Fit::Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  ROOT::Fit::ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__FitMain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__FitMain.html
Performance,perform,performing,". ROOT: User Fitting classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes ; User Fitting classesMath » MathCore » Fitting and Parameter Estimation. ; Main Classes used for fitting a given data set. . Namespaces; namespace  ROOT::Fit::FitUtil;  namespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ;  . Classes; class  ROOT::Fit::FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  ROOT::Fit::FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  ROOT::Fit::Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  ROOT::Fit::ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__FitMain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__FitMain.html
Integrability,interface,interface,". ROOT: Fit Method Classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Fit Method ClassesMath » MathCore » Fitting and Parameter Estimation. ; Classes describing Fit Method functions. . Classes; class  ROOT::Math::BasicFitMethodFunction< FunctionType >;  FitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contribution to the function which is required by some algorithm (like Fumili) More...;  ; class  ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >;  Chi2FCN class for binned fits using the least square methods. More...;  ; class  ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >;  LogLikelihoodFCN class for likelihood fits. More...;  ; class  ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >;  class evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__FitMethodFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__FitMethodFunc.html
Testability,log,log,". ROOT: Fit Method Classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Fit Method ClassesMath » MathCore » Fitting and Parameter Estimation. ; Classes describing Fit Method functions. . Classes; class  ROOT::Math::BasicFitMethodFunction< FunctionType >;  FitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contribution to the function which is required by some algorithm (like Fumili) More...;  ; class  ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >;  Chi2FCN class for binned fits using the least square methods. More...;  ; class  ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >;  LogLikelihoodFCN class for likelihood fits. More...;  ; class  ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >;  class evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__FitMethodFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__FitMethodFunc.html
Integrability,wrap,wrapping,. ROOT: Function classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Function classes.Histogram Library. . Classes; class  TF1;  1-Dim function class More...;  ; class  TF12;  A projection of a TF2 along X or Y. More...;  ; class  TF1Convolution;  Class wrapping convolution of two functions. More...;  ; class  TF1NormSum;  Class adding two functions: c1*f1+c2*f2. More...;  ; class  TF2;  A 2-Dim function with parameters. More...;  ; class  TF3;  A 3-Dim function with parameters. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__Functions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Functions.html
Safety,detect,detector,. ROOT: Basic 3D graphics. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Basic 3D graphics.Graphics » 3D Graphics. ; The basic 3D classes. . Shapes.; TPolyMarker3D example. . Classes; class  TAxis3D;  The 3D axis painter class. More...;  ; class  TBRIK;  A box with faces perpendicular to the axes. More...;  ; class  TCONE;  A conical tube. More...;  ; class  TCONS;  A segment of a conical tube. More...;  ; class  TCTUB;  A cut tube with 11 parameters. More...;  ; class  TELTU;  A cylinder with an elliptical section. More...;  ; class  TGeometry;  TGeometry description. More...;  ; class  TGTRA;  A general twisted trapezoid. More...;  ; class  THelix;  THelix has two different constructors. More...;  ; class  THYPE;  An hyperboloid (not implemented) More...;  ; class  TMarker3DBox;  A special 3-D marker designed for event display. More...;  ; class  TMaterial;  Manages a detector material. More...;  ; class  TMixture;  Manages a detector mixture. More...;  ; class  TNode;  TNode description. More...;  ; class  TNodeDiv;  Description of parameters to divide a 3-D geometry object. More...;  ; class  TPARA;  A parallelepiped. More...;  ; class  TPCON;  A polycone. More...;  ; class  TPGON;  A polygon. More...;  ; class  TPoints3DABC;  Abstract class to define Arrays of 3D points. More...;  ; class  TPointSet3D;  TPolyMarker3D using TPointSet3DGL for direct OpenGL rendering. More...;  ; class  TPolyLine3D;  A 3-dimensional polyline. More...;  ; class  TPolyMarker3D;  A 3D polymarker. More...;  ; class  TRotMatrix;  Manages a detector rotation matrix. More...;  ; class  TShape;  This is the base class for all geometry shapes. More...;  ; class  TSPHE;  A Sphere. More...;  ; class  TTRAP;  A general trapezoid. More...;  ; class  TTRD1;  A trapezoid with the x dimension varying along z. More...;  ; class  TTRD2;  A trapezoid with both x and y dimensions varying along z. More...;  ; class  TTUBE;  A tube. More...;  ; class  TTUBS; ,MatchSource.WIKI,doc/master/group__g3d.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__g3d.html
Availability,avail,available,"sses exist to describe the various coordinates systems:; 2D coordinate system classes:; ROOT::Math::Cartesian2D, based on (x,y) ;; ROOT::Math::Polar2D, based on (r, phi) ;. 3D coordinate system classes:; ROOT::Math::Cartesian3D, based on (x,y,z);; ROOT::Math::Polar3D, based on (r, theta, phi);; ROOT::Math::Cylindrical3D, based on (rho, z, phi); ROOT::Math::CylindricalEta3D, based on (rho, eta, phi);. 4D coordinate system classes:; ROOT::Math::PxPyPzE4D, based on based on (px,py,pz,E);; ROOT::Math::PxPyPzM4D, based on based on (px,py,pz,M);; ROOT::Math::PtEtaPhiE4D, based on based on (pt,eta,phi,E);; ROOT::Math::PtEtaPhiM4D, based on based on (pt,eta,phi,M);. The angle theta is defined between [0, \(\pi\)] and phi between [- \(\pi\), \(\pi\)]. The angles are expressed in radians. The eta component is known as pseudo-rapidity.; Users can define the Vectors according to the coordinate type which is most efficient for their use. Transformations between the various coordinate systems are available through copy constructors or the assignment operator =. The coordinate system classes are templated on the scalar type for maximum flexibility, and to minimize memory usage for some use cases. Coordinate System Tag; The 2D and 3D point and vector classes can be associated to a tag defining the coordinate system. This can be used to distinguish between vectors of different coordinate systems like global or local vectors. The coordinate system tag is a template parameter of the ROOT::Math::DisplacementVector3D (and ROOT::Math::DisplacementVector2D) and ROOT::Math::PositionVector3D (and ROOT::Math::PositionVector2D) classes. A default tag, ROOT::Math::DefaultCoordinateSystemTag, exists for users who don't need this functionality. Concrete Vector typedefs; To avoid exposing templated parameters to the users, typedefs are defined for all types of vectors based an doubles and floats. The table below lists the double versions; the float counterpart ends on an extra F, such as ROOT::Mat",MatchSource.WIKI,doc/master/group__GenVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__GenVector.html
Energy Efficiency,efficient,efficient,"ses are based on a generic type of coordinate system, expressed as a template parameter of the class. Various classes exist to describe the various coordinates systems:; 2D coordinate system classes:; ROOT::Math::Cartesian2D, based on (x,y) ;; ROOT::Math::Polar2D, based on (r, phi) ;. 3D coordinate system classes:; ROOT::Math::Cartesian3D, based on (x,y,z);; ROOT::Math::Polar3D, based on (r, theta, phi);; ROOT::Math::Cylindrical3D, based on (rho, z, phi); ROOT::Math::CylindricalEta3D, based on (rho, eta, phi);. 4D coordinate system classes:; ROOT::Math::PxPyPzE4D, based on based on (px,py,pz,E);; ROOT::Math::PxPyPzM4D, based on based on (px,py,pz,M);; ROOT::Math::PtEtaPhiE4D, based on based on (pt,eta,phi,E);; ROOT::Math::PtEtaPhiM4D, based on based on (pt,eta,phi,M);. The angle theta is defined between [0, \(\pi\)] and phi between [- \(\pi\), \(\pi\)]. The angles are expressed in radians. The eta component is known as pseudo-rapidity.; Users can define the Vectors according to the coordinate type which is most efficient for their use. Transformations between the various coordinate systems are available through copy constructors or the assignment operator =. The coordinate system classes are templated on the scalar type for maximum flexibility, and to minimize memory usage for some use cases. Coordinate System Tag; The 2D and 3D point and vector classes can be associated to a tag defining the coordinate system. This can be used to distinguish between vectors of different coordinate systems like global or local vectors. The coordinate system tag is a template parameter of the ROOT::Math::DisplacementVector3D (and ROOT::Math::DisplacementVector2D) and ROOT::Math::PositionVector3D (and ROOT::Math::PositionVector2D) classes. A default tag, ROOT::Math::DefaultCoordinateSystemTag, exists for users who don't need this functionality. Concrete Vector typedefs; To avoid exposing templated parameters to the users, typedefs are defined for all types of vectors based an doubles ",MatchSource.WIKI,doc/master/group__GenVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__GenVector.html
Safety,avoid,avoid,"seudo-rapidity.; Users can define the Vectors according to the coordinate type which is most efficient for their use. Transformations between the various coordinate systems are available through copy constructors or the assignment operator =. The coordinate system classes are templated on the scalar type for maximum flexibility, and to minimize memory usage for some use cases. Coordinate System Tag; The 2D and 3D point and vector classes can be associated to a tag defining the coordinate system. This can be used to distinguish between vectors of different coordinate systems like global or local vectors. The coordinate system tag is a template parameter of the ROOT::Math::DisplacementVector3D (and ROOT::Math::DisplacementVector2D) and ROOT::Math::PositionVector3D (and ROOT::Math::PositionVector2D) classes. A default tag, ROOT::Math::DefaultCoordinateSystemTag, exists for users who don't need this functionality. Concrete Vector typedefs; To avoid exposing templated parameters to the users, typedefs are defined for all types of vectors based an doubles and floats. The table below lists the double versions; the float counterpart ends on an extra F, such as ROOT::Math::XYPointF instead of ROOT::Math::XYPoint. Point2D; Type definitions for points in two dimensions, based on ROOT::Math::PositionVector2D, are defined by Math/Point2D.h:. ROOT::Math::XYPoint vector based on x,y coordinates (cartesian); ROOT::Math::Polar2DPoint vector based on r,phi coordinates (polar). Vector2D; Type definitions for vectors in two dimensions, based on ROOT::Math::DisplacementVector2D, are defined by Math/Vector2D.h:. ROOT::Math::XYVector vector based on x,y coordinates (cartesian); ROOT::Math::Polar2DVector vector based on r,phi coordinates (polar). Point3D; Type definitions for points in three dimensions, based on ROOT::Math::PositionVector3D, are defined by Math/Point3D.h:. ROOT::Math::XYZPoint point based on x,y,z coordinates (cartesian); ROOT::Math::Polar3DPoint point based on r,theta,phi",MatchSource.WIKI,doc/master/group__GenVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__GenVector.html
Security,access,accessors," Lorentz vectors in four dimensions, based on ROOT::Math::LorentzVector, are defined by Math/Vector4D.h:. ROOT::Math::XYZTVector vector based on x,y,z,t coordinates (cartesian); ROOT::Math::PtEtaPhiEVector vector based on pt (rho),eta,phi and E (t) coordinates; ROOT::Math::PtEtaPhiMVector vector based on pt (rho),eta,phi and M (t) coordinates; ROOT::Math::PxPyPzMVector vector based on px,py,pz and M (mass) coordinates; ROOT::Math::PxPyPzEVector vector based on px,py,pz and E (energy) coordinates. The metric used for any such LorentzVector is (-,-,-,+). Operations. Constructors and Assignment; A vector can be constructed from its coordinate representation:; ROOT::Math::PtEtaPhiMVector v1(10. /*pt*/, 0.1 /*eta*/, 0.24 /*phi*/, 5 /*M*/);; ROOT::Math::LorentzVectorClass describing a generic LorentzVector in the 4D space-time, using the specified coordinate system ...Definition LorentzVector.h:59; v1@ v1Definition rootcling_impl.cxx:3701; In addition, the vector classes can be constructed from any object that implements the accessors x(), y() and z(). This can be a vector using a different coordinate system, or even an object from a different package as long as it implements the required signatures. One such vector type is CLHEP's Hep3Vector:; XYZVector v1(1,2,3);; RhoEtaPhiVector r2(v1);; CLHEP::Hep3Vector q(1,2,3);; XYZVector v3(q); qfloat * qDefinition THbookFile.cxx:89; v3@ v3Definition rootcling_impl.cxx:3703. Arithmetic Operations; The following operations are possible between vector classes, even of different coordinate system types:; v1 += v2;; v1 -= v2;; v1 = - v2;; v1 *= a;; v1 /= a;; v2 = a * v1;; v2 = v1 / a;; v2 = v1 * a;; v3 = v1 + v2;; v3 = v1 - v2;; a#define a(i)Definition RSha256.hxx:99; v2@ v2Definition rootcling_impl.cxx:3702; Note that the multiplication between two vectors using the operator * is not supported because it is ambiguous. Other Methods; The vector classes support methods for:. computation of the dot product via Dot(),; computation of the",MatchSource.WIKI,doc/master/group__GenVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__GenVector.html
Usability,simpl,simple,"ifferent package as long as it implements the required signatures. One such vector type is CLHEP's Hep3Vector:; XYZVector v1(1,2,3);; RhoEtaPhiVector r2(v1);; CLHEP::Hep3Vector q(1,2,3);; XYZVector v3(q); qfloat * qDefinition THbookFile.cxx:89; v3@ v3Definition rootcling_impl.cxx:3703. Arithmetic Operations; The following operations are possible between vector classes, even of different coordinate system types:; v1 += v2;; v1 -= v2;; v1 = - v2;; v1 *= a;; v1 /= a;; v2 = a * v1;; v2 = v1 / a;; v2 = v1 * a;; v3 = v1 + v2;; v3 = v1 - v2;; a#define a(i)Definition RSha256.hxx:99; v2@ v2Definition rootcling_impl.cxx:3702; Note that the multiplication between two vectors using the operator * is not supported because it is ambiguous. Other Methods; The vector classes support methods for:. computation of the dot product via Dot(),; computation of the cross product via Cross(),; construction of a unit vector via Unit(). Transformations; The transformations are modeled using simple (non-template) classes, using double as the scalar type to avoid too large numerical errors. The transformations are grouped in Rotations (in 3 dimensions), Lorentz transformations. Each group has several members which may model physically equivalent transformations but with different internal representations. Transformation classes can operate on all type of vectors using the operator() or the operator * and the transformations can also be combined via the operator *. In more detail the transformations available are:. 3D Rotations. ROOT::Math::Rotation3D, rotation described by a 3x3 matrix of doubles; ROOT::Math::EulerAngles rotation described by the three Euler angles (phi, theta and psi) following the GoldStein definition.; ROOT::Math::RotationZYX rotation described by three angles defining a rotation first along the Z axis, then along the rotated Y' axis and then along the rotated X'' axis.; ROOT::Math::AxisAngle, rotation described by a vector (axis) and an angle; ROOT::Math::Quaternion, rotatio",MatchSource.WIKI,doc/master/group__GenVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__GenVector.html
Availability,avail,available,"r the creation of a hierarchical link between two volumes. As it will be described further on in this document, there are few other methods performing similar actions, but let us keep things simple for the time being. In addition, notice that there are some visualization-related calls in the example followed by a final TGeoVolume::Draw() call for the top volume. These are explained in details in the section ""Visualization Settings and Attributes"". At this point, you will probably like to see how this geometry looks like. You just need to run the example and you will get the following picture that you can rotate using the mouse; or you can zoom / move it around (see what the Help menu of the GL window displays).; % root rootgeom.C; rootgeomTGeoNode * rootgeom()Definition eveGeoBrowser.C:47. Now let us browse the hierarchy that was just created. Start a browser and double-click on the item simple1 representing the gGeoManager object. Note that right click opens the context menu of the manager class where several global methods are available.; root[] new TBrowser;; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37. The folders Materials, Media and Local transformations are in fact the containers where the geometry manager stores the corresponding objects. The Illegal overlaps folder is empty but can be filled after performing a geometry validity check (see section: ""Checking the; Geometry""). If tracking is performed using TGeo, the folder Tracks might contain user-defined tracks that can be visualized/animated in the geometry context (see section: ""Creating and; Visualizing Tracks""). Since for the time being we are interested more in the geometrical hierarchy, we will focus on the last two displayed items TOPand TOP_1. These are the top volume and the corresponding top node in the hierarchy.; Double clicking on the TOP volume will unfold all different volumes contained by the top volume. In the right panel, we will see all the volumes co",MatchSource.WIKI,doc/master/group__Geometry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Geometry.html
Deployability,A/B,A/B,"om the fact that any container is directly used by navigation algorithms to optimize tracking. These must geometrically contain their belongings (positioned volumes) so that these do not extrude its shape boundaries. Not respecting this rule generally leads to unpredictable results. Therefore A and B together must fit into C that has to fit also into D, E, and F. This is not always straightforward to accomplish, especially when instead of A and B we have many more volumes.; In order to avoid these problems, one can use for the difficult cases the class TGeoVolumeAssembly, representing an assembly of volumes. This behaves like a normal container volume supporting other volumes positioned inside, but it has neither shape nor medium. It cannot be used directly as a piece of the geometry, but just as a temporary structure helping temporary assembling and positioning volumes.; If we define now C as an assembly containing A and B, positioning the assembly into D,E and F will actually position only A and Bdirectly into these volumes, taking into account their combined transformations A/B to C and C to D/E/F. This looks much nicer, is it? In fact, it is and it is not. Of course, we managed to get rid of the ""unnecessary"" volume C in our geometry, but we end-up with a more flat structure for D,E and F (more daughters inside). This can get much worse when extensively used, as in the case: assemblies of assemblies.; For deciding what to choose between using virtual containers or assemblies for a specific case, one can use for both cases, after the geometry was closed:; gGeoManager->SetTopVolume(ptr_D);; gGeoManager->Test();; gGeoManager->RestoreMasterVolume();; TGeoManager::RestoreMasterVolumevoid RestoreMasterVolume()Restore the master volume of the geometry.Definition TGeoManager.cxx:3118; TGeoManager::Testvoid Test(Int_t npoints=1000000, Option_t *option="""")Check time of finding ""Where am I"" for n points.Definition TGeoManager.cxx:1942; The ptr_D is a pointer to volume D con",MatchSource.WIKI,doc/master/group__Geometry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Geometry.html
Energy Efficiency,reduce,reduce,".; // This prototype allows (npar = 0) to define volumes with shape; // defined only at positioning time (volumes defined in this way; // need to be positioned using TGeoManager::Node() method); TGeoManager::VolumeTGeoVolume * Volume(const char *name, const char *shape, Int_t nmed, Float_t *upar, Int_t npar=0)Create a volume in GEANT3 style.Definition TGeoManager.cxx:1388; TGeoManager::MakeTubsTGeoVolume * MakeTubs(const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2)Make in one step a volume pointing to a tube segment shape with given medium.Definition TGeoManager.cxx:3213; Positioned Volumes (Nodes); Geometrical modeling is a difficult task when the number of different geometrical objects is 106-108. This is more or less the case for detector geometries of complex experiments, where a ‘flat' CSG model description cannot scale with the current CPU performances. This is the reason why models like GEANT [1] introduced an additional dimension (depth) in order to reduce the complexity of the problem. This concept is also preserved by the ROOT modeller and introduces a pure geometrical constraint between objects (volumes in our case) - containment. This means in fact that any positioned volume has to be contained by another. Now what means contained and positioned?. We will say that a volume contains a point if this is inside the shape associated to the volume. For instance, a volume having a box shape will contain all points P=(X,Y,Z) verifying the conditions: Abs(Pi)dXi. The points on the shape boundaries are considered as inside the volume. The volume contains a daughter if it contains all the points contained by the daughter.; The definition of containment works of course only with points defined in the local coordinate system of the considered volume. Positioning a volume inside another have to introduce a geometrical transformation between the two. If M defines this transformation, any point in the daughter ",MatchSource.WIKI,doc/master/group__Geometry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Geometry.html
Integrability,interface,interface,"ructure).; On the other hand, any volume is a small world by itself - what we need to do is to take it out and to ignore all the rest since it is a self-contained object. In fact, the modeller can act like this, considering a given volume as temporary MARS, but we will describe this feature later on. Let us focus on the biggest pack - it is mandatory to define one. Consider the simplest geometry that is made of a single box. Here is an example on how to build it:. Example 1: Creating the World; We first need to load the geometry library. This is not needed if one does ""make map"" in root folder.; root[] gSystem->Load(""libGeom"");; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; Second, we have to create an instance of the geometry manager class. This takes care of all the modeller components, performing several tasks to insure geometry validity and containing the user interface for building and interacting with the geometry. After its creation, the geometry manager class can be accessed with the global gGeoManager:; root[] new TGeoManager(""world"", ""the simplest geometry"");; TGeoManagerThe manager class for any TGeo geometry.Definition TGeoManager.h:44; We want to create a single volume in our geometry, but since any volume needs to have an associated medium, we will create a dummy one. You can safely ignore the following lines for the time being, since materials and media will be explained in detail later on.; root[] TGeoMaterial *mat = new TGeoMaterial(""Vacuum"",0,0,0);; root[] TGeoMedium *med = new TGeoMedium(""Vacuum"",1,mat);; TGeoMaterialBase class describing materials.Definition TGeoMaterial.h:34; TGeoMediumMedia are used to store properties related to tracking and which are useful only when using geometry ...Definition TGeoMedium.h:23; We can finally make our volume having a box shape. Note that the world volume",MatchSource.WIKI,doc/master/group__Geometry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Geometry.html
Modifiability,inherit,inherit,"represent a volume positioned inside another.They store links to both volumes and to the TGeoM...Definition TGeoNode.h:39; TGeoShapeBase abstract class for all shapes.Definition TGeoShape.h:25; The last method allows replacing an existing daughter of a volume with another one. Providing only the node to be replaced will just create a new volume for the node but having exactly the same parameters as the old one. This helps in case of divisions for decoupling a node from the logical hierarchy so getting new content/properties. For non-divided volumes, one can change the shape and/or the position of the daughter.; Virtual Containers and Assemblies of Volumes; Virtual containers are volumes that do not represent real objects, but they are needed for grouping and positioning together other volumes. Such grouping helps not only geometry creation, but also optimizes tracking performance; therefore, it is highly recommended. Virtual volumes need to inherit material/medium properties from the volume they are placed into in order to be ""invisible"" at tracking time.; Let us suppose that we need to group together two volumes A and B into a structure and position this into several other volumes D,E, and F. What we need to do is to create a virtual container volume C holding A and B, then position C in the other volumes.; Note that C is a volume having a determined medium. Since it is not a real volume, we need to manually set its medium the same as that of D,E or F in order to make it ""invisible"" (same physics properties). In other words, the limitation in proceeding this way is that D,E, and F must point to the same medium. If this was not the case, we would have to define different virtual volumes for each placement: C, C' and C"", having the same shape but different media matching the corresponding containers. This might not happen so often, but when it does, it forces the creation of several extra virtual volumes. Other limitation comes from the fact that any container is dire",MatchSource.WIKI,doc/master/group__Geometry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Geometry.html
Performance,optimiz,optimize,". ROOT: The Geometry Package. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; The Geometry Package. ; The ROOT geometry package is a tool for building, browsing, navigating and visualizing detector geometries. The code works standalone with respect to any tracking Monte-Carlo engine; therefore, it does not contain any constraints related to physics. However, the navigation features provided by the package are designed to optimize particle transport through complex geometries, working in correlation with simulation packages such as GEANT3, GEANT4 and FLUKA. Quick Start: Creating the world; Example 1: Creating the World; Example 2: A Geometrical Hierarchy Look and Feel. Selecting the System of Units in ROOT; Geometry Creation; The Volume Hierarchy; Creating and Positioning Volumes; Making Volumes; Example of Volume Creation; Positioned Volumes (Nodes); Virtual Containers and Assemblies of Volumes; Examples of Volume Positioning; Overlapping Volumes; Replicating Volumes; Volume Families; Dividing Volumes; Volume Assemblies. Geometrical Transformations; Matrix Creation Example; Rule for Creation of Transformations; Available Geometrical Transformations. Ownership of Geometry Objects. Navigation and Tracking; TGeoNavigator Class; Initializing the Starting Point; Initializing the Direction; Initializing the State; Checking the Current State; Saving and Restoring the Current State; Navigation Queries; Finding If Current State Is Changed For a New Point; Finding the Distance to the Next Boundary; Computing the Safe Radius; Making a Step; The Normal Vector to the Next Crossed Surface at Crossing Point. Creating and Visualizing Tracks. Checking the Geometry; The Overlap Checker; Graphical Checking Methods. The Drawing Package; Drawing Volumes and Hierarchies of Volumes; Visualization Settings and Attributes; Colors and Line Styles; Visibility Settings. Ray Tracing; Clipping Ray-traced Images. Representing Misalignments of the Ideal Ge",MatchSource.WIKI,doc/master/group__Geometry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Geometry.html
Safety,detect,detector,". ROOT: The Geometry Package. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; The Geometry Package. ; The ROOT geometry package is a tool for building, browsing, navigating and visualizing detector geometries. The code works standalone with respect to any tracking Monte-Carlo engine; therefore, it does not contain any constraints related to physics. However, the navigation features provided by the package are designed to optimize particle transport through complex geometries, working in correlation with simulation packages such as GEANT3, GEANT4 and FLUKA. Quick Start: Creating the world; Example 1: Creating the World; Example 2: A Geometrical Hierarchy Look and Feel. Selecting the System of Units in ROOT; Geometry Creation; The Volume Hierarchy; Creating and Positioning Volumes; Making Volumes; Example of Volume Creation; Positioned Volumes (Nodes); Virtual Containers and Assemblies of Volumes; Examples of Volume Positioning; Overlapping Volumes; Replicating Volumes; Volume Families; Dividing Volumes; Volume Assemblies. Geometrical Transformations; Matrix Creation Example; Rule for Creation of Transformations; Available Geometrical Transformations. Ownership of Geometry Objects. Navigation and Tracking; TGeoNavigator Class; Initializing the Starting Point; Initializing the Direction; Initializing the State; Checking the Current State; Saving and Restoring the Current State; Navigation Queries; Finding If Current State Is Changed For a New Point; Finding the Distance to the Next Boundary; Computing the Safe Radius; Making a Step; The Normal Vector to the Next Crossed Surface at Crossing Point. Creating and Visualizing Tracks. Checking the Geometry; The Overlap Checker; Graphical Checking Methods. The Drawing Package; Drawing Volumes and Hierarchies of Volumes; Visualization Settings and Attributes; Colors and Line Styles; Visibility Settings. Ray Tracing; Clipping Ray-traced Images. Representing Misalignments of the Ideal Ge",MatchSource.WIKI,doc/master/group__Geometry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Geometry.html
Security,access,accessed,"an act like this, considering a given volume as temporary MARS, but we will describe this feature later on. Let us focus on the biggest pack - it is mandatory to define one. Consider the simplest geometry that is made of a single box. Here is an example on how to build it:. Example 1: Creating the World; We first need to load the geometry library. This is not needed if one does ""make map"" in root folder.; root[] gSystem->Load(""libGeom"");; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; Second, we have to create an instance of the geometry manager class. This takes care of all the modeller components, performing several tasks to insure geometry validity and containing the user interface for building and interacting with the geometry. After its creation, the geometry manager class can be accessed with the global gGeoManager:; root[] new TGeoManager(""world"", ""the simplest geometry"");; TGeoManagerThe manager class for any TGeo geometry.Definition TGeoManager.h:44; We want to create a single volume in our geometry, but since any volume needs to have an associated medium, we will create a dummy one. You can safely ignore the following lines for the time being, since materials and media will be explained in detail later on.; root[] TGeoMaterial *mat = new TGeoMaterial(""Vacuum"",0,0,0);; root[] TGeoMedium *med = new TGeoMedium(""Vacuum"",1,mat);; TGeoMaterialBase class describing materials.Definition TGeoMaterial.h:34; TGeoMediumMedia are used to store properties related to tracking and which are useful only when using geometry ...Definition TGeoMedium.h:23; We can finally make our volume having a box shape. Note that the world volume does not need to be a box - it can be any other shape. Generally, boxes and tubes are the most recommendable shapes for this purpose due to their fast navigation algorithms.; root[] TGeoVolume",MatchSource.WIKI,doc/master/group__Geometry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Geometry.html
Testability,log,logical," objects. The Illegal overlaps folder is empty but can be filled after performing a geometry validity check (see section: ""Checking the; Geometry""). If tracking is performed using TGeo, the folder Tracks might contain user-defined tracks that can be visualized/animated in the geometry context (see section: ""Creating and; Visualizing Tracks""). Since for the time being we are interested more in the geometrical hierarchy, we will focus on the last two displayed items TOPand TOP_1. These are the top volume and the corresponding top node in the hierarchy.; Double clicking on the TOP volume will unfold all different volumes contained by the top volume. In the right panel, we will see all the volumes contained by TOP (if the same is positioned 4 times we will get 4 identical items). This rule will apply to any clicked volume in the hierarchy. Note that right clicking a volume item activates the volume context menu containing several specific methods. We will call the volume hierarchy developed in this way as the logical geometry graph. The volume objects are nodes inside this graph and the same volume can be accessed starting from different branches.; On the other hand, the real geometrical objects that are seen when visualizing or tracking the geometry are depicted in the TOP_1 branch. These are the nodes of the physical tree of positioned volumes represented by TGeoNode objects. This hierarchy is a tree since a node can have only one parent and several daughters. For a better understanding of the hierarchy, have a look at TGeoManage.; Just close now the X3D window and focus at the wire frame picture drawn in a pad. Activate Options/Event Status. Moving the mouse in the pad, you will notice that objects are sometimes changing color to red. Volumes are highlighted in this way whenever the mouse pointer is close enough to one of its vertices. When this happens, the corresponding volume is selected and you will see in the bottom right size of the ROOT canvas its name, shape t",MatchSource.WIKI,doc/master/group__Geometry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Geometry.html
Usability,simpl,simplest,"p between the pieces is not defined by neighbors, but by ""containment"". In other words, volumes are put one inside another making an in-depth hierarchy. From outside, the whole thing looks like a big pack that you can open finding out other smaller packs nicely arranged waiting to be opened at their turn. The biggest one containing all others defines the ""world"" of the model. We will often call this ""master reference system (MARS)"". Going on and opening our packs, we will obviously find out some empty ones, otherwise, something is very wrong... We will call these leaves (by analogy with a tree structure).; On the other hand, any volume is a small world by itself - what we need to do is to take it out and to ignore all the rest since it is a self-contained object. In fact, the modeller can act like this, considering a given volume as temporary MARS, but we will describe this feature later on. Let us focus on the biggest pack - it is mandatory to define one. Consider the simplest geometry that is made of a single box. Here is an example on how to build it:. Example 1: Creating the World; We first need to load the geometry library. This is not needed if one does ""make map"" in root folder.; root[] gSystem->Load(""libGeom"");; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; Second, we have to create an instance of the geometry manager class. This takes care of all the modeller components, performing several tasks to insure geometry validity and containing the user interface for building and interacting with the geometry. After its creation, the geometry manager class can be accessed with the global gGeoManager:; root[] new TGeoManager(""world"", ""the simplest geometry"");; TGeoManagerThe manager class for any TGeo geometry.Definition TGeoManager.h:44; We want to create a single volume in our geometry, but since any volume n",MatchSource.WIKI,doc/master/group__Geometry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Geometry.html
Integrability,wrap,wrapper,"re...;  ; class  TGeoGlobalMagField;  Global magnetic field manager. More...;  ; class  TGeoHMatrix;  Matrix class used for computing global transformations Should NOT be used for node definition. More...;  ; class  TGeoIdentity;  An identity transformation. More...;  ; class  TGeoIterator;  A geometry iterator. More...;  ; class  TGeoIteratorPlugin;  ; class  TGeoManager;  The manager class for any TGeo geometry. More...;  ; class  TGeoMatrix;  Geometrical transformation package. More...;  ; class  TGeoNavigator;  Class providing navigation API for TGeo geometries. More...;  ; class  TGeoNode;  A node represent a volume positioned inside another.They store links to both volumes and to the TGeoMatrix representing the relative positioning. More...;  ; class  TGeoNodeCache;  Special pool of reusable nodes. More...;  ; class  TGeoNodeMatrix;  A node containing local transformation. More...;  ; class  TGeoNodeOffset;  Node containing an offset. More...;  ; class  TGeoOpticalSurface;  This is a wrapper class to G4OpticalSurface. More...;  ; class  TGeoParallelWorld;  Base class for a flat parallel geometry. More...;  ; class  TGeoPatternFinder;  Base finder class for patterns. More...;  ; class  TGeoPhysicalNode;  Physical nodes are the actual 'touchable' objects in the geometry, representing a path of positioned volumes starting with the top node: path=/TOP/A_1/B_4/C_3 , where A, B, C represent names of volumes. More...;  ; class  TGeoPNEntry;  The knowledge of the path to the objects that need to be misaligned is essential since there is no other way of identifying them. More...;  ; class  TGeoRCExtension;  Reference counted extension which has a pointer to and owns a user defined TObject. More...;  ; class  TGeoRCPtr< T >;  A reference counting-managed pointer for classes derived from TGeoExtension which can be used as C pointer. More...;  ; class  TGeoRegion;  Regions are groups of volumes having a common set of user tracking cuts. More...;  ; class  TGeoRotation;  Cl",MatchSource.WIKI,doc/master/group__Geometry__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Geometry__classes.html
Performance,cache,cache,". ROOT: Geometry classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Geometry classesThe Geometry Package. ; The Geometry related classes. ; Several documents describing these classes are listed below:. The main geometry class is documented in class TGeoManager.; Presentation/article at CHEP'03; Presentation at ROOT 2004; Presentation at ROOT 2005; Presentation at ROOT 2007. See also the use of the geometry classes in AliROOT package of ALICE. . Classes; class  TGeoAtt;  Visualization and tracking attributes for volumes and nodes. More...;  ; class  TGeoBoolNode;  Base class for Boolean operations between two shapes. More...;  ; class  TGeoBranchArray;  An array of daughter indices making a geometry path. More...;  ; class  TGeoBuilder;  Utility class for creating geometry objects.These will be associated with the current selected geometry manager object: More...;  ; class  TGeoCacheState;  Class storing the state of the cache at a given moment. More...;  ; class  TGeoCombiTrans;  Class describing rotation + translation. More...;  ; class  TGeoDecayChannel;  A decay channel for a radionuclide. More...;  ; class  TGeoElementRN;  Class representing a radionuclidevoid TGeoManager::SetDefaultRootUnits() { if ( fgDefaultUnits == kRootUnits ) { return; } else if ( gGeometryLocked ) { TError::Fatal(""TGeoManager"",""The system of units may only be changed once BEFORE any elements and materials are; created!""); } fgDefaultUnits = kRootUnits; }. More...;  ; class  TGeoElementTable;  Table of elements. More...;  ; class  TGeoElemIter;  Iterator for decay branches. More...;  ; class  TGeoExtension;  ABC for user objects attached to TGeoVolume or TGeoNode. More...;  ; class  TGeoGenTrans;  Most general transformation, holding a translation, a rotation and a scale. More...;  ; class  TGeoGlobalMagField;  Global magnetic field manager. More...;  ; class  TGeoHMatrix;  Matrix class used for computing global transformations Should NOT be ",MatchSource.WIKI,doc/master/group__Geometry__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Geometry__classes.html
Deployability,integrat,integrated,". ROOT: GDML tools. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; GDML toolsThe Geometry Package. ; GDML tools for geometry classes. ; The $ROOTSYS/gdml directory contains a set of Python modules designed for writing out Geometry Description Markup Language (GDML) files. There is also a C++ implementation for the import of GDML into ROOT. They act as a converter between the GDML geometry files and the TGeo geometry structures (and vice versa). GDML->ROOT; As this binding is integrated into the ROOT installation, you need to enable the use of the binding at the configure point of the ROOT installation. This can be done like so:; ./configure --enable-gdml; On doing this the libraries will be built by issuing the standard ROOT make command. The GDML to TGeo converter uses the TXMLEngine to parse the GDML files. This XML parser is a DOM parser and returns the DOM tree to the class TGDMLParse. This class then interprets the GDML file and adds the bindings in their TGeo equivalent.; The GDML schema is fully supported with a few exceptions:. Replica Volumes are not supported; Loops are not supported; Matrices are not supported. These will hopefully be added in the near future.; Once you have enabled GDML in the configure process for ROOT, to import a GDML file, this can be done using TGeoManager::Import. This automatically calls the right method to parse the GDML by detecting the .gdml file extension. Here is how to do it:; TGeoManager::Import(""test.gdml"");; TGeoManager::Importstatic TGeoManager * Import(const char *filename, const char *name="""", Option_t *option="""")static function Import a geometry from a gdml or ROOT fileDefinition TGeoManager.cxx:4096; Replace test.gdml with the gdml filename you want to import. Once the GDML file has been successfully imported, you can view the geometry by calling:; gGeoManager->GetTopVolume()->Draw(""ogl"");; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TGeoManag",MatchSource.WIKI,doc/master/group__Geometry__gdml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Geometry__gdml.html
Integrability,integrat,integrated,". ROOT: GDML tools. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; GDML toolsThe Geometry Package. ; GDML tools for geometry classes. ; The $ROOTSYS/gdml directory contains a set of Python modules designed for writing out Geometry Description Markup Language (GDML) files. There is also a C++ implementation for the import of GDML into ROOT. They act as a converter between the GDML geometry files and the TGeo geometry structures (and vice versa). GDML->ROOT; As this binding is integrated into the ROOT installation, you need to enable the use of the binding at the configure point of the ROOT installation. This can be done like so:; ./configure --enable-gdml; On doing this the libraries will be built by issuing the standard ROOT make command. The GDML to TGeo converter uses the TXMLEngine to parse the GDML files. This XML parser is a DOM parser and returns the DOM tree to the class TGDMLParse. This class then interprets the GDML file and adds the bindings in their TGeo equivalent.; The GDML schema is fully supported with a few exceptions:. Replica Volumes are not supported; Loops are not supported; Matrices are not supported. These will hopefully be added in the near future.; Once you have enabled GDML in the configure process for ROOT, to import a GDML file, this can be done using TGeoManager::Import. This automatically calls the right method to parse the GDML by detecting the .gdml file extension. Here is how to do it:; TGeoManager::Import(""test.gdml"");; TGeoManager::Importstatic TGeoManager * Import(const char *filename, const char *name="""", Option_t *option="""")static function Import a geometry from a gdml or ROOT fileDefinition TGeoManager.cxx:4096; Replace test.gdml with the gdml filename you want to import. Once the GDML file has been successfully imported, you can view the geometry by calling:; gGeoManager->GetTopVolume()->Draw(""ogl"");; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TGeoManag",MatchSource.WIKI,doc/master/group__Geometry__gdml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Geometry__gdml.html
Modifiability,config,configure,". ROOT: GDML tools. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; GDML toolsThe Geometry Package. ; GDML tools for geometry classes. ; The $ROOTSYS/gdml directory contains a set of Python modules designed for writing out Geometry Description Markup Language (GDML) files. There is also a C++ implementation for the import of GDML into ROOT. They act as a converter between the GDML geometry files and the TGeo geometry structures (and vice versa). GDML->ROOT; As this binding is integrated into the ROOT installation, you need to enable the use of the binding at the configure point of the ROOT installation. This can be done like so:; ./configure --enable-gdml; On doing this the libraries will be built by issuing the standard ROOT make command. The GDML to TGeo converter uses the TXMLEngine to parse the GDML files. This XML parser is a DOM parser and returns the DOM tree to the class TGDMLParse. This class then interprets the GDML file and adds the bindings in their TGeo equivalent.; The GDML schema is fully supported with a few exceptions:. Replica Volumes are not supported; Loops are not supported; Matrices are not supported. These will hopefully be added in the near future.; Once you have enabled GDML in the configure process for ROOT, to import a GDML file, this can be done using TGeoManager::Import. This automatically calls the right method to parse the GDML by detecting the .gdml file extension. Here is how to do it:; TGeoManager::Import(""test.gdml"");; TGeoManager::Importstatic TGeoManager * Import(const char *filename, const char *name="""", Option_t *option="""")static function Import a geometry from a gdml or ROOT fileDefinition TGeoManager.cxx:4096; Replace test.gdml with the gdml filename you want to import. Once the GDML file has been successfully imported, you can view the geometry by calling:; gGeoManager->GetTopVolume()->Draw(""ogl"");; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TGeoManag",MatchSource.WIKI,doc/master/group__Geometry__gdml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Geometry__gdml.html
Performance,load,loaded,"xport ROOT geometries (TGeo geometry trees) as GDML files. The writer module writes a GDML file out of the 'in-memory' representation of the geometry. The actual application-specific (ROOT) binding is implemented in ROOTwriter module. It contains 'binding methods' for TGeo geometry classes which can be exported in GDML format. Please refere to the comment part of the ROOTwriter.py file for the list of presently supported TGeo classes. The ROOTwriter class contains also three methods, dumpMaterials, dumpSolids and examineVol which need to be called in order to export materials, solids and geometry tree respectively.; The TGeo to GDML converter is now interfaced to the TGeoManager::Export method which automatically calls the appropriate Python scripts whenever the geometry output file has the .gdml extension.; Alternatively, one can also use the ROOT->GDML converter directly from the Python prompt (assuming the TGeo geometry has already been loaded into memory in one or another way), for example:; from math import *; ; import ROOT; import writer; import ROOTwriter; ; # get TGeoManager and; # get the top volume of the existing (in-memory) geometry tree; geomgr = ROOT.gGeoManager; topV = geomgr.GetTopVolume(); ; # instanciate writer; gdmlwriter = writer.writer('mygeo.gdml'); binding = ROOTwriter.ROOTwriter(gdmlwriter); ; # dump materials; matlist = geomgr.GetListOfMaterials(); binding.dumpMaterials(matlist); ; # dump solids; shapelist = geomgr.GetListOfShapes(); binding.dumpSolids(shapelist); ; # dump geo tree; print 'Traversing geometry tree'; gdmlwriter.addSetup('default', '1.0', topV.GetName()); binding.examineVol(topV); ; # write file; gdmlwriter.writeFile(); ROOTwriter.ROOTwriterDefinition ROOTwriter.py:58; ROOTwriter.ROOTwriter.dumpMaterialsdumpMaterials(self, matlist)Definition ROOTwriter.py:279; writer.writerDefinition writer.py:16; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPol",MatchSource.WIKI,doc/master/group__Geometry__gdml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Geometry__gdml.html
Safety,detect,detecting,"nverter between the GDML geometry files and the TGeo geometry structures (and vice versa). GDML->ROOT; As this binding is integrated into the ROOT installation, you need to enable the use of the binding at the configure point of the ROOT installation. This can be done like so:; ./configure --enable-gdml; On doing this the libraries will be built by issuing the standard ROOT make command. The GDML to TGeo converter uses the TXMLEngine to parse the GDML files. This XML parser is a DOM parser and returns the DOM tree to the class TGDMLParse. This class then interprets the GDML file and adds the bindings in their TGeo equivalent.; The GDML schema is fully supported with a few exceptions:. Replica Volumes are not supported; Loops are not supported; Matrices are not supported. These will hopefully be added in the near future.; Once you have enabled GDML in the configure process for ROOT, to import a GDML file, this can be done using TGeoManager::Import. This automatically calls the right method to parse the GDML by detecting the .gdml file extension. Here is how to do it:; TGeoManager::Import(""test.gdml"");; TGeoManager::Importstatic TGeoManager * Import(const char *filename, const char *name="""", Option_t *option="""")static function Import a geometry from a gdml or ROOT fileDefinition TGeoManager.cxx:4096; Replace test.gdml with the gdml filename you want to import. Once the GDML file has been successfully imported, you can view the geometry by calling:; gGeoManager->GetTopVolume()->Draw(""ogl"");; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TGeoManager::GetTopVolumeTGeoVolume * GetTopVolume() constDefinition TGeoManager.h:512; TGeoVolume::Drawvoid Draw(Option_t *option="""") overridedraw top volume according to optionDefinition TGeoVolume.cxx:1206; For any questions or comments about the GDML->ROOT binding please contact ben.l.nosp@m.loyd.nosp@m.@cern.nosp@m..ch. ROOT->GDML; The TGeo to GDML converter allows to export ROOT geometries (TGeo geomet",MatchSource.WIKI,doc/master/group__Geometry__gdml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Geometry__gdml.html
Testability,test,test,"rsa). GDML->ROOT; As this binding is integrated into the ROOT installation, you need to enable the use of the binding at the configure point of the ROOT installation. This can be done like so:; ./configure --enable-gdml; On doing this the libraries will be built by issuing the standard ROOT make command. The GDML to TGeo converter uses the TXMLEngine to parse the GDML files. This XML parser is a DOM parser and returns the DOM tree to the class TGDMLParse. This class then interprets the GDML file and adds the bindings in their TGeo equivalent.; The GDML schema is fully supported with a few exceptions:. Replica Volumes are not supported; Loops are not supported; Matrices are not supported. These will hopefully be added in the near future.; Once you have enabled GDML in the configure process for ROOT, to import a GDML file, this can be done using TGeoManager::Import. This automatically calls the right method to parse the GDML by detecting the .gdml file extension. Here is how to do it:; TGeoManager::Import(""test.gdml"");; TGeoManager::Importstatic TGeoManager * Import(const char *filename, const char *name="""", Option_t *option="""")static function Import a geometry from a gdml or ROOT fileDefinition TGeoManager.cxx:4096; Replace test.gdml with the gdml filename you want to import. Once the GDML file has been successfully imported, you can view the geometry by calling:; gGeoManager->GetTopVolume()->Draw(""ogl"");; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TGeoManager::GetTopVolumeTGeoVolume * GetTopVolume() constDefinition TGeoManager.h:512; TGeoVolume::Drawvoid Draw(Option_t *option="""") overridedraw top volume according to optionDefinition TGeoVolume.cxx:1206; For any questions or comments about the GDML->ROOT binding please contact ben.l.nosp@m.loyd.nosp@m.@cern.nosp@m..ch. ROOT->GDML; The TGeo to GDML converter allows to export ROOT geometries (TGeo geometry trees) as GDML files. The writer module writes a GDML file out of the 'in-memory'",MatchSource.WIKI,doc/master/group__Geometry__gdml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Geometry__gdml.html
Integrability,interface,interfaces,". ROOT: Geometry painter. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Geometry painterThe Geometry Package. ; The Geometry painter, checker, overlap and track related classes. . Classes; class  TGeoChecker;  Geometry checking package. More...;  ; class  TGeoOverlap;  Base class describing geometry overlaps. More...;  ; class  TGeoPainter;  Class implementing all draw interfaces for a generic 3D viewer using TBuffer3D mechanism. More...;  ; class  TGeoTrack;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Geometry__painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Geometry__painter.html
Integrability,interface,interface,". ROOT: Graphics pad. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Graphics padGraphics » 2D Graphics. ; The TPad related classes. ; TPad and TPad's related classes' usages are illustrated by the following examples:. The Graphics Pad.; How to Draw objects.; How to Pick objects.; Dividing a canvas with no margins between pads.; Using transparent pads. . Classes; class  TAnnotation;  An annotation is a TLatex which can be drawn in a 2D or 3D space. More...;  ; class  TAttCanvas;  Manages canvas attributes. More...;  ; class  TButton;  A TButton object is a user interface object. More...;  ; class  TCanvas;  The Canvas class. More...;  ; class  TClassTree;  Draw inheritance tree and their relations for a list of classes. More...;  ; class  TColorWheel;  Draw the ROOT Color Wheel. More...;  ; class  TControlBar;  A Control Bar is a fully user configurable tool which provides fast access to frequently used operations. More...;  ; class  TControlBarButton;  This class defines the control bar buttons. More...;  ; class  TCreatePrimitives;  Creates new primitives. More...;  ; class  TDialogCanvas;  A canvas specialized to set attributes. More...;  ; class  TGroupButton;  A specialized TButton used in a group of Buttons. More...;  ; class  TInspectCanvas;  A TInspectCanvas is a canvas specialized to inspect Root objects. More...;  ; class  TInspectorObject;  This class is designed to wrap a Foreign object in order to inject it into the Browse sub-system. More...;  ; class  TPad;  The most important graphics class in the ROOT system. More...;  ; class  TPadPainter;  Implement TVirtualPadPainter which abstracts painting operations. More...;  ; class  TPaveClass;  A TPaveLabel specialized to process classes inside a TClassTree. More...;  ; class  TRatioPlot;  Class for displaying ratios, differences and fit residuals. More...;  ; class  TSlider;  A specialized TPad including a TSliderBox object. More...;  ; class  TSliderBox;  The mo",MatchSource.WIKI,doc/master/group__gpad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__gpad.html
Modifiability,inherit,inheritance,". ROOT: Graphics pad. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Graphics padGraphics » 2D Graphics. ; The TPad related classes. ; TPad and TPad's related classes' usages are illustrated by the following examples:. The Graphics Pad.; How to Draw objects.; How to Pick objects.; Dividing a canvas with no margins between pads.; Using transparent pads. . Classes; class  TAnnotation;  An annotation is a TLatex which can be drawn in a 2D or 3D space. More...;  ; class  TAttCanvas;  Manages canvas attributes. More...;  ; class  TButton;  A TButton object is a user interface object. More...;  ; class  TCanvas;  The Canvas class. More...;  ; class  TClassTree;  Draw inheritance tree and their relations for a list of classes. More...;  ; class  TColorWheel;  Draw the ROOT Color Wheel. More...;  ; class  TControlBar;  A Control Bar is a fully user configurable tool which provides fast access to frequently used operations. More...;  ; class  TControlBarButton;  This class defines the control bar buttons. More...;  ; class  TCreatePrimitives;  Creates new primitives. More...;  ; class  TDialogCanvas;  A canvas specialized to set attributes. More...;  ; class  TGroupButton;  A specialized TButton used in a group of Buttons. More...;  ; class  TInspectCanvas;  A TInspectCanvas is a canvas specialized to inspect Root objects. More...;  ; class  TInspectorObject;  This class is designed to wrap a Foreign object in order to inject it into the Browse sub-system. More...;  ; class  TPad;  The most important graphics class in the ROOT system. More...;  ; class  TPadPainter;  Implement TVirtualPadPainter which abstracts painting operations. More...;  ; class  TPaveClass;  A TPaveLabel specialized to process classes inside a TClassTree. More...;  ; class  TRatioPlot;  Class for displaying ratios, differences and fit residuals. More...;  ; class  TSlider;  A specialized TPad including a TSliderBox object. More...;  ; class  TSliderBox;  The mo",MatchSource.WIKI,doc/master/group__gpad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__gpad.html
Security,access,access,". ROOT: Graphics pad. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Graphics padGraphics » 2D Graphics. ; The TPad related classes. ; TPad and TPad's related classes' usages are illustrated by the following examples:. The Graphics Pad.; How to Draw objects.; How to Pick objects.; Dividing a canvas with no margins between pads.; Using transparent pads. . Classes; class  TAnnotation;  An annotation is a TLatex which can be drawn in a 2D or 3D space. More...;  ; class  TAttCanvas;  Manages canvas attributes. More...;  ; class  TButton;  A TButton object is a user interface object. More...;  ; class  TCanvas;  The Canvas class. More...;  ; class  TClassTree;  Draw inheritance tree and their relations for a list of classes. More...;  ; class  TColorWheel;  Draw the ROOT Color Wheel. More...;  ; class  TControlBar;  A Control Bar is a fully user configurable tool which provides fast access to frequently used operations. More...;  ; class  TControlBarButton;  This class defines the control bar buttons. More...;  ; class  TCreatePrimitives;  Creates new primitives. More...;  ; class  TDialogCanvas;  A canvas specialized to set attributes. More...;  ; class  TGroupButton;  A specialized TButton used in a group of Buttons. More...;  ; class  TInspectCanvas;  A TInspectCanvas is a canvas specialized to inspect Root objects. More...;  ; class  TInspectorObject;  This class is designed to wrap a Foreign object in order to inject it into the Browse sub-system. More...;  ; class  TPad;  The most important graphics class in the ROOT system. More...;  ; class  TPadPainter;  Implement TVirtualPadPainter which abstracts painting operations. More...;  ; class  TPaveClass;  A TPaveLabel specialized to process classes inside a TClassTree. More...;  ; class  TRatioPlot;  Class for displaying ratios, differences and fit residuals. More...;  ; class  TSlider;  A specialized TPad including a TSliderBox object. More...;  ; class  TSliderBox;  The mo",MatchSource.WIKI,doc/master/group__gpad.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__gpad.html
Integrability,interface,interface,"e itself. More...;  ; class  ROOT::Experimental::Internal::RIOSharedBase;  ; class  ROOT::Experimental::Detail::RMenuArgument;  Argument description for menu item which should invoke class method. More...;  ; class  ROOT::Experimental::Detail::RMenuItem;  Base class for menu items, shown on JS side. More...;  ; class  ROOT::Experimental::RMenuItems;  List of items for object context menu. More...;  ; class  ROOT::Experimental::ROnFrameDrawable;  Base class for drawable which can be drawn on frame or on pad. More...;  ; class  ROOT::Experimental::RPad;  Graphic container for RDrawable-s. More...;  ; class  ROOT::Experimental::RPadBase;  Base class for graphic containers for RDrawable-s. More...;  ; class  ROOT::Experimental::RPadBaseDisplayItem;  class RPadBaseDisplayItem More...;  ; class  ROOT::Experimental::RPadDisplayItem;  class RPadDisplayItem More...;  ; class  ROOT::Experimental::RPadExtent;  An extent / size (horizontal and vertical) in a RPad. More...;  ; class  ROOT::Experimental::RPadPos;  A position (horizontal and vertical) in a RPad. More...;  ; class  ROOT::Experimental::RPalette;  A set of colors. More...;  ; class  ROOT::Experimental::RStyle;  A set of defaults for graphics attributes, e.g. More...;  ; class  ROOT::Experimental::Internal::RVirtualCanvasPainter;  Abstract interface for painting a canvas. More...;  ; struct  ROOT::Experimental::RPadExtent::ScaleFactor;  A scale factor (separate factors for horizontal and vertical) for scaling a RPadLength. More...;  ; class  ROOT::Experimental::RPadPos::ScaleFactor;  A scale factor (separate factors for horizontal and vertical) for scaling a RPadLength. More...;  ; class  ROOT::Experimental::TObjectDisplayItem;  Display item for TObject with drawing options. More...;  ; class  ROOT::Experimental::TObjectDrawable;  Provides v7 drawing facilities for TObject types (TGraph, TH1, TH2, etc). More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__GpadROOT7.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__GpadROOT7.html
Performance,perform,performed," ROOT::Experimental::Detail::RCheckedMenuItem;  Menu item with check box. More...;  ; class  ROOT::Experimental::RColor;  The color class. More...;  ; class  ROOT::Experimental::RDisplayItem;  Base class for painting data for JS. More...;  ; class  ROOT::Experimental::RDrawable;  Base class for drawable entities: objects that can be painted on a RPad. More...;  ; class  ROOT::Experimental::RDrawableDisplayItem;  Generic display item for RDrawable, just reference drawable itself. More...;  ; class  ROOT::Experimental::RDrawableExecRequest;  Request execution of method of referenced drawable, no reply. More...;  ; class  ROOT::Experimental::RDrawableMenuRequest;  Request menu items for the drawable object. More...;  ; class  ROOT::Experimental::RDrawableReply;  Base class for replies on RDrawableRequest. More...;  ; class  ROOT::Experimental::RDrawableRequest;  Base class for requests which can be submitted from the clients. More...;  ; class  ROOT::Experimental::RFrame;  Holds an area where drawing on user coordinate-system can be performed. More...;  ; class  ROOT::Experimental::RIndirectDisplayItem;  Extract (reference) only basic attributes from drawable, but not drawable itself. More...;  ; class  ROOT::Experimental::Internal::RIOSharedBase;  ; class  ROOT::Experimental::Detail::RMenuArgument;  Argument description for menu item which should invoke class method. More...;  ; class  ROOT::Experimental::Detail::RMenuItem;  Base class for menu items, shown on JS side. More...;  ; class  ROOT::Experimental::RMenuItems;  List of items for object context menu. More...;  ; class  ROOT::Experimental::ROnFrameDrawable;  Base class for drawable which can be drawn on frame or on pad. More...;  ; class  ROOT::Experimental::RPad;  Graphic container for RDrawable-s. More...;  ; class  ROOT::Experimental::RPadBase;  Base class for graphic containers for RDrawable-s. More...;  ; class  ROOT::Experimental::RPadBaseDisplayItem;  class RPadBaseDisplayItem More...;  ; class  ROOT::Ex",MatchSource.WIKI,doc/master/group__GpadROOT7.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__GpadROOT7.html
Security,access,access,"itle and its drawing attributes. More...;  ; class  ROOT::Experimental::RAttrBase;  Base class for all attributes, used with RDrawable. More...;  ; class  ROOT::Experimental::RAttrBorder;  Drawing line attributes for different objects. More...;  ; class  ROOT::Experimental::RAttrFill;  Drawing fill attributes for different objects. More...;  ; class  ROOT::Experimental::RAttrFont;  A font attributes, used together with text attributes. More...;  ; class  ROOT::Experimental::RAttrLine;  Drawing line attributes for different objects. More...;  ; class  ROOT::Experimental::RAttrLineEnding;  Attributes for line ending. More...;  ; class  ROOT::Experimental::RAttrMap;  ; class  ROOT::Experimental::RAttrMargins;  A margins attributes. Only relative and pixel coordinates are allowed. More...;  ; class  ROOT::Experimental::RAttrMarker;  A marker attributes. More...;  ; class  ROOT::Experimental::RAttrText;  A text attributes. More...;  ; class  ROOT::Experimental::RAttrValue< T >;  Template class to access single value from drawable or other attributes. More...;  ; class  ROOT::Experimental::RCanvas;  A window's topmost RPad. More...;  ; class  ROOT::Experimental::RCanvasDisplayItem;  class RCanvasDisplayItem More...;  ; class  ROOT::Experimental::Detail::RCheckedMenuItem;  Menu item with check box. More...;  ; class  ROOT::Experimental::RColor;  The color class. More...;  ; class  ROOT::Experimental::RDisplayItem;  Base class for painting data for JS. More...;  ; class  ROOT::Experimental::RDrawable;  Base class for drawable entities: objects that can be painted on a RPad. More...;  ; class  ROOT::Experimental::RDrawableDisplayItem;  Generic display item for RDrawable, just reference drawable itself. More...;  ; class  ROOT::Experimental::RDrawableExecRequest;  Request execution of method of referenced drawable, no reply. More...;  ; class  ROOT::Experimental::RDrawableMenuRequest;  Request menu items for the drawable object. More...;  ; class  ROOT::Experimental::RDrawabl",MatchSource.WIKI,doc/master/group__GpadROOT7.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__GpadROOT7.html
Testability,log,log,". ROOT: ROOT7 Pad related classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; ROOT7 Pad related classesGraphics » ROOT7 Graphics. ; The ROOT7 Pad related classes. . Classes; class  ROOT::Experimental::Detail::RArgsMenuItem;  Menu item which requires extra arguments for invoked class method. More...;  ; class  ROOT::Experimental::RAttrAggregation;  Base class for attributes aggregations like lines or fill attributes. More...;  ; class  ROOT::Experimental::RAttrAxis;  All supported axes attributes for: line, ticks, labels, title, min/max, log, reverse, ... More...;  ; class  ROOT::Experimental::RAttrAxisLabels;  Axis labels drawing attributes. More...;  ; class  ROOT::Experimental::RAttrAxisTicks;  Axis ticks attributes. More...;  ; class  ROOT::Experimental::RAttrAxisTitle;  Axis title and its drawing attributes. More...;  ; class  ROOT::Experimental::RAttrBase;  Base class for all attributes, used with RDrawable. More...;  ; class  ROOT::Experimental::RAttrBorder;  Drawing line attributes for different objects. More...;  ; class  ROOT::Experimental::RAttrFill;  Drawing fill attributes for different objects. More...;  ; class  ROOT::Experimental::RAttrFont;  A font attributes, used together with text attributes. More...;  ; class  ROOT::Experimental::RAttrLine;  Drawing line attributes for different objects. More...;  ; class  ROOT::Experimental::RAttrLineEnding;  Attributes for line ending. More...;  ; class  ROOT::Experimental::RAttrMap;  ; class  ROOT::Experimental::RAttrMargins;  A margins attributes. Only relative and pixel coordinates are allowed. More...;  ; class  ROOT::Experimental::RAttrMarker;  A marker attributes. More...;  ; class  ROOT::Experimental::RAttrText;  A text attributes. More...;  ; class  ROOT::Experimental::RAttrValue< T >;  Template class to access single value from drawable or other attributes. More...;  ; class  ROOT::Experimental::RCanvas;  A window's topmost RPad. More...;  ; class  ROOT::E",MatchSource.WIKI,doc/master/group__GpadROOT7.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__GpadROOT7.html
Integrability,interface,interface,. ROOT: Graphics. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; Graphics. ; The graphics related classes. . Modules;  Graphics' Backends;  Graphics' Backends interface classes. ;  ;  2D Graphics;  The 2D graphics related classes. ;  ;  Graphics attributes;  The graphics attributes related classes. ;  ;  ROOT7 Graphics;  Classes for ROOT7 graphics. ;  ;  3D Graphics;  The 3D graphics related classes. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__Graphics.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Graphics.html
Integrability,interface,interface,. ROOT: 2D Graphics. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; 2D GraphicsGraphics. ; The 2D graphics related classes. . Modules;  libAfterImage interface;  Classes interfacing to libAfterImage. ;  ;  FITS file;  Interface to FITS file. ;  ;  Graphics pad;  The TPad related classes. ;  ;  Basic graphics;  The low level graphics classes. ;  ;  graphviz interface;  Interface to the graphing package graphviz ;  ;  Graphics file output;  Interfaces to various file output formats. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__Graphics2D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Graphics2D.html
Modifiability,inherit,inheritance,". ROOT: Graphics attributes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Graphics attributesGraphics. ; The graphics attributes related classes. ; Graphics attributes, are parameters that affect the way graphics primitives are displayed.; A ROOT object get graphics attributes by inheritance from the TAttXXX classes.; For example, lines can be dotted or dashed, fat or thin, blue or orange. If an object inherits form the class TAttLine it will get these attributes. Areas might be filled with one color or with a multicolor pattern. If an object inherits form the class TAttFill it will get these attribute. Text can appear with an angle, displayed in different fonts, colors, and sizes. If an object inherits form the class TAttText it will get these attribute. . Classes; class  TAtt3D;  Use this attribute class when an object should have 3D capabilities. More...;  ; class  TAttAxis;  Manages histogram axis attributes. More...;  ; class  TAttBBox;  Helper for management of bounding-box information. More...;  ; class  TAttBBox2D;  Abstract base class for elements drawn in the editor. More...;  ; class  TAttCanvas;  Manages canvas attributes. More...;  ; class  TAttFill;  Fill Area Attributes class. More...;  ; class  TAttImage;  TImage attributes. More...;  ; class  TAttLine;  Line Attributes class. More...;  ; class  TAttMarker;  Marker Attributes class. More...;  ; class  TAttPad;  Manages default Pad attributes. More...;  ; class  TAttText;  Text Attributes class. More...;  ; class  TColor;  The color creation and management class. More...;  ; class  TColorGradient;  TColorGradient extends basic TColor. More...;  ; class  TStyle;  TStyle objects may be created to define special styles. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__GraphicsAtt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__GraphicsAtt.html
Integrability,interface,interface,". ROOT: Graphics' Backends. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Classes ; Graphics' BackendsGraphics. ; Graphics' Backends interface classes. ; Graphics classes interfacing ROOT graphics with the low level native graphics backends(s) like X11, Cocoa, Win32 etc... These classes are not meant to be used directly by ROOT users. . Modules;  Cocoa backend;  Interface to MacOS native graphics system. ;  ;  Win32 backend;  Interface to Windows graphics. ;  ;  X11 backend;  Interface to X11 graphics. ;  . Classes; class  TTFX11Init;  Small utility class that takes care of switching the current gVirtualX to the new TGX11TTF class as soon as the shared library containing this class is loaded. More...;  ; class  TVirtualX;  Semi-Abstract base class defining a generic interface to the underlying, low level, native graphics backend (X11, Win32, MacOS, OpenGL...). More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__GraphicsBackends.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__GraphicsBackends.html
Performance,load,loaded,". ROOT: Graphics' Backends. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Classes ; Graphics' BackendsGraphics. ; Graphics' Backends interface classes. ; Graphics classes interfacing ROOT graphics with the low level native graphics backends(s) like X11, Cocoa, Win32 etc... These classes are not meant to be used directly by ROOT users. . Modules;  Cocoa backend;  Interface to MacOS native graphics system. ;  ;  Win32 backend;  Interface to Windows graphics. ;  ;  X11 backend;  Interface to X11 graphics. ;  . Classes; class  TTFX11Init;  Small utility class that takes care of switching the current gVirtualX to the new TGX11TTF class as soon as the shared library containing this class is loaded. More...;  ; class  TVirtualX;  Semi-Abstract base class defining a generic interface to the underlying, low level, native graphics backend (X11, Win32, MacOS, OpenGL...). More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__GraphicsBackends.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__GraphicsBackends.html
Availability,error,errors,". ROOT: Graph classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Graph classes.Histogram Library. . Classes; class  TGraph;  A TGraph is an object made of two arrays X and Y with npoints each. More...;  ; class  TGraph2D;  Graphics object made of three arrays X, Y and Z with the same number of points each. More...;  ; class  TGraph2DAsymmErrors;  Graph 2D class with errors. More...;  ; class  TGraph2DErrors;  Graph 2D class with errors. More...;  ; class  TGraphAsymmErrors;  TGraph with asymmetric error bars. More...;  ; class  TGraphBentErrors;  A TGraphBentErrors is a TGraph with bent, asymmetric error bars. More...;  ; class  TGraphDelaunay;  TGraphDelaunay generates a Delaunay triangulation of a TGraph2D. More...;  ; class  TGraphDelaunay2D;  TGraphDelaunay2D generates a Delaunay triangulation of a TGraph2D. More...;  ; class  TGraphErrors;  A TGraphErrors is a TGraph with error bars. More...;  ; class  TGraphMultiErrors;  TGraph with asymmetric error bars and multiple y error dimensions. More...;  ; class  TGraphSmooth;  A helper class to smooth TGraph. More...;  ; class  TGraphTime;  TGraphTime is used to draw a set of objects evolving with nsteps in time between tmin and tmax. More...;  ; class  TMultiGraph;  A TMultiGraph is a collection of TGraph (or derived) objects. More...;  ; class  TPolyMarker;  A PolyMarker is defined by an array on N points in a 2-D space. More...;  ; class  TScatter;  A TScatter is able to draw four variables scatter plot on a single plot. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Graphs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Graphs.html
Modifiability,variab,variables,". ROOT: Graph classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Graph classes.Histogram Library. . Classes; class  TGraph;  A TGraph is an object made of two arrays X and Y with npoints each. More...;  ; class  TGraph2D;  Graphics object made of three arrays X, Y and Z with the same number of points each. More...;  ; class  TGraph2DAsymmErrors;  Graph 2D class with errors. More...;  ; class  TGraph2DErrors;  Graph 2D class with errors. More...;  ; class  TGraphAsymmErrors;  TGraph with asymmetric error bars. More...;  ; class  TGraphBentErrors;  A TGraphBentErrors is a TGraph with bent, asymmetric error bars. More...;  ; class  TGraphDelaunay;  TGraphDelaunay generates a Delaunay triangulation of a TGraph2D. More...;  ; class  TGraphDelaunay2D;  TGraphDelaunay2D generates a Delaunay triangulation of a TGraph2D. More...;  ; class  TGraphErrors;  A TGraphErrors is a TGraph with error bars. More...;  ; class  TGraphMultiErrors;  TGraph with asymmetric error bars and multiple y error dimensions. More...;  ; class  TGraphSmooth;  A helper class to smooth TGraph. More...;  ; class  TGraphTime;  TGraphTime is used to draw a set of objects evolving with nsteps in time between tmin and tmax. More...;  ; class  TMultiGraph;  A TMultiGraph is a collection of TGraph (or derived) objects. More...;  ; class  TPolyMarker;  A PolyMarker is defined by an array on N points in a 2-D space. More...;  ; class  TScatter;  A TScatter is able to draw four variables scatter plot on a single plot. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Graphs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Graphs.html
Integrability,interface,interface,"grams; How to convert Hbook/PAW files to ROOT . Modules;  Painting classes;  ;  Histogram classes.;  ;  Graph classes.;  ;  Function classes.;  ;  ROOT 7 histogram classes.;  ;  Advanced spectra processing classes.;  ;  TUnfold classes;  . Classes; class  TBackCompFitter;  Backward compatible implementation of TVirtualFitter. More...;  ; class  TBinomialEfficiencyFitter;  Binomial fitter for the division of two histograms. More...;  ; class  TConfidenceLevel;  Class to compute 95% CL limits. More...;  ; class  TEfficiency;  Class to handle efficiency histograms. More...;  ; class  TFitResult;  Extends the ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O. More...;  ; class  TFormula;  The Formula class. More...;  ; class  ROOT::v5::TFormula;  The FORMULA class (ROOT version 5) More...;  ; class  ROOT::v5::TFormulaPrimitive;  The Formula Primitive class. More...;  ; class  THbookBranch;  HBOOK Branch. More...;  ; class  THbookFile;  This class is an interface to the Hbook objects in Hbook files. More...;  ; class  THbookKey;  HBOOK Key. More...;  ; class  THbookTree;  A wrapper class supporting Hbook ntuples (CWN and RWN). More...;  ; class  THnBase;  Multidimensional histogram base. More...;  ; class  THnSparse;  Efficient multidimensional histogram. More...;  ; class  TKDE;  Kernel Density Estimation class. More...;  ; class  TLimit;   Legacy Code TLimit is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TLimit might still be a valid solution. Consider switching to RooStats.Algorithm to compute 95% CL limits using the Likelihood ratio semi-bayesian method. More...;  ; class  TMultiDimFit;  Multidimensional Fits in ROOT. More...;  ; class  TPrincipal;  Principal Components Analysis (PCA) More...;  ; class  TProfile2PolyBin;  Helper class to represent a bin in the TProfile2Poly histogram. More...;  ; ",MatchSource.WIKI,doc/master/group__Hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Hist.html
Modifiability,inherit,inheritance,"aximum precision 7 digits; TH3D : histograms with one double per channel. Maximum precision 14 digits. See also:; The Chapter about the Histogram classes in the Users Guide; The Chapter about Fitting Histogram in the Users Guide; How to use the Histogram classes; How to Merge files with histograms and Trees; How to Fit Histograms; How to Fit find peaks in histograms; How to convert Hbook/PAW files to ROOT . Modules;  Painting classes;  ;  Histogram classes.;  ;  Graph classes.;  ;  Function classes.;  ;  ROOT 7 histogram classes.;  ;  Advanced spectra processing classes.;  ;  TUnfold classes;  . Classes; class  TBackCompFitter;  Backward compatible implementation of TVirtualFitter. More...;  ; class  TBinomialEfficiencyFitter;  Binomial fitter for the division of two histograms. More...;  ; class  TConfidenceLevel;  Class to compute 95% CL limits. More...;  ; class  TEfficiency;  Class to handle efficiency histograms. More...;  ; class  TFitResult;  Extends the ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O. More...;  ; class  TFormula;  The Formula class. More...;  ; class  ROOT::v5::TFormula;  The FORMULA class (ROOT version 5) More...;  ; class  ROOT::v5::TFormulaPrimitive;  The Formula Primitive class. More...;  ; class  THbookBranch;  HBOOK Branch. More...;  ; class  THbookFile;  This class is an interface to the Hbook objects in Hbook files. More...;  ; class  THbookKey;  HBOOK Key. More...;  ; class  THbookTree;  A wrapper class supporting Hbook ntuples (CWN and RWN). More...;  ; class  THnBase;  Multidimensional histogram base. More...;  ; class  THnSparse;  Efficient multidimensional histogram. More...;  ; class  TKDE;  Kernel Density Estimation class. More...;  ; class  TLimit;   Legacy Code TLimit is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TLimit might still be a valid solution.",MatchSource.WIKI,doc/master/group__Hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Hist.html
Availability,error,error,"ntation) More...;  ; class  TH2C;  2-D histogram with a byte per channel (see TH1 documentation) More...;  ; class  TH2D;  2-D histogram with a double per channel (see TH1 documentation) More...;  ; class  TH2F;  2-D histogram with a float per channel (see TH1 documentation) More...;  ; class  TH2I;  2-D histogram with an int per channel (see TH1 documentation) More...;  ; class  TH2L;  2-D histogram with a long64 per channel (see TH1 documentation) More...;  ; class  TH2Poly;  2D Histogram with Polygonal Bins More...;  ; class  TH2PolyBin;  Helper class to represent a bin in the TH2Poly histogram. More...;  ; class  TH2S;  2-D histogram with a short per channel (see TH1 documentation) More...;  ; class  TH3;  The 3-D histogram classes derived from the 1-D histogram classes. More...;  ; class  TH3C;  3-D histogram with a byte per channel (see TH1 documentation) More...;  ; class  TH3D;  3-D histogram with a double per channel (see TH1 documentation) More...;  ; class  TH3F;  3-D histogram with a float per channel (see TH1 documentation) More...;  ; class  TH3I;  3-D histogram with an int per channel (see TH1 documentation) More...;  ; class  TH3L;  3-D histogram with a long64 per channel (see TH1 documentation) More...;  ; class  TH3S;  3-D histogram with a short per channel (see TH1 documentation) More...;  ; class  THLimitsFinder;  Class to compute nice axis limits. More...;  ; class  THn;  Multidimensional histogram. More...;  ; class  THStack;  The Histogram stack class. More...;  ; class  TProfile;  Profile Histogram. More...;  ; class  TProfile2D;  Profile2D histograms are used to display the mean value of Z and its error for each cell in X,Y. More...;  ; class  TProfile2Poly;  2D Profile Histogram with Polygonal Bins. More...;  ; class  TProfile3D;  Profile3D histograms are used to display the mean value of T and its RMS for each cell in X,Y,Z. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Histograms.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Histograms.html
Availability,error,errors,. ROOT: Histograms and graphs painting classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Histograms and graphs painting classes.Histogram Library » Painting classes. ; The histograms and graphs plotting options are described in details in the THistPainter and TGraphPainter classes. Some related tutorials:. graph.C: Using and drawing a simple TGraph.; graph2derrorsfit.C: TGraph2D with errors drawing.; h1draw.C: Drawing Options for 1D Histograms.; hbars.C: Demo of option bar with histograms.; hsimple.C: Simple drawing of a 1D Histograms.; hsum.C: Filling several histograms and some graphics options.; surfaces.C: Drawing a TH2 as a 2-D surface. Some related HowTos:; How to Draw objects ?; How to change the position of the statistics box on histogram plot ?; How to draw several TGraph in one common axis system ? . Classes; class  TGraph2DPainter;  The TGraphDelaunay painting class. More...;  ; class  TGraphPainter;  The graph painter class. More...;  ; class  THistPainter;  The histogram painter class. More...;  ; class  TPainter3dAlgorithms;  The Legos and Surfaces painter class. More...;  ; class  TPaletteAxis;  The palette painting class. More...;  ; class  TVirtualGraphPainter;  Abstract interface to a histogram painter. More...;  ; class  TVirtualHistPainter;  Abstract interface to a histogram painter. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__Histpainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Histpainter.html
Integrability,interface,interface,. ROOT: Histograms and graphs painting classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Histograms and graphs painting classes.Histogram Library » Painting classes. ; The histograms and graphs plotting options are described in details in the THistPainter and TGraphPainter classes. Some related tutorials:. graph.C: Using and drawing a simple TGraph.; graph2derrorsfit.C: TGraph2D with errors drawing.; h1draw.C: Drawing Options for 1D Histograms.; hbars.C: Demo of option bar with histograms.; hsimple.C: Simple drawing of a 1D Histograms.; hsum.C: Filling several histograms and some graphics options.; surfaces.C: Drawing a TH2 as a 2-D surface. Some related HowTos:; How to Draw objects ?; How to change the position of the statistics box on histogram plot ?; How to draw several TGraph in one common axis system ? . Classes; class  TGraph2DPainter;  The TGraphDelaunay painting class. More...;  ; class  TGraphPainter;  The graph painter class. More...;  ; class  THistPainter;  The histogram painter class. More...;  ; class  TPainter3dAlgorithms;  The Legos and Surfaces painter class. More...;  ; class  TPaletteAxis;  The palette painting class. More...;  ; class  TVirtualGraphPainter;  Abstract interface to a histogram painter. More...;  ; class  TVirtualHistPainter;  Abstract interface to a histogram painter. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__Histpainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Histpainter.html
Usability,simpl,simple,. ROOT: Histograms and graphs painting classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Histograms and graphs painting classes.Histogram Library » Painting classes. ; The histograms and graphs plotting options are described in details in the THistPainter and TGraphPainter classes. Some related tutorials:. graph.C: Using and drawing a simple TGraph.; graph2derrorsfit.C: TGraph2D with errors drawing.; h1draw.C: Drawing Options for 1D Histograms.; hbars.C: Demo of option bar with histograms.; hsimple.C: Simple drawing of a 1D Histograms.; hsum.C: Filling several histograms and some graphics options.; surfaces.C: Drawing a TH2 as a 2-D surface. Some related HowTos:; How to Draw objects ?; How to change the position of the statistics box on histogram plot ?; How to draw several TGraph in one common axis system ? . Classes; class  TGraph2DPainter;  The TGraphDelaunay painting class. More...;  ; class  TGraphPainter;  The graph painter class. More...;  ; class  THistPainter;  The histogram painter class. More...;  ; class  TPainter3dAlgorithms;  The Legos and Surfaces painter class. More...;  ; class  TPaletteAxis;  The palette painting class. More...;  ; class  TVirtualGraphPainter;  Abstract interface to a histogram painter. More...;  ; class  TVirtualHistPainter;  Abstract interface to a histogram painter. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__Histpainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Histpainter.html
Integrability,protocol,protocol,". ROOT: HTTP server. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; HTTP server. ; THttpServer-related classes to provide HTTP protocol to ROOT application. . Classes; class  TCivetweb;  THttpEngine implementation, based on civetweb embedded server. More...;  ; class  TFastCgi;  THttpEngine implementation, based on fastcgi package. More...;  ; class  THttpCallArg;  Contains arguments for single HTTP call. More...;  ; class  THttpEngine;  Abstract class for implementing http protocol for THttpServer. More...;  ; class  THttpLongPollEngine;  Emulation of websocket with long poll requests. More...;  ; class  THttpServer;  Online http server for arbitrary ROOT application. More...;  ; class  THttpWSHandler;  Class for user-side handling of websocket with THttpServer. More...;  ; class  TRootSniffer;  Sniffer of ROOT objects, data provider for THttpServer. More...;  ; class  TRootSnifferFull;  Extends TRootSniffer for many ROOT classes. More...;  ; class  TRootSnifferScanRec;  Structure used to scan hierarchies of ROOT objects. More...;  ; class  TRootSnifferStore;  Abstract interface for storage of hierarchy scan in TRootSniffer. More...;  ; class  TRootSnifferStoreJson;  Storage of hierarchy scan in TRootSniffer in JSON format. More...;  ; class  TRootSnifferStoreXml;  Storage of hierarchy scan in TRootSniffer in XML format. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__http.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__http.html
Deployability,integrat,integration,". ROOT: Numerical Integration. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Classes |; Enumerations ; Numerical IntegrationMath » MathCore | Math » MathMore » Numerical Algorithms. ; Classes for numerical integration of functions. ; These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator). The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones. The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and ROOT::Math::IntegratorMultiDimOptions classes. . Modules;  Numerical Monte Carlo Integration Classes;  Classes implementing method for Monte Carlo Integration. ;  . Classes; class  ROOT::Math::AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  ROOT::Math::BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  ROOT::Math::GaussIntegrator;  User class for performing function integration. More...;  ; class  ROOT::Math::GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  ROOT::Math::GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  ROOT::Math::IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  ROOT::Math::IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  ROOT::Math::IntegratorOneDim;  User Class fo",MatchSource.WIKI,doc/master/group__Integration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Integration.html
Energy Efficiency,adapt,adaptive,". ROOT: Numerical Integration. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Classes |; Enumerations ; Numerical IntegrationMath » MathCore | Math » MathMore » Numerical Algorithms. ; Classes for numerical integration of functions. ; These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator). The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones. The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and ROOT::Math::IntegratorMultiDimOptions classes. . Modules;  Numerical Monte Carlo Integration Classes;  Classes implementing method for Monte Carlo Integration. ;  . Classes; class  ROOT::Math::AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  ROOT::Math::BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  ROOT::Math::GaussIntegrator;  User class for performing function integration. More...;  ; class  ROOT::Math::GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  ROOT::Math::GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  ROOT::Math::IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  ROOT::Math::IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  ROOT::Math::IntegratorOneDim;  User Class fo",MatchSource.WIKI,doc/master/group__Integration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Integration.html
Integrability,integrat,integration,". ROOT: Numerical Integration. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Classes |; Enumerations ; Numerical IntegrationMath » MathCore | Math » MathMore » Numerical Algorithms. ; Classes for numerical integration of functions. ; These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator). The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones. The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and ROOT::Math::IntegratorMultiDimOptions classes. . Modules;  Numerical Monte Carlo Integration Classes;  Classes implementing method for Monte Carlo Integration. ;  . Classes; class  ROOT::Math::AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  ROOT::Math::BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  ROOT::Math::GaussIntegrator;  User class for performing function integration. More...;  ; class  ROOT::Math::GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  ROOT::Math::GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  ROOT::Math::IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  ROOT::Math::IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  ROOT::Math::IntegratorOneDim;  User Class fo",MatchSource.WIKI,doc/master/group__Integration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Integration.html
Modifiability,adapt,adaptive,". ROOT: Numerical Integration. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Classes |; Enumerations ; Numerical IntegrationMath » MathCore | Math » MathMore » Numerical Algorithms. ; Classes for numerical integration of functions. ; These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator). The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones. The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and ROOT::Math::IntegratorMultiDimOptions classes. . Modules;  Numerical Monte Carlo Integration Classes;  Classes implementing method for Monte Carlo Integration. ;  . Classes; class  ROOT::Math::AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  ROOT::Math::BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  ROOT::Math::GaussIntegrator;  User class for performing function integration. More...;  ; class  ROOT::Math::GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  ROOT::Math::GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  ROOT::Math::IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  ROOT::Math::IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  ROOT::Math::IntegratorOneDim;  User Class fo",MatchSource.WIKI,doc/master/group__Integration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Integration.html
Performance,perform,performing,nction using an adaptive method or MonteCarlo Integration (GSLMCIntegrator). The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones. The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and ROOT::Math::IntegratorMultiDimOptions classes. . Modules;  Numerical Monte Carlo Integration Classes;  Classes implementing method for Monte Carlo Integration. ;  . Classes; class  ROOT::Math::AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  ROOT::Math::BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  ROOT::Math::GaussIntegrator;  User class for performing function integration. More...;  ; class  ROOT::Math::GaussLegendreIntegrator;  User class for performing function integration. More...;  ; class  ROOT::Math::GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  ROOT::Math::IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  ROOT::Math::IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  ROOT::Math::IntegratorOneDim;  User Class for performing numerical integration of a function in one dimension. More...;  ; class  ROOT::Math::IntegratorOneDimOptions;  Numerical one dimensional integration options. More...;  ; class  ROOT::Math::VirtualIntegrator;  Abstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines th,MatchSource.WIKI,doc/master/group__Integration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Integration.html
Usability,simpl,simple,"lasses like ROOT::Math::GSLMCIntegrator. More...;  ; class  ROOT::Math::VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  . Enumerations; enum  ROOT::Math::Integration::GKRule { ;   ROOT::Math::Integration::kGAUSS15 = 1; , ROOT::Math::Integration::kGAUSS21 = 2; , ROOT::Math::Integration::kGAUSS31 = 3; , ROOT::Math::Integration::kGAUSS41 = 4; , ;   ROOT::Math::Integration::kGAUSS51 = 5; , ROOT::Math::Integration::kGAUSS61 = 6. };  enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type More...;  ; enum  ROOT::Math::IntegrationOneDim::Type { ;   ROOT::Math::IntegrationOneDim::kDEFAULT = -1; , ROOT::Math::IntegrationOneDim::kGAUSS; , ROOT::Math::IntegrationOneDim::kLEGENDRE; , ROOT::Math::IntegrationOneDim::kADAPTIVE; , ;   ROOT::Math::IntegrationOneDim::kADAPTIVESINGULAR; , ROOT::Math::IntegrationOneDim::kNONADAPTIVE. };  enumeration specifying the integration types. More...;  . Enumeration Type Documentation. ◆ GKRule. enum ROOT::Math::Integration::GKRule. enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type . EnumeratorkGAUSS15 ; kGAUSS21 ; kGAUSS31 ; kGAUSS41 ; kGAUSS51 ; kGAUSS61 . Definition at line 58 of file IntegrationTypes.h. ◆ Type. enum ROOT::Math::IntegrationOneDim::Type. enumeration specifying the integration types. . EnumeratorkDEFAULT default type specified in the static options . kGAUSS simple Gauss integration method with fixed rule . kLEGENDRE Gauss-Legendre integration. . kADAPTIVE to be used for general functions without singularities . kADAPTIVESINGULAR default adaptive integration type which can be used in the case of the presence of singularities. . kNONADAPTIVE to be used for smooth functions . Definition at line 32 of file AllIntegrationTypes.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Integration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Integration.html
Availability,avail,availables,". ROOT: Interpolation Classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Enumerations ; Interpolation ClassesMath » MathCore | Math » MathMore » Numerical Algorithms. ; Classes for interpolation of points. . Classes; class  ROOT::Math::GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  ROOT::Math::Interpolator;  Class for performing function interpolation of points. More...;  . Enumerations; enum  ROOT::Math::Interpolation::Type { ;   ROOT::Math::Interpolation::kLINEAR; , ROOT::Math::Interpolation::kPOLYNOMIAL; , ROOT::Math::Interpolation::kCSPLINE; , ROOT::Math::Interpolation::kCSPLINE_PERIODIC; , ;   ROOT::Math::Interpolation::kAKIMA; , ROOT::Math::Interpolation::kAKIMA_PERIODIC. };  Enumeration defining the types of interpolation methods availables. More...;  . Enumeration Type Documentation. ◆ Type. enum ROOT::Math::Interpolation::Type. Enumeration defining the types of interpolation methods availables. ; Passed as argument to instantiate mathlib::Interpolator objects. The types available are (more information is available in the GSL manual): . LINEAR interpolation; . POLYNOMIAL interpolation, to be used for small number of points since introduces large oscillations; . CSPLINE cubic spline with natural boundary conditions; . CSPLINE_PERIODIC cubic spline with periodic boundary conditions; . AKIMA, Akima spline with natural boundary conditions ( requires a minimum of 5 points); . AKIMA_PERIODIC, Akima spline with periodic boundaries ( requires a minimum of 5 points); . EnumeratorkLINEAR ; kPOLYNOMIAL ; kCSPLINE ; kCSPLINE_PERIODIC ; kAKIMA ; kAKIMA_PERIODIC . Definition at line 60 of file InterpolationTypes.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Interpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Interpolation.html
Performance,perform,performing,". ROOT: Interpolation Classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Enumerations ; Interpolation ClassesMath » MathCore | Math » MathMore » Numerical Algorithms. ; Classes for interpolation of points. . Classes; class  ROOT::Math::GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  ROOT::Math::Interpolator;  Class for performing function interpolation of points. More...;  . Enumerations; enum  ROOT::Math::Interpolation::Type { ;   ROOT::Math::Interpolation::kLINEAR; , ROOT::Math::Interpolation::kPOLYNOMIAL; , ROOT::Math::Interpolation::kCSPLINE; , ROOT::Math::Interpolation::kCSPLINE_PERIODIC; , ;   ROOT::Math::Interpolation::kAKIMA; , ROOT::Math::Interpolation::kAKIMA_PERIODIC. };  Enumeration defining the types of interpolation methods availables. More...;  . Enumeration Type Documentation. ◆ Type. enum ROOT::Math::Interpolation::Type. Enumeration defining the types of interpolation methods availables. ; Passed as argument to instantiate mathlib::Interpolator objects. The types available are (more information is available in the GSL manual): . LINEAR interpolation; . POLYNOMIAL interpolation, to be used for small number of points since introduces large oscillations; . CSPLINE cubic spline with natural boundary conditions; . CSPLINE_PERIODIC cubic spline with periodic boundary conditions; . AKIMA, Akima spline with natural boundary conditions ( requires a minimum of 5 points); . AKIMA_PERIODIC, Akima spline with periodic boundaries ( requires a minimum of 5 points); . EnumeratorkLINEAR ; kPOLYNOMIAL ; kCSPLINE ; kCSPLINE_PERIODIC ; kAKIMA ; kAKIMA_PERIODIC . Definition at line 60 of file InterpolationTypes.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Interpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Interpolation.html
Availability,avail,available,". ROOT: Input/Output Library. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Input/Output Library. ; The library collecting the ROOT classes dedicated to data input and output.; For an overview of I/O in ROOT, see the following pages in the ROOT manual:. ROOT files; Trees: ROOT's columnar storage; I/O concepts: a collection of more advanced I/O-related topics; I/O of custom classes: how to read and write user-defined C++ objects. For ROOT I/O developers, a detailed internal description of the ROOT files layout is also available. . Classes; class  ROOT::Internal::RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  ROOT::Internal::RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  ROOT::Internal::RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  ROOT::Internal::RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  TArchiveFile;  Class describing an archive file containing multiple sub-files, like a ZIP or TAR archive. More...;  ; class  TBufferFile;  The concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket. More...;  ; class  TBufferIO;  Direct subclass of TBuffer, implements common methods for TBufferFile and TBufferText classes. More...;  ; class  TBufferJSON;  Class for serializing object to and from JavaScript Object Notation (JSON) format. More...;  ; class  ROOT::TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  ROOT::TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TBufferSQL2;  Converts data to SQL statements or read data from SQL tables. More...;  ; class  TBufferTex",MatchSource.WIKI,doc/master/group__IO.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__IO.html
Deployability,release,release,". More...;  ; class  TSAXParser;  TSAXParser is a subclass of TXMLParser, it is a wraper class to libxml library. More...;  ; class  TSQLClassInfo;  Contains information about tables specific to one class and version. More...;  ; class  TSQLColumnData;  ; class  TSQLFile;  Access an SQL db via the TFile interface. More...;  ; class  TSQLObjectData;  TSQLObjectData is used in TBufferSQL2 class in reading procedure. More...;  ; class  TSQLObjectDataPool;  XML object keeper class. More...;  ; class  TSQLObjectInfo;  Info (classname, version) about object in database. More...;  ; class  TSQLStructure;  This is hierarchical structure, which is created when data is written by TBufferSQL2. More...;  ; class  TStreamerInfo;  Describes a persistent version of a class. More...;  ; class  TVirtualArray;  Wrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary. More...;  ; class  TVirtualCollectionIterators;  Small helper class to generically acquire and release iterators. More...;  ; class  TVirtualCollectionPtrIterators;  ; class  TVirtualObject;  Wrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary. More...;  ; class  TXMLAttr;  TXMLAttribute is the attribute of an Element. More...;  ; class  TXMLDocument;  TXMLDocument contains a pointer to an xmlDoc structure, after the parser returns a tree built during the document analysis. More...;  ; class  TXMLNode;  TXMLNode contains a pointer to xmlNode, which is a node under the DOM tree. More...;  ; class  TXMLParser;  TXMLParser is an abstract class which interfaces with Libxml2. More...;  ; class  TZIPFile;  Describes a ZIP archive file containing multiple sub-files. More...;  ; class  TZIPMember;  A ZIP archive consists of files compressed with the popular ZLIB compression algorithm; this class records the information about a single archive member. More...;  . ROOT maste",MatchSource.WIKI,doc/master/group__IO.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__IO.html
Integrability,wrap,wraps,". ROOT: Input/Output Library. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Input/Output Library. ; The library collecting the ROOT classes dedicated to data input and output.; For an overview of I/O in ROOT, see the following pages in the ROOT manual:. ROOT files; Trees: ROOT's columnar storage; I/O concepts: a collection of more advanced I/O-related topics; I/O of custom classes: how to read and write user-defined C++ objects. For ROOT I/O developers, a detailed internal description of the ROOT files layout is also available. . Classes; class  ROOT::Internal::RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  ROOT::Internal::RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  ROOT::Internal::RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  ROOT::Internal::RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  TArchiveFile;  Class describing an archive file containing multiple sub-files, like a ZIP or TAR archive. More...;  ; class  TBufferFile;  The concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket. More...;  ; class  TBufferIO;  Direct subclass of TBuffer, implements common methods for TBufferFile and TBufferText classes. More...;  ; class  TBufferJSON;  Class for serializing object to and from JavaScript Object Notation (JSON) format. More...;  ; class  ROOT::TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  ROOT::TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TBufferSQL2;  Converts data to SQL statements or read data from SQL tables. More...;  ; class  TBufferTex",MatchSource.WIKI,doc/master/group__IO.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__IO.html
Modifiability,portab,portable,". ROOT: Input/Output Library. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Input/Output Library. ; The library collecting the ROOT classes dedicated to data input and output.; For an overview of I/O in ROOT, see the following pages in the ROOT manual:. ROOT files; Trees: ROOT's columnar storage; I/O concepts: a collection of more advanced I/O-related topics; I/O of custom classes: how to read and write user-defined C++ objects. For ROOT I/O developers, a detailed internal description of the ROOT files layout is also available. . Classes; class  ROOT::Internal::RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  ROOT::Internal::RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  ROOT::Internal::RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  ROOT::Internal::RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  TArchiveFile;  Class describing an archive file containing multiple sub-files, like a ZIP or TAR archive. More...;  ; class  TBufferFile;  The concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket. More...;  ; class  TBufferIO;  Direct subclass of TBuffer, implements common methods for TBufferFile and TBufferText classes. More...;  ; class  TBufferJSON;  Class for serializing object to and from JavaScript Object Notation (JSON) format. More...;  ; class  ROOT::TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  ROOT::TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TBufferSQL2;  Converts data to SQL statements or read data from SQL tables. More...;  ; class  TBufferTex",MatchSource.WIKI,doc/master/group__IO.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__IO.html
Performance,queue,queue," ownership. More...;  ; class  ROOT::Internal::RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  ROOT::Internal::RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  TArchiveFile;  Class describing an archive file containing multiple sub-files, like a ZIP or TAR archive. More...;  ; class  TBufferFile;  The concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket. More...;  ; class  TBufferIO;  Direct subclass of TBuffer, implements common methods for TBufferFile and TBufferText classes. More...;  ; class  TBufferJSON;  Class for serializing object to and from JavaScript Object Notation (JSON) format. More...;  ; class  ROOT::TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  ROOT::TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TBufferSQL2;  Converts data to SQL statements or read data from SQL tables. More...;  ; class  TBufferText;  Base class for text-based streamers like TBufferJSON or TBufferXML Special actions list will use methods, introduced in this class. More...;  ; class  TBufferXML;  Class for serializing/deserializing object to/from xml. More...;  ; class  TCollectionClassStreamer;  Class streamer object to implement TClassStreamer functionality for I/O emulation. More...;  ; class  TCollectionMemberStreamer;  Class streamer object to implement TMemberStreamer functionality for I/O emulation. More...;  ; class  TCollectionStreamer;  Class streamer object to implement TClassStreamer functionality for I/O emulation. More...;  ; class  TStreamerInfoActions::TConfiguration;  Base class of the Configurations. More...;  ; class  TConvertClonesArrayToProxy;  Small helper to read a TBuffer containing a TClo",MatchSource.WIKI,doc/master/group__IO.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__IO.html
Security,access,access,". ROOT: Input/Output Library. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Input/Output Library. ; The library collecting the ROOT classes dedicated to data input and output.; For an overview of I/O in ROOT, see the following pages in the ROOT manual:. ROOT files; Trees: ROOT's columnar storage; I/O concepts: a collection of more advanced I/O-related topics; I/O of custom classes: how to read and write user-defined C++ objects. For ROOT I/O developers, a detailed internal description of the ROOT files layout is also available. . Classes; class  ROOT::Internal::RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  ROOT::Internal::RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  ROOT::Internal::RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  ROOT::Internal::RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  TArchiveFile;  Class describing an archive file containing multiple sub-files, like a ZIP or TAR archive. More...;  ; class  TBufferFile;  The concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket. More...;  ; class  TBufferIO;  Direct subclass of TBuffer, implements common methods for TBufferFile and TBufferText classes. More...;  ; class  TBufferJSON;  Class for serializing object to and from JavaScript Object Notation (JSON) format. More...;  ; class  ROOT::TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  ROOT::TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TBufferSQL2;  Converts data to SQL statements or read data from SQL tables. More...;  ; class  TBufferTex",MatchSource.WIKI,doc/master/group__IO.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__IO.html
Testability,log,logical," ; class  TStreamerInfoActions::TConfiguration;  Base class of the Configurations. More...;  ; class  TConvertClonesArrayToProxy;  Small helper to read a TBuffer containing a TClonesArray into any valid collection. More...;  ; class  TDCacheFile;  A TDCacheFile is like a normal TFile except that it may read and write its data via a dCache server (for more on the dCache daemon see http://www-dcache.desy.de/. More...;  ; class  TDirectoryFile;  A ROOT file is structured in Directories (like a file system). More...;  ; class  TDomParser;  DOM stands for the Document Object Model; this is an API for accessing XML or HTML structured documents. More...;  ; class  TEmulatedCollectionProxy;  Streamer around an arbitrary STL like container, which implements basic container functionality. More...;  ; class  TEmulatedMapProxy;  Streamer around a map container. More...;  ; class  TFile;  A ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-like logical structure, possibly including subdirectory hierarchies. More...;  ; class  TFileCacheRead;  A cache when reading files over the network. More...;  ; class  TFileCacheWrite;  A cache when writing files over the network. More...;  ; class  TFileMerger;  This class provides file copy and merging services. More...;  ; class  TFileOpenHandle;  Class holding info about the file being opened. More...;  ; class  TFilePrefetch;  The prefetching mechanism uses two classes (TFilePrefetch and TFPBlock) to prefetch in advance a block of tree entries. More...;  ; class  TFPBlock;  This class represents the encapsulation of a block request. More...;  ; class  TFree;  Service class for TFile. More...;  ; class  TGenCollectionProxy;  Proxy around an arbitrary container, which implements basic functionality and iteration. More...;  ; class  TGenMapProxy;  Localoptimization class. More...;  ; class  TGenSetProxy;  Localoptimization class. More...;  ; class  TGenVectorBoolProxy;  Local optimization class.",MatchSource.WIKI,doc/master/group__IO.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__IO.html
Energy Efficiency,charge,charge,"order to make easier material and mixture creation, one can use the pre-built table of elements owned by TGeoManager class:; TGeoElementTable *table = gGeoManager->GetElementTable();; TGeoElement *element1 = table->GetElement(Int_t Z);; TGeoElement *element2 = table->FindElement(""Copper"");; Int_tint Int_tDefinition RtypesCore.h:45; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TGeoElementTableTable of elements.Definition TGeoElement.h:398; TGeoElementTable::GetElementTGeoElement * GetElement(Int_t z)Definition TGeoElement.h:435; TGeoElementTable::FindElementTGeoElement * FindElement(const char *name) constSearch an element by symbol or full name Exact matching.Definition TGeoElement.cxx:1334; TGeoElementBase class for chemical elements.Definition TGeoElement.h:36; TGeoManager::GetElementTableTGeoElementTable * GetElementTable()Returns material table. Creates it if not existing.Definition TGeoManager.cxx:3624; Materials made of single elements can be defined by their atomic mass (A), charge (Z) and density (rho). One can also create a material by specifying the element that it is made of. Optionally the radiation and absorption lengths can be also provided; otherwise they can be computed on-demand [G3]. The class representing them is TGeoMaterial:; TGeoMaterial(const char *name,Double_t a,Double_t z,; Double_t density, Double_t radlen=0,Double_t intlen=0);; TGeoMaterial(const char *name, TGeoElement *elem,; Double_t density);; TGeoMaterial(const char* name, Double_t a, Double_t z,; Double_t rho,; TGeoMaterial::EGeoMaterialState state,; Double_t temperature = STP_temperature,; Double_t pressure = STP_pressure); a#define a(i)Definition RSha256.hxx:99; Double_tdouble Double_tDefinition RtypesCore.h:59; namechar name[80]Definition TGX11.cxx:110; STP_temperaturestatic const Double_t STP_temperatureDefinition TGeoMaterial.h:31; STP_pressurestatic const Double_t STP_pressureDefinition TGeoMaterial.h:32; TGeoMaterialBase class describing materia",MatchSource.WIKI,doc/master/group__Materials__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Materials__classes.html
Integrability,interface,interfaced,"y, Double_t radlen=0,Double_t intlen=0);; TGeoMaterial(const char *name, TGeoElement *elem,; Double_t density);; TGeoMaterial(const char* name, Double_t a, Double_t z,; Double_t rho,; TGeoMaterial::EGeoMaterialState state,; Double_t temperature = STP_temperature,; Double_t pressure = STP_pressure); a#define a(i)Definition RSha256.hxx:99; Double_tdouble Double_tDefinition RtypesCore.h:59; namechar name[80]Definition TGX11.cxx:110; STP_temperaturestatic const Double_t STP_temperatureDefinition TGeoMaterial.h:31; STP_pressurestatic const Double_t STP_pressureDefinition TGeoMaterial.h:32; TGeoMaterialBase class describing materials.Definition TGeoMaterial.h:34; TGeoMaterial::EGeoMaterialStateEGeoMaterialStateDefinition TGeoMaterial.h:37; Any material or derived class is automatically indexed after creation. The assigned index is corresponding to the last entry in the list of materials owned by TGeoManager class. This can be changed using the TGeoMaterial::SetIndex() method, however it is not recommended while using the geometry package interfaced with a transport MC. Radiation and absorption lengths can be set using:; TGeoMaterial::SetRadLen(Double_t radlen, Double_t intlen);; TGeoMaterial::SetRadLenvoid SetRadLen(Double_t radlen, Double_t intlen=0.)Set radiation/absorption lengths.Definition TGeoMaterial.cxx:496. radlen: radiation length. If radlen<=0 the value is computed using GSMATE algorithm in GEANT3; intlen: absorption length. Material state, temperature and pressure can be changed via setters. Another material property is transparency. It can be defined and used while viewing the geometry with OpenGL.; void SetTransparency (Char_t transparency = 0); Char_tchar Char_tDefinition RtypesCore.h:37. transparency: between 0 (opaque default) to 100 (fully transparent). One can attach to a material a user-defined object storing Cerenkov properties. Another hook for material shading properties is currently not in use. Mixtures are materials made of several elements. They ",MatchSource.WIKI,doc/master/group__Materials__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Materials__classes.html
Modifiability,evolve,evolve,"ial.h:159; Elements have to be further defined one by one:; void TGeoMixture::DefineElement(Int_t iel,Double_t a,Double_t z,; Double_t weigth);; void TGeoMixture::DefineElement(Int_t iel, TGeoElement *elem,; Double_t weight);; void TGeoMixture::DefineElement(Int_t iel, Int_t z, Int_t natoms);; TGeoMixture::DefineElementvoid DefineElement(Int_t iel, Double_t a, Double_t z, Double_t weight)Definition TGeoMaterial.h:226; or:; void AddElement(TGeoMaterial* mat, Double_t weight);; void AddElement(TGeoElement* elem, Double_t weight);; void AddElement(TGeoElement* elem, Int_t natoms);; void AddElement(Double_t a, Double_t z, Double_t weight). iel: index of the element[0,nel-1]; a and z: the atomic mass and charge; weight: proportion by mass of the elements; natoms: number of atoms of the element in the molecule making the mixture. The radiation length is automatically computed when all elements are defined. Since tracking MC provide several other ways to create materials/mixtures, the materials classes are likely to evolve as the interfaces to these engines are being developed. Generally in the process of tracking material properties are not enough and more specific media properties have to be defined. These highly depend on the MC performing tracking and sometimes allow the definition of different media properties (e.g. energy or range cuts) for the same material. Radionuclides; A new class TGeoElementRN was introduced in this version to provide support for radioactive nuclides and their decays. A database of 3162 radionuclides can be loaded on demand via the table of elements (TGeoElementTable class). One can make then materials/mixtures based on these radionuclides and use them in a geometry; root[] TGeoManager *geom = new TGeoManager(""geom"",""radionuclides"");; root[] TGeoElementTable *table = geom->GetElementTable();; root[] TGeoElementRN *c14 = table->GetElementRN(14,6); // A,Z; root[] c14->Print();; 6-C-014 ENDF=60140; A=14; Z=6; Iso=0; Level=0[MeV]; Dmass=3.0199[MeV]",MatchSource.WIKI,doc/master/group__Materials__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Materials__classes.html
Performance,perform,performing,"_t z, Int_t natoms);; TGeoMixture::DefineElementvoid DefineElement(Int_t iel, Double_t a, Double_t z, Double_t weight)Definition TGeoMaterial.h:226; or:; void AddElement(TGeoMaterial* mat, Double_t weight);; void AddElement(TGeoElement* elem, Double_t weight);; void AddElement(TGeoElement* elem, Int_t natoms);; void AddElement(Double_t a, Double_t z, Double_t weight). iel: index of the element[0,nel-1]; a and z: the atomic mass and charge; weight: proportion by mass of the elements; natoms: number of atoms of the element in the molecule making the mixture. The radiation length is automatically computed when all elements are defined. Since tracking MC provide several other ways to create materials/mixtures, the materials classes are likely to evolve as the interfaces to these engines are being developed. Generally in the process of tracking material properties are not enough and more specific media properties have to be defined. These highly depend on the MC performing tracking and sometimes allow the definition of different media properties (e.g. energy or range cuts) for the same material. Radionuclides; A new class TGeoElementRN was introduced in this version to provide support for radioactive nuclides and their decays. A database of 3162 radionuclides can be loaded on demand via the table of elements (TGeoElementTable class). One can make then materials/mixtures based on these radionuclides and use them in a geometry; root[] TGeoManager *geom = new TGeoManager(""geom"",""radionuclides"");; root[] TGeoElementTable *table = geom->GetElementTable();; root[] TGeoElementRN *c14 = table->GetElementRN(14,6); // A,Z; root[] c14->Print();; 6-C-014 ENDF=60140; A=14; Z=6; Iso=0; Level=0[MeV]; Dmass=3.0199[MeV];; Hlife=1.81e+11[s] J/P=0+; Abund=0; Htox=5.8e-10; Itox=5.8e-10; Stat=0; Decay modes:; BetaMinus Diso: 0 BR: 100.000% Qval: 0.1565; TGeoElementRNClass representing a radionuclidevoid TGeoManager::SetDefaultRootUnits() { if ( fgDefaultUnits == kRo...Definition TGeoElement.h",MatchSource.WIKI,doc/master/group__Materials__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Materials__classes.html
Security,access,accessed,"s and use them in a geometry; root[] TGeoManager *geom = new TGeoManager(""geom"",""radionuclides"");; root[] TGeoElementTable *table = geom->GetElementTable();; root[] TGeoElementRN *c14 = table->GetElementRN(14,6); // A,Z; root[] c14->Print();; 6-C-014 ENDF=60140; A=14; Z=6; Iso=0; Level=0[MeV]; Dmass=3.0199[MeV];; Hlife=1.81e+11[s] J/P=0+; Abund=0; Htox=5.8e-10; Itox=5.8e-10; Stat=0; Decay modes:; BetaMinus Diso: 0 BR: 100.000% Qval: 0.1565; TGeoElementRNClass representing a radionuclidevoid TGeoManager::SetDefaultRootUnits() { if ( fgDefaultUnits == kRo...Definition TGeoElement.h:132; TGeoElementRN::Printvoid Print(Option_t *option="""") const overridePrint info about the element;.Definition TGeoElement.cxx:594; TGeoManagerThe manager class for any TGeo geometry.Definition TGeoManager.h:44; One can make materials or mixtures from radionuclides:; root[] TGeoMaterial *mat = new TGeoMaterial(""C14"", c14, 2.0);; The following properties of radionuclides can be currently accessed via getters in the TGeoElementRN class:; Atomic number and charge (from the base class TGeoElement). Isomeric number (ISO); ENDF code - following the convention: ENDF=10000*Z+100*A+ISO; Isomeric energy level [MeV]; Mass excess [MeV]; Half life [s]; Spin/Parity - can be retrieved with: TGeoElementRN::GetTitle(); Hynalation and ingestion toxicities; List of decays - TGeoElementRN::GetDecays(). The radioactive decays of a radionuclide are represented by the class TGeoDecayChannel and they are stored in a TObjArray. Decay provides:. Decay mode; Variation of isomeric number; Q value for the decay [GeV]; Parent element; Daughter element. Radionuclides are linked one to each other via their decays, until the last element in the decay chain which must be stable. One can iterate decay chains using the iterator TGeoElemIter:; root[] TGeoElemIter next(c14);; root[] TGeoElementRN *elem;; root[] while ((elem=next())) next.Print();; 6-C-014 (100% BetaMinus) T1/2=1.81e+11; 7-N-014 stable; N#define N; TGeoElemIterI",MatchSource.WIKI,doc/master/group__Materials__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Materials__classes.html
Testability,test,test," defined, one can retrieve the time evolution for the radioactive materials/mixtures by using one of the next two methods:; Method 1; TGeoMaterial::FillMaterialEvolution(TObjArray *population, Double_t precision=0.001); TGeoMaterial::FillMaterialEvolutionvirtual void FillMaterialEvolution(TObjArray *population, Double_t precision=0.001)Fills a user array with all the elements deriving from the possible decay of the top element composin...Definition TGeoMaterial.cxx:742; TObjArrayAn array of TObjects.Definition TObjArray.h:31; To use this method, one has to provide an empty TObjArray object that will be filled with all elements coming from the decay chain of the initial radionuclides contained by the material/mixture. The precision represent the cumulative branching ratio for which decay products are still considered. The population list may contain stable elements as well as radionuclides, depending on the initial elements. To test if an element is a radionuclide:; Bool_t TGeoElement::IsRadioNuclide() const; Bool_tbool Bool_tDefinition RtypesCore.h:63; TGeoElement::IsRadioNuclidevirtual Bool_t IsRadioNuclide() constDefinition TGeoElement.h:82; All radionuclides in the output population list have attached objects that represent the time evolution of their fraction of nuclei with respect to the top radionuclide in the decay chain. These objects (Bateman solutions) can be retrieved and drawn:; TGeoBatemanSol *TGeoElementRN::Ratio();; void TGeoBatemanSol::Draw();; TGeoBatemanSolDefinition TGeoElement.h:286; TGeoBatemanSol::Drawvoid Draw(Option_t *option="""") overrideDraw the solution of Bateman equation versus time.Definition TGeoElement.cxx:1612; TGeoElementRN::RatioTGeoBatemanSol * Ratio() constDefinition TGeoElement.h:188; Method 2; Another method allows to create the evolution of a given radioactive material/mixture at a given moment in time:; TGeoMaterial::DecayMaterial(Double_t time, Double_t precision=0.001); TGeoMaterial::DecayMaterialvirtual TGeoMaterial * Decay",MatchSource.WIKI,doc/master/group__Materials__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Materials__classes.html
Usability,simpl,simple,"edia; The class TGeoMedium describes tracking media properties. This has a pointer to a material and the additional data members representing the properties related to tracking.; TGeoMedium(const char *name,Int_t numed,TGeoMaterial *mat,; Double_t *params=0);; TGeoMediumMedia are used to store properties related to tracking and which are useful only when using geometry ...Definition TGeoMedium.h:23. name: name assigned to the medium; mat: pointer to a material; params: array of additional parameters. Another constructor allows effectively defining tracking parameters in GEANT3 style:; TGeoMedium(const char *name,Int_t numed,Int_t imat,Int_t ifield,; Double_t fieldm,Double_t tmaxfd,Double_t stemax,; Double_t deemax,Double_t epsil,Double_t stmin);; This constructor is reserved for creating tracking media from the VMC interface [...]:. numed: user-defined medium index; imat: unique ID of the material; others: see G3 documentation. Looking at our simple world example, one can see that for creating volumes one needs to create tracking media before. The way to proceed for those not interested in performing tracking with external MC's is to define and use only one dummy tracking medium as in the example (or a NULL pointer). User Interface for Handling Materials and Media; The TGeoManager class contains the API for accessing and handling defined materials:; TGeoManager::GetMaterial(name);; TGeoManager::GetMaterialTGeoMaterial * GetMaterial(const char *matname) constSearch for a named material. All trailing blanks stripped.Definition TGeoManager.cxx:3011; . Classes; class  TGeoElement;  Base class for chemical elements. More...;  ; class  TGeoMaterial;  Base class describing materials. More...;  ; class  TGeoMedium;  Media are used to store properties related to tracking and which are useful only when using geometry with a particle transport MC package (via VMC). More...;  ; class  TGeoMixture;  Mixtures of elements. More...;  . ROOT master - Reference Guide Generated on Tue",MatchSource.WIKI,doc/master/group__Materials__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Materials__classes.html
Availability,avail,available,"n and transformation algorithms. Two package exist in ROOT:; Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. See the GenVector page. UNURAN: Package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions.; Foam Multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW Library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of FFTW.; MLP Library with the neural network class, TMultiLayerPerceptron based on the NN algorithm from the mlpfit package.; Quadp Optimization library with linear and quadratic programming methods. It is based on the Matrix package. Further information is available at the following links:. The Math page in the manual; The Linear Algebra section in the manual; The Fitting histograms page in the manual; [Inventory of Math functions and algorithms] (http://project-mathlibs.web.cern.ch/project-mathlibs/mathTable.html) . Modules;  Physics Vectors;  Vector classes (2D, 3D and 4D / Lorentz vector) and their transformations. ;  ;  MathCore;  The Core Mathematical Library of ROOT. ;  ;  MathMore;  The Mathematical library providing some advanced functionality and based on GSL. ;  ;  Matrix Linear Algebra;  The ROOT Matrix Linear Algebra package. ;  ;  TMinuit;  The Minuit Minimization package. ;  ;  Minuit2 Minimization Library;  New Object-oriented implementation of the MINUIT minimization package. ;  ;  Legacy Physics Classes;  Legacy physics classes. ;  ;  SMatrix Package;  ;  Unuran;  Universal Non Uniform Random number generator for generating non uniform pseudo-random numbers. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41",MatchSource.WIKI,doc/master/group__Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Math.html
Deployability,integrat,integration,". ROOT: Math. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; Math. ; The ROOT Mathematical Libraries. ; They consist of the following components:. MathCore: a self-consistent minimal set of tools required for the basic numerical computing. It provides the major mathematical functions in the namespaces ROOT::Math and TMath, classes for random number generators, TRandom, class for complex numbers, TComplex, common interfaces for function evaluation and numerical algorithms. Basic implementations of some of the numerical algorithms such as integration or derivation, are also provided by MathCore. together with the core classes needed to fit any generic data set.; MathMore: a package incorporating advanced numerical functionality and dependent on external libraries like the GNU Scientific Library (GSL). It complements the MathCore library by providing a more complete sets of special mathematical functions and implementations of the numerical algorithms interfaces defined in MathCore using GSL.; Minimization and Fitting Libraries Libraries required for numerical minimization and fitting. The minimization libraries include the numerical methods for solving the fitting problem by finding minimum of multi-dimensional function. The current common interface for minimization is the class ROOT::Math::Minimizer and implemented by derived classes in the minimization and fitting libraries. The fitting in ROOT is organized in fitting classes present in MathCore in the (ROOT::Fit namespace) for providing the fitting functionality and the use the minimization libraries via the common interface (ROOT::Math::Minimizer). In detail the minimization libraries, implementing all the new and old minimization interface, include:; Minuit: library providing via a class TMinuit an implementation of the popular MINUIT minimization package. In addition the library contains also an implementation of the linear fitter (class TLinearFitter), for solving line",MatchSource.WIKI,doc/master/group__Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Math.html
Integrability,interface,interfaces,". ROOT: Math. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; Math. ; The ROOT Mathematical Libraries. ; They consist of the following components:. MathCore: a self-consistent minimal set of tools required for the basic numerical computing. It provides the major mathematical functions in the namespaces ROOT::Math and TMath, classes for random number generators, TRandom, class for complex numbers, TComplex, common interfaces for function evaluation and numerical algorithms. Basic implementations of some of the numerical algorithms such as integration or derivation, are also provided by MathCore. together with the core classes needed to fit any generic data set.; MathMore: a package incorporating advanced numerical functionality and dependent on external libraries like the GNU Scientific Library (GSL). It complements the MathCore library by providing a more complete sets of special mathematical functions and implementations of the numerical algorithms interfaces defined in MathCore using GSL.; Minimization and Fitting Libraries Libraries required for numerical minimization and fitting. The minimization libraries include the numerical methods for solving the fitting problem by finding minimum of multi-dimensional function. The current common interface for minimization is the class ROOT::Math::Minimizer and implemented by derived classes in the minimization and fitting libraries. The fitting in ROOT is organized in fitting classes present in MathCore in the (ROOT::Fit namespace) for providing the fitting functionality and the use the minimization libraries via the common interface (ROOT::Math::Minimizer). In detail the minimization libraries, implementing all the new and old minimization interface, include:; Minuit: library providing via a class TMinuit an implementation of the popular MINUIT minimization package. In addition the library contains also an implementation of the linear fitter (class TLinearFitter), for solving line",MatchSource.WIKI,doc/master/group__Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Math.html
Performance,perform,perform,"imization libraries via the common interface (ROOT::Math::Minimizer). In detail the minimization libraries, implementing all the new and old minimization interface, include:; Minuit: library providing via a class TMinuit an implementation of the popular MINUIT minimization package. In addition the library contains also an implementation of the linear fitter (class TLinearFitter), for solving linear least square fits.; Minuit2: new object-oriented implementation of MINUIT, with the same minimization algorithms (such as Migrad or Simplex). In addition it provides a new implementation of the Fumili algorithm, a specialized method for finding the minimum of a standard least square or likelihood functions.; Fumili: library providing the implementation of the original Fumili fitting algorithm (class TFumili). Linear algebra. Two libraries are contained in ROOT for describing linear algebra matrices and vector classes:; Matrix: general matrix package providing matrix classes (TMatrixD and TMatrixF) and vector classes (TVectorD and TVectorF) and the complete environment to perform linear algebra calculations, like equation solving and eigenvalue decompositions.; SMatrix: package optimized for high performances matrix and vector computations of small and fixed size. It is based on expression templates to achieve an high level optimization. Physics Vectors: Classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:; Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. See the GenVector page. UNURAN: Package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions.; Foam Multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vector",MatchSource.WIKI,doc/master/group__Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Math.html
Availability,error,error,". ROOT: MathCore. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files |; Classes ; MathCoreMath. ; The Core Mathematical Library of ROOT. ; MathCore provides a collection of functions and C++ classes for HEP numerical computing. This library provides only the basic mathematical functions and algorithms and not all the functionality required by the HEP community. More advanced mathematical functionalities is provided by the MathMore. The current set includes classes and functions for:. Basic special functions used in HEP like the gamma, beta and error function;; Statistical functions : mathematical functions used in statistics, such as the probability density functions and the cumulative distributions functions (lower and upper integral of the pdf's) for continuous and discrete distributions.;; Function Classes and Interfaces :; Generic Function Evaluation Interfaces, including helper class to wrap free (static) and non-static member functions; Parametric Function Evaluation Interfaces. Numerical algorithms: user classes with (in some cases) basic implementations for:; Numerical Integration; Numerical Differentiation; One-dimensional Root-Finding; One-dimensional Minimization and Multi-dimensional Minimization. Fitting and Parameter Estimation :classes for fitting and parameter estimation from a given data set. Note that in this latest release the GenVector (physics and geometry vectors for 2,3 and 4 dimensions with their transformations) is not anymore part of MathCore, but is built as a separate library. MathCore contains instead now classes which were originally part of libCore. These include:. TMath : namespace with mathematical functions and basic function algorithms.; TComplex: class for complex numbers.; Random classes: base class TRandom and the derived classes TRandom1, TRandom2 and TRandom3, implementing the pseudo-random number generators.; Other classes, such as; TKDTree for partitioning the data using a kd-Tre",MatchSource.WIKI,doc/master/group__MathCore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__MathCore.html
Deployability,continuous,continuous,". ROOT: MathCore. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files |; Classes ; MathCoreMath. ; The Core Mathematical Library of ROOT. ; MathCore provides a collection of functions and C++ classes for HEP numerical computing. This library provides only the basic mathematical functions and algorithms and not all the functionality required by the HEP community. More advanced mathematical functionalities is provided by the MathMore. The current set includes classes and functions for:. Basic special functions used in HEP like the gamma, beta and error function;; Statistical functions : mathematical functions used in statistics, such as the probability density functions and the cumulative distributions functions (lower and upper integral of the pdf's) for continuous and discrete distributions.;; Function Classes and Interfaces :; Generic Function Evaluation Interfaces, including helper class to wrap free (static) and non-static member functions; Parametric Function Evaluation Interfaces. Numerical algorithms: user classes with (in some cases) basic implementations for:; Numerical Integration; Numerical Differentiation; One-dimensional Root-Finding; One-dimensional Minimization and Multi-dimensional Minimization. Fitting and Parameter Estimation :classes for fitting and parameter estimation from a given data set. Note that in this latest release the GenVector (physics and geometry vectors for 2,3 and 4 dimensions with their transformations) is not anymore part of MathCore, but is built as a separate library. MathCore contains instead now classes which were originally part of libCore. These include:. TMath : namespace with mathematical functions and basic function algorithms.; TComplex: class for complex numbers.; Random classes: base class TRandom and the derived classes TRandom1, TRandom2 and TRandom3, implementing the pseudo-random number generators.; Other classes, such as; TKDTree for partitioning the data using a kd-Tre",MatchSource.WIKI,doc/master/group__MathCore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__MathCore.html
Integrability,wrap,wrap,". ROOT: MathCore. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files |; Classes ; MathCoreMath. ; The Core Mathematical Library of ROOT. ; MathCore provides a collection of functions and C++ classes for HEP numerical computing. This library provides only the basic mathematical functions and algorithms and not all the functionality required by the HEP community. More advanced mathematical functionalities is provided by the MathMore. The current set includes classes and functions for:. Basic special functions used in HEP like the gamma, beta and error function;; Statistical functions : mathematical functions used in statistics, such as the probability density functions and the cumulative distributions functions (lower and upper integral of the pdf's) for continuous and discrete distributions.;; Function Classes and Interfaces :; Generic Function Evaluation Interfaces, including helper class to wrap free (static) and non-static member functions; Parametric Function Evaluation Interfaces. Numerical algorithms: user classes with (in some cases) basic implementations for:; Numerical Integration; Numerical Differentiation; One-dimensional Root-Finding; One-dimensional Minimization and Multi-dimensional Minimization. Fitting and Parameter Estimation :classes for fitting and parameter estimation from a given data set. Note that in this latest release the GenVector (physics and geometry vectors for 2,3 and 4 dimensions with their transformations) is not anymore part of MathCore, but is built as a separate library. MathCore contains instead now classes which were originally part of libCore. These include:. TMath : namespace with mathematical functions and basic function algorithms.; TComplex: class for complex numbers.; Random classes: base class TRandom and the derived classes TRandom1, TRandom2 and TRandom3, implementing the pseudo-random number generators.; Other classes, such as; TKDTree for partitioning the data using a kd-Tre",MatchSource.WIKI,doc/master/group__MathCore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__MathCore.html
Modifiability,variab,variable,",3 and 4 dimensions with their transformations) is not anymore part of MathCore, but is built as a separate library. MathCore contains instead now classes which were originally part of libCore. These include:. TMath : namespace with mathematical functions and basic function algorithms.; TComplex: class for complex numbers.; Random classes: base class TRandom and the derived classes TRandom1, TRandom2 and TRandom3, implementing the pseudo-random number generators.; Other classes, such as; TKDTree for partitioning the data using a kd-Tree and TKDTreeBinning for binning data using a kdTree; ROOT::Math::GoFTest for goodness of fit tests . Modules;  Fitting and Parameter Estimation;  Classes used for fitting (regression analysis) and estimation of parameter values given a data sample. ;  ;  Interface classes for Random number generation;  Pseudo-random numbers generator classes and for generation of random number distributions. ;  ;  Goodness of Fit Tests;  Classical one-dimensional goodness of git tests for unbinned data. ;  ;  Function Classes and Interfaces;  Interfaces (abstract classes) and Base classes used in MathCore and MathMore numerical methods for describing function classes. ;  ;  Numerical Algorithms;  Numerical Algorithm classes from the MathCore and MathMore libraries. ;  ;  Statistical functions;  Probability density functions, cumulative distribution functions and their inverses (quantiles) for various statistical distributions (continuous and discrete). ;  ;  Special functions;  Special mathematical functions. ;  . Files; file  RFit.hxx;  . Classes; class  ROOT::Math::Delaunay2D;  Class to generate a Delaunay triangulation of a 2D set of points. More...;  ; class  TKDTreeBinning;  <- TKDTreeBinning - A class providing multidimensional binning -> More...;  ; class  TStatistic;  Statistical variable, defined by its mean and variance (RMS). More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__MathCore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__MathCore.html
Testability,test,tests," Function Evaluation Interfaces. Numerical algorithms: user classes with (in some cases) basic implementations for:; Numerical Integration; Numerical Differentiation; One-dimensional Root-Finding; One-dimensional Minimization and Multi-dimensional Minimization. Fitting and Parameter Estimation :classes for fitting and parameter estimation from a given data set. Note that in this latest release the GenVector (physics and geometry vectors for 2,3 and 4 dimensions with their transformations) is not anymore part of MathCore, but is built as a separate library. MathCore contains instead now classes which were originally part of libCore. These include:. TMath : namespace with mathematical functions and basic function algorithms.; TComplex: class for complex numbers.; Random classes: base class TRandom and the derived classes TRandom1, TRandom2 and TRandom3, implementing the pseudo-random number generators.; Other classes, such as; TKDTree for partitioning the data using a kd-Tree and TKDTreeBinning for binning data using a kdTree; ROOT::Math::GoFTest for goodness of fit tests . Modules;  Fitting and Parameter Estimation;  Classes used for fitting (regression analysis) and estimation of parameter values given a data sample. ;  ;  Interface classes for Random number generation;  Pseudo-random numbers generator classes and for generation of random number distributions. ;  ;  Goodness of Fit Tests;  Classical one-dimensional goodness of git tests for unbinned data. ;  ;  Function Classes and Interfaces;  Interfaces (abstract classes) and Base classes used in MathCore and MathMore numerical methods for describing function classes. ;  ;  Numerical Algorithms;  Numerical Algorithm classes from the MathCore and MathMore libraries. ;  ;  Statistical functions;  Probability density functions, cumulative distribution functions and their inverses (quantiles) for various statistical distributions (continuous and discrete). ;  ;  Special functions;  Special mathematical functions. ;  . ",MatchSource.WIKI,doc/master/group__MathCore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__MathCore.html
Availability,down,downloaded,"l functions, Mathematical functions used in statistics such as probability density functions, cumulative distributions functions and their inverse (quantiles).; Numerical algorithms:; Numerical Integration; Numerical Monte Carlo Integration Classes; Numerical Differentiation; One-dimensional Root-Finding; One-dimensional Minimization; Multi-dimensional Minimization. Interpolation Classes; Function Approximation (ChebyshevApprox), based on Chebyshev polynomials; Interface classes for Random number generation. The mathematical functions are implemented as a set of free functions in the namespace ROOT::Math. The naming used for the special functions is the same proposed for the C++ standard (see C++ standard extension proposal document). The MathMore library is implemented wrapping in C++ the GNU Scientific Library (GSL). To build MathMore you need to have first GSL installed somewhere in your system. A version of GSL larger or equal 1.8 is required. A tar file of GSL can be downloaded from the GSL Web site, or (for version 1.8) from here. Windows binaries, compiled using Visual Studio 7.1 can be downloaded from this location.; MathMore (and its ROOT CINT dictionary) can be built within ROOT whenever a GSL library is found in the system. Optionally the GSL library and header file location can be specified in the ROOT configure script with configure –with-gsl-incdir=... –with-gsl-libdir=... MathMore links with the GSL static libraries. On some platform (like Linux x86-64) GSL needs to be compiled with the option –with-pic. The source code of MathMore is distributed under the GNU General Public License . Modules;  Numerical Algorithms;  Numerical Algorithm classes from the MathCore and MathMore libraries. ;  ;  Statistical functions;  Probability density functions, cumulative distribution functions and their inverses (quantiles) for various statistical distributions (continuous and discrete). ;  ;  Special functions;  Special mathematical functions. ;  ;  QuasiRandom num",MatchSource.WIKI,doc/master/group__MathMore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__MathMore.html
Deployability,install,installed,"ses and functions for:. Special functions, with all the major functions (Bessel functions, Legendre polynomial, etc..); Statistical functions, Mathematical functions used in statistics such as probability density functions, cumulative distributions functions and their inverse (quantiles).; Numerical algorithms:; Numerical Integration; Numerical Monte Carlo Integration Classes; Numerical Differentiation; One-dimensional Root-Finding; One-dimensional Minimization; Multi-dimensional Minimization. Interpolation Classes; Function Approximation (ChebyshevApprox), based on Chebyshev polynomials; Interface classes for Random number generation. The mathematical functions are implemented as a set of free functions in the namespace ROOT::Math. The naming used for the special functions is the same proposed for the C++ standard (see C++ standard extension proposal document). The MathMore library is implemented wrapping in C++ the GNU Scientific Library (GSL). To build MathMore you need to have first GSL installed somewhere in your system. A version of GSL larger or equal 1.8 is required. A tar file of GSL can be downloaded from the GSL Web site, or (for version 1.8) from here. Windows binaries, compiled using Visual Studio 7.1 can be downloaded from this location.; MathMore (and its ROOT CINT dictionary) can be built within ROOT whenever a GSL library is found in the system. Optionally the GSL library and header file location can be specified in the ROOT configure script with configure –with-gsl-incdir=... –with-gsl-libdir=... MathMore links with the GSL static libraries. On some platform (like Linux x86-64) GSL needs to be compiled with the option –with-pic. The source code of MathMore is distributed under the GNU General Public License . Modules;  Numerical Algorithms;  Numerical Algorithm classes from the MathCore and MathMore libraries. ;  ;  Statistical functions;  Probability density functions, cumulative distribution functions and their inverses (quantiles) for various sta",MatchSource.WIKI,doc/master/group__MathMore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__MathMore.html
Integrability,wrap,wrapping,"ension of the functionality provided by the MathCore. The current set includes classes and functions for:. Special functions, with all the major functions (Bessel functions, Legendre polynomial, etc..); Statistical functions, Mathematical functions used in statistics such as probability density functions, cumulative distributions functions and their inverse (quantiles).; Numerical algorithms:; Numerical Integration; Numerical Monte Carlo Integration Classes; Numerical Differentiation; One-dimensional Root-Finding; One-dimensional Minimization; Multi-dimensional Minimization. Interpolation Classes; Function Approximation (ChebyshevApprox), based on Chebyshev polynomials; Interface classes for Random number generation. The mathematical functions are implemented as a set of free functions in the namespace ROOT::Math. The naming used for the special functions is the same proposed for the C++ standard (see C++ standard extension proposal document). The MathMore library is implemented wrapping in C++ the GNU Scientific Library (GSL). To build MathMore you need to have first GSL installed somewhere in your system. A version of GSL larger or equal 1.8 is required. A tar file of GSL can be downloaded from the GSL Web site, or (for version 1.8) from here. Windows binaries, compiled using Visual Studio 7.1 can be downloaded from this location.; MathMore (and its ROOT CINT dictionary) can be built within ROOT whenever a GSL library is found in the system. Optionally the GSL library and header file location can be specified in the ROOT configure script with configure –with-gsl-incdir=... –with-gsl-libdir=... MathMore links with the GSL static libraries. On some platform (like Linux x86-64) GSL needs to be compiled with the option –with-pic. The source code of MathMore is distributed under the GNU General Public License . Modules;  Numerical Algorithms;  Numerical Algorithm classes from the MathCore and MathMore libraries. ;  ;  Statistical functions;  Probability density functio",MatchSource.WIKI,doc/master/group__MathMore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__MathMore.html
Modifiability,config,configure,"; Numerical Monte Carlo Integration Classes; Numerical Differentiation; One-dimensional Root-Finding; One-dimensional Minimization; Multi-dimensional Minimization. Interpolation Classes; Function Approximation (ChebyshevApprox), based on Chebyshev polynomials; Interface classes for Random number generation. The mathematical functions are implemented as a set of free functions in the namespace ROOT::Math. The naming used for the special functions is the same proposed for the C++ standard (see C++ standard extension proposal document). The MathMore library is implemented wrapping in C++ the GNU Scientific Library (GSL). To build MathMore you need to have first GSL installed somewhere in your system. A version of GSL larger or equal 1.8 is required. A tar file of GSL can be downloaded from the GSL Web site, or (for version 1.8) from here. Windows binaries, compiled using Visual Studio 7.1 can be downloaded from this location.; MathMore (and its ROOT CINT dictionary) can be built within ROOT whenever a GSL library is found in the system. Optionally the GSL library and header file location can be specified in the ROOT configure script with configure –with-gsl-incdir=... –with-gsl-libdir=... MathMore links with the GSL static libraries. On some platform (like Linux x86-64) GSL needs to be compiled with the option –with-pic. The source code of MathMore is distributed under the GNU General Public License . Modules;  Numerical Algorithms;  Numerical Algorithm classes from the MathCore and MathMore libraries. ;  ;  Statistical functions;  Probability density functions, cumulative distribution functions and their inverses (quantiles) for various statistical distributions (continuous and discrete). ;  ;  Special functions;  Special mathematical functions. ;  ;  QuasiRandom number generators and distributions;  Classes for generating QuasiRandom numbers and based on GSL. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__MathMore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__MathMore.html
Deployability,integrat,integration,". ROOT: Numerical Monte Carlo Integration Classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs |; Enumerations ; Numerical Monte Carlo Integration ClassesMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Classes implementing method for Monte Carlo Integration. ; Class for performing numerical integration of a multidimensional function. It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges.; GSL Manual.; It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be instantiate using the plugin manager (plugin name is ""GSLMCIntegrator"") . Classes; class  ROOT::Math::GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; struct  ROOT::Math::MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; struct  ROOT::Math::VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  . Typedefs; typedef double(* ROOT::Math::GSLMonteFuncPointer) (double *, size_t, void *);  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ;  . Enumerations; enum  ROOT::Math::IntegrationMultiDim::Type { ;   ROOT::Math::IntegrationMultiDim::kDEFAULT = -1; , ROOT::Math::IntegrationMultiDim::kADAPTIVE; , ROOT::Math::IntegrationMultiDim::kVEGAS; , ROOT::Math::IntegrationMultiDim::kMISER; , ;   ROOT::Math::IntegrationMultiDim::kPLAIN. };  enumeration specifying the integration types. More...;  . Typedef Documentation. ◆ GSLMonteFuncPoin",MatchSource.WIKI,doc/master/group__MCIntegration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__MCIntegration.html
Energy Efficiency,adapt,adapting,"lements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges.; GSL Manual.; It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be instantiate using the plugin manager (plugin name is ""GSLMCIntegrator"") . Classes; class  ROOT::Math::GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; struct  ROOT::Math::MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; struct  ROOT::Math::VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  . Typedefs; typedef double(* ROOT::Math::GSLMonteFuncPointer) (double *, size_t, void *);  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ;  . Enumerations; enum  ROOT::Math::IntegrationMultiDim::Type { ;   ROOT::Math::IntegrationMultiDim::kDEFAULT = -1; , ROOT::Math::IntegrationMultiDim::kADAPTIVE; , ROOT::Math::IntegrationMultiDim::kVEGAS; , ROOT::Math::IntegrationMultiDim::kMISER; , ;   ROOT::Math::IntegrationMultiDim::kPLAIN. };  enumeration specifying the integration types. More...;  . Typedef Documentation. ◆ GSLMonteFuncPointer. typedef double(* ROOT::Math::GSLMonteFuncPointer)(double *, size_t, void *). Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ; The templated C++ function class must implement:; double operator( const double * x); This class defines static methods with will be used to fill the gsl_monte_function used by GSL. See for examples the GSL online manual ; Definition at line 56 of file GSLMonteFunctionAdapter.h. E",MatchSource.WIKI,doc/master/group__MCIntegration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__MCIntegration.html
Integrability,integrat,integration,". ROOT: Numerical Monte Carlo Integration Classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs |; Enumerations ; Numerical Monte Carlo Integration ClassesMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Classes implementing method for Monte Carlo Integration. ; Class for performing numerical integration of a multidimensional function. It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges.; GSL Manual.; It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be instantiate using the plugin manager (plugin name is ""GSLMCIntegrator"") . Classes; class  ROOT::Math::GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; struct  ROOT::Math::MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; struct  ROOT::Math::VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  . Typedefs; typedef double(* ROOT::Math::GSLMonteFuncPointer) (double *, size_t, void *);  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ;  . Enumerations; enum  ROOT::Math::IntegrationMultiDim::Type { ;   ROOT::Math::IntegrationMultiDim::kDEFAULT = -1; , ROOT::Math::IntegrationMultiDim::kADAPTIVE; , ROOT::Math::IntegrationMultiDim::kVEGAS; , ROOT::Math::IntegrationMultiDim::kMISER; , ;   ROOT::Math::IntegrationMultiDim::kPLAIN. };  enumeration specifying the integration types. More...;  . Typedef Documentation. ◆ GSLMonteFuncPoin",MatchSource.WIKI,doc/master/group__MCIntegration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__MCIntegration.html
Modifiability,plugin,plugin,". ROOT: Numerical Monte Carlo Integration Classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs |; Enumerations ; Numerical Monte Carlo Integration ClassesMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Classes implementing method for Monte Carlo Integration. ; Class for performing numerical integration of a multidimensional function. It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges.; GSL Manual.; It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be instantiate using the plugin manager (plugin name is ""GSLMCIntegrator"") . Classes; class  ROOT::Math::GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; struct  ROOT::Math::MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; struct  ROOT::Math::VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  . Typedefs; typedef double(* ROOT::Math::GSLMonteFuncPointer) (double *, size_t, void *);  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ;  . Enumerations; enum  ROOT::Math::IntegrationMultiDim::Type { ;   ROOT::Math::IntegrationMultiDim::kDEFAULT = -1; , ROOT::Math::IntegrationMultiDim::kADAPTIVE; , ROOT::Math::IntegrationMultiDim::kVEGAS; , ROOT::Math::IntegrationMultiDim::kMISER; , ;   ROOT::Math::IntegrationMultiDim::kPLAIN. };  enumeration specifying the integration types. More...;  . Typedef Documentation. ◆ GSLMonteFuncPoin",MatchSource.WIKI,doc/master/group__MCIntegration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__MCIntegration.html
Performance,perform,performing,". ROOT: Numerical Monte Carlo Integration Classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs |; Enumerations ; Numerical Monte Carlo Integration ClassesMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Classes implementing method for Monte Carlo Integration. ; Class for performing numerical integration of a multidimensional function. It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges.; GSL Manual.; It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be instantiate using the plugin manager (plugin name is ""GSLMCIntegrator"") . Classes; class  ROOT::Math::GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; struct  ROOT::Math::MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; struct  ROOT::Math::VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  . Typedefs; typedef double(* ROOT::Math::GSLMonteFuncPointer) (double *, size_t, void *);  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ;  . Enumerations; enum  ROOT::Math::IntegrationMultiDim::Type { ;   ROOT::Math::IntegrationMultiDim::kDEFAULT = -1; , ROOT::Math::IntegrationMultiDim::kADAPTIVE; , ROOT::Math::IntegrationMultiDim::kVEGAS; , ROOT::Math::IntegrationMultiDim::kMISER; , ;   ROOT::Math::IntegrationMultiDim::kPLAIN. };  enumeration specifying the integration types. More...;  . Typedef Documentation. ◆ GSLMonteFuncPoin",MatchSource.WIKI,doc/master/group__MCIntegration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__MCIntegration.html
Availability,avail,available,". ROOT: One-dimensional Minimization. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Enumerations ; One-dimensional MinimizationMath » MathCore | Math » MathMore » Numerical Algorithms. ; Classes for one-dimensional minimization. . Classes; class  ROOT::Math::BrentMinimizer1D;  User class for performing function minimization. More...;  ; class  ROOT::Math::GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  ROOT::Math::GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  ROOT::Math::IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  . Enumerations; enum  ROOT::Math::Minim1D::Type { ROOT::Math::Minim1D::kGOLDENSECTION; , ROOT::Math::Minim1D::kBRENT; };  Enumeration with One Dimensional Minimizer Algorithms. More...;  . Enumeration Type Documentation. ◆ Type. enum ROOT::Math::Minim1D::Type. Enumeration with One Dimensional Minimizer Algorithms. ; The algorithms are implemented using GSL, see the GSL manual.; The algorithms available are: . Golden Section Algorithm, simplest method of bracketing the minimum of a function . Brent Algorithm, which combines a parabolic interpolation with the golden section algorithm . EnumeratorkGOLDENSECTION ; kBRENT . Definition at line 56 of file GSLMinimizer1D.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Min1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Min1D.html
Integrability,wrap,wrapper,". ROOT: One-dimensional Minimization. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Enumerations ; One-dimensional MinimizationMath » MathCore | Math » MathMore » Numerical Algorithms. ; Classes for one-dimensional minimization. . Classes; class  ROOT::Math::BrentMinimizer1D;  User class for performing function minimization. More...;  ; class  ROOT::Math::GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  ROOT::Math::GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  ROOT::Math::IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  . Enumerations; enum  ROOT::Math::Minim1D::Type { ROOT::Math::Minim1D::kGOLDENSECTION; , ROOT::Math::Minim1D::kBRENT; };  Enumeration with One Dimensional Minimizer Algorithms. More...;  . Enumeration Type Documentation. ◆ Type. enum ROOT::Math::Minim1D::Type. Enumeration with One Dimensional Minimizer Algorithms. ; The algorithms are implemented using GSL, see the GSL manual.; The algorithms available are: . Golden Section Algorithm, simplest method of bracketing the minimum of a function . Brent Algorithm, which combines a parabolic interpolation with the golden section algorithm . EnumeratorkGOLDENSECTION ; kBRENT . Definition at line 56 of file GSLMinimizer1D.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Min1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Min1D.html
Performance,perform,performing,". ROOT: One-dimensional Minimization. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Enumerations ; One-dimensional MinimizationMath » MathCore | Math » MathMore » Numerical Algorithms. ; Classes for one-dimensional minimization. . Classes; class  ROOT::Math::BrentMinimizer1D;  User class for performing function minimization. More...;  ; class  ROOT::Math::GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  ROOT::Math::GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  ROOT::Math::IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  . Enumerations; enum  ROOT::Math::Minim1D::Type { ROOT::Math::Minim1D::kGOLDENSECTION; , ROOT::Math::Minim1D::kBRENT; };  Enumeration with One Dimensional Minimizer Algorithms. More...;  . Enumeration Type Documentation. ◆ Type. enum ROOT::Math::Minim1D::Type. Enumeration with One Dimensional Minimizer Algorithms. ; The algorithms are implemented using GSL, see the GSL manual.; The algorithms available are: . Golden Section Algorithm, simplest method of bracketing the minimum of a function . Brent Algorithm, which combines a parabolic interpolation with the golden section algorithm . EnumeratorkGOLDENSECTION ; kBRENT . Definition at line 56 of file GSLMinimizer1D.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Min1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Min1D.html
Usability,simpl,simplest,". ROOT: One-dimensional Minimization. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Enumerations ; One-dimensional MinimizationMath » MathCore | Math » MathMore » Numerical Algorithms. ; Classes for one-dimensional minimization. . Classes; class  ROOT::Math::BrentMinimizer1D;  User class for performing function minimization. More...;  ; class  ROOT::Math::GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  ROOT::Math::GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  ROOT::Math::IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  . Enumerations; enum  ROOT::Math::Minim1D::Type { ROOT::Math::Minim1D::kGOLDENSECTION; , ROOT::Math::Minim1D::kBRENT; };  Enumeration with One Dimensional Minimizer Algorithms. More...;  . Enumeration Type Documentation. ◆ Type. enum ROOT::Math::Minim1D::Type. Enumeration with One Dimensional Minimizer Algorithms. ; The algorithms are implemented using GSL, see the GSL manual.; The algorithms available are: . Golden Section Algorithm, simplest method of bracketing the minimum of a function . Brent Algorithm, which combines a parabolic interpolation with the golden section algorithm . EnumeratorkGOLDENSECTION ; kBRENT . Definition at line 56 of file GSLMinimizer1D.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Min1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Min1D.html
Availability,avail,available,". ROOT: Minuit2 Minimization Library. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Minuit2 Minimization LibraryMath. ; New Object-oriented implementation of the MINUIT minimization package. ; More information is available at the home page of the Minuit2 minimization package"". . Classes; class  ROOT::Minuit2::FCNAdapter< Function >;  template wrapped class for adapting to FCNBase signature More...;  ; class  ROOT::Minuit2::FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  ROOT::Minuit2::FCNGradAdapter< Function >;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  ROOT::Minuit2::FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  ROOT::Minuit2::FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  ROOT::Minuit2::FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  ROOT::Minuit2::FumiliFCNAdapter< Function >;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  ROOT::Minuit2::FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  ROOT::Minuit2::FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  ROOT::Minuit2::FumiliMinimizer;  Instantiates the seed generator and Minimum builder for the Fumili minimization method. More...;  ; class  ROOT::Minuit2::FumiliStandardChi2FCN;  Class implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; clas",MatchSource.WIKI,doc/master/group__Minuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Minuit.html
Energy Efficiency,adapt,adapting,". ROOT: Minuit2 Minimization Library. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Minuit2 Minimization LibraryMath. ; New Object-oriented implementation of the MINUIT minimization package. ; More information is available at the home page of the Minuit2 minimization package"". . Classes; class  ROOT::Minuit2::FCNAdapter< Function >;  template wrapped class for adapting to FCNBase signature More...;  ; class  ROOT::Minuit2::FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  ROOT::Minuit2::FCNGradAdapter< Function >;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  ROOT::Minuit2::FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  ROOT::Minuit2::FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  ROOT::Minuit2::FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  ROOT::Minuit2::FumiliFCNAdapter< Function >;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  ROOT::Minuit2::FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  ROOT::Minuit2::FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  ROOT::Minuit2::FumiliMinimizer;  Instantiates the seed generator and Minimum builder for the Fumili minimization method. More...;  ; class  ROOT::Minuit2::FumiliStandardChi2FCN;  Class implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; clas",MatchSource.WIKI,doc/master/group__Minuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Minuit.html
Integrability,wrap,wrapped,". ROOT: Minuit2 Minimization Library. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Minuit2 Minimization LibraryMath. ; New Object-oriented implementation of the MINUIT minimization package. ; More information is available at the home page of the Minuit2 minimization package"". . Classes; class  ROOT::Minuit2::FCNAdapter< Function >;  template wrapped class for adapting to FCNBase signature More...;  ; class  ROOT::Minuit2::FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  ROOT::Minuit2::FCNGradAdapter< Function >;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  ROOT::Minuit2::FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  ROOT::Minuit2::FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  ROOT::Minuit2::FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  ROOT::Minuit2::FumiliFCNAdapter< Function >;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  ROOT::Minuit2::FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  ROOT::Minuit2::FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  ROOT::Minuit2::FumiliMinimizer;  Instantiates the seed generator and Minimum builder for the Fumili minimization method. More...;  ; class  ROOT::Minuit2::FumiliStandardChi2FCN;  Class implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; clas",MatchSource.WIKI,doc/master/group__Minuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Minuit.html
Modifiability,adapt,adapting,". ROOT: Minuit2 Minimization Library. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Minuit2 Minimization LibraryMath. ; New Object-oriented implementation of the MINUIT minimization package. ; More information is available at the home page of the Minuit2 minimization package"". . Classes; class  ROOT::Minuit2::FCNAdapter< Function >;  template wrapped class for adapting to FCNBase signature More...;  ; class  ROOT::Minuit2::FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  ROOT::Minuit2::FCNGradAdapter< Function >;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  ROOT::Minuit2::FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  ROOT::Minuit2::FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  ROOT::Minuit2::FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  ROOT::Minuit2::FumiliFCNAdapter< Function >;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  ROOT::Minuit2::FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  ROOT::Minuit2::FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  ROOT::Minuit2::FumiliMinimizer;  Instantiates the seed generator and Minimum builder for the Fumili minimization method. More...;  ; class  ROOT::Minuit2::FumiliStandardChi2FCN;  Class implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; clas",MatchSource.WIKI,doc/master/group__Minuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Minuit.html
Safety,predict,predicted,"e...;  ; class  ROOT::Minuit2::FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  ROOT::Minuit2::FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  ROOT::Minuit2::FumiliFCNAdapter< Function >;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  ROOT::Minuit2::FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  ROOT::Minuit2::FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  ROOT::Minuit2::FumiliMinimizer;  Instantiates the seed generator and Minimum builder for the Fumili minimization method. More...;  ; class  ROOT::Minuit2::FumiliStandardChi2FCN;  Class implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; class  ROOT::Minuit2::FumiliStandardMaximumLikelihoodFCN;  Class implementing the Elements member function for the standard maximum likelihood method. More...;  ; class  ROOT::Minuit2::GenericFunction;  Class from which all the other classes, representing functions, inherit. More...;  ; class  ROOT::Minuit2::Minuit2Minimizer;  Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. More...;  ; class  ROOT::Minuit2::MnLineSearch;  Implements a 1-dimensional minimization along a given direction (i.e. More...;  ; class  ROOT::Minuit2::MnParabola;  This class defines a parabola of the form a*x*x + b*x + c. More...;  ; class  ROOT::Minuit2::MnParabolaPoint;  A point of a parabola. More...;  ; class  ROOT::Minuit2::ParametricFunction;  Function which has parameters. More...;  .",MatchSource.WIKI,doc/master/group__Minuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Minuit.html
Deployability,patch,patch,". ROOT: TMinuit. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; TMinuitMath. ; The Minuit Minimization package. ; See alsoMinuit2 for a newer version of this package; Direct C++ implementation of the Minuit minimization package.; This package was originally written in Fortran by Fred James and part of PACKLIB (patch D506).; It has been converted to a C++ class, TMinuit, by R.Brun.; See also:. The main documentation is in the class TMinuit; The Chapter about Fitting Histogram in the Users Guide; The MINUIT documentation in CERNLIB; How to Fit Histograms; peaks.C How to Fit find peaks in histograms . Classes; class  TLinearFitter;  ; class  TMinuit;  ; class  TMinuitMinimizer;  TMinuitMinimizer class: ROOT::Math::Minimizer implementation based on TMinuit. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__MinuitOld.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__MinuitOld.html
Availability,error,error,"th::GSLSimAnParams;  structure holding the simulated annealing parameters More...;  ; class  ROOT::Math::LSResidualFunc< Func >;  LSResidualFunc class description. More...;  ; class  ROOT::Math::Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  ROOT::Math::MinimizerOptions;  Minimizer options. More...;  ; class  ROOT::Math::MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  ROOT::Math::MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  ROOT::Math::MinimTransformVariable;  MinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class. More...;  ; class  ROOT::Math::MultiNumGradFunction;  MultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) More...;  ; class  ROOT::Math::SinVariableTransformation;  Sin Transformation class for dealing with double bounded variables. More...;  ; class  ROOT::Math::SqrtLowVariableTransformation;  Sqrt Transformation class for dealing with lower bounded variables. More...;  ; class  ROOT::Math::SqrtUpVariableTransformation;  Sqrt Transformation class for dealing with upper bounded variables. More...;  . Enumerations; enum  ROOT::Math::EGSLMinimizerType { ;   ROOT::Math::kConjugateFR; , ROOT::Math::kConjugatePR; , ROOT::Math::kVectorBFGS; , ROOT::Math::kVectorBFGS2; , ;   ROOT::Math::kSteepestDe",MatchSource.WIKI,doc/master/group__MultiMin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__MultiMin.html
Energy Efficiency,adapt,adapting,". ROOT: Multi-dimensional Minimization. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Enumerations ; Multi-dimensional MinimizationMath » MathCore | Math » MathMore » Numerical Algorithms. ; Classes implementing algorithms for multi-dimensional minimization. . Classes; class  ROOT::Math::BasicMinimizer;  Base Minimizer class, which defines the basic functionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transformation etc. More...;  ; class  ROOT::Math::GeneticMinimizer;  GeneticMinimizer. More...;  ; class  ROOT::Math::GSLMinimizer;  GSLMinimizer class. More...;  ; class  ROOT::Math::GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  ROOT::Math::GSLMultiFitFunctionAdapter< FuncVector >;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  ROOT::Math::GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  ROOT::Math::GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  ROOT::Math::GSLMultiMinFunctionAdapter< UserFunc >;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  ROOT::Math::GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  ROOT::Math::GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  ROOT::Math::GSLNLSMinimizer;  GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt a",MatchSource.WIKI,doc/master/group__MultiMin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__MultiMin.html
Integrability,wrap,wrapper,"ations ; Multi-dimensional MinimizationMath » MathCore | Math » MathMore » Numerical Algorithms. ; Classes implementing algorithms for multi-dimensional minimization. . Classes; class  ROOT::Math::BasicMinimizer;  Base Minimizer class, which defines the basic functionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transformation etc. More...;  ; class  ROOT::Math::GeneticMinimizer;  GeneticMinimizer. More...;  ; class  ROOT::Math::GSLMinimizer;  GSLMinimizer class. More...;  ; class  ROOT::Math::GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  ROOT::Math::GSLMultiFitFunctionAdapter< FuncVector >;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  ROOT::Math::GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  ROOT::Math::GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  ROOT::Math::GSLMultiMinFunctionAdapter< UserFunc >;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  ROOT::Math::GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  ROOT::Math::GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  ROOT::Math::GSLNLSMinimizer;  GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. More...;  ; class  ROOT::Math::GSLSimAnFunc;  GSLSimAnFunc class description. More...;",MatchSource.WIKI,doc/master/group__MultiMin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__MultiMin.html
Modifiability,adapt,adapting,". ROOT: Multi-dimensional Minimization. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Enumerations ; Multi-dimensional MinimizationMath » MathCore | Math » MathMore » Numerical Algorithms. ; Classes implementing algorithms for multi-dimensional minimization. . Classes; class  ROOT::Math::BasicMinimizer;  Base Minimizer class, which defines the basic functionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transformation etc. More...;  ; class  ROOT::Math::GeneticMinimizer;  GeneticMinimizer. More...;  ; class  ROOT::Math::GSLMinimizer;  GSLMinimizer class. More...;  ; class  ROOT::Math::GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  ROOT::Math::GSLMultiFitFunctionAdapter< FuncVector >;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  ROOT::Math::GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  ROOT::Math::GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  ROOT::Math::GSLMultiMinFunctionAdapter< UserFunc >;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  ROOT::Math::GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  ROOT::Math::GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  ROOT::Math::GSLNLSMinimizer;  GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt a",MatchSource.WIKI,doc/master/group__MultiMin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__MultiMin.html
Performance,perform,performing," minimization algorithm. More...;  ; struct  ROOT::Math::GSLMultiMinFunctionAdapter< UserFunc >;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  ROOT::Math::GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  ROOT::Math::GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  ROOT::Math::GSLNLSMinimizer;  GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. More...;  ; class  ROOT::Math::GSLSimAnFunc;  GSLSimAnFunc class description. More...;  ; class  ROOT::Math::GSLSimAnMinimizer;  GSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL. More...;  ; class  ROOT::Math::GSLSimAnnealing;  GSLSimAnnealing class for performing a simulated annealing search of a multidimensional function. More...;  ; struct  ROOT::Math::GSLSimAnParams;  structure holding the simulated annealing parameters More...;  ; class  ROOT::Math::LSResidualFunc< Func >;  LSResidualFunc class description. More...;  ; class  ROOT::Math::Minimizer;  Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. More...;  ; class  ROOT::Math::MinimizerOptions;  Minimizer options. More...;  ; class  ROOT::Math::MinimizerVariableTransformation;  Base class for MinimizerVariable transformations defining the functions to deal with bounded parameters. More...;  ; class  ROOT::Math::MinimTransformFunction;  MinimTransformFunction class to perform a transformations on the variables to deal with fixed or limited variables (support both double and single bounds) The class manages the passed function pointer. More...;  ; class  ROOT::Math::MinimTransformVariable;  MinimTransformVariable ",MatchSource.WIKI,doc/master/group__MultiMin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__MultiMin.html
Availability,avail,available,"r.hxx;  ; file  RNTupleProcessor.cxx;  ; file  RNTupleProcessor.hxx;  ; file  RNTupleReader.cxx;  ; file  RNTupleReader.hxx;  ; file  RNTupleReadOptions.hxx;  ; file  RNTupleSerialize.cxx;  ; file  RNTupleSerialize.hxx;  ; file  RNTupleUtil.cxx;  ; file  RNTupleUtil.hxx;  ; file  RNTupleView.cxx;  ; file  RNTupleView.hxx;  ; file  RNTupleWriteOptions.cxx;  ; file  RNTupleWriteOptions.hxx;  ; file  RNTupleWriteOptionsDaos.hxx;  ; file  RNTupleWriter.hxx;  ; file  RNTupleZip.hxx;  ; file  RPage.cxx;  ; file  RPage.hxx;  ; file  RPageAllocator.cxx;  ; file  RPageAllocator.hxx;  ; file  RPageNullSink.hxx;  ; file  RPagePool.cxx;  ; file  RPagePool.hxx;  ; file  RPageSinkBuf.cxx;  ; file  RPageSinkBuf.hxx;  ; file  RPageSourceFriends.cxx;  ; file  RPageSourceFriends.hxx;  ; file  RPageStorage.cxx;  ; file  RPageStorage.hxx;  ; file  RPageStorageDaos.cxx;  ; file  RPageStorageDaos.hxx;  ; file  RPageStorageFile.cxx;  ; file  RPageStorageFile.hxx;  . Classes; class  EColumnType;  The available trivial, native content types of a column. More...;  ; class  ROOT::Experimental::RArrayAsRVecField;  Additional classes related to sequence containers. More...;  ; class  ROOT::Experimental::Internal::RCluster;  An in-memory subset of the packed and compressed pages of a cluster. More...;  ; class  ROOT::Experimental::RClusterDescriptor;  Meta-data for a set of ntuple clusters. More...;  ; class  ROOT::Experimental::Internal::RClusterDescriptorBuilder;  A helper class for piece-wise construction of an RClusterDescriptor. More...;  ; class  ROOT::Experimental::RNTupleDescriptor::RClusterDescriptorIterable;  Used to loop over all the clusters of an ntuple (in unspecified order) More...;  ; class  ROOT::Experimental::RClusterGroupDescriptor;  Clusters are bundled in cluster groups. More...;  ; class  ROOT::Experimental::Internal::RClusterGroupDescriptorBuilder;  A helper class for piece-wise construction of an RClusterGroupDescriptor. More...;  ; class  ROOT::Experimental::RNTupleDescri",MatchSource.WIKI,doc/master/group__NTuple.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__NTuple.html
Deployability,release,release,"es read-only access to a single field of the ntuple. More...;  ; class  ROOT::Experimental::RNTupleWriteOptions;  Common user-tunable settings for storing ntuples. More...;  ; class  ROOT::Experimental::RNTupleWriteOptionsDaos;  DAOS-specific user-tunable settings for storing ntuples. More...;  ; class  ROOT::Experimental::RNTupleWriter;  An RNTuple that gets filled with entries (data) and writes them to storage. More...;  ; class  ROOT::Experimental::Internal::ROnDiskPage;  A page as being stored on disk, that is packed and compressed. More...;  ; class  ROOT::Experimental::Internal::ROnDiskPageMap;  A memory region that contains packed and compressed pages. More...;  ; class  ROOT::Experimental::Internal::ROnDiskPageMapHeap;  An ROnDiskPageMap that is used for an fMemory allocated as an array of unsigned char. More...;  ; class  ROOT::Experimental::Internal::RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  ROOT::Experimental::Internal::RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  ROOT::Experimental::Internal::RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  ROOT::Experimental::Internal::RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  ROOT::Experimental::Internal::RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  ROOT::Experimental::Internal::RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  ROOT::Experimental::RClusterDescriptor::RPageRange;  Records the partition of data into pages for a particular column in a particular cluster. More...;  ; class  ROOT::Experimental::Internal::RPageRef;  Reference to a page stored in the page pool. More...;  ; class  ROOT::Experimental::Internal::RPageSink;  Abstract interface to write data into an ntuple. More...;  ; class  ROOT::Experimental::Internal::RPageSinkBuf;  Wrapper sink that coalesc",MatchSource.WIKI,doc/master/group__NTuple.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__NTuple.html
Energy Efficiency,allocate,allocated,"imeT >;  Record wall time and CPU time between construction and destruction. More...;  ; class  ROOT::Experimental::RNTupleView< T >;  An RNTupleView for a known type. More...;  ; class  ROOT::Experimental::RNTupleViewBase< T >;  An RNTupleView provides read-only access to a single field of the ntuple. More...;  ; class  ROOT::Experimental::RNTupleWriteOptions;  Common user-tunable settings for storing ntuples. More...;  ; class  ROOT::Experimental::RNTupleWriteOptionsDaos;  DAOS-specific user-tunable settings for storing ntuples. More...;  ; class  ROOT::Experimental::RNTupleWriter;  An RNTuple that gets filled with entries (data) and writes them to storage. More...;  ; class  ROOT::Experimental::Internal::ROnDiskPage;  A page as being stored on disk, that is packed and compressed. More...;  ; class  ROOT::Experimental::Internal::ROnDiskPageMap;  A memory region that contains packed and compressed pages. More...;  ; class  ROOT::Experimental::Internal::ROnDiskPageMapHeap;  An ROnDiskPageMap that is used for an fMemory allocated as an array of unsigned char. More...;  ; class  ROOT::Experimental::Internal::RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  ROOT::Experimental::Internal::RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  ROOT::Experimental::Internal::RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  ROOT::Experimental::Internal::RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  ROOT::Experimental::Internal::RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  ROOT::Experimental::Internal::RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  ROOT::Experimental::RClusterDescriptor::RPageRange;  Records the partition of data into pages for a particular column in a particular cluster. More...;  ; class  ROOT::Experimental::Internal::RPag",MatchSource.WIKI,doc/master/group__NTuple.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__NTuple.html
Integrability,interface,interface,"es read-only access to a single field of the ntuple. More...;  ; class  ROOT::Experimental::RNTupleWriteOptions;  Common user-tunable settings for storing ntuples. More...;  ; class  ROOT::Experimental::RNTupleWriteOptionsDaos;  DAOS-specific user-tunable settings for storing ntuples. More...;  ; class  ROOT::Experimental::RNTupleWriter;  An RNTuple that gets filled with entries (data) and writes them to storage. More...;  ; class  ROOT::Experimental::Internal::ROnDiskPage;  A page as being stored on disk, that is packed and compressed. More...;  ; class  ROOT::Experimental::Internal::ROnDiskPageMap;  A memory region that contains packed and compressed pages. More...;  ; class  ROOT::Experimental::Internal::ROnDiskPageMapHeap;  An ROnDiskPageMap that is used for an fMemory allocated as an array of unsigned char. More...;  ; class  ROOT::Experimental::Internal::RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  ROOT::Experimental::Internal::RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  ROOT::Experimental::Internal::RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  ROOT::Experimental::Internal::RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  ROOT::Experimental::Internal::RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  ROOT::Experimental::Internal::RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  ROOT::Experimental::RClusterDescriptor::RPageRange;  Records the partition of data into pages for a particular column in a particular cluster. More...;  ; class  ROOT::Experimental::Internal::RPageRef;  Reference to a page stored in the page pool. More...;  ; class  ROOT::Experimental::Internal::RPageSink;  Abstract interface to write data into an ntuple. More...;  ; class  ROOT::Experimental::Internal::RPageSinkBuf;  Wrapper sink that coalesc",MatchSource.WIKI,doc/master/group__NTuple.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__NTuple.html
Performance,perform,performance,"l::Internal::RFieldDescriptorBuilder;  A helper class for piece-wise construction of an RFieldDescriptor. More...;  ; class  ROOT::Experimental::RNTupleDescriptor::RFieldDescriptorIterable;  Used to loop over a field's child fields. More...;  ; class  ROOT::Experimental::Detail::RFieldVisitor;  Abstract base class for classes implementing the visitor design pattern. More...;  ; class  ROOT::Experimental::RNTupleDescriptor::RHeaderExtension;  Summarizes information about fields and the corresponding columns that were added after the header has been serialized. More...;  ; class  ROOT::Experimental::RNTupleProcessor::RIterator;  Iterator over the entries of an RNTuple, or vertical concatenation thereof. More...;  ; class  ROOT::Experimental::Internal::RMiniFileReader;  Read RNTuple data blocks from a TFile container, provided by a RRawFile. More...;  ; class  ROOT::RNTuple;  Representation of an RNTuple data set in a ROOT file. More...;  ; class  ROOT::Experimental::Detail::RNTupleAtomicCounter;  A thread-safe integral performance counter. More...;  ; class  ROOT::Experimental::Detail::RNTupleCalcPerf;  A metric element that computes its floating point value from other counters. More...;  ; class  ROOT::Experimental::RNTupleChainProcessor;  Processor specializiation for vertically concatenated RNTuples (chains). More...;  ; class  ROOT::Experimental::RNTupleClusterRange;  Used to loop over entries of collections in a single cluster. More...;  ; class  ROOT::Experimental::RNTupleCollectionView;  A view for a collection, that can itself generate new ntuple views for its nested fields. More...;  ; class  ROOT::Experimental::Internal::RNTupleCompressor;  Helper class to compress data blocks in the ROOT compression frame format. More...;  ; class  ROOT::Experimental::Internal::RNTupleDecompressor;  Helper class to uncompress data blocks in the ROOT compression frame format. More...;  ; class  ROOT::Experimental::RNTupleDescriptor;  The on-storage meta-data of an ntuple. Mo",MatchSource.WIKI,doc/master/group__NTuple.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__NTuple.html
Safety,safe,safe,"l::Internal::RFieldDescriptorBuilder;  A helper class for piece-wise construction of an RFieldDescriptor. More...;  ; class  ROOT::Experimental::RNTupleDescriptor::RFieldDescriptorIterable;  Used to loop over a field's child fields. More...;  ; class  ROOT::Experimental::Detail::RFieldVisitor;  Abstract base class for classes implementing the visitor design pattern. More...;  ; class  ROOT::Experimental::RNTupleDescriptor::RHeaderExtension;  Summarizes information about fields and the corresponding columns that were added after the header has been serialized. More...;  ; class  ROOT::Experimental::RNTupleProcessor::RIterator;  Iterator over the entries of an RNTuple, or vertical concatenation thereof. More...;  ; class  ROOT::Experimental::Internal::RMiniFileReader;  Read RNTuple data blocks from a TFile container, provided by a RRawFile. More...;  ; class  ROOT::RNTuple;  Representation of an RNTuple data set in a ROOT file. More...;  ; class  ROOT::Experimental::Detail::RNTupleAtomicCounter;  A thread-safe integral performance counter. More...;  ; class  ROOT::Experimental::Detail::RNTupleCalcPerf;  A metric element that computes its floating point value from other counters. More...;  ; class  ROOT::Experimental::RNTupleChainProcessor;  Processor specializiation for vertically concatenated RNTuples (chains). More...;  ; class  ROOT::Experimental::RNTupleClusterRange;  Used to loop over entries of collections in a single cluster. More...;  ; class  ROOT::Experimental::RNTupleCollectionView;  A view for a collection, that can itself generate new ntuple views for its nested fields. More...;  ; class  ROOT::Experimental::Internal::RNTupleCompressor;  Helper class to compress data blocks in the ROOT compression frame format. More...;  ; class  ROOT::Experimental::Internal::RNTupleDecompressor;  Helper class to uncompress data blocks in the ROOT compression frame format. More...;  ; class  ROOT::Experimental::RNTupleDescriptor;  The on-storage meta-data of an ntuple. Mo",MatchSource.WIKI,doc/master/group__NTuple.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__NTuple.html
Security,access,access,"ss  ROOT::Experimental::RNTupleChainProcessor;  Processor specializiation for vertically concatenated RNTuples (chains). More...;  ; class  ROOT::Experimental::RNTupleClusterRange;  Used to loop over entries of collections in a single cluster. More...;  ; class  ROOT::Experimental::RNTupleCollectionView;  A view for a collection, that can itself generate new ntuple views for its nested fields. More...;  ; class  ROOT::Experimental::Internal::RNTupleCompressor;  Helper class to compress data blocks in the ROOT compression frame format. More...;  ; class  ROOT::Experimental::Internal::RNTupleDecompressor;  Helper class to uncompress data blocks in the ROOT compression frame format. More...;  ; class  ROOT::Experimental::RNTupleDescriptor;  The on-storage meta-data of an ntuple. More...;  ; class  ROOT::Experimental::Internal::RNTupleDescriptorBuilder;  A helper class for piece-wise construction of an RNTupleDescriptor. More...;  ; class  ROOT::Experimental::RNTupleDirectAccessView< T >;  A view variant that provides direct access to the I/O buffers. More...;  ; class  ROOT::Experimental::Internal::RNTupleFileWriter;  Write RNTuple data blocks in a TFile or a bare file container. More...;  ; class  ROOT::Experimental::RNTupleFillContext;  A context for filling entries (data) into clusters of an RNTuple. More...;  ; class  ROOT::Experimental::RNTupleFillStatus;  A status object after filling an entry. More...;  ; class  ROOT::Experimental::RNTupleFormatter;  Contains helper functions for RNTupleReader::PrintInfo() and RPrintSchemaVisitor::VisitField() More...;  ; class  ROOT::Experimental::RNTupleGlobalRange;  Used to loop over indexes (entries or collections) between start and end. More...;  ; class  ROOT::Experimental::RNTupleImporter;  Converts a TTree into an RNTuple. More...;  ; class  ROOT::Experimental::Internal::RNTupleIndex;  Builds an index on one or several fields of an RNTuple so it can be joined onto other RNTuples. More...;  ; class  ROOT::Experimental::RNT",MatchSource.WIKI,doc/master/group__NTuple.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__NTuple.html
Usability,simpl,simple,"riptor;  Meta-data for a set of ntuple clusters. More...;  ; class  ROOT::Experimental::Internal::RClusterDescriptorBuilder;  A helper class for piece-wise construction of an RClusterDescriptor. More...;  ; class  ROOT::Experimental::RNTupleDescriptor::RClusterDescriptorIterable;  Used to loop over all the clusters of an ntuple (in unspecified order) More...;  ; class  ROOT::Experimental::RClusterGroupDescriptor;  Clusters are bundled in cluster groups. More...;  ; class  ROOT::Experimental::Internal::RClusterGroupDescriptorBuilder;  A helper class for piece-wise construction of an RClusterGroupDescriptor. More...;  ; class  ROOT::Experimental::RNTupleDescriptor::RClusterGroupDescriptorIterable;  Used to loop over all the cluster groups of an ntuple (in unspecified order) More...;  ; class  ROOT::Experimental::Internal::RClusterPool;  Managed a set of clusters containing compressed and packed pages. More...;  ; class  ROOT::Experimental::Internal::RColumn;  A column is a storage-backed array of a simple, fixed-size type, from which pages can be mapped into memory. More...;  ; class  ROOT::Experimental::RColumnDescriptor;  Meta-data stored for every column of an ntuple. More...;  ; class  ROOT::Experimental::Internal::RColumnDescriptorBuilder;  A helper class for piece-wise construction of an RColumnDescriptor. More...;  ; class  ROOT::Experimental::RNTupleDescriptor::RColumnDescriptorIterable;  Used to loop over a field's associated columns. More...;  ; class  ROOT::Experimental::Internal::RColumnElementBase;  A column element encapsulates the translation between basic C++ types and their column representation. More...;  ; class  ROOT::Experimental::Internal::RDaosNTupleAnchor;  Entry point for an RNTuple in a DAOS container. More...;  ; class  ROOT::Experimental::REntry;  The REntry is a collection of values in an ntuple corresponding to a complete row in the data set. More...;  ; class  ROOT::Experimental::RExtraTypeInfoDescriptor;  Field specific extra type infor",MatchSource.WIKI,doc/master/group__NTuple.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__NTuple.html
Deployability,integrat,integration,. ROOT: Numerical Algorithms. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Classes ; Numerical AlgorithmsMath » MathCore | Math » MathMore. ; Numerical Algorithm classes from the MathCore and MathMore libraries. . Modules;  One-dimensional Minimization;  Classes for one-dimensional minimization. ;  ;  Numerical Integration;  Classes for numerical integration of functions. ;  ;  Multi-dimensional Minimization;  Classes implementing algorithms for multi-dimensional minimization. ;  ;  Numerical Differentiation;  Classes for numerical differentiation. ;  ;  One-dimensional Root-Finding;  Classes implementing algorithms for finding the roots of a one-dimensional function. ;  ;  Function Approximation (ChebyshevApprox);  Numerical algorithm from the MathMore library and implemented using the GSL library. ;  ;  Multidimensional ROOT finding;  Classes for finding the roots of a multi-dimensional system. ;  ;  Interpolation Classes;  Classes for interpolation of points. ;  . Classes; class  ROOT::Math::DistSamplerOptions;  DistSampler options class. More...;  ; class  ROOT::Math::GenAlgoOptions;  class implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs More...;  ; class  ROOT::Math::IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__NumAlgo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__NumAlgo.html
Integrability,integrat,integration,. ROOT: Numerical Algorithms. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Classes ; Numerical AlgorithmsMath » MathCore | Math » MathMore. ; Numerical Algorithm classes from the MathCore and MathMore libraries. . Modules;  One-dimensional Minimization;  Classes for one-dimensional minimization. ;  ;  Numerical Integration;  Classes for numerical integration of functions. ;  ;  Multi-dimensional Minimization;  Classes implementing algorithms for multi-dimensional minimization. ;  ;  Numerical Differentiation;  Classes for numerical differentiation. ;  ;  One-dimensional Root-Finding;  Classes implementing algorithms for finding the roots of a one-dimensional function. ;  ;  Function Approximation (ChebyshevApprox);  Numerical algorithm from the MathMore library and implemented using the GSL library. ;  ;  Multidimensional ROOT finding;  Classes for finding the roots of a multi-dimensional system. ;  ;  Interpolation Classes;  Classes for interpolation of points. ;  . Classes; class  ROOT::Math::DistSamplerOptions;  DistSampler options class. More...;  ; class  ROOT::Math::GenAlgoOptions;  class implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs More...;  ; class  ROOT::Math::IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__NumAlgo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__NumAlgo.html
Modifiability,config,configuration,. ROOT: Numerical Algorithms. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Classes ; Numerical AlgorithmsMath » MathCore | Math » MathMore. ; Numerical Algorithm classes from the MathCore and MathMore libraries. . Modules;  One-dimensional Minimization;  Classes for one-dimensional minimization. ;  ;  Numerical Integration;  Classes for numerical integration of functions. ;  ;  Multi-dimensional Minimization;  Classes implementing algorithms for multi-dimensional minimization. ;  ;  Numerical Differentiation;  Classes for numerical differentiation. ;  ;  One-dimensional Root-Finding;  Classes implementing algorithms for finding the roots of a one-dimensional function. ;  ;  Function Approximation (ChebyshevApprox);  Numerical algorithm from the MathMore library and implemented using the GSL library. ;  ;  Multidimensional ROOT finding;  Classes for finding the roots of a multi-dimensional system. ;  ;  Interpolation Classes;  Classes for interpolation of points. ;  . Classes; class  ROOT::Math::DistSamplerOptions;  DistSampler options class. More...;  ; class  ROOT::Math::GenAlgoOptions;  class implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs More...;  ; class  ROOT::Math::IOptions;  Generic interface for defining configuration options of a numerical algorithm. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__NumAlgo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__NumAlgo.html
Availability,avail,available,"gram painter class using OpenGL. More...;  ; class  TGLIsoPainter;  ""gliso"" option for TH3. More...;  ; class  TGLLegoPainter;  Plot-painter implementing LEGO rendering of TH2 histograms in cartesian, polar, cylindrical and spherical coordinates. More...;  ; class  TGLLightSet;  Encapsulates a set of lights for OpenGL. More...;  ; class  TGLLightSetSubEditor;  Sub-editor for TGLLightSet. More...;  ; class  TGLLine3;  3D space, fixed length, line class, with direction / length 'vector', passing through point 'vertex'. More...;  ; class  TGLLockable;  Simple locking interface used by viewer and scene. More...;  ; class  TGLLogicalShape;  Abstract logical shape - a GL 'drawable' - base for all shapes - faceset sphere etc. More...;  ; class  TGLManip;  Abstract base class for viewer manipulators, which allow direct in viewer manipulation of a (TGlPhysicalShape) object - currently translation, scaling and rotation along/round objects local axes. More...;  ; class  TGLManipSet;  Combine all available manipulators in a collection. More...;  ; class  TGLMatrix;  16 component (4x4) transform matrix - column MAJOR as per GL. More...;  ; class  TGLObject;  Base-class for direct OpenGL renderers. More...;  ; class  TGLOrthoCamera;  Orthographic projection camera. More...;  ; class  TGLOutput;  Wrapper class for GL capture & output routines. More...;  ; class  TGLOverlayButton;  GL-overlay button. More...;  ; class  TGLOverlayElement;  An overlay element. More...;  ; class  TGLOverlayList;  Manage a collection of overlay elements. More...;  ; class  TGLOvlSelectRecord;  Selection record for overlay objects. More...;  ; class  TGLPadPainter;  ""Delegating"" part of TGLPadPainter. More...;  ; class  TGLParametricEquation;  A parametric surface is a surface defined by a parametric equation, involving two parameters (u, v): More...;  ; class  TGLParametricEquationGL;  GL-renderer wrapper for TGLParametricEquation. More...;  ; class  TGLParametricPlot;  ; class  TGLPerspectiveCamera;  P",MatchSource.WIKI,doc/master/group__opengl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__opengl.html
Integrability,interface,interface,". ROOT: OpenGL rendering. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; OpenGL renderingGraphics » 3D Graphics. ; OpenGL rendering and utility classes. ; The GL module incapsulates ROOT's interface to the OpenGL rendering engine and provides the following functionality:. management of system-resources;; frequently used utility classes;; base-classes for shapes, scenes and viewers;; concrete implementations of shapes needed by TGeo package;; concrete implementations of scenes and viewers including the GUI components;; specialized plot-painters for GL rendering of TH2, TH3, TF2 and TF3 object as well as parametric surfaces. Papers describing OpenGL in ROOT:; ROOT 3D graphics, presented at CHEP 2006.; 3D graphics with OpenGL: recent improvements and plans, presented at ROOT Workshop 2007; Next generation of OpenGL support in ROOT, presented at CHEP 2007. . Classes; class  TArcBall;  Implements the arc-ball rotation manipulator. More...;  ; class  TF2GL;  GL renderer for TF2. More...;  ; class  TGL5DDataSet;  ; class  TGL5DDataSetEditor;  GUI editor for OpenGL 5D Painter. More...;  ; class  TGL5DPainter;  TGL5DPainter implements ""gl5d"" option for TTree::Draw. More...;  ; class  TGLAdapter;  Allow plot-painters to be used for gl-inpad and gl-viewer. More...;  ; class  TGLAnnotation;  GL-overlay annotation. More...;  ; class  TGLAutoRotator;  Automatically rotates GL camera. More...;  ; class  TGLAxis;  GL Axis. More...;  ; class  TGLAxisPainter;  Utility class to paint axis in GL. More...;  ; class  TGLAxisPainterBox;  Painter class for axes encompassing a 3D box. More...;  ; class  TGLBoundingBox;  Concrete class describing an orientated (free) or axis aligned box of 8 vertices. More...;  ; class  TGLBoxCut;  Used by plot-painters to determine the area of the plot that is cut away. More...;  ; class  TGLBoxPainter;  Paints TH3 histograms by rendering variable-sized boxes matching the bin contents. More...;  ; class  TGLCamera;",MatchSource.WIKI,doc/master/group__opengl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__opengl.html
Modifiability,variab,variable-sized,"es; class  TArcBall;  Implements the arc-ball rotation manipulator. More...;  ; class  TF2GL;  GL renderer for TF2. More...;  ; class  TGL5DDataSet;  ; class  TGL5DDataSetEditor;  GUI editor for OpenGL 5D Painter. More...;  ; class  TGL5DPainter;  TGL5DPainter implements ""gl5d"" option for TTree::Draw. More...;  ; class  TGLAdapter;  Allow plot-painters to be used for gl-inpad and gl-viewer. More...;  ; class  TGLAnnotation;  GL-overlay annotation. More...;  ; class  TGLAutoRotator;  Automatically rotates GL camera. More...;  ; class  TGLAxis;  GL Axis. More...;  ; class  TGLAxisPainter;  Utility class to paint axis in GL. More...;  ; class  TGLAxisPainterBox;  Painter class for axes encompassing a 3D box. More...;  ; class  TGLBoundingBox;  Concrete class describing an orientated (free) or axis aligned box of 8 vertices. More...;  ; class  TGLBoxCut;  Used by plot-painters to determine the area of the plot that is cut away. More...;  ; class  TGLBoxPainter;  Paints TH3 histograms by rendering variable-sized boxes matching the bin contents. More...;  ; class  TGLCamera;  Abstract base camera class - concrete classes for orthographic and perspective cameras derive from it. More...;  ; class  TGLCameraGuide;  Draws arrows showing camera orientation in the overlay. More...;  ; class  TGLCameraOverlay;  A GL overlay element which displays camera furstum. More...;  ; class  TGLClip;  Abstract clipping shape - derives from TGLPhysicalShape Adds clip mode (inside/outside) and pure virtual method to approximate shape as set of planes. More...;  ; class  TGLClipBox;  Concrete clip box object. More...;  ; class  TGLClipPlane;  Concrete clip plane object. More...;  ; class  TGLClipSet;  A collection of concrete TGLClip objects to be selected from. More...;  ; class  TGLClipSetEditor;  GUI editor for TGLClipSet. More...;  ; class  TGLClipSetSubEditor;  GUI sub-editor for TGLClipSet. More...;  ; class  TGLColor;  Class encapsulating color information in preferred GL format - an a",MatchSource.WIKI,doc/master/group__opengl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__opengl.html
Testability,log,logical,"  Frame-buffer object. More...;  ; class  TGLFont;  A wrapper class for FTFont. More...;  ; class  TGLFontManager;  A FreeType GL font manager. More...;  ; class  TGLFormat;  Encapsulation of format / contents of an OpenGL buffer. More...;  ; class  TGLH2PolyPainter;  Paint TH2Poly. More...;  ; class  TGLHistPainter;  The histogram painter class using OpenGL. More...;  ; class  TGLIsoPainter;  ""gliso"" option for TH3. More...;  ; class  TGLLegoPainter;  Plot-painter implementing LEGO rendering of TH2 histograms in cartesian, polar, cylindrical and spherical coordinates. More...;  ; class  TGLLightSet;  Encapsulates a set of lights for OpenGL. More...;  ; class  TGLLightSetSubEditor;  Sub-editor for TGLLightSet. More...;  ; class  TGLLine3;  3D space, fixed length, line class, with direction / length 'vector', passing through point 'vertex'. More...;  ; class  TGLLockable;  Simple locking interface used by viewer and scene. More...;  ; class  TGLLogicalShape;  Abstract logical shape - a GL 'drawable' - base for all shapes - faceset sphere etc. More...;  ; class  TGLManip;  Abstract base class for viewer manipulators, which allow direct in viewer manipulation of a (TGlPhysicalShape) object - currently translation, scaling and rotation along/round objects local axes. More...;  ; class  TGLManipSet;  Combine all available manipulators in a collection. More...;  ; class  TGLMatrix;  16 component (4x4) transform matrix - column MAJOR as per GL. More...;  ; class  TGLObject;  Base-class for direct OpenGL renderers. More...;  ; class  TGLOrthoCamera;  Orthographic projection camera. More...;  ; class  TGLOutput;  Wrapper class for GL capture & output routines. More...;  ; class  TGLOverlayButton;  GL-overlay button. More...;  ; class  TGLOverlayElement;  An overlay element. More...;  ; class  TGLOverlayList;  Manage a collection of overlay elements. More...;  ; class  TGLOvlSelectRecord;  Selection record for overlay objects. More...;  ; class  TGLPadPainter;  ""Delegating"" p",MatchSource.WIKI,doc/master/group__opengl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__opengl.html
Usability,simpl,simply,"  TGLSAViewer;  The top level standalone GL-viewer - created via plugin manager. More...;  ; class  TGLScaleManip;  Scale manipulator - attaches to physical shape and draws local axes widgets with box heads. More...;  ; class  TGLScene;  TGLScene provides management and rendering of ROOT's default 3D /object representation as logical and physical shapes. More...;  ; class  TGLSceneBase;  Scene base-class – provides basic interface expected by the TGLViewer or its sub-classes: More...;  ; class  TGLSceneInfo;  Base class for extended scene context. More...;  ; class  TGLScenePad;  Implements VirtualViewer3D interface and fills the base-class visualization structures from pad contents. More...;  ; class  TGLSdfFontMaker;  Helper class for generation of Signed Distance Field (SDF) fonts for REve. More...;  ; class  TGLSelectBuffer;  Encapsulates OpenGL select buffer. More...;  ; class  TGLSelectionBuffer;  ; class  TGLSelectRecord;  Standard selection record including information about containing scene and details ob out selected object (TGLPhysicalShape*, TObject* or simply a void* for foreign scenes). More...;  ; class  TGLSelectRecordBase;  Base class for select records. More...;  ; class  TGLSphere;  Implements a native ROOT-GL sphere that can be rendered at different levels of detail. More...;  ; class  TGLStopwatch;  Stopwatch object for timing GL work. More...;  ; class  TGLSurfacePainter;  Implements painting of TH2 with ""SURF"" option. More...;  ; class  TGLText;  GL Text. More...;  ; class  TGLTF3Painter;  Plot-painter for TF3 functions. More...;  ; class  TGLTH3Composition;  ; class  TGLTH3CompositionPainter;  ; class  TGLTH3Slice;  A slice of a TH3. More...;  ; class  TGLTransManip;  Translation manipulator - attaches to physical shape and draws local axes widgets with arrow heads. More...;  ; class  TGLUtil;  Wrapper class for various misc static functions - error checking, draw helpers etc. More...;  ; class  TGLVector3;  3 component (x/y/z) vector class. M",MatchSource.WIKI,doc/master/group__opengl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__opengl.html
Deployability,continuous,continuous,". ROOT: Probability Density Functions (PDF). ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; Probability Density Functions (PDF)Math » MathCore | Math » MathMore » Statistical functions. ; Probability density functions of various statistical distributions (continuous and discrete). ; The probability density function returns the probability that the variate has the value x. In statistics the PDF is also called the frequency function. . Functions; double ROOT::Math::noncentral_chisquared_pdf (double x, double r, double lambda);  Probability density function of the non central \(\chi^2\) distribution with \(r\) degrees of freedom and the noon-central parameter \(\lambda\). ;  ; double ROOT::Math::vavilov_accurate_pdf (double x, double kappa, double beta2);  The Vavilov probability density function. ;  ; double ROOT::Math::vavilov_fast_pdf (double x, double kappa, double beta2);  The Vavilov probability density function. ;  . Probability Density Functions from MathCore; Additional PDF's are provided in the MathMore library (see PDF functions from MathMore) . double ROOT::Math::beta_pdf (double x, double a, double b);  Probability density function of the beta distribution. ;  ; double ROOT::Math::binomial_pdf (unsigned int k, double p, unsigned int n);  Probability density function of the binomial distribution. ;  ; double ROOT::Math::negative_binomial_pdf (unsigned int k, double p, double n);  Probability density function of the negative binomial distribution. ;  ; double ROOT::Math::breitwigner_pdf (double x, double gamma, double x0=0);  Probability density function of Breit-Wigner distribution, which is similar, just a different definition of the parameters, to the Cauchy distribution (see cauchy_pdf ) ;  ; double ROOT::Math::cauchy_pdf (double x, double b=1, double x0=0);  Probability density function of the Cauchy distribution which is also called Lorentzian distribution. ;  ; double ROOT::Math::chisquared_pdf (double x, d",MatchSource.WIKI,doc/master/group__PdfFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__PdfFunc.html
Modifiability,variab,variable,"pdf(). double ROOT::Math::beta_pdf ; (; double ; x, . double ; a, . double ; b . ). inline . Probability density function of the beta distribution. . \[ p(x) = \frac{\Gamma (a + b) } {\Gamma(a)\Gamma(b) } x ^{a-1} (1 - x)^{b-1} \]. for \(0 \leq x \leq 1 \). For detailed description see Mathworld. ; Definition at line 82 of file PdfFuncMathCore.h. ◆ bigaussian_pdf(). double ROOT::Math::bigaussian_pdf ; (; double ; x, . double ; y, . double ; sigmax = 1, . double ; sigmay = 1, . double ; rho = 0, . double ; x0 = 0, . double ; y0 = 0 . ). inline . Probability density function of the bi-dimensional (Gaussian) distribution. . \[ p(x) = {1 \over 2 \pi \sigma_x \sigma_y \sqrt{1-\rho^2}} \exp (-((x-x0)^2/\sigma_x^2 + (y-y0)^2/\sigma_y^2 - 2 \rho x y/(\sigma_x\sigma_y))/2(1-\rho^2)) \]. For detailed description see Mathworld. It can also be evaluated using normal_pdf which will call the same implementation.; Parameters. xx variable ; yy variable ; sigmaxthe stdev in x ; sigmaythe stdev in y ; rhocorrelation, must be between -1,1 ; x0the offset in x ; y0the offset in y . Definition at line 431 of file PdfFuncMathCore.h. ◆ binomial_pdf(). double ROOT::Math::binomial_pdf ; (; unsigned int ; k, . double ; p, . unsigned int ; n . ). inline . Probability density function of the binomial distribution. . \[ p(k) = \frac{n!}{k! (n-k)!} p^k (1-p)^{n-k} \]. for \( 0 \leq k \leq n \). For detailed description see Mathworld. ; Definition at line 118 of file PdfFuncMathCore.h. ◆ breitwigner_pdf(). double ROOT::Math::breitwigner_pdf ; (; double ; x, . double ; gamma, . double ; x0 = 0 . ). inline . Probability density function of Breit-Wigner distribution, which is similar, just a different definition of the parameters, to the Cauchy distribution (see cauchy_pdf ) . \[ p(x) = \frac{1}{\pi} \frac{\frac{1}{2} \Gamma}{x^2 + (\frac{1}{2} \Gamma)^2} \]. Definition at line 175 of file PdfFuncMathCore.h. ◆ cauchy_pdf(). double ROOT::Math::cauchy_pdf ; (; double ; x, . double ; b = 1, . double ; x0",MatchSource.WIKI,doc/master/group__PdfFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__PdfFunc.html
Testability,log,lognormal,"double alpha, double n, double sigma, double mean=0);  Crystal ball function. ;  ; double ROOT::Math::exponential_pdf (double x, double lambda, double x0=0);  Probability density function of the exponential distribution. ;  ; double ROOT::Math::fdistribution_pdf (double x, double n, double m, double x0=0);  Probability density function of the F-distribution. ;  ; double ROOT::Math::gamma_pdf (double x, double alpha, double theta, double x0=0);  Probability density function of the gamma distribution. ;  ; double ROOT::Math::gaussian_pdf (double x, double sigma=1, double x0=0);  Probability density function of the normal (Gaussian) distribution. ;  ; double ROOT::Math::bigaussian_pdf (double x, double y, double sigmax=1, double sigmay=1, double rho=0, double x0=0, double y0=0);  Probability density function of the bi-dimensional (Gaussian) distribution. ;  ; double ROOT::Math::landau_pdf (double x, double xi=1, double x0=0);  Probability density function of the Landau distribution: ;  ; double ROOT::Math::lognormal_pdf (double x, double m, double s, double x0=0);  Probability density function of the lognormal distribution. ;  ; double ROOT::Math::normal_pdf (double x, double sigma=1, double x0=0);  Probability density function of the normal (Gaussian) distribution. ;  ; double ROOT::Math::poisson_pdf (unsigned int n, double mu);  Probability density function of the Poisson distribution. ;  ; double ROOT::Math::tdistribution_pdf (double x, double r, double x0=0);  Probability density function of Student's t-distribution. ;  ; double ROOT::Math::uniform_pdf (double x, double a, double b, double x0=0);  Probability density function of the uniform (flat) distribution. ;  ; double ROOT::Math::crystalball_pdf (double x, double alpha, double n, double sigma, double mean=0);  pdf definition of the crystal_ball which is defined only for n > 1 otherwise integral is diverging ;  . Function Documentation. ◆ beta_pdf(). double ROOT::Math::beta_pdf ; (; double ; x, . double ; a, . d",MatchSource.WIKI,doc/master/group__PdfFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__PdfFunc.html
Deployability,release,releases,". ROOT: Cumulative Distribution Functions (CDF). ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; Cumulative Distribution Functions (CDF)Math » MathCore | Math » MathMore » Statistical functions. ; Cumulative distribution functions of various distributions. ; The functions with the extension _cdf calculate the lower tail integral of the probability density function. \[ D(x) = \int_{-\infty}^{x} p(x') dx' \]. while those with the _cdf_c extension calculate the complement of cumulative distribution function, called in statistics the survival function. It corresponds to the upper tail integral of the probability density function. \[ D(x) = \int_{x}^{+\infty} p(x') dx' \]. NOTE: In the old releases (< 5.14) the _cdf functions were called _quant and the _cdf_c functions were called _prob. These names are currently kept for backward compatibility, but their usage is deprecated.; These functions are defined in the header file Math/ProbFunc.h or in the global one including all statistical functions Math/DistFunc.h . Functions; double ROOT::Math::beta_cdf (double x, double a, double b);  Cumulative distribution function of the beta distribution Upper tail of the integral of the beta_pdf. ;  ; double ROOT::Math::beta_cdf_c (double x, double a, double b);  Complement of the cumulative distribution function of the beta distribution. ;  ; double ROOT::Math::binomial_cdf (unsigned int k, double p, unsigned int n);  Cumulative distribution function of the Binomial distribution Lower tail of the integral of the binomial_pdf. ;  ; double ROOT::Math::binomial_cdf_c (unsigned int k, double p, unsigned int n);  Complement of the cumulative distribution function of the Binomial distribution. ;  ; double ROOT::Math::breitwigner_cdf (double x, double gamma, double x0=0);  Cumulative distribution function (lower tail) of the Breit_Wigner distribution and it is similar (just a different parameter definition) to the Cauchy distribution (see cauchy_c",MatchSource.WIKI,doc/master/group__ProbFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__ProbFunc.html
Testability,log,lognormal,"n, double m, double x0=0);  Cumulative distribution function of the F-distribution (lower tail). ;  ; double ROOT::Math::fdistribution_cdf_c (double x, double n, double m, double x0=0);  Complement of the cumulative distribution function of the F-distribution (upper tail). ;  ; double ROOT::Math::gamma_cdf (double x, double alpha, double theta, double x0=0);  Cumulative distribution function of the gamma distribution (lower tail). ;  ; double ROOT::Math::gamma_cdf_c (double x, double alpha, double theta, double x0=0);  Complement of the cumulative distribution function of the gamma distribution (upper tail). ;  ; double ROOT::Math::landau_cdf (double x, double xi=1, double x0=0);  Cumulative distribution function of the Landau distribution (lower tail). ;  ; double ROOT::Math::landau_cdf_c (double x, double xi=1, double x0=0);  Complement of the distribution function of the Landau distribution (upper tail). ;  ; double ROOT::Math::lognormal_cdf (double x, double m, double s, double x0=0);  Cumulative distribution function of the lognormal distribution (lower tail). ;  ; double ROOT::Math::lognormal_cdf_c (double x, double m, double s, double x0=0);  Complement of the cumulative distribution function of the lognormal distribution (upper tail). ;  ; double ROOT::Math::negative_binomial_cdf (unsigned int k, double p, double n);  Cumulative distribution function of the Negative Binomial distribution Lower tail of the integral of the negative_binomial_pdf. ;  ; double ROOT::Math::negative_binomial_cdf_c (unsigned int k, double p, double n);  Complement of the cumulative distribution function of the Negative Binomial distribution. ;  ; double ROOT::Math::normal_cdf (double x, double sigma=1, double x0=0);  Cumulative distribution function of the normal (Gaussian) distribution (lower tail). ;  ; double ROOT::Math::normal_cdf_c (double x, double sigma=1, double x0=0);  Complement of the cumulative distribution function of the normal (Gaussian) distribution (upper tail). ;  ;",MatchSource.WIKI,doc/master/group__ProbFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__ProbFunc.html
Usability,simpl,simply,"ribution (lower tail). . \[ D(x) = \int_{-\infty}^{x} p(x) dx \]. where \(p(x)\) is the Landau probability density function : ; \[ p(x) = \frac{1}{\xi} \phi (\lambda) \]. with ; \[ \phi(\lambda) = \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} e^{\lambda s + s \log{s}} ds\]. with \(\lambda = (x-x_0)/\xi\). For a detailed description see K.S. Kölbig and B. Schorr, A program package for the Landau distribution, Computer Phys. Comm. 31 (1984) 97-111 [Erratum-ibid. 178 (2008) 972]. The same algorithms as in CERNLIB (DISLAN) is used.; Parameters. xThe argument \(x\) ; xiThe width parameter \(\xi\) ; x0The location parameter \(x_0\) . Definition at line 336 of file ProbFuncMathCore.cxx. ◆ landau_cdf_c(). double ROOT::Math::landau_cdf_c ; (; double ; x, . double ; xi = 1, . double ; x0 = 0 . ). inline . Complement of the distribution function of the Landau distribution (upper tail). . \[ D(x) = \int_{x}^{+\infty} p(x) dx \]. where p(x) is the Landau probability density function. It is implemented simply as 1. - landau_cdf; Parameters. xThe argument \(x\) ; xiThe width parameter \(\xi\) ; x0The location parameter \(x_0\) . Definition at line 402 of file ProbFuncMathCore.h. ◆ lognormal_cdf(). double ROOT::Math::lognormal_cdf ; (; double ; x, . double ; m, . double ; s, . double ; x0 = 0 . ). Cumulative distribution function of the lognormal distribution (lower tail). . \[ D(x) = \int_{-\infty}^{x} {1 \over x' \sqrt{2 \pi s^2} } e^{-(\ln{x'} - m)^2/2 s^2} dx' \]. For detailed description see Mathworld. ; Definition at line 218 of file ProbFuncMathCore.cxx. ◆ lognormal_cdf_c(). double ROOT::Math::lognormal_cdf_c ; (; double ; x, . double ; m, . double ; s, . double ; x0 = 0 . ). Complement of the cumulative distribution function of the lognormal distribution (upper tail). . \[ D(x) = \int_{x}^{+\infty} {1 \over x' \sqrt{2 \pi s^2} } e^{-(\ln{x'} - m)^2/2 s^2} dx' \]. For detailed description see Mathworld. ; Definition at line 210 of file ProbFuncMathCore.cxx. ◆ negative_binomia",MatchSource.WIKI,doc/master/group__ProbFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__ProbFunc.html
Testability,benchmark,benchmark,". ROOT: PROOF. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; PROOF. ; Classes defining the Parallel ROOT Facility, PROOF, a framework for parallel analysis of ROOT TTrees. ; Deprecated:We keep PROOF for those who still need it for legacy use cases. PROOF is not developed anymore and receiving only limited support. ROOT has since a few years moved to RDataFrame and related products as multi-core/multi-processing engines. Modules;  PROOF kernel Libraries;  The PROOF kernel libraries (libProof, libProofPlayer, libProofDraw) contain the classes defining the kernel of the PROOF facility, i.e. ;  ;  PROOF benchmark utilities;  Set of utilities to benchmark a PROOF facility. ;  . Files; file  runProof.C;  Macro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__proof.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__proof.html
Deployability,release,releases,". ROOT: Quantile Functions. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; Quantile FunctionsMath » MathCore | Math » MathMore » Statistical functions. ; Inverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions. ; The functions with the extension _quantile calculate the inverse of the _cdf function, the lower tail integral of the probability density function \(D^{-1}(z)\) where. \[ D(x) = \int_{-\infty}^{x} p(x') dx' \]. while those with the _quantile_c extension calculate the inverse of the _cdf_c functions, the upper tail integral of the probability density function \(D^{-1}(z) \) where. \[ D(x) = \int_{x}^{+\infty} p(x') dx' \]. These functions are defined in the header file Math/ProbFunc.h or in the global one including all statistical functions Math/DistFunc.h; NOTE: In the old releases (< 5.14) the _quantile functions were called _quant_inv and the _quantile_c functions were called _prob_inv. These names are currently kept for backward compatibility, but their usage is deprecated.; The functions with the extension _quantile calculate the inverse of the _cdf function, the lower tail integral of the probability density function \(D^{-1}(z)\) where. \[ D(x) = \int_{-\infty}^{x} p(x') dx' \]. while those with the _quantile_c extension calculate the inverse of the _cdf_c functions, the upper tail integral of the probability density function \(D^{-1}(z) \) where. \[ D(x) = \int_{x}^{+\infty} p(x') dx' \]. The implementation used is that of GSL.; NOTE: In the old releases (< 5.14) the _quantile functions were called _quant_inv and the _quantile_c functions were called _prob_inv. These names are currently kept for backward compatibility, but their usage is deprecated. . Functions; double ROOT::MathMore::chisquared_quantile (double z, double r);  Re-implementation in MathMore of the Inverse ( \(D^{-1}(z)\)) of the cumulativ",MatchSource.WIKI,doc/master/group__QuantFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__QuantFunc.html
Testability,log,lognormal,"function of the upper tail of the f distribution (fdistribution_cdf_c). ;  ; double ROOT::Math::gamma_quantile_c (double z, double alpha, double theta);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the gamma distribution (gamma_cdf_c). ;  ; double ROOT::Math::gamma_quantile (double z, double alpha, double theta);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the gamma distribution (gamma_cdf). ;  ; double ROOT::Math::gaussian_quantile_c (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the normal (Gaussian) distribution (gaussian_cdf_c). ;  ; double ROOT::Math::gaussian_quantile (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the normal (Gaussian) distribution (gaussian_cdf). ;  ; double ROOT::Math::lognormal_quantile_c (double x, double m, double s);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the lognormal distribution (lognormal_cdf_c). ;  ; double ROOT::Math::lognormal_quantile (double x, double m, double s);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the lognormal distribution (lognormal_cdf). ;  ; double ROOT::Math::normal_quantile_c (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the normal (Gaussian) distribution (normal_cdf_c). ;  ; double ROOT::Math::normal_quantile (double z, double sigma);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the lower tail of the normal (Gaussian) distribution (normal_cdf). ;  ; double ROOT::Math::uniform_quantile_c (double z, double a, double b);  Inverse ( \(D^{-1}(z)\)) of the cumulative distribution function of the upper tail of the uniform (flat) distribution (uniform_cdf_c). ;  ; double ROOT::Math::uniform_quantile (double z, double a, double ",MatchSource.WIKI,doc/master/group__QuantFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__QuantFunc.html
Integrability,wrap,wrapper,"eration of Ranlux generator with luxury level of 1 (It throws away 202 value for every 12 used) see here More...;  ; class  ROOT::Math::GSLRngRanLuxD2;  Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 2 (It throws away 397 value for every 12 used) see here More...;  ; class  ROOT::Math::GSLRngRanLuxS1;  Second generation of Ranlux generator for single precision with luxury level of 1 (It throws away 202 values for every 12 used) see here More...;  ; class  ROOT::Math::GSLRngRanLuxS2;  Second generation of Ranlux generator for Single precision with luxury level of 2 (It throws away 397 value for every 12 used) see here More...;  ; class  ROOT::Math::GSLRngRanMar;  RANMAR generator see here More...;  ; class  ROOT::Math::GSLRngTaus;  Tausworthe generator by L'Ecuyer see here More...;  ; class  ROOT::Math::MersenneTwisterEngine;  Random number generator class based on M. More...;  ; class  ROOT::Math::MixMaxEngine< N, SkipNumber >;  MixMaxEngine is a wrapper class for the MIXMAX Random number generator. More...;  ; class  ROOT::Math::Random< Engine >;  Documentation for the Random class. More...;  ; class  ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >;  Specialized implementation of the Random functions based on the GSL library. More...;  ; class  ROOT::Math::StdEngine< Generator >;  Class to wrap engines from the C++ standard random library in the ROOT Random interface. More...;  ; class  TKDTree< Index, Value >;  Class implementing a kd-tree. More...;  ; class  TRandom;  This is the base class for the ROOT Random number generators. More...;  ; class  TRandom1;  The Ranlux Random number generator class. More...;  ; class  TRandom2;  Random number generator class based on the maximally quidistributed combined Tausworthe generator by L'Ecuyer. More...;  ; class  TRandom3;  Random number generator class based on M. More...;  . Typedefs; typedef TRandomEngine ROOT::Math::DefaultEngineType;  Documenta",MatchSource.WIKI,doc/master/group__Random.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Random.html
Availability,error,error,". More...;  ; class  RooDerivative;  Represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class. More...;  ; class  RooDirItem;  Utility base class for RooFit objects that are to be attached to ROOT directories. More...;  ; class  RooDLLSignificanceMCSModule;  Add-on module to RooMCStudy that calculates the significance of a signal by comparing the likelihood of a fit fit with a given parameter floating with a fit with that given parameter fixed to a nominal value (usually zero). More...;  ; class  RooDouble;  Minimal implementation of a TObject holding a double value. More...;  ; class  RooEffGenContext;  Specialized generator context for p.d.fs represented by class RooEffProd, which are p.d.fs multiplied with an efficiency function. More...;  ; class  RooEfficiency;  A PDF helper class to fit efficiencies parameterized by a supplied function F. More...;  ; class  RooEllipse;  Two-dimensional ellipse that can be used to represent an error contour. More...;  ; class  RooErrorVar;  Auxiliary class that represents the error of a RooRealVar as a separate object. More...;  ; class  RooExpensiveObjectCache;  Singleton class that serves as repository for objects that are expensive to calculate. More...;  ; class  RooExtendedTerm;  A p.d.f with no observables that only introduces an extended ML term for a given number of expected events term when an extended ML is constructed. More...;  ; class  RooFactoryWSTool;  Implementation detail of the RooWorkspace. More...;  ; class  RooFFTConvPdf;  PDF for the numerical (FFT) convolution of two PDFs. More...;  ; class  RooFirstMoment;  ; class  RooFoamGenerator;  Generic Monte Carlo toy generator that implement the TFOAM sampling technique on any positively valued function. More...;  ; class  RooFormula;  Internally uses ROOT's TFormula to compute user-defined expressions of RooAbsArgs. More...;  ; class  RooFracRemainder;  Calculates the remaind",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
Deployability,integrat,integrators,"s for objects to be stored in RooAbsCache cache manager objects. More...;  ; class  RooAbsCategory;  A space to attach TBranches. More...;  ; class  RooAbsCategoryLValue;  Abstract base class for objects that represent a discrete value that can be set from the outside, i.e. More...;  ; class  RooAbsCollection;  Abstract container object that can hold multiple RooAbsArg objects. More...;  ; class  RooAbsData;  Abstract base class for binned and unbinned datasets. More...;  ; class  RooAbsDataStore;  Abstract base class for a data collection. More...;  ; class  RooAbsFunc;  Abstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it. More...;  ; class  RooAbsGenContext;  Abstract base class for generator contexts of RooAbsPdf objects. More...;  ; class  RooAbsHiddenReal;  Base class for objects that want to hide their return value from interactive use, e.g. More...;  ; class  RooAbsIntegrator;  Abstract interface for integrators of real-valued functions that implement the RooAbsFunc interface. More...;  ; class  RooAbsLValue;  Abstract base class for objects that are lvalues, i.e. More...;  ; class  RooAbsMCStudyModule;  Base class for add-on modules to RooMCStudy that can perform additional calculations on each generate+fit cycle managed by RooMCStudy. More...;  ; class  RooAbsMoment;  ; class  RooAbsNumGenerator;  Abstract base class for MC event generator implementations like RooAcceptReject and RooFoam. More...;  ; class  RooAbsOptTestStatistic;  Abstract base class for test statistics objects that evaluate a function or PDF at each point of a given dataset. More...;  ; class  RooAbsPdf;  Abstract interface for all probability density functions. More...;  ; class  RooAbsProxy;  Abstract interface for proxy classes. More...;  ; class  RooAbsReal;  Abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to co",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
Energy Efficiency,adapt,adaptor,"alued object. More...;  ; class  RooConvCoefVar;  Auxiliary class that represents the coefficient of a RooAbsAnaConvPdf implementation as a separate RooAbsReal object to be able to interface these coefficient terms with the generic RooRealIntegral integration mechanism. More...;  ; class  RooConvGenContext;  Efficient implementation of the generator context specific for RooAbsAnaConvPdf objects. More...;  ; class  RooConvIntegrandBinding;  Implementation of RooAbsFunc that represent the integrand of a generic (numeric) convolution A (x) B so that it can be passed to a numeric integrator. More...;  ; class  RooCurve;  One-dimensional graphical representation of a real-valued function. More...;  ; class  RooDataHist;  Container class to hold N-dimensional binned data. More...;  ; class  RooDataHistSliceIter;  Iterates over all bins in a RooDataHist that occur in a slice defined by the bin coordinates of the input sliceSet. More...;  ; class  RooDataProjBinding;  adaptor that projects a real function via summation of states provided in a dataset. More...;  ; class  RooDataSet;  Container class to hold unbinned data. More...;  ; class  RooDerivative;  Represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class. More...;  ; class  RooDirItem;  Utility base class for RooFit objects that are to be attached to ROOT directories. More...;  ; class  RooDLLSignificanceMCSModule;  Add-on module to RooMCStudy that calculates the significance of a signal by comparing the likelihood of a fit fit with a given parameter floating with a fit with that given parameter fixed to a nominal value (usually zero). More...;  ; class  RooDouble;  Minimal implementation of a TObject holding a double value. More...;  ; class  RooEffGenContext;  Specialized generator context for p.d.fs represented by class RooEffProd, which are p.d.fs multiplied with an efficiency function. More...;  ; class  RooEfficiency;  A PDF ",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
Integrability,interface,interface,"t base class for p.d.f.s that need or want to cache their evaluate() output in a RooHistPdf defined in terms of the used observables. More...;  ; class  RooAbsCachedReal;  Abstract base class for functions that need or want to cache their evaluate() output in a RooHistFunc defined in terms of the used observables. More...;  ; class  RooAbsCacheElement;  Abstract base class for objects to be stored in RooAbsCache cache manager objects. More...;  ; class  RooAbsCategory;  A space to attach TBranches. More...;  ; class  RooAbsCategoryLValue;  Abstract base class for objects that represent a discrete value that can be set from the outside, i.e. More...;  ; class  RooAbsCollection;  Abstract container object that can hold multiple RooAbsArg objects. More...;  ; class  RooAbsData;  Abstract base class for binned and unbinned datasets. More...;  ; class  RooAbsDataStore;  Abstract base class for a data collection. More...;  ; class  RooAbsFunc;  Abstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it. More...;  ; class  RooAbsGenContext;  Abstract base class for generator contexts of RooAbsPdf objects. More...;  ; class  RooAbsHiddenReal;  Base class for objects that want to hide their return value from interactive use, e.g. More...;  ; class  RooAbsIntegrator;  Abstract interface for integrators of real-valued functions that implement the RooAbsFunc interface. More...;  ; class  RooAbsLValue;  Abstract base class for objects that are lvalues, i.e. More...;  ; class  RooAbsMCStudyModule;  Base class for add-on modules to RooMCStudy that can perform additional calculations on each generate+fit cycle managed by RooMCStudy. More...;  ; class  RooAbsMoment;  ; class  RooAbsNumGenerator;  Abstract base class for MC event generator implementations like RooAcceptReject and RooFoam. More...;  ; class  RooAbsOptTestStatistic;  Abstract base class for test statistics objects that evaluate a function or PDF at each point ",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
Modifiability,variab,variable,"t base class for p.d.f.s that need or want to cache their evaluate() output in a RooHistPdf defined in terms of the used observables. More...;  ; class  RooAbsCachedReal;  Abstract base class for functions that need or want to cache their evaluate() output in a RooHistFunc defined in terms of the used observables. More...;  ; class  RooAbsCacheElement;  Abstract base class for objects to be stored in RooAbsCache cache manager objects. More...;  ; class  RooAbsCategory;  A space to attach TBranches. More...;  ; class  RooAbsCategoryLValue;  Abstract base class for objects that represent a discrete value that can be set from the outside, i.e. More...;  ; class  RooAbsCollection;  Abstract container object that can hold multiple RooAbsArg objects. More...;  ; class  RooAbsData;  Abstract base class for binned and unbinned datasets. More...;  ; class  RooAbsDataStore;  Abstract base class for a data collection. More...;  ; class  RooAbsFunc;  Abstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it. More...;  ; class  RooAbsGenContext;  Abstract base class for generator contexts of RooAbsPdf objects. More...;  ; class  RooAbsHiddenReal;  Base class for objects that want to hide their return value from interactive use, e.g. More...;  ; class  RooAbsIntegrator;  Abstract interface for integrators of real-valued functions that implement the RooAbsFunc interface. More...;  ; class  RooAbsLValue;  Abstract base class for objects that are lvalues, i.e. More...;  ; class  RooAbsMCStudyModule;  Base class for add-on modules to RooMCStudy that can perform additional calculations on each generate+fit cycle managed by RooMCStudy. More...;  ; class  RooAbsMoment;  ; class  RooAbsNumGenerator;  Abstract base class for MC event generator implementations like RooAcceptReject and RooFoam. More...;  ; class  RooAbsOptTestStatistic;  Abstract base class for test statistics objects that evaluate a function or PDF at each point ",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
Performance,cache,cache,". ROOT: RooFit Core. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; RooFit CoreRooFit. ; RooFit core classes. These provide the infrastructure for building likelihood models. . Classes; class  RooFit::Evaluator;  Evaluates a RooAbsReal object in other ways than recursive graph traversal. More...;  ; class  Roo1DTable;  One-dimensional table. More...;  ; class  RooAbsAnaConvPdf;  Base class for PDFs that represent a physics model that can be analytically convolved with a resolution model. More...;  ; class  RooAbsArg;  Common abstract base class for objects that represent a value and a ""shape"" in RooFit. More...;  ; class  RooAbsBinning;  Abstract base class for RooRealVar binning definitions. More...;  ; class  RooAbsCache;  Abstract base class for data members of RooAbsArgs that cache other (composite) RooAbsArg expressions. More...;  ; class  RooAbsCachedPdf;  Abstract base class for p.d.f.s that need or want to cache their evaluate() output in a RooHistPdf defined in terms of the used observables. More...;  ; class  RooAbsCachedReal;  Abstract base class for functions that need or want to cache their evaluate() output in a RooHistFunc defined in terms of the used observables. More...;  ; class  RooAbsCacheElement;  Abstract base class for objects to be stored in RooAbsCache cache manager objects. More...;  ; class  RooAbsCategory;  A space to attach TBranches. More...;  ; class  RooAbsCategoryLValue;  Abstract base class for objects that represent a discrete value that can be set from the outside, i.e. More...;  ; class  RooAbsCollection;  Abstract container object that can hold multiple RooAbsArg objects. More...;  ; class  RooAbsData;  Abstract base class for binned and unbinned datasets. More...;  ; class  RooAbsDataStore;  Abstract base class for a data collection. More...;  ; class  RooAbsFunc;  Abstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it. M",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
Testability,test,test,"sFunc;  Abstract interface for evaluating a real-valued function of one real variable and performing numerical algorithms on it. More...;  ; class  RooAbsGenContext;  Abstract base class for generator contexts of RooAbsPdf objects. More...;  ; class  RooAbsHiddenReal;  Base class for objects that want to hide their return value from interactive use, e.g. More...;  ; class  RooAbsIntegrator;  Abstract interface for integrators of real-valued functions that implement the RooAbsFunc interface. More...;  ; class  RooAbsLValue;  Abstract base class for objects that are lvalues, i.e. More...;  ; class  RooAbsMCStudyModule;  Base class for add-on modules to RooMCStudy that can perform additional calculations on each generate+fit cycle managed by RooMCStudy. More...;  ; class  RooAbsMoment;  ; class  RooAbsNumGenerator;  Abstract base class for MC event generator implementations like RooAcceptReject and RooFoam. More...;  ; class  RooAbsOptTestStatistic;  Abstract base class for test statistics objects that evaluate a function or PDF at each point of a given dataset. More...;  ; class  RooAbsPdf;  Abstract interface for all probability density functions. More...;  ; class  RooAbsProxy;  Abstract interface for proxy classes. More...;  ; class  RooAbsReal;  Abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc. More...;  ; class  RooAbsRealLValue;  Abstract base class for objects that represent a real value that may appear on the left hand side of an equation ('lvalue'). More...;  ; class  RooAbsSelfCached< Base_t >;  Abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate(). More...;  ; class  RooAbsStudy;  Abstract base class for RooStudyManager modules. More...;  ; class  RooAbsTestStatistic;  Abstract base c",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
Usability,simpl,simple," of a given input p.d.f and the object returned by RooAbsPdf::createProjection. More...;  ; class  RooPullVar;  Represents the pull of a measurement w.r.t. More...;  ; class  RooQuasiRandomGenerator;  This class generates the quasi-random (aka ""low discrepancy"") sequence for dimensions up to 12 using the Niederreiter base 2 algorithm described in Bratley, Fox, Niederreiter, ACM Trans. More...;  ; class  RooRandom;  This class provides a static interface for generating random numbers. More...;  ; class  RooRandomizeParamMCSModule;  Add-on module to RooMCStudy that allows you to randomize input generation parameters. More...;  ; class  RooRangeBinning;  Binning/range definition that only defines a range but no binning. More...;  ; class  RooRangeBoolean;  Returns 1.0 if variable is within given a range and 0.0 otherwise. More...;  ; class  RooRatio;  Represents the ratio of two RooAbsReal objects. More...;  ; class  RooRealBinding;  Lightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface. More...;  ; class  RooRealConstant;  Provides static functions to create and keep track of RooRealVar constants. More...;  ; class  RooRealIntegral;  Performs hybrid numerical/analytical integrals of RooAbsReal objects. More...;  ; class  RooFit::TestStatistics::RooRealL;  RooAbsReal that wraps RooAbsL likelihoods for use in RooFit outside of the RooMinimizer context. More...;  ; class  RooRealMPFE;  Multi-processor front-end for parallel calculation of RooAbsReal objects. More...;  ; class  RooRealSumPdf;  Implements a PDF constructed from a sum of functions: More...;  ; class  RooRealVar;  Variable that can be changed from the outside. More...;  ; class  RooRealVarSharedProperties;  Implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones. More...;  ; class  RooRecursiveFraction;  A RooAbsReal implementation that calculates the plain fraction of su",MatchSource.WIKI,doc/master/group__Roofitcore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html
Availability,avail,available,". ROOT: RooFit. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; RooFit. ; RooFit is a package for building likelihood models and fitting these to data. ; For an introduction check the RooFit Tutorials, user's guides, courses or the RooFit chapter of the Manual.; For developers, there is also the RooFit Developer Documentation, which serves as a reference on how to extend RooFit with custom classes or for contributing to RooFit itself. . Modules;  RooFit Developer Documentation;  How-to guides on how to extend RooFit with custom classes or to work on RooFit itself. ;  ;  RooFit;  RooFit main classes for building likelihood models, mainly PDFs. ;  ;  RooFit Core;  RooFit core classes. These provide the infrastructure for building likelihood models. ;  ;  RooFit Legacy;  Old RooFit classes. ;  ;  RooFit command arguments;  These arguments can be passed to functions of RooFit objects. ;  ;  RooFit More;  RooFit components that are only available if ROOT was built with the mathmore option. ;  ;  RooStats;  RooStats is a toolkit for statistical tests built on top of RooFit. ;  ;  xRooFit;  A high-level API for RooFit. ;  ;  RooFit Pythonizations;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Roofitmain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitmain.html
Modifiability,extend,extend,". ROOT: RooFit. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; RooFit. ; RooFit is a package for building likelihood models and fitting these to data. ; For an introduction check the RooFit Tutorials, user's guides, courses or the RooFit chapter of the Manual.; For developers, there is also the RooFit Developer Documentation, which serves as a reference on how to extend RooFit with custom classes or for contributing to RooFit itself. . Modules;  RooFit Developer Documentation;  How-to guides on how to extend RooFit with custom classes or to work on RooFit itself. ;  ;  RooFit;  RooFit main classes for building likelihood models, mainly PDFs. ;  ;  RooFit Core;  RooFit core classes. These provide the infrastructure for building likelihood models. ;  ;  RooFit Legacy;  Old RooFit classes. ;  ;  RooFit command arguments;  These arguments can be passed to functions of RooFit objects. ;  ;  RooFit More;  RooFit components that are only available if ROOT was built with the mathmore option. ;  ;  RooStats;  RooStats is a toolkit for statistical tests built on top of RooFit. ;  ;  xRooFit;  A high-level API for RooFit. ;  ;  RooFit Pythonizations;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Roofitmain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitmain.html
Testability,test,tests,". ROOT: RooFit. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; RooFit. ; RooFit is a package for building likelihood models and fitting these to data. ; For an introduction check the RooFit Tutorials, user's guides, courses or the RooFit chapter of the Manual.; For developers, there is also the RooFit Developer Documentation, which serves as a reference on how to extend RooFit with custom classes or for contributing to RooFit itself. . Modules;  RooFit Developer Documentation;  How-to guides on how to extend RooFit with custom classes or to work on RooFit itself. ;  ;  RooFit;  RooFit main classes for building likelihood models, mainly PDFs. ;  ;  RooFit Core;  RooFit core classes. These provide the infrastructure for building likelihood models. ;  ;  RooFit Legacy;  Old RooFit classes. ;  ;  RooFit command arguments;  These arguments can be passed to functions of RooFit objects. ;  ;  RooFit More;  RooFit components that are only available if ROOT was built with the mathmore option. ;  ;  RooStats;  RooStats is a toolkit for statistical tests built on top of RooFit. ;  ;  xRooFit;  A high-level API for RooFit. ;  ;  RooFit Pythonizations;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Roofitmain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitmain.html
Usability,guid,guides,". ROOT: RooFit. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; RooFit. ; RooFit is a package for building likelihood models and fitting these to data. ; For an introduction check the RooFit Tutorials, user's guides, courses or the RooFit chapter of the Manual.; For developers, there is also the RooFit Developer Documentation, which serves as a reference on how to extend RooFit with custom classes or for contributing to RooFit itself. . Modules;  RooFit Developer Documentation;  How-to guides on how to extend RooFit with custom classes or to work on RooFit itself. ;  ;  RooFit;  RooFit main classes for building likelihood models, mainly PDFs. ;  ;  RooFit Core;  RooFit core classes. These provide the infrastructure for building likelihood models. ;  ;  RooFit Legacy;  Old RooFit classes. ;  ;  RooFit command arguments;  These arguments can be passed to functions of RooFit objects. ;  ;  RooFit More;  RooFit components that are only available if ROOT was built with the mathmore option. ;  ;  RooStats;  RooStats is a toolkit for statistical tests built on top of RooFit. ;  ;  xRooFit;  A high-level API for RooFit. ;  ;  RooFit Pythonizations;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Roofitmain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Roofitmain.html
Integrability,interface,interface,". ROOT: One-dimensional Root-Finding. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; One-dimensional Root-FindingMath » MathCore | Math » MathMore » Numerical Algorithms. ; Classes implementing algorithms for finding the roots of a one-dimensional function. ; Various implementations exist in MathCore and MathMore The user interacts with a proxy class ROOT::Math::RootFinder which creates behind the chosen algorithms which are implemented using the ROOT::Math::IRootFinderMethod interface . Classes; class  ROOT::Math::Roots::Bisection;  Roots::Bisection Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one. More...;  ; class  ROOT::Math::Roots::Brent;  Brent-Dekker algorithm which combines an interpolation strategy with the bisection algorithm See the GSL manual for more information. More...;  ; class  ROOT::Math::BrentRootFinder;  Class for finding the root of a one dimensional function using the Brent algorithm. More...;  ; class  ROOT::Math::Roots::FalsePos;  False Position algorithm based on linear interpolation. More...;  ; class  ROOT::Math::GSLRootFdFSolver;  Root-Finder with derivatives implementation class using GSL. More...;  ; class  ROOT::Math::GSLRootFinder;  Base class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives. More...;  ; class  ROOT::Math::GSLRootFinderDeriv;  Base class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives. More...;  ; class  ROOT::Math::GSLRootFSolver;  Root-Finder implementation class using GSL. More...;  ; class  ROOT::Math::IRootFinderMethod;  Interface for finding function roots of one-dimensional functions. More...;  ; class  ROOT::Math::Roots::Newton;  a Newton algorithm, which computes the derivative at each iteration See the GSL manual for more information More...;  ; class  ROOT::Math::RootFinder;  User Class to find the Root of one dimensional fu",MatchSource.WIKI,doc/master/group__RootFinders.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__RootFinders.html
Usability,simpl,simplest,". ROOT: One-dimensional Root-Finding. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; One-dimensional Root-FindingMath » MathCore | Math » MathMore » Numerical Algorithms. ; Classes implementing algorithms for finding the roots of a one-dimensional function. ; Various implementations exist in MathCore and MathMore The user interacts with a proxy class ROOT::Math::RootFinder which creates behind the chosen algorithms which are implemented using the ROOT::Math::IRootFinderMethod interface . Classes; class  ROOT::Math::Roots::Bisection;  Roots::Bisection Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one. More...;  ; class  ROOT::Math::Roots::Brent;  Brent-Dekker algorithm which combines an interpolation strategy with the bisection algorithm See the GSL manual for more information. More...;  ; class  ROOT::Math::BrentRootFinder;  Class for finding the root of a one dimensional function using the Brent algorithm. More...;  ; class  ROOT::Math::Roots::FalsePos;  False Position algorithm based on linear interpolation. More...;  ; class  ROOT::Math::GSLRootFdFSolver;  Root-Finder with derivatives implementation class using GSL. More...;  ; class  ROOT::Math::GSLRootFinder;  Base class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives. More...;  ; class  ROOT::Math::GSLRootFinderDeriv;  Base class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives. More...;  ; class  ROOT::Math::GSLRootFSolver;  Root-Finder implementation class using GSL. More...;  ; class  ROOT::Math::IRootFinderMethod;  Interface for finding function roots of one-dimensional functions. More...;  ; class  ROOT::Math::Roots::Newton;  a Newton algorithm, which computes the derivative at each iteration See the GSL manual for more information More...;  ; class  ROOT::Math::RootFinder;  User Class to find the Root of one dimensional fu",MatchSource.WIKI,doc/master/group__RootFinders.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__RootFinders.html
Availability,error,error,"nsensitive first 4 letters of the corresponding class name (e.g. ""`tubs`"" will match **TGeoTubeSeg**, ""`bbox`"" will match **TGeoBBox**); nmed: the medium number. This will create a special volume that will not be directly used in the geometry, but whenever positioned will require a list of actual parameters for the current shape that will be created in this process. Such volumes having shape parameters known only when used have to be positioned only with **TGeoManager::Node() method (see ‘Creating and Positioning Volumes').**; Other case when shape parameterizations are quite useful is scaling geometry structures. Imagine that we would like to enlarge/shrink a detector structure on one or more axes. This happens quite often in real life and is handled by ""fitting mother"" parameters. This is accomplished by defining shapes with one or more invalid (negative) parameters. For instance, defining a box having dx=10., dy=10., and dz=-1 will not generate an error but will be interpreted in a different way: A special volume **TGeoVolumeMulti** will be created. Whenever positioned inside a mother volume, this will create a normal **TGeoVolume** object having as shape a box with dz fitting the corresponding dzof the mother shape. Generally, this type of parameterization is used when positioning volumes in containers having a matching shape, but it works also for most reasonable combinations. . Modules;  Tubes;  ;  Cones;  ;  Trapezoids;  . Classes; class  TGeoCompositeShape;  Composite shapes are Boolean combinations of two or more shape components. More...;  ; class  TGeoHalfSpace;  A half space is limited just by a plane, defined by a point and the normal direction. More...;  ; class  TGeoHelix;  Class representing a helix curve. More...;  ; class  TGeoPolygon;  An arbitrary polygon defined by vertices. More...;  ; class  TGeoShape;  Base abstract class for all shapes. More...;  ; class  TGeoShapeAssembly;  The shape encapsulating an assembly (union) of volumes. More...;  ;",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
Modifiability,inherit,inheritance,"he crossed shape surface, given a starting local point and an ongoing direction. All the features above are globally managed by the modeller in order to provide navigation functionality. In addition to those, shapes have also to implement additional specific abstract methods:. Computation of the minimal box bounding the shape, given that this box have to be aligned with the local coordinates;; Algorithms for dividing the shape along a given axis. The modeller currently provides a set of 20 basic shapes, which we will call primitives. It also provides a special class allowing the creation of shapes as a result of Boolean operations between primitives. These are called composite shapes and the composition operation can be recursive (combined composites). This allows the creation of a quite large number of different shape topologies and combinations. You can have a look and run the tutorial: geodemo.C. Primitive Shapes - the general inheritance scheme; Shapes are named objects and all primitives have constructors like:; TGeoXXX(const char *name,<type> param1,<type> param2, ...);; TGeoXXX(<type> param1,<type> param2, ...);; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; namechar name[80]Definition TGX1",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
Performance,perform,performed,"s: TGeoHype class; Cones: TGeoCone class; Cone Segments: TGeoConeSeg class; Sphere: TGeoSphere class; Torus: TGeoTorus class; Paraboloid: TGeoParaboloid class; Polycone: TGeoPcon class; Polygon: TGeoPgon class; Polygonal extrusion: TGeoXtru class; Half Spaces: TGeoHalfSpace class; Composite Shapes: TGeoCompositeShape class. Navigation Methods Performed By Shapes; Shapes are named objects and register themselves to the manager class at creation time. This is responsible for their final deletion. Shapes can be created without name if their retrieval by name is no needed. Generally shapes are objects that are useful only at geometry creation stage. The pointer to a shape is in fact needed only when referring to a given volume and it is always accessible at that level. Several volumes may reference a single shape; therefore its deletion is not possible once volumes were defined based on it.; The navigation features related for instance to tracking particles are performed in the following way: Each shape implement its specific algorithms for all required tasks in its local reference system. Note that the manager class handles global queries related to geometry. However, shape-related queries might be sometimes useful:; Bool_t TGeoShape::Contains(Double_t *point[3]);; Bool_tbool Bool_tDefinition RtypesCore.h:63; Double_tdouble Double_tDefinition RtypesCore.h:59; TGeoShape::Containsvirtual Bool_t Contains(const Double_t *point) const =0; The method above returns kTRUE if the point *point is actually inside the shape. The point has to be defined in the local shape reference. For instance, for a box having DX,DY and DZhalf-lengths a point will be considered inside if:; -DX <= point[0] <= DX; -DY <= point[1] <= DY; -DZ <= point[2] <= DZ; Double_t TGeoShape::DistFromInside(Double_t *point[3],; Double_t *dir[3], Int_t iact,Double_t step,Double_t *safe);; Int_tint Int_tDefinition RtypesCore.h:45; TGeoShape::DistFromInsidevirtual Double_t DistFromInside(const Double_t *point, cons",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
Safety,safe,safe,". ROOT: Shapes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Classes ; ShapesThe Geometry Package. ; Shapes are geometrical objects that provide the basic modeling functionality. . Primitive Shapes; Navigation Methods Performed By Shapes; Creating Shapes; Dividing Shapes; Parametric Shapes. The ""shapes"" provide the definition of the local coordinate system of the volume. Any volume must have a shape. Any shape recognized by the modeller has to derive from the base **TGeoShape** class, providing methods for:. Finding out if a point defined in their local frame is contained or not by the shape;; Computing the distance to enter/exit the shape from a local point, given a known direction;; Computing the maximum distance in any direction from a local point that does NOT result in a boundary crossing of the shape (safe distance);; Computing the cosines of the normal vector to the crossed shape surface, given a starting local point and an ongoing direction. All the features above are globally managed by the modeller in order to provide navigation functionality. In addition to those, shapes have also to implement additional specific abstract methods:. Computation of the minimal box bounding the shape, given that this box have to be aligned with the local coordinates;; Algorithms for dividing the shape along a given axis. The modeller currently provides a set of 20 basic shapes, which we will call primitives. It also provides a special class allowing the creation of shapes as a result of Boolean operations between primitives. These are called composite shapes and the composition operation can be recursive (combined composites). This allows the creation of a quite large number of different shape topologies and combinations. You can have a look and run the tutorial: geodemo.C. Primitive Shapes - the general inheritance scheme; Shapes are named objects and all primitives have constructors like:; TGeoXXX(const char *name,<type> param1",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
Security,access,accessible,"; Trapezoids: TGeoTrd1, TGeoTrd2 classes; General Trapezoid: TGeoTrap class; Twisted Trapezoid: TGeoGtra class; Arbitrary 8 vertices shapes: TGeoArb8 class; Tubes: TGeoTube class; Tube Segments: TGeoTubeSeg class; Cut Tubes: TGeoCtub class; Elliptical Tubes: TGeoEltu class; Hyperboloids: TGeoHype class; Cones: TGeoCone class; Cone Segments: TGeoConeSeg class; Sphere: TGeoSphere class; Torus: TGeoTorus class; Paraboloid: TGeoParaboloid class; Polycone: TGeoPcon class; Polygon: TGeoPgon class; Polygonal extrusion: TGeoXtru class; Half Spaces: TGeoHalfSpace class; Composite Shapes: TGeoCompositeShape class. Navigation Methods Performed By Shapes; Shapes are named objects and register themselves to the manager class at creation time. This is responsible for their final deletion. Shapes can be created without name if their retrieval by name is no needed. Generally shapes are objects that are useful only at geometry creation stage. The pointer to a shape is in fact needed only when referring to a given volume and it is always accessible at that level. Several volumes may reference a single shape; therefore its deletion is not possible once volumes were defined based on it.; The navigation features related for instance to tracking particles are performed in the following way: Each shape implement its specific algorithms for all required tasks in its local reference system. Note that the manager class handles global queries related to geometry. However, shape-related queries might be sometimes useful:; Bool_t TGeoShape::Contains(Double_t *point[3]);; Bool_tbool Bool_tDefinition RtypesCore.h:63; Double_tdouble Double_tDefinition RtypesCore.h:59; TGeoShape::Containsvirtual Bool_t Contains(const Double_t *point) const =0; The method above returns kTRUE if the point *point is actually inside the shape. The point has to be defined in the local shape reference. For instance, for a box having DX,DY and DZhalf-lengths a point will be considered inside if:; -DX <= point[0] <= DX; -D",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
Usability,simpl,simplicity," TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; namechar name[80]Definition TGX11.cxx:110; Naming shape primitive is mandatory only for the primitives used in Boolean composites (see ""Composite Shapes""). For the sake of simplicity, we will describe only the constructors in the second form. Primitive Shapes. Boxes: TGeoBBox class; Parallelepiped: TGeoPara class; Trapezoids: TGeoTrd1, TGeoTrd2 classes; General Trapezoid: TGeoTrap class; Twisted Trapezoid: TGeoGtra class; Arbitrary 8 vertices shapes: TGeoArb8 class; Tubes: TGeoTube class; Tube Segments: TGeoTubeSeg class; Cut Tubes: TGeoCtub class; Elliptical Tubes: TGeoEltu class; Hyperboloids: TGeoHype class; Cones: TGeoCone class; Cone Segments: TGeoConeSeg class; Sphere: TGeoSphere class; Torus: TGeoTorus class; Paraboloid: TGeoParaboloid class; Polycone: TGeoPcon class; Polygon: TGeoPgon class; Polygonal extrusion: TGeoXtru class; Half Spaces: TGeoHalfSpace class; Composite Shapes: TGeoCompositeShape class. Navigation Methods Performed By Shapes; Shapes are named objects and register themselves to the manager class at creation time. This is responsible for their final deletion. Shapes can be created without name if their retrieval by name is no needed. Generally shapes are ob",MatchSource.WIKI,doc/master/group__Shapes__classes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html
Availability,down,downloaded,"::MatRepSym) which contains only the N*(N+1)/2 independent element of a NxN symmetric matrix. It is not in the mandate of this package to provide a complete linear algebra functionality for these classes. What is provided are basic Matrix Template Functions and Vector Template Functions, such as the matrix-matrix, matrix-vector, vector-vector operations, plus some extra functionality for square matrices, like inversion, which is based on the optimized Cramer method for squared matrices of size up to 6x6, and determinant calculation. For a more detailed descriptions and usage examples see:. SVector Class Properties; SMatrix Class Properties; Matrix and Vector Operators and Functions. The SMatrix package contains only header files. Normally one does not need to build any library. In the ROOT distribution a library, libSmatrix is produced with the C++ dictionary information for vectors, symmetric and squared matrices for double, float types up to dimension 7. The current version of SMatrix can be downloaded from here. If you want to install the header files or run the test configure script and then make install or make check to build the tests. No dictionary library is built in this case. References. T. Veldhuizen, Expression Templates, C++ Report, 1995.; T. Glebe, SMatrix - A high performance library for Vector/Matrix calculation and Vertexing, HERA-B Software Note 01-134, December 2, 2003 (pdf); L. Moneta, ROOT Math proposal for Linear Algebra, presentation at the LCG Application Area meeting, November 23, 2005. Authorsthe ROOT Math Library Team, T. Glebe (original SMatrix author) and J. Palacios (LHCb) . Modules;  Expression Template Classes;  ;  Generic Template Functions;  These functions apply for any type T, such as a scalar, a vector or a matrix. ;  ;  Vector Template Functions;  These functions apply to SVector types (and also to Vector expressions) and can return a vector expression or a scalar, like in the Dot product, or a matrix, like in the Tensor product",MatchSource.WIKI,doc/master/group__SMatrixGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SMatrixGroup.html
Deployability,release,release,"an be used to implement vector and matrix expressions such that these expressions can be transformed at compile time to code which is equivalent to hand optimized code in a low-level language like FORTRAN or C (see for example ref. 1); The SMatrix has been developed initially by T. Glebe of the Max-Planck-Institut, Heidelberg, as part of the HeraB analysis framework. A subset of the original package has been now incorporated in the ROOT distribution, with the aim to provide to the LHC experiments a stand-alone and high performant matrix package for reconstruction. The API of the current package differs from the original one, in order to be compliant to the ROOT coding conventions.; SMatrix contains generic Matrix and Vector classes to describe matrix and vector of arbitrary dimensions and of arbitrary type. The classes are templated on the scalar type and on the size of the matrix (number of rows and columns) or the vector. Therefore, the size has to be known at compile time. Since the release 5.10, SMatrix supports symmetric matrices using a storage class (ROOT::Math::MatRepSym) which contains only the N*(N+1)/2 independent element of a NxN symmetric matrix. It is not in the mandate of this package to provide a complete linear algebra functionality for these classes. What is provided are basic Matrix Template Functions and Vector Template Functions, such as the matrix-matrix, matrix-vector, vector-vector operations, plus some extra functionality for square matrices, like inversion, which is based on the optimized Cramer method for squared matrices of size up to 6x6, and determinant calculation. For a more detailed descriptions and usage examples see:. SVector Class Properties; SMatrix Class Properties; Matrix and Vector Operators and Functions. The SMatrix package contains only header files. Normally one does not need to build any library. In the ROOT distribution a library, libSmatrix is produced with the C++ dictionary information for vectors, symmetric and square",MatchSource.WIKI,doc/master/group__SMatrixGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SMatrixGroup.html
Modifiability,config,configure,"It is not in the mandate of this package to provide a complete linear algebra functionality for these classes. What is provided are basic Matrix Template Functions and Vector Template Functions, such as the matrix-matrix, matrix-vector, vector-vector operations, plus some extra functionality for square matrices, like inversion, which is based on the optimized Cramer method for squared matrices of size up to 6x6, and determinant calculation. For a more detailed descriptions and usage examples see:. SVector Class Properties; SMatrix Class Properties; Matrix and Vector Operators and Functions. The SMatrix package contains only header files. Normally one does not need to build any library. In the ROOT distribution a library, libSmatrix is produced with the C++ dictionary information for vectors, symmetric and squared matrices for double, float types up to dimension 7. The current version of SMatrix can be downloaded from here. If you want to install the header files or run the test configure script and then make install or make check to build the tests. No dictionary library is built in this case. References. T. Veldhuizen, Expression Templates, C++ Report, 1995.; T. Glebe, SMatrix - A high performance library for Vector/Matrix calculation and Vertexing, HERA-B Software Note 01-134, December 2, 2003 (pdf); L. Moneta, ROOT Math proposal for Linear Algebra, presentation at the LCG Application Area meeting, November 23, 2005. Authorsthe ROOT Math Library Team, T. Glebe (original SMatrix author) and J. Palacios (LHCb) . Modules;  Expression Template Classes;  ;  Generic Template Functions;  These functions apply for any type T, such as a scalar, a vector or a matrix. ;  ;  Vector Template Functions;  These functions apply to SVector types (and also to Vector expressions) and can return a vector expression or a scalar, like in the Dot product, or a matrix, like in the Tensor product. ;  ;  Matrix Template Functions;  These function apply to matrices (and also Matrix expressio",MatchSource.WIKI,doc/master/group__SMatrixGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SMatrixGroup.html
Performance,perform,performance,". ROOT: SMatrix Package. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; SMatrix PackageMath. ; SMatrix is a C++ package for high performance vector and matrix computations. It can be used only in problems when the size of the matrices is known at compile time, like in the tracking reconstruction of HEP experiments. It is based on a C++ technique, called expression templates, to achieve an high level optimization. The C++ templates can be used to implement vector and matrix expressions such that these expressions can be transformed at compile time to code which is equivalent to hand optimized code in a low-level language like FORTRAN or C (see for example ref. 1); The SMatrix has been developed initially by T. Glebe of the Max-Planck-Institut, Heidelberg, as part of the HeraB analysis framework. A subset of the original package has been now incorporated in the ROOT distribution, with the aim to provide to the LHC experiments a stand-alone and high performant matrix package for reconstruction. The API of the current package differs from the original one, in order to be compliant to the ROOT coding conventions.; SMatrix contains generic Matrix and Vector classes to describe matrix and vector of arbitrary dimensions and of arbitrary type. The classes are templated on the scalar type and on the size of the matrix (number of rows and columns) or the vector. Therefore, the size has to be known at compile time. Since the release 5.10, SMatrix supports symmetric matrices using a storage class (ROOT::Math::MatRepSym) which contains only the N*(N+1)/2 independent element of a NxN symmetric matrix. It is not in the mandate of this package to provide a complete linear algebra functionality for these classes. What is provided are basic Matrix Template Functions and Vector Template Functions, such as the matrix-matrix, matrix-vector, vector-vector operations, plus some extra functionality for square matrices, like inversion, which is base",MatchSource.WIKI,doc/master/group__SMatrixGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SMatrixGroup.html
Testability,test,test,"It is not in the mandate of this package to provide a complete linear algebra functionality for these classes. What is provided are basic Matrix Template Functions and Vector Template Functions, such as the matrix-matrix, matrix-vector, vector-vector operations, plus some extra functionality for square matrices, like inversion, which is based on the optimized Cramer method for squared matrices of size up to 6x6, and determinant calculation. For a more detailed descriptions and usage examples see:. SVector Class Properties; SMatrix Class Properties; Matrix and Vector Operators and Functions. The SMatrix package contains only header files. Normally one does not need to build any library. In the ROOT distribution a library, libSmatrix is produced with the C++ dictionary information for vectors, symmetric and squared matrices for double, float types up to dimension 7. The current version of SMatrix can be downloaded from here. If you want to install the header files or run the test configure script and then make install or make check to build the tests. No dictionary library is built in this case. References. T. Veldhuizen, Expression Templates, C++ Report, 1995.; T. Glebe, SMatrix - A high performance library for Vector/Matrix calculation and Vertexing, HERA-B Software Note 01-134, December 2, 2003 (pdf); L. Moneta, ROOT Math proposal for Linear Algebra, presentation at the LCG Application Area meeting, November 23, 2005. Authorsthe ROOT Math Library Team, T. Glebe (original SMatrix author) and J. Palacios (LHCb) . Modules;  Expression Template Classes;  ;  Generic Template Functions;  These functions apply for any type T, such as a scalar, a vector or a matrix. ;  ;  Vector Template Functions;  These functions apply to SVector types (and also to Vector expressions) and can return a vector expression or a scalar, like in the Dot product, or a matrix, like in the Tensor product. ;  ;  Matrix Template Functions;  These function apply to matrices (and also Matrix expressio",MatchSource.WIKI,doc/master/group__SMatrixGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SMatrixGroup.html
Availability,error,error,". ROOT: Special functions. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Special functionsMath » MathCore | Math » MathMore. ; Special mathematical functions. ; The naming and numbering of the functions is taken from Matt Austern, (Draft) Technical Report on Standard Library Extensions, N1687=04-0127, September 10, 2004; AuthorCreated by Andras Zsenei on Mon Nov 8 2004 . Special Functions from MathCore; double ROOT::Math::erf (double x);  Error function encountered in integrating the normal distribution. ;  ; double ROOT::Math::erfc (double x);  Complementary error function. ;  ; double ROOT::Math::tgamma (double x);  The gamma function is defined to be the extension of the factorial to real numbers. ;  ; double ROOT::Math::lgamma (double x);  Calculates the logarithm of the gamma function. ;  ; double ROOT::Math::inc_gamma (double a, double x);  Calculates the normalized (regularized) lower incomplete gamma function (lower integral) ;  ; double ROOT::Math::inc_gamma_c (double a, double x);  Calculates the normalized (regularized) upper incomplete gamma function (upper integral) ;  ; double ROOT::Math::beta (double x, double y);  Calculates the beta function. ;  ; double ROOT::Math::inc_beta (double x, double a, double b);  Calculates the normalized (regularized) incomplete beta function. ;  ; double ROOT::Math::sinint (double x);  Calculates the sine integral. ;  ; double ROOT::Math::cosint (double x);  Calculates the real part of the cosine integral Re(Ci). ;  . Special Functions from MathMore; double ROOT::Math::assoc_laguerre (unsigned n, double m, double x);  Computes the generalized Laguerre polynomials for \( n \geq 0, m > -1 \). ;  ; double ROOT::Math::assoc_legendre (unsigned l, unsigned m, double x);  Computes the associated Legendre polynomials. ;  ; double ROOT::Math::comp_ellint_1 (double k);  Calculates the complete elliptic integral of the first kind. ;  ; double ROOT::Math::comp_ellint_2 (double k);  Calculates the c",MatchSource.WIKI,doc/master/group__SpecFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html
Deployability,integrat,integrating,". ROOT: Special functions. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Special functionsMath » MathCore | Math » MathMore. ; Special mathematical functions. ; The naming and numbering of the functions is taken from Matt Austern, (Draft) Technical Report on Standard Library Extensions, N1687=04-0127, September 10, 2004; AuthorCreated by Andras Zsenei on Mon Nov 8 2004 . Special Functions from MathCore; double ROOT::Math::erf (double x);  Error function encountered in integrating the normal distribution. ;  ; double ROOT::Math::erfc (double x);  Complementary error function. ;  ; double ROOT::Math::tgamma (double x);  The gamma function is defined to be the extension of the factorial to real numbers. ;  ; double ROOT::Math::lgamma (double x);  Calculates the logarithm of the gamma function. ;  ; double ROOT::Math::inc_gamma (double a, double x);  Calculates the normalized (regularized) lower incomplete gamma function (lower integral) ;  ; double ROOT::Math::inc_gamma_c (double a, double x);  Calculates the normalized (regularized) upper incomplete gamma function (upper integral) ;  ; double ROOT::Math::beta (double x, double y);  Calculates the beta function. ;  ; double ROOT::Math::inc_beta (double x, double a, double b);  Calculates the normalized (regularized) incomplete beta function. ;  ; double ROOT::Math::sinint (double x);  Calculates the sine integral. ;  ; double ROOT::Math::cosint (double x);  Calculates the real part of the cosine integral Re(Ci). ;  . Special Functions from MathMore; double ROOT::Math::assoc_laguerre (unsigned n, double m, double x);  Computes the generalized Laguerre polynomials for \( n \geq 0, m > -1 \). ;  ; double ROOT::Math::assoc_legendre (unsigned l, unsigned m, double x);  Computes the associated Legendre polynomials. ;  ; double ROOT::Math::comp_ellint_1 (double k);  Calculates the complete elliptic integral of the first kind. ;  ; double ROOT::Math::comp_ellint_2 (double k);  Calculates the c",MatchSource.WIKI,doc/master/group__SpecFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html
Integrability,integrat,integrating,". ROOT: Special functions. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Special functionsMath » MathCore | Math » MathMore. ; Special mathematical functions. ; The naming and numbering of the functions is taken from Matt Austern, (Draft) Technical Report on Standard Library Extensions, N1687=04-0127, September 10, 2004; AuthorCreated by Andras Zsenei on Mon Nov 8 2004 . Special Functions from MathCore; double ROOT::Math::erf (double x);  Error function encountered in integrating the normal distribution. ;  ; double ROOT::Math::erfc (double x);  Complementary error function. ;  ; double ROOT::Math::tgamma (double x);  The gamma function is defined to be the extension of the factorial to real numbers. ;  ; double ROOT::Math::lgamma (double x);  Calculates the logarithm of the gamma function. ;  ; double ROOT::Math::inc_gamma (double a, double x);  Calculates the normalized (regularized) lower incomplete gamma function (lower integral) ;  ; double ROOT::Math::inc_gamma_c (double a, double x);  Calculates the normalized (regularized) upper incomplete gamma function (upper integral) ;  ; double ROOT::Math::beta (double x, double y);  Calculates the beta function. ;  ; double ROOT::Math::inc_beta (double x, double a, double b);  Calculates the normalized (regularized) incomplete beta function. ;  ; double ROOT::Math::sinint (double x);  Calculates the sine integral. ;  ; double ROOT::Math::cosint (double x);  Calculates the real part of the cosine integral Re(Ci). ;  . Special Functions from MathMore; double ROOT::Math::assoc_laguerre (unsigned n, double m, double x);  Computes the generalized Laguerre polynomials for \( n \geq 0, m > -1 \). ;  ; double ROOT::Math::assoc_legendre (unsigned l, unsigned m, double x);  Computes the associated Legendre polynomials. ;  ; double ROOT::Math::comp_ellint_1 (double k);  Calculates the complete elliptic integral of the first kind. ;  ; double ROOT::Math::comp_ellint_2 (double k);  Calculates the c",MatchSource.WIKI,doc/master/group__SpecFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html
Modifiability,coupling,coupling," of the second kind (also called irregular spherical Bessel functions or spherical Neumann functions). ;  ; double ROOT::Math::airy_Ai (double x);  Calculates the Airy function Ai. ;  ; double ROOT::Math::airy_Bi (double x);  Calculates the Airy function Bi. ;  ; double ROOT::Math::airy_Ai_deriv (double x);  Calculates the derivative of the Airy function Ai. ;  ; double ROOT::Math::airy_Bi_deriv (double x);  Calculates the derivative of the Airy function Bi. ;  ; double ROOT::Math::airy_zero_Ai (unsigned int s);  Calculates the zeroes of the Airy function Ai. ;  ; double ROOT::Math::airy_zero_Bi (unsigned int s);  Calculates the zeroes of the Airy function Bi. ;  ; double ROOT::Math::airy_zero_Ai_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Ai. ;  ; double ROOT::Math::airy_zero_Bi_deriv (unsigned int s);  Calculates the zeroes of the derivative of the Airy function Bi. ;  ; double ROOT::Math::wigner_3j (int two_ja, int two_jb, int two_jc, int two_ma, int two_mb, int two_mc);  Calculates the Wigner 3j coupling coefficients. ;  ; double ROOT::Math::wigner_6j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf);  Calculates the Wigner 6j coupling coefficients. ;  ; double ROOT::Math::wigner_9j (int two_ja, int two_jb, int two_jc, int two_jd, int two_je, int two_jf, int two_jg, int two_jh, int two_ji);  Calculates the Wigner 9j coupling coefficients. ;  ; double ROOT::Math::expint_n (int n, double x);  ; double ROOT::Math::digamma (double x);  . Function Documentation. ◆ airy_Ai(). double ROOT::Math::airy_Ai ; (; double ; x). Calculates the Airy function Ai. . \[ Ai(x) = \frac{1}{\pi} \int\limits_{0}^{\infty} \cos(xt + t^3/3) dt \]. For detailed description see Mathworld and Abramowitz&Stegun, Sect. 10.4. The implementation used is that of GSL. ; Definition at line 402 of file SpecFuncMathMore.cxx. ◆ airy_Ai_deriv(). double ROOT::Math::airy_Ai_deriv ; (; double ; x). Calculates the derivative of the Airy functi",MatchSource.WIKI,doc/master/group__SpecFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html
Testability,log,logarithm,". ROOT: Special functions. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Special functionsMath » MathCore | Math » MathMore. ; Special mathematical functions. ; The naming and numbering of the functions is taken from Matt Austern, (Draft) Technical Report on Standard Library Extensions, N1687=04-0127, September 10, 2004; AuthorCreated by Andras Zsenei on Mon Nov 8 2004 . Special Functions from MathCore; double ROOT::Math::erf (double x);  Error function encountered in integrating the normal distribution. ;  ; double ROOT::Math::erfc (double x);  Complementary error function. ;  ; double ROOT::Math::tgamma (double x);  The gamma function is defined to be the extension of the factorial to real numbers. ;  ; double ROOT::Math::lgamma (double x);  Calculates the logarithm of the gamma function. ;  ; double ROOT::Math::inc_gamma (double a, double x);  Calculates the normalized (regularized) lower incomplete gamma function (lower integral) ;  ; double ROOT::Math::inc_gamma_c (double a, double x);  Calculates the normalized (regularized) upper incomplete gamma function (upper integral) ;  ; double ROOT::Math::beta (double x, double y);  Calculates the beta function. ;  ; double ROOT::Math::inc_beta (double x, double a, double b);  Calculates the normalized (regularized) incomplete beta function. ;  ; double ROOT::Math::sinint (double x);  Calculates the sine integral. ;  ; double ROOT::Math::cosint (double x);  Calculates the real part of the cosine integral Re(Ci). ;  . Special Functions from MathMore; double ROOT::Math::assoc_laguerre (unsigned n, double m, double x);  Computes the generalized Laguerre polynomials for \( n \geq 0, m > -1 \). ;  ; double ROOT::Math::assoc_legendre (unsigned l, unsigned m, double x);  Computes the associated Legendre polynomials. ;  ; double ROOT::Math::comp_ellint_1 (double k);  Calculates the complete elliptic integral of the first kind. ;  ; double ROOT::Math::comp_ellint_2 (double k);  Calculates the c",MatchSource.WIKI,doc/master/group__SpecFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__SpecFunc.html
Integrability,interface,interface,". ROOT: Advanced spectra processing classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Advanced spectra processing classes.Histogram Library. ; Legacy Code The Spectrum package is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using The Spectrum package might still be a valid solution.; AuthorsMiroslav Morhac Institute of Physics Slovak Academy of Sciences, R.Brun (Repackaging for C++). Processing and visualization functions.; Efficient one and two dimensional gold deconvolution and its application to gamma-ray spectra decomposition.; Identification of peaks in multidimensional coincidence gamma-ray spectra.; Background elimination for multidimensional coincidence gamma-ray spectra. . Classes; class  TSpectrum;  Advanced Spectra Processing. More...;  ; class  TSpectrum2;  Advanced 2-dimensional spectra processing. More...;  ; class  TSpectrum2Fit;  Advanced 2-dimensional spectra fitting functions. More...;  ; class  TSpectrum2Transform;  Advanced 2-dimensional orthogonal transform functions. More...;  ; class  TSpectrum3;  Advanced 3-dimensional spectra processing functions. More...;  ; class  TSpectrumFit;  Advanced 1-dimensional spectra fitting functions. More...;  ; class  TSpectrumTransform;  Advanced 1-dimensional orthogonal transform functions. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Spectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Spectrum.html
Deployability,continuous,continuous,". ROOT: Statistical functions. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Namespaces |; Classes ; Statistical functionsMath » MathCore | Math » MathMore. ; Probability density functions, cumulative distribution functions and their inverses (quantiles) for various statistical distributions (continuous and discrete). ; Whenever possible the conventions followed are those of the CRC Concise Encyclopedia of Mathematics, Second Edition (or Mathworld). By convention the distributions are centered around 0, so for example in the case of a Gaussian there is no parameter mu. The user must calculate the shift themselves if they wish.; MathCore provides the majority of the probability density functions, of the cumulative distributions and of the quantiles (inverses of the cumulatives). Additional distributions are also provided by the MathMore library. . Modules;  Probability Density Functions (PDF);  Probability density functions of various statistical distributions (continuous and discrete). ;  ;  Cumulative Distribution Functions (CDF);  Cumulative distribution functions of various distributions. ;  ;  Statistical functions from truncated distributions;  Statistical functions for the truncated distributions. ;  ;  Quantile Functions;  Inverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions. ;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Classes; class  ROOT::Math::Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  ROOT::Math::VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  ROOT::Math::VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  ROOT::Math::VavilovAccuratePdf;  Class describing the Vavilov pdf. M",MatchSource.WIKI,doc/master/group__StatFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__StatFunc.html
Deployability,update,update," Base class for TEveUtil visualization elements, providing hierarchy management, rendering control and list-tree item management. More...;  ; class  TEveElementEditor;  Editor for TEveElement class. More...;  ; class  TEveElementList;  A list of TEveElements. More...;  ; class  TEveElementListProjected;  A projected element list – required for proper propagation of render state to projected views. More...;  ; class  TEveEventManager;  Base class for event management and navigation. More...;  ; class  TEveException;  Exception class thrown by TEve classes and macros. More...;  ; class  TEveFrameBox;  Description of a 2D or 3D frame that can be used to visually group a set of objects. More...;  ; class  TEveFrameBoxGL;  A class encapsulating GL rendering of TEveFrameBox via a static member function. More...;  ; class  TEveGDoubleValuator;  Composite GUI element for selection of range (label, two number-entries and double-slider). More...;  ; class  TEveGedEditor;  Specialization of TGedEditor for proper update propagation to TEveManager. More...;  ; class  TEveGedNameFrame;  Specialization of TGedNameFrame used in EVE. More...;  ; class  TEveGedNameTextButton;  Specialization of TGTextButton for EVE name frame. More...;  ; class  TEveGeoManagerHolder;  Exception safe wrapper for setting gGeoManager. More...;  ; class  TEveGeoNode;  Wrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement. More...;  ; class  TEveGeoNodeEditor;  Editor for TEveGeoNode class. More...;  ; class  TEveGeoPolyShape;  Description of TEveGeoPolyShape. More...;  ; class  TEveGeoShape;  Wrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for non-linear projections). More...;  ; class  TEveGeoShapeExtract;  Globally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts. More...;  ; class  TEveGeoShapePro",MatchSource.WIKI,doc/master/group__TEve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TEve.html
Integrability,wrap,wrapper,"  TEveElementListProjected;  A projected element list – required for proper propagation of render state to projected views. More...;  ; class  TEveEventManager;  Base class for event management and navigation. More...;  ; class  TEveException;  Exception class thrown by TEve classes and macros. More...;  ; class  TEveFrameBox;  Description of a 2D or 3D frame that can be used to visually group a set of objects. More...;  ; class  TEveFrameBoxGL;  A class encapsulating GL rendering of TEveFrameBox via a static member function. More...;  ; class  TEveGDoubleValuator;  Composite GUI element for selection of range (label, two number-entries and double-slider). More...;  ; class  TEveGedEditor;  Specialization of TGedEditor for proper update propagation to TEveManager. More...;  ; class  TEveGedNameFrame;  Specialization of TGedNameFrame used in EVE. More...;  ; class  TEveGedNameTextButton;  Specialization of TGTextButton for EVE name frame. More...;  ; class  TEveGeoManagerHolder;  Exception safe wrapper for setting gGeoManager. More...;  ; class  TEveGeoNode;  Wrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement. More...;  ; class  TEveGeoNodeEditor;  Editor for TEveGeoNode class. More...;  ; class  TEveGeoPolyShape;  Description of TEveGeoPolyShape. More...;  ; class  TEveGeoShape;  Wrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for non-linear projections). More...;  ; class  TEveGeoShapeExtract;  Globally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts. More...;  ; class  TEveGeoShapeProjected;  A 3D projected TEveGeoShape. More...;  ; class  TEveGeoTopNode;  A wrapper over a TGeoNode, possibly displaced with a global trasformation stored in TEveElement. More...;  ; class  TEveGeoTopNodeEditor;  Editor for TEveGeoTopNode class. More...;  ; class  TEveGListTre",MatchSource.WIKI,doc/master/group__TEve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TEve.html
Performance,perform,perform,". ROOT: Event Display. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Event DisplayGraphics » 3D Graphics. ; The Event Display classes. ; Eve is a ROOT module based on experiment-independent part of the ALICE event display developed in cooperation between ALICE offline project and ROOT during the last two years. It has been used in ALICE for more than a year to perform high-level event visualization, debugging of simulation and reconstruction code as well as for raw-data visualization.; Papers describing Eve (older ones still using the old name - Reve):. [EVE - Event Visualization Environment of the ROOT framework] (http://pos.sissa.it//archive/conferences/070/103/ACAT08_103.pdf) presented at ACAT 2008.; [Event Visualization Environment of the ALICE experiment] (http://indico.cern.ch/contributionDisplay.py?contribId=25&confId=13356) presented at ROOT Workshop 2007.; [Raw-data display and visual reconstruction validation in ALICE] (http://indico.cern.ch/contributionDisplay.py?contribId=442&sessionId=23&confId=3580) presented at CHEP 2007. Eve is built on top of ROOT's GUI, GL and GED infrastructure and delivers the following main features:. Base-classes for representation of visual objects that can be presented in list-tree views, object-editors and rendered via OpenGL (TEveElement and sub-classes).; Application manager class TEveManager for top-level management of elements, GUI components, geometries and events;; Classes for presentation of full TGeo geometries (TEveGeoNode and TEveGeoTopNode) as well as of simplifed geometries via extraction of shape-data (TEveGeoShape). CMS geometry. Classes for presentation of trajectories or tracks (TEveTrack, TEveTrackPropagator) and hits or clusters (TEvePointSet, TEvePointSetArray). A simulated ALICE pp@14TeV event in 3D. Base-classes for presentation of raw-data or digits (TEveDigitSet, TEveQuadSet and TEveBoxSet). A collection of objects can be assigned common signal-to-color mappi",MatchSource.WIKI,doc/master/group__TEve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TEve.html
Safety,safe,safe,"  TEveElementListProjected;  A projected element list – required for proper propagation of render state to projected views. More...;  ; class  TEveEventManager;  Base class for event management and navigation. More...;  ; class  TEveException;  Exception class thrown by TEve classes and macros. More...;  ; class  TEveFrameBox;  Description of a 2D or 3D frame that can be used to visually group a set of objects. More...;  ; class  TEveFrameBoxGL;  A class encapsulating GL rendering of TEveFrameBox via a static member function. More...;  ; class  TEveGDoubleValuator;  Composite GUI element for selection of range (label, two number-entries and double-slider). More...;  ; class  TEveGedEditor;  Specialization of TGedEditor for proper update propagation to TEveManager. More...;  ; class  TEveGedNameFrame;  Specialization of TGedNameFrame used in EVE. More...;  ; class  TEveGedNameTextButton;  Specialization of TGTextButton for EVE name frame. More...;  ; class  TEveGeoManagerHolder;  Exception safe wrapper for setting gGeoManager. More...;  ; class  TEveGeoNode;  Wrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement. More...;  ; class  TEveGeoNodeEditor;  Editor for TEveGeoNode class. More...;  ; class  TEveGeoPolyShape;  Description of TEveGeoPolyShape. More...;  ; class  TEveGeoShape;  Wrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for non-linear projections). More...;  ; class  TEveGeoShapeExtract;  Globally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts. More...;  ; class  TEveGeoShapeProjected;  A 3D projected TEveGeoShape. More...;  ; class  TEveGeoTopNode;  A wrapper over a TGeoNode, possibly displaced with a global trasformation stored in TEveElement. More...;  ; class  TEveGeoTopNodeEditor;  Editor for TEveGeoTopNode class. More...;  ; class  TEveGListTre",MatchSource.WIKI,doc/master/group__TEve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TEve.html
Security,validat,validation,". ROOT: Event Display. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; Event DisplayGraphics » 3D Graphics. ; The Event Display classes. ; Eve is a ROOT module based on experiment-independent part of the ALICE event display developed in cooperation between ALICE offline project and ROOT during the last two years. It has been used in ALICE for more than a year to perform high-level event visualization, debugging of simulation and reconstruction code as well as for raw-data visualization.; Papers describing Eve (older ones still using the old name - Reve):. [EVE - Event Visualization Environment of the ROOT framework] (http://pos.sissa.it//archive/conferences/070/103/ACAT08_103.pdf) presented at ACAT 2008.; [Event Visualization Environment of the ALICE experiment] (http://indico.cern.ch/contributionDisplay.py?contribId=25&confId=13356) presented at ROOT Workshop 2007.; [Raw-data display and visual reconstruction validation in ALICE] (http://indico.cern.ch/contributionDisplay.py?contribId=442&sessionId=23&confId=3580) presented at CHEP 2007. Eve is built on top of ROOT's GUI, GL and GED infrastructure and delivers the following main features:. Base-classes for representation of visual objects that can be presented in list-tree views, object-editors and rendered via OpenGL (TEveElement and sub-classes).; Application manager class TEveManager for top-level management of elements, GUI components, geometries and events;; Classes for presentation of full TGeo geometries (TEveGeoNode and TEveGeoTopNode) as well as of simplifed geometries via extraction of shape-data (TEveGeoShape). CMS geometry. Classes for presentation of trajectories or tracks (TEveTrack, TEveTrackPropagator) and hits or clusters (TEvePointSet, TEvePointSetArray). A simulated ALICE pp@14TeV event in 3D. Base-classes for presentation of raw-data or digits (TEveDigitSet, TEveQuadSet and TEveBoxSet). A collection of objects can be assigned common signal-to-color mappi",MatchSource.WIKI,doc/master/group__TEve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TEve.html
Usability,simpl,simplifed,"l as for raw-data visualization.; Papers describing Eve (older ones still using the old name - Reve):. [EVE - Event Visualization Environment of the ROOT framework] (http://pos.sissa.it//archive/conferences/070/103/ACAT08_103.pdf) presented at ACAT 2008.; [Event Visualization Environment of the ALICE experiment] (http://indico.cern.ch/contributionDisplay.py?contribId=25&confId=13356) presented at ROOT Workshop 2007.; [Raw-data display and visual reconstruction validation in ALICE] (http://indico.cern.ch/contributionDisplay.py?contribId=442&sessionId=23&confId=3580) presented at CHEP 2007. Eve is built on top of ROOT's GUI, GL and GED infrastructure and delivers the following main features:. Base-classes for representation of visual objects that can be presented in list-tree views, object-editors and rendered via OpenGL (TEveElement and sub-classes).; Application manager class TEveManager for top-level management of elements, GUI components, geometries and events;; Classes for presentation of full TGeo geometries (TEveGeoNode and TEveGeoTopNode) as well as of simplifed geometries via extraction of shape-data (TEveGeoShape). CMS geometry. Classes for presentation of trajectories or tracks (TEveTrack, TEveTrackPropagator) and hits or clusters (TEvePointSet, TEvePointSetArray). A simulated ALICE pp@14TeV event in 3D. Base-classes for presentation of raw-data or digits (TEveDigitSet, TEveQuadSet and TEveBoxSet). A collection of objects can be assigned common signal-to-color mapping (TEveRGBAPelette) and surrounding frame (TEveFrameBox). Hexagonal and rectangular digits. Base-classes for 2D projections with dynamically controllable fish-eye magnification of the vertex region (TEveProjectionManager and TEveProjection). Tracks, points and geometries can be projected automatically. R-phi and Rho-z projections are currently supported. A r-phi projection with fish-eye transformation of a simulated ALICE pp@14TeV event. TriangleSet class for presentation of generic triangle mesh",MatchSource.WIKI,doc/master/group__TEve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TEve.html
Availability,error,error,"idation, splitting the dataloader into folds. More...;  ; class  TMVA::CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  TMVA::DataInputHandler;  Class that contains all the data information. More...;  ; class  TMVA::DataLoader;  ; class  TMVA::DataSet;  Class that contains all the data information. More...;  ; class  TMVA::DataSetFactory;  Class that contains all the data information. More...;  ; class  TMVA::DataSetInfo;  Class that contains all the data information. More...;  ; class  TMVA::DataSetManager;  Class that contains all the data information. More...;  ; class  TMVA::DecisionTree;  Implementation of a Decision Tree. More...;  ; class  TMVA::Envelope;  Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. More...;  ; class  TMVA::Event;  ; class  TMVA::ExpectedErrorPruneTool;  A helper class to prune a decision tree using the expected error (C4.5) method. More...;  ; class  TMVA::Factory;  This is the main MVA steering class. More...;  ; class  TMVA::FitterBase;  Base class for TMVA fitters. More...;  ; class  TMVA::GeneticAlgorithm;  Base definition for genetic algorithm. More...;  ; class  TMVA::GeneticFitter;  Fitter using a Genetic Algorithm. More...;  ; class  TMVA::GeneticGenes;  Cut optimisation interface class for genetic algorithm. More...;  ; class  TMVA::GeneticPopulation;  Population definition for genetic algorithm. More...;  ; class  TMVA::GeneticRange;  Range definition for genetic algorithm. More...;  ; class  TMVA::GiniIndex;  Implementation of the GiniIndex as separation criterion. More...;  ; class  TMVA::GiniIndexWithLaplace;  Implementation of the GiniIndex With Laplace correction as separation criterion. More...;  ; class  TMVA::HuberLossFunction;  Huber Loss Function. More...;  ; class  TMVA::HuberLossFunctionBDT;  Huber BDT Loss Functio",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
Deployability,configurat,configuration,"on. More...;  ; class  TMVA::AbsoluteDeviationLossFunctionBDT;  Absolute Deviation BDT Loss Function. More...;  ; class  TMVA::BDTEventWrapper;  ; class  TMVA::BinarySearchTree;  A simple Binary search tree including a volume search method. More...;  ; class  TMVA::BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  TMVA::BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  TMVA::CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  TMVA::CCTreeWrapper;  ; class  Classification;  Class to perform two class classification. More...;  ; class  ClassificationResult;  Class to save the results of the classifier. More...;  ; class  TMVA::ClassifierFactory;  This is the MVA factory. More...;  ; class  TMVA::ClassInfo;  Class that contains all the information of a class. More...;  ; class  TMVA::Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  TMVA::ConvergenceTest;  Check for convergence. More...;  ; class  TMVA::CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CreateMethodPlugins;  Plugins analysis. More...;  ; class  TMVA::CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  TMVA::CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  TMVA::CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  TMVA::DataInputHandler;  Class that contains all the data information. More...;  ; class  TMVA::DataLoader;  ; class  TMVA::DataSet;  Class that contains all the data information. More...;  ; class  TMVA::DataSetFactory;  Class that contains all the data inform",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
Integrability,interface,interface,"ontains all the data information. More...;  ; class  TMVA::DataSetFactory;  Class that contains all the data information. More...;  ; class  TMVA::DataSetInfo;  Class that contains all the data information. More...;  ; class  TMVA::DataSetManager;  Class that contains all the data information. More...;  ; class  TMVA::DecisionTree;  Implementation of a Decision Tree. More...;  ; class  TMVA::Envelope;  Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. More...;  ; class  TMVA::Event;  ; class  TMVA::ExpectedErrorPruneTool;  A helper class to prune a decision tree using the expected error (C4.5) method. More...;  ; class  TMVA::Factory;  This is the main MVA steering class. More...;  ; class  TMVA::FitterBase;  Base class for TMVA fitters. More...;  ; class  TMVA::GeneticAlgorithm;  Base definition for genetic algorithm. More...;  ; class  TMVA::GeneticFitter;  Fitter using a Genetic Algorithm. More...;  ; class  TMVA::GeneticGenes;  Cut optimisation interface class for genetic algorithm. More...;  ; class  TMVA::GeneticPopulation;  Population definition for genetic algorithm. More...;  ; class  TMVA::GeneticRange;  Range definition for genetic algorithm. More...;  ; class  TMVA::GiniIndex;  Implementation of the GiniIndex as separation criterion. More...;  ; class  TMVA::GiniIndexWithLaplace;  Implementation of the GiniIndex With Laplace correction as separation criterion. More...;  ; class  TMVA::HuberLossFunction;  Huber Loss Function. More...;  ; class  TMVA::HuberLossFunctionBDT;  Huber BDT Loss Function. More...;  ; class  TMVA::HyperParameterOptimisation;  ; class  TMVA::HyperParameterOptimisationResult;  ; class  TMVA::IFitterTarget;  Interface for a fitter 'target'. More...;  ; class  TMVA::IMethod;  Interface for all concrete MVA method implementations. More...;  ; class  TMVA::Interval;  The TMVA::Interval Class. More...;  ; class  TMVA::IPruneTool;  IPruneTool - a helper interface class to prune a decision tree. M",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
Modifiability,config,configuration,"on. More...;  ; class  TMVA::AbsoluteDeviationLossFunctionBDT;  Absolute Deviation BDT Loss Function. More...;  ; class  TMVA::BDTEventWrapper;  ; class  TMVA::BinarySearchTree;  A simple Binary search tree including a volume search method. More...;  ; class  TMVA::BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  TMVA::BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  TMVA::CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  TMVA::CCTreeWrapper;  ; class  Classification;  Class to perform two class classification. More...;  ; class  ClassificationResult;  Class to save the results of the classifier. More...;  ; class  TMVA::ClassifierFactory;  This is the MVA factory. More...;  ; class  TMVA::ClassInfo;  Class that contains all the information of a class. More...;  ; class  TMVA::Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  TMVA::ConvergenceTest;  Check for convergence. More...;  ; class  TMVA::CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CreateMethodPlugins;  Plugins analysis. More...;  ; class  TMVA::CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  TMVA::CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  TMVA::CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  TMVA::DataInputHandler;  Class that contains all the data information. More...;  ; class  TMVA::DataLoader;  ; class  TMVA::DataSet;  Class that contains all the data information. More...;  ; class  TMVA::DataSetFactory;  Class that contains all the data inform",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
Performance,perform,perform,"te-Analysis classes.; See:. The TMVA Web manual in ROOT Web site; The TMVA Users Guide. Old links, referring to old TMVA versions, but they can still be useful for some of the TMVA methods:. Description of the traditional TMVA Methods; The TMVA Options Reference. . Classes; class  TMVA::AbsoluteDeviationLossFunction;  Absolute Deviation Loss Function. More...;  ; class  TMVA::AbsoluteDeviationLossFunctionBDT;  Absolute Deviation BDT Loss Function. More...;  ; class  TMVA::BDTEventWrapper;  ; class  TMVA::BinarySearchTree;  A simple Binary search tree including a volume search method. More...;  ; class  TMVA::BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  TMVA::BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  TMVA::CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  TMVA::CCTreeWrapper;  ; class  Classification;  Class to perform two class classification. More...;  ; class  ClassificationResult;  Class to save the results of the classifier. More...;  ; class  TMVA::ClassifierFactory;  This is the MVA factory. More...;  ; class  TMVA::ClassInfo;  Class that contains all the information of a class. More...;  ; class  TMVA::Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  TMVA::ConvergenceTest;  Check for convergence. More...;  ; class  TMVA::CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CreateMethodPlugins;  Plugins analysis. More...;  ; class  TMVA::CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  TMVA::CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  TMVA::CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you ",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
Security,validat,validation,"uner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  TMVA::CCTreeWrapper;  ; class  Classification;  Class to perform two class classification. More...;  ; class  ClassificationResult;  Class to save the results of the classifier. More...;  ; class  TMVA::ClassifierFactory;  This is the MVA factory. More...;  ; class  TMVA::ClassInfo;  Class that contains all the information of a class. More...;  ; class  TMVA::Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  TMVA::ConvergenceTest;  Check for convergence. More...;  ; class  TMVA::CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CreateMethodPlugins;  Plugins analysis. More...;  ; class  TMVA::CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  TMVA::CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  TMVA::CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  TMVA::DataInputHandler;  Class that contains all the data information. More...;  ; class  TMVA::DataLoader;  ; class  TMVA::DataSet;  Class that contains all the data information. More...;  ; class  TMVA::DataSetFactory;  Class that contains all the data information. More...;  ; class  TMVA::DataSetInfo;  Class that contains all the data information. More...;  ; class  TMVA::DataSetManager;  Class that contains all the data information. More...;  ; class  TMVA::DecisionTree;  Implementation of a Decision Tree. More...;  ; class  TMVA::Envelope;  Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. More...;  ; class  TMVA::Event;  ; class  TMVA::ExpectedErrorPrune",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
Usability,simpl,simple,". ROOT: TMVA. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; TMVA. ; The Multi Variate Analysis package. ; The TMVA Multi-Variate-Analysis classes.; See:. The TMVA Web manual in ROOT Web site; The TMVA Users Guide. Old links, referring to old TMVA versions, but they can still be useful for some of the TMVA methods:. Description of the traditional TMVA Methods; The TMVA Options Reference. . Classes; class  TMVA::AbsoluteDeviationLossFunction;  Absolute Deviation Loss Function. More...;  ; class  TMVA::AbsoluteDeviationLossFunctionBDT;  Absolute Deviation BDT Loss Function. More...;  ; class  TMVA::BDTEventWrapper;  ; class  TMVA::BinarySearchTree;  A simple Binary search tree including a volume search method. More...;  ; class  TMVA::BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  TMVA::BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  TMVA::CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  TMVA::CCTreeWrapper;  ; class  Classification;  Class to perform two class classification. More...;  ; class  ClassificationResult;  Class to save the results of the classifier. More...;  ; class  TMVA::ClassifierFactory;  This is the MVA factory. More...;  ; class  TMVA::ClassInfo;  Class that contains all the information of a class. More...;  ; class  TMVA::Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  TMVA::ConvergenceTest;  Check for convergence. More...;  ; class  TMVA::CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CreateMethodPlugins;  Plugins analysis. More...;  ; class  TMVA::CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  TMVA::CrossValidation;  Class to perform cross validation, splitting the",MatchSource.WIKI,doc/master/group__TMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__TMVA.html
Energy Efficiency,reduce,reduce,". ROOT: Tree Library. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files |; Namespaces |; Classes ; Tree Library. ; In order to store columnar datasets, ROOT provides the TTree, TChain, TNtuple and TNtupleD classes. ; The TTree class represents a columnar dataset. Any C++ type can be stored in the columns. The TTree has allowed to store about 1 EB of data coming from the LHC alone: it is demonstrated to scale and it's battle tested. It has been optimized during the years to reduce dataset sizes on disk and to deliver excellent runtime performance. It allows to access only part of the columns of the datasets, too. The TNtuple and TNtupleD classes are specialisations of the TTree class which can only hold single precision and double precision floating-point numbers respectively; The TChain is a collection of TTrees, which can be located also in different files. . Files; file  InternalTreeUtils.hxx;  ; file  RFriendInfo.hxx;  . Namespaces; namespace  ROOT::Internal::TreeUtils;  Namespace hosting functions and classes to retrieve tree information for internal use. ;  . Classes; struct  ROOT::TreeUtils::RFriendInfo;  Information about friend trees of a certain TTree or TChain object. More...;  ; class  TBasket;  Manages buffers for branches of a Tree. More...;  ; class  TBasketSQL;  Implement TBasket for a SQL backend. More...;  ; class  TBranch;  A TTree is a list of TBranches. More...;  ; class  TBranchClones;  A Branch for the case of an array of clone objects. More...;  ; class  TBranchElement;  A Branch for the case of an object. More...;  ; class  TBranchObject;  A Branch for the case of an object. More...;  ; class  TBranchRef;  A branch containing and managing a TRefTable for TRef autoloading. More...;  ; class  TBranchSTL;  A Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while storing them in split mode. More...;  ; class  TBufferSQL;  Implement TBuffer for a SQL backend. More...;  ; cl",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
Integrability,interface,interface," More...;  ; class  TChainElement;  A TChainElement describes a component of a TChain. More...;  ; class  TCollectionMethodBrowsable;  TCollectionMethodBrowsable extends TCollectionPropertyBrowsable by showing all methods of the collection itself. More...;  ; class  TCollectionPropertyBrowsable;  A tiny browser helper object (and its generator) for adding a virtual (as in ""not actually part of the class"", not in C++ virtual) ""@size()"" method to a collection. More...;  ; class  TCut;  A specialized string object used for TTree selections. More...;  ; class  TEntryList;  A List of entry numbers in a TTree or TChain. More...;  ; class  TEntryListArray;  A list of entries and subentries in a TTree or TChain. More...;  ; class  TEntryListBlock;  Used by TEntryList to store the entry numbers. More...;  ; class  TEntryListFromFile;  Manages entry lists from different files, when they are not loaded in memory at the same time. More...;  ; class  TEventList;   Legacy Code TEventList is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TEventList might still be a valid solution. More...;  ; class  TFriendElement;  A TFriendElement TF describes a TTree object TF in a file. More...;  ; class  ROOT::TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TLeaf;  A TLeaf describes individual elements of a TBranch See TBranch structure in TTree. More...;  ; class  TLeafB;  A TLeaf for an 8 bit Integer data type. More...;  ; class  TLeafC;  A TLeaf for a variable length string. More...;  ; class  TLeafD;  A TLeaf for a 64 bit floating point data type. More...;  ; class  TLeafD32;  A TLeaf for a 24 bit truncated floating point data type. More...;  ; class  TLeafElement;  A TLeaf for the general case when using the branches created via a TStreamerInfo (i.e. More...;  ; cla",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
Modifiability,extend,extends," ; class  TBasket;  Manages buffers for branches of a Tree. More...;  ; class  TBasketSQL;  Implement TBasket for a SQL backend. More...;  ; class  TBranch;  A TTree is a list of TBranches. More...;  ; class  TBranchClones;  A Branch for the case of an array of clone objects. More...;  ; class  TBranchElement;  A Branch for the case of an object. More...;  ; class  TBranchObject;  A Branch for the case of an object. More...;  ; class  TBranchRef;  A branch containing and managing a TRefTable for TRef autoloading. More...;  ; class  TBranchSTL;  A Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while storing them in split mode. More...;  ; class  TBufferSQL;  Implement TBuffer for a SQL backend. More...;  ; class  TChain;  A chain is a collection of files containing TTree objects. More...;  ; class  TChainElement;  A TChainElement describes a component of a TChain. More...;  ; class  TCollectionMethodBrowsable;  TCollectionMethodBrowsable extends TCollectionPropertyBrowsable by showing all methods of the collection itself. More...;  ; class  TCollectionPropertyBrowsable;  A tiny browser helper object (and its generator) for adding a virtual (as in ""not actually part of the class"", not in C++ virtual) ""@size()"" method to a collection. More...;  ; class  TCut;  A specialized string object used for TTree selections. More...;  ; class  TEntryList;  A List of entry numbers in a TTree or TChain. More...;  ; class  TEntryListArray;  A list of entries and subentries in a TTree or TChain. More...;  ; class  TEntryListBlock;  Used by TEntryList to store the entry numbers. More...;  ; class  TEntryListFromFile;  Manages entry lists from different files, when they are not loaded in memory at the same time. More...;  ; class  TEventList;   Legacy Code TEventList is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, usi",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
Performance,optimiz,optimized,". ROOT: Tree Library. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files |; Namespaces |; Classes ; Tree Library. ; In order to store columnar datasets, ROOT provides the TTree, TChain, TNtuple and TNtupleD classes. ; The TTree class represents a columnar dataset. Any C++ type can be stored in the columns. The TTree has allowed to store about 1 EB of data coming from the LHC alone: it is demonstrated to scale and it's battle tested. It has been optimized during the years to reduce dataset sizes on disk and to deliver excellent runtime performance. It allows to access only part of the columns of the datasets, too. The TNtuple and TNtupleD classes are specialisations of the TTree class which can only hold single precision and double precision floating-point numbers respectively; The TChain is a collection of TTrees, which can be located also in different files. . Files; file  InternalTreeUtils.hxx;  ; file  RFriendInfo.hxx;  . Namespaces; namespace  ROOT::Internal::TreeUtils;  Namespace hosting functions and classes to retrieve tree information for internal use. ;  . Classes; struct  ROOT::TreeUtils::RFriendInfo;  Information about friend trees of a certain TTree or TChain object. More...;  ; class  TBasket;  Manages buffers for branches of a Tree. More...;  ; class  TBasketSQL;  Implement TBasket for a SQL backend. More...;  ; class  TBranch;  A TTree is a list of TBranches. More...;  ; class  TBranchClones;  A Branch for the case of an array of clone objects. More...;  ; class  TBranchElement;  A Branch for the case of an object. More...;  ; class  TBranchObject;  A Branch for the case of an object. More...;  ; class  TBranchRef;  A branch containing and managing a TRefTable for TRef autoloading. More...;  ; class  TBranchSTL;  A Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while storing them in split mode. More...;  ; class  TBufferSQL;  Implement TBuffer for a SQL backend. More...;  ; cl",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
Security,access,access,". ROOT: Tree Library. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files |; Namespaces |; Classes ; Tree Library. ; In order to store columnar datasets, ROOT provides the TTree, TChain, TNtuple and TNtupleD classes. ; The TTree class represents a columnar dataset. Any C++ type can be stored in the columns. The TTree has allowed to store about 1 EB of data coming from the LHC alone: it is demonstrated to scale and it's battle tested. It has been optimized during the years to reduce dataset sizes on disk and to deliver excellent runtime performance. It allows to access only part of the columns of the datasets, too. The TNtuple and TNtupleD classes are specialisations of the TTree class which can only hold single precision and double precision floating-point numbers respectively; The TChain is a collection of TTrees, which can be located also in different files. . Files; file  InternalTreeUtils.hxx;  ; file  RFriendInfo.hxx;  . Namespaces; namespace  ROOT::Internal::TreeUtils;  Namespace hosting functions and classes to retrieve tree information for internal use. ;  . Classes; struct  ROOT::TreeUtils::RFriendInfo;  Information about friend trees of a certain TTree or TChain object. More...;  ; class  TBasket;  Manages buffers for branches of a Tree. More...;  ; class  TBasketSQL;  Implement TBasket for a SQL backend. More...;  ; class  TBranch;  A TTree is a list of TBranches. More...;  ; class  TBranchClones;  A Branch for the case of an array of clone objects. More...;  ; class  TBranchElement;  A Branch for the case of an object. More...;  ; class  TBranchObject;  A Branch for the case of an object. More...;  ; class  TBranchRef;  A branch containing and managing a TRefTable for TRef autoloading. More...;  ; class  TBranchSTL;  A Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while storing them in split mode. More...;  ; class  TBufferSQL;  Implement TBuffer for a SQL backend. More...;  ; cl",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
Testability,test,tested,". ROOT: Tree Library. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files |; Namespaces |; Classes ; Tree Library. ; In order to store columnar datasets, ROOT provides the TTree, TChain, TNtuple and TNtupleD classes. ; The TTree class represents a columnar dataset. Any C++ type can be stored in the columns. The TTree has allowed to store about 1 EB of data coming from the LHC alone: it is demonstrated to scale and it's battle tested. It has been optimized during the years to reduce dataset sizes on disk and to deliver excellent runtime performance. It allows to access only part of the columns of the datasets, too. The TNtuple and TNtupleD classes are specialisations of the TTree class which can only hold single precision and double precision floating-point numbers respectively; The TChain is a collection of TTrees, which can be located also in different files. . Files; file  InternalTreeUtils.hxx;  ; file  RFriendInfo.hxx;  . Namespaces; namespace  ROOT::Internal::TreeUtils;  Namespace hosting functions and classes to retrieve tree information for internal use. ;  . Classes; struct  ROOT::TreeUtils::RFriendInfo;  Information about friend trees of a certain TTree or TChain object. More...;  ; class  TBasket;  Manages buffers for branches of a Tree. More...;  ; class  TBasketSQL;  Implement TBasket for a SQL backend. More...;  ; class  TBranch;  A TTree is a list of TBranches. More...;  ; class  TBranchClones;  A Branch for the case of an array of clone objects. More...;  ; class  TBranchElement;  A Branch for the case of an object. More...;  ; class  TBranchObject;  A Branch for the case of an object. More...;  ; class  TBranchRef;  A branch containing and managing a TRefTable for TRef autoloading. More...;  ; class  TBranchSTL;  A Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while storing them in split mode. More...;  ; class  TBufferSQL;  Implement TBuffer for a SQL backend. More...;  ; cl",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
Usability,simpl,simple,"cated floating point data type. More...;  ; class  TLeafElement;  A TLeaf for the general case when using the branches created via a TStreamerInfo (i.e. More...;  ; class  TLeafF;  A TLeaf for a 32 bit floating point data type. More...;  ; class  TLeafF16;  A TLeaf for a 24 bit truncated floating point data type. More...;  ; class  TLeafG;  A TLeaf for a 64 bit Integer data type. More...;  ; class  TLeafI;  A TLeaf for an Integer data type. More...;  ; class  TLeafL;  A TLeaf for a 64 bit Integer data type. More...;  ; class  TLeafO;  A TLeaf for a bool data type. More...;  ; class  TLeafObject;  A TLeaf for a general object derived from TObject. More...;  ; class  TLeafS;  A TLeaf for a 16 bit Integer data type. More...;  ; class  TMethodBrowsable;  This helper object allows the browsing of methods of objects stored in branches. More...;  ; class  TNonSplitBrowsable;  Allows a TBrowser to browse non-split branches as if they were split. More...;  ; class  TNtuple;  A simple TTree restricted to a list of float variables only. More...;  ; class  TNtupleD;  A simple TTree restricted to a list of double variables only. More...;  ; class  TQueryResult;  A container class for query results. More...;  ; class  TreeUtils;  Different standalone functions to work with trees and tuples, not reqiuired to be a member of any class. More...;  ; class  TSelector;  A TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections. More...;  ; class  TSelectorList;  A TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees). More...;  ; class  TSelectorScalar;  Named scalar type, based on Long64_t, streamable, storable and mergeable. More...;  ; class  TTree;  A TTree represents a columnar dataset. More...;  ; class  TTreeCache;  A cache to speed-up the reading of ROOT datasets. More...;  ; class  TTreeCacheUnzip;  A TTreeCache which exploits para",MatchSource.WIKI,doc/master/group__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tree.html
Integrability,interface,interface," scripts and notebooks helping to learn ROOT by example. ; You can execute the scripts in $ROOTSYS/tutorials (or sub-directories) by setting your current directory in the script directory or from any user directory with write access.; Several tutorials create new files. If you have write access to the tutorials directory, the new files will be created in the tutorials directory, otherwise they will be created in the user directory.; You can start by executing the standard ROOT demos with a session like:; root > .x demos.C; or; root > .x $ROOTSYS/tutorials/demos.C; You can execute the standard ROOT graphics benchmark with; root > .x benchmarks.C; or; root > .x $ROOTSYS/tutorials/benchmarks.C; The $ROOTSYS/tutorials directory includes several sub-directories: . Modules;  Histograms tutorials;  Examples showing the ""histograms' classes"" usage. ;  ;  Tree tutorials;  Example code which illustrates how to use ROOT trees and ntuples. ;  ;  Dataframe tutorials;  These examples show various features of RDataFrame: ROOT's declarative analysis interface. ;  ;  ROOT 7 tutorials;  Various examples showing the ROOT 7 interface. ;  ;  FOAM tutorials;  Examples showing how to use FOAM. ;  ;  Containers tutorials;  Examples showing the ""containers' classes"" usage. ;  ;  Event display tutorials;  Examples showing the ""Event display classes"" usage. ;  ;  Event display ROOT7 tutorials;  Examples showing the ""Event display classes"" usage with ROOT7. ;  ;  Geometry tutorials;  Various ROOT geometry package examples. ;  ;  Fast Fourier Transforms tutorials;  Example showing the Fast Fourier Transforms interface in ROOT. ;  ;  Fit Tutorials;  These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. ;  ;  RooFit Tutorials;  These tutorials illustrate the main features of RooFit: the name of the examples and their short description help in figuring out their objective. ;  ;  Graphs tutorials;  Examples showing the ""graphs class",MatchSource.WIKI,doc/master/group__Tutorials.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Tutorials.html
Safety,safe,safety,"heir objective. ;  ;  Graphs tutorials;  Examples showing the ""graphs classes"" usage. ;  ;  Graphics tutorials;  Various examples showing the basic ROOT graphics. ;  ;  OpenGL tutorials;  Various examples showing the OpenGL graphics in ROOT. ;  ;  Tutorials specific to Mac/Cocoa;  Various examples showing graphics done with the Mac graphics system Cocoa. ;  ;  GUI tutorials;  Example code which illustrates how to use the ROOT GUI. ;  ;  HistFactory Tutorials;  These tutorials illustrate the usage of the histfactory. ;  ;  HTTP tutorials;  Examples showing the HTTP interface. ;  ;  Image tutorials;  Examples showing the TImage class usage. ;  ;  IO tutorials;  These tutorials illustrate some of the capabilities of the ROOT IO subsystem. ;  ;  Math tutorials;  Examples showing the Math classes. ;  ;  Matrix tutorials;  Examples showing how to use TMatrix. ;  ;  Monte Carlo tutorials;  Monte Carlo examples. ;  ;  Multicore tutorials;  These examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing. ;  ;  Net tutorials;  Examples showing the net classes. ;  ;  Physics tutorials;  Physics examples. ;  ;  PyRoot tutorials;  Selected examples illustrating how to use ROOT's Python interface: PyROOT. ;  ;  Pythia tutorials;  Examples showing the pythia usage. ;  ;  Quadratic programming package.;  Example showing the usage of the quadratic programming package quadp. ;  ;  R tutorials;  Examples showing the R interface. ;  ;  RooStats Tutorials;  These tutorials illustrate the main features of RooStats. ;  ;  Spectrum tutorials;  Examples showing the TSpectrum and TSpectrumPainter usage. ;  ;  TSPlot tutorials;  This tutorial illustrates the use of class TSPlot. ;  ;  SQL tutorials;  Examples showing the SQL classes. ;  ;  TMVA tutorials;  Example code which illustrates how to use the TMVA toolkit. ;  ;  TUnfold tutorials;  Test programs for the classes TUnfold and related. ;  ;  Unuran tutorials;  Examp",MatchSource.WIKI,doc/master/group__Tutorials.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Tutorials.html
Security,access,access,". ROOT: Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Tutorials. ; A collection of C++ macros, Python scripts and notebooks helping to learn ROOT by example. ; You can execute the scripts in $ROOTSYS/tutorials (or sub-directories) by setting your current directory in the script directory or from any user directory with write access.; Several tutorials create new files. If you have write access to the tutorials directory, the new files will be created in the tutorials directory, otherwise they will be created in the user directory.; You can start by executing the standard ROOT demos with a session like:; root > .x demos.C; or; root > .x $ROOTSYS/tutorials/demos.C; You can execute the standard ROOT graphics benchmark with; root > .x benchmarks.C; or; root > .x $ROOTSYS/tutorials/benchmarks.C; The $ROOTSYS/tutorials directory includes several sub-directories: . Modules;  Histograms tutorials;  Examples showing the ""histograms' classes"" usage. ;  ;  Tree tutorials;  Example code which illustrates how to use ROOT trees and ntuples. ;  ;  Dataframe tutorials;  These examples show various features of RDataFrame: ROOT's declarative analysis interface. ;  ;  ROOT 7 tutorials;  Various examples showing the ROOT 7 interface. ;  ;  FOAM tutorials;  Examples showing how to use FOAM. ;  ;  Containers tutorials;  Examples showing the ""containers' classes"" usage. ;  ;  Event display tutorials;  Examples showing the ""Event display classes"" usage. ;  ;  Event display ROOT7 tutorials;  Examples showing the ""Event display classes"" usage with ROOT7. ;  ;  Geometry tutorials;  Various ROOT geometry package examples. ;  ;  Fast Fourier Transforms tutorials;  Example showing the Fast Fourier Transforms interface in ROOT. ;  ;  Fit Tutorials;  These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. ;  ;  RooFit Tutorials;  These tutorials illustrate the main feat",MatchSource.WIKI,doc/master/group__Tutorials.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Tutorials.html
Testability,benchmark,benchmark,". ROOT: Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Tutorials. ; A collection of C++ macros, Python scripts and notebooks helping to learn ROOT by example. ; You can execute the scripts in $ROOTSYS/tutorials (or sub-directories) by setting your current directory in the script directory or from any user directory with write access.; Several tutorials create new files. If you have write access to the tutorials directory, the new files will be created in the tutorials directory, otherwise they will be created in the user directory.; You can start by executing the standard ROOT demos with a session like:; root > .x demos.C; or; root > .x $ROOTSYS/tutorials/demos.C; You can execute the standard ROOT graphics benchmark with; root > .x benchmarks.C; or; root > .x $ROOTSYS/tutorials/benchmarks.C; The $ROOTSYS/tutorials directory includes several sub-directories: . Modules;  Histograms tutorials;  Examples showing the ""histograms' classes"" usage. ;  ;  Tree tutorials;  Example code which illustrates how to use ROOT trees and ntuples. ;  ;  Dataframe tutorials;  These examples show various features of RDataFrame: ROOT's declarative analysis interface. ;  ;  ROOT 7 tutorials;  Various examples showing the ROOT 7 interface. ;  ;  FOAM tutorials;  Examples showing how to use FOAM. ;  ;  Containers tutorials;  Examples showing the ""containers' classes"" usage. ;  ;  Event display tutorials;  Examples showing the ""Event display classes"" usage. ;  ;  Event display ROOT7 tutorials;  Examples showing the ""Event display classes"" usage with ROOT7. ;  ;  Geometry tutorials;  Various ROOT geometry package examples. ;  ;  Fast Fourier Transforms tutorials;  Example showing the Fast Fourier Transforms interface in ROOT. ;  ;  Fit Tutorials;  These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. ;  ;  RooFit Tutorials;  These tutorials illustrate the main feat",MatchSource.WIKI,doc/master/group__Tutorials.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Tutorials.html
Usability,learn,learn,". ROOT: Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Tutorials. ; A collection of C++ macros, Python scripts and notebooks helping to learn ROOT by example. ; You can execute the scripts in $ROOTSYS/tutorials (or sub-directories) by setting your current directory in the script directory or from any user directory with write access.; Several tutorials create new files. If you have write access to the tutorials directory, the new files will be created in the tutorials directory, otherwise they will be created in the user directory.; You can start by executing the standard ROOT demos with a session like:; root > .x demos.C; or; root > .x $ROOTSYS/tutorials/demos.C; You can execute the standard ROOT graphics benchmark with; root > .x benchmarks.C; or; root > .x $ROOTSYS/tutorials/benchmarks.C; The $ROOTSYS/tutorials directory includes several sub-directories: . Modules;  Histograms tutorials;  Examples showing the ""histograms' classes"" usage. ;  ;  Tree tutorials;  Example code which illustrates how to use ROOT trees and ntuples. ;  ;  Dataframe tutorials;  These examples show various features of RDataFrame: ROOT's declarative analysis interface. ;  ;  ROOT 7 tutorials;  Various examples showing the ROOT 7 interface. ;  ;  FOAM tutorials;  Examples showing how to use FOAM. ;  ;  Containers tutorials;  Examples showing the ""containers' classes"" usage. ;  ;  Event display tutorials;  Examples showing the ""Event display classes"" usage. ;  ;  Event display ROOT7 tutorials;  Examples showing the ""Event display classes"" usage with ROOT7. ;  ;  Geometry tutorials;  Various ROOT geometry package examples. ;  ;  Fast Fourier Transforms tutorials;  Example showing the Fast Fourier Transforms interface in ROOT. ;  ;  Fit Tutorials;  These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. ;  ;  RooFit Tutorials;  These tutorials illustrate the main feat",MatchSource.WIKI,doc/master/group__Tutorials.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Tutorials.html
Availability,avail,available,". ROOT: Dataframe tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Dataframe tutorialsTutorials. ; These examples show various features of RDataFrame: ROOT's declarative analysis interface. ; RDataFrame offers a high level interface for the analysis of data stored in TTrees, CSV files and other data formats.; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines transparently.; In a nutshell: ROOT::EnableImplicitMT(); // Enable ROOT's implicit multi-threading; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto histoA = d.Histo1D(""Branch_A""); // Book the filling of a histogram; auto histoB = d.Histo1D(""Branch_B""); // Book the filling of another histogram; // Data processing is triggered by the next line, which accesses a booked result for the first time; // All booked results are evaluated during the same parallel event loop.; histoA->Draw(); // <-- event loop runs here!; histoB->Draw(); // HistoB has already been filled, no event loop is run here; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Explore the examples below or go to RDataFrame's user guide. . Files; file  df000_simple.C;   Simple RDataFrame example in C++. ;  ; file  df000_simple.py;   Simple RDataFrame example in Python. ;  ; file  df001_introduction.C;   Basic RDataFrame usage. ;  ; file  df001_introduction.py;   Basic usage of RDataFrame from python. ;  ; file  df002_dataModel.C;   Show how to work with non-flat data models, e.g. ;  ; file  df002_dataModel.py;   Show how to work with non-flat data models, e.g. ;  ; fi",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
Deployability,update,update,"nges.py;   Use Range to limit the amount of data processed. ;  ; file  df007_snapshot.C;   Write ROOT data with RDataFrame. ;  ; file  df007_snapshot.py;   Write ROOT data with RDataFrame. ;  ; file  df008_createDataSetFromScratch.C;   Create data from scratch with RDataFrame. ;  ; file  df008_createDataSetFromScratch.py;   Create data from scratch with RDataFrame. ;  ; file  df009_FromScratchVSTTree.C;   Compare creation of a ROOT dataset with RDataFrame and TTree. ;  ; file  df010_trivialDataSource.C;   Use the ""trivial data source"", an example data source implementation. ;  ; file  df010_trivialDataSource.py;   Use the ""trivial data source"", an example data source implementation. ;  ; file  df012_DefinesAndFiltersAsStrings.C;   Use just-in-time-compiled Filters and Defines for quick prototyping. ;  ; file  df012_DefinesAndFiltersAsStrings.py;   Use just-in-time-compiled Filters and Defines for quick prototyping. ;  ; file  df013_InspectAnalysis.C;   Use callbacks to update a plot and a progress bar during the event loop. ;  ; file  df014_CSVDataSource.C;   Process a CSV file with RDataFrame and the CSV data source. ;  ; file  df014_CSVDataSource.py;   Process a CSV file with RDataFrame and the CSV data source. ;  ; file  df015_LazyDataSource.C;   Use the lazy RDataFrame data source to concatenate computation graphs. ;  ; file  df016_vecOps.C;   Process collections in RDataFrame with the help of RVec. ;  ; file  df016_vecOps.py;   Process collections in RDataFrame with the help of RVec. ;  ; file  df017_vecOpsHEP.C;   Use RVecs to plot the transverse momentum of selected particles. ;  ; file  df017_vecOpsHEP.py;   Use RVecs to plot the transverse momentum of selected particles. ;  ; file  df018_customActions.C;   Implement a custom action to fill THns. ;  ; file  df019_Cache.C;   Cache a processed RDataFrame in memory for further usage. ;  ; file  df019_Cache.py;   Cache a processed RDataFrame in memory for further usage. ;  ; file  df020_helpers.C;   Show usage of",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
Integrability,interface,interface,". ROOT: Dataframe tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Dataframe tutorialsTutorials. ; These examples show various features of RDataFrame: ROOT's declarative analysis interface. ; RDataFrame offers a high level interface for the analysis of data stored in TTrees, CSV files and other data formats.; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines transparently.; In a nutshell: ROOT::EnableImplicitMT(); // Enable ROOT's implicit multi-threading; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto histoA = d.Histo1D(""Branch_A""); // Book the filling of a histogram; auto histoB = d.Histo1D(""Branch_B""); // Book the filling of another histogram; // Data processing is triggered by the next line, which accesses a booked result for the first time; // All booked results are evaluated during the same parallel event loop.; histoA->Draw(); // <-- event loop runs here!; histoB->Draw(); // HistoB has already been filled, no event loop is run here; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Explore the examples below or go to RDataFrame's user guide. . Files; file  df000_simple.C;   Simple RDataFrame example in C++. ;  ; file  df000_simple.py;   Simple RDataFrame example in Python. ;  ; file  df001_introduction.C;   Basic RDataFrame usage. ;  ; file  df001_introduction.py;   Basic usage of RDataFrame from python. ;  ; file  df002_dataModel.C;   Show how to work with non-flat data models, e.g. ;  ; file  df002_dataModel.py;   Show how to work with non-flat data models, e.g. ;  ; fi",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
Performance,multi-thread,multi-threading,". ROOT: Dataframe tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Dataframe tutorialsTutorials. ; These examples show various features of RDataFrame: ROOT's declarative analysis interface. ; RDataFrame offers a high level interface for the analysis of data stored in TTrees, CSV files and other data formats.; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines transparently.; In a nutshell: ROOT::EnableImplicitMT(); // Enable ROOT's implicit multi-threading; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto histoA = d.Histo1D(""Branch_A""); // Book the filling of a histogram; auto histoB = d.Histo1D(""Branch_B""); // Book the filling of another histogram; // Data processing is triggered by the next line, which accesses a booked result for the first time; // All booked results are evaluated during the same parallel event loop.; histoA->Draw(); // <-- event loop runs here!; histoB->Draw(); // HistoB has already been filled, no event loop is run here; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Explore the examples below or go to RDataFrame's user guide. . Files; file  df000_simple.C;   Simple RDataFrame example in C++. ;  ; file  df000_simple.py;   Simple RDataFrame example in Python. ;  ; file  df001_introduction.C;   Basic RDataFrame usage. ;  ; file  df001_introduction.py;   Basic usage of RDataFrame from python. ;  ; file  df002_dataModel.C;   Show how to work with non-flat data models, e.g. ;  ; file  df002_dataModel.py;   Show how to work with non-flat data models, e.g. ;  ; fi",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
Security,access,accesses,". ROOT: Dataframe tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Dataframe tutorialsTutorials. ; These examples show various features of RDataFrame: ROOT's declarative analysis interface. ; RDataFrame offers a high level interface for the analysis of data stored in TTrees, CSV files and other data formats.; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines transparently.; In a nutshell: ROOT::EnableImplicitMT(); // Enable ROOT's implicit multi-threading; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto histoA = d.Histo1D(""Branch_A""); // Book the filling of a histogram; auto histoB = d.Histo1D(""Branch_B""); // Book the filling of another histogram; // Data processing is triggered by the next line, which accesses a booked result for the first time; // All booked results are evaluated during the same parallel event loop.; histoA->Draw(); // <-- event loop runs here!; histoB->Draw(); // HistoB has already been filled, no event loop is run here; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Explore the examples below or go to RDataFrame's user guide. . Files; file  df000_simple.C;   Simple RDataFrame example in C++. ;  ; file  df000_simple.py;   Simple RDataFrame example in Python. ;  ; file  df001_introduction.C;   Basic RDataFrame usage. ;  ; file  df001_introduction.py;   Basic usage of RDataFrame from python. ;  ; file  df002_dataModel.C;   Show how to work with non-flat data models, e.g. ;  ; file  df002_dataModel.py;   Show how to work with non-flat data models, e.g. ;  ; fi",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
Usability,guid,guide,"OT::EnableImplicitMT(); // Enable ROOT's implicit multi-threading; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto histoA = d.Histo1D(""Branch_A""); // Book the filling of a histogram; auto histoB = d.Histo1D(""Branch_B""); // Book the filling of another histogram; // Data processing is triggered by the next line, which accesses a booked result for the first time; // All booked results are evaluated during the same parallel event loop.; histoA->Draw(); // <-- event loop runs here!; histoB->Draw(); // HistoB has already been filled, no event loop is run here; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Explore the examples below or go to RDataFrame's user guide. . Files; file  df000_simple.C;   Simple RDataFrame example in C++. ;  ; file  df000_simple.py;   Simple RDataFrame example in Python. ;  ; file  df001_introduction.C;   Basic RDataFrame usage. ;  ; file  df001_introduction.py;   Basic usage of RDataFrame from python. ;  ; file  df002_dataModel.C;   Show how to work with non-flat data models, e.g. ;  ; file  df002_dataModel.py;   Show how to work with non-flat data models, e.g. ;  ; file  df003_profiles.C;   Use TProfiles with RDataFrame. ;  ; file  df003_profiles.py;   Use TProfiles with RDataFrame. ;  ; file  df004_cutFlowReport.C;   Display cut/Filter efficiencies with RDataFrame. ;  ; file  df004_cutFlowReport.py;   Display cut/Filter efficiencies with RDataFrame. ;  ; file  df005_fillAnyObject.C;   Using the generic Fill action. ;  ; file  df006_ranges.C;   Use Range to limit the amount of data processed. ;  ; file  df006_ranges.py;   Use Range to limit the amount of data processed. ;  ; file  df0",MatchSource.WIKI,doc/master/group__tutorial__dataframe.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html
Deployability,configurat,configuration,"eom_cms.C tutorial. ;  ; file  geom_cms_stereo.C;  Shows CMS geometry in stereo mode. ;  ; file  geom_default.C;  Demonstrates usage of ""Default"" geometry alias. ;  ; file  geom_lhcb.C;  Shows LHCB geometry. ;  ; file  glplot.C;  Preliminary demo for showing Timur's GL plots in EVE. ;  ; file  glplot_geom.C;  Demonstrates how to combine Timur's GL plots with other scene elements. ;  ; file  hierarchical_scene.C;  ; file  histobrowser.C;  Demonstrates how to use EVE as a histogram browser. ;  ; file  jetcone.C;  Demonstrates usage of TEveJetCone class. ;  ; file  lineset.C;  Demonstrates usage of class TEveStraightLineSet. ;  ; file  lineset.C;  Demonstrates usage of class REveStraightLineSet. ;  ; file  MultiView.C;  Multi-view (3d, rphi, rhoz) service class using EVE Window Manager. ;  ; file  overlay_palette.C;  ; file  overlay_test.C;  Demonstrates usage of TEveBox class. ;  ; file  pack.C;  Demonstrates usage of class TGPack. ;  ; file  paramlist.C;  Demonstrates usage of simple configuration via TEveParamList class. ;  ; file  pointset.C;  Demonstrates usage of class TEvePointSet. ;  ; file  projection.C;  Demonstrates usage of automatic 2D projections - class TEveProjectionManager. ;  ; file  projection_prescale.C;  Demonstrates usage pre-scaling for automatic 2D projections. ;  ; file  pythia_display.C;  Demo showing H -> ZZ -> 4 mu generated by Pythia. ;  ; file  quadset.C;  Demonstates usage of 2D digit class TEveQuadSet. ;  ; file  run_alice_esd.C;  Complex example showing ALICE ESD track visualization. ;  ; file  run_alice_esd_split.C;  Complex example showing ALICE ESD visualization in several views. ;  ; file  selection_sigs.C;  Test signals from TEveSelection class. ;  ; file  show_extract.C;  Helper script for showing of extracted / simplified geometries. ;  ; file  SplitGLView.C;  Helper classes for the alice_esd_split.C demo. ;  ; file  text.C;  Demonstrates usage of class TEveText - 2D & 3D text in GL. ;  ; file  track.C;  Demonstrates usage of TEve",MatchSource.WIKI,doc/master/group__tutorial__eve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__eve.html
Modifiability,config,configuration,"eom_cms.C tutorial. ;  ; file  geom_cms_stereo.C;  Shows CMS geometry in stereo mode. ;  ; file  geom_default.C;  Demonstrates usage of ""Default"" geometry alias. ;  ; file  geom_lhcb.C;  Shows LHCB geometry. ;  ; file  glplot.C;  Preliminary demo for showing Timur's GL plots in EVE. ;  ; file  glplot_geom.C;  Demonstrates how to combine Timur's GL plots with other scene elements. ;  ; file  hierarchical_scene.C;  ; file  histobrowser.C;  Demonstrates how to use EVE as a histogram browser. ;  ; file  jetcone.C;  Demonstrates usage of TEveJetCone class. ;  ; file  lineset.C;  Demonstrates usage of class TEveStraightLineSet. ;  ; file  lineset.C;  Demonstrates usage of class REveStraightLineSet. ;  ; file  MultiView.C;  Multi-view (3d, rphi, rhoz) service class using EVE Window Manager. ;  ; file  overlay_palette.C;  ; file  overlay_test.C;  Demonstrates usage of TEveBox class. ;  ; file  pack.C;  Demonstrates usage of class TGPack. ;  ; file  paramlist.C;  Demonstrates usage of simple configuration via TEveParamList class. ;  ; file  pointset.C;  Demonstrates usage of class TEvePointSet. ;  ; file  projection.C;  Demonstrates usage of automatic 2D projections - class TEveProjectionManager. ;  ; file  projection_prescale.C;  Demonstrates usage pre-scaling for automatic 2D projections. ;  ; file  pythia_display.C;  Demo showing H -> ZZ -> 4 mu generated by Pythia. ;  ; file  quadset.C;  Demonstates usage of 2D digit class TEveQuadSet. ;  ; file  run_alice_esd.C;  Complex example showing ALICE ESD track visualization. ;  ; file  run_alice_esd_split.C;  Complex example showing ALICE ESD visualization in several views. ;  ; file  selection_sigs.C;  Test signals from TEveSelection class. ;  ; file  show_extract.C;  Helper script for showing of extracted / simplified geometries. ;  ; file  SplitGLView.C;  Helper classes for the alice_esd_split.C demo. ;  ; file  text.C;  Demonstrates usage of class TEveText - 2D & 3D text in GL. ;  ; file  track.C;  Demonstrates usage of TEve",MatchSource.WIKI,doc/master/group__tutorial__eve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__eve.html
Safety,detect,detector,". ROOT: Event display tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Event display tutorialsTutorials. ; Examples showing the ""Event display classes"" usage. . Files; file  alice_esd.C;  Complex example showing ALICE ESD track visualization. ;  ; file  alice_esd_html_summary.C;  Html table and event summary for alice_esd.C. ;  ; file  alice_esd_split.C;  Complex example showing ALICE ESD visualization in several views. ;  ; file  alice_vsd.C;  Complex example showing ALICE VSD visualization. ;  ; file  annotation.C;  Demonstrates usage of TGLAnnotation class. ;  ; file  arrow.C;  Demonstrates usage of TEveArrow class. ;  ; file  arrow_standalone.C;  How to use EVE without the standard window. ;  ; file  assembly.C;  Geometry detector assembly example. ;  ; file  box.C;  Demonstrates usage of TEveBox class. ;  ; file  box.C;  Demonstrates usage of TEveBox class. ;  ; file  boxset.C;  Demonstrates usage of TEveBoxSet class. ;  ; file  boxset.C;  Demonstrates usage of REveBoxSet class. ;  ; file  boxset_cones.C;  Demonstrates usage of 'cone' mode in TEveBoxSet class. ;  ; file  boxset_cones.C;  Demonstrates usage of 'cone' mode in REveBoxSet class. ;  ; file  calo_detail.C;  Calorimeter detailed view by using TEveCaloDataVec as data-source. ;  ; file  calorimeters.C;  Demonstrates usage of EVE calorimetry classes. ;  ; file  camera_restore.C;  ; file  compound.C;  Demonstrates usage of EVE compound objects - class TEveCompound. ;  ; file  csgdemo.C;  Combinatorial Solid Geometry example. ;  ; file  geom_alias.C;  Demonstrates usage of geometry aliases - merge ALICE ITS with ATLAS MUON. ;  ; file  geom_alice_its.C;  Shows geometry of ALICE ITS. ;  ; file  geom_alice_tpc.C;  Shows geometry of ALICE TPC. ;  ; file  geom_atlas.C;  Shows ATLAS geometry. ;  ; file  geom_atlas_playback.C;  Plays back event-recording of a root session running geom_atlas.C tutorial. ;  ; file  geom_cms.C;  Shows CMS geometry. ;  ; file  geom_cm",MatchSource.WIKI,doc/master/group__tutorial__eve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__eve.html
Usability,simpl,simple,"eom_cms.C tutorial. ;  ; file  geom_cms_stereo.C;  Shows CMS geometry in stereo mode. ;  ; file  geom_default.C;  Demonstrates usage of ""Default"" geometry alias. ;  ; file  geom_lhcb.C;  Shows LHCB geometry. ;  ; file  glplot.C;  Preliminary demo for showing Timur's GL plots in EVE. ;  ; file  glplot_geom.C;  Demonstrates how to combine Timur's GL plots with other scene elements. ;  ; file  hierarchical_scene.C;  ; file  histobrowser.C;  Demonstrates how to use EVE as a histogram browser. ;  ; file  jetcone.C;  Demonstrates usage of TEveJetCone class. ;  ; file  lineset.C;  Demonstrates usage of class TEveStraightLineSet. ;  ; file  lineset.C;  Demonstrates usage of class REveStraightLineSet. ;  ; file  MultiView.C;  Multi-view (3d, rphi, rhoz) service class using EVE Window Manager. ;  ; file  overlay_palette.C;  ; file  overlay_test.C;  Demonstrates usage of TEveBox class. ;  ; file  pack.C;  Demonstrates usage of class TGPack. ;  ; file  paramlist.C;  Demonstrates usage of simple configuration via TEveParamList class. ;  ; file  pointset.C;  Demonstrates usage of class TEvePointSet. ;  ; file  projection.C;  Demonstrates usage of automatic 2D projections - class TEveProjectionManager. ;  ; file  projection_prescale.C;  Demonstrates usage pre-scaling for automatic 2D projections. ;  ; file  pythia_display.C;  Demo showing H -> ZZ -> 4 mu generated by Pythia. ;  ; file  quadset.C;  Demonstates usage of 2D digit class TEveQuadSet. ;  ; file  run_alice_esd.C;  Complex example showing ALICE ESD track visualization. ;  ; file  run_alice_esd_split.C;  Complex example showing ALICE ESD visualization in several views. ;  ; file  selection_sigs.C;  Test signals from TEveSelection class. ;  ; file  show_extract.C;  Helper script for showing of extracted / simplified geometries. ;  ; file  SplitGLView.C;  Helper classes for the alice_esd_split.C demo. ;  ; file  text.C;  Demonstrates usage of class TEveText - 2D & 3D text in GL. ;  ; file  track.C;  Demonstrates usage of TEve",MatchSource.WIKI,doc/master/group__tutorial__eve.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__eve.html
Usability,simpl,simplified,". ROOT: Event display ROOT7 tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Event display ROOT7 tutorialsTutorials. ; Examples showing the ""Event display classes"" usage with ROOT7. . Files; file  collection_proxies.C;  This is an example of visualization of containers with REveDataCollection and REveDataProxyBuilders. ;  ; file  csgdemo.C;  Combinatorial Solid Geometry example. ;  ; file  event_demo.C;  This example display geometry, tracks and hits in web browser. ;  ; file  jets.C;  This example display only points in web browser. ;  ; file  lego.C;  This example display only points in web browser. ;  ; file  points.C;  This example display only points in web browser. ;  ; file  projection_prescale.C;  This example display projection prescale. ;  ; file  show_extract.C;  Helper script for showing of extracted / simplified geometries. ;  ; file  texts.C;  This example display only texts in web browser. ;  ; file  tracks.C;  This example display only points in web browser. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__eve7.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__eve7.html
Integrability,interface,interface,. ROOT: Fast Fourier Transforms tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Fast Fourier Transforms tutorialsTutorials. ; Example showing the Fast Fourier Transforms interface in ROOT. . Files; file  FFT.C;   This tutorial illustrates the Fast Fourier Transforms interface in ROOT. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__fft.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fft.html
Availability,error,error,". ROOT: Fit Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Fit TutorialsTutorials. ; These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. . Files; file  combinedFit.C;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ; file  combinedFit.py;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ; file  ConfidenceIntervals.C;   Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ; file  ErrorIntegral.C;   Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit. ;  ; file  exampleFit3D.C;   example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  ; file  fit1.C;   Simple fitting example (1-d histogram with an interpreted function) ;  ; file  fit2.C;   Fitting a 2-D histogram This tutorial illustrates : ;  ; file  fit2a.C;   Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  ; file  fit2d.C;   Example illustrating how to fit a 2-d histogram of type y=f(x) ;  ; file  fit2dHist.C;   Example to fit two histograms at the same time via the Fitter class. ;  ; file  fitCircle.C;   Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  ; file  fitcont.C;   Example illustrating how to draw the n-sigma contour of a Minuit fit. ;  ; file  fitConvolution.C;   Tutorial for convolution of two functions ;  ; file  fitConvolution.py;   Tutorial for convolution of two functions ;  ; file  fitExclude.C;   Illustrates how to fit excluding points in a given range. ;  ; file  fithist.C;   Example of fit where the model is histogram + function ;  ; file  fitLinear.C;   Example of ",MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
Deployability,configurat,configurations,"e will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit. ;  ; file  fitslicesy.C;   Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads. ;  ; file  FittingDemo.C;   Example for fitting signal/background. ;  ; file  graph2dfit.C;   Fitting a TGraph2D ;  ; file  Ifit.C;   Example of a program to fit non-equidistant data points ;  ; file  langaus.C;   Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  ; file  line3Dfit.C;   Fitting of a TGraph2D with a 3D straight line ;  ; file  minuit2FitBench.C;   Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits. ;  ; file  minuit2FitBench2D.C;   Minuit2 fit 2D benchmark. ;  ; file  minuit2GausFit.C;   Perform fits with different configurations using Minuit2 ;  ; file  multidimfit.C;   Multi-Dimensional Parametrisation and Fitting ;  ; file  multifit.C;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  multifit.py;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  myfit.C;   Get in memory an histogram from a root file and fit a user defined function. ;  ; file  NumericalMinimization.C;   Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers. ;  ; file  qa2.C;   Test generation of random numbers distributed according to a function defined by the user ;  ; file  TestBinomial.C;   Perform a fit to a set of data with binomia",MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
Integrability,depend,depends,". ROOT: Fit Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Fit TutorialsTutorials. ; These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. . Files; file  combinedFit.C;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ; file  combinedFit.py;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ; file  ConfidenceIntervals.C;   Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ; file  ErrorIntegral.C;   Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit. ;  ; file  exampleFit3D.C;   example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  ; file  fit1.C;   Simple fitting example (1-d histogram with an interpreted function) ;  ; file  fit2.C;   Fitting a 2-D histogram This tutorial illustrates : ;  ; file  fit2a.C;   Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  ; file  fit2d.C;   Example illustrating how to fit a 2-d histogram of type y=f(x) ;  ; file  fit2dHist.C;   Example to fit two histograms at the same time via the Fitter class. ;  ; file  fitCircle.C;   Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  ; file  fitcont.C;   Example illustrating how to draw the n-sigma contour of a Minuit fit. ;  ; file  fitConvolution.C;   Tutorial for convolution of two functions ;  ; file  fitConvolution.py;   Tutorial for convolution of two functions ;  ; file  fitExclude.C;   Illustrates how to fit excluding points in a given range. ;  ; file  fithist.C;   Example of fit where the model is histogram + function ;  ; file  fitLinear.C;   Example of ",MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
Modifiability,variab,variables,". ROOT: Fit Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Fit TutorialsTutorials. ; These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. . Files; file  combinedFit.C;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ; file  combinedFit.py;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ; file  ConfidenceIntervals.C;   Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ; file  ErrorIntegral.C;   Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit. ;  ; file  exampleFit3D.C;   example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  ; file  fit1.C;   Simple fitting example (1-d histogram with an interpreted function) ;  ; file  fit2.C;   Fitting a 2-D histogram This tutorial illustrates : ;  ; file  fit2a.C;   Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  ; file  fit2d.C;   Example illustrating how to fit a 2-d histogram of type y=f(x) ;  ; file  fit2dHist.C;   Example to fit two histograms at the same time via the Fitter class. ;  ; file  fitCircle.C;   Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  ; file  fitcont.C;   Example illustrating how to draw the n-sigma contour of a Minuit fit. ;  ; file  fitConvolution.C;   Tutorial for convolution of two functions ;  ; file  fitConvolution.py;   Tutorial for convolution of two functions ;  ; file  fitExclude.C;   Illustrates how to fit excluding points in a given range. ;  ; file  fithist.C;   Example of fit where the model is histogram + function ;  ; file  fitLinear.C;   Example of ",MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
Performance,perform,performance,"py;   Tutorial for normalized sum of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  ; file  fitpanel_playback.C;  This file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit. ;  ; file  fitslicesy.C;   Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads. ;  ; file  FittingDemo.C;   Example for fitting signal/background. ;  ; file  graph2dfit.C;   Fitting a TGraph2D ;  ; file  Ifit.C;   Example of a program to fit non-equidistant data points ;  ; file  langaus.C;   Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  ; file  line3Dfit.C;   Fitting of a TGraph2D with a 3D straight line ;  ; file  minuit2FitBench.C;   Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits. ;  ; file  minuit2FitBench2D.C;   Minuit2 fit 2D benchmark. ;  ; file  minuit2GausFit.C;   Perform fits with different configurations using Minuit2 ;  ; file  multidimfit.C;   Multi-Dimensional Parametrisation and Fitting ;  ; file  multifit.C;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  multifit.py;   Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ;  ; file  myfit.C;   Get in memory an histogram from a root file and fit a user defined function. ;  ; file  NumericalMinimization.C;   Example on how to use the new Minimizer class in ROOT Show usage with all the possible minimizers. ;  ; file",MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
Safety,predict,predictor,". ROOT: Fit Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Fit TutorialsTutorials. ; These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. . Files; file  combinedFit.C;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ; file  combinedFit.py;   Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ; file  ConfidenceIntervals.C;   Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ; file  ErrorIntegral.C;   Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit. ;  ; file  exampleFit3D.C;   example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  ; file  fit1.C;   Simple fitting example (1-d histogram with an interpreted function) ;  ; file  fit2.C;   Fitting a 2-D histogram This tutorial illustrates : ;  ; file  fit2a.C;   Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  ; file  fit2d.C;   Example illustrating how to fit a 2-d histogram of type y=f(x) ;  ; file  fit2dHist.C;   Example to fit two histograms at the same time via the Fitter class. ;  ; file  fitCircle.C;   Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  ; file  fitcont.C;   Example illustrating how to draw the n-sigma contour of a Minuit fit. ;  ; file  fitConvolution.C;   Tutorial for convolution of two functions ;  ; file  fitConvolution.py;   Tutorial for convolution of two functions ;  ; file  fitExclude.C;   Illustrates how to fit excluding points in a given range. ;  ; file  fithist.C;   Example of fit where the model is histogram + function ;  ; file  fitLinear.C;   Example of ",MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
Testability,test,test,"e of fitting with a linear function, using TLinearFitter This example is for a TGraphErrors, but it can also be used when fitting a histogram, a TGraph2D or a TMultiGraph ;  ; file  fitLinear2.C;   Fit a 5d hyperplane by n points, using the linear fitter directly ;  ; file  fitLinearRobust.C;   This tutorial shows how the least trimmed squares regression, included in the TLinearFitter class, can be used for fitting in cases when the data contains outliers. ;  ; file  fitMultiGraph.C;   fitting a parabola to a multigraph of 3 partly overlapping graphs with different errors ;  ; file  fitNormSum.C;   Tutorial for normalized sum of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  ; file  fitNormSum.py;   Tutorial for normalized sum of two functions Here: a background exponential and a crystalball function Parameters can be set: ;  ; file  fitpanel_playback.C;  This file will test all the transient frames (aka Dialog windows) displayed in the fitpanel, as the rest of the functionality is tried automatically with the UnitTest.C unit. ;  ; file  fitslicesy.C;   Illustrates how to use the TH1::FitSlicesY function It uses the TH2F histogram generated in macro hsimple.C It invokes FitSlicesY and draw the fitted ""mean"" and ""sigma"" in 2 sepate pads. ;  ; file  FittingDemo.C;   Example for fitting signal/background. ;  ; file  graph2dfit.C;   Fitting a TGraph2D ;  ; file  Ifit.C;   Example of a program to fit non-equidistant data points ;  ; file  langaus.C;   Convoluted Landau and Gaussian Fitting Function (using ROOT's Landau and Gauss functions) ;  ; file  line3Dfit.C;   Fitting of a TGraph2D with a 3D straight line ;  ; file  minuit2FitBench.C;   Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits. ;  ; file  minuit2FitBench2D.C;   Minuit2 fit 2D benchmark. ;  ; file  minuit2GausFit.C;   Perform fits with different configurations using Minuit2 ;  ; file  multidimfit.C;   Multi-Dimensional Parametr",MatchSource.WIKI,doc/master/group__tutorial__fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html
Integrability,interface,interface,. ROOT: FITS files interface tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; FITS files interface tutorialsTutorials. ; Examples showing the FITS file interface. . Files; file  FITS_tutorial1.C;   Open a FITS file and retrieve the first plane of the image array as a TImage object ;  ; file  FITS_tutorial2.C;   Open a FITS file whose primary array represents a spectrum (flux vs wavelength). ;  ; file  FITS_tutorial3.C;   Open a FITS file and retrieve the first plane of the image array as a TImage object. ;  ; file  FITS_tutorial4.C;   Open a FITS file whose primary array represents a spectrum (flux vs wavelength). ;  ; file  FITS_tutorial5.C;   Open a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  ; file  FITS_tutorial6.C;   Open a FITS file whose primary array represents a spectrum table (flux vs wavelength) and dump its columns ;  ; file  FITS_tutorial7.C;   Open a FITS file that contains a catalog of astronomical objects and dump some of its columns ;  ; file  FITS_tutorial8.C;   Open a FITS file with columns containing variable-length arrays. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__FITS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FITS.html
Modifiability,variab,variable-length,. ROOT: FITS files interface tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; FITS files interface tutorialsTutorials. ; Examples showing the FITS file interface. . Files; file  FITS_tutorial1.C;   Open a FITS file and retrieve the first plane of the image array as a TImage object ;  ; file  FITS_tutorial2.C;   Open a FITS file whose primary array represents a spectrum (flux vs wavelength). ;  ; file  FITS_tutorial3.C;   Open a FITS file and retrieve the first plane of the image array as a TImage object. ;  ; file  FITS_tutorial4.C;   Open a FITS file whose primary array represents a spectrum (flux vs wavelength). ;  ; file  FITS_tutorial5.C;   Open a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  ; file  FITS_tutorial6.C;   Open a FITS file whose primary array represents a spectrum table (flux vs wavelength) and dump its columns ;  ; file  FITS_tutorial7.C;   Open a FITS file that contains a catalog of astronomical objects and dump some of its columns ;  ; file  FITS_tutorial8.C;   Open a FITS file with columns containing variable-length arrays. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__FITS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FITS.html
Availability,avail,available,"s, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM library, compile and execute macro foam_demo.C. A shared object foam_demo_C.so is created in the current directory. At the end of exploration phase FOAM object including distribution function will be written to disk.; foam_demopers.C; demonstrates persistency of FOAM classes. To run this macro type:; root [0] .x foam_demopers.C; Program reads the FOAM object from disk, checks its consistency and prints geometry of cells. Next starts the the generation. It can be interpreted directly by CLING because compiled TFDISTR class is already available in foam_demo_C.so library. . Files; file  foam_demo.C;   Demonstrate the TFoam class. ;  ; file  foam_demopers.C;   This simple macro demonstrates persistency of FOAM object. ;  ; file  foam_kanwa.C;   This program can be execute from the command line as folows: ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__FOAM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html
Deployability,integrat,integrator,". ROOT: FOAM tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; FOAM tutorialsTutorials. ; Examples showing how to use FOAM. . What is FOAM ?; FOAM is simplified version of multi-dimensional general purpose Monte Carlo event generator (integrator) with hyper-cubical ""foam of cells"". Certain features of full version of FOAM are omitted. mFOAM is intended as an easy to use tool for MC simulation/integration in few dimensions. It relies heavily on ROOT package, borrowing persistency of classes from ROOT. mFOAM can be easily used from the ROOT shell. For more difficult problems the full FOAM may be better. How to run application programs ?; The application program can be run in two modes: it can be simply interpreted by CLING or compiled. The first method is simpler but results in slower execution. The second method employs ACLiC - The Automatic Compiler of Libraries, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM",MatchSource.WIKI,doc/master/group__tutorial__FOAM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html
Integrability,integrat,integrator,". ROOT: FOAM tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; FOAM tutorialsTutorials. ; Examples showing how to use FOAM. . What is FOAM ?; FOAM is simplified version of multi-dimensional general purpose Monte Carlo event generator (integrator) with hyper-cubical ""foam of cells"". Certain features of full version of FOAM are omitted. mFOAM is intended as an easy to use tool for MC simulation/integration in few dimensions. It relies heavily on ROOT package, borrowing persistency of classes from ROOT. mFOAM can be easily used from the ROOT shell. For more difficult problems the full FOAM may be better. How to run application programs ?; The application program can be run in two modes: it can be simply interpreted by CLING or compiled. The first method is simpler but results in slower execution. The second method employs ACLiC - The Automatic Compiler of Libraries, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM",MatchSource.WIKI,doc/master/group__tutorial__FOAM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html
Modifiability,inherit,inheriting,"r. How to run application programs ?; The application program can be run in two modes: it can be simply interpreted by CLING or compiled. The first method is simpler but results in slower execution. The second method employs ACLiC - The Automatic Compiler of Libraries, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM library, compile and execute macro foam_demo.C. A shared object foam_demo_C.so is created in the current directory. At the end of exploration phase FOAM object including distribution function will be written to disk.; foam_demopers.C; demonstrates persistency of FOAM classes. To run this macro type:; root [0] .x foam_demopers.C; Program reads the FOAM object from disk, checks its consistency and prints geometry of cells. Next starts the the generation. It can be interpreted directly by CLING because compiled TFDISTR class is already available in foam_demo_C.so library. . Files; file  foam_demo.C;   Demonstrate the TFoam class. ;  ; file  foam_dem",MatchSource.WIKI,doc/master/group__tutorial__FOAM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html
Performance,load,load,"s, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM library, compile and execute macro foam_demo.C. A shared object foam_demo_C.so is created in the current directory. At the end of exploration phase FOAM object including distribution function will be written to disk.; foam_demopers.C; demonstrates persistency of FOAM classes. To run this macro type:; root [0] .x foam_demopers.C; Program reads the FOAM object from disk, checks its consistency and prints geometry of cells. Next starts the the generation. It can be interpreted directly by CLING because compiled TFDISTR class is already available in foam_demo_C.so library. . Files; file  foam_demo.C;   Demonstrate the TFoam class. ;  ; file  foam_demopers.C;   This simple macro demonstrates persistency of FOAM object. ;  ; file  foam_kanwa.C;   This program can be execute from the command line as folows: ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__FOAM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html
Usability,simpl,simplified,". ROOT: FOAM tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; FOAM tutorialsTutorials. ; Examples showing how to use FOAM. . What is FOAM ?; FOAM is simplified version of multi-dimensional general purpose Monte Carlo event generator (integrator) with hyper-cubical ""foam of cells"". Certain features of full version of FOAM are omitted. mFOAM is intended as an easy to use tool for MC simulation/integration in few dimensions. It relies heavily on ROOT package, borrowing persistency of classes from ROOT. mFOAM can be easily used from the ROOT shell. For more difficult problems the full FOAM may be better. How to run application programs ?; The application program can be run in two modes: it can be simply interpreted by CLING or compiled. The first method is simpler but results in slower execution. The second method employs ACLiC - The Automatic Compiler of Libraries, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM",MatchSource.WIKI,doc/master/group__tutorial__FOAM.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html
Modifiability,plugin,plugin,"utomatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  ; file  na49geomfile.C;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.C;  This macro generates with 2 views of the NA49 detector using the old obsolete geometry package. ;  ; file  parallel_world.C;  Misaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated. ;  ; file  RadioNuclides.C;  Macro that demonstrates usage of radioactive elements/materials/mixtures with TGeo package. ;  ; file  robot.C;  Drawing a famous Korean robot, TaekwonV, using ROOT geometry class. ;  ; file  rootgeom.C;  Definition of a simple geometry (the 4 ROOT characters) ;  ; file  runplugin.C;  Creates and runs a simple iterator plugin connected to TGeoPainter iterator. ;  ; file  shapes.C;  The old geometry shapes (see script geodemo.C) ;  ; file  shapesAnim.C;  Macro illustrating how to animate a geometry picture using a Timer. ;  ; file  south_gate.C;  Drawing a famous Korean gate, the South gate, called Namdeamoon in Korean, using ROOT geometry class. ;  ; file  station1.C;  Drawing a space station, using ROOT geometry class. ;  ; file  station2.C;  Drawing a space station (version 2), using ROOT geometry class. ;  ; file  tank.C;  Drawing a fine tank, using ROOT geometry class. ;  ; file  tessellatedNav.C;  Macro allowing to vizualize tessellations from Wavefront's .obj format. ;  ; file  testoptical.C;  Tests importing/exporting optical surfaces from GDML. ;  ; file  visualizeWavefrontObj.C;  Macro allowing to vizualize tessellations from Wavefront's .obj format. ;  ; file  xtruDraw.C;  Draw a ""representative"" TXTRU shape. ;  ; file  xtruSamples.C;  Draw a sample of TXTRU shapes some convex, concave (and ",MatchSource.WIKI,doc/master/group__tutorial__geom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__geom.html
Safety,detect,detector,". ROOT: Geometry tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Geometry tutorialsTutorials. ; Various ROOT geometry package examples. . Files; file  assembly.C;  Geometry detector assembly example. ;  ; file  building.C;  Drawing a building where Dept. ;  ; file  cheongwadae.C;  Drawing the Cheongwadae building which is the Presidential Residence of the Republic of Korea, using ROOT geometry class. ;  ; file  csgdemo.C;  Combinatorial Solid Geometry example. ;  ; file  geodemo.C;  GUI to draw the geometry shapes. ;  ; file  geomAlice.C;  Script drawing a detector geometry (here ALICE). ;  ; file  geomAlice_itsv.C;  Script drawing a detector geometry (here ITSV from Alice). ;  ; file  geomAtlas.C;  Script drawing a detector geometry (here ATLAS). ;  ; file  geomBrahms.C;  Script drawing a detector geometry (here BRAHMS). ;  ; file  geomD0.C;  Script drawing a detector geometry (here D0). ;  ; file  geometry.C;  Example of the old geometry package (now obsolete) ;  ; file  lego.C;  Drawing a figure, made of lego block, using ROOT geometry class. ;  ; file  mp3player.C;  Drawing a mp3 type music player, using ROOT geometry class. ;  ; file  na49.C;  This file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  ; file  na49geomfile.C;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.C;  This macro generates with 2 views of the NA49 detector using the old obsolete geometry package. ;  ; file  parallel_world.C;  Misaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated. ;  ; file  RadioNuclides.C;  Macro that demonstrates usage of radioactive elements/materials/mixtures w",MatchSource.WIKI,doc/master/group__tutorial__geom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__geom.html
Testability,test,testoptical,"use) This shows an example of the old geometry package (now obsolete) ;  ; file  na49geomfile.C;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.C;  This macro generates with 2 views of the NA49 detector using the old obsolete geometry package. ;  ; file  parallel_world.C;  Misaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated. ;  ; file  RadioNuclides.C;  Macro that demonstrates usage of radioactive elements/materials/mixtures with TGeo package. ;  ; file  robot.C;  Drawing a famous Korean robot, TaekwonV, using ROOT geometry class. ;  ; file  rootgeom.C;  Definition of a simple geometry (the 4 ROOT characters) ;  ; file  runplugin.C;  Creates and runs a simple iterator plugin connected to TGeoPainter iterator. ;  ; file  shapes.C;  The old geometry shapes (see script geodemo.C) ;  ; file  shapesAnim.C;  Macro illustrating how to animate a geometry picture using a Timer. ;  ; file  south_gate.C;  Drawing a famous Korean gate, the South gate, called Namdeamoon in Korean, using ROOT geometry class. ;  ; file  station1.C;  Drawing a space station, using ROOT geometry class. ;  ; file  station2.C;  Drawing a space station (version 2), using ROOT geometry class. ;  ; file  tank.C;  Drawing a fine tank, using ROOT geometry class. ;  ; file  tessellatedNav.C;  Macro allowing to vizualize tessellations from Wavefront's .obj format. ;  ; file  testoptical.C;  Tests importing/exporting optical surfaces from GDML. ;  ; file  visualizeWavefrontObj.C;  Macro allowing to vizualize tessellations from Wavefront's .obj format. ;  ; file  xtruDraw.C;  Draw a ""representative"" TXTRU shape. ;  ; file  xtruSamples.C;  Draw a sample of TXTRU shapes some convex, concave (and possibly malformed) ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__geom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__geom.html
Usability,simpl,simple,"er, using ROOT geometry class. ;  ; file  na49.C;  This file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  ; file  na49geomfile.C;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.C;  This macro generates with 2 views of the NA49 detector using the old obsolete geometry package. ;  ; file  parallel_world.C;  Misaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated. ;  ; file  RadioNuclides.C;  Macro that demonstrates usage of radioactive elements/materials/mixtures with TGeo package. ;  ; file  robot.C;  Drawing a famous Korean robot, TaekwonV, using ROOT geometry class. ;  ; file  rootgeom.C;  Definition of a simple geometry (the 4 ROOT characters) ;  ; file  runplugin.C;  Creates and runs a simple iterator plugin connected to TGeoPainter iterator. ;  ; file  shapes.C;  The old geometry shapes (see script geodemo.C) ;  ; file  shapesAnim.C;  Macro illustrating how to animate a geometry picture using a Timer. ;  ; file  south_gate.C;  Drawing a famous Korean gate, the South gate, called Namdeamoon in Korean, using ROOT geometry class. ;  ; file  station1.C;  Drawing a space station, using ROOT geometry class. ;  ; file  station2.C;  Drawing a space station (version 2), using ROOT geometry class. ;  ; file  tank.C;  Drawing a fine tank, using ROOT geometry class. ;  ; file  tessellatedNav.C;  Macro allowing to vizualize tessellations from Wavefront's .obj format. ;  ; file  testoptical.C;  Tests importing/exporting optical surfaces from GDML. ;  ; file  visualizeWavefrontObj.C;  Macro allowing to vizualize tessellations from Wavefront's .obj format. ;  ; file  xtruDraw.C;  Draw a ""representative"" TXTRU shape. ;  ",MatchSource.WIKI,doc/master/group__tutorial__geom.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__geom.html
Availability,avail,available," ;  ; file  inside.C;   Test the IsInside methods of various graphics primitives. ;  ; file  latex.C;   This macro draws 5 Latex-style formula in a canvas and prints the canvas as a Postscript file. ;  ; file  latex2.C;   This macro draws 4 Latex-style formula in a canvas and prints the canvas as a Postscript file. ;  ; file  latex3.C;   Example illustrating a TPaveText with Latex inside. ;  ; file  latex4.C;   Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files. ;  ; file  latex5.C;   This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files. ;  ; file  mandelbrot.C;   Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set. ;  ; file  markerwarning.C;   This script illustrates the danger of using asymmetric symbols. ;  ; file  mass_spectrum.C;   This macro makes use of some basic graphics primitives such as line, arrow and text. ;  ; file  palettes.C;   This macro draws all the high definition palettes available in ROOT. ;  ; file  pavetext.C;   Draw a pave text. ;  ; file  perceptualcolormap.C;   A “Perceptual” colormap explicitly identifies a fixed value in the data ;  ; file  piechart.C;   Pie chart example. ;  ; file  polytest1.C;   This macro is testing the ""compacting"" algorithm in TPadPainter. ;  ; file  polytest2.C;   This macro is testing the ""compacting"" algorithm in TPadPainter. ;  ; file  pstable.C;   Display all possible types of ROOT/Postscript characters. ;  ; file  psview.C;   An example how to display PS, EPS, PDF files in canvas. ;  ; file  quarks.C;   Example illustrating divided pads and Latex. ;  ; file  save_batch.C;  This macro demonstrates batch image mode of web canvas When enabled - several images converted into JSON before all together provided to headless browser to produce image files. ;  ; file  saveall.C;   Creates many canvases and save as images or pdf. ;  ; file  schroedinger_hydrogen.C;   Plot the Amplitude of a Hydrogen Atom. ;  ;",MatchSource.WIKI,doc/master/group__tutorial__graphics.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphics.html
Performance,perform,perform,"ces the flowchart of TFormula::Compile ;  ; file  crown.C;   Draw crowns. ;  ; file  diamond.C;   Draw a diamond. ;  ; file  earth.C;   This tutorial illustrates the special contour options. ;  ; file  ellipse.C;   Draw ellipses. ;  ; file  eval.C;   This macro produces the flowchart of TFormula::Eval. ;  ; file  event.C;   Illustrate some basic primitives. ;  ; file  feynman.C;   Draw Feynman diagrams. ;  ; file  first.C;   Show some basic primitives. ;  ; file  formula1.C;   Display interpreted functions. ;  ; file  framework.C;   An example with basic graphics illustrating the Object Oriented User Interface of ROOT. ;  ; file  gaxis.C;   Simple example illustrating how to draw TGaxis objects in various formats. ;  ; file  gaxis2.C;   Example illustrating how to draw TGaxis with labels defined by a function. ;  ; file  gaxis3.C;   Example illustrating how to modify individual labels of a TGaxis. ;  ; file  graph_edit_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive graphical editing operations. ;  ; file  gtime.C;  Example of a graph of data moving in time. ;  ; file  inside.C;   Test the IsInside methods of various graphics primitives. ;  ; file  latex.C;   This macro draws 5 Latex-style formula in a canvas and prints the canvas as a Postscript file. ;  ; file  latex2.C;   This macro draws 4 Latex-style formula in a canvas and prints the canvas as a Postscript file. ;  ; file  latex3.C;   Example illustrating a TPaveText with Latex inside. ;  ; file  latex4.C;   Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files. ;  ; file  latex5.C;   This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files. ;  ; file  mandelbrot.C;   Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set. ;  ; file  markerwarning.C;   This script illustrates the danger of using asymmetric symbols. ;  ; file  mass_spectrum.C;   This macro makes us",MatchSource.WIKI,doc/master/group__tutorial__graphics.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphics.html
Security,access,accessiblecolorschemes,. ROOT: Graphics tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Graphics tutorialsTutorials. ; Various examples showing the basic ROOT graphics. . Files; file  accessiblecolorschemes.C;   Choosing an appropriate color scheme is essential for making results easy to understand and interpret. ;  ; file  analyze.C;   This macro produces the flowchart of TFormula::Analyze. ;  ; file  anim.C;  Macro illustrating how to animate a picture using a Timer. ;  ; file  archi.C;   This macro displays the ROOT architecture. ;  ; file  arrows.C;   Draw arrows. ;  ; file  AtlasExample.C;   Show how ATLAS Style looks like. ;  ; file  basic3d.C;   Show 3-D polylines and markers. ;  ; file  canvas.C;   Example of primitives in a canvas. ;  ; file  canvas2.C;   Example of canvas partitioning. ;  ; file  compile.C;   This macro produces the flowchart of TFormula::Compile ;  ; file  crown.C;   Draw crowns. ;  ; file  diamond.C;   Draw a diamond. ;  ; file  earth.C;   This tutorial illustrates the special contour options. ;  ; file  ellipse.C;   Draw ellipses. ;  ; file  eval.C;   This macro produces the flowchart of TFormula::Eval. ;  ; file  event.C;   Illustrate some basic primitives. ;  ; file  feynman.C;   Draw Feynman diagrams. ;  ; file  first.C;   Show some basic primitives. ;  ; file  formula1.C;   Display interpreted functions. ;  ; file  framework.C;   An example with basic graphics illustrating the Object Oriented User Interface of ROOT. ;  ; file  gaxis.C;   Simple example illustrating how to draw TGaxis objects in various formats. ;  ; file  gaxis2.C;   Example illustrating how to draw TGaxis with labels defined by a function. ;  ; file  gaxis3.C;   Example illustrating how to modify individual labels of a TGaxis. ;  ; file  graph_edit_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive graphical editing operations. ;  ; file  gtime.C;  Example of a graph of data moving in time. ;,MatchSource.WIKI,doc/master/group__tutorial__graphics.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphics.html
Testability,test,testing," canvas as a Postscript file. ;  ; file  latex3.C;   Example illustrating a TPaveText with Latex inside. ;  ; file  latex4.C;   Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files. ;  ; file  latex5.C;   This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files. ;  ; file  mandelbrot.C;   Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set. ;  ; file  markerwarning.C;   This script illustrates the danger of using asymmetric symbols. ;  ; file  mass_spectrum.C;   This macro makes use of some basic graphics primitives such as line, arrow and text. ;  ; file  palettes.C;   This macro draws all the high definition palettes available in ROOT. ;  ; file  pavetext.C;   Draw a pave text. ;  ; file  perceptualcolormap.C;   A “Perceptual” colormap explicitly identifies a fixed value in the data ;  ; file  piechart.C;   Pie chart example. ;  ; file  polytest1.C;   This macro is testing the ""compacting"" algorithm in TPadPainter. ;  ; file  polytest2.C;   This macro is testing the ""compacting"" algorithm in TPadPainter. ;  ; file  pstable.C;   Display all possible types of ROOT/Postscript characters. ;  ; file  psview.C;   An example how to display PS, EPS, PDF files in canvas. ;  ; file  quarks.C;   Example illustrating divided pads and Latex. ;  ; file  save_batch.C;  This macro demonstrates batch image mode of web canvas When enabled - several images converted into JSON before all together provided to headless browser to produce image files. ;  ; file  saveall.C;   Creates many canvases and save as images or pdf. ;  ; file  schroedinger_hydrogen.C;   Plot the Amplitude of a Hydrogen Atom. ;  ; file  tmathtext.C;  This macro draws various formula in a canvas. ;  ; file  tmathtext2.C;   This macro draw all possible symbols provided by TMathtext. ;  ; file  tornado.C;   Show 3-d polymarker. ;  ; file  transparency.C;   This macro demonstrates the use of color transparency. ;  ;",MatchSource.WIKI,doc/master/group__tutorial__graphics.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphics.html
Availability,error,error,". ROOT: Graphs tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Graphs tutorialsTutorials. ; Examples showing the ""graphs classes"" usage. . Files; file  annotation3d.C;   This example show how to put some annotation on a 3D plot using 3D polylines. ;  ; file  approx.C;   Macro to test interpolation function Approx ;  ; file  bent.C;   Bent error bars ;  ; file  bent.py;   Bent error bars. ;  ; file  exclusiongraph.C;   Draw three graphs with an exclusion zone. ;  ; file  exclusiongraph2.C;   Draw several graphs with an exclusion zones. ;  ; file  gerrors.C;   Draw a graph with error bars ;  ; file  gerrors2.C;   Draw two graphs with error bars ;  ; file  gmultierrors.C;   Draw a graph with multiple y errors ;  ; file  graph.C;   Draw a simple graph. ;  ; file  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ; file  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ; file  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  graphpolar.C;   Create and draw a polar graph. ;  ; file  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ; file  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ; file  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ; file  graphShade.C;   Show how to shade an area between two graphs ;  ; file  graphstruct.C;   Draw a simple graph structure. ;  ; file  graphtext.C;   Draw a graph with text attached to each point. ;  ; file  gtime.C;   Example of TGraphTime. ;  ; file  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ; file  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  hlGraph2.",MatchSource.WIKI,doc/master/group__tutorial__graphs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphs.html
Testability,test,test,". ROOT: Graphs tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Graphs tutorialsTutorials. ; Examples showing the ""graphs classes"" usage. . Files; file  annotation3d.C;   This example show how to put some annotation on a 3D plot using 3D polylines. ;  ; file  approx.C;   Macro to test interpolation function Approx ;  ; file  bent.C;   Bent error bars ;  ; file  bent.py;   Bent error bars. ;  ; file  exclusiongraph.C;   Draw three graphs with an exclusion zone. ;  ; file  exclusiongraph2.C;   Draw several graphs with an exclusion zones. ;  ; file  gerrors.C;   Draw a graph with error bars ;  ; file  gerrors2.C;   Draw two graphs with error bars ;  ; file  gmultierrors.C;   Draw a graph with multiple y errors ;  ; file  graph.C;   Draw a simple graph. ;  ; file  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ; file  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ; file  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  graphpolar.C;   Create and draw a polar graph. ;  ; file  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ; file  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ; file  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ; file  graphShade.C;   Show how to shade an area between two graphs ;  ; file  graphstruct.C;   Draw a simple graph structure. ;  ; file  graphtext.C;   Draw a graph with text attached to each point. ;  ; file  gtime.C;   Example of TGraphTime. ;  ; file  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ; file  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  hlGraph2.",MatchSource.WIKI,doc/master/group__tutorial__graphs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphs.html
Usability,simpl,simple,". ROOT: Graphs tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Graphs tutorialsTutorials. ; Examples showing the ""graphs classes"" usage. . Files; file  annotation3d.C;   This example show how to put some annotation on a 3D plot using 3D polylines. ;  ; file  approx.C;   Macro to test interpolation function Approx ;  ; file  bent.C;   Bent error bars ;  ; file  bent.py;   Bent error bars. ;  ; file  exclusiongraph.C;   Draw three graphs with an exclusion zone. ;  ; file  exclusiongraph2.C;   Draw several graphs with an exclusion zones. ;  ; file  gerrors.C;   Draw a graph with error bars ;  ; file  gerrors2.C;   Draw two graphs with error bars ;  ; file  gmultierrors.C;   Draw a graph with multiple y errors ;  ; file  graph.C;   Draw a simple graph. ;  ; file  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ; file  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ; file  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  graphpolar.C;   Create and draw a polar graph. ;  ; file  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ; file  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ; file  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ; file  graphShade.C;   Show how to shade an area between two graphs ;  ; file  graphstruct.C;   Draw a simple graph structure. ;  ; file  graphtext.C;   Draw a graph with text attached to each point. ;  ; file  gtime.C;   Example of TGraphTime. ;  ; file  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ; file  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  hlGraph2.",MatchSource.WIKI,doc/master/group__tutorial__graphs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__graphs.html
Deployability,update,update,"native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism. ;  ; file  guitest_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI features. ;  ; file  ntupleTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  numberEntry.C;  This macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry. ;  ; file  simpleTableTest.C;  This TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface. ;  ; file  Slider3Demo.C;  Simple macro showing capabilities of triple slider. ;  ; file  splitbuttonTest.C;  A simple example that shows the usage of a TGSplitButton. ;  ; file  splitterHorizontal.C;  This macro gives an example of how to create a horizontal splitter. ;  ; file  splitterVertical.C;  This macro gives an example of how to create a vertical splitter. ;  ; file  staffTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  statusBar.C;  This macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window. ;  ; file  textEntries.C;  This macro gives an example of how to set/change",MatchSource.WIKI,doc/master/group__tutorial__gui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html
Performance,perform,perform,"u.C;  Example showing how to customize a context menu for a class. ;  ; file  drag_and_drop.C;  This tutorial illustrates how to use drag and drop within ROOT. ;  ; file  exec3.C;  Example of using signal/slot in TCanvas/TPad to get feedback about processed events. ;  ; file  exec_macro.C;  This utility macro executes the macro ""macro"" given as first argument and save a capture in a png file. ;  ; file  games.C;  This macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT. ;  ; file  gtreeTableTest.C;  This TableTest class is a simple example of how to use a TGTreeTable. ;  ; file  guilabels.C;  This macro gives an example of how to create different kind of labels and the possibility to enable/disable them. ;  ; file  guitest.C;  Test program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism. ;  ; file  guitest_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI features. ;  ; file  ntupleTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  numberEntry.C;  This macro gives an example of how to create a number entry and how to update a label according to the changed value of this number entry. ;  ; file  simpleTableTest.C;  This TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own T",MatchSource.WIKI,doc/master/group__tutorial__gui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html
Testability,test,test,"PUMeter.C;  Simple macro showing capabilities of the TGSpeedo widget. ;  ; file  customContextMenu.C;  Example showing how to add a function to the class context menu. ;  ; file  customTH1Fmenu.C;  Example showing how to customize a context menu for a class. ;  ; file  drag_and_drop.C;  This tutorial illustrates how to use drag and drop within ROOT. ;  ; file  exec3.C;  Example of using signal/slot in TCanvas/TPad to get feedback about processed events. ;  ; file  exec_macro.C;  This utility macro executes the macro ""macro"" given as first argument and save a capture in a png file. ;  ; file  games.C;  This macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT. ;  ; file  gtreeTableTest.C;  This TableTest class is a simple example of how to use a TGTreeTable. ;  ; file  guilabels.C;  This macro gives an example of how to create different kind of labels and the possibility to enable/disable them. ;  ; file  guitest.C;  Test program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism. ;  ; file  guitest_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI features. ;  ; file  ntupleTableTest.C;  This TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface. ;  ; file  numberEntry.C;  This macro gives an example of how to create a number entry and how to update a l",MatchSource.WIKI,doc/master/group__tutorial__gui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html
Usability,simpl,simple,". ROOT: GUI tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; GUI tutorialsTutorials. ; Example code which illustrates how to use the ROOT GUI. . Files; file  buttonChangelabel.C;  This macro gives an example for changing text button labels anytime the Start or Pause buttons are clicked. ;  ; file  buttongroupState.C;  A simple example that shows the enabled and disabled state of a button group with radio and check buttons. ;  ; file  buttonsLayout.C;  This macro gives an example of different buttons' layout. ;  ; file  buttonTest.C;  This macro gives an example of how to set/change text button attributes. ;  ; file  calendar.C;  This macro gives an example of how to use html widget to display tabular data. ;  ; file  CPUMeter.C;  Simple macro showing capabilities of the TGSpeedo widget. ;  ; file  customContextMenu.C;  Example showing how to add a function to the class context menu. ;  ; file  customTH1Fmenu.C;  Example showing how to customize a context menu for a class. ;  ; file  drag_and_drop.C;  This tutorial illustrates how to use drag and drop within ROOT. ;  ; file  exec3.C;  Example of using signal/slot in TCanvas/TPad to get feedback about processed events. ;  ; file  exec_macro.C;  This utility macro executes the macro ""macro"" given as first argument and save a capture in a png file. ;  ; file  games.C;  This macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT. ;  ; file  gtreeTableTest.C;  This TableTest class is a simple example of how to use a TGTreeTable. ;  ; file  guilabels.C;  This macro gives an example of how to create different kind of labels and the possibility to enable/disable them. ;  ; file  guitest.C;  Test program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism. ;  ; file  guitest_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive GU",MatchSource.WIKI,doc/master/group__tutorial__gui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html
Availability,fault,faulty,"ist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ; file  statsEditing.C;   Edit statistics box. ;  ; file  testSmooth.C;   Histogram smoothing. ;  ; file  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ; file  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ; file  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ; file  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ; file  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ; file  thstackcolorscheme.C;   This example demonstrates how to use the accessible color schemes with THStack. ;  ; file  thstackpalettecolor.C;   Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  tprofile2polyRealistic.C;   Different charges depending on region ;  ; file  tprofile2polyRealisticModuleError.C;   Simulate faulty detector panel w.r.t. ;  ; file  transpad.C;   Example of a canvas showing two histograms with different scales. ;  ; file  twoscales.C;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  twoscales.py;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  xyplot.C;   Example showing how to produce a plot with an orthogonal axis system centered at (0,0). ;  ; file  ZoomHistogram.C;   Changing the Range on the X-Axis of a Histogram ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html
Energy Efficiency,charge,charges,"ist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ; file  statsEditing.C;   Edit statistics box. ;  ; file  testSmooth.C;   Histogram smoothing. ;  ; file  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ; file  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ; file  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ; file  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ; file  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ; file  thstackcolorscheme.C;   This example demonstrates how to use the accessible color schemes with THStack. ;  ; file  thstackpalettecolor.C;   Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  tprofile2polyRealistic.C;   Different charges depending on region ;  ; file  tprofile2polyRealisticModuleError.C;   Simulate faulty detector panel w.r.t. ;  ; file  transpad.C;   Example of a canvas showing two histograms with different scales. ;  ; file  twoscales.C;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  twoscales.py;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  xyplot.C;   Example showing how to produce a plot with an orthogonal axis system centered at (0,0). ;  ; file  ZoomHistogram.C;   Changing the Range on the X-Axis of a Histogram ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html
Integrability,depend,depending,"ist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ; file  statsEditing.C;   Edit statistics box. ;  ; file  testSmooth.C;   Histogram smoothing. ;  ; file  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ; file  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ; file  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ; file  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ; file  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ; file  thstackcolorscheme.C;   This example demonstrates how to use the accessible color schemes with THStack. ;  ; file  thstackpalettecolor.C;   Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  tprofile2polyRealistic.C;   Different charges depending on region ;  ; file  tprofile2polyRealisticModuleError.C;   Simulate faulty detector panel w.r.t. ;  ; file  transpad.C;   Example of a canvas showing two histograms with different scales. ;  ; file  twoscales.C;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  twoscales.py;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  xyplot.C;   Example showing how to produce a plot with an orthogonal axis system centered at (0,0). ;  ; file  ZoomHistogram.C;   Changing the Range on the X-Axis of a Histogram ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html
Modifiability,variab,variable,"hich shows how you can get the graph of the lower plot and set the y axis range for it. ;  ; file  ratioplot4.C;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ; file  ratioplot4.py;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ; file  ratioplot5.C;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ; file  ratioplot5.py;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ; file  ratioplot6.C;   Example showing a fit residual plot, where the separation margin has been set to 0. ;  ; file  ratioplot6.py;   Example showing a fit residual plot, where the separation margin has been set to 0. ;  ; file  ratioplotOld.C;  Example displaying two histograms and their ratio. ;  ; file  rebin.C;   Rebin a variable bin-width histogram. ;  ; file  reverseaxis.C;   Example showing an histogram with reverse axis. ;  ; file  sparsehist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ; file  statsEditing.C;   Edit statistics box. ;  ; file  testSmooth.C;   Histogram smoothing. ;  ; file  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ; file  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ; file  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ; file  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ; file  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ; file",MatchSource.WIKI,doc/master/group__tutorial__hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html
Performance,perform,performance,"ified by a vector of floats. ;  ; file  ratioplot4.py;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ; file  ratioplot5.C;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ; file  ratioplot5.py;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ; file  ratioplot6.C;   Example showing a fit residual plot, where the separation margin has been set to 0. ;  ; file  ratioplot6.py;   Example showing a fit residual plot, where the separation margin has been set to 0. ;  ; file  ratioplotOld.C;  Example displaying two histograms and their ratio. ;  ; file  rebin.C;   Rebin a variable bin-width histogram. ;  ; file  reverseaxis.C;   Example showing an histogram with reverse axis. ;  ; file  sparsehist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ; file  statsEditing.C;   Edit statistics box. ;  ; file  testSmooth.C;   Histogram smoothing. ;  ; file  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ; file  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ; file  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ; file  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ; file  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ; file  thstackcolorscheme.C;   This example demonstrates how to use the accessible color schemes with THStack. ;  ; file  thstackpalettecolor.C;   Palette coloring for histograms' sta",MatchSource.WIKI,doc/master/group__tutorial__hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html
Safety,detect,detector,"ist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ; file  statsEditing.C;   Edit statistics box. ;  ; file  testSmooth.C;   Histogram smoothing. ;  ; file  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ; file  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ; file  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ; file  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ; file  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ; file  thstackcolorscheme.C;   This example demonstrates how to use the accessible color schemes with THStack. ;  ; file  thstackpalettecolor.C;   Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  tprofile2polyRealistic.C;   Different charges depending on region ;  ; file  tprofile2polyRealisticModuleError.C;   Simulate faulty detector panel w.r.t. ;  ; file  transpad.C;   Example of a canvas showing two histograms with different scales. ;  ; file  twoscales.C;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  twoscales.py;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  xyplot.C;   Example showing how to produce a plot with an orthogonal axis system centered at (0,0). ;  ; file  ZoomHistogram.C;   Changing the Range on the X-Axis of a Histogram ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html
Security,access,accessible,"ng an histogram with reverse axis. ;  ; file  sparsehist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ; file  statsEditing.C;   Edit statistics box. ;  ; file  testSmooth.C;   Histogram smoothing. ;  ; file  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ; file  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ; file  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ; file  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ; file  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ; file  thstackcolorscheme.C;   This example demonstrates how to use the accessible color schemes with THStack. ;  ; file  thstackpalettecolor.C;   Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  tprofile2polyRealistic.C;   Different charges depending on region ;  ; file  tprofile2polyRealisticModuleError.C;   Simulate faulty detector panel w.r.t. ;  ; file  transpad.C;   Example of a canvas showing two histograms with different scales. ;  ; file  twoscales.C;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  twoscales.py;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  xyplot.C;   Example showing how to produce a plot with an orthogonal axis system centered at (0,0). ;  ; file  ZoomHistogram.C;   Changing the Range on the X-Axis of a Histogram ;  . ROOT master - Reference Guide Generated on Tue Nov ",MatchSource.WIKI,doc/master/group__tutorial__hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html
Testability,log,logscales,"  hksimple.C;   Illustrates the advantages of a TH1K histogram ;  ; file  hlabels1.C;   1-D histograms with alphanumeric labels ;  ; file  hlabels2.C;   2-D histograms with alphanumeric labels. ;  ; file  hlHisto1.C;  This tutorial demonstrates how the highlight mechanism can be used on an histogram. ;  ; file  hlHisto2.C;  This tutorial demonstrates how the highlight mechanism can be used on an histogram. ;  ; file  hlHisto3.C;  This tutorial demonstrates how the highlight mechanism can be used on a ntuple. ;  ; file  hlHisto4.C;  This tutorial demonstrates how the highlight mechanism can be used on an histogram. ;  ; file  hstack.C;   Example of stacked histograms: class THStack. ;  ; file  hstackpads.C;   Drawing stack histograms on subpads. ;  ; file  hsum.C;   Histograms filled and drawn in a loop. ;  ; file  hsumTimer.C;   Demo of Timers. ;  ; file  legendautoplaced.C;   The legend can be placed automatically in the current pad in an empty space found at painting time. ;  ; file  logscales.C;   Draw parametric functions with log scales. ;  ; file  movepalette.C;   When an histogram is drawn with the option COLZ, a palette is automatically drawn vertically on the right side of the plot. ;  ; file  multicolor.C;   Use a THStack to show a 2-D hist with cells with different colors. ;  ; file  NormalizeHistogram.C;   Normalizing a Histogram ;  ; file  ratioplot1.C;   Example creating a simple ratio plot of two histograms using the pois division option. ;  ; file  ratioplot1.py;   Example creating a simple ratio plot of two histograms using the pois division option. ;  ; file  ratioplot2.C;   Example of a fit residual plot. ;  ; file  ratioplot2.py;   Example of a fit residual plot. ;  ; file  ratioplot3.C;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ; file  ratioplot3.py;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ; file  ratioplot4.C;   Example that",MatchSource.WIKI,doc/master/group__tutorial__hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html
Usability,simpl,simple,";  This tutorial demonstrates how the highlight mechanism can be used on a ntuple. ;  ; file  hlHisto4.C;  This tutorial demonstrates how the highlight mechanism can be used on an histogram. ;  ; file  hstack.C;   Example of stacked histograms: class THStack. ;  ; file  hstackpads.C;   Drawing stack histograms on subpads. ;  ; file  hsum.C;   Histograms filled and drawn in a loop. ;  ; file  hsumTimer.C;   Demo of Timers. ;  ; file  legendautoplaced.C;   The legend can be placed automatically in the current pad in an empty space found at painting time. ;  ; file  logscales.C;   Draw parametric functions with log scales. ;  ; file  movepalette.C;   When an histogram is drawn with the option COLZ, a palette is automatically drawn vertically on the right side of the plot. ;  ; file  multicolor.C;   Use a THStack to show a 2-D hist with cells with different colors. ;  ; file  NormalizeHistogram.C;   Normalizing a Histogram ;  ; file  ratioplot1.C;   Example creating a simple ratio plot of two histograms using the pois division option. ;  ; file  ratioplot1.py;   Example creating a simple ratio plot of two histograms using the pois division option. ;  ; file  ratioplot2.C;   Example of a fit residual plot. ;  ; file  ratioplot2.py;   Example of a fit residual plot. ;  ; file  ratioplot3.C;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ; file  ratioplot3.py;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ; file  ratioplot4.C;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ; file  ratioplot4.py;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ; file  ratioplot5.C;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ; file  ratioplot5.py;   Example that shows how you can set the ",MatchSource.WIKI,doc/master/group__tutorial__hist.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html
Deployability,update,update,. ROOT: HTTP tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; HTTP tutorialsTutorials. ; Examples showing the HTTP interface. . Files; file  custom.C;  This program creates and fills one and two dimensional histogram Macro used to demonstrate usage of custom HTML page in custom.htm One can use plain JavaScript to assign different actions with HTML buttons. ;  ; file  histfitserver.C;  This program demonstrates simultaneous update of histogram and fitted function. ;  ; file  httpaccess.C;  This program demonstrates access control to the THttpServer with digest methods. ;  ; file  httpcontrol.C;  This program demonstrates simple application control via THttpServer Two histogram are filled within endless loop. ;  ; file  httpgeom.C;  This program creates trivial geometry with several tracks and configure online monitoring of geometry via THttpServer Geometry regularly changed by the program and correspondent changes immediately seen in the browser. ;  ; file  httpserver.C;  This program creates : ;  ; file  httptextlog.C;  This macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser. ;  ; file  ws.C;  This program demonstrate WebSocket usage with THttpServer Custom ws.htm page is loaded and regularly sends messages to server. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__http.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__http.html
Energy Efficiency,monitor,monitoring,. ROOT: HTTP tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; HTTP tutorialsTutorials. ; Examples showing the HTTP interface. . Files; file  custom.C;  This program creates and fills one and two dimensional histogram Macro used to demonstrate usage of custom HTML page in custom.htm One can use plain JavaScript to assign different actions with HTML buttons. ;  ; file  histfitserver.C;  This program demonstrates simultaneous update of histogram and fitted function. ;  ; file  httpaccess.C;  This program demonstrates access control to the THttpServer with digest methods. ;  ; file  httpcontrol.C;  This program demonstrates simple application control via THttpServer Two histogram are filled within endless loop. ;  ; file  httpgeom.C;  This program creates trivial geometry with several tracks and configure online monitoring of geometry via THttpServer Geometry regularly changed by the program and correspondent changes immediately seen in the browser. ;  ; file  httpserver.C;  This program creates : ;  ; file  httptextlog.C;  This macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser. ;  ; file  ws.C;  This program demonstrate WebSocket usage with THttpServer Custom ws.htm page is loaded and regularly sends messages to server. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__http.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__http.html
Integrability,interface,interface,. ROOT: HTTP tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; HTTP tutorialsTutorials. ; Examples showing the HTTP interface. . Files; file  custom.C;  This program creates and fills one and two dimensional histogram Macro used to demonstrate usage of custom HTML page in custom.htm One can use plain JavaScript to assign different actions with HTML buttons. ;  ; file  histfitserver.C;  This program demonstrates simultaneous update of histogram and fitted function. ;  ; file  httpaccess.C;  This program demonstrates access control to the THttpServer with digest methods. ;  ; file  httpcontrol.C;  This program demonstrates simple application control via THttpServer Two histogram are filled within endless loop. ;  ; file  httpgeom.C;  This program creates trivial geometry with several tracks and configure online monitoring of geometry via THttpServer Geometry regularly changed by the program and correspondent changes immediately seen in the browser. ;  ; file  httpserver.C;  This program creates : ;  ; file  httptextlog.C;  This macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser. ;  ; file  ws.C;  This program demonstrate WebSocket usage with THttpServer Custom ws.htm page is loaded and regularly sends messages to server. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__http.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__http.html
Modifiability,config,configure,. ROOT: HTTP tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; HTTP tutorialsTutorials. ; Examples showing the HTTP interface. . Files; file  custom.C;  This program creates and fills one and two dimensional histogram Macro used to demonstrate usage of custom HTML page in custom.htm One can use plain JavaScript to assign different actions with HTML buttons. ;  ; file  histfitserver.C;  This program demonstrates simultaneous update of histogram and fitted function. ;  ; file  httpaccess.C;  This program demonstrates access control to the THttpServer with digest methods. ;  ; file  httpcontrol.C;  This program demonstrates simple application control via THttpServer Two histogram are filled within endless loop. ;  ; file  httpgeom.C;  This program creates trivial geometry with several tracks and configure online monitoring of geometry via THttpServer Geometry regularly changed by the program and correspondent changes immediately seen in the browser. ;  ; file  httpserver.C;  This program creates : ;  ; file  httptextlog.C;  This macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser. ;  ; file  ws.C;  This program demonstrate WebSocket usage with THttpServer Custom ws.htm page is loaded and regularly sends messages to server. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__http.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__http.html
Performance,load,loaded,. ROOT: HTTP tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; HTTP tutorialsTutorials. ; Examples showing the HTTP interface. . Files; file  custom.C;  This program creates and fills one and two dimensional histogram Macro used to demonstrate usage of custom HTML page in custom.htm One can use plain JavaScript to assign different actions with HTML buttons. ;  ; file  histfitserver.C;  This program demonstrates simultaneous update of histogram and fitted function. ;  ; file  httpaccess.C;  This program demonstrates access control to the THttpServer with digest methods. ;  ; file  httpcontrol.C;  This program demonstrates simple application control via THttpServer Two histogram are filled within endless loop. ;  ; file  httpgeom.C;  This program creates trivial geometry with several tracks and configure online monitoring of geometry via THttpServer Geometry regularly changed by the program and correspondent changes immediately seen in the browser. ;  ; file  httpserver.C;  This program creates : ;  ; file  httptextlog.C;  This macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser. ;  ; file  ws.C;  This program demonstrate WebSocket usage with THttpServer Custom ws.htm page is loaded and regularly sends messages to server. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__http.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__http.html
Security,access,access,. ROOT: HTTP tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; HTTP tutorialsTutorials. ; Examples showing the HTTP interface. . Files; file  custom.C;  This program creates and fills one and two dimensional histogram Macro used to demonstrate usage of custom HTML page in custom.htm One can use plain JavaScript to assign different actions with HTML buttons. ;  ; file  histfitserver.C;  This program demonstrates simultaneous update of histogram and fitted function. ;  ; file  httpaccess.C;  This program demonstrates access control to the THttpServer with digest methods. ;  ; file  httpcontrol.C;  This program demonstrates simple application control via THttpServer Two histogram are filled within endless loop. ;  ; file  httpgeom.C;  This program creates trivial geometry with several tracks and configure online monitoring of geometry via THttpServer Geometry regularly changed by the program and correspondent changes immediately seen in the browser. ;  ; file  httpserver.C;  This program creates : ;  ; file  httptextlog.C;  This macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser. ;  ; file  ws.C;  This program demonstrate WebSocket usage with THttpServer Custom ws.htm page is loaded and regularly sends messages to server. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__http.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__http.html
Usability,simpl,simple,. ROOT: HTTP tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; HTTP tutorialsTutorials. ; Examples showing the HTTP interface. . Files; file  custom.C;  This program creates and fills one and two dimensional histogram Macro used to demonstrate usage of custom HTML page in custom.htm One can use plain JavaScript to assign different actions with HTML buttons. ;  ; file  histfitserver.C;  This program demonstrates simultaneous update of histogram and fitted function. ;  ; file  httpaccess.C;  This program demonstrates access control to the THttpServer with digest methods. ;  ; file  httpcontrol.C;  This program demonstrates simple application control via THttpServer Two histogram are filled within endless loop. ;  ; file  httpgeom.C;  This program creates trivial geometry with several tracks and configure online monitoring of geometry via THttpServer Geometry regularly changed by the program and correspondent changes immediately seen in the browser. ;  ; file  httpserver.C;  This program creates : ;  ; file  httptextlog.C;  This macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser. ;  ; file  ws.C;  This program demonstrate WebSocket usage with THttpServer Custom ws.htm page is loaded and regularly sends messages to server. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__http.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__http.html
Security,access,access,". ROOT: Image tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Image tutorialsTutorials. ; Examples showing the TImage class usage. . Files; file  galaxy_image.C;   Importing an image and manipulating it. ;  ; file  hist2image.C;   Create an image from a 2-D histogram and manipulate it. ;  ; file  hsumanim.C;   This script is a slightly modified version of hsum.C. ;  ; file  image2hist.C;   Create a 2-D histogram from an image. ;  ; file  img2pad.C;   Display image in canvas and pad. ;  ; file  imgconv.C;   Open rose512.jpg and save it in the following formats: .png, .gif, .xpm and tiff. ;  ; file  pad2png.C;   Create a canvas and save as png. ;  ; file  rose_image.C;   Display image in a new canvas and pad. ;  ; file  trans_graph.C;   Demonstrates how to access and manipulate ARGB pixel values of an image +... ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__image.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__image.html
Testability,test,testMergeCont,. ROOT: IO tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; IO tutorialsTutorials. ; These tutorials illustrate some of the capabilities of the ROOT IO subsystem. . Files; file  copyFiles.C;   Example of script showing how to copy all objects (including directories) from a source file. ;  ; file  dirs.C;   This macro illustrates how to create a hierarchy of directories in a Root file. ;  ; file  double32.C;   Tutorial illustrating use and precision of the Double32_t data type You should run this tutorial with ACLIC: a dictionary will be automatically created. ;  ; file  fildir.C;   This macro displays the ROOT Directory data structure ;  ; file  file.C;   This macro displays the physical ROOT file structure ;  ; file  float16.C;   Tutorial illustrating use and precision of the Float16_t data type. ;  ; file  hadd.C;   Macro to add histogram files This macro is kept for didactical purposes only: use instead the executable $ROOTSYS/bin/hadd ! ;  ; file  importCode.C;   Example of script showing how to create a ROOT file with subdirectories. ;  ; file  loopdir.C;   Example script to loop over all the objects of a ROOT file directory and print in Postscript all the TH1 derived objects. ;  ; file  loopdir11.C;   Example script to loop over all the objects of a ROOT file directory and print in Postscript all the TH1 derived objects. ;  ; file  mergeSelective.C;   Merge only part of the content of a set of files. ;  ; file  readCode.C;   Example of script showing how to navigate in a ROOT file with sub-directories and read the objects in each sub-directory. ;  ; file  testMergeCont.C;   Macro demonstrating the merging of containers. ;  ; file  testTMPIFile.C;  This macro shows the usage of TMPIFile to simulate event reconstruction and merging them in parallel. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__io.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__io.html
Integrability,interface,interfaces,". ROOT: Legacy tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Legacy tutorialsTutorials. ; Legacy Tutorials. ; Some of ROOT's tutorials demonstrate interfaces that are not recommended anymore, because ROOT or C++ itself now offer superior ones. These have been moved here ""for the record"". . Modules;  Containers tutorials;  Examples showing the ""containers' classes"" usage.. ;  ;  Multi Layer Perceptron tutorials;  Examples showing the Multi Layer Perceptron classes. ;  ;  Regexp tutorials;  Examples for ROOT's regular expressions. ;  ;  Thread tutorials;  Thread examples. ;  . Files; file  benchmarks.C;  This macro run several tests and produces an benchmark report. ;  ; file  geant3tasks.C;  This script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects. ;  ; file  htmlex.C;  This file demonstrates how THtml can document sources. ;  ; file  MyTasks.cxx;  A set of classes deriving from TTask. ;  ; file  ProofNtuple.C;  Selector to fill a simple ntuple. ;  ; file  ProofNtuple.h;  Selector to fill a simple ntuple. ;  ; file  ProofPythia.C;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  ProofPythia.h;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  rootalias.C;  Defines aliases: ;  ; file  rootenv.C;  Produce a picture of the ROOT environment. ;  ; file  rootmarks.C;  Prints a summary of all ROOT benchmarks (must be run before). ;  ; file  tasks.C;  Example of TTasks. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__legacy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__legacy.html
Testability,benchmark,benchmarks,". ROOT: Legacy tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Legacy tutorialsTutorials. ; Legacy Tutorials. ; Some of ROOT's tutorials demonstrate interfaces that are not recommended anymore, because ROOT or C++ itself now offer superior ones. These have been moved here ""for the record"". . Modules;  Containers tutorials;  Examples showing the ""containers' classes"" usage.. ;  ;  Multi Layer Perceptron tutorials;  Examples showing the Multi Layer Perceptron classes. ;  ;  Regexp tutorials;  Examples for ROOT's regular expressions. ;  ;  Thread tutorials;  Thread examples. ;  . Files; file  benchmarks.C;  This macro run several tests and produces an benchmark report. ;  ; file  geant3tasks.C;  This script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects. ;  ; file  htmlex.C;  This file demonstrates how THtml can document sources. ;  ; file  MyTasks.cxx;  A set of classes deriving from TTask. ;  ; file  ProofNtuple.C;  Selector to fill a simple ntuple. ;  ; file  ProofNtuple.h;  Selector to fill a simple ntuple. ;  ; file  ProofPythia.C;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  ProofPythia.h;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  rootalias.C;  Defines aliases: ;  ; file  rootenv.C;  Produce a picture of the ROOT environment. ;  ; file  rootmarks.C;  Prints a summary of all ROOT benchmarks (must be run before). ;  ; file  tasks.C;  Example of TTasks. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__legacy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__legacy.html
Usability,simpl,simple,". ROOT: Legacy tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Legacy tutorialsTutorials. ; Legacy Tutorials. ; Some of ROOT's tutorials demonstrate interfaces that are not recommended anymore, because ROOT or C++ itself now offer superior ones. These have been moved here ""for the record"". . Modules;  Containers tutorials;  Examples showing the ""containers' classes"" usage.. ;  ;  Multi Layer Perceptron tutorials;  Examples showing the Multi Layer Perceptron classes. ;  ;  Regexp tutorials;  Examples for ROOT's regular expressions. ;  ;  Thread tutorials;  Thread examples. ;  . Files; file  benchmarks.C;  This macro run several tests and produces an benchmark report. ;  ; file  geant3tasks.C;  This script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects. ;  ; file  htmlex.C;  This file demonstrates how THtml can document sources. ;  ; file  MyTasks.cxx;  A set of classes deriving from TTask. ;  ; file  ProofNtuple.C;  Selector to fill a simple ntuple. ;  ; file  ProofNtuple.h;  Selector to fill a simple ntuple. ;  ; file  ProofPythia.C;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  ProofPythia.h;  Selector to generate Monte Carlo events with Pythia8. ;  ; file  rootalias.C;  Defines aliases: ;  ; file  rootenv.C;  Produce a picture of the ROOT environment. ;  ; file  rootmarks.C;  Prints a summary of all ROOT benchmarks (must be run before). ;  ; file  tasks.C;  Example of TTasks. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__legacy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__legacy.html
Availability,avail,available,". ROOT: Math tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Math tutorialsTutorials. ; Examples showing the Math classes. . Files; file  Bessel.C;   Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  ; file  Bessel.py;   Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  ; file  binomial.C;   tutorial illustrating the use of TMath::Binomial can be run with: ;  ; file  BreitWigner.C;   Tutorial illustrating how to create a plot comparing a Breit Wigner to a Relativistic Breit Wigner ;  ; file  ChebyshevPol.C;   Example of Chebyshev polynomials using new TFormula pre-defined definitions of chebyshev polynomials ;  ; file  chi2test.C;   Example to use chi2 test for comparing two histograms One unweighted histogram is compared with a weighted histogram. ;  ; file  CrystalBall.C;   Example of CrystalBall Function and its distribution (pdf and cdf) ;  ; file  exampleFunction.py;   Example of using Python functions and input to numerical algorithm using the ROOT Functor class ;  ; file  exampleFunctor.C;   Tutorial illustrating how creating a TF1 class using functor or class member functions ;  ; file  exampleMultiRoot.C;   Example of using multiroot finder based on GSL algorithm. ;  ; file  exampleTKDE.C;   Example of using the TKDE class (kernel density estimator) ;  ; file  FeldmanCousins.C;   Example macro of using the TFeldmanCousins class in root. ;  ; file  GammaFun.C;   Example showing the usage of the major special math functions (gamma, beta, erf) in ROOT To execute the macro type in: ;  ; file  goftest.C;   GoFTest tutorial macro ;  ; file  hlquantiles.C;  Demo for quantiles (with highlight mode) ;  ; file  kdTreeBinning.C;   kdTreeBinning tutorial: bin the data in cells of equal content using a kd-tree ;  ; file  Legendre.C;   Example of first few Legendre Polynomials ;  ; file  Legendre.py;   Example of first few Legendr",MatchSource.WIKI,doc/master/group__tutorial__math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html
Deployability,integrat,integration,"ome major probability density functions in ROOT. ;  ; file  mathcoreStatFunc.py;   Example macro showing some major probability density functions in ROOT. ;  ; file  mathcoreVectorCollection.C;   Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree. ;  ; file  mathcoreVectorFloatIO.C;   Macro illustrating I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CLING. ;  ; file  mathcoreVectorIO.C;   Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector. ;  ; file  mathGammaNormal.C;   Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  ; file  mathLaplace.C;   Test the TMath::LaplaceDist and TMath::LaplaceDistI functions ;  ; file  mathmoreIntegration.C;   Example on the usage of the adaptive 1D integration algorithm of MathMore it calculates the numerically cumulative integral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  ; file  mathmoreIntegrationMultidim.C;   Example on the usage of the multidimensional integration algorithm of MathMore Please refer to the web documentation for further details: https://root.cern/manual/math/#numerical-integration To execute the macro type the following: ;  ; file  mathStudent.C;   Tutorial illustrating the use of the Student and F distributions ;  ; file  multidimSampling.C;   Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  ; file  multivarGaus.C;   Tutorial illustrating the multivariate gaussian random number generation ;  ; file  normalDist.C;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  normalDist.py;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  permute.C;   Tutorial illustrat",MatchSource.WIKI,doc/master/group__tutorial__math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html
Energy Efficiency,adapt,adaptive,"ome major probability density functions in ROOT. ;  ; file  mathcoreStatFunc.py;   Example macro showing some major probability density functions in ROOT. ;  ; file  mathcoreVectorCollection.C;   Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree. ;  ; file  mathcoreVectorFloatIO.C;   Macro illustrating I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CLING. ;  ; file  mathcoreVectorIO.C;   Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector. ;  ; file  mathGammaNormal.C;   Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  ; file  mathLaplace.C;   Test the TMath::LaplaceDist and TMath::LaplaceDistI functions ;  ; file  mathmoreIntegration.C;   Example on the usage of the adaptive 1D integration algorithm of MathMore it calculates the numerically cumulative integral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  ; file  mathmoreIntegrationMultidim.C;   Example on the usage of the multidimensional integration algorithm of MathMore Please refer to the web documentation for further details: https://root.cern/manual/math/#numerical-integration To execute the macro type the following: ;  ; file  mathStudent.C;   Tutorial illustrating the use of the Student and F distributions ;  ; file  multidimSampling.C;   Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  ; file  multivarGaus.C;   Tutorial illustrating the multivariate gaussian random number generation ;  ; file  normalDist.C;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  normalDist.py;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  permute.C;   Tutorial illustrat",MatchSource.WIKI,doc/master/group__tutorial__math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html
Integrability,integrat,integration,"ome major probability density functions in ROOT. ;  ; file  mathcoreStatFunc.py;   Example macro showing some major probability density functions in ROOT. ;  ; file  mathcoreVectorCollection.C;   Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree. ;  ; file  mathcoreVectorFloatIO.C;   Macro illustrating I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CLING. ;  ; file  mathcoreVectorIO.C;   Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector. ;  ; file  mathGammaNormal.C;   Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  ; file  mathLaplace.C;   Test the TMath::LaplaceDist and TMath::LaplaceDistI functions ;  ; file  mathmoreIntegration.C;   Example on the usage of the adaptive 1D integration algorithm of MathMore it calculates the numerically cumulative integral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  ; file  mathmoreIntegrationMultidim.C;   Example on the usage of the multidimensional integration algorithm of MathMore Please refer to the web documentation for further details: https://root.cern/manual/math/#numerical-integration To execute the macro type the following: ;  ; file  mathStudent.C;   Tutorial illustrating the use of the Student and F distributions ;  ; file  multidimSampling.C;   Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  ; file  multivarGaus.C;   Tutorial illustrating the multivariate gaussian random number generation ;  ; file  normalDist.C;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  normalDist.py;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  permute.C;   Tutorial illustrat",MatchSource.WIKI,doc/master/group__tutorial__math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html
Modifiability,adapt,adaptive,"ome major probability density functions in ROOT. ;  ; file  mathcoreStatFunc.py;   Example macro showing some major probability density functions in ROOT. ;  ; file  mathcoreVectorCollection.C;   Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree. ;  ; file  mathcoreVectorFloatIO.C;   Macro illustrating I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CLING. ;  ; file  mathcoreVectorIO.C;   Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector. ;  ; file  mathGammaNormal.C;   Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  ; file  mathLaplace.C;   Test the TMath::LaplaceDist and TMath::LaplaceDistI functions ;  ; file  mathmoreIntegration.C;   Example on the usage of the adaptive 1D integration algorithm of MathMore it calculates the numerically cumulative integral of a distribution (like in this case the BreitWigner) to execute the macro type it (you need to compile with AClic) ;  ; file  mathmoreIntegrationMultidim.C;   Example on the usage of the multidimensional integration algorithm of MathMore Please refer to the web documentation for further details: https://root.cern/manual/math/#numerical-integration To execute the macro type the following: ;  ; file  mathStudent.C;   Tutorial illustrating the use of the Student and F distributions ;  ; file  multidimSampling.C;   Example of sampling a multi-dim distribution using the DistSampler class NOTE: This tutorial must be run with ACLIC ;  ; file  multivarGaus.C;   Tutorial illustrating the multivariate gaussian random number generation ;  ; file  normalDist.C;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  normalDist.py;   Tutorial illustrating the new statistical distributions functions (pdf, cdf and quantile) ;  ; file  permute.C;   Tutorial illustrat",MatchSource.WIKI,doc/master/group__tutorial__math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html
Testability,test,test,". ROOT: Math tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Math tutorialsTutorials. ; Examples showing the Math classes. . Files; file  Bessel.C;   Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  ; file  Bessel.py;   Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  ; file  binomial.C;   tutorial illustrating the use of TMath::Binomial can be run with: ;  ; file  BreitWigner.C;   Tutorial illustrating how to create a plot comparing a Breit Wigner to a Relativistic Breit Wigner ;  ; file  ChebyshevPol.C;   Example of Chebyshev polynomials using new TFormula pre-defined definitions of chebyshev polynomials ;  ; file  chi2test.C;   Example to use chi2 test for comparing two histograms One unweighted histogram is compared with a weighted histogram. ;  ; file  CrystalBall.C;   Example of CrystalBall Function and its distribution (pdf and cdf) ;  ; file  exampleFunction.py;   Example of using Python functions and input to numerical algorithm using the ROOT Functor class ;  ; file  exampleFunctor.C;   Tutorial illustrating how creating a TF1 class using functor or class member functions ;  ; file  exampleMultiRoot.C;   Example of using multiroot finder based on GSL algorithm. ;  ; file  exampleTKDE.C;   Example of using the TKDE class (kernel density estimator) ;  ; file  FeldmanCousins.C;   Example macro of using the TFeldmanCousins class in root. ;  ; file  GammaFun.C;   Example showing the usage of the major special math functions (gamma, beta, erf) in ROOT To execute the macro type in: ;  ; file  goftest.C;   GoFTest tutorial macro ;  ; file  hlquantiles.C;  Demo for quantiles (with highlight mode) ;  ; file  kdTreeBinning.C;   kdTreeBinning tutorial: bin the data in cells of equal content using a kd-tree ;  ; file  Legendre.C;   Example of first few Legendre Polynomials ;  ; file  Legendre.py;   Example of first few Legendr",MatchSource.WIKI,doc/master/group__tutorial__math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html
Performance,perform,perform,. ROOT: Matrix tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Matrix tutorialsTutorials. ; Examples showing how to use TMatrix. . Files; file  decomposeQR.C;   This tutorial shows how to decompose a matrix A in an orthogonal matrix Q and an upper triangular matrix R using QR Householder decomposition with the TDecompQRH class. ;  ; file  invertMatrix.C;   This macro shows several ways to invert a matrix . ;  ; file  solveLinear.C;   This macro shows several ways to perform a linear least-squares analysis . ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__matrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__matrix.html
Integrability,interface,interfaces,". ROOT: Multicore tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Multicore tutorialsTutorials. ; These examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing. . Files; file  imt001_parBranchProcessing.C;   Demonstrate how to activate and use the implicit parallelisation of TTree::GetEntry. ;  ; file  imt101_parTreeProcessing.C;   Illustrate the usage of the TTreeProcessorMT::Process method. ;  ; file  mp001_fillHistos.C;   Fill histograms in parallel and write them on file. ;  ; file  mp101_fillNtuples.C;   Fill n-tuples in distinct workers. ;  ; file  mp102_readNtuplesFillHistosAndFit.C;   Read n-tuples in distinct workers, fill histograms, merge them and fit. ;  ; file  mp103_processSelector.C;   Illustrate the usage of the multiproc TSelector interfaces with the h1 analysis example. ;  ; file  mp104_processH1.C;   Illustrate the usage of the multiproc to process the H1 analysis example. ;  ; file  mp105_processEntryList.C;   Illustrate the usage of the multiproc to process TEntryList with the H1 analysis example. ;  ; file  mp201_parallelHistoFill.C;   Parallel fill of a histogram This tutorial shows how a histogram can be filled in parallel with a multiprocess approach. ;  ; file  mp_H1_lambdas.C;   Lambdas used to check and fit the result of the H1 analysis. ;  ; file  mt001_fillHistos.C;   Fill histograms in parallel and write them on file. ;  ; file  mt101_fillNtuples.C;   Fill n-tuples in distinct workers. ;  ; file  mt102_readNtuplesFillHistosAndFit.C;   Read n-tuples in distinct workers, fill histograms, merge them and fit. ;  ; file  mt103_fillNtupleFromMultipleThreads.C;   Fill the same TNtuple from different threads. ;  ; file  mt201_parallelHistoFill.C;   Parallel fill of a histogram. ;  ; file  mt301_TTaskGroupSimple.C;   Shows how to run items of work asynchronously with a TTaskGroup. ;  ; file  mt304_fillHistos.C;   Fill hi",MatchSource.WIKI,doc/master/group__tutorial__multicore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__multicore.html
Safety,safe,safety,". ROOT: Multicore tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Multicore tutorialsTutorials. ; These examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing. . Files; file  imt001_parBranchProcessing.C;   Demonstrate how to activate and use the implicit parallelisation of TTree::GetEntry. ;  ; file  imt101_parTreeProcessing.C;   Illustrate the usage of the TTreeProcessorMT::Process method. ;  ; file  mp001_fillHistos.C;   Fill histograms in parallel and write them on file. ;  ; file  mp101_fillNtuples.C;   Fill n-tuples in distinct workers. ;  ; file  mp102_readNtuplesFillHistosAndFit.C;   Read n-tuples in distinct workers, fill histograms, merge them and fit. ;  ; file  mp103_processSelector.C;   Illustrate the usage of the multiproc TSelector interfaces with the h1 analysis example. ;  ; file  mp104_processH1.C;   Illustrate the usage of the multiproc to process the H1 analysis example. ;  ; file  mp105_processEntryList.C;   Illustrate the usage of the multiproc to process TEntryList with the H1 analysis example. ;  ; file  mp201_parallelHistoFill.C;   Parallel fill of a histogram This tutorial shows how a histogram can be filled in parallel with a multiprocess approach. ;  ; file  mp_H1_lambdas.C;   Lambdas used to check and fit the result of the H1 analysis. ;  ; file  mt001_fillHistos.C;   Fill histograms in parallel and write them on file. ;  ; file  mt101_fillNtuples.C;   Fill n-tuples in distinct workers. ;  ; file  mt102_readNtuplesFillHistosAndFit.C;   Read n-tuples in distinct workers, fill histograms, merge them and fit. ;  ; file  mt103_fillNtupleFromMultipleThreads.C;   Fill the same TNtuple from different threads. ;  ; file  mt201_parallelHistoFill.C;   Parallel fill of a histogram. ;  ; file  mt301_TTaskGroupSimple.C;   Shows how to run items of work asynchronously with a TTaskGroup. ;  ; file  mt304_fillHistos.C;   Fill hi",MatchSource.WIKI,doc/master/group__tutorial__multicore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__multicore.html
Availability,echo,echo,"rence Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html
Security,authenticat,authentication,". ROOT: Net tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 ",MatchSource.WIKI,doc/master/group__tutorial__net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html
Testability,test,test,". ROOT: Net tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 ",MatchSource.WIKI,doc/master/group__tutorial__net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html
Usability,simpl,simple,". ROOT: Net tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 ",MatchSource.WIKI,doc/master/group__tutorial__net.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html
Performance,multi-thread,multi-threaded,. ROOT: ROOT 7 ntuple tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; ROOT 7 ntuple tutorialsTutorials » ROOT 7 tutorials. ; Various examples showing the ROOT 7 ntuples. ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! . Files; file  ntpl001_staff.C;   Write and read tabular data with RNTuple. ;  ; file  ntpl002_vector.C;   Write and read STL vectors with RNTuple. ;  ; file  ntpl004_dimuon.C;   Mini-Analysis on CMS OpenData with RDataFrame. ;  ; file  ntpl005_introspection.C;   Write and read an RNTuple from a user-defined class. ;  ; file  ntpl006_friends.C;   Work with befriended RNTuples. ;  ; file  ntpl007_mtFill.C;   Example of multi-threaded writes using multiple REntry objects ;  ; file  ntpl008_import.C;   Example of converting data stored in a TTree into an RNTuple ;  ; file  ntpl009_parallelWriter.C;   Example of multi-threaded writes using RNTupleParallelWriter. ;  ; file  ntpl010_skim.C;   Example creating a derived RNTuple ;  ; file  ntpl011_global_temperatures.C;   This ROOT 7 example demonstrates how to use RNTuple in combination with ROOT 6 features like RDataframe and visualizations. ;  ; file  ntpl012_processor.C;   Demonstrate the RNTupleProcessor using multiple RNTuples ;  ; file  ntpl013_staged.C;   Example of staged cluster committing in multi-threaded writing using RNTupleParallelWriter. ;  ; file  ntpl014_framework.C;   ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__ntuple.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__ntuple.html
Testability,test,test,". ROOT: Proof tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Proof tutorialsTutorials. ; These examples aim to illustrate the usage of PROOF. . Modules;  ProcFileElements;  Class to hold information about the processed elements of a file. ;  ;  ProofAux;  Selector used for auxiliary actions in the PROOF tutorials. ;  ;  ProofEvent;  Selector for generic processing with Event. ;  ;  ProofEventProc;  Selector to process trees containing Event structures. ;  ;  ProofFriends;  Selector to process tree friends. ;  ;  ProofNtuple;  Selector to fill a simple ntuple. ;  ;  ProofPythia;  Selector to generate Monte Carlo events with Pythia8. ;  ;  ProofSimple;  Selector to fill a set of histograms. ;  ;  ProofSimpleFile;  Selector to fill a set of histograms and merging via file. ;  ;  ProofStdVec;  Selector for generic processing with stdlib collections. ;  ;  ProofTests;  Auxilliary selector used to test PROOF functionality. ;  . Files; file  EmptyInclude.h;  Empty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc . ;  ; file  finalizeProof.C;  Macro to finalize queries run with the macro tutorials/runProof . ;  ; file  getProof.C;  Attaches to a PROOF session, possibly at the indicated URL. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__proof.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__proof.html
Usability,simpl,simple,". ROOT: Proof tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Proof tutorialsTutorials. ; These examples aim to illustrate the usage of PROOF. . Modules;  ProcFileElements;  Class to hold information about the processed elements of a file. ;  ;  ProofAux;  Selector used for auxiliary actions in the PROOF tutorials. ;  ;  ProofEvent;  Selector for generic processing with Event. ;  ;  ProofEventProc;  Selector to process trees containing Event structures. ;  ;  ProofFriends;  Selector to process tree friends. ;  ;  ProofNtuple;  Selector to fill a simple ntuple. ;  ;  ProofPythia;  Selector to generate Monte Carlo events with Pythia8. ;  ;  ProofSimple;  Selector to fill a set of histograms. ;  ;  ProofSimpleFile;  Selector to fill a set of histograms and merging via file. ;  ;  ProofStdVec;  Selector for generic processing with stdlib collections. ;  ;  ProofTests;  Auxilliary selector used to test PROOF functionality. ;  . Files; file  EmptyInclude.h;  Empty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc . ;  ; file  finalizeProof.C;  Macro to finalize queries run with the macro tutorials/runProof . ;  ; file  getProof.C;  Attaches to a PROOF session, possibly at the indicated URL. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__proof.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__proof.html
Availability,error,error,". ROOT: PyRoot tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; PyRoot tutorialsTutorials. ; Selected examples illustrating how to use ROOT's Python interface: PyROOT. . Files; file  demo.py;  To run, do ""python <path-to>/demo.py"". ;  ; file  demoshelp.py;   Display demo help. ;  ; file  DynamicSlice.py;   Example of function called when a mouse event occurs in a pad. ;  ; file  fit1.py;   Fit example. ;  ; file  formula1.py;   TF1 example. ;  ; file  geometry.py;   Geometry ;  ; file  gerrors.py;   A Simple Graph with error bars ;  ; file  graph.py;   A Simple Graph Example ;  ; file  gui_ex.py;  A Simple GUI Example. ;  ; file  h1ReadAndDraw.py;   A Simple histogram drawing example ;  ; file  hsimple.py;   This program creates : ;  ; file  hsum.py;   Simple example illustrating how to use the C++ interpreter ;  ; file  mrt.py;   Build ROOT Ntuple from other source. ;  ; file  na49geomfile.py;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.py;  This macro generates two views of the NA49 detector. ;  ; file  na49visible.py;  Set visibility attributes for the NA49 geometry Set Shape attributes. ;  ; file  ntuple1.py;   Ntuple drawing example. ;  ; file  numberEntry.py;  Example frame with one box where the user can increase or decrease a number and the shown value will be updated accordingly. ;  ; file  parse_CSV_file_with_TTree_ReadStream.py;  This function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream. ;  ; file  pyroot001_arrayInterface.py;   This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data. ;  ; file  pyroot002_pythonizationDecorator.py;   This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ;  ; file  pyroot003_prettyPrinting.py;   This tutorial illustrates ",MatchSource.WIKI,doc/master/group__tutorial__pyroot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__pyroot.html
Deployability,update,updated,"ce.py;   Example of function called when a mouse event occurs in a pad. ;  ; file  fit1.py;   Fit example. ;  ; file  formula1.py;   TF1 example. ;  ; file  geometry.py;   Geometry ;  ; file  gerrors.py;   A Simple Graph with error bars ;  ; file  graph.py;   A Simple Graph Example ;  ; file  gui_ex.py;  A Simple GUI Example. ;  ; file  h1ReadAndDraw.py;   A Simple histogram drawing example ;  ; file  hsimple.py;   This program creates : ;  ; file  hsum.py;   Simple example illustrating how to use the C++ interpreter ;  ; file  mrt.py;   Build ROOT Ntuple from other source. ;  ; file  na49geomfile.py;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.py;  This macro generates two views of the NA49 detector. ;  ; file  na49visible.py;  Set visibility attributes for the NA49 geometry Set Shape attributes. ;  ; file  ntuple1.py;   Ntuple drawing example. ;  ; file  numberEntry.py;  Example frame with one box where the user can increase or decrease a number and the shown value will be updated accordingly. ;  ; file  parse_CSV_file_with_TTree_ReadStream.py;  This function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream. ;  ; file  pyroot001_arrayInterface.py;   This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data. ;  ; file  pyroot002_pythonizationDecorator.py;   This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ;  ; file  pyroot003_prettyPrinting.py;   This tutorial illustrates the pretty printing feature of PyROOT, which reveals the content of the object if a string representation is requested, e.g., by Python's print statement. ;  ; file  pyroot004_NumbaDeclare.py;   This tutorial illustrates how PyROOT supports declaring C++ callables from Python callables making them, for example, usable with RDataFrame. ;  ; file  py",MatchSource.WIKI,doc/master/group__tutorial__pyroot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__pyroot.html
Integrability,interface,interface,". ROOT: PyRoot tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; PyRoot tutorialsTutorials. ; Selected examples illustrating how to use ROOT's Python interface: PyROOT. . Files; file  demo.py;  To run, do ""python <path-to>/demo.py"". ;  ; file  demoshelp.py;   Display demo help. ;  ; file  DynamicSlice.py;   Example of function called when a mouse event occurs in a pad. ;  ; file  fit1.py;   Fit example. ;  ; file  formula1.py;   TF1 example. ;  ; file  geometry.py;   Geometry ;  ; file  gerrors.py;   A Simple Graph with error bars ;  ; file  graph.py;   A Simple Graph Example ;  ; file  gui_ex.py;  A Simple GUI Example. ;  ; file  h1ReadAndDraw.py;   A Simple histogram drawing example ;  ; file  hsimple.py;   This program creates : ;  ; file  hsum.py;   Simple example illustrating how to use the C++ interpreter ;  ; file  mrt.py;   Build ROOT Ntuple from other source. ;  ; file  na49geomfile.py;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.py;  This macro generates two views of the NA49 detector. ;  ; file  na49visible.py;  Set visibility attributes for the NA49 geometry Set Shape attributes. ;  ; file  ntuple1.py;   Ntuple drawing example. ;  ; file  numberEntry.py;  Example frame with one box where the user can increase or decrease a number and the shown value will be updated accordingly. ;  ; file  parse_CSV_file_with_TTree_ReadStream.py;  This function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream. ;  ; file  pyroot001_arrayInterface.py;   This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data. ;  ; file  pyroot002_pythonizationDecorator.py;   This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ;  ; file  pyroot003_prettyPrinting.py;   This tutorial illustrates ",MatchSource.WIKI,doc/master/group__tutorial__pyroot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__pyroot.html
Safety,detect,detector,"hing...; No Matches. Files ; PyRoot tutorialsTutorials. ; Selected examples illustrating how to use ROOT's Python interface: PyROOT. . Files; file  demo.py;  To run, do ""python <path-to>/demo.py"". ;  ; file  demoshelp.py;   Display demo help. ;  ; file  DynamicSlice.py;   Example of function called when a mouse event occurs in a pad. ;  ; file  fit1.py;   Fit example. ;  ; file  formula1.py;   TF1 example. ;  ; file  geometry.py;   Geometry ;  ; file  gerrors.py;   A Simple Graph with error bars ;  ; file  graph.py;   A Simple Graph Example ;  ; file  gui_ex.py;  A Simple GUI Example. ;  ; file  h1ReadAndDraw.py;   A Simple histogram drawing example ;  ; file  hsimple.py;   This program creates : ;  ; file  hsum.py;   Simple example illustrating how to use the C++ interpreter ;  ; file  mrt.py;   Build ROOT Ntuple from other source. ;  ; file  na49geomfile.py;  Before executing this macro, the file makegeometry.C must have been executed. ;  ; file  na49view.py;  This macro generates two views of the NA49 detector. ;  ; file  na49visible.py;  Set visibility attributes for the NA49 geometry Set Shape attributes. ;  ; file  ntuple1.py;   Ntuple drawing example. ;  ; file  numberEntry.py;  Example frame with one box where the user can increase or decrease a number and the shown value will be updated accordingly. ;  ; file  parse_CSV_file_with_TTree_ReadStream.py;  This function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream. ;  ; file  pyroot001_arrayInterface.py;   This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data. ;  ; file  pyroot002_pythonizationDecorator.py;   This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ;  ; file  pyroot003_prettyPrinting.py;   This tutorial illustrates the pretty printing feature of PyROOT, which reveals the content of the object if a st",MatchSource.WIKI,doc/master/group__tutorial__pyroot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__pyroot.html
Testability,log,log,"ble.py;  Set visibility attributes for the NA49 geometry Set Shape attributes. ;  ; file  ntuple1.py;   Ntuple drawing example. ;  ; file  numberEntry.py;  Example frame with one box where the user can increase or decrease a number and the shown value will be updated accordingly. ;  ; file  parse_CSV_file_with_TTree_ReadStream.py;  This function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream. ;  ; file  pyroot001_arrayInterface.py;   This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data. ;  ; file  pyroot002_pythonizationDecorator.py;   This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ;  ; file  pyroot003_prettyPrinting.py;   This tutorial illustrates the pretty printing feature of PyROOT, which reveals the content of the object if a string representation is requested, e.g., by Python's print statement. ;  ; file  pyroot004_NumbaDeclare.py;   This tutorial illustrates how PyROOT supports declaring C++ callables from Python callables making them, for example, usable with RDataFrame. ;  ; file  pyroot005_tfile_context_manager.py;   This tutorial demonstrates the usage of the TFile class as a Python context manager. ;  ; file  pyroot006_tcontext_context_manager.py;   This tutorial demonstrates the usage of the TContext class as a Python context manager. ;  ; file  ratioplot.py;   Display two histograms and their ratio. ;  ; file  shapes.py;   Draw the geometry using the x3d viewver. ;  ; file  staff.py;   example of macro to read data from an ascii file and create a root file with a Tree. ;  ; file  surfaces.py;   Surfaces example ;  ; file  tornado.py;  Tornado example. ;  ; file  zdemo.py;   This macro is an example of graphs in log scales with annotations. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__pyroot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__pyroot.html
Usability,usab,usable,"ble.py;  Set visibility attributes for the NA49 geometry Set Shape attributes. ;  ; file  ntuple1.py;   Ntuple drawing example. ;  ; file  numberEntry.py;  Example frame with one box where the user can increase or decrease a number and the shown value will be updated accordingly. ;  ; file  parse_CSV_file_with_TTree_ReadStream.py;  This function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream. ;  ; file  pyroot001_arrayInterface.py;   This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data. ;  ; file  pyroot002_pythonizationDecorator.py;   This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ;  ; file  pyroot003_prettyPrinting.py;   This tutorial illustrates the pretty printing feature of PyROOT, which reveals the content of the object if a string representation is requested, e.g., by Python's print statement. ;  ; file  pyroot004_NumbaDeclare.py;   This tutorial illustrates how PyROOT supports declaring C++ callables from Python callables making them, for example, usable with RDataFrame. ;  ; file  pyroot005_tfile_context_manager.py;   This tutorial demonstrates the usage of the TFile class as a Python context manager. ;  ; file  pyroot006_tcontext_context_manager.py;   This tutorial demonstrates the usage of the TContext class as a Python context manager. ;  ; file  ratioplot.py;   Display two histograms and their ratio. ;  ; file  shapes.py;   Draw the geometry using the x3d viewver. ;  ; file  staff.py;   example of macro to read data from an ascii file and create a root file with a Tree. ;  ; file  surfaces.py;   Surfaces example ;  ; file  tornado.py;  Tornado example. ;  ; file  zdemo.py;   This macro is an example of graphs in log scales with annotations. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__pyroot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__pyroot.html
Deployability,install,install,". ROOT: R tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; R tutorialsTutorials. ; Examples showing the R interface. . Files; file  DataFrame.C;   ;  ; file  example.C;   Simple example on how to use ROOT-R interface. ;  ; file  Function.C;   ;  ; file  Functor.C;   Example to create class Functor ;  ; file  GlobalMinimization.C;   Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example. ;  ; file  Integration.C;   Numerical integration using R passing the function from ROOT ;  ; file  Interpolation.C;   More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment. ;  ; file  Minimization.C;   Example based on http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html ;  ; file  SimpleFitting.C;  Create an exponential fitting The idea is to create a set of numbers x,y with the function x^3 and some noise from ROOT, fit the function to get the exponent (which must be near 3) and plot the points with noise, the known function and the fitted function. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__r.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__r.html
Integrability,interface,interface,". ROOT: R tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; R tutorialsTutorials. ; Examples showing the R interface. . Files; file  DataFrame.C;   ;  ; file  example.C;   Simple example on how to use ROOT-R interface. ;  ; file  Function.C;   ;  ; file  Functor.C;   Example to create class Functor ;  ; file  GlobalMinimization.C;   Example based in http://cran.r-project.org/web/packages/DEoptim/DEoptim.pdf Please install the R package DEoptim before run this example. ;  ; file  Integration.C;   Numerical integration using R passing the function from ROOT ;  ; file  Interpolation.C;   More Information for R interpolation in http://stat.ethz.ch/R-manual/R-patched/library/stats/html/approxfun.html NOTE: this example illustrates an interpolation with random points given from ROOT and procedures made in R's environment. ;  ; file  Minimization.C;   Example based on http://stat.ethz.ch/R-manual/R-devel/library/stats/html/optim.html ;  ; file  SimpleFitting.C;  Create an exponential fitting The idea is to create a set of numbers x,y with the function x^3 and some noise from ROOT, fit the function to get the exponent (which must be near 3) and plot the points with noise, the known function and the fitted function. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__r.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__r.html
Availability,avail,available,"convolution: convolution in cyclical angular observables theta ;  ; file  rf210_angularconv.py;   Convolution in cyclical angular observables theta, and construction of p.d.f in terms of transformed angular coordinates, e.g. ;  ; file  rf211_paramconv.C;   Addition and convolution: working with a pdf with a convolution operator in terms of a parameter ;  ; file  rf211_paramconv.py;   'ADDITION AND CONVOLUTION' RooFit tutorial macro #211 Working a with a p.d.f. ;  ; file  rf212_plottingInRanges_blinding.C;   Plot a PDF in disjunct ranges, and get normalisation right. ;  ; file  rf212_plottingInRanges_blinding.py;   Plot a PDF in disjunct ranges, and get normalisation right. ;  ; file  rf301_composition.C;   Multidimensional models: multi-dimensional pdfs through composition e.g. ;  ; file  rf301_composition.py;   Multidimensional models: multi-dimensional pdfs through composition, e.g. ;  ; file  rf302_utilfuncs.C;   Multidimensional models: utility functions classes available for use in tailoring of composite (multidimensional) pdfs ;  ; file  rf302_utilfuncs.py;   Multidimensional models: utility functions classes available for use in tailoring of composite (multidimensional) pdfs ;  ; file  rf303_conditional.C;   Multidimensional models: use of tailored pdf as conditional pdfs.s ;  ; file  rf303_conditional.py;   'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #303 Use of tailored p.d.f as conditional p.d.fs.s ;  ; file  rf304_uncorrprod.C;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf304_uncorrprod.py;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf305_condcorrprod.C;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf305_condcorrprod.py;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf306_condpereventerrors.C;   Multidimensional models: conditional pdf with per-event errors ;  ; file  rf306_condpere",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
Deployability,integrat,integration," to RooPlots and decorating with arrows, etc... ;  ; file  rf107_plotstyles.C;   Basic functionality: various plotting styles of data, functions in a RooPlot ;  ; file  rf107_plotstyles.py;   Basic functionality: demonstration of various plotting styles of data, functions in a RooPlot ;  ; file  rf108_plotbinning.C;   Basic functionality: plotting unbinned data with alternate and variable binnings ;  ; file  rf108_plotbinning.py;   Basic functionality: plotting unbinned data with alternate and variable binnings ;  ; file  rf109_chi2residpull.C;   Basic functionality: Calculating chi^2 from histograms and curves in RooPlots, making histogram of residual and pull distributions ;  ; file  rf109_chi2residpull.py;   'BASIC FUNCTIONALITY' RooFit tutorial macro #109 Calculating chi^2 from histograms and curves in ROOT.RooPlots, making histogram of residual and pull distributions ;  ; file  rf110_normintegration.C;   Basic functionality: normalization and integration of pdfs, construction of cumulative distribution monodimensional functions ;  ; file  rf110_normintegration.py;   Basic functionality: examples on normalization and integration of pdfs, construction of cumulative distribution functions from monodimensional pdfs ;  ; file  rf111_derivatives.C;   Basic functionality: numerical 1st,2nd and 3rd order derivatives w.r.t. ;  ; file  rf111_derivatives.py;   Basic functionality: numerical 1st, and 3rd order derivatives w.r.t. ;  ; file  rf201_composite.C;   Addition and convolution: composite pdf with signal and background component ;  ; file  rf201_composite.py;   Addition and convolution: composite pdf with signal and background component ;  ; file  rf202_extendedmlfit.C;   Setting up an extended maximum likelihood fit. ;  ; file  rf202_extendedmlfit.py;   Addition and convolution: setting up an extended maximum likelihood fit ;  ; file  rf203_ranges.C;   Fitting and plotting in sub ranges. ;  ; file  rf203_ranges.py;   Addition and convolution: fitting and plotting i",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
Integrability,integrat,integration," to RooPlots and decorating with arrows, etc... ;  ; file  rf107_plotstyles.C;   Basic functionality: various plotting styles of data, functions in a RooPlot ;  ; file  rf107_plotstyles.py;   Basic functionality: demonstration of various plotting styles of data, functions in a RooPlot ;  ; file  rf108_plotbinning.C;   Basic functionality: plotting unbinned data with alternate and variable binnings ;  ; file  rf108_plotbinning.py;   Basic functionality: plotting unbinned data with alternate and variable binnings ;  ; file  rf109_chi2residpull.C;   Basic functionality: Calculating chi^2 from histograms and curves in RooPlots, making histogram of residual and pull distributions ;  ; file  rf109_chi2residpull.py;   'BASIC FUNCTIONALITY' RooFit tutorial macro #109 Calculating chi^2 from histograms and curves in ROOT.RooPlots, making histogram of residual and pull distributions ;  ; file  rf110_normintegration.C;   Basic functionality: normalization and integration of pdfs, construction of cumulative distribution monodimensional functions ;  ; file  rf110_normintegration.py;   Basic functionality: examples on normalization and integration of pdfs, construction of cumulative distribution functions from monodimensional pdfs ;  ; file  rf111_derivatives.C;   Basic functionality: numerical 1st,2nd and 3rd order derivatives w.r.t. ;  ; file  rf111_derivatives.py;   Basic functionality: numerical 1st, and 3rd order derivatives w.r.t. ;  ; file  rf201_composite.C;   Addition and convolution: composite pdf with signal and background component ;  ; file  rf201_composite.py;   Addition and convolution: composite pdf with signal and background component ;  ; file  rf202_extendedmlfit.C;   Setting up an extended maximum likelihood fit. ;  ; file  rf202_extendedmlfit.py;   Addition and convolution: setting up an extended maximum likelihood fit ;  ; file  rf203_ranges.C;   Fitting and plotting in sub ranges. ;  ; file  rf203_ranges.py;   Addition and convolution: fitting and plotting i",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
Modifiability,variab,variable,"y for functions and pdfs ;  ; file  rf104_classfactory.py;   Basic functionality: the class factory for functions and pdfs ;  ; file  rf105_funcbinding.C;   Basic functionality: binding ROOT math functions as RooFit functions and pdfs ;  ; file  rf105_funcbinding.py;   'BASIC FUNCTIONALITY' RooFit tutorial macro #105 Demonstration of binding ROOT Math functions as RooFit functions and pdfs ;  ; file  rf106_plotdecoration.C;   Basic functionality: adding boxes with parameters, statistics to RooPlots, decorating with arrows, text etc... ;  ; file  rf106_plotdecoration.py;   Basic functionality: adding boxes with parameters to RooPlots and decorating with arrows, etc... ;  ; file  rf107_plotstyles.C;   Basic functionality: various plotting styles of data, functions in a RooPlot ;  ; file  rf107_plotstyles.py;   Basic functionality: demonstration of various plotting styles of data, functions in a RooPlot ;  ; file  rf108_plotbinning.C;   Basic functionality: plotting unbinned data with alternate and variable binnings ;  ; file  rf108_plotbinning.py;   Basic functionality: plotting unbinned data with alternate and variable binnings ;  ; file  rf109_chi2residpull.C;   Basic functionality: Calculating chi^2 from histograms and curves in RooPlots, making histogram of residual and pull distributions ;  ; file  rf109_chi2residpull.py;   'BASIC FUNCTIONALITY' RooFit tutorial macro #109 Calculating chi^2 from histograms and curves in ROOT.RooPlots, making histogram of residual and pull distributions ;  ; file  rf110_normintegration.C;   Basic functionality: normalization and integration of pdfs, construction of cumulative distribution monodimensional functions ;  ; file  rf110_normintegration.py;   Basic functionality: examples on normalization and integration of pdfs, construction of cumulative distribution functions from monodimensional pdfs ;  ; file  rf111_derivatives.C;   Basic functionality: numerical 1st,2nd and 3rd order derivatives w.r.t. ;  ; file  rf111_derivatives.py",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
Performance,perform,performing,"e distribution functions from pdfs in two dimensions ;  ; file  rf308_normintegration2d.py;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf309_ndimplot.C;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf309_ndimplot.py;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf310_sliceplot.C;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf310_sliceplot.py;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf311_rangeplot.C;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf311_rangeplot.py;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf312_multirangefit.C;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf312_multirangefit.py;   Multidimensional models: performing fits in multiple (disjoint) ranges in one or more dimensions ;  ; file  rf313_paramranges.C;   Multidimensional models: working with parametrized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf313_paramranges.py;   Multidimensional models: working with parameterized ranges to define non-rectangular regions for fitting and integration ;  ; file  rf314_paramfitrange.C;   Multidimensional models: working with parametrized ranges in a fit. ;  ; file  rf314_paramfitrange.py;   Multidimensional models: working with parameterized ranges in a fit. ;  ; file  rf315_projectpdf.C;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf315_projectpdf.py;   Multidimensional models: marginizalization of multi-dimensional pdfs through integration ;  ; file  rf316_llratioplot.C;   Multidimensional models: using t",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
Security,access,access,f variations of an input pdf ;  ; file  rf504_simwstool.py;   Organization and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf505_asciicfg.C;   Organisation and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf505_asciicfg.py;   Organization and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf506_msgservice.C;   Organisation and simultaneous fits: tuning and customizing the RooFit message logging facility ;  ; file  rf506_msgservice.py;   Organization and simultaneous fits: tuning and customizing the ROOT.RooFit message logging facility ;  ; file  rf508_listsetmanip.C;   Organization and simultaneous fits: RooArgSet and RooArgList tools and tricks ;  ; file  rf508_listsetmanip.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #508 ;  ; file  rf509_wsinteractive.C;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf509_wsinteractive.py;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf510_wsnamedsets.C;   Organization and simultaneous fits: working with named parameter sets and parameter snapshots in workspaces ;  ; file  rf510_wsnamedsets.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #510 ;  ; file  rf511_wsfactory_basic.C;   Organization and simultaneous fits: basic use of the 'object factory' associated with a workspace to rapidly build pdfs functions and their parameter components ;  ; file  rf511_wsfactory_basic.py;   Organization and simultaneous fits: basic use of the 'object factory' associated with a workspace to rapidly build pdfs functions and their parameter components ;  ; file  rf512_wsfactory_oper.C;   Organization and simultaneous fits: operator expressions and expression-based basic pdfs in the workspace factory syntax ;  ; file,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
Testability,log,logging, simultaneous fits: creating and writing a workspace ;  ; file  rf502_wspacewrite.py;   Organization and simultaneous fits: creating and writing a workspace ;  ; file  rf503_wspaceread.C;   Organisation and simultaneous fits: reading and using a workspace ;  ; file  rf503_wspaceread.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #503 ;  ; file  rf504_simwstool.C;   Organisation and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf504_simwstool.py;   Organization and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf505_asciicfg.C;   Organisation and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf505_asciicfg.py;   Organization and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf506_msgservice.C;   Organisation and simultaneous fits: tuning and customizing the RooFit message logging facility ;  ; file  rf506_msgservice.py;   Organization and simultaneous fits: tuning and customizing the ROOT.RooFit message logging facility ;  ; file  rf508_listsetmanip.C;   Organization and simultaneous fits: RooArgSet and RooArgList tools and tricks ;  ; file  rf508_listsetmanip.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #508 ;  ; file  rf509_wsinteractive.C;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf509_wsinteractive.py;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf510_wsnamedsets.C;   Organization and simultaneous fits: working with named parameter sets and parameter snapshots in workspaces ;  ; file  rf510_wsnamedsets.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #510 ;  ; file  rf511_wsfactory_basic.C;   Organization and simultaneous fits: bas,MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
Usability,simpl,simple,"lot a PDF in disjunct ranges, and get normalisation right. ;  ; file  rf212_plottingInRanges_blinding.py;   Plot a PDF in disjunct ranges, and get normalisation right. ;  ; file  rf301_composition.C;   Multidimensional models: multi-dimensional pdfs through composition e.g. ;  ; file  rf301_composition.py;   Multidimensional models: multi-dimensional pdfs through composition, e.g. ;  ; file  rf302_utilfuncs.C;   Multidimensional models: utility functions classes available for use in tailoring of composite (multidimensional) pdfs ;  ; file  rf302_utilfuncs.py;   Multidimensional models: utility functions classes available for use in tailoring of composite (multidimensional) pdfs ;  ; file  rf303_conditional.C;   Multidimensional models: use of tailored pdf as conditional pdfs.s ;  ; file  rf303_conditional.py;   'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #303 Use of tailored p.d.f as conditional p.d.fs.s ;  ; file  rf304_uncorrprod.C;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf304_uncorrprod.py;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf305_condcorrprod.C;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf305_condcorrprod.py;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf306_condpereventerrors.C;   Multidimensional models: conditional pdf with per-event errors ;  ; file  rf306_condpereventerrors.py;   Multidimensional models: complete example with use of conditional pdf with per-event errors ;  ; file  rf307_fullpereventerrors.C;   Multidimensional models: full pdf with per-event errors ;  ; file  rf307_fullpereventerrors.py;   Multidimensional models: usage of full pdf with per-event errors ;  ; file  rf308_normintegration2d.C;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf308_no",MatchSource.WIKI,doc/master/group__tutorial__roofit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html
Performance,perform,performing,umberCountingCombination.C;   'Number Counting Example' RooStats tutorial macro #100 ;  ; file  rs_numbercountingutils.C;   'Number Counting Utils' RooStats tutorial ;  ; file  rs_numbercountingutils.py;   'Number Counting Utils' RooStats tutorial ;  ; file  StandardBayesianMCMCDemo.C;   Standard demo of the Bayesian MCMC calculator ;  ; file  StandardBayesianNumericalDemo.C;   Standard demo of the numerical Bayesian calculator ;  ; file  StandardFeldmanCousinsDemo.C;   Standard demo of the Feldman-Cousins calculator StandardFeldmanCousinsDemo ;  ; file  StandardFrequentistDiscovery.C;   StandardFrequentistDiscovery ;  ; file  StandardHistFactoryPlotsWithCategories.C;   StandardHistFactoryPlotsWithCategories ;  ; file  StandardHypoTestDemo.C;   Standard tutorial macro for hypothesis test (for computing the discovery significance) using all RooStats hypothesis tests calculators and test statistics. ;  ; file  StandardHypoTestInvDemo.C;   Standard tutorial macro for performing an inverted hypothesis test for computing an interval ;  ; file  StandardProfileInspectorDemo.C;   Standard demo of the ProfileInspector class StandardProfileInspectorDemo ;  ; file  StandardProfileInspectorDemo.py;   Standard demo of the ProfileInspector class StandardProfileInspectorDemo ;  ; file  StandardProfileLikelihoodDemo.C;   Standard demo of the Profile Likelihood calculator StandardProfileLikelihoodDemo ;  ; file  StandardProfileLikelihoodDemo.py;   Standard demo of the Profile Likelihood calculator StandardProfileLikelihoodDemo ;  ; file  StandardTestStatDistributionDemo.C;   StandardTestStatDistributionDemo.C ;  ; file  TestNonCentral.C;   Demonstrates non central chi-square. ;  ; file  TwoSidedFrequentistUpperLimitWithBands.C;   TwoSidedFrequentistUpperLimitWithBands ;  ; file  Zbi_Zgamma.C;   Demonstrate Z_Bi = Z_Gamma ;  ; file  Zbi_Zgamma.py;   Demonstrate Z_Bi = Z_Gamma ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__roostats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roostats.html
Security,validat,validates,with four techniques. ;  ; file  IntervalExamples.py;   Example showing confidence intervals with four techniques. ;  ; file  ModelInspector.C;  RooStats Model Inspector. ;  ; file  MultivariateGaussianTest.C;   Comparison of MCMC and PLC in a multi-variate gaussian problem ;  ; file  MultivariateGaussianTest.py;   Comparison of MCMC and PLC in a multi-variate gaussian problem ;  ; file  OneSidedFrequentistUpperLimitWithBands.C;   OneSidedFrequentistUpperLimitWithBands ;  ; file  rs101_limitexample.C;   Limits: number counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs101_limitexample.py;   Limits: number counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs102_hypotestwithshapes.C;   A typical search for a new particle by studying an invariant mass distribution ;  ; file  rs301_splot.C;   SPlot tutorial ;  ; file  rs302_JeffreysPriorDemo.C;   tutorial demonstrating and validates the RooJeffreysPrior class ;  ; file  rs401c_FeldmanCousins.C;   Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique. ;  ; file  rs401c_FeldmanCousins.py;   Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique. ;  ; file  rs401d_FeldmanCousins.C;   Neutrino Oscillation Example from Feldman & Cousins ;  ; file  rs601_HLFactoryexample.C;   High Level Factory: creation of a simple model ;  ; file  rs601_HLFactoryexample.py;   High Level Factory: creation of a simple model ;  ; file  rs602_HLFactoryCombinationexample.C;   High Level Factory: creation of a combined model ;  ; file  rs603_HLFactoryElaborateExample.C;   High Level Factory: creating a complex combined model. ;  ; file  rs701_BayesianCalculator.C;   Bayesian calculator: basic example ;  ; file  rs701_BayesianCalculator.py;   Bayesian calculator: basic example ;  ; file  rs_bernsteinCo,MatchSource.WIKI,doc/master/group__tutorial__roostats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roostats.html
Testability,test,testing,. ROOT: RooStats Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; RooStats TutorialsTutorials. ; These tutorials illustrate the main features of RooStats. . Files; file  FourBinInstructional.C;   This example is a generalization of the on/off problem. ;  ; file  FourBinInstructional.py;   This example is a generalization of the on/off problem. ;  ; file  HybridInstructional.C;   Example demonstrating usage of HybridCalcultor ;  ; file  HybridStandardForm.C;   A hypothesis testing example based on number counting with background uncertainty. ;  ; file  IntervalExamples.C;   Example showing confidence intervals with four techniques. ;  ; file  IntervalExamples.py;   Example showing confidence intervals with four techniques. ;  ; file  ModelInspector.C;  RooStats Model Inspector. ;  ; file  MultivariateGaussianTest.C;   Comparison of MCMC and PLC in a multi-variate gaussian problem ;  ; file  MultivariateGaussianTest.py;   Comparison of MCMC and PLC in a multi-variate gaussian problem ;  ; file  OneSidedFrequentistUpperLimitWithBands.C;   OneSidedFrequentistUpperLimitWithBands ;  ; file  rs101_limitexample.C;   Limits: number counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs101_limitexample.py;   Limits: number counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs102_hypotestwithshapes.C;   A typical search for a new particle by studying an invariant mass distribution ;  ; file  rs301_splot.C;   SPlot tutorial ;  ; file  rs302_JeffreysPriorDemo.C;   tutorial demonstrating and validates the RooJeffreysPrior class ;  ; file  rs401c_FeldmanCousins.C;   Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique. ;  ; file  rs401c_FeldmanCousins.py;   Produces an interval on the mean signal in a number counting experiment with known background using the Fel,MatchSource.WIKI,doc/master/group__tutorial__roostats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roostats.html
Usability,simpl,simple,counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs101_limitexample.py;   Limits: number counting experiment with uncertainty on both the background rate and signal efficiency. ;  ; file  rs102_hypotestwithshapes.C;   A typical search for a new particle by studying an invariant mass distribution ;  ; file  rs301_splot.C;   SPlot tutorial ;  ; file  rs302_JeffreysPriorDemo.C;   tutorial demonstrating and validates the RooJeffreysPrior class ;  ; file  rs401c_FeldmanCousins.C;   Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique. ;  ; file  rs401c_FeldmanCousins.py;   Produces an interval on the mean signal in a number counting experiment with known background using the Feldman-Cousins technique. ;  ; file  rs401d_FeldmanCousins.C;   Neutrino Oscillation Example from Feldman & Cousins ;  ; file  rs601_HLFactoryexample.C;   High Level Factory: creation of a simple model ;  ; file  rs601_HLFactoryexample.py;   High Level Factory: creation of a simple model ;  ; file  rs602_HLFactoryCombinationexample.C;   High Level Factory: creation of a combined model ;  ; file  rs603_HLFactoryElaborateExample.C;   High Level Factory: creating a complex combined model. ;  ; file  rs701_BayesianCalculator.C;   Bayesian calculator: basic example ;  ; file  rs701_BayesianCalculator.py;   Bayesian calculator: basic example ;  ; file  rs_bernsteinCorrection.C;   Example of the BernsteinCorrection utility in RooStats. ;  ; file  rs_bernsteinCorrection.py;   Example of the BernsteinCorrection utility in RooStats. ;  ; file  rs_numberCountingCombination.C;   'Number Counting Example' RooStats tutorial macro #100 ;  ; file  rs_numbercountingutils.C;   'Number Counting Utils' RooStats tutorial ;  ; file  rs_numbercountingutils.py;   'Number Counting Utils' RooStats tutorial ;  ; file  StandardBayesianMCMCDemo.C;   Standard demo of the Bayesian MCMC calculator ;  ; fil,MatchSource.WIKI,doc/master/group__tutorial__roostats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__roostats.html
Testability,test,test,. ROOT: SQL tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; SQL tutorialsTutorials. ; Examples showing the SQL classes. . Files; file  sqlcanvas.C;  This is slight modification of ntuple1.C example. ;  ; file  sqlcreatedb.C;  Create a runcatalog table in a MySQL test database. ;  ; file  sqlcreatedb.py;   Create a runcatalog table in a MySQL test database. ;  ; file  sqlfilldb.C;  Fill run catalog with nfiles entries. ;  ; file  sqlfilldb.py;   Fill run catalog with nfiles entries ;  ; file  SQLiteIPLocation.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLitePlatformDistribution.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLiteTimeVersionOfRoot.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  SQLiteVersionsOfRoot.C;   This tutorial demonstrates how TSQLServer can be used to create a connection with a SQlite3 database. ;  ; file  sqlselect.C;  Query example to MySQL test database. ;  ; file  sqlselect.py;  Query example to MySQL test database. ;  ; file  sqltables.C;  This is an example illustrating how the TSQLFile class can be used. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__sql.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__sql.html
Integrability,interface,interface,". ROOT: TMVA tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; TMVA tutorialsTutorials. ; Example code which illustrates how to use the TMVA toolkit. . Modules;  Envelope Tutorials;  ;  TMVA Keras tutorials;  Example code which illustrates how to use keras with the python interface of TMVA. ;  ;  TMVA PyTorch tutorials;  Example code which illustrates how to use pytorch with the python interface of TMVA. ;  . Files; file  createData.C;  Plot the variables. ;  ; file  RBatchGenerator_NumPy.py;   Example of getting batches of events from a ROOT dataset as Python generators of numpy arrays. ;  ; file  RBatchGenerator_PyTorch.py;   Example of getting batches of events from a ROOT dataset into a basic PyTorch workflow. ;  ; file  RBatchGenerator_TensorFlow.py;   Example of getting batches of events from a ROOT dataset into a basic TensorFlow workflow. ;  ; file  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ; file  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ; file  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ; file  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ; file  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ; file  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ; file  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ; file  tmva10",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
Modifiability,variab,variables,". ROOT: TMVA tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; TMVA tutorialsTutorials. ; Example code which illustrates how to use the TMVA toolkit. . Modules;  Envelope Tutorials;  ;  TMVA Keras tutorials;  Example code which illustrates how to use keras with the python interface of TMVA. ;  ;  TMVA PyTorch tutorials;  Example code which illustrates how to use pytorch with the python interface of TMVA. ;  . Files; file  createData.C;  Plot the variables. ;  ; file  RBatchGenerator_NumPy.py;   Example of getting batches of events from a ROOT dataset as Python generators of numpy arrays. ;  ; file  RBatchGenerator_PyTorch.py;   Example of getting batches of events from a ROOT dataset into a basic PyTorch workflow. ;  ; file  RBatchGenerator_TensorFlow.py;   Example of getting batches of events from a ROOT dataset into a basic TensorFlow workflow. ;  ; file  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ; file  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ; file  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ; file  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ; file  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ; file  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ; file  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ; file  tmva10",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
Testability,test,test,"sorFlow workflow. ;  ; file  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ; file  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ; file  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ; file  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ; file  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ; file  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ; file  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ; file  tmva103_Application.C;   This tutorial illustrates how you can conveniently apply BDTs in C++ using the fast tree inference engine offered by TMVA. ;  ; file  TMVA_CNN_Classification.C;   TMVA Classification Example Using a Convolutional Neural Network ;  ; file  TMVA_CNN_Classification.py;   TMVA Classification Example Using a Convolutional Neural Network ;  ; file  TMVA_Higgs_Classification.C;   Classification example of TMVA based on public Higgs UCI dataset ;  ; file  TMVA_Higgs_Classification.py;   Classification example of TMVA based on public Higgs UCI dataset ;  ; file  TMVA_RNN_Classification.C;   TMVA Classification Example Using a Recurrent Neural Network ;  ; file  TMVA_RNN_Classification.py;   TMVA Classification Example Using a Recurrent Neural Network ;  ; file  TMVA_SOFIE_Inference.py;   This macro provides an example of using a trained model with Keras and make inference using ",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
Usability,learn,learning,"f getting batches of events from a ROOT dataset as Python generators of numpy arrays. ;  ; file  RBatchGenerator_PyTorch.py;   Example of getting batches of events from a ROOT dataset into a basic PyTorch workflow. ;  ; file  RBatchGenerator_TensorFlow.py;   Example of getting batches of events from a ROOT dataset into a basic TensorFlow workflow. ;  ; file  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ; file  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ; file  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ; file  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ; file  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ; file  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ; file  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ; file  tmva103_Application.C;   This tutorial illustrates how you can conveniently apply BDTs in C++ using the fast tree inference engine offered by TMVA. ;  ; file  TMVA_CNN_Classification.C;   TMVA Classification Example Using a Convolutional Neural Network ;  ; file  TMVA_CNN_Classification.py;   TMVA Classification Example Using a Convolutional Neural Network ;  ; file  TMVA_Higgs_Classification.C;   Classification example of TMVA based on public Higgs UCI dataset ;  ; file  TMVA_Higgs_Classification.py;   Classification example of TMVA based on public Higgs UCI dataset ;",MatchSource.WIKI,doc/master/group__tutorial__tmva.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html
Integrability,interface,interface,. ROOT: TMVA Keras tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; TMVA Keras tutorialsTutorials » TMVA tutorials. ; Example code which illustrates how to use keras with the python interface of TMVA. . Files; file  ApplicationClassificationKeras.py;   This tutorial shows how to apply a trained model to new data. ;  ; file  ApplicationRegressionKeras.py;   This tutorial shows how to apply a trained model to new data (regression). ;  ; file  ClassificationKeras.py;   This tutorial shows how to do classification in TMVA with neural networks trained with keras. ;  ; file  GenerateModel.py;   This tutorial shows how to define and generate a keras model for use with TMVA. ;  ; file  MulticlassKeras.py;   This tutorial shows how to do multiclass classification in TMVA with neural networks trained with keras. ;  ; file  RegressionKeras.py;   This tutorial shows how to do regression in TMVA with neural networks trained with keras. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__tmva__keras.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva__keras.html
Integrability,interface,interface,. ROOT: TMVA PyTorch tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; TMVA PyTorch tutorialsTutorials » TMVA tutorials. ; Example code which illustrates how to use pytorch with the python interface of TMVA. . Files; file  ApplicationClassificationPyTorch.py;   This tutorial shows how to apply a trained model to new data. ;  ; file  ApplicationRegressionPyTorch.py;   This tutorial shows how to apply a trained model to new data (regression). ;  ; file  ClassificationPyTorch.py;   This tutorial shows how to do classification in TMVA with neural networks trained with PyTorch. ;  ; file  MulticlassPyTorch.py;   This tutorial shows how to do multiclass classification in TMVA with neural networks trained with PyTorch. ;  ; file  RegressionPyTorch.py;   This tutorial shows how to do regression in TMVA with neural networks trained with PyTorch. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__tmva__pytorch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva__pytorch.html
Deployability,install,installed,"bles of type character ;  ; file  circular.C;   Example of a circular Tree ;  ; file  clonesA_Event.C;  Example to write & read a Tree built with a complex class inheritance tree. ;  ; file  copytree.C;   Copy a subset of a Tree to a new Tree ;  ; file  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ; file  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ; file  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ; file  h1analysis.C;   Example of analysis class for the H1 data. ;  ; file  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ; file  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ; file  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ; file  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ; file  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ; file  hsimpleReader.C;   TTreeReader simplest example. ;  ; file  htest.C;   Save histograms in Tree branches ;  ; file  hvector.C;   Write and read STL vectors in a tree. ;  ; file  jets.C;  Usage of a Tree using the JetEvent class. ;  ; file  ntuple1.C;   Simple tree analysis. ;  ; file  parallelcoord.C;   Script illustrating the use of the TParallelCoord class ;  ; file  parallelcoordtrans.C;   Use of transparency with ||-Coord. ;  ; file  printSizes.C;   This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree. ;  ; file  run_h1analysis.C;   Macro driving the analysis can specify file name and type ;  ; file  spider.C;   TSpider example. ;  ; file  staff.C;   Create a plot of the data in cernstaff.root To create cernstaff.roo",MatchSource.WIKI,doc/master/group__tutorial__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tree.html
Energy Efficiency,efficient,efficient,"o use ROOT trees and ntuples. . Files; file  basic.C;   Read data from an ascii file and create a root file with an histogram and an ntuple. ;  ; file  basic2.C;   Create can ntuple reading data from an ascii file. ;  ; file  bill.C;   Benchmark comparing row-wise and column-wise storage performance ;  ; file  cernbuild.C;   Read data (CERN staff) from an ascii file and create a root file with a Tree. ;  ; file  cernstaff.C;   Playing with a Tree containing variables of type character ;  ; file  circular.C;   Example of a circular Tree ;  ; file  clonesA_Event.C;  Example to write & read a Tree built with a complex class inheritance tree. ;  ; file  copytree.C;   Copy a subset of a Tree to a new Tree ;  ; file  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ; file  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ; file  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ; file  h1analysis.C;   Example of analysis class for the H1 data. ;  ; file  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ; file  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ; file  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ; file  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ; file  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ; file  hsimpleReader.C;   TTreeReader simplest example. ;  ; file  htest.C;   Save histograms in Tree branches ;  ; file  hvector.C;   Write and read STL vectors in a tree. ;  ; file  jets.C;  Usage of a Tree using the JetEvent class. ;  ; file  ntuple1.C;   Simple tree analysis. ;  ; file  parallelcoord.C;   Script illustrating the use o",MatchSource.WIKI,doc/master/group__tutorial__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tree.html
Modifiability,variab,variables,". ROOT: Tree tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Tree tutorialsTutorials. ; Example code which illustrates how to use ROOT trees and ntuples. . Files; file  basic.C;   Read data from an ascii file and create a root file with an histogram and an ntuple. ;  ; file  basic2.C;   Create can ntuple reading data from an ascii file. ;  ; file  bill.C;   Benchmark comparing row-wise and column-wise storage performance ;  ; file  cernbuild.C;   Read data (CERN staff) from an ascii file and create a root file with a Tree. ;  ; file  cernstaff.C;   Playing with a Tree containing variables of type character ;  ; file  circular.C;   Example of a circular Tree ;  ; file  clonesA_Event.C;  Example to write & read a Tree built with a complex class inheritance tree. ;  ; file  copytree.C;   Copy a subset of a Tree to a new Tree ;  ; file  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ; file  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ; file  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ; file  h1analysis.C;   Example of analysis class for the H1 data. ;  ; file  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ; file  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ; file  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ; file  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ; file  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ; file  hsimpleReader.C;   TTreeReader simplest example. ;  ; file  htest.C;   Save histograms in Tree branches ;  ; file  hvector.C;   Write and read STL vectors in ",MatchSource.WIKI,doc/master/group__tutorial__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tree.html
Performance,perform,performance,". ROOT: Tree tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Tree tutorialsTutorials. ; Example code which illustrates how to use ROOT trees and ntuples. . Files; file  basic.C;   Read data from an ascii file and create a root file with an histogram and an ntuple. ;  ; file  basic2.C;   Create can ntuple reading data from an ascii file. ;  ; file  bill.C;   Benchmark comparing row-wise and column-wise storage performance ;  ; file  cernbuild.C;   Read data (CERN staff) from an ascii file and create a root file with a Tree. ;  ; file  cernstaff.C;   Playing with a Tree containing variables of type character ;  ; file  circular.C;   Example of a circular Tree ;  ; file  clonesA_Event.C;  Example to write & read a Tree built with a complex class inheritance tree. ;  ; file  copytree.C;   Copy a subset of a Tree to a new Tree ;  ; file  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ; file  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ; file  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ; file  h1analysis.C;   Example of analysis class for the H1 data. ;  ; file  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ; file  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ; file  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ; file  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ; file  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ; file  hsimpleReader.C;   TTreeReader simplest example. ;  ; file  htest.C;   Save histograms in Tree branches ;  ; file  hvector.C;   Write and read STL vectors in ",MatchSource.WIKI,doc/master/group__tutorial__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tree.html
Usability,simpl,simplest," a new Tree ;  ; file  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ; file  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ; file  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ; file  h1analysis.C;   Example of analysis class for the H1 data. ;  ; file  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ; file  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ; file  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ; file  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ; file  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ; file  hsimpleReader.C;   TTreeReader simplest example. ;  ; file  htest.C;   Save histograms in Tree branches ;  ; file  hvector.C;   Write and read STL vectors in a tree. ;  ; file  jets.C;  Usage of a Tree using the JetEvent class. ;  ; file  ntuple1.C;   Simple tree analysis. ;  ; file  parallelcoord.C;   Script illustrating the use of the TParallelCoord class ;  ; file  parallelcoordtrans.C;   Use of transparency with ||-Coord. ;  ; file  printSizes.C;   This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree. ;  ; file  run_h1analysis.C;   Macro driving the analysis can specify file name and type ;  ; file  spider.C;   TSpider example. ;  ; file  staff.C;   Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  ; file  tcl.C;   How to write a TClonesArray to a TTree ;  ; file  temperature.C;  This tutorial illustrates how to use the highlight mode with trees. ;  ; file  tree.C;  ",MatchSource.WIKI,doc/master/group__tutorial__tree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__tree.html
Integrability,interface,interface,. ROOT: ROOT 7 tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; ROOT 7 tutorialsTutorials. ; Various examples showing the ROOT 7 interface. ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! . Modules;  RCanvas examples;  These are RCanvas examples ... ;  ;  ROOT 7 ntuple tutorials;  Various examples showing the ROOT 7 ntuples. ;  . Files; file  browser.cxx;  ; file  concurrentfill.cxx;  ; file  filedialog.cxx;  ; file  fitpanel.cxx;  ; file  fitpanel6.cxx;  ; file  histops.cxx;  ; file  perf.cxx;  ; file  perfcomp.cxx;  ; file  simple.cxx;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__v7.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__v7.html
Performance,concurren,concurrentfill,. ROOT: ROOT 7 tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; ROOT 7 tutorialsTutorials. ; Various examples showing the ROOT 7 interface. ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! . Modules;  RCanvas examples;  These are RCanvas examples ... ;  ;  ROOT 7 ntuple tutorials;  Various examples showing the ROOT 7 ntuples. ;  . Files; file  browser.cxx;  ; file  concurrentfill.cxx;  ; file  filedialog.cxx;  ; file  fitpanel.cxx;  ; file  fitpanel6.cxx;  ; file  histops.cxx;  ; file  perf.cxx;  ; file  perfcomp.cxx;  ; file  simple.cxx;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__v7.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__v7.html
Usability,simpl,simple,. ROOT: ROOT 7 tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; ROOT 7 tutorialsTutorials. ; Various examples showing the ROOT 7 interface. ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! . Modules;  RCanvas examples;  These are RCanvas examples ... ;  ;  ROOT 7 ntuple tutorials;  Various examples showing the ROOT 7 ntuples. ;  . Files; file  browser.cxx;  ; file  concurrentfill.cxx;  ; file  filedialog.cxx;  ; file  fitpanel.cxx;  ; file  fitpanel6.cxx;  ; file  histops.cxx;  ; file  perf.cxx;  ; file  perfcomp.cxx;  ; file  simple.cxx;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__v7.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__v7.html
Energy Efficiency,allocate,allocate,". ROOT: VecOps tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; VecOps tutorialsTutorials. ; These examples show the functionalities of the VecOps utilities. ; Please note that you can find the exhaustive documentation here in the reference guide. . Files; file  vo001_AdoptOrOwnMemory.C;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo001_AdoptOrOwnMemory.py;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo002_VectorCalculations.C;   In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars. ;  ; file  vo003_LogicalOperations.C;   In this tutorial we learn how the RVec class can be used to express logical operations. ;  ; file  vo004_SortAndSelect.C;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo004_SortAndSelect.py;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo005_Combinations.C;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo005_Combinations.py;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo006_IndexManipulation.C;   In this tutorial we demonstrate RVec helpers for index manipulation. ;  ; file  vo007_PhysicsHelpers.C;   In this tutorial we demonstrate RVec helpers for physics computations such as angle differences \(\Delta \phi\), the distance in the \(\eta\)- \(\phi\) plane \(\Delta R\) and the invariant mass. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__vecops.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__vecops.html
Testability,log,logical,". ROOT: VecOps tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; VecOps tutorialsTutorials. ; These examples show the functionalities of the VecOps utilities. ; Please note that you can find the exhaustive documentation here in the reference guide. . Files; file  vo001_AdoptOrOwnMemory.C;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo001_AdoptOrOwnMemory.py;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo002_VectorCalculations.C;   In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars. ;  ; file  vo003_LogicalOperations.C;   In this tutorial we learn how the RVec class can be used to express logical operations. ;  ; file  vo004_SortAndSelect.C;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo004_SortAndSelect.py;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo005_Combinations.C;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo005_Combinations.py;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo006_IndexManipulation.C;   In this tutorial we demonstrate RVec helpers for index manipulation. ;  ; file  vo007_PhysicsHelpers.C;   In this tutorial we demonstrate RVec helpers for physics computations such as angle differences \(\Delta \phi\), the distance in the \(\eta\)- \(\phi\) plane \(\Delta R\) and the invariant mass. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__vecops.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__vecops.html
Usability,guid,guide,". ROOT: VecOps tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; VecOps tutorialsTutorials. ; These examples show the functionalities of the VecOps utilities. ; Please note that you can find the exhaustive documentation here in the reference guide. . Files; file  vo001_AdoptOrOwnMemory.C;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo001_AdoptOrOwnMemory.py;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo002_VectorCalculations.C;   In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars. ;  ; file  vo003_LogicalOperations.C;   In this tutorial we learn how the RVec class can be used to express logical operations. ;  ; file  vo004_SortAndSelect.C;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo004_SortAndSelect.py;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo005_Combinations.C;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo005_Combinations.py;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo006_IndexManipulation.C;   In this tutorial we demonstrate RVec helpers for index manipulation. ;  ; file  vo007_PhysicsHelpers.C;   In this tutorial we demonstrate RVec helpers for physics computations such as angle differences \(\Delta \phi\), the distance in the \(\eta\)- \(\phi\) plane \(\Delta R\) and the invariant mass. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__vecops.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__vecops.html
Testability,log,logN,. ROOT: TWebCanvas tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; TWebCanvas tutorialsTutorials. ; Examples showing the special features of web-based canvas. . Files; file  fonts_ttf.cxx;   Usage of TTF fonts in web canvas. ;  ; file  haxis.cxx;   Swap X/Y axes drawing and use to draw TH1 as bar and as markers. ;  ; file  inframe.cxx;   Drawing primitives inside and outside of the frame. ;  ; file  latex_url.cxx;   Use of interactive URL links inside TLatex. ;  ; file  logN.cxx;   Logarithmic scales support in web canvas. ;  ; file  triangle.cxx;  User class with custom JavaScript painter in the web canvas. ;  ; file  twoscales.cxx;   Two fully interactive scales in web canvas. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/group__tutorial__webcanv.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__webcanv.html
Availability,ping,ping,". ROOT: Webgui tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Webgui tutorialsTutorials. ; Webgui examples. . Files; file  geom_threejs.cxx;  The tutorial demonstrates how three.js model for geometry can be created and displayed. ;  ; file  ping.cxx;  Test suite for RWebWindow communication performance. ;  ; file  web_cms.cxx;  Web-based geometry viewer for CMS geometry. ;  ; file  webpanel.cxx;  This macro demonstrates simple openui5 panel, shown with RWebWindow. ;  ; file  webwindow.cxx;  Minimal server/client code for working with RWebWindow class. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__webgui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__webgui.html
Performance,perform,performance,". ROOT: Webgui tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Webgui tutorialsTutorials. ; Webgui examples. . Files; file  geom_threejs.cxx;  The tutorial demonstrates how three.js model for geometry can be created and displayed. ;  ; file  ping.cxx;  Test suite for RWebWindow communication performance. ;  ; file  web_cms.cxx;  Web-based geometry viewer for CMS geometry. ;  ; file  webpanel.cxx;  This macro demonstrates simple openui5 panel, shown with RWebWindow. ;  ; file  webwindow.cxx;  Minimal server/client code for working with RWebWindow class. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__webgui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__webgui.html
Usability,simpl,simple,". ROOT: Webgui tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Webgui tutorialsTutorials. ; Webgui examples. . Files; file  geom_threejs.cxx;  The tutorial demonstrates how three.js model for geometry can be created and displayed. ;  ; file  ping.cxx;  Test suite for RWebWindow communication performance. ;  ; file  web_cms.cxx;  Web-based geometry viewer for CMS geometry. ;  ; file  webpanel.cxx;  This macro demonstrates simple openui5 panel, shown with RWebWindow. ;  ; file  webwindow.cxx;  Minimal server/client code for working with RWebWindow class. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__webgui.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__webgui.html
Usability,simpl,simple,". ROOT: XML tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; XML tutorialsTutorials. ; XML examples. . Files; file  DOMParsePerson.C;  ROOT implementation of a XML DOM Parser. ;  ; file  DOMRecursive.C;  ROOT implementation of a XML DOM Parser. ;  ; file  SAXHandler.C;  ROOT implementation of a simple SAX Handler. ;  ; file  xmlmodifyfile.C;  Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead. ;  ; file  xmlnewfile.C;  Example to create a new xml file with the TXMLEngine class. ;  ; file  xmlreadfile.C;  Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__tutorial__xml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__tutorial__xml.html
Safety,detect,detector,". ROOT: TUnfold classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; TUnfold classesHistogram Library. ; An algorithm to unfold distributions from detector to truth level.; AuthorStefan Schmitt DESY . Classes; class  TUnfoldSys;  An algorithm to unfold distributions from detector to truth level, with background subtraction and propagation of systematic uncertainties. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/group__Unfold.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__Unfold.html
Deployability,toggle,toggle,"template<typename T0 , typename T1 > . RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::hypot ; (; const RVec< T0 > & ; v, . const T1 & ; y . ). Definition at line 1849 of file RVec.hxx. ◆ hypot() [2/3]. template<typename T0 , typename T1 > . RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::hypot ; (; const RVec< T0 > & ; v0, . const RVec< T1 > & ; v1 . ). Definition at line 1849 of file RVec.hxx. ◆ hypot() [3/3]. template<typename T0 , typename T1 > . RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::hypot ; (; const T0 & ; x, . const RVec< T1 > & ; v . ). Definition at line 1849 of file RVec.hxx. ◆ Intersect(). template<typename T > . RVec< T > ROOT::VecOps::Intersect ; (; const RVec< T > & ; v1, . const RVec< T > & ; v2, . bool ; v2_is_sorted = false . ). Return the intersection of elements of two RVecs. ; Each element of v1 is looked up in v2 and added to the returned vector if found. Following, the order of v1 is preserved. If v2 is already sorted, the optional argument v2_is_sorted can be used to toggle of the internal sorting step, therewith optimising runtime.; Example code, at the ROOT prompt: using namespace ROOT::VecOps;; RVecD v1 {1., 2., 3.};; RVecD v2 {-4., -5., 2., 1.};; auto v1_intersect_v2 = Intersect(v1, v2);; v1_intersect_v2; // (ROOT::VecOps::RVec<double> &) { 1.0000000, 2.0000000 }; ROOT::VecOps::IntersectRVec< T > Intersect(const RVec< T > &v1, const RVec< T > &v2, bool v2_is_sorted=false)Return the intersection of elements of two RVecs.Definition RVec.hxx:2758. Definition at line 2758 of file RVec.hxx. ◆ InvariantMass(). template<typename T0 , typename T1 = T0, typename T2 = T0, typename T3 = T0, typename Common_t = std::common_type_t<T0, T1, T2, T3>> . Common_t ROOT::VecOps::InvariantMass ; (; const RVec< T0 > & ; pt, . const RVec< T1 > & ; eta, . const RVec< T2 > & ; phi, . const RVec< T3 > & ; mass . ). Return the invariant mass of multiple particles given the collections of the quantities transverse momentum (pt), rapidity (eta), azimuth (phi) and mass",MatchSource.WIKI,doc/master/group__vecops.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__vecops.html
Testability,log,log,"0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::fmod (const RVec< T0 > &v, const T1 &y);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::fmod (const RVec< T0 > &v0, const RVec< T1 > &v1);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::remainder (const T0 &x, const RVec< T1 > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::remainder (const RVec< T0 > &v, const T1 &y);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::remainder (const RVec< T0 > &v0, const RVec< T1 > &v1);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::exp (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::exp2 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::expm1 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::log (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::log10 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::log2 (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::log1p (const RVec< T > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::pow (const T0 &x, const RVec< T1 > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::pow (const RVec< T0 > &v, const T1 &y);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::pow (const RVec< T0 > &v0, const RVec< T1 > &v1);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::sqrt (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ROOT::VecOps::cbrt (const RVec< T > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > ROOT::VecOps::hypot (const T0 &x, const RVec<",MatchSource.WIKI,doc/master/group__vecops.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/group__vecops.html
Deployability,update,update," version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLFunctionAdapter; 26//; 27// Generic adapter for gsl_function signature; 28// usable for any c++ class which defines operator( ); 29//; 30// Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; 31//; 32// Last update: Fri Nov 12 16:58:51 2004; 33//; 34#ifndef ROOT_Math_GSLFunctionAdapter; 35#define ROOT_Math_GSLFunctionAdapter; 36 ; 37 ; 38namespace ROOT {; 39namespace Math {; 40 ; 41 /**; 42 Function pointer corresponding to gsl_function signature; 43 */; 44 ; 45 typedef double ( * GSLFuncPointer ) ( double, void *);; 46 ; 47 ; 48 /**; 49 Class for adapting any C++ functor class to C function pointers used by GSL.; 50 The templated C++ function class must implement:; 51 ; 52 <em> double operator( double x)</em>; 53 and if the derivatives are required:; 54 <em> double Gradient( double x)</em>; 55 ; 56 This class defines static methods with will be used to fill the; 57 \a gsl_function and \a gsl_function_fdf structs used by GSL.; 58 See for examples the <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_32.html#SEC432"">GSL online manual</A>; 59 */; 60 ; 61 ; 62 template<class UserFunc>; 63 class GSLFunctionAdapter {; 64 ; 65 public:; 66 ; 67 GSLFunctionAdapter() {}; 68 virtual ~GSLFunctionAdapter() {}; 69 ; 70 static double F",MatchSource.WIKI,doc/master/GSLFunctionAdapter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html
Energy Efficiency,adapt,adapter," version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLFunctionAdapter; 26//; 27// Generic adapter for gsl_function signature; 28// usable for any c++ class which defines operator( ); 29//; 30// Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; 31//; 32// Last update: Fri Nov 12 16:58:51 2004; 33//; 34#ifndef ROOT_Math_GSLFunctionAdapter; 35#define ROOT_Math_GSLFunctionAdapter; 36 ; 37 ; 38namespace ROOT {; 39namespace Math {; 40 ; 41 /**; 42 Function pointer corresponding to gsl_function signature; 43 */; 44 ; 45 typedef double ( * GSLFuncPointer ) ( double, void *);; 46 ; 47 ; 48 /**; 49 Class for adapting any C++ functor class to C function pointers used by GSL.; 50 The templated C++ function class must implement:; 51 ; 52 <em> double operator( double x)</em>; 53 and if the derivatives are required:; 54 <em> double Gradient( double x)</em>; 55 ; 56 This class defines static methods with will be used to fill the; 57 \a gsl_function and \a gsl_function_fdf structs used by GSL.; 58 See for examples the <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_32.html#SEC432"">GSL online manual</A>; 59 */; 60 ; 61 ; 62 template<class UserFunc>; 63 class GSLFunctionAdapter {; 64 ; 65 public:; 66 ; 67 GSLFunctionAdapter() {}; 68 virtual ~GSLFunctionAdapter() {}; 69 ; 70 static double F",MatchSource.WIKI,doc/master/GSLFunctionAdapter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html
Integrability,adapter,adapter," version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLFunctionAdapter; 26//; 27// Generic adapter for gsl_function signature; 28// usable for any c++ class which defines operator( ); 29//; 30// Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; 31//; 32// Last update: Fri Nov 12 16:58:51 2004; 33//; 34#ifndef ROOT_Math_GSLFunctionAdapter; 35#define ROOT_Math_GSLFunctionAdapter; 36 ; 37 ; 38namespace ROOT {; 39namespace Math {; 40 ; 41 /**; 42 Function pointer corresponding to gsl_function signature; 43 */; 44 ; 45 typedef double ( * GSLFuncPointer ) ( double, void *);; 46 ; 47 ; 48 /**; 49 Class for adapting any C++ functor class to C function pointers used by GSL.; 50 The templated C++ function class must implement:; 51 ; 52 <em> double operator( double x)</em>; 53 and if the derivatives are required:; 54 <em> double Gradient( double x)</em>; 55 ; 56 This class defines static methods with will be used to fill the; 57 \a gsl_function and \a gsl_function_fdf structs used by GSL.; 58 See for examples the <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_32.html#SEC432"">GSL online manual</A>; 59 */; 60 ; 61 ; 62 template<class UserFunc>; 63 class GSLFunctionAdapter {; 64 ; 65 public:; 66 ; 67 GSLFunctionAdapter() {}; 68 virtual ~GSLFunctionAdapter() {}; 69 ; 70 static double F",MatchSource.WIKI,doc/master/GSLFunctionAdapter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html
Modifiability,adapt,adapter," version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLFunctionAdapter; 26//; 27// Generic adapter for gsl_function signature; 28// usable for any c++ class which defines operator( ); 29//; 30// Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; 31//; 32// Last update: Fri Nov 12 16:58:51 2004; 33//; 34#ifndef ROOT_Math_GSLFunctionAdapter; 35#define ROOT_Math_GSLFunctionAdapter; 36 ; 37 ; 38namespace ROOT {; 39namespace Math {; 40 ; 41 /**; 42 Function pointer corresponding to gsl_function signature; 43 */; 44 ; 45 typedef double ( * GSLFuncPointer ) ( double, void *);; 46 ; 47 ; 48 /**; 49 Class for adapting any C++ functor class to C function pointers used by GSL.; 50 The templated C++ function class must implement:; 51 ; 52 <em> double operator( double x)</em>; 53 and if the derivatives are required:; 54 <em> double Gradient( double x)</em>; 55 ; 56 This class defines static methods with will be used to fill the; 57 \a gsl_function and \a gsl_function_fdf structs used by GSL.; 58 See for examples the <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_32.html#SEC432"">GSL online manual</A>; 59 */; 60 ; 61 ; 62 template<class UserFunc>; 63 class GSLFunctionAdapter {; 64 ; 65 public:; 66 ; 67 GSLFunctionAdapter() {}; 68 virtual ~GSLFunctionAdapter() {}; 69 ; 70 static double F",MatchSource.WIKI,doc/master/GSLFunctionAdapter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html
Usability,usab,usable," version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLFunctionAdapter; 26//; 27// Generic adapter for gsl_function signature; 28// usable for any c++ class which defines operator( ); 29//; 30// Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; 31//; 32// Last update: Fri Nov 12 16:58:51 2004; 33//; 34#ifndef ROOT_Math_GSLFunctionAdapter; 35#define ROOT_Math_GSLFunctionAdapter; 36 ; 37 ; 38namespace ROOT {; 39namespace Math {; 40 ; 41 /**; 42 Function pointer corresponding to gsl_function signature; 43 */; 44 ; 45 typedef double ( * GSLFuncPointer ) ( double, void *);; 46 ; 47 ; 48 /**; 49 Class for adapting any C++ functor class to C function pointers used by GSL.; 50 The templated C++ function class must implement:; 51 ; 52 <em> double operator( double x)</em>; 53 and if the derivatives are required:; 54 <em> double Gradient( double x)</em>; 55 ; 56 This class defines static methods with will be used to fill the; 57 \a gsl_function and \a gsl_function_fdf structs used by GSL.; 58 See for examples the <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_32.html#SEC432"">GSL online manual</A>; 59 */; 60 ; 61 ; 62 template<class UserFunc>; 63 class GSLFunctionAdapter {; 64 ; 65 public:; 66 ; 67 GSLFunctionAdapter() {}; 68 virtual ~GSLFunctionAdapter() {}; 69 ; 70 static double F",MatchSource.WIKI,doc/master/GSLFunctionAdapter_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionAdapter_8h_source.html
Deployability,update,update,"* This library is free software; you can redistribute it and/or *; 9 * modify it under the terms of the GNU General Public License *; 10 * as published by the Free Software Foundation; either version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLFunctionWrapper; 26//; 27// Created by: moneta at Sat Nov 13 14:54:41 2004; 28//; 29// Last update: Sat Nov 13 14:54:41 2004; 30//; 31#ifndef ROOT_Math_GSLFunctionWrapper; 32#define ROOT_Math_GSLFunctionWrapper; 33 ; 34#include ""gsl/gsl_math.h""; 35 ; 36#include ""Math/GSLFunctionAdapter.h""; 37 ; 38#include <cassert>; 39 ; 40namespace ROOT {; 41namespace Math {; 42 ; 43 ; 44 ; 45typedef double ( * GSLFuncPointer ) ( double, void *);; 46typedef void ( * GSLFdfPointer ) ( double, void *, double *, double *);; 47 ; 48 ; 49/**; 50 Wrapper class to the gsl_function C structure.; 51 This class to fill the GSL C structure gsl_function with; 52 the C++ function objcet.; 53 Use the class ROOT::Math::GSLFunctionAdapter to adapt the; 54 C++ function object to the right signature (function pointer type); 55 requested by GSL; 56*/; 57class GSLFunctionWrapper {; 58 ; 59public:; 60 ; 61 GSLFunctionWrapper(); 62 {; 63 fFunc.function = nullptr;; 64 fFunc.params = nullptr;; 65 }; 66 ; 67 /// set in the GSL C struct the pointer to the function evaluation; 68 void S",MatchSource.WIKI,doc/master/GSLFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html
Energy Efficiency,adapt,adapt,"9 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLFunctionWrapper; 26//; 27// Created by: moneta at Sat Nov 13 14:54:41 2004; 28//; 29// Last update: Sat Nov 13 14:54:41 2004; 30//; 31#ifndef ROOT_Math_GSLFunctionWrapper; 32#define ROOT_Math_GSLFunctionWrapper; 33 ; 34#include ""gsl/gsl_math.h""; 35 ; 36#include ""Math/GSLFunctionAdapter.h""; 37 ; 38#include <cassert>; 39 ; 40namespace ROOT {; 41namespace Math {; 42 ; 43 ; 44 ; 45typedef double ( * GSLFuncPointer ) ( double, void *);; 46typedef void ( * GSLFdfPointer ) ( double, void *, double *, double *);; 47 ; 48 ; 49/**; 50 Wrapper class to the gsl_function C structure.; 51 This class to fill the GSL C structure gsl_function with; 52 the C++ function objcet.; 53 Use the class ROOT::Math::GSLFunctionAdapter to adapt the; 54 C++ function object to the right signature (function pointer type); 55 requested by GSL; 56*/; 57class GSLFunctionWrapper {; 58 ; 59public:; 60 ; 61 GSLFunctionWrapper(); 62 {; 63 fFunc.function = nullptr;; 64 fFunc.params = nullptr;; 65 }; 66 ; 67 /// set in the GSL C struct the pointer to the function evaluation; 68 void SetFuncPointer( GSLFuncPointer f) { fFunc.function = f; }; 69 ; 70 /// set in the GSL C struct the extra-object pointer; 71 void SetParams ( void * p) { fFunc.params = p; }; 72 ; 73 /// fill the GSL C struct from a generic C++ callable object; 74 /// implementing operator(); 75 template<class FuncType>; 76 void SetFunction(const FuncType &f) {; 77 const void * p = &f;; 78 assert (p != nullptr);; 79 SetFuncPointer(&GSLFunctionAdapter<FuncType >::F);; 80 SetParams(const_cast<void *>(p));; 81 }; 82 ; 83 gsl_function * GetFunc() { return &fFunc; }; 84 ; 85 GSLFuncPointer FunctionPtr() { return fFunc.function; }; 86 ; 87 // evaluate the function; 88 double operator() (double x) { return GSL_FN_EVAL(&fFunc, x); }; 89 ; 90 /// check",MatchSource.WIKI,doc/master/GSLFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html
Integrability,wrap,wrap,"nter to the function evaluation; 68 void SetFuncPointer( GSLFuncPointer f) { fFunc.function = f; }; 69 ; 70 /// set in the GSL C struct the extra-object pointer; 71 void SetParams ( void * p) { fFunc.params = p; }; 72 ; 73 /// fill the GSL C struct from a generic C++ callable object; 74 /// implementing operator(); 75 template<class FuncType>; 76 void SetFunction(const FuncType &f) {; 77 const void * p = &f;; 78 assert (p != nullptr);; 79 SetFuncPointer(&GSLFunctionAdapter<FuncType >::F);; 80 SetParams(const_cast<void *>(p));; 81 }; 82 ; 83 gsl_function * GetFunc() { return &fFunc; }; 84 ; 85 GSLFuncPointer FunctionPtr() { return fFunc.function; }; 86 ; 87 // evaluate the function; 88 double operator() (double x) { return GSL_FN_EVAL(&fFunc, x); }; 89 ; 90 /// check if function is valid (has been set); 91 bool IsValid() {; 92 return (fFunc.function != nullptr) ? true : false;; 93 }; 94 ; 95private:; 96 gsl_function fFunc;; 97 ; 98 ; 99};; 100 ; 101 ; 102 /**; 103 class to wrap a gsl_function_fdf (with derivatives); 104 */; 105 class GSLFunctionDerivWrapper {; 106 ; 107 public:; 108 ; 109 GSLFunctionDerivWrapper(); 110 {; 111 fFunc.f = nullptr;; 112 fFunc.df = nullptr;; 113 fFunc.fdf = nullptr;; 114 fFunc.params = nullptr;; 115 }; 116 ; 117 ; 118 void SetFuncPointer( GSLFuncPointer f) { fFunc.f = f; }; 119 void SetDerivPointer( GSLFuncPointer f) { fFunc.df = f; }; 120 void SetFdfPointer( GSLFdfPointer f) { fFunc.fdf = f; }; 121 void SetParams ( void * p) { fFunc.params = p; }; 122 ; 123 ; 124 gsl_function_fdf * GetFunc() { return &fFunc; }; 125 ; 126 // evaluate the function and derivatives; 127 double operator() (double x) { return GSL_FN_FDF_EVAL_F(&fFunc, x); }; 128 ; 129 double Derivative (double x) { return GSL_FN_FDF_EVAL_DF(&fFunc, x); }; 130 ; 131 void Fdf(double x, double & f, double & df) {; 132 return GSL_FN_FDF_EVAL_F_DF(&fFunc, x, &f, &df);; 133 }; 134 ; 135 /// check if function is valid (has been set); 136 bool IsValid() {; 137 return (fFunc.f != nullpt",MatchSource.WIKI,doc/master/GSLFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html
Modifiability,adapt,adapt,"9 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLFunctionWrapper; 26//; 27// Created by: moneta at Sat Nov 13 14:54:41 2004; 28//; 29// Last update: Sat Nov 13 14:54:41 2004; 30//; 31#ifndef ROOT_Math_GSLFunctionWrapper; 32#define ROOT_Math_GSLFunctionWrapper; 33 ; 34#include ""gsl/gsl_math.h""; 35 ; 36#include ""Math/GSLFunctionAdapter.h""; 37 ; 38#include <cassert>; 39 ; 40namespace ROOT {; 41namespace Math {; 42 ; 43 ; 44 ; 45typedef double ( * GSLFuncPointer ) ( double, void *);; 46typedef void ( * GSLFdfPointer ) ( double, void *, double *, double *);; 47 ; 48 ; 49/**; 50 Wrapper class to the gsl_function C structure.; 51 This class to fill the GSL C structure gsl_function with; 52 the C++ function objcet.; 53 Use the class ROOT::Math::GSLFunctionAdapter to adapt the; 54 C++ function object to the right signature (function pointer type); 55 requested by GSL; 56*/; 57class GSLFunctionWrapper {; 58 ; 59public:; 60 ; 61 GSLFunctionWrapper(); 62 {; 63 fFunc.function = nullptr;; 64 fFunc.params = nullptr;; 65 }; 66 ; 67 /// set in the GSL C struct the pointer to the function evaluation; 68 void SetFuncPointer( GSLFuncPointer f) { fFunc.function = f; }; 69 ; 70 /// set in the GSL C struct the extra-object pointer; 71 void SetParams ( void * p) { fFunc.params = p; }; 72 ; 73 /// fill the GSL C struct from a generic C++ callable object; 74 /// implementing operator(); 75 template<class FuncType>; 76 void SetFunction(const FuncType &f) {; 77 const void * p = &f;; 78 assert (p != nullptr);; 79 SetFuncPointer(&GSLFunctionAdapter<FuncType >::F);; 80 SetParams(const_cast<void *>(p));; 81 }; 82 ; 83 gsl_function * GetFunc() { return &fFunc; }; 84 ; 85 GSLFuncPointer FunctionPtr() { return fFunc.function; }; 86 ; 87 // evaluate the function; 88 double operator() (double x) { return GSL_FN_EVAL(&fFunc, x); }; 89 ; 90 /// check",MatchSource.WIKI,doc/master/GSLFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html
Testability,assert,assert,"pedef void ( * GSLFdfPointer ) ( double, void *, double *, double *);; 47 ; 48 ; 49/**; 50 Wrapper class to the gsl_function C structure.; 51 This class to fill the GSL C structure gsl_function with; 52 the C++ function objcet.; 53 Use the class ROOT::Math::GSLFunctionAdapter to adapt the; 54 C++ function object to the right signature (function pointer type); 55 requested by GSL; 56*/; 57class GSLFunctionWrapper {; 58 ; 59public:; 60 ; 61 GSLFunctionWrapper(); 62 {; 63 fFunc.function = nullptr;; 64 fFunc.params = nullptr;; 65 }; 66 ; 67 /// set in the GSL C struct the pointer to the function evaluation; 68 void SetFuncPointer( GSLFuncPointer f) { fFunc.function = f; }; 69 ; 70 /// set in the GSL C struct the extra-object pointer; 71 void SetParams ( void * p) { fFunc.params = p; }; 72 ; 73 /// fill the GSL C struct from a generic C++ callable object; 74 /// implementing operator(); 75 template<class FuncType>; 76 void SetFunction(const FuncType &f) {; 77 const void * p = &f;; 78 assert (p != nullptr);; 79 SetFuncPointer(&GSLFunctionAdapter<FuncType >::F);; 80 SetParams(const_cast<void *>(p));; 81 }; 82 ; 83 gsl_function * GetFunc() { return &fFunc; }; 84 ; 85 GSLFuncPointer FunctionPtr() { return fFunc.function; }; 86 ; 87 // evaluate the function; 88 double operator() (double x) { return GSL_FN_EVAL(&fFunc, x); }; 89 ; 90 /// check if function is valid (has been set); 91 bool IsValid() {; 92 return (fFunc.function != nullptr) ? true : false;; 93 }; 94 ; 95private:; 96 gsl_function fFunc;; 97 ; 98 ; 99};; 100 ; 101 ; 102 /**; 103 class to wrap a gsl_function_fdf (with derivatives); 104 */; 105 class GSLFunctionDerivWrapper {; 106 ; 107 public:; 108 ; 109 GSLFunctionDerivWrapper(); 110 {; 111 fFunc.f = nullptr;; 112 fFunc.df = nullptr;; 113 fFunc.fdf = nullptr;; 114 fFunc.params = nullptr;; 115 }; 116 ; 117 ; 118 void SetFuncPointer( GSLFuncPointer f) { fFunc.f = f; }; 119 void SetDerivPointer( GSLFuncPointer f) { fFunc.df = f; }; 120 void SetFdfPointer( GSLFdfPointe",MatchSource.WIKI,doc/master/GSLFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html
Integrability,depend,dependency,". ROOT: math/mathmore/src/GSLMCIntegrationWorkspace.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces ; GSLMCIntegrationWorkspace.h File Reference. #include ""gsl/gsl_math.h""; #include ""gsl/gsl_monte.h""; #include ""gsl/gsl_monte_vegas.h""; #include ""gsl/gsl_monte_miser.h""; #include ""gsl/gsl_monte_plain.h""; #include ""Math/MCParameters.h""; #include ""Math/MCIntegrationTypes.h"". Include dependency graph for GSLMCIntegrationWorkspace.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Math::GSLMCIntegrationWorkspace;  ; class  ROOT::Math::GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; class  ROOT::Math::GSLPlainIntegrationWorkspace;  ; class  ROOT::Math::GSLVegasIntegrationWorkspace;  workspace for VEGAS More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Math;  . mathmathmoresrcGSLMCIntegrationWorkspace.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/GSLMCIntegrationWorkspace_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMCIntegrationWorkspace_8h.html
Deployability,update,update," is free software; you can redistribute it and/or *; 9 * modify it under the terms of the GNU General Public License *; 10 * as published by the Free Software Foundation; either version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLMultiMinFunctionWrapper; 26//; 27// Created by: moneta at Sat Nov 13 14:54:41 2004; 28//; 29// Last update: Sat Nov 13 14:54:41 2004; 30//; 31#ifndef ROOT_Math_GSLMultiFitFunctionWrapper; 32#define ROOT_Math_GSLMultiFitFunctionWrapper; 33 ; 34#include ""gsl/gsl_multifit.h""; 35 ; 36#include ""GSLMultiFitFunctionAdapter.h""; 37 ; 38 ; 39#include <cassert>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 ; 46 typedef double ( * GSLMultiFitFPointer ) ( const gsl_vector *, void *, gsl_vector *);; 47 typedef void ( * GSLMultiFitDfPointer ) ( const gsl_vector *, void *, gsl_matrix *);; 48 typedef void ( * GSLMultiFitFdfPointer ) ( const gsl_vector *, void *, gsl_vector *, gsl_matrix *);; 49 ; 50 ; 51/**; 52 wrapper to a multi-dim function withtout derivatives for multi-dimensional; 53 minimization algorithm; 54 ; 55 @ingroup MultiMin; 56*/; 57 ; 58class GSLMultiFitFunctionWrapper {; 59 ; 60public:; 61 ; 62 GSLMultiFitFunctionWrapper(); 63 {; 64 fFunc.f = 0;; 65 fFunc.df = 0;; 66 fFunc.fdf = 0;; 67 fFunc.n = 0;; 68 fFunc.p = 0;; 69 fFunc.params = 0;; 70#if GS",MatchSource.WIKI,doc/master/GSLMultiFitFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiFitFunctionWrapper_8h_source.html
Energy Efficiency,adapt,adapting,"ction structure from a C++ function iterator and size and number of residuals; 78 template<class FuncVector>; 79 void SetFunction(const FuncVector & f, unsigned int nres, unsigned int npar ) {; 80 const void * p = &f;; 81 assert (p != 0);; 82 fFunc.f = &GSLMultiFitFunctionAdapter<FuncVector >::F;; 83 fFunc.df = &GSLMultiFitFunctionAdapter<FuncVector >::Df;; 84 fFunc.fdf = &GSLMultiFitFunctionAdapter<FuncVector >::FDf;; 85 fFunc.n = nres;; 86 fFunc.p = npar;; 87 fFunc.params = const_cast<void *>(p);; 88 }; 89 ; 90 gsl_multifit_function_fdf * GetFunc() { return &fFunc; }; 91 ; 92 ; 93 private:; 94 ; 95 gsl_multifit_function_fdf fFunc;; 96 ; 97};; 98 ; 99 ; 100 ; 101} // namespace Math; 102} // namespace ROOT; 103 ; 104#endif /* ROOT_Math_GSLMultiMinFunctionWrapper */; GSLMultiFitFunctionAdapter.h; f#define f(i)Definition RSha256.hxx:104; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; ROOT::Math::GSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The temp...Definition GSLMultiFitFunctionAdapter.h:69; ROOT::Math::GSLMultiFitFunctionWrapperwrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithmDefinition GSLMultiFitFunctionWrapper.h:58; ROOT::Math::GSLMultiFitFunctionWrapper::SetFunctionvoid SetFunction(const FuncVector &f, unsigned int nres, unsigned int npar)Fill gsl function structure from a C++ function iterator and size and number of residuals.Definition GSLMultiFitFunctionWrapper.h:79; ROOT::Math::GSLMultiFitFunctionWrapper::GetFuncgsl_multifit_function_fdf * GetFunc()Definition GSLMultiFitFunctionWrapper.h:90; ROOT::Math::GSLMultiFitFunctionWrapper::GSLMultiFitFunctionWrapperGSLMultiFitFunctionWrapper()Definition GSLMultiFitFunctionWrapper.h:62; ROOT::Math::GSLMultiFitFunctionWrapper::fFuncgsl_multifit_function_fdf fFuncDefinition GSLMultiFitFunctionWrapper.h:95; double; MathNamespace for new Math classes and function",MatchSource.WIKI,doc/master/GSLMultiFitFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiFitFunctionWrapper_8h_source.html
Integrability,wrap,wrapper,"opy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLMultiMinFunctionWrapper; 26//; 27// Created by: moneta at Sat Nov 13 14:54:41 2004; 28//; 29// Last update: Sat Nov 13 14:54:41 2004; 30//; 31#ifndef ROOT_Math_GSLMultiFitFunctionWrapper; 32#define ROOT_Math_GSLMultiFitFunctionWrapper; 33 ; 34#include ""gsl/gsl_multifit.h""; 35 ; 36#include ""GSLMultiFitFunctionAdapter.h""; 37 ; 38 ; 39#include <cassert>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 ; 46 typedef double ( * GSLMultiFitFPointer ) ( const gsl_vector *, void *, gsl_vector *);; 47 typedef void ( * GSLMultiFitDfPointer ) ( const gsl_vector *, void *, gsl_matrix *);; 48 typedef void ( * GSLMultiFitFdfPointer ) ( const gsl_vector *, void *, gsl_vector *, gsl_matrix *);; 49 ; 50 ; 51/**; 52 wrapper to a multi-dim function withtout derivatives for multi-dimensional; 53 minimization algorithm; 54 ; 55 @ingroup MultiMin; 56*/; 57 ; 58class GSLMultiFitFunctionWrapper {; 59 ; 60public:; 61 ; 62 GSLMultiFitFunctionWrapper(); 63 {; 64 fFunc.f = 0;; 65 fFunc.df = 0;; 66 fFunc.fdf = 0;; 67 fFunc.n = 0;; 68 fFunc.p = 0;; 69 fFunc.params = 0;; 70#if GSL_MAJOR_VERSION > 1; 71 fFunc.nevalf = 0;; 72 fFunc.nevaldf = 0;; 73#endif; 74 }; 75 ; 76 ; 77 /// Fill gsl function structure from a C++ function iterator and size and number of residuals; 78 template<class FuncVector>; 79 void SetFunction(const FuncVector & f, unsigned int nres, unsigned int npar ) {; 80 const void * p = &f;; 81 assert (p != 0);; 82 fFunc.f = &GSLMultiFitFunctionAdapter<FuncVector >::F;; 83 fFunc.df = &GSLMultiFitFunctionAdapter<FuncVector >::Df;; 84 fFunc.fdf = &GSLMultiFitFunctionAdapter<FuncVector >::FDf;; 85 fFunc.n = nres;; 86 fFunc.p = n",MatchSource.WIKI,doc/master/GSLMultiFitFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiFitFunctionWrapper_8h_source.html
Modifiability,adapt,adapting,"ction structure from a C++ function iterator and size and number of residuals; 78 template<class FuncVector>; 79 void SetFunction(const FuncVector & f, unsigned int nres, unsigned int npar ) {; 80 const void * p = &f;; 81 assert (p != 0);; 82 fFunc.f = &GSLMultiFitFunctionAdapter<FuncVector >::F;; 83 fFunc.df = &GSLMultiFitFunctionAdapter<FuncVector >::Df;; 84 fFunc.fdf = &GSLMultiFitFunctionAdapter<FuncVector >::FDf;; 85 fFunc.n = nres;; 86 fFunc.p = npar;; 87 fFunc.params = const_cast<void *>(p);; 88 }; 89 ; 90 gsl_multifit_function_fdf * GetFunc() { return &fFunc; }; 91 ; 92 ; 93 private:; 94 ; 95 gsl_multifit_function_fdf fFunc;; 96 ; 97};; 98 ; 99 ; 100 ; 101} // namespace Math; 102} // namespace ROOT; 103 ; 104#endif /* ROOT_Math_GSLMultiMinFunctionWrapper */; GSLMultiFitFunctionAdapter.h; f#define f(i)Definition RSha256.hxx:104; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; ROOT::Math::GSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The temp...Definition GSLMultiFitFunctionAdapter.h:69; ROOT::Math::GSLMultiFitFunctionWrapperwrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithmDefinition GSLMultiFitFunctionWrapper.h:58; ROOT::Math::GSLMultiFitFunctionWrapper::SetFunctionvoid SetFunction(const FuncVector &f, unsigned int nres, unsigned int npar)Fill gsl function structure from a C++ function iterator and size and number of residuals.Definition GSLMultiFitFunctionWrapper.h:79; ROOT::Math::GSLMultiFitFunctionWrapper::GetFuncgsl_multifit_function_fdf * GetFunc()Definition GSLMultiFitFunctionWrapper.h:90; ROOT::Math::GSLMultiFitFunctionWrapper::GSLMultiFitFunctionWrapperGSLMultiFitFunctionWrapper()Definition GSLMultiFitFunctionWrapper.h:62; ROOT::Math::GSLMultiFitFunctionWrapper::fFuncgsl_multifit_function_fdf fFuncDefinition GSLMultiFitFunctionWrapper.h:95; double; MathNamespace for new Math classes and function",MatchSource.WIKI,doc/master/GSLMultiFitFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiFitFunctionWrapper_8h_source.html
Testability,assert,assert,"6#include ""GSLMultiFitFunctionAdapter.h""; 37 ; 38 ; 39#include <cassert>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 ; 46 typedef double ( * GSLMultiFitFPointer ) ( const gsl_vector *, void *, gsl_vector *);; 47 typedef void ( * GSLMultiFitDfPointer ) ( const gsl_vector *, void *, gsl_matrix *);; 48 typedef void ( * GSLMultiFitFdfPointer ) ( const gsl_vector *, void *, gsl_vector *, gsl_matrix *);; 49 ; 50 ; 51/**; 52 wrapper to a multi-dim function withtout derivatives for multi-dimensional; 53 minimization algorithm; 54 ; 55 @ingroup MultiMin; 56*/; 57 ; 58class GSLMultiFitFunctionWrapper {; 59 ; 60public:; 61 ; 62 GSLMultiFitFunctionWrapper(); 63 {; 64 fFunc.f = 0;; 65 fFunc.df = 0;; 66 fFunc.fdf = 0;; 67 fFunc.n = 0;; 68 fFunc.p = 0;; 69 fFunc.params = 0;; 70#if GSL_MAJOR_VERSION > 1; 71 fFunc.nevalf = 0;; 72 fFunc.nevaldf = 0;; 73#endif; 74 }; 75 ; 76 ; 77 /// Fill gsl function structure from a C++ function iterator and size and number of residuals; 78 template<class FuncVector>; 79 void SetFunction(const FuncVector & f, unsigned int nres, unsigned int npar ) {; 80 const void * p = &f;; 81 assert (p != 0);; 82 fFunc.f = &GSLMultiFitFunctionAdapter<FuncVector >::F;; 83 fFunc.df = &GSLMultiFitFunctionAdapter<FuncVector >::Df;; 84 fFunc.fdf = &GSLMultiFitFunctionAdapter<FuncVector >::FDf;; 85 fFunc.n = nres;; 86 fFunc.p = npar;; 87 fFunc.params = const_cast<void *>(p);; 88 }; 89 ; 90 gsl_multifit_function_fdf * GetFunc() { return &fFunc; }; 91 ; 92 ; 93 private:; 94 ; 95 gsl_multifit_function_fdf fFunc;; 96 ; 97};; 98 ; 99 ; 100 ; 101} // namespace Math; 102} // namespace ROOT; 103 ; 104#endif /* ROOT_Math_GSLMultiMinFunctionWrapper */; GSLMultiFitFunctionAdapter.h; f#define f(i)Definition RSha256.hxx:104; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; ROOT::Math::GSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The temp...Definition GSLMulti",MatchSource.WIKI,doc/master/GSLMultiFitFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiFitFunctionWrapper_8h_source.html
Deployability,update,update," is free software; you can redistribute it and/or *; 9 * modify it under the terms of the GNU General Public License *; 10 * as published by the Free Software Foundation; either version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLMultiMinFunctionWrapper; 26//; 27// Created by: moneta at Sat Nov 13 14:54:41 2004; 28//; 29// Last update: Sat Nov 13 14:54:41 2004; 30//; 31#ifndef ROOT_Math_GSLMultiMinFunctionWrapper; 32#define ROOT_Math_GSLMultiMinFunctionWrapper; 33 ; 34#include ""gsl/gsl_multimin.h""; 35 ; 36#include ""GSLMultiMinFunctionAdapter.h""; 37 ; 38 ; 39#include <cassert>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 ; 46 typedef double ( * GSLMultiMinFuncPointer ) ( const gsl_vector *, void *);; 47 typedef void ( * GSLMultiMinDfPointer ) ( const gsl_vector *, void *, gsl_vector *);; 48 typedef void ( * GSLMultiMinFdfPointer ) ( const gsl_vector *, void *, double *, gsl_vector *);; 49 ; 50 ; 51/**; 52 wrapper to a multi-dim function withtout derivatives for multi-dimensional; 53 minimization algorithm; 54 ; 55 @ingroup MultiMin; 56*/; 57 ; 58class GSLMultiMinFunctionWrapper {; 59 ; 60public:; 61 ; 62 GSLMultiMinFunctionWrapper(); 63 {; 64 fFunc.f = nullptr;; 65 fFunc.n = 0;; 66 fFunc.params = nullptr;; 67 }; 68 ; 69 void SetFuncPointer( GSLMultiMinFuncPointer f) { fF",MatchSource.WIKI,doc/master/GSLMultiMinFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiMinFunctionWrapper_8h_source.html
Energy Efficiency,adapt,adapting,"efinition GSLMultiMinFunctionWrapper.h:69; ROOT::Math::GSLMultiMinFunctionWrapper::GetFuncgsl_multimin_function * GetFunc()Definition GSLMultiMinFunctionWrapper.h:83; ROOT::Math::GSLMultiMinFunctionWrapper::SetParamsvoid SetParams(void *p)Definition GSLMultiMinFunctionWrapper.h:71; ROOT::Math::GSLMultiMinFunctionWrapper::SetFunctionvoid SetFunction(const FuncType &f)Fill gsl function structure from a C++ Function class.Definition GSLMultiMinFunctionWrapper.h:75; ROOT::Math::GSLMultiMinFunctionWrapper::IsValidbool IsValid()Definition GSLMultiMinFunctionWrapper.h:85; ROOT::Math::GSLMultiMinFunctionWrapper::GSLMultiMinFunctionWrapperGSLMultiMinFunctionWrapper()Definition GSLMultiMinFunctionWrapper.h:62; ROOT::Math::GSLMultiMinFunctionWrapper::SetDimvoid SetDim(unsigned int n)Definition GSLMultiMinFunctionWrapper.h:70; ROOT::Math::GSLMultiMinFunctionWrapper::fFuncgsl_multimin_function fFuncDefinition GSLMultiMinFunctionWrapper.h:92; double; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::GSLMultiMinDfPointervoid(* GSLMultiMinDfPointer)(const gsl_vector *, void *, gsl_vector *)Definition GSLMultiMinFunctionWrapper.h:47; ROOT::Math::GSLMultiMinFuncPointerdouble(* GSLMultiMinFuncPointer)(const gsl_vector *, void *)Definition GSLMultiMinFunctionWrapper.h:46; ROOT::Math::GSLMultiMinFdfPointervoid(* GSLMultiMinFdfPointer)(const gsl_vector *, void *, double *, gsl_vector *)Definition GSLMultiMinFunctionWrapper.h:48; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Math::GSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin ...Definition GSLMultiMinFunctionAdapter.h:66. mathmathmoresrcGSLMultiMinFunctionWrapper.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/GSLMultiMinFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiMinFunctionWrapper_8h_source.html
Integrability,wrap,wrapper,"ved a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLMultiMinFunctionWrapper; 26//; 27// Created by: moneta at Sat Nov 13 14:54:41 2004; 28//; 29// Last update: Sat Nov 13 14:54:41 2004; 30//; 31#ifndef ROOT_Math_GSLMultiMinFunctionWrapper; 32#define ROOT_Math_GSLMultiMinFunctionWrapper; 33 ; 34#include ""gsl/gsl_multimin.h""; 35 ; 36#include ""GSLMultiMinFunctionAdapter.h""; 37 ; 38 ; 39#include <cassert>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 ; 46 typedef double ( * GSLMultiMinFuncPointer ) ( const gsl_vector *, void *);; 47 typedef void ( * GSLMultiMinDfPointer ) ( const gsl_vector *, void *, gsl_vector *);; 48 typedef void ( * GSLMultiMinFdfPointer ) ( const gsl_vector *, void *, double *, gsl_vector *);; 49 ; 50 ; 51/**; 52 wrapper to a multi-dim function withtout derivatives for multi-dimensional; 53 minimization algorithm; 54 ; 55 @ingroup MultiMin; 56*/; 57 ; 58class GSLMultiMinFunctionWrapper {; 59 ; 60public:; 61 ; 62 GSLMultiMinFunctionWrapper(); 63 {; 64 fFunc.f = nullptr;; 65 fFunc.n = 0;; 66 fFunc.params = nullptr;; 67 }; 68 ; 69 void SetFuncPointer( GSLMultiMinFuncPointer f) { fFunc.f = f; }; 70 void SetDim ( unsigned int n ) { fFunc.n = n; }; 71 void SetParams ( void * p) { fFunc.params = p; }; 72 ; 73 /// Fill gsl function structure from a C++ Function class; 74 template<class FuncType>; 75 void SetFunction(const FuncType &f) {; 76 const void * p = &f;; 77 assert (p != nullptr);; 78 SetFuncPointer(&GSLMultiMinFunctionAdapter<FuncType >::F);; 79 SetDim( f.NDim() );; 80 SetParams(const_cast<void *>(p));; 81 }; 82 ; 83 gsl_multimin_function * GetFunc() { return &fFunc; }; 84 ; 85 bool IsValid() {; 86 return (fFunc.f != nullptr) ?",MatchSource.WIKI,doc/master/GSLMultiMinFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiMinFunctionWrapper_8h_source.html
Modifiability,adapt,adapting,"efinition GSLMultiMinFunctionWrapper.h:69; ROOT::Math::GSLMultiMinFunctionWrapper::GetFuncgsl_multimin_function * GetFunc()Definition GSLMultiMinFunctionWrapper.h:83; ROOT::Math::GSLMultiMinFunctionWrapper::SetParamsvoid SetParams(void *p)Definition GSLMultiMinFunctionWrapper.h:71; ROOT::Math::GSLMultiMinFunctionWrapper::SetFunctionvoid SetFunction(const FuncType &f)Fill gsl function structure from a C++ Function class.Definition GSLMultiMinFunctionWrapper.h:75; ROOT::Math::GSLMultiMinFunctionWrapper::IsValidbool IsValid()Definition GSLMultiMinFunctionWrapper.h:85; ROOT::Math::GSLMultiMinFunctionWrapper::GSLMultiMinFunctionWrapperGSLMultiMinFunctionWrapper()Definition GSLMultiMinFunctionWrapper.h:62; ROOT::Math::GSLMultiMinFunctionWrapper::SetDimvoid SetDim(unsigned int n)Definition GSLMultiMinFunctionWrapper.h:70; ROOT::Math::GSLMultiMinFunctionWrapper::fFuncgsl_multimin_function fFuncDefinition GSLMultiMinFunctionWrapper.h:92; double; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::GSLMultiMinDfPointervoid(* GSLMultiMinDfPointer)(const gsl_vector *, void *, gsl_vector *)Definition GSLMultiMinFunctionWrapper.h:47; ROOT::Math::GSLMultiMinFuncPointerdouble(* GSLMultiMinFuncPointer)(const gsl_vector *, void *)Definition GSLMultiMinFunctionWrapper.h:46; ROOT::Math::GSLMultiMinFdfPointervoid(* GSLMultiMinFdfPointer)(const gsl_vector *, void *, double *, gsl_vector *)Definition GSLMultiMinFunctionWrapper.h:48; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Math::GSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin ...Definition GSLMultiMinFunctionAdapter.h:66. mathmathmoresrcGSLMultiMinFunctionWrapper.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/GSLMultiMinFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiMinFunctionWrapper_8h_source.html
Testability,assert,assert,"h""; 37 ; 38 ; 39#include <cassert>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 ; 46 typedef double ( * GSLMultiMinFuncPointer ) ( const gsl_vector *, void *);; 47 typedef void ( * GSLMultiMinDfPointer ) ( const gsl_vector *, void *, gsl_vector *);; 48 typedef void ( * GSLMultiMinFdfPointer ) ( const gsl_vector *, void *, double *, gsl_vector *);; 49 ; 50 ; 51/**; 52 wrapper to a multi-dim function withtout derivatives for multi-dimensional; 53 minimization algorithm; 54 ; 55 @ingroup MultiMin; 56*/; 57 ; 58class GSLMultiMinFunctionWrapper {; 59 ; 60public:; 61 ; 62 GSLMultiMinFunctionWrapper(); 63 {; 64 fFunc.f = nullptr;; 65 fFunc.n = 0;; 66 fFunc.params = nullptr;; 67 }; 68 ; 69 void SetFuncPointer( GSLMultiMinFuncPointer f) { fFunc.f = f; }; 70 void SetDim ( unsigned int n ) { fFunc.n = n; }; 71 void SetParams ( void * p) { fFunc.params = p; }; 72 ; 73 /// Fill gsl function structure from a C++ Function class; 74 template<class FuncType>; 75 void SetFunction(const FuncType &f) {; 76 const void * p = &f;; 77 assert (p != nullptr);; 78 SetFuncPointer(&GSLMultiMinFunctionAdapter<FuncType >::F);; 79 SetDim( f.NDim() );; 80 SetParams(const_cast<void *>(p));; 81 }; 82 ; 83 gsl_multimin_function * GetFunc() { return &fFunc; }; 84 ; 85 bool IsValid() {; 86 return (fFunc.f != nullptr) ? true : false;; 87 }; 88 ; 89 ; 90 private:; 91 ; 92 gsl_multimin_function fFunc;; 93 ; 94 };; 95 ; 96 ; 97/**; 98 Wrapper for a multi-dimensional function with derivatives used in GSL multidim; 99 minimization algorithm; 100 ; 101 @ingroup MultiMin; 102 ; 103 */; 104 class GSLMultiMinDerivFunctionWrapper {; 105 ; 106 public:; 107 ; 108 GSLMultiMinDerivFunctionWrapper(); 109 {; 110 fFunc.f = nullptr;; 111 fFunc.df = nullptr;; 112 fFunc.fdf = nullptr;; 113 fFunc.n = 0;; 114 fFunc.params = nullptr;; 115 }; 116 ; 117 ; 118 void SetFuncPointer( GSLMultiMinFuncPointer f) { fFunc.f = f; }; 119 void SetDerivPointer( GSLMultiMinDfPointer f) { fFunc.df = f; }; 120 void SetFdfPointer( G",MatchSource.WIKI,doc/master/GSLMultiMinFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiMinFunctionWrapper_8h_source.html
Availability,toler,tolerance,"LMultiRootFinder; 26//; 27// Created by: moneta at Sun Nov 14 11:27:11 2004; 28//; 29// Last update: Sun Nov 14 11:27:11 2004; 30//; 31 ; 32#include ""Math/IFunction.h""; 33#include ""Math/GSLMultiRootFinder.h""; 34#include ""GSLMultiRootSolver.h""; 35#include ""Math/Error.h""; 36 ; 37#include ""gsl/gsl_multiroots.h""; 38#include ""gsl/gsl_errno.h""; 39#include <cmath>; 40#include <iomanip>; 41 ; 42#include <algorithm>; 43#include <functional>; 44#include <cctype> // need to use c version of tolower defined here; 45 ; 46 ; 47namespace ROOT {; 48namespace Math {; 49 ; 50 // default values; 51 ; 52 int gDefaultMaxIter = 100;; 53 double gDefaultAbsTolerance = 1.E-6;; 54 double gDefaultRelTolerance = 1.E-10;; 55 ; 56// implementation of static methods; 57void GSLMultiRootFinder::SetDefaultTolerance(double abstol, double reltol ) {; 58 // set default tolerance; 59 gDefaultAbsTolerance = abstol;; 60 if (reltol > 0) gDefaultRelTolerance = reltol;; 61}; 62void GSLMultiRootFinder::SetDefaultMaxIterations(int maxiter) {; 63 // set default max iter; 64 gDefaultMaxIter = maxiter;; 65}; 66 ; 67GSLMultiRootFinder::GSLMultiRootFinder(EType type) :; 68 fIter(0), fStatus(-1), fPrintLevel(0),; 69 fType(type), fUseDerivAlgo(false),; 70 fSolver(nullptr); 71{; 72 // constructor for non derivative type; 73 fFunctions.reserve(2);; 74}; 75 ; 76GSLMultiRootFinder::GSLMultiRootFinder(EDerivType type) :; 77 fIter(0), fStatus(-1), fPrintLevel(0),; 78 fType(type), fUseDerivAlgo(true),; 79 fSolver(nullptr); 80{; 81 // constructor for non derivative type; 82 fFunctions.reserve(2);; 83}; 84 ; 85GSLMultiRootFinder::GSLMultiRootFinder(const char * name) :; 86 fIter(0), fStatus(-1), fPrintLevel(0),; 87 fType(0), fUseDerivAlgo(false),; 88 fSolver(nullptr); 89{; 90 // constructor for a string; 91 fFunctions.reserve(2);; 92 SetType(name);; 93}; 94 ; 95GSLMultiRootFinder::~GSLMultiRootFinder(); 96{; 97 // delete function wrapper; 98 ClearFunctions();; 99 if (fSolver) delete fSolver;; 100}; 101 ; 102void GSLMultiRootF",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
Deployability,update,update,"oundation, CERN/PH-SFT *; 7 * *; 8 * This library is free software; you can redistribute it and/or *; 9 * modify it under the terms of the GNU General Public License *; 10 * as published by the Free Software Foundation; either version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Implementation file for class GSLMultiRootFinder; 26//; 27// Created by: moneta at Sun Nov 14 11:27:11 2004; 28//; 29// Last update: Sun Nov 14 11:27:11 2004; 30//; 31 ; 32#include ""Math/IFunction.h""; 33#include ""Math/GSLMultiRootFinder.h""; 34#include ""GSLMultiRootSolver.h""; 35#include ""Math/Error.h""; 36 ; 37#include ""gsl/gsl_multiroots.h""; 38#include ""gsl/gsl_errno.h""; 39#include <cmath>; 40#include <iomanip>; 41 ; 42#include <algorithm>; 43#include <functional>; 44#include <cctype> // need to use c version of tolower defined here; 45 ; 46 ; 47namespace ROOT {; 48namespace Math {; 49 ; 50 // default values; 51 ; 52 int gDefaultMaxIter = 100;; 53 double gDefaultAbsTolerance = 1.E-6;; 54 double gDefaultRelTolerance = 1.E-10;; 55 ; 56// implementation of static methods; 57void GSLMultiRootFinder::SetDefaultTolerance(double abstol, double reltol ) {; 58 // set default tolerance; 59 gDefaultAbsTolerance = abstol;; 60 if (reltol > 0) gDefaultRelTolerance = reltol;; 61}; 62void GSLMultiRootFinder::SetDefaultMaxIterations(int maxiter) {; 63 ",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
Integrability,wrap,wrapper,"tFinder::SetDefaultMaxIterations(int maxiter) {; 63 // set default max iter; 64 gDefaultMaxIter = maxiter;; 65}; 66 ; 67GSLMultiRootFinder::GSLMultiRootFinder(EType type) :; 68 fIter(0), fStatus(-1), fPrintLevel(0),; 69 fType(type), fUseDerivAlgo(false),; 70 fSolver(nullptr); 71{; 72 // constructor for non derivative type; 73 fFunctions.reserve(2);; 74}; 75 ; 76GSLMultiRootFinder::GSLMultiRootFinder(EDerivType type) :; 77 fIter(0), fStatus(-1), fPrintLevel(0),; 78 fType(type), fUseDerivAlgo(true),; 79 fSolver(nullptr); 80{; 81 // constructor for non derivative type; 82 fFunctions.reserve(2);; 83}; 84 ; 85GSLMultiRootFinder::GSLMultiRootFinder(const char * name) :; 86 fIter(0), fStatus(-1), fPrintLevel(0),; 87 fType(0), fUseDerivAlgo(false),; 88 fSolver(nullptr); 89{; 90 // constructor for a string; 91 fFunctions.reserve(2);; 92 SetType(name);; 93}; 94 ; 95GSLMultiRootFinder::~GSLMultiRootFinder(); 96{; 97 // delete function wrapper; 98 ClearFunctions();; 99 if (fSolver) delete fSolver;; 100}; 101 ; 102void GSLMultiRootFinder::SetType(const char * name) {; 103 // set type using a string; 104 std::pair<bool,int> type = GetType(name);; 105 fUseDerivAlgo = type.first;; 106 fType = type.second;; 107}; 108 ; 109 ; 110int GSLMultiRootFinder::AddFunction(const ROOT::Math::IMultiGenFunction & func) {; 111 // add a new function in the vector; 112 ROOT::Math::IMultiGenFunction * f = func.Clone();; 113 if (!f) return 0;; 114 fFunctions.push_back(f);; 115 return fFunctions.size();; 116}; 117 ; 118void GSLMultiRootFinder::ClearFunctions() {; 119 // clear the function list; 120 for (unsigned int i = 0; i < fFunctions.size(); ++i) {; 121 if (fFunctions[i] != nullptr ) delete fFunctions[i];; 122 fFunctions[i] = nullptr;; 123 }; 124 fFunctions.clear();; 125}; 126 ; 127void GSLMultiRootFinder::Clear() {; 128 // clear the function list and the solver; 129 ClearFunctions();; 130 if (fSolver) Clear();; 131 fSolver = nullptr;; 132}; 133 ; 134 ; 135const double * GSLMultiRootFinder::X() co",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
Modifiability,config,configured,"0 std::cout << ""Number of iterations = "" << iter<< std::endl;; 311 ; 312 PrintState();; 313 }; 314 }; 315 fIter = iter;; 316 fStatus = status;; 317 return (fStatus == GSL_SUCCESS);; 318 ; 319}; 320 ; 321void GSLMultiRootFinder::PrintState(std::ostream & os) {; 322 // print current state; 323 if (!fSolver) return;; 324 double ndigits = std::log10( double( Dim() ) );; 325 int wi = int(ndigits)+1;; 326 const double * xtmp = fSolver->X();; 327 const double * ftmp = fSolver->FVal();; 328 os << ""Root values = "";; 329 for (unsigned int i = 0; i< Dim(); ++i); 330 os << ""x["" << std::setw(wi) << i << ""] = "" << std::setw(12) << xtmp[i] << "" "";; 331 os << std::endl;; 332 os << ""Function values = "";; 333 for (unsigned int i = 0; i< Dim(); ++i); 334 os << ""f["" << std::setw(wi) << i << ""] = "" << std::setw(12) << ftmp[i] << "" "";; 335 os << std::endl;; 336}; 337 ; 338 ; 339 ; 340} // namespace Math; 341} // namespace ROOT; Error.h; MATH_INFO_MSG#define MATH_INFO_MSG(loc, str)Pre-processor macro to report messages which can be configured to use ROOT error or simply an std::io...Definition Error.h:77; MATH_INFO_MSGVAL#define MATH_INFO_MSGVAL(loc, txt, x)Definition Error.h:101; MATH_ERROR_MSG#define MATH_ERROR_MSG(loc, str)Definition Error.h:83; GSLMultiRootFinder.h; GSLMultiRootSolver.h; IFunction.h; f#define f(i)Definition RSha256.hxx:104; GSL_SUCCESS#define GSL_SUCCESSDefinition RooAdaptiveGaussKronrodIntegrator1D.cxx:379; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count co",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
Testability,assert,assert,,MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
Usability,clear,clear,"erivative type; 82 fFunctions.reserve(2);; 83}; 84 ; 85GSLMultiRootFinder::GSLMultiRootFinder(const char * name) :; 86 fIter(0), fStatus(-1), fPrintLevel(0),; 87 fType(0), fUseDerivAlgo(false),; 88 fSolver(nullptr); 89{; 90 // constructor for a string; 91 fFunctions.reserve(2);; 92 SetType(name);; 93}; 94 ; 95GSLMultiRootFinder::~GSLMultiRootFinder(); 96{; 97 // delete function wrapper; 98 ClearFunctions();; 99 if (fSolver) delete fSolver;; 100}; 101 ; 102void GSLMultiRootFinder::SetType(const char * name) {; 103 // set type using a string; 104 std::pair<bool,int> type = GetType(name);; 105 fUseDerivAlgo = type.first;; 106 fType = type.second;; 107}; 108 ; 109 ; 110int GSLMultiRootFinder::AddFunction(const ROOT::Math::IMultiGenFunction & func) {; 111 // add a new function in the vector; 112 ROOT::Math::IMultiGenFunction * f = func.Clone();; 113 if (!f) return 0;; 114 fFunctions.push_back(f);; 115 return fFunctions.size();; 116}; 117 ; 118void GSLMultiRootFinder::ClearFunctions() {; 119 // clear the function list; 120 for (unsigned int i = 0; i < fFunctions.size(); ++i) {; 121 if (fFunctions[i] != nullptr ) delete fFunctions[i];; 122 fFunctions[i] = nullptr;; 123 }; 124 fFunctions.clear();; 125}; 126 ; 127void GSLMultiRootFinder::Clear() {; 128 // clear the function list and the solver; 129 ClearFunctions();; 130 if (fSolver) Clear();; 131 fSolver = nullptr;; 132}; 133 ; 134 ; 135const double * GSLMultiRootFinder::X() const {; 136 // return x; 137 return (fSolver != nullptr) ? fSolver->X() : nullptr;; 138}; 139const double * GSLMultiRootFinder::Dx() const {; 140 // return x; 141 return (fSolver != nullptr) ? fSolver->Dx() : nullptr;; 142}; 143const double * GSLMultiRootFinder::FVal() const {; 144 // return x; 145 return (fSolver != nullptr) ? fSolver->FVal() : nullptr;; 146}; 147const char * GSLMultiRootFinder::Name() const {; 148 // get GSL name; 149 return (fSolver != nullptr) ? fSolver->Name().c_str() : """";; 150}; 151 ; 152// bool GSLMultiRootFinder::AddFunction( c",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html
Availability,avail,available,"der file for class GSLMultiRootFinder; 26//; 27 ; 28#ifndef ROOT_Math_GSLMultiRootFinder; 29#define ROOT_Math_GSLMultiRootFinder; 30 ; 31 ; 32 ; 33#include ""Math/IFunction.h""; 34 ; 35#include ""Math/WrappedFunction.h""; 36 ; 37#include <vector>; 38#include <utility>; 39#include <iostream>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 class GSLMultiRootBaseSolver;; 46 ; 47 /** @defgroup MultiRoot Multidimensional ROOT finding; 48 Classes for finding the roots of a multi-dimensional system.; 49 @ingroup NumAlgo; 50 */; 51 ; 52 /**; 53 Class for Multidimensional root finding algorithms bassed on GSL. This class is used to solve a; 54 non-linear system of equations:; 55 ; 56 f1(x1,....xn) = 0; 57 f2(x1,....xn) = 0; 58 ..................; 59 fn(x1,....xn) = 0; 60 ; 61 See the GSL <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Root_002dFinding.html""> online manual</A> for; 62 information on the GSL MultiRoot finding algorithms; 63 ; 64 The available GSL algorithms require the derivatives of the supplied functions or not (they are; 65 computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the; 66 gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of; 67 functions impelmenting the ROOT::Math::IMultiGenFunction interface.; 68 The available algorithms requiring derivatives (see also the GSL; 69 <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-using-Derivatives.html"">documentation</A> ); 70 are the followings:; 71 <ul>; 72 <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridSJ</tt> with name <i>""HybridSJ""</i>: modified Powell's hybrid; 73 method as implemented in HYBRJ in MINPACK; 74 <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridJ</tt> with name <i>""HybridJ""</i>: unscaled version of the; 75 previous algorithm</li>; 76 <li><tt>ROOT::Math::GSLMultiRootFinder::kNewton</tt> with name <i>""Newton""</i>: Newt",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
Deployability,configurat,configurations,"ty string is returned; 238 const char * Name() const;; 239 ; 240 /*; 241 set print level; 242 level = 0 quiet (no messages print); 243 = 1 print only the result; 244 = 3 max debug. Print result at each iteration; 245 */; 246 void SetPrintLevel(int level) { fPrintLevel = level; }; 247 ; 248 /// return the print level; 249 int PrintLevel() const { return fPrintLevel; }; 250 ; 251 ; 252 //-- static methods to set configurations; 253 ; 254 /// set tolerance (absolute and relative); 255 /// relative tolerance is only use to verify the convergence; 256 /// do it is a minor parameter; 257 static void SetDefaultTolerance(double abstol, double reltol = 0 );; 258 ; 259 /// set maximum number of iterations; 260 static void SetDefaultMaxIterations(int maxiter);; 261 ; 262 /// print iteration state; 263 void PrintState(std::ostream & os = std::cout);; 264 ; 265 ; 266 protected:; 267 ; 268 // return type given a name; 269 std::pair<bool,int> GetType(const char * name);; 270 // clear list of functions; 271 void ClearFunctions();; 272 ; 273 ; 274 private:; 275 ; 276 int fIter; // current number of iterations; 277 int fStatus; // current status; 278 int fPrintLevel; // print level; 279 ; 280 // int fMaxIter; // max number of iterations; 281 // double fAbsTolerance; // absolute tolerance; 282 // double fRelTolerance; // relative tolerance; 283 int fType; // type of algorithm; 284 bool fUseDerivAlgo; // algorithm using derivative; 285 ; 286 GSLMultiRootBaseSolver * fSolver;; 287 std::vector<ROOT::Math::IMultiGenFunction *> fFunctions; //! transient Vector of the functions; 288 ; 289 ; 290 };; 291 ; 292 // use typedef for most sensible name; 293 typedef GSLMultiRootFinder MultiRootFinder;; 294 ; 295} // namespace Math; 296} // namespace ROOT; 297 ; 298 ; 299#endif /* ROOT_Math_GSLMultiRootFinder */; IFunction.h; f#define f(i)Definition RSha256.hxx:104; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTe",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
Integrability,interface,interface,"e <utility>; 39#include <iostream>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 class GSLMultiRootBaseSolver;; 46 ; 47 /** @defgroup MultiRoot Multidimensional ROOT finding; 48 Classes for finding the roots of a multi-dimensional system.; 49 @ingroup NumAlgo; 50 */; 51 ; 52 /**; 53 Class for Multidimensional root finding algorithms bassed on GSL. This class is used to solve a; 54 non-linear system of equations:; 55 ; 56 f1(x1,....xn) = 0; 57 f2(x1,....xn) = 0; 58 ..................; 59 fn(x1,....xn) = 0; 60 ; 61 See the GSL <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Root_002dFinding.html""> online manual</A> for; 62 information on the GSL MultiRoot finding algorithms; 63 ; 64 The available GSL algorithms require the derivatives of the supplied functions or not (they are; 65 computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the; 66 gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of; 67 functions impelmenting the ROOT::Math::IMultiGenFunction interface.; 68 The available algorithms requiring derivatives (see also the GSL; 69 <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-using-Derivatives.html"">documentation</A> ); 70 are the followings:; 71 <ul>; 72 <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridSJ</tt> with name <i>""HybridSJ""</i>: modified Powell's hybrid; 73 method as implemented in HYBRJ in MINPACK; 74 <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridJ</tt> with name <i>""HybridJ""</i>: unscaled version of the; 75 previous algorithm</li>; 76 <li><tt>ROOT::Math::GSLMultiRootFinder::kNewton</tt> with name <i>""Newton""</i>: Newton method </li>; 77 <li><tt>ROOT::Math::GSLMultiRootFinder::kGNewton</tt> with name <i>""GNewton""</i>: modified Newton method </li>; 78 </ul>; 79 The algorithms without derivatives (see also the GSL; 80 <A HREF=""http://www.gnu.org/software/gsl/manual/htm",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
Modifiability,config,configurations,"ty string is returned; 238 const char * Name() const;; 239 ; 240 /*; 241 set print level; 242 level = 0 quiet (no messages print); 243 = 1 print only the result; 244 = 3 max debug. Print result at each iteration; 245 */; 246 void SetPrintLevel(int level) { fPrintLevel = level; }; 247 ; 248 /// return the print level; 249 int PrintLevel() const { return fPrintLevel; }; 250 ; 251 ; 252 //-- static methods to set configurations; 253 ; 254 /// set tolerance (absolute and relative); 255 /// relative tolerance is only use to verify the convergence; 256 /// do it is a minor parameter; 257 static void SetDefaultTolerance(double abstol, double reltol = 0 );; 258 ; 259 /// set maximum number of iterations; 260 static void SetDefaultMaxIterations(int maxiter);; 261 ; 262 /// print iteration state; 263 void PrintState(std::ostream & os = std::cout);; 264 ; 265 ; 266 protected:; 267 ; 268 // return type given a name; 269 std::pair<bool,int> GetType(const char * name);; 270 // clear list of functions; 271 void ClearFunctions();; 272 ; 273 ; 274 private:; 275 ; 276 int fIter; // current number of iterations; 277 int fStatus; // current status; 278 int fPrintLevel; // print level; 279 ; 280 // int fMaxIter; // max number of iterations; 281 // double fAbsTolerance; // absolute tolerance; 282 // double fRelTolerance; // relative tolerance; 283 int fType; // type of algorithm; 284 bool fUseDerivAlgo; // algorithm using derivative; 285 ; 286 GSLMultiRootBaseSolver * fSolver;; 287 std::vector<ROOT::Math::IMultiGenFunction *> fFunctions; //! transient Vector of the functions; 288 ; 289 ; 290 };; 291 ; 292 // use typedef for most sensible name; 293 typedef GSLMultiRootFinder MultiRootFinder;; 294 ; 295} // namespace Math; 296} // namespace ROOT; 297 ; 298 ; 299#endif /* ROOT_Math_GSLMultiRootFinder */; IFunction.h; f#define f(i)Definition RSha256.hxx:104; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTe",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
Usability,simpl,simple,"MultiRootFinder();; 140 ; 141 // usually copying is non trivial, so we delete this; 142 GSLMultiRootFinder(const GSLMultiRootFinder &) = delete;; 143 GSLMultiRootFinder & operator = (const GSLMultiRootFinder &) = delete;; 144 GSLMultiRootFinder(GSLMultiRootFinder &&) = delete;; 145 GSLMultiRootFinder & operator = (GSLMultiRootFinder &&) = delete;; 146 ; 147 /// set the type for an algorithm without derivatives; 148 void SetType(EType type) {; 149 fType = type; fUseDerivAlgo = false;; 150 }; 151 ; 152 /// set the type of algorithm using derivatives; 153 void SetType(EDerivType type) {; 154 fType = type; fUseDerivAlgo = true;; 155 }; 156 ; 157 /// set the type using a string; 158 void SetType(const char * name);; 159 ; 160 /*; 161 add the list of functions f1(x1,..xn),...fn(x1,...xn). The list must contain pointers of; 162 ROOT::Math::IMultiGenFunctions. The method requires the; 163 the begin and end of the list iterator.; 164 The list can be any stl container or a simple array of ROOT::Math::IMultiGenFunctions* or; 165 whatever implementing an iterator.; 166 If using a derivative type algorithm the function pointers must implement the; 167 ROOT::Math::IMultiGradFunction interface; 168 */; 169 template<class FuncIterator>; 170 bool SetFunctionList( FuncIterator begin, FuncIterator end) {; 171 bool ret = true;; 172 for (FuncIterator itr = begin; itr != end; ++itr) {; 173 const ROOT::Math::IMultiGenFunction * f = *itr;; 174 // Using bitwise operator &= require the operand to be a bool; 175 // to have the intended effect here.; 176 ret &= (AddFunction( *f) != 0);; 177 }; 178 return ret;; 179 }; 180 ; 181 /*; 182 add (set) a single function fi(x1,...xn) which is part of the system of; 183 specifying the begin and end of the iterator.; 184 If using a derivative type algorithm the function must implement the; 185 ROOT::Math::IMultiGradFunction interface; 186 Return the current number of function in the list and 0 if failed to add the function; 187 */; 188 int AddFunction( co",MatchSource.WIKI,doc/master/GSLMultiRootFinder_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html
Deployability,update,update," free software; you can redistribute it and/or *; 9 * modify it under the terms of the GNU General Public License *; 10 * as published by the Free Software Foundation; either version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLMultiRootFunctionWrapper; 26//; 27// Created by: moneta at Sat Nov 13 14:54:41 2004; 28//; 29// Last update: Sat Nov 13 14:54:41 2004; 30//; 31#ifndef ROOT_Math_GSLMultiRootFunctionWrapper; 32#define ROOT_Math_GSLMultiRootFunctionWrapper; 33 ; 34#include ""gsl/gsl_multiroots.h""; 35 ; 36#include ""GSLMultiRootFunctionAdapter.h""; 37 ; 38 ; 39#include <cassert>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 ; 46// can re-use same type for multi-fit; 47 ; 48 typedef double ( * GSLMultiRootFPointer ) ( const gsl_vector *, void *, gsl_vector *);; 49 typedef void ( * GSLMultiRootDfPointer ) ( const gsl_vector *, void *, gsl_matrix *);; 50 typedef void ( * GSLMultiRootFdfPointer ) ( const gsl_vector *, void *, gsl_vector *, gsl_matrix *);; 51 ; 52 ; 53/**; 54 wrapper to a multi-dim function without derivatives for multi roots; 55 algorithm; 56*/; 57class GSLMultiRootFunctionWrapper {; 58 ; 59public:; 60 ; 61 GSLMultiRootFunctionWrapper(); 62 {; 63 fFunc.f = nullptr;; 64 fFunc.n = 0;; 65 fFunc.params = nullptr;; 66 }; 67 ; 68 ; 69 /// Fill gsl function struct",MatchSource.WIKI,doc/master/GSLMultiRootFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFunctionWrapper_8h_source.html
Energy Efficiency,adapt,adapting,"; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; ROOT::Math::GSLMultiRootDerivFunctionWrapperwrapper to a multi-dim function with derivatives for multi roots algorithmDefinition GSLMultiRootFunctionWrapper.h:96; ROOT::Math::GSLMultiRootDerivFunctionWrapper::GSLMultiRootDerivFunctionWrapperGSLMultiRootDerivFunctionWrapper()Definition GSLMultiRootFunctionWrapper.h:100; ROOT::Math::GSLMultiRootDerivFunctionWrapper::GetFunctionsgsl_multiroot_function_fdf * GetFunctions()Definition GSLMultiRootFunctionWrapper.h:122; ROOT::Math::GSLMultiRootDerivFunctionWrapper::fFuncgsl_multiroot_function_fdf fFuncDefinition GSLMultiRootFunctionWrapper.h:127; ROOT::Math::GSLMultiRootDerivFunctionWrapper::SetFunctionsvoid SetFunctions(const FuncVector &f, unsigned int n)Fill gsl function structure from a C++ function iterator and size and number of residuals.Definition GSLMultiRootFunctionWrapper.h:112; ROOT::Math::GSLMultiRootFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The tem...Definition GSLMultiRootFunctionAdapter.h:68; ROOT::Math::GSLMultiRootFunctionWrapperwrapper to a multi-dim function without derivatives for multi roots algorithmDefinition GSLMultiRootFunctionWrapper.h:57; ROOT::Math::GSLMultiRootFunctionWrapper::fFuncgsl_multiroot_function fFuncDefinition GSLMultiRootFunctionWrapper.h:84; ROOT::Math::GSLMultiRootFunctionWrapper::GetFunctionsgsl_multiroot_function * GetFunctions()Definition GSLMultiRootFunctionWrapper.h:79; ROOT::Math::GSLMultiRootFunctionWrapper::GSLMultiRootFunctionWrapperGSLMultiRootFunctionWrapper()Definition GSLMultiRootFunctionWrapper.h:61; ROOT::Math::GSLMultiRootFunctionWrapper::SetFunctionsvoid SetFunctions(const FuncVector &f, unsigned int n)Fill gsl function structure from a C++ function iterator and size and number of residuals.Definition GSLMultiRootFunctionWrapper.h:71; double; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math clas",MatchSource.WIKI,doc/master/GSLMultiRootFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFunctionWrapper_8h_source.html
Integrability,wrap,wrapper," the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLMultiRootFunctionWrapper; 26//; 27// Created by: moneta at Sat Nov 13 14:54:41 2004; 28//; 29// Last update: Sat Nov 13 14:54:41 2004; 30//; 31#ifndef ROOT_Math_GSLMultiRootFunctionWrapper; 32#define ROOT_Math_GSLMultiRootFunctionWrapper; 33 ; 34#include ""gsl/gsl_multiroots.h""; 35 ; 36#include ""GSLMultiRootFunctionAdapter.h""; 37 ; 38 ; 39#include <cassert>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 ; 46// can re-use same type for multi-fit; 47 ; 48 typedef double ( * GSLMultiRootFPointer ) ( const gsl_vector *, void *, gsl_vector *);; 49 typedef void ( * GSLMultiRootDfPointer ) ( const gsl_vector *, void *, gsl_matrix *);; 50 typedef void ( * GSLMultiRootFdfPointer ) ( const gsl_vector *, void *, gsl_vector *, gsl_matrix *);; 51 ; 52 ; 53/**; 54 wrapper to a multi-dim function without derivatives for multi roots; 55 algorithm; 56*/; 57class GSLMultiRootFunctionWrapper {; 58 ; 59public:; 60 ; 61 GSLMultiRootFunctionWrapper(); 62 {; 63 fFunc.f = nullptr;; 64 fFunc.n = 0;; 65 fFunc.params = nullptr;; 66 }; 67 ; 68 ; 69 /// Fill gsl function structure from a C++ function iterator and size and number of residuals; 70 template<class FuncVector>; 71 void SetFunctions(const FuncVector & f, unsigned int n ) {; 72 const void * p = &f;; 73 assert (p != nullptr);; 74 fFunc.f = &GSLMultiRootFunctionAdapter<FuncVector >::F;; 75 fFunc.n = n;; 76 fFunc.params = const_cast<void *>(p);; 77 }; 78 ; 79 gsl_multiroot_function * GetFunctions() { return &fFunc; }; 80 ; 81 ; 82 private:; 83 ; 84 gsl_multiroot_function fFunc;; 85 ; 86};; 87 ; 88 ; 89/**; 90 wrapper to a multi-dim function with derivatives for multi roots; 91 alg",MatchSource.WIKI,doc/master/GSLMultiRootFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFunctionWrapper_8h_source.html
Modifiability,adapt,adapting,"; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; ROOT::Math::GSLMultiRootDerivFunctionWrapperwrapper to a multi-dim function with derivatives for multi roots algorithmDefinition GSLMultiRootFunctionWrapper.h:96; ROOT::Math::GSLMultiRootDerivFunctionWrapper::GSLMultiRootDerivFunctionWrapperGSLMultiRootDerivFunctionWrapper()Definition GSLMultiRootFunctionWrapper.h:100; ROOT::Math::GSLMultiRootDerivFunctionWrapper::GetFunctionsgsl_multiroot_function_fdf * GetFunctions()Definition GSLMultiRootFunctionWrapper.h:122; ROOT::Math::GSLMultiRootDerivFunctionWrapper::fFuncgsl_multiroot_function_fdf fFuncDefinition GSLMultiRootFunctionWrapper.h:127; ROOT::Math::GSLMultiRootDerivFunctionWrapper::SetFunctionsvoid SetFunctions(const FuncVector &f, unsigned int n)Fill gsl function structure from a C++ function iterator and size and number of residuals.Definition GSLMultiRootFunctionWrapper.h:112; ROOT::Math::GSLMultiRootFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The tem...Definition GSLMultiRootFunctionAdapter.h:68; ROOT::Math::GSLMultiRootFunctionWrapperwrapper to a multi-dim function without derivatives for multi roots algorithmDefinition GSLMultiRootFunctionWrapper.h:57; ROOT::Math::GSLMultiRootFunctionWrapper::fFuncgsl_multiroot_function fFuncDefinition GSLMultiRootFunctionWrapper.h:84; ROOT::Math::GSLMultiRootFunctionWrapper::GetFunctionsgsl_multiroot_function * GetFunctions()Definition GSLMultiRootFunctionWrapper.h:79; ROOT::Math::GSLMultiRootFunctionWrapper::GSLMultiRootFunctionWrapperGSLMultiRootFunctionWrapper()Definition GSLMultiRootFunctionWrapper.h:61; ROOT::Math::GSLMultiRootFunctionWrapper::SetFunctionsvoid SetFunctions(const FuncVector &f, unsigned int n)Fill gsl function structure from a C++ function iterator and size and number of residuals.Definition GSLMultiRootFunctionWrapper.h:71; double; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math clas",MatchSource.WIKI,doc/master/GSLMultiRootFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFunctionWrapper_8h_source.html
Testability,assert,assert,"T_Math_GSLMultiRootFunctionWrapper; 32#define ROOT_Math_GSLMultiRootFunctionWrapper; 33 ; 34#include ""gsl/gsl_multiroots.h""; 35 ; 36#include ""GSLMultiRootFunctionAdapter.h""; 37 ; 38 ; 39#include <cassert>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 ; 46// can re-use same type for multi-fit; 47 ; 48 typedef double ( * GSLMultiRootFPointer ) ( const gsl_vector *, void *, gsl_vector *);; 49 typedef void ( * GSLMultiRootDfPointer ) ( const gsl_vector *, void *, gsl_matrix *);; 50 typedef void ( * GSLMultiRootFdfPointer ) ( const gsl_vector *, void *, gsl_vector *, gsl_matrix *);; 51 ; 52 ; 53/**; 54 wrapper to a multi-dim function without derivatives for multi roots; 55 algorithm; 56*/; 57class GSLMultiRootFunctionWrapper {; 58 ; 59public:; 60 ; 61 GSLMultiRootFunctionWrapper(); 62 {; 63 fFunc.f = nullptr;; 64 fFunc.n = 0;; 65 fFunc.params = nullptr;; 66 }; 67 ; 68 ; 69 /// Fill gsl function structure from a C++ function iterator and size and number of residuals; 70 template<class FuncVector>; 71 void SetFunctions(const FuncVector & f, unsigned int n ) {; 72 const void * p = &f;; 73 assert (p != nullptr);; 74 fFunc.f = &GSLMultiRootFunctionAdapter<FuncVector >::F;; 75 fFunc.n = n;; 76 fFunc.params = const_cast<void *>(p);; 77 }; 78 ; 79 gsl_multiroot_function * GetFunctions() { return &fFunc; }; 80 ; 81 ; 82 private:; 83 ; 84 gsl_multiroot_function fFunc;; 85 ; 86};; 87 ; 88 ; 89/**; 90 wrapper to a multi-dim function with derivatives for multi roots; 91 algorithm; 92 ; 93 @ingroup MultiRoot; 94*/; 95 ; 96class GSLMultiRootDerivFunctionWrapper {; 97 ; 98public:; 99 ; 100 GSLMultiRootDerivFunctionWrapper(); 101 {; 102 fFunc.f = nullptr;; 103 fFunc.df = nullptr;; 104 fFunc.fdf = nullptr;; 105 fFunc.n = 0;; 106 fFunc.params = nullptr;; 107 }; 108 ; 109 ; 110 /// Fill gsl function structure from a C++ function iterator and size and number of residuals; 111 template<class FuncVector>; 112 void SetFunctions(const FuncVector & f, unsigned int n ) {; 113 const vo",MatchSource.WIKI,doc/master/GSLMultiRootFunctionWrapper_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLMultiRootFunctionWrapper_8h_source.html
Availability,avail,available,"USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLRandom; 26//; 27// Created by: moneta at Sun Nov 21 16:26:03 2004; 28//; 29// Last update: Sun Nov 21 16:26:03 2004; 30//; 31#ifndef ROOT_Math_GSLRndmEngines; 32#define ROOT_Math_GSLRndmEngines; 33 ; 34#include <string>; 35#include <vector>; 36 ; 37 ; 38namespace ROOT {; 39namespace Math {; 40 ; 41 ; 42 class GSLRngWrapper;; 43 class GSLMCIntegrator;; 44 ; 45 //_________________________________________________________________; 46 /**; 47 GSLRandomEngine; 48 Base class for all GSL random engines,; 49 normally user instantiate the derived classes; 50 which creates internally the generator.; 51 ; 52 The main GSL generators (see; 53 <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-number-generator-algorithms.html"">; 54 here</A>) are available as derived classes; 55 In addition to generate uniform numbers it provides method for; 56 generating numbers according to pre-defined distributions; 57 using the GSL functions from; 58 <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html"">; 59 GSL random number distributions</A>.; 60 ; 61 ; 62 ; 63 @ingroup Random; 64 */; 65 class GSLRandomEngine {; 66 ; 67 friend class GSLMCIntegrator;; 68 ; 69 public:; 70 ; 71 /**; 72 default constructor. No creation of rng is done.; 73 If then Initialize() is called an engine is created; 74 based on default GSL type (MT); 75 */; 76 GSLRandomEngine();; 77 ; 78 /**; 79 create from an existing rng.; 80 User manage the rng pointer which is then deleted only by calling Terminate(); 81 */; 82 GSLRandomEngine( GSLRngWrapper * rng);; 83 ; 84 /**; 85 Copy constructor : clone the contained GSL generator; 86 */; 87 GSLRandomEngine(const GSLRandomEngine & eng);; 88 ; 89 /**; 90 Assignment operator : make a deep copy of the contained GSL generator; 91 */; 92 GSLRandomEngine & operator=(const GSLRandomEngine ",MatchSource.WIKI,doc/master/GSLRndmEngines_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLRndmEngines_8h_source.html
Deployability,update,update,"ndation; either version 2 *; 11 * of the License, or (at your option) any later version. *; 12 * *; 13 * This library is distributed in the hope that it will be useful, *; 14 * but WITHOUT ANY WARRANTY; without even the implied warranty of *; 15 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; 16 * General Public License for more details. *; 17 * *; 18 * You should have received a copy of the GNU General Public License *; 19 * along with this library (see file COPYING); if not, write *; 20 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 21 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 22 * *; 23 **********************************************************************/; 24 ; 25// Header file for class GSLRandom; 26//; 27// Created by: moneta at Sun Nov 21 16:26:03 2004; 28//; 29// Last update: Sun Nov 21 16:26:03 2004; 30//; 31#ifndef ROOT_Math_GSLRndmEngines; 32#define ROOT_Math_GSLRndmEngines; 33 ; 34#include <string>; 35#include <vector>; 36 ; 37 ; 38namespace ROOT {; 39namespace Math {; 40 ; 41 ; 42 class GSLRngWrapper;; 43 class GSLMCIntegrator;; 44 ; 45 //_________________________________________________________________; 46 /**; 47 GSLRandomEngine; 48 Base class for all GSL random engines,; 49 normally user instantiate the derived classes; 50 which creates internally the generator.; 51 ; 52 The main GSL generators (see; 53 <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-number-generator-algorithms.html"">; 54 here</A>) are available as derived classes; 55 In addition to generate uniform numbers it provides method for; 56 generating numbers according to pre-defined distributions; 57 using the GSL functions from; 58 <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html"">; 59 GSL random number distributions</A>.; 60 ; 61 ; 62 ; 63 @ingroup Random; 64 */; 65 class GSLRandomEngine {; 66 ; 67 friend class GSLMCIntegrator;; 68 ; 69 public:; 70 ; 71 /**; 72 default c",MatchSource.WIKI,doc/master/GSLRndmEngines_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLRndmEngines_8h_source.html
Integrability,message,message,"f then Initialize() is called an engine is created; 74 based on default GSL type (MT); 75 */; 76 GSLRandomEngine();; 77 ; 78 /**; 79 create from an existing rng.; 80 User manage the rng pointer which is then deleted only by calling Terminate(); 81 */; 82 GSLRandomEngine( GSLRngWrapper * rng);; 83 ; 84 /**; 85 Copy constructor : clone the contained GSL generator; 86 */; 87 GSLRandomEngine(const GSLRandomEngine & eng);; 88 ; 89 /**; 90 Assignment operator : make a deep copy of the contained GSL generator; 91 */; 92 GSLRandomEngine & operator=(const GSLRandomEngine & eng);; 93 ; 94 /**; 95 initialize the generator; 96 If no rng is present the default one based on Mersenne and Twister is created; 97 */; 98 void Initialize();; 99 ; 100 /**; 101 delete pointer to contained rng; 102 */; 103 void Terminate();; 104 ; 105 /**; 106 call Terminate(); 107 */; 108 virtual ~GSLRandomEngine();; 109 ; 110 /**; 111 Generate a random number between ]0,1]; 112 0 is excluded and 1 is included; 113 */; 114 double operator() () const;; 115 ; 116 /**; 117 Generate a random number between ]0,1]; 118 0 is excluded and 1 is included; 119 */; 120 double Rndm() const { return (*this)(); }; 121 ; 122 /**; 123 Generate an integer number between [0,max-1] (including 0 and max-1); 124 if max is larger than available range of algorithm; 125 an error message is printed and zero is returned; 126 */; 127 unsigned long RndmInt(unsigned long max) const;; 128 /**; 129 Generate an integer number between [0,max_generator-1] (including 0 and max-1); 130 if max is larger than available range of algorithm; 131 an error message is printed and zero is returned; 132 */; 133 unsigned long IntRndm() const {; 134 return RndmInt(MaxInt()); // max return the largest value the generator can give +1; 135 }; 136 ; 137 /**; 138 Generate an array of random numbers.; 139 The iterators points to the random numbers; 140 */; 141 template<class Iterator>; 142 void RandomArray(Iterator begin, Iterator end) const {; 143 for ( Ite",MatchSource.WIKI,doc/master/GSLRndmEngines_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GSLRndmEngines_8h_source.html
Availability,mask,mask," structure) More...;  ; struct  Rectangle_t;  Rectangle structure (maps to the X11 XRectangle structure) More...;  ; struct  Segment_t;  Used for drawing line segments (maps to the X11 XSegments structure) More...;  ; struct  SetWindowAttributes_t;  Attributes that can be used when creating or changing a window. More...;  ; struct  WindowAttributes_t;  Window attributes that can be inquired. More...;  . Typedefs; typedef Handle_t Atom_t;  WM token. ;  ; typedef Handle_t Colormap_t;  Colormap handle. ;  ; typedef Handle_t Cursor_t;  Cursor handle. ;  ; typedef Handle_t Display_t;  Display handle. ;  ; typedef Handle_t Drawable_t;  Drawable handle. ;  ; typedef Handle_t FontH_t;  Font handle (as opposed to Font_t which is an index) ;  ; typedef Handle_t FontStruct_t;  Pointer to font structure. ;  ; typedef Handle_t GContext_t;  Graphics context handle. ;  ; typedef ULongptr_t Handle_t;  Generic resource handle. ;  ; typedef Handle_t KeySym_t;  Key symbol handle. ;  ; typedef UInt_t Mask_t;  Structure mask type. ;  ; typedef ULong_t Pixel_t;  Pixel value. ;  ; typedef Handle_t Pixmap_t;  Pixmap handle. ;  ; typedef Handle_t Region_t;  Region handle. ;  ; typedef ULong_t Time_t;  Event time. ;  ; typedef Handle_t Visual_t;  Visual handle. ;  ; typedef Handle_t Window_t;  Window handle. ;  . Enumerations; enum  { kDefaultScrollBarWidth = 16; };  ; enum  ECursor { ;   kBottomLeft; , kBottomRight; , kTopLeft; , kTopRight; , ;   kBottomSide; , kLeftSide; , kTopSide; , kRightSide; , ;   kMove; , kCross; , kArrowHor; , kArrowVer; , ;   kHand; , kRotate; , kPointer; , kArrowRight; , ;   kCaret; , kWatch; , kNoDrop. };  ; enum  EFrameType { ;   kChildFrame = 0; , kMainFrame = (1ULL << ( 0 )); , kVerticalFrame = (1ULL << ( 1 )); , kHorizontalFrame = (1ULL << ( 2 )); , ;   kSunkenFrame = (1ULL << ( 3 )); , kRaisedFrame = (1ULL << ( 4 )); , kDoubleBorder = (1ULL << ( 5 )); , kFitWidth = (1ULL << ( 6 )); , ;   kFixedWidth = (1ULL << ( 7 )); , kFitHeight = (1ULL << ( 8 )); , kFixed",MatchSource.WIKI,doc/master/GuiTypes_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GuiTypes_8h.html
Integrability,depend,dependency,". ROOT: core/gui/inc/GuiTypes.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs |; Enumerations |; Variables ; GuiTypes.h File Reference. #include ""Rtypes.h""; #include <climits>. Include dependency graph for GuiTypes.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  ColorStruct_t;  ; struct  Event_t;  Event structure. More...;  ; struct  GCValues_t;  Graphics context structure. More...;  ; struct  PictureAttributes_t;  ; struct  Point_t;  Point structure (maps to the X11 XPoint structure) More...;  ; struct  Rectangle_t;  Rectangle structure (maps to the X11 XRectangle structure) More...;  ; struct  Segment_t;  Used for drawing line segments (maps to the X11 XSegments structure) More...;  ; struct  SetWindowAttributes_t;  Attributes that can be used when creating or changing a window. More...;  ; struct  WindowAttributes_t;  Window attributes that can be inquired. More...;  . Typedefs; typedef Handle_t Atom_t;  WM token. ;  ; typedef Handle_t Colormap_t;  Colormap handle. ;  ; typedef Handle_t Cursor_t;  Cursor handle. ;  ; typedef Handle_t Display_t;  Display handle. ;  ; typedef Handle_t Drawable_t;  Drawable handle. ;  ; typedef Handle_t FontH_t;  Font handle (as opposed to Font_t which is an index) ;  ; typedef Handle_t FontStruct_t;  Pointer to font structure. ;  ; typedef Handle_t GContext_t;  Graphics context handle. ;  ; typedef ULongptr_t Handle_t;  Generic resource handle. ;  ; typedef Handle_t KeySym_t;  Key symbol handle. ;  ; typedef UInt_t Mask_t;  Structure mask type. ;  ; typedef ULong_t Pixel_t;  Pixel value. ;  ; typedef Handle_t Pixmap_t;  Pixmap handle. ;  ; typedef Handle_t Region_t;  Region handle. ;  ; typedef ULong_t Time_t;  Event time. ;  ; typedef Handle_t Visual_",MatchSource.WIKI,doc/master/GuiTypes_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/GuiTypes_8h.html
Testability,test,test,". ROOT: tutorials/gl/gviz3d.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. gviz3d.C File ReferenceTutorials » OpenGL tutorials. Detailed Description; Simple TStructViewer tutorial. ; ; #include ""TRandom.h""; #include ""TList.h""; #include ""TROOT.h""; #include ""TStructViewer.h""; ; const Int_t ncl =12;; const char *clnames[ncl] = {""TH1F"",""TGraph"",""TGraphErrors"",""TF1"",""TPaveText"",; ""TAxis"",""TF2"",""TH2D"",""TLatex"",""TText"",""TCutG"",""THnSparseF""};; ; // Function creating elements of lists; void MakeCrazy(TList *list, Int_t maxDepth, Int_t maxObjects, Float_t pList); {; Int_t nobj = gRandom->Uniform(0,maxObjects);; for (Int_t i = 0; i < nobj; i++) {; if (maxDepth && gRandom->Rndm() < pList) {; TList *slist = new TList();; slist->SetName(Form(""list_%d_%d"",maxDepth,i));; list->Add(slist);; MakeCrazy(slist,maxDepth-1,maxObjects,pList);; } else {; Int_t icl = (Int_t)gRandom->Uniform(0,ncl);; TNamed *named = (TNamed*)gROOT->ProcessLine(Form(""new %s;"",clnames[icl]));; named->SetName(Form(""%s_%d_%d"",clnames[icl],maxDepth,i));; list->Add(named);; }; }; }; ; // function creating a hierarchy of objects to test the TStructViewer; TList *crazy(Int_t maxDepth=5, Int_t maxObjects=20, Float_t pList=0.2); {; TList *list = new TList();; list->SetName(""SuperList"");; MakeCrazy(list,maxDepth,maxObjects,pList);; gROOT->GetListOfTasks()->Add(list);; return list;; }; ; // function adding colors to viewer; void FillColorsMap(TStructViewer* sv); {; for (int i = 0; i < ncl ; i++); sv->SetColor(clnames[i], (Int_t)gRandom->Integer(8)+2);; }; ; void gviz3d(); {; // Creating a pointer to list; TList* pointer = crazy(2,10);; ; // Creating a viewer; TStructViewer* sv = new TStructViewer(pointer);; ; // adding colors; FillColorsMap(sv);; ; sv->Draw();; }; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; TList.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRan",MatchSource.WIKI,doc/master/gviz3d_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/gviz3d_8C.html
Availability,error,error,"ax());; line->Draw();; ; // Have the number of entries on the first histogram (to cross check when running; // with entry lists); TPaveStats *psdmd = (TPaveStats *)hdmd->GetListOfFunctions()->FindObject(""stats"");; psdmd->SetOptStat(1110);; c1->Modified();; ; //save the entry list to a Root file if one was produced; if (fillList) {; elist = dynamic_cast<TEntryList*>(fOutput->FindObject(""elist""));; if (elist) {; TFile efile(""elist.root"",""recreate"");; elist->Write();; } else {; Error(""Terminate"", ""entry list requested but not found in output"");; }; }; }; f#define f(i)Definition RSha256.hxx:104; Bool_tbool Bool_tDefinition RtypesCore.h:63; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; Long64_tlong long Long64_tDefinition RtypesCore.h:69; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; gDirectory#define gDirectoryDefinition TDirectory.h:384; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; gDebugInt_t gDebugDefinition TROOT.cxx:597; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TEntryListA List of entry numbers in a TTree or TChain.Definition TEntryList.h:26; TEntryList::Entervirtual bool Enter(Long64_t entry, TTree *tree=nullptr)Add entry #entry to the list.Definition TEntryList.cxx:631; TEntryList::SetDirectoryvirtual void SetDirectory(TDirectory *dir)Add reference to directory dir. dir can be 0.Definit",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
Energy Efficiency,efficient,efficient,". ROOT: tutorials/tree/h1analysisProxy.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1analysisProxy.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of analysis class for the H1 data using code generated by MakeProxy. ; This file uses 4 large data sets from the H1 collaboration at DESY Hamburg. One can access these data sets (277 MBytes) from the standard Root web site at: https://root.cern/files/h1/ The Physics plots below generated by this example cannot be produced when using smaller data sets.; There are several ways to analyze data stored in a Root Tree; Using TTree::Draw: This is very convenient and efficient for small tasks. A TTree::Draw call produces one histogram at the time. The histogram is automatically generated. The selection expression may be specified in the command line.; Using the TTreeViewer: This is a graphical interface to TTree::Draw with the same functionality.; Using the code generated by TTree::MakeClass: In this case, the user creates an instance of the analysis class. They have the control over the event loop and he can generate an unlimited number of histograms.; Using the code generated by TTree::MakeSelector. Like for the code generated by TTree::MakeClass, the user can do complex analysis. However, they cannot control the event loop. The event loop is controlled by TTree::Process called by the user. This solution is illustrated by the current code. The advantage of this method is that it can be run in a parallel environment using PROOF (the Parallel Root Facility). A chain of 4 files (originally converted from PAW ntuples) is used to illustrate the various ways to loop on Root data sets. Each data set contains a Root Tree named ""h42""; h1analysProxy.C can be used either via TTree::Draw: h42->Draw(""h1analysisProxy.C"");; or it can be used directly with TTree::MakeProxy, for example to generate a shared library. TTree::MakeProxy will generate a TSelector skeleto",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
Integrability,interface,interface,". ROOT: tutorials/tree/h1analysisProxy.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1analysisProxy.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of analysis class for the H1 data using code generated by MakeProxy. ; This file uses 4 large data sets from the H1 collaboration at DESY Hamburg. One can access these data sets (277 MBytes) from the standard Root web site at: https://root.cern/files/h1/ The Physics plots below generated by this example cannot be produced when using smaller data sets.; There are several ways to analyze data stored in a Root Tree; Using TTree::Draw: This is very convenient and efficient for small tasks. A TTree::Draw call produces one histogram at the time. The histogram is automatically generated. The selection expression may be specified in the command line.; Using the TTreeViewer: This is a graphical interface to TTree::Draw with the same functionality.; Using the code generated by TTree::MakeClass: In this case, the user creates an instance of the analysis class. They have the control over the event loop and he can generate an unlimited number of histograms.; Using the code generated by TTree::MakeSelector. Like for the code generated by TTree::MakeClass, the user can do complex analysis. However, they cannot control the event loop. The event loop is controlled by TTree::Process called by the user. This solution is illustrated by the current code. The advantage of this method is that it can be run in a parallel environment using PROOF (the Parallel Root Facility). A chain of 4 files (originally converted from PAW ntuples) is used to illustrate the various ways to loop on Root data sets. Each data set contains a Root Tree named ""h42""; h1analysProxy.C can be used either via TTree::Draw: h42->Draw(""h1analysisProxy.C"");; or it can be used directly with TTree::MakeProxy, for example to generate a shared library. TTree::MakeProxy will generate a TSelector skeleto",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
Performance,perform,performs,"l pointing to the H1 data directory.; }; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33. Case B: Loop on all events; Root > chain.Draw(""h1analysisProxy.C""). Case C: Same as B, but in addition fill the event list with selected entries.; The event list is saved to a file ""elist.root"" by the Terminate function. To see the list of selected events, you can do elist->Print(""all""). The selection function has selected 7525 events out of the 283813 events in the chain of files. (2.65 per cent) Root > chain.Draw(""h1analysisProxy.C"","""",""fillList""); ; Case D: Process only entries in the event list; The event list is read from the file in elist.root generated by step C Root > chain.Draw(""h1analysisProxy.C"","""",""useList""); The commands executed with the 3 different methods B,C and D produce two canvases shown below: begin_html the Dstar plot end_html begin_html the Tau D0 plot end_html; ; TEntryList *elist;; Bool_t useList, fillList;; TH1F *hdmd;; TH2F *h2;; ; ; void h1analysisProxy_Begin(TTree *tree); {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the event list; ; //print the option specified in the Process function.; TString option = GetOption();; printf(""Starting (begin) h1analysis with process option: %s\n"",option.Data());; ; //process cases with event list; fillList = kFALSE;; useList = kFALSE;; if (fChain) fChain->SetEntryList(0);; delete gDirectory->GetList()->FindObject(""elist"");; ; // case when one creates/fills the event list; if (option.Contains(""fillList"")) {; fillList = kTRUE;; elist = new TEntryList(""elist"",""H1 selection from Cut"");; // Add to the input list for processing in PROOF, if needed; if (fInput) {; fInput->Add(new TNamed(""fillList"",""""));; fInput->Add(elist);; }; } else elist = 0;; ; // case when one uses the event list generated in a previous call; if (option.Contains(""useList"")) {; useList = kTRUE;; if (fInput) {; tree",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
Safety,avoid,avoid,"be set on the chain *before* calling Process"");; }; }; }; ; ; void h1analysisProxy_SlaveBegin(TTree *tree); {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; //initialize the Tree branch addresses; Init(tree);; ; //print the option specified in the Process function.; TString option = GetOption();; printf(""Starting (slave) h1analysis with process option: %s\n"",option.Data());; ; //create histograms; hdmd = new TH1F(""hdmd"",""dm_d"",40,0.13,0.17);; h2 = new TH2F(""h2"",""ptD0 vs dm_d"",30,0.135,0.165,30,-3,6);; ; fOutput->Add(hdmd);; fOutput->Add(h2);; ; //process cases with entry list; fillList = kFALSE;; useList = kFALSE;; ; // case when one creates/fills the entry list; if (option.Contains(""fillList"")) {; fillList = kTRUE;; // Get the list; if (fInput) {; if ((elist = (TEntryList *) fInput->FindObject(""elist""))); // Need to clone to avoid problems when destroying the selector; elist = (TEntryList *) elist->Clone();; }; if (elist); fOutput->Add(elist);; else; fillList = kFALSE;; } else elist = 0;; ; // case when one uses the entry list generated in a previous call; if (option.Contains(""useList"")) {; useList = kTRUE;; TFile f(""elist.root"");; elist = (TEntryList*)f.Get(""elist"");; if (elist) elist->SetDirectory(0); //otherwise the file destructor will delete elist; if (tree) tree->SetEntryList(elist);; else {; // Option ""useList"" not supported in PROOF directly; Warning(""Begin"", ""option 'useList' not supported in PROOF - ignoring"");; Warning(""Begin"", ""the entry list must be set on the chain *before* calling Process"");; }; }; ; }; ; Double_t h1analysisProxy() {; return 0;; }; ; ; Bool_t h1analysisProxy_Process(Long64_t entry); {; // entry is the entry number in the current Tree; // Selection function to select D* and D0.; ; //in case one entry list is given in input, the selection has already been done.; if (!useList) {; ; float f1 = md0_d;; float f2 = md0_d-1.864",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
Security,access,access,". ROOT: tutorials/tree/h1analysisProxy.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1analysisProxy.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of analysis class for the H1 data using code generated by MakeProxy. ; This file uses 4 large data sets from the H1 collaboration at DESY Hamburg. One can access these data sets (277 MBytes) from the standard Root web site at: https://root.cern/files/h1/ The Physics plots below generated by this example cannot be produced when using smaller data sets.; There are several ways to analyze data stored in a Root Tree; Using TTree::Draw: This is very convenient and efficient for small tasks. A TTree::Draw call produces one histogram at the time. The histogram is automatically generated. The selection expression may be specified in the command line.; Using the TTreeViewer: This is a graphical interface to TTree::Draw with the same functionality.; Using the code generated by TTree::MakeClass: In this case, the user creates an instance of the analysis class. They have the control over the event loop and he can generate an unlimited number of histograms.; Using the code generated by TTree::MakeSelector. Like for the code generated by TTree::MakeClass, the user can do complex analysis. However, they cannot control the event loop. The event loop is controlled by TTree::Process called by the user. This solution is illustrated by the current code. The advantage of this method is that it can be run in a parallel environment using PROOF (the Parallel Root Facility). A chain of 4 files (originally converted from PAW ntuples) is used to illustrate the various ways to loop on Root data sets. Each data set contains a Root Tree named ""h42""; h1analysProxy.C can be used either via TTree::Draw: h42->Draw(""h1analysisProxy.C"");; or it can be used directly with TTree::MakeProxy, for example to generate a shared library. TTree::MakeProxy will generate a TSelector skeleto",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
Testability,test,test,"st *) elist->Clone();; }; if (elist); fOutput->Add(elist);; else; fillList = kFALSE;; } else elist = 0;; ; // case when one uses the entry list generated in a previous call; if (option.Contains(""useList"")) {; useList = kTRUE;; TFile f(""elist.root"");; elist = (TEntryList*)f.Get(""elist"");; if (elist) elist->SetDirectory(0); //otherwise the file destructor will delete elist; if (tree) tree->SetEntryList(elist);; else {; // Option ""useList"" not supported in PROOF directly; Warning(""Begin"", ""option 'useList' not supported in PROOF - ignoring"");; Warning(""Begin"", ""the entry list must be set on the chain *before* calling Process"");; }; }; ; }; ; Double_t h1analysisProxy() {; return 0;; }; ; ; Bool_t h1analysisProxy_Process(Long64_t entry); {; // entry is the entry number in the current Tree; // Selection function to select D* and D0.; ; //in case one entry list is given in input, the selection has already been done.; if (!useList) {; ; float f1 = md0_d;; float f2 = md0_d-1.8646;; bool test = TMath::Abs(md0_d-1.8646) >= 0.04;; if (gDebug>0) fprintf(stderr,""entry #%lld f1=%f f2=%f test=%d\n"",; fChain->GetReadEntry(),f1,f2,test);; ; if (TMath::Abs(md0_d-1.8646) >= 0.04) return kFALSE;; if (ptds_d <= 2.5) return kFALSE;; if (TMath::Abs(etads_d) >= 1.5) return kFALSE;; ; int cik = ik-1; //original ik used f77 convention starting at 1; int cipi = ipi-1; //original ipi used f77 convention starting at 1; ; f1 = nhitrp[cik];; f2 = nhitrp[cipi];; test = nhitrp[cik]*nhitrp[cipi] <= 1;; if (gDebug>0) fprintf(stderr,""entry #%lld f1=%f f2=%f test=%d\n"",; fChain->GetReadEntry(),f1,f2,test);; ; if (nhitrp[cik]*nhitrp[cipi] <= 1) return kFALSE;; if (rend[cik] -rstart[cik] <= 22) return kFALSE;; if (rend[cipi]-rstart[cipi] <= 22) return kFALSE;; if (nlhk[cik] <= 0.1) return kFALSE;; if (nlhpi[cipi] <= 0.1) return kFALSE;; // fix because read-only; if (nlhpi[ipis-1] <= 0.1) return kFALSE;; if (njets < 1) return kFALSE;; ; }; // if option fillList, fill the event list; if (fillList) elist->En",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
Usability,simpl,simple,"meters(const Double_t *params)Definition TF1.h:677; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::GetListOfFunctionsTList * GetListOfFunctions() constDefinition TH1.h:244; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an object using the Streamer facility.Definition TNamed.cxx:74; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPaveStatsThe histogram statistics painter class.Definition TPaveStats.h:18; TPaveStats::SetOptStatvoid SetOptStat(Int_t stat=1)Set the stat option.Definition TPaveStats.cxx:30",MatchSource.WIKI,doc/master/h1analysisProxy_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8C.html
Integrability,depend,dependency,". ROOT: tutorials/tree/h1analysisProxy.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions |; Variables ; h1analysisProxy.h File Reference. #include ""TH2.h""; #include ""TF1.h""; #include ""TStyle.h""; #include ""TCanvas.h""; #include ""TLine.h""; #include ""TEntryList.h""; #include ""TPaveStats.h""; #include ""TMath.h"". Include dependency graph for h1analysisProxy.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Functions; Double_t fdm2 (Double_t *xx, Double_t *par);  ; Double_t fdm5 (Double_t *xx, Double_t *par);  . Variables; const Double_t dxbin = (0.17-0.13)/40;  ; const Double_t sigma = 0.0012;  . Function Documentation. ◆ fdm2(). Double_t fdm2 ; (; Double_t * ; xx, . Double_t * ; par . ). Definition at line 25 of file h1analysisProxy.h. ◆ fdm5(). Double_t fdm5 ; (; Double_t * ; xx, . Double_t * ; par . ). Definition at line 14 of file h1analysisProxy.h. Variable Documentation. ◆ dxbin. const Double_t dxbin = (0.17-0.13)/40. Definition at line 10 of file h1analysisProxy.h. ◆ sigma. const Double_t sigma = 0.0012. Definition at line 11 of file h1analysisProxy.h. tutorialstreeh1analysisProxy.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/h1analysisProxy_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8h.html
Energy Efficiency,power,power,"ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1analysisProxy.h. Go to the documentation of this file. 1#include ""TH2.h""; 2#include ""TF1.h""; 3#include ""TStyle.h""; 4#include ""TCanvas.h""; 5#include ""TLine.h""; 6#include ""TEntryList.h""; 7#include ""TPaveStats.h""; 8#include ""TMath.h""; 9 ; 10const Double_t dxbin = (0.17-0.13)/40; // Bin-width; 11const Double_t sigma = 0.0012;; 12 ; 13//_____________________________________________________________________; 14Double_t fdm5(Double_t *xx, Double_t *par); 15{; 16 Double_t x = xx[0];; 17 if (x <= 0.13957) return 0;; 18 Double_t xp3 = (x-par[3])*(x-par[3]);; 19 Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957, par[1]); 20 + par[2] / 2.5066/par[4]*TMath::Exp(-xp3/2/par[4]/par[4]));; 21 return res;; 22}; 23 ; 24//_____________________________________________________________________; 25Double_t fdm2(Double_t *xx, Double_t *par); 26{; 27 Double_t x = xx[0];; 28 if (x <= 0.13957) return 0;; 29 Double_t xp3 = (x-0.1454)*(x-0.1454);; 30 Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957, 0.25); 31 + par[1] / 2.5066/sigma*TMath::Exp(-xp3/2/sigma/sigma));; 32 return res;; 33}; 34 ; Double_tdouble Double_tDefinition RtypesCore.h:59; TCanvas.h; TEntryList.h; TF1.h; TH2.h; TLine.h; TMath.h; TPaveStats.h; TStyle.h; fdm5Double_t fdm5(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:14; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; dxbinconst Double_t dxbinDefinition h1analysisProxy.h:10; fdm2Double_t fdm2(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:25; xDouble_t x[n]Definition legend1.C:17; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721. tutorialstreeh1analysisProxy.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/h1analysisProxy_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisProxy_8h_source.html
Availability,error,error,"shList.cxx:262; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an object using the Streamer facility.Definition TNamed.cxx:74; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TPaveStatsThe histogram statistics painter class.Definition TPaveStats.h:18; TPaveStats::SetOptStatvoid SetOptStat(Int_t stat=1)Set the stat option.Definition TPaveStats.cxx:308; TSelector::fInputTList * fInputList of objects available during processing.Definition TSelector.h:41; TSelector::fOutputTSelectorList * fOutput! List of objects created during processingDefinition TSelector.h:42; TSelector::GetOptionconst char * GetOption() const overrideDefinition TSelector.h:57; TStringBasic string class.Definition TString.h:139; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
Energy Efficiency,power,power,"TreeReader::h2TH2F * h2Definition h1analysisTreeReader.h:33; h1analysisTreeReader::fRendTTreeReaderArray< Float_t > fRendDefinition h1analysisTreeReader.h:27; h1analysisTreeReader::fEtads_dTTreeReaderValue< Float_t > fEtads_dDefinition h1analysisTreeReader.h:17; h1analysisTreeReader::hdmdTH1F * hdmdDefinition h1analysisTreeReader.h:32; h1analysisTreeReader::SlaveTerminatevoid SlaveTerminate() override; h1analysisTreeReader::fRstartTTreeReaderArray< Float_t > fRstartDefinition h1analysisTreeReader.h:26; h1analysisTreeReader::fDm_dTTreeReaderValue< Float_t > fDm_dDefinition h1analysisTreeReader.h:18; h1analysisTreeReader::fNlhkTTreeReaderArray< Float_t > fNlhkDefinition h1analysisTreeReader.h:28; h1analysisTreeReader::fPtds_dTTreeReaderValue< Float_t > fPtds_dDefinition h1analysisTreeReader.h:16; h1analysisTreeReader::Beginvoid Begin(TTree *) override; h1analysisTreeReader::Initvoid Init(TTree *myTree) overrideDefinition h1analysisTreeReader.h:67; lineTLine * lineDefinition entrylistblock_figure1.C:235; fdm5Double_t fdm5(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:14; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; dxbinconst Double_t dxbinDefinition h1analysisProxy.h:10; fdm2Double_t fdm2(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:25; h1analysisTreeReader.h; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; c2return c2Definition legend2.C:14; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; AuthorAnders Eie, 2013 ; Definition in file h1analysisTreeReader.C. tutorialstreeh1analysisTreeReader.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
Integrability,message,message,"shList.cxx:262; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an object using the Streamer facility.Definition TNamed.cxx:74; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TPaveStatsThe histogram statistics painter class.Definition TPaveStats.h:18; TPaveStats::SetOptStatvoid SetOptStat(Int_t stat=1)Set the stat option.Definition TPaveStats.cxx:308; TSelector::fInputTList * fInputList of objects available during processing.Definition TSelector.h:41; TSelector::fOutputTSelectorList * fOutput! List of objects created during processingDefinition TSelector.h:42; TSelector::GetOptionconst char * GetOption() const overrideDefinition TSelector.h:57; TStringBasic string class.Definition TString.h:139; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
Performance,perform,performs," has already been done.; if (!useList) {; // Return as soon as a bad entry is detected; if (TMath::Abs(*fMd0_d-1.8646) >= 0.04) return kFALSE;; if (*fPtds_d <= 2.5) return kFALSE;; if (TMath::Abs(*fEtads_d) >= 1.5) return kFALSE;; (*fIk)--; //original fIk used f77 convention starting at 1; (*fIpi)--;; ; ; if (fNhitrp.At(*fIk)* fNhitrp.At(*fIpi) <= 1) return kFALSE;; ; ; if (fRend.At(*fIk) -fRstart.At(*fIk) <= 22) return kFALSE;; if (fRend.At(*fIpi)-fRstart.At(*fIpi) <= 22) return kFALSE;; if (fNlhk.At(*fIk) <= 0.1) return kFALSE;; if (fNlhpi.At(*fIpi) <= 0.1) return kFALSE;; (*fIpis)--; if (fNlhpi.At(*fIpis) <= 0.1) return kFALSE;; if (*fNjets < 1) return kFALSE;; }; // if option fillList, fill the entry list; if (fillList) elist->Enter(entry);; ; //fill some histograms; hdmd->Fill(*fDm_d);; h2->Fill(*fDm_d,*fRpd0_t/0.029979*1.8646/ *fPtd0_d);; ; return kTRUE;; }; ; void h1analysisTreeReader::Begin(TTree* /*myTree*/) {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; Reset();; ; //print the option specified in the Process function.; TString option = GetOption();; Info(""Begin"", ""starting h1analysis with process option: %s"", option.Data());; ; delete gDirectory->GetList()->FindObject(""elist"");; ; // case when one creates/fills the entry list; if (option.Contains(""fillList"")) {; fillList = kTRUE;; elist = new TEntryList(""elist"", ""H1 selection from Cut"");; // Add to the input list for processing in PROOF, if needed; if (fInput) {; fInput->Add(new TNamed(""fillList"",""""));; // We send a clone to avoid double deletes when importing the result; fInput->Add(elist);; // This is needed to avoid warnings from output-to-members mapping; elist = nullptr;; }; Info(""Begin"", ""creating an entry-list"");; }; // case when one uses the entry list generated in a previous call; if (option.Contains(""useList"")) {; useList = kTRUE;; if (fInput) {; // In PROOF option ""useList"" is pr",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
Safety,detect,detected,"le_t *xx, Double_t *par); {; Double_t x = xx[0];; if (x <= 0.13957) return 0;; Double_t xp3 = (x-par[3])*(x-par[3]);; Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957, par[1]); + par[2] / 2.5066/par[4]*TMath::Exp(-xp3/2/par[4]/par[4]));; return res;; }; ; //_____________________________________________________________________; Double_t fdm2(Double_t *xx, Double_t *par); {; Double_t x = xx[0];; if (x <= 0.13957) return 0;; Double_t xp3 = (x-0.1454)*(x-0.1454);; Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957, 0.25); + par[1] / 2.5066/sigma*TMath::Exp(-xp3/2/sigma/sigma));; return res;; }; //_____________________________________________________________________; Bool_t h1analysisTreeReader::Process(Long64_t entry){; // entry is the entry number in the current Tree; // Selection function to select D* and D0.; myTreeReader.SetLocalEntry(entry);; fProcessed++;; //in case one entry list is given in input, the selection has already been done.; if (!useList) {; // Return as soon as a bad entry is detected; if (TMath::Abs(*fMd0_d-1.8646) >= 0.04) return kFALSE;; if (*fPtds_d <= 2.5) return kFALSE;; if (TMath::Abs(*fEtads_d) >= 1.5) return kFALSE;; (*fIk)--; //original fIk used f77 convention starting at 1; (*fIpi)--;; ; ; if (fNhitrp.At(*fIk)* fNhitrp.At(*fIpi) <= 1) return kFALSE;; ; ; if (fRend.At(*fIk) -fRstart.At(*fIk) <= 22) return kFALSE;; if (fRend.At(*fIpi)-fRstart.At(*fIpi) <= 22) return kFALSE;; if (fNlhk.At(*fIk) <= 0.1) return kFALSE;; if (fNlhpi.At(*fIpi) <= 0.1) return kFALSE;; (*fIpis)--; if (fNlhpi.At(*fIpis) <= 0.1) return kFALSE;; if (*fNjets < 1) return kFALSE;; }; // if option fillList, fill the entry list; if (fillList) elist->Enter(entry);; ; //fill some histograms; hdmd->Fill(*fDm_d);; h2->Fill(*fDm_d,*fRpd0_t/0.029979*1.8646/ *fPtd0_d);; ; return kTRUE;; }; ; void h1analysisTreeReader::Begin(TTree* /*myTree*/) {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialis",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
Testability,log,loglfIkelihood," *) fInput->FindObject(""elist""))); // Need to clone to avoid problems when destroying the selector; elist = (TEntryList *) elist->Clone();; if (elist); fOutput->Add(elist);; else; fillList = kFALSE;; }; }; if (fillList) Info(""SlaveBegin"", ""creating an entry-list"");; if (option.Contains(""useList"")) useList = kTRUE;; }; ; void h1analysisTreeReader::Terminate() {; // function called at the end of the event loop; ; hdmd = dynamic_cast<TH1F*>(fOutput->FindObject(""hdmd""));; h2 = dynamic_cast<TH2F*>(fOutput->FindObject(""h2""));; ; if (hdmd == nullptr || h2 == nullptr) {; Error(""Terminate"", ""hdmd = %p , h2 = %p"", hdmd, h2);; return;; }; ; //create the canvas for the h1analysis fit; gStyle->SetOptFit();; TCanvas *c1 = new TCanvas(""c1"",""h1analysis analysis"",10,10,800,600);; c1->SetBottomMargin(0.15);; hdmd->GetXaxis()->SetTitle(""m_{K#pi#pi} - m_{K#pi}[GeV/c^{2}]"");; hdmd->GetXaxis()->SetTitleOffset(1.4);; ; //fit histogram hdmd with function f5 using the loglfIkelihood option; if (gROOT->GetListOfFunctions()->FindObject(""f5"")); delete gROOT->GetFunction(""f5"");; TF1 *f5 = new TF1(""f5"",fdm5,0.139,0.17,5);; f5->SetParameters(1000000, .25, 2000, .1454, .001);; hdmd->Fit(""f5"",""lr"");; ; //create the canvas for tau d0; gStyle->SetOptFit(0);; gStyle->SetOptStat(1100);; TCanvas *c2 = new TCanvas(""c2"",""tauD0"",100,100,800,600);; c2->SetGrid();; c2->SetBottomMargin(0.15);; ; // Project slices of 2-d histogram h2 along X , then fit each slice; // with function f2 and make a histogram for each fit parameter; // Note that the generated histograms are added to the list of objects; // in the current directory.; if (gROOT->GetListOfFunctions()->FindObject(""f2"")); delete gROOT->GetFunction(""f2"");; TF1 *f2 = new TF1(""f2"",fdm2,0.139,0.17,2);; f2->SetParameters(10000, 10);; h2->FitSlicesX(f2,0,-1,1,""qln"");; TH1D *h2_1 = (TH1D*)gDirectory->Get(""h2_1"");; h2_1->GetXaxis()->SetTitle(""#tau[ps]"");; h2_1->SetMarkerStyle(21);; h2_1->Draw();; c2->Update();; TLine *line = new TLine(0,0,0,c2->GetUymax());; li",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
Usability,simpl,simple,"n_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::GetListOfFunctionsTList * GetListOfFunctions() constDefinition TH1.h:244; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH2::FillInt_t Fill(Double_t) overrideInvalid Fill method.Definition TH2.cxx:393; TH2::FitSlicesXvirtual void FitSlicesX(TF1 *f1=nullptr, Int_t firstybin=0, Int_t lastybin=-1, Int_t cut=0, Option_t *option=""QNR"", TObjArray *arr=nullptr)Project slices along X in case of a 2-D histogram, then fit each slice with function f1 and make a hi...Definition TH2.cxx:1016; THashList::FindObjectTObject * FindObject(const char *name) const overrideFind object using its name.Definition THashList.cxx:262; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an object using the Streamer facility.Definition TNamed.cxx:74; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:99",MatchSource.WIKI,doc/master/h1analysisTreeReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysisTreeReader_8C.html
Availability,error,error,"bjectTObject * FindObject(const char *name) const overrideFind object using its name.Definition THashList.cxx:262; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an object using the Streamer facility.Definition TNamed.cxx:74; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TPaveStatsThe histogram statistics painter class.Definition TPaveStats.h:18; TPaveStats::SetOptStatvoid SetOptStat(Int_t stat=1)Set the stat option.Definition TPaveStats.cxx:308; TSelector::fInputTList * fInputList of objects available during processing.Definition TSelector.h:41; TSelector::fOutputTSelectorList * fOutput! List of objects created during processingDefinition TSelector.h:42; TSelector::fStatusLong64_t fStatusSelector status.Definition TSelector.h:37; TSelector::GetOptionconst char * GetOption() const overrideDefinition TSelector.h:57; TStringBasic string class.Definition TString.h:139; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
Energy Efficiency,efficient,efficient,". ROOT: tutorials/tree/h1analysis.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1analysis.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of analysis class for the H1 data. ; This file uses 4 large data sets from the H1 collaboration at DESY Hamburg. One can access these data sets (277 MBytes) from the standard Root web site at: https://root.cern/files/h1/ The Physics plots below generated by this example cannot be produced when using smaller data sets.; There are several ways to analyze data stored in a Root Tree; Using TTree::Draw: This is very convenient and efficient for small tasks. A TTree::Draw call produces one histogram at the time. The histogram is automatically generated. The selection expression may be specified in the command line.; Using the TTreeViewer: This is a graphical interface to TTree::Draw with the same functionality.; Using the code generated by TTree::MakeClass: In this case, the user creates an instance of the analysis class. They have the control over the event loop and he can generate an unlimited number of histograms.; Using the code generated by TTree::MakeSelector. Like for the code generated by TTree::MakeClass, the user can do complex analysis. However, they cannot control the event loop. The event loop is controlled by TTree::Process called by the user. This solution is illustrated by the current code. The advantage of this method is that it can be run in a parallel environment using PROOF (the Parallel Root Facility). A chain of 4 files (originally converted from PAW ntuples) is used to illustrate the various ways to loop on Root data sets. Each data set contains a Root Tree named ""h42"" The class definition in h1analysis.h has been generated automatically by the Root utility TTree::MakeSelector using one of the files with the following statement:; h42->MakeSelector(""h1analysis"");; This produces two files: h1analysis.h and h1analysis.C (skeleton of this f",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
Integrability,interface,interface,". ROOT: tutorials/tree/h1analysis.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1analysis.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of analysis class for the H1 data. ; This file uses 4 large data sets from the H1 collaboration at DESY Hamburg. One can access these data sets (277 MBytes) from the standard Root web site at: https://root.cern/files/h1/ The Physics plots below generated by this example cannot be produced when using smaller data sets.; There are several ways to analyze data stored in a Root Tree; Using TTree::Draw: This is very convenient and efficient for small tasks. A TTree::Draw call produces one histogram at the time. The histogram is automatically generated. The selection expression may be specified in the command line.; Using the TTreeViewer: This is a graphical interface to TTree::Draw with the same functionality.; Using the code generated by TTree::MakeClass: In this case, the user creates an instance of the analysis class. They have the control over the event loop and he can generate an unlimited number of histograms.; Using the code generated by TTree::MakeSelector. Like for the code generated by TTree::MakeClass, the user can do complex analysis. However, they cannot control the event loop. The event loop is controlled by TTree::Process called by the user. This solution is illustrated by the current code. The advantage of this method is that it can be run in a parallel environment using PROOF (the Parallel Root Facility). A chain of 4 files (originally converted from PAW ntuples) is used to illustrate the various ways to loop on Root data sets. Each data set contains a Root Tree named ""h42"" The class definition in h1analysis.h has been generated automatically by the Root utility TTree::MakeSelector using one of the files with the following statement:; h42->MakeSelector(""h1analysis"");; This produces two files: h1analysis.h and h1analysis.C (skeleton of this f",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
Performance,perform,performs," works also for local processing.; ; #include ""h1analysis.h""; #include ""TH2.h""; #include ""TF1.h""; #include ""TStyle.h""; #include ""TBranch.h""; #include ""TCanvas.h""; #include ""TPaveStats.h""; #include ""TLine.h""; #include ""TMath.h""; ; const Double_t dxbin = (0.17-0.13)/40; // Bin-width; const Double_t sigma = 0.0012;; ; ; Double_t fdm5(Double_t *xx, Double_t *par); {; Double_t x = xx[0];; if (x <= 0.13957) return 0;; Double_t xp3 = (x-par[3])*(x-par[3]);; Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957, par[1]); + par[2] / 2.5066/par[4]*TMath::Exp(-xp3/2/par[4]/par[4]));; return res;; }; ; ; Double_t fdm2(Double_t *xx, Double_t *par); {; Double_t x = xx[0];; if (x <= 0.13957) return 0;; Double_t xp3 = (x-0.1454)*(x-0.1454);; Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957, 0.25); + par[1] / 2.5066/sigma*TMath::Exp(-xp3/2/sigma/sigma));; return res;; }; ; ; void h1analysis::Begin(TTree * /*tree*/); {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; // This is needed when re-processing the object; Reset();; ; //print the option specified in the Process function.; TString option = GetOption();; Info(""Begin"", ""starting h1analysis with process option: %s"", option.Data());; ; //process cases with entry list; if (fChain) fChain->SetEntryList(nullptr);; delete gDirectory->GetList()->FindObject(""elist"");; ; // case when one creates/fills the entry list; if (option.Contains(""fillList"")) {; fillList = kTRUE;; elist = new TEntryList(""elist"", ""H1 selection from Cut"");; // Add to the input list for processing in PROOF, if needed; if (fInput) {; fInput->Add(new TNamed(""fillList"",""""));; // We send a clone to avoid double deletes when importing the result; fInput->Add(elist);; // This is needed to avoid warnings from output-to-members mapping; elist = nullptr;; }; Info(""Begin"", ""creating an entry-list"");; }; // case when one uses the entry list generated in a previous",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
Safety,avoid,avoid,"par[0]*TMath::Power(x-0.13957, 0.25); + par[1] / 2.5066/sigma*TMath::Exp(-xp3/2/sigma/sigma));; return res;; }; ; ; void h1analysis::Begin(TTree * /*tree*/); {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; // This is needed when re-processing the object; Reset();; ; //print the option specified in the Process function.; TString option = GetOption();; Info(""Begin"", ""starting h1analysis with process option: %s"", option.Data());; ; //process cases with entry list; if (fChain) fChain->SetEntryList(nullptr);; delete gDirectory->GetList()->FindObject(""elist"");; ; // case when one creates/fills the entry list; if (option.Contains(""fillList"")) {; fillList = kTRUE;; elist = new TEntryList(""elist"", ""H1 selection from Cut"");; // Add to the input list for processing in PROOF, if needed; if (fInput) {; fInput->Add(new TNamed(""fillList"",""""));; // We send a clone to avoid double deletes when importing the result; fInput->Add(elist);; // This is needed to avoid warnings from output-to-members mapping; elist = nullptr;; }; Info(""Begin"", ""creating an entry-list"");; }; // case when one uses the entry list generated in a previous call; if (option.Contains(""useList"")) {; useList = kTRUE;; if (fInput) {; // In PROOF option ""useList"" is processed in SlaveBegin and we do not need; // to do anything here; } else {; TFile f(""elist.root"");; elist = (TEntryList*)f.Get(""elist"");; if (elist) elist->SetDirectory(nullptr); //otherwise the file destructor will delete elist; }; }; }; ; ; void h1analysis::SlaveBegin(TTree *tree); {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; //initialize the Tree branch addresses; Init(tree);; ; //print the option specified in the Process function.; TString option = GetOption();; Info(""SlaveBegin"",; ""starting h1analysis with process opt",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
Security,access,access,". ROOT: tutorials/tree/h1analysis.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1analysis.C File ReferenceTutorials » Tree tutorials. Detailed Description; Example of analysis class for the H1 data. ; This file uses 4 large data sets from the H1 collaboration at DESY Hamburg. One can access these data sets (277 MBytes) from the standard Root web site at: https://root.cern/files/h1/ The Physics plots below generated by this example cannot be produced when using smaller data sets.; There are several ways to analyze data stored in a Root Tree; Using TTree::Draw: This is very convenient and efficient for small tasks. A TTree::Draw call produces one histogram at the time. The histogram is automatically generated. The selection expression may be specified in the command line.; Using the TTreeViewer: This is a graphical interface to TTree::Draw with the same functionality.; Using the code generated by TTree::MakeClass: In this case, the user creates an instance of the analysis class. They have the control over the event loop and he can generate an unlimited number of histograms.; Using the code generated by TTree::MakeSelector. Like for the code generated by TTree::MakeClass, the user can do complex analysis. However, they cannot control the event loop. The event loop is controlled by TTree::Process called by the user. This solution is illustrated by the current code. The advantage of this method is that it can be run in a parallel environment using PROOF (the Parallel Root Facility). A chain of 4 files (originally converted from PAW ntuples) is used to illustrate the various ways to loop on Root data sets. Each data set contains a Root Tree named ""h42"" The class definition in h1analysis.h has been generated automatically by the Root utility TTree::MakeSelector using one of the files with the following statement:; h42->MakeSelector(""h1analysis"");; This produces two files: h1analysis.h and h1analysis.C (skeleton of this f",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
Testability,log,loglevel,"n has selected 7525 events out of the 283813 events in the chain of files. (2.65 per cent); Root > chain.Process(""h1analysis.C"",""fillList""). Case D: Process only entries in the entry list; The entry list is read from the file in elist.root generated by step C; Root > chain.Process(""h1analysis.C"",""useList""). Case E: The above steps have been executed via the interpreter.; You can repeat the steps B, C and D using the script compiler by replacing ""h1analysis.C"" by ""h1analysis.C+"" or ""h1analysis.C++"" in a new session (see F). Case F: Create the chain as in A, then execute; Root > chain.Process(""h1analysis.C+"",""useList""); The same analysis can be run on PROOF. For a quick try start a PROOF-Lite session; Root > TProof *p = TProof::Open(""""); pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; TProofThis class controls a Parallel ROOT Facility, PROOF, cluster.Definition TProof.h:316; TProof::Openstatic TProof * Open(const char *url=0, const char *conffile=0, const char *confdir=0, Int_t loglevel=0)Start a PROOF session on a specific cluster.Definition TProof.cxx:11583; create (if not already done) the chain by executing the 'h1chain.C' macro mentioned above, and then tell ROOT to use PROOF to process the chain:; Root > chain.SetProof(); You can then repeat step B above. Step C can also be executed in PROOF. However, step D cannot be executed in PROOF as in the local session (i.e. just passing option 'useList'): to use the entry list you have to. Case G: Load first in the session the list form the file; Root > TFile f(""elist.root""); Root > TEntryList *elist = (TEntryList *) f.Get(""elist""); f#define f(i)Definition RSha256.hxx:104; TEntryListA List of entry numbers in a TTree or TChain.Definition TEntryList.h:26; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; set it on the chain:; Root > chain.SetEntryList(elist); call Process as in step B. Of course this work",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
Usability,simpl,simple,"n_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::GetListOfFunctionsTList * GetListOfFunctions() constDefinition TH1.h:244; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH2::FillInt_t Fill(Double_t) overrideInvalid Fill method.Definition TH2.cxx:393; TH2::FitSlicesXvirtual void FitSlicesX(TF1 *f1=nullptr, Int_t firstybin=0, Int_t lastybin=-1, Int_t cut=0, Option_t *option=""QNR"", TObjArray *arr=nullptr)Project slices along X in case of a 2-D histogram, then fit each slice with function f1 and make a hi...Definition TH2.cxx:1016; THashList::FindObjectTObject * FindObject(const char *name) const overrideFind object using its name.Definition THashList.cxx:262; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an object using the Streamer facility.Definition TNamed.cxx:74; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definitio",MatchSource.WIKI,doc/master/h1analysis_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html
Deployability,install,installed,". ROOT: tutorials/tree/h1chain.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1chain.C File ReferenceTutorials » Tree tutorials. Detailed Description; Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ; ; TChain chain(""h42"");; ; void h1chain(const char *h1dir = 0); {; if (h1dir) {; gSystem->Setenv(""H1"",h1dir);; }; chain.SetCacheSize(20*1024*1024);; chain.Add(""$H1/dstarmb.root"");; chain.Add(""$H1/dstarp1a.root"");; chain.Add(""$H1/dstarp1b.root"");; chain.Add(""$H1/dstarp2.root"");; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TSystem::Setenvvirtual void Setenv(const char *name, const char *value)Set environment variable.Definition TSystem.cxx:1649; AuthorRene Brun ; Definition in file h1chain.C. tutorialstreeh1chain.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/h1chain_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1chain_8C.html
Modifiability,variab,variable,". ROOT: tutorials/tree/h1chain.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h1chain.C File ReferenceTutorials » Tree tutorials. Detailed Description; Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ; ; TChain chain(""h42"");; ; void h1chain(const char *h1dir = 0); {; if (h1dir) {; gSystem->Setenv(""H1"",h1dir);; }; chain.SetCacheSize(20*1024*1024);; chain.Add(""$H1/dstarmb.root"");; chain.Add(""$H1/dstarp1a.root"");; chain.Add(""$H1/dstarp1b.root"");; chain.Add(""$H1/dstarp2.root"");; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TSystem::Setenvvirtual void Setenv(const char *name, const char *value)Set environment variable.Definition TSystem.cxx:1649; AuthorRene Brun ; Definition in file h1chain.C. tutorialstreeh1chain.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/h1chain_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1chain_8C.html
Availability,error,errors," *pad2 = new TPad(""pad2"",; ""The pad with the histogram"",0.51,0.62,0.98,0.92);; TPad *pad3 = new TPad(""pad3"",; ""The pad with the histogram"",0.03,0.02,0.97,0.57);; pad1->Draw();; pad2->Draw();; pad3->Draw();; ; // Draw a global picture title; TPaveLabel *title = new TPaveLabel(0.1,0.94,0.9,0.98,; ""Drawing options for one dimensional histograms"");; title->SetTextFont(52);; title->Draw();; ; // Draw histogram hpx in first pad with the default option.; pad1->cd();; pad1->GetFrame()->SetFillColor(18);; hpx->SetFillColor(45);; hpx->DrawCopy();; TPaveLabel *label1 = new TPaveLabel(-3.5,700,-1,800,""Default option"");; label1->Draw();; ; // Draw hpx as a lego. Clicking on the lego area will show; // a ""transparent cube"" to guide you rotating the lego in real time.; pad2->cd();; hpx->DrawCopy(""lego1"");; TPaveLabel *label2 = new TPaveLabel(-0.72,0.74,-0.22,0.88,""option Lego1"");; label2->Draw();; TPaveLabel *label2a = new TPaveLabel(-0.93,-1.08,0.25,-0.92,; ""Click on lego to rotate"");; label2a->Draw();; ; // Draw hpx with its errors and a marker.; pad3->cd();; pad3->SetGridx();; pad3->SetGridy();; hpx->SetMarkerStyle(21);; hpx->Draw(""e1p"");; TPaveLabel *label3 = new TPaveLabel(2,600,3.5,650,""option e1p"");; label3->Draw();; ; // The following illustrates how to add comments using a PaveText.; // Attributes of text/lines/boxes added to a PaveText can be modified.; // The AddText function returns a pointer to the added object.; TPaveText *pave = new TPaveText(-3.78,500,-1.2,750);; TText *t1=pave->AddText(""You can move"");; t1->SetTextColor(4);; t1->SetTextSize(0.05);; pave->AddText(""Title and Stats pads"");; pave->AddText(""X and Y axis"");; pave->AddText(""You can modify bin contents"");; pave->Draw();; c1->Update();; }; TCanvas.h; TFile.h; TFrame.h; TH2.h; TInterpreter.h; TNtuple.h; TPaveLabel.h; TPaveText.h; gROOT#define gROOTDefinition TROOT.h:406; TSystem.h; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttMarker::Set",MatchSource.WIKI,doc/master/h1ReadAndDraw_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1ReadAndDraw_8C.html
Usability,guid,guide,"e histogram from the ROOT File; TH1 *hpx = nullptr; // pointer to base class TH1 is enough; example->GetObject(""hpx"", hpx);; ; TCanvas *c1 = new TCanvas(""c1"",""Histogram Drawing Options"",200,10,700,900);; TPad *pad1 = new TPad(""pad1"",; ""The pad with the function"",0.03,0.62,0.50,0.92);; TPad *pad2 = new TPad(""pad2"",; ""The pad with the histogram"",0.51,0.62,0.98,0.92);; TPad *pad3 = new TPad(""pad3"",; ""The pad with the histogram"",0.03,0.02,0.97,0.57);; pad1->Draw();; pad2->Draw();; pad3->Draw();; ; // Draw a global picture title; TPaveLabel *title = new TPaveLabel(0.1,0.94,0.9,0.98,; ""Drawing options for one dimensional histograms"");; title->SetTextFont(52);; title->Draw();; ; // Draw histogram hpx in first pad with the default option.; pad1->cd();; pad1->GetFrame()->SetFillColor(18);; hpx->SetFillColor(45);; hpx->DrawCopy();; TPaveLabel *label1 = new TPaveLabel(-3.5,700,-1,800,""Default option"");; label1->Draw();; ; // Draw hpx as a lego. Clicking on the lego area will show; // a ""transparent cube"" to guide you rotating the lego in real time.; pad2->cd();; hpx->DrawCopy(""lego1"");; TPaveLabel *label2 = new TPaveLabel(-0.72,0.74,-0.22,0.88,""option Lego1"");; label2->Draw();; TPaveLabel *label2a = new TPaveLabel(-0.93,-1.08,0.25,-0.92,; ""Click on lego to rotate"");; label2a->Draw();; ; // Draw hpx with its errors and a marker.; pad3->cd();; pad3->SetGridx();; pad3->SetGridy();; hpx->SetMarkerStyle(21);; hpx->Draw(""e1p"");; TPaveLabel *label3 = new TPaveLabel(2,600,3.5,650,""option e1p"");; label3->Draw();; ; // The following illustrates how to add comments using a PaveText.; // Attributes of text/lines/boxes added to a PaveText can be modified.; // The AddText function returns a pointer to the added object.; TPaveText *pave = new TPaveText(-3.78,500,-1.2,750);; TText *t1=pave->AddText(""You can move"");; t1->SetTextColor(4);; t1->SetTextSize(0.05);; pave->AddText(""Title and Stats pads"");; pave->AddText(""X and Y axis"");; pave->AddText(""You can modify bin contents"");; pave->Draw();;",MatchSource.WIKI,doc/master/h1ReadAndDraw_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1ReadAndDraw_8C.html
Availability,error,errors,")) :; ROOT.Info(""h1ReadAndDraw.py"", File+"" does not exist""); exit(); ; example = TFile(File); example.ls(); ; # Draw a global picture title; title = TPaveLabel( 0.1, 0.94, 0.9, 0.98,; 'Drawing options for one dimensional histograms' ); title.SetFillColor( 16 ); title.SetTextFont( 52 ); title.Draw(); #; # Draw histogram hpx in first pad with the default option.; pad1.cd(); pad1.GetFrame().SetFillColor( 18 ); hpx = gROOT.FindObject( 'hpx' ); hpx.SetFillColor( 45 ); hpx.DrawCopy(); label1 = TPaveLabel( -3.5, 700, -1, 800, 'Default option' ); label1.SetFillColor( 42 ); label1.Draw(); #; # Draw hpx as a lego. Clicking on the lego area will show; # a ""transparent cube"" to guide you rotating the lego in real time.; pad2.cd(); hpx.DrawCopy( 'lego1' ); label2 = TPaveLabel( -0.72, 0.74, -0.22, 0.88, 'option Lego1' ); label2.SetFillColor( 42 ); label2.Draw(); label2a = TPaveLabel( -0.93, -1.08, 0.25, -0.92, 'Click on lego to rotate' ); label2a.SetFillColor( 42 ); label2a.Draw(); #; # Draw hpx with its errors and a marker.; pad3.cd(); pad3.SetGridx(); pad3.SetGridy(); pad3.GetFrame().SetFillColor( 18 ); hpx.SetMarkerStyle( 21 ); hpx.Draw( 'e1p' ); label3 = TPaveLabel( 2, 600, 3.5, 650, 'option e1p' ); label3.SetFillColor( 42 ); label3.Draw(); #; # The following illustrates how to add comments using a PaveText.; # Attributes of text/lines/boxes added to a PaveText can be modified.; # The AddText function returns a pointer to the added object.; pave = TPaveText( -3.78, 500, -1.2, 750 ); pave.SetFillColor( 42 ); t1 = pave.AddText( 'You can move' ); t1.SetTextColor( 4 ); t1.SetTextSize( 0.05 ); pave.AddText( 'Title and Stats pads' ); pave.AddText( 'X and Y axis' ); pave.AddText( 'You can modify bin contents' ); pave.Draw(); c1.Update(); SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition",MatchSource.WIKI,doc/master/h1ReadAndDraw_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1ReadAndDraw_8py.html
Usability,guid,guide," 21 ); pad2 = TPad( 'pad2', 'The pad with the histogram', 0.51, 0.62, 0.98, 0.92, 21 ); pad3 = TPad( 'pad3', 'The pad with the histogram', 0.03, 0.02, 0.97, 0.57, 21 ); pad1.Draw(); pad2.Draw(); pad3.Draw(); #; # We connect the ROOT file generated in a previous tutorial; #; File = ""py-hsimple.root""; if (ROOT.gSystem.AccessPathName(File)) :; ROOT.Info(""h1ReadAndDraw.py"", File+"" does not exist""); exit(); ; example = TFile(File); example.ls(); ; # Draw a global picture title; title = TPaveLabel( 0.1, 0.94, 0.9, 0.98,; 'Drawing options for one dimensional histograms' ); title.SetFillColor( 16 ); title.SetTextFont( 52 ); title.Draw(); #; # Draw histogram hpx in first pad with the default option.; pad1.cd(); pad1.GetFrame().SetFillColor( 18 ); hpx = gROOT.FindObject( 'hpx' ); hpx.SetFillColor( 45 ); hpx.DrawCopy(); label1 = TPaveLabel( -3.5, 700, -1, 800, 'Default option' ); label1.SetFillColor( 42 ); label1.Draw(); #; # Draw hpx as a lego. Clicking on the lego area will show; # a ""transparent cube"" to guide you rotating the lego in real time.; pad2.cd(); hpx.DrawCopy( 'lego1' ); label2 = TPaveLabel( -0.72, 0.74, -0.22, 0.88, 'option Lego1' ); label2.SetFillColor( 42 ); label2.Draw(); label2a = TPaveLabel( -0.93, -1.08, 0.25, -0.92, 'Click on lego to rotate' ); label2a.SetFillColor( 42 ); label2a.Draw(); #; # Draw hpx with its errors and a marker.; pad3.cd(); pad3.SetGridx(); pad3.SetGridy(); pad3.GetFrame().SetFillColor( 18 ); hpx.SetMarkerStyle( 21 ); hpx.Draw( 'e1p' ); label3 = TPaveLabel( 2, 600, 3.5, 650, 'option e1p' ); label3.SetFillColor( 42 ); label3.Draw(); #; # The following illustrates how to add comments using a PaveText.; # Attributes of text/lines/boxes added to a PaveText can be modified.; # The AddText function returns a pointer to the added object.; pave = TPaveText( -3.78, 500, -1.2, 750 ); pave.SetFillColor( 42 ); t1 = pave.AddText( 'You can move' ); t1.SetTextColor( 4 ); t1.SetTextSize( 0.05 ); pave.AddText( 'Title and Stats pads' ); pave.AddText( 'X a",MatchSource.WIKI,doc/master/h1ReadAndDraw_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h1ReadAndDraw_8py.html
Performance,perform,performed,". ROOT: tutorials/hist/h2proj.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. h2proj.C File ReferenceTutorials » Histograms tutorials. Detailed Description; This example demonstrates how to display a histogram and its two projections. ; A TExec allows to redraw automatically the projections when a zoom is performed on the 2D histogram. ; TH2F *h2;; TH1D * projh2X;; TH1D * projh2Y;; TPad *right_pad, *top_pad;; ; void h2proj(); {; auto c1 = new TCanvas(""c1"", ""c1"",900,900);; gStyle->SetOptStat(0);; ; TPad *center_pad = new TPad(""center_pad"", ""center_pad"",0.0,0.0,0.6,0.6);; center_pad->Draw();; ; right_pad = new TPad(""right_pad"", ""right_pad"",0.55,0.0,1.0,0.6);; right_pad->Draw();; ; top_pad = new TPad(""top_pad"", ""top_pad"",0.0,0.55,0.6,1.0);; top_pad->Draw();; ; h2 = new TH2F(""h2"","""",40,-4,4,40,-20,20);; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; h2->Fill(px,5*py);; }; projh2X = h2->ProjectionX();; projh2Y = h2->ProjectionY();; ; center_pad->cd();; gStyle->SetPalette(1);; h2->Draw(""COL"");; ; top_pad->cd();; projh2X->SetFillColor(kBlue+1);; projh2X->Draw(""bar"");; ; right_pad->cd();; projh2Y->SetFillColor(kBlue-2);; projh2Y->Draw(""hbar"");; ; c1->cd();; TLatex t;; t.SetTextFont(42);; t.SetTextSize(0.02);; t.DrawLatex(0.6,0.88,""This example demonstrates how to display"");; t.DrawLatex(0.6,0.85,""a histogram and its two projections."");; ; auto ex = new TExec(""zoom"",""ZoomExec()"");; h2->GetListOfFunctions()->Add(ex);; }; ; void ZoomExec(); {; int xfirst = h2->GetXaxis()->GetFirst();; int xlast = h2->GetXaxis()->GetLast();; double xmin = h2->GetXaxis()->GetBinLowEdge(xfirst);; double xmax = h2->GetXaxis()->GetBinUpEdge(xlast);; projh2X->GetXaxis()->SetRangeUser(xmin, xmax);; top_pad->Modified();; ; int yfirst = h2->GetYaxis()->GetFirst();; int ylast = h2->GetYaxis()->GetLast();; double ymin = h2->GetYaxis()->GetBinLowEdge(yfirst);; double ymax = h2->GetYaxis()->GetBinUpEdge(ylast);; projh2Y->GetX",MatchSource.WIKI,doc/master/h2proj_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/h2proj_8C.html
Performance,scalab,scalable,"n);; 211 SetMaximum(xmax);; 212 return;; 213 }; 214 Int_t bin1 = theAxis->FindFixBin(xmin);; 215 Int_t bin2 = theAxis->FindFixBin(xmax);; 216 theAxis->SetRange(bin1, bin2);; 217}; 218 ; 219 ; 220////////////////////////////////////////////////////////////////////////////////; 221/// Set axis labels color.; 222///; 223/// axis specifies which axis (""x"",""y"",""z""), default = ""x""; 224/// if axis=""xyz"" set all 3 axes; 225 ; 226void TH1::SetLabelColor(Color_t color, Option_t *axis); 227{; 228 TString opt = axis;; 229 opt.ToLower();; 230 ; 231 if (opt.Contains(""x"")) fXaxis.SetLabelColor(color);; 232 if (opt.Contains(""y"")) fYaxis.SetLabelColor(color);; 233 if (opt.Contains(""z"")) fZaxis.SetLabelColor(color);; 234}; 235 ; 236 ; 237////////////////////////////////////////////////////////////////////////////////; 238/// Set font number used to draw axis labels.; 239///; 240/// font : Text font code = 10*fontnumber + precision; 241/// Font numbers must be between 1 and 14; 242/// precision = 1 fast hardware fonts (steps in the size); 243/// precision = 2 scalable and rotatable hardware fonts; 244///; 245/// The default font number is 62.; 246/// axis specifies which axis (""x"",""y"",""z""), default = ""x""; 247/// if axis=""xyz"" set all 3 axes; 248 ; 249void TH1::SetLabelFont(Style_t font, Option_t *axis); 250{; 251 TString opt = axis;; 252 opt.ToLower();; 253 ; 254 if (opt.Contains(""x"")) fXaxis.SetLabelFont(font);; 255 if (opt.Contains(""y"")) fYaxis.SetLabelFont(font);; 256 if (opt.Contains(""z"")) fZaxis.SetLabelFont(font);; 257}; 258 ; 259 ; 260////////////////////////////////////////////////////////////////////////////////; 261/// Set offset between axis and axis' labels.; 262///; 263/// The offset is expressed as a percent of the pad height.; 264/// axis specifies which axis (""x"",""y"",""z""), default = ""x""; 265/// if axis=""xyz"" set all 3 axes; 266 ; 267void TH1::SetLabelOffset(Float_t offset, Option_t *axis); 268{; 269 TString opt = axis;; 270 opt.ToLower();; 271 ; 272 if (opt.Contains(""x""",MatchSource.WIKI,doc/master/Haxis_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Haxis_8cxx_source.html
Availability,error,error,");; gPad->SetGrid();; gPad->SetLogx();; gPad->SetFrameFillColor(33);; T->Draw(""Nation"","""",""hbar2"");; ; // Vertical bar chart; c1->cd(2);; gPad->SetGrid();; gPad->SetFrameFillColor(33);; T->Draw(""Division>>hDiv"","""",""goff"");; TH1F *hDiv = (TH1F*)gDirectory->Get(""hDiv"");; hDiv->SetStats(0);; TH1F *hDivFR = (TH1F*)hDiv->Clone(""hDivFR"");; T->Draw(""Division>>hDivFR"",""Nation==\""FR\"""",""goff"");; hDiv->SetBarWidth(0.45);; hDiv->SetBarOffset(0.1);; hDiv->SetFillColor(49);; TH1 *h1 = hDiv->DrawCopy(""bar2"");; hDivFR->SetBarWidth(0.4);; hDivFR->SetBarOffset(0.55);; hDivFR->SetFillColor(50);; TH1 *h2 = hDivFR->DrawCopy(""bar2,same"");; ; TLegend *legend = new TLegend(0.55,0.65,0.76,0.82);; legend->AddEntry(h1,""All nations"",""f"");; legend->AddEntry(h2,""French only"",""f"");; legend->Draw();; ; c1->cd();; delete f;; return c1;; }; f#define f(i)Definition RSha256.hxx:104; gDirectory#define gDirectoryDefinition TDirectory.h:384; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; gInterpreter#define gInterpreterDefinition TInterpreter.h:573; gROOT#define gROOTDefinition TROOT.h:406; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; gPad#define gPadDefinition TVirtualPad.h:308; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill ",MatchSource.WIKI,doc/master/hbars_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hbars_8C.html
Security,access,access,"le.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::SetBarOffsetvirtual void SetBarOffset(Float_t offset=0.25)Set the bar offset as fraction of the bin width for drawing mode ""B"".Definition TH1.h:364; TH1::DrawCopyvirtual TH1 * DrawCopy(Option_t *option="""", const char *name_postfix=""_copy"") constCopy this histogram and Draw in the current pad.Definition TH1.cxx:3113; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752; TH1::SetBarWidthvirtual void SetBarWidth(Float_t width=0.5)Set the width of bars as fraction of the bin width for drawing mode ""B"".Definition TH1.h:365; TH1::SetStatsvirtual void SetStats(Bool_t stats=kTRUE)Set statistics option on/off.Definition TH1.cxx:8990; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TLegend::AddEntryTLegendEntry * AddEntry(const TObject *obj, const char *label="""", Option_t *option=""lpf"")Add a new entry to this legend.Definition TLegend.cxx:320; TLegend::Drawvoid Draw(Option_t *option="""") overrideDraw this legend with its current attributes.Definition TLegend.cxx:425; TStringBasic string class.Definition TString.h:139; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; c1return c1Definition legend1.C:41; h1TH1F * h1Definition legend1.C:5; ROOT::Math::Chebyshev::Tdouble T(double x)Definition ChebyshevPol.h:34; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; AuthorRene Brun ; Definition in file hbars.C. tutorialshisthbars.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hbars_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hbars_8C.html
Availability,error,errors,"ntegral = 0;; 154 fitOption.Like = 0;; 155 }; 156 ; 157 Int_t special = f1->GetNumber();; 158 Bool_t linear = f1->IsLinear();; 159 Int_t npar = f1->GetNpar();; 160 if (special==299+npar) linear = kTRUE; // for polynomial functions; 161 // do not use linear fitter in these case; 162 if (fitOption.Bound || fitOption.Like || fitOption.Errors || fitOption.Gradient || fitOption.More || fitOption.User|| fitOption.Integral || fitOption.Minuit); 163 linear = kFALSE;; 164 ; 165 // create an empty TFitResult; 166 std::shared_ptr<TFitResult> tfr(new TFitResult() );; 167 // create the fitter from an empty fit result; 168 std::shared_ptr<ROOT::Fit::Fitter> fitter(new ROOT::Fit::Fitter(std::static_pointer_cast<ROOT::Fit::FitResult>(tfr) ) );; 169 ROOT::Fit::FitConfig & fitConfig = fitter->Config();; 170 ; 171 // create options; 172 ROOT::Fit::DataOptions opt;; 173 opt.fIntegral = fitOption.Integral;; 174 opt.fUseRange = fitOption.Range;; 175 opt.fExpErrors = fitOption.PChi2; // pearson chi2 with expected errors; 176 if (fitOption.Like || fitOption.PChi2) opt.fUseEmpty = true; // use empty bins in log-likelihood fits; 177 if (special==300) opt.fCoordErrors = false; // no need to use coordinate errors in a pol0 fit; 178 if (fitOption.NoErrX) opt.fCoordErrors = false; // do not use coordinate errors when requested; 179 if (fitOption.W1 ) opt.fErrors1 = true;; 180 if (fitOption.W1 > 1) opt.fUseEmpty = true; // use empty bins with weight=1; 181 if (fitOption.PChi2 == 1) {; 182 opt.fErrors1 = true; // we are not using errors in chi2, it is like setting = 1; 183 } else if (fitOption.PChi2 == 2) {; 184 opt.fErrors1 = false; // we need the errors in weighted likelihood fit; 185 }; 186 ; 187 if (fitOption.BinVolume) {; 188 opt.fBinVolume = true; // scale by bin volume; 189 if (fitOption.BinVolume == 2) opt.fNormBinVolume = true; // scale by normalized bin volume; 190 }; 191 ; 192 if (opt.fUseRange) {; 193#ifdef DEBUG; 194 printf(""use range \n"" );; 195#endif; 196 HFit::GetFunctionRange(*f1,r",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
Deployability,update,update,"::kCanDeleteLast);; 431 if (userFcn) {; 432 bcfitter->SetFCN(userFcn);; 433 // for interpreted FCN functions; 434 if (lastFitter->GetMethodCall() ) bcfitter->SetMethodCall(lastFitter->GetMethodCall() );; 435 }; 436 ; 437 // delete last fitter if it has been created here before; 438 if (lastFitter) {; 439 TBackCompFitter * lastBCFitter = dynamic_cast<TBackCompFitter *> (lastFitter);; 440 if (lastBCFitter && lastBCFitter->TestBit(TBackCompFitter::kCanDeleteLast) ); 441 delete lastBCFitter;; 442 }; 443 //N.B= this might create a memory leak if user does not delete the fitter they create; 444 TVirtualFitter::SetFitter( bcfitter );; 445 }; 446 ; 447 if (fitOption.StoreResult); 448 {; 449 TString name = ""TFitResult-"";; 450 name = name + h1->GetName() + ""-"" + f1->GetName();; 451 TString title = ""TFitResult-"";; 452 title += h1->GetTitle();; 453 tfr->SetName(name);; 454 tfr->SetTitle(title);; 455 return TFitResultPtr(tfr);; 456 }; 457 else; 458 return TFitResultPtr(iret);; 459}; 460 ; 461 ; 462void HFit::GetDrawingRange(TH1 * h1, ROOT::Fit::DataRange & range) {; 463 // get range from histogram and update the DataRange class; 464 // if a ranges already exist in that dimension use that one; 465 ; 466 Int_t ndim = GetDimension(h1);; 467 ; 468 double xmin = 0, xmax = 0, ymin = 0, ymax = 0, zmin = 0, zmax = 0;; 469 if (range.Size(0) == 0) {; 470 TAxis & xaxis = *(h1->GetXaxis());; 471 Int_t hxfirst = xaxis.GetFirst();; 472 Int_t hxlast = xaxis.GetLast();; 473 Double_t binwidx = xaxis.GetBinWidth(hxlast);; 474 xmin = xaxis.GetBinLowEdge(hxfirst);; 475 xmax = xaxis.GetBinLowEdge(hxlast) +binwidx;; 476 range.AddRange(xmin,xmax);; 477 }; 478 ; 479 if (ndim > 1) {; 480 if (range.Size(1) == 0) {; 481 TAxis & yaxis = *(h1->GetYaxis());; 482 Int_t hyfirst = yaxis.GetFirst();; 483 Int_t hylast = yaxis.GetLast();; 484 Double_t binwidy = yaxis.GetBinWidth(hylast);; 485 ymin = yaxis.GetBinLowEdge(hyfirst);; 486 ymax = yaxis.GetBinLowEdge(hylast) +binwidy;; 487 range.AddRange(1,ymin,ymax);; 4",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
Energy Efficiency,efficient,efficient," where range used was from data xmin to xmax.; 517 TH1 * h1 = mg->GetHistogram();; 518 if (h1) {; 519 HFit::GetDrawingRange(h1, range);; 520 }; 521 else if (range.Size(0) == 0) {; 522 // compute range from all the TGraph's belonging to the MultiGraph; 523 double xmin = std::numeric_limits<double>::infinity();; 524 double xmax = -std::numeric_limits<double>::infinity();; 525 TIter next(mg->GetListOfGraphs() );; 526 TGraph * g = nullptr;; 527 while ( (g = (TGraph*) next() ) ) {; 528 double x1 = 0, x2 = 0, y1 = 0, y2 = 0;; 529 g->ComputeRange(x1,y1,x2,y2);; 530 if (x1 < xmin) xmin = x1;; 531 if (x2 > xmax) xmax = x2;; 532 }; 533 range.AddRange(xmin,xmax);; 534 }; 535}; 536void HFit::GetDrawingRange(TGraph2D * gr, ROOT::Fit::DataRange & range) {; 537 // get range for graph2D (used sub-set histogram); 538 // N.B. : this is different than in previous implementation of TGraph2D::Fit. There range used was always(0,0); 539 // cannot use TGraph2D::GetHistogram which makes an interpolation; 540 //TH1 * h1 = gr->GetHistogram();; 541 //if (h1) HFit::GetDrawingRange(h1, range);; 542 // not very efficient (t.b.i.); 543 if (range.Size(0) == 0) {; 544 double xmin = gr->GetXmin();; 545 double xmax = gr->GetXmax();; 546 range.AddRange(0,xmin,xmax);; 547 }; 548 if (range.Size(1) == 0) {; 549 double ymin = gr->GetYmin();; 550 double ymax = gr->GetYmax();; 551 range.AddRange(1,ymin,ymax);; 552 }; 553}; 554 ; 555void HFit::GetDrawingRange(THnBase * s1, ROOT::Fit::DataRange & range) {; 556 // get range from histogram and update the DataRange class; 557 // if a ranges already exist in that dimension use that one; 558 ; 559 Int_t ndim = GetDimension(s1);; 560 ; 561 for ( int i = 0; i < ndim; ++i ) {; 562 if ( range.Size(i) == 0 ) {; 563 TAxis *axis = s1->GetAxis(i);; 564 range.AddRange(i, axis->GetXmin(), axis->GetXmax());; 565 }; 566 }; 567}; 568 ; 569template<class FitObject>; 570void HFit::StoreAndDrawFitFunction(FitObject * h1, TF1 * f1, const ROOT::Fit::DataRange & range, bool delOldFun",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
Integrability,rout,routines,"11 f1->GetName(), f1->GetNdim(), dim);; 112 return -5;; 113 }; 114 ; 115 return 0;; 116 ; 117}; 118 ; 119 ; 120void HFit::GetFunctionRange(const TF1 & f1, ROOT::Fit::DataRange & range) {; 121 // get the range form the function and fill and return the DataRange object; 122 Double_t fxmin, fymin, fzmin, fxmax, fymax, fzmax;; 123 f1.GetRange(fxmin, fymin, fzmin, fxmax, fymax, fzmax);; 124 // support only one range - so add only if was not set before; 125 if (range.Size(0) == 0) range.AddRange(0,fxmin,fxmax);; 126 if (range.Size(1) == 0) range.AddRange(1,fymin,fymax);; 127 if (range.Size(2) == 0) range.AddRange(2,fzmin,fzmax);; 128 return;; 129}; 130 ; 131 ; 132template<class FitObject>; 133TFitResultPtr HFit::Fit(FitObject * h1, TF1 *f1 , Foption_t & fitOption , const ROOT::Math::MinimizerOptions & minOption, const char *goption, ROOT::Fit::DataRange & range); 134{; 135 // perform fit of histograms, or graphs using new fitting classes; 136 // use same routines for fitting both graphs and histograms; 137 ; 138#ifdef DEBUG; 139 printf(""fit function %s\n"",f1->GetName() );; 140#endif; 141 ; 142 // replacement function using new fitter; 143 int hdim = HFit::GetDimension(h1);; 144 int iret = HFit::CheckFitFunction(f1, hdim);; 145 if (iret != 0) return iret;; 146 ; 147 ; 148 ; 149 // integral option is not supported in this case; 150 if (f1->GetNdim() < hdim ) {; 151 if (fitOption.Integral) Info(""Fit"",""Ignore Integral option. Model function dimension is less than the data object dimension"");; 152 if (fitOption.Like) Info(""Fit"",""Ignore Likelihood option. Model function dimension is less than the data object dimension"");; 153 fitOption.Integral = 0;; 154 fitOption.Like = 0;; 155 }; 156 ; 157 Int_t special = f1->GetNumber();; 158 Bool_t linear = f1->IsLinear();; 159 Int_t npar = f1->GetNpar();; 160 if (special==299+npar) linear = kTRUE; // for polynomial functions; 161 // do not use linear fitter in these case; 162 if (fitOption.Bound || fitOption.Like || fitOption.Errors || fit",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
Modifiability,extend,extended,"itConfig.SetParabErrors(true);; 339 fitConfig.SetMinosErrors(true);; 340 }; 341 ; 342 ; 343 // do fitting; 344 ; 345#ifdef DEBUG; 346 if (fitOption.Like) printf(""do likelihood fit...\n"");; 347 if (linear) printf(""do linear fit...\n"");; 348 printf(""do now fit...\n"");; 349#endif; 350 ; 351 bool fitok = false;; 352 ; 353 ; 354 // check if can use option user; 355 TVirtualFitter::FCNFunc_t userFcn = nullptr;; 356 // option user is enabled only when running in serial mode; 357 if (fitOption.User && TVirtualFitter::GetFitter() ) {; 358 userFcn = (TVirtualFitter::GetFitter())->GetFCN();; 359 (TVirtualFitter::GetFitter())->SetUserFunc(f1);; 360 }; 361 ; 362 ; 363 if (fitOption.User && userFcn) // user provided fit objective function; 364 fitok = fitter->FitFCN( userFcn );; 365 else if (fitOption.Like) {// likelihood fit; 366 // perform a weighted likelihood fit by applying weight correction to errors; 367 bool weight = ((fitOption.Like & 2) == 2);; 368 fitConfig.SetWeightCorrection(weight);; 369 bool extended = ((fitOption.Like & 4 ) != 4 );; 370 //if (!extended) Info(""HFitImpl"",""Do a not -extended binned fit"");; 371 ; 372 // pass fitdata as a shared pointer so ownership is shared with Fitter and FitResult class; 373 fitok = fitter->LikelihoodFit(fitdata, extended, fitOption.ExecPolicy);; 374 }; 375 else{ // standard least square fit; 376 fitok = fitter->Fit(fitdata, fitOption.ExecPolicy);; 377 }; 378 if ( !fitok && !fitOption.Quiet ); 379 Warning(""Fit"",""Abnormal termination of minimization."");; 380 iret |= !fitok;; 381 ; 382 ; 383 const ROOT::Fit::FitResult & fitResult = fitter->Result();; 384 // one could set directly the fit result in TF1; 385 iret = fitResult.Status();; 386 if (!fitResult.IsEmpty() ) {; 387 // set in f1 the result of the fit; 388 f1->SetChisquare(fitResult.Chi2() );; 389 f1->SetNDF(fitResult.Ndf() );; 390 f1->SetNumberFitPoints(fitdata->Size() );; 391 ; 392 assert((Int_t)fitResult.Parameters().size() >= f1->GetNpar() );; 393 f1->SetParameters( const_cas",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
Performance,perform,perform,"11 f1->GetName(), f1->GetNdim(), dim);; 112 return -5;; 113 }; 114 ; 115 return 0;; 116 ; 117}; 118 ; 119 ; 120void HFit::GetFunctionRange(const TF1 & f1, ROOT::Fit::DataRange & range) {; 121 // get the range form the function and fill and return the DataRange object; 122 Double_t fxmin, fymin, fzmin, fxmax, fymax, fzmax;; 123 f1.GetRange(fxmin, fymin, fzmin, fxmax, fymax, fzmax);; 124 // support only one range - so add only if was not set before; 125 if (range.Size(0) == 0) range.AddRange(0,fxmin,fxmax);; 126 if (range.Size(1) == 0) range.AddRange(1,fymin,fymax);; 127 if (range.Size(2) == 0) range.AddRange(2,fzmin,fzmax);; 128 return;; 129}; 130 ; 131 ; 132template<class FitObject>; 133TFitResultPtr HFit::Fit(FitObject * h1, TF1 *f1 , Foption_t & fitOption , const ROOT::Math::MinimizerOptions & minOption, const char *goption, ROOT::Fit::DataRange & range); 134{; 135 // perform fit of histograms, or graphs using new fitting classes; 136 // use same routines for fitting both graphs and histograms; 137 ; 138#ifdef DEBUG; 139 printf(""fit function %s\n"",f1->GetName() );; 140#endif; 141 ; 142 // replacement function using new fitter; 143 int hdim = HFit::GetDimension(h1);; 144 int iret = HFit::CheckFitFunction(f1, hdim);; 145 if (iret != 0) return iret;; 146 ; 147 ; 148 ; 149 // integral option is not supported in this case; 150 if (f1->GetNdim() < hdim ) {; 151 if (fitOption.Integral) Info(""Fit"",""Ignore Integral option. Model function dimension is less than the data object dimension"");; 152 if (fitOption.Like) Info(""Fit"",""Ignore Likelihood option. Model function dimension is less than the data object dimension"");; 153 fitOption.Integral = 0;; 154 fitOption.Like = 0;; 155 }; 156 ; 157 Int_t special = f1->GetNumber();; 158 Bool_t linear = f1->IsLinear();; 159 Int_t npar = f1->GetNpar();; 160 if (special==299+npar) linear = kTRUE; // for polynomial functions; 161 // do not use linear fitter in these case; 162 if (fitOption.Bound || fitOption.Like || fitOption.Errors || fit",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
Safety,avoid,avoid,"Range in x = [ "" << xmin << "" , "" << xmax << "" ]"" << std::endl;; 589#endif; 590 ; 591 TList * funcList = h1->GetListOfFunctions();; 592 if (funcList == nullptr){; 593 Error(""StoreAndDrawFitFunction"",""Function list has not been created - cannot store the fitted function"");; 594 return;; 595 }; 596 ; 597 // delete the function in the list only if; 598 // the function we are fitting is not in that list; 599 // If this is the case we re-use that function object and; 600 // we do not create a new one (if delOldFunction is true); 601 bool reuseOldFunction = false;; 602 if (delOldFunction) {; 603 TIter next(funcList, kIterBackward);; 604 TObject *obj;; 605 while ((obj = next())) {; 606 if (obj->InheritsFrom(TF1::Class())) {; 607 if (obj != f1) {; 608 funcList->Remove(obj);; 609 delete obj;; 610 }; 611 else {; 612 reuseOldFunction = true;; 613 }; 614 }; 615 }; 616 }; 617 ; 618 TF1 *fnew1 = nullptr;; 619 TF2 *fnew2 = nullptr;; 620 TF3 *fnew3 = nullptr;; 621 ; 622 // copy TF1 using TClass to avoid slicing in case of derived classes; 623 if (ndim < 2) {; 624 if (!reuseOldFunction) {; 625 fnew1 = (TF1*)f1->IsA()->New();; 626 R__ASSERT(fnew1);; 627 f1->Copy(*fnew1);; 628 funcList->Add(fnew1);; 629 }; 630 else {; 631 fnew1 = f1;; 632 }; 633 fnew1->SetParent( h1 );; 634 fnew1->SetRange(xmin,xmax);; 635 fnew1->Save(xmin,xmax,0,0,0,0);; 636 if (!drawFunction) fnew1->SetBit(TF1::kNotDraw);; 637 fnew1->AddToGlobalList(false);; 638 } else if (ndim < 3) {; 639 if (!reuseOldFunction) {; 640 fnew2 = (TF2*)f1->IsA()->New();; 641 R__ASSERT(fnew2);; 642 f1->Copy(*fnew2);; 643 funcList->Add(fnew2);; 644 }; 645 else {; 646 fnew2 = dynamic_cast<TF2*>(f1);; 647 R__ASSERT(fnew2);; 648 }; 649 fnew2->SetRange(xmin,ymin,xmax,ymax);; 650 fnew2->SetParent( h1 );; 651 fnew2->Save(xmin,xmax,ymin,ymax,0,0);; 652 if (!drawFunction) fnew2->SetBit(TF1::kNotDraw);; 653 fnew2->AddToGlobalList(false);; 654 } else {; 655 if (!reuseOldFunction) {; 656 fnew3 = (TF3*)f1->IsA()->New();; 657 R__ASSERT(fnew3);; 658 f",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
Security,access,access,"ormalizeErrors() constflag to check if resulting errors are be normalized according to chi2/ndfDefinition FitConfig.h:202; ROOT::Fit::FitConfig::SetMinimizerOptionsvoid SetMinimizerOptions(const ROOT::Math::MinimizerOptions &minopt)set all the minimizer options using class MinimizerOptionsDefinition FitConfig.cxx:257; ROOT::Fit::FitConfig::SetWeightCorrectionvoid SetWeightCorrection(bool on=true)apply the weight correction for error matrix computationDefinition FitConfig.h:232; ROOT::Fit::FitConfig::SetParabErrorsvoid SetParabErrors(bool on=true)set parabolic errorsDefinition FitConfig.h:226; ROOT::Fit::FitConfig::MinimizerTypeconst std::string & MinimizerType() constreturn type of minimizer packageDefinition FitConfig.h:187; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitConfig::MinimizerOptionsROOT::Math::MinimizerOptions & MinimizerOptions()access to the minimizer control parameter (non const method)Definition FitConfig.h:167; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitResult::IsEmptybool IsEmpty() constTrue if a fit result does not exist (even invalid) with parameter values.Definition FitResult.h:108; ROOT::Fit::FitResult::Errorsconst std::vector< double > & Errors() constparameter errors (return st::vector)Definition FitResult.h:162; ROOT::Fit::FitResult::Parametersconst std::vector< double > & Parameters() constparameter values (return std::vector)Definition FitResult.h:167; ROOT::Fit::FitResult::Ndfunsigned int Ndf() constNumber of degree of freedom.Definition FitResult.h:156; ROOT::Fit::FitResult::Chi2double Chi2() constReturn the Chi2 value after fitting In case of unbinned fits (or not defined one, see the documentati...Definition FitResult.h:153; ROOT::Fit::FitResult::Printvoid Print(std::ostr",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
Testability,log,log-likelihood,"ear = f1->IsLinear();; 159 Int_t npar = f1->GetNpar();; 160 if (special==299+npar) linear = kTRUE; // for polynomial functions; 161 // do not use linear fitter in these case; 162 if (fitOption.Bound || fitOption.Like || fitOption.Errors || fitOption.Gradient || fitOption.More || fitOption.User|| fitOption.Integral || fitOption.Minuit); 163 linear = kFALSE;; 164 ; 165 // create an empty TFitResult; 166 std::shared_ptr<TFitResult> tfr(new TFitResult() );; 167 // create the fitter from an empty fit result; 168 std::shared_ptr<ROOT::Fit::Fitter> fitter(new ROOT::Fit::Fitter(std::static_pointer_cast<ROOT::Fit::FitResult>(tfr) ) );; 169 ROOT::Fit::FitConfig & fitConfig = fitter->Config();; 170 ; 171 // create options; 172 ROOT::Fit::DataOptions opt;; 173 opt.fIntegral = fitOption.Integral;; 174 opt.fUseRange = fitOption.Range;; 175 opt.fExpErrors = fitOption.PChi2; // pearson chi2 with expected errors; 176 if (fitOption.Like || fitOption.PChi2) opt.fUseEmpty = true; // use empty bins in log-likelihood fits; 177 if (special==300) opt.fCoordErrors = false; // no need to use coordinate errors in a pol0 fit; 178 if (fitOption.NoErrX) opt.fCoordErrors = false; // do not use coordinate errors when requested; 179 if (fitOption.W1 ) opt.fErrors1 = true;; 180 if (fitOption.W1 > 1) opt.fUseEmpty = true; // use empty bins with weight=1; 181 if (fitOption.PChi2 == 1) {; 182 opt.fErrors1 = true; // we are not using errors in chi2, it is like setting = 1; 183 } else if (fitOption.PChi2 == 2) {; 184 opt.fErrors1 = false; // we need the errors in weighted likelihood fit; 185 }; 186 ; 187 if (fitOption.BinVolume) {; 188 opt.fBinVolume = true; // scale by bin volume; 189 if (fitOption.BinVolume == 2) opt.fNormBinVolume = true; // scale by normalized bin volume; 190 }; 191 ; 192 if (opt.fUseRange) {; 193#ifdef DEBUG; 194 printf(""use range \n"" );; 195#endif; 196 HFit::GetFunctionRange(*f1,range);; 197 }; 198#ifdef DEBUG; 199 printf(""range size %d\n"", range.Size(0) );; 200 if (range.Size(0)) ",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
Usability,simpl,simple,"ions not valid for graphs; 993 HFit::CheckGraphFitOptions(foption);; 994 // TMultiGraph fitting; 995 return HFit::Fit(gr,f1,foption,moption,goption,range);; 996}; 997 ; 998TFitResultPtr ROOT::Fit::FitObject(TGraph2D * gr, TF1 *f1 , Foption_t & foption , const ROOT::Math::MinimizerOptions & moption, const char *goption, ROOT::Fit::DataRange & range) {; 999 // exclude options not valid for graphs; 1000 HFit::CheckGraphFitOptions(foption);; 1001 // TGraph2D fitting; 1002 return HFit::Fit(gr,f1,foption,moption,goption,range);; 1003}; 1004 ; 1005TFitResultPtr ROOT::Fit::FitObject(THnBase * s1, TF1 *f1 , Foption_t & foption , const ROOT::Math::MinimizerOptions & moption, const char *goption, ROOT::Fit::DataRange & range) {; 1006 // sparse histogram fitting; 1007 return HFit::Fit(s1,f1,foption,moption,goption,range);; 1008}; 1009 ; 1010 ; 1011 ; 1012// Int_t TGraph2D::DoFit(TF2 *f2 ,Option_t *option ,Option_t *goption) {; 1013// // internal graph2D fitting methods; 1014// Foption_t fitOption;; 1015// ROOT::Fit::FitOptionsMake(option,fitOption);; 1016 ; 1017// // create range and minimizer options with default values; 1018// ROOT::Fit::DataRange range(2);; 1019// ROOT::Math::MinimizerOptions minOption;; 1020// return ROOT::Fit::FitObject(this, f2 , fitOption , minOption, goption, range);; 1021// }; 1022 ; 1023 ; 1024// function to compute the simple chi2 for graphs and histograms; 1025 ; 1026 ; 1027double ROOT::Fit::Chisquare(const TH1 & h1, TF1 & f1, bool useRange, ROOT::Fit::EChisquareType type) {; 1028 return HFit::ComputeChi2(h1,f1,useRange, type);; 1029}; 1030 ; 1031double ROOT::Fit::Chisquare(const TGraph & g, TF1 & f1, bool useRange) {; 1032 return HFit::ComputeChi2(g,f1, useRange, ROOT::Fit::EChisquareType::kNeyman);; 1033}; 1034 ; 1035template<class FitObject>; 1036double HFit::ComputeChi2(const FitObject & obj, TF1 & f1, bool useRange, ROOT::Fit::EChisquareType type ) {; 1037 ; 1038 // implement using the fitting classes; 1039 ROOT::Fit::DataOptions opt;; 1040 opt.",MatchSource.WIKI,doc/master/HFitImpl_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html
Availability,error,error,"*****************************/; 10 ; 11// Implementation file for class TH1Interface; 12 ; 13#include ""HFitInterface.h""; 14 ; 15#include ""Fit/BinData.h""; 16#include ""Fit/SparseData.h""; 17#include ""Fit/FitResult.h""; 18#include ""Math/IParamFunction.h""; 19 ; 20#include <vector>; 21 ; 22#include <cassert>; 23#include <cmath>; 24 ; 25#include ""TH1.h""; 26#include ""THnBase.h""; 27#include ""TF1.h""; 28#include ""TGraph2D.h""; 29#include ""TGraph.h""; 30#include ""TGraphErrors.h""; 31// #include ""TGraphErrors.h""; 32// #include ""TGraphBentErrors.h""; 33// #include ""TGraphAsymmErrors.h""; 34#include ""TMultiGraph.h""; 35#include ""TList.h""; 36#include ""TError.h""; 37 ; 38 ; 39//#define DEBUG; 40#ifdef DEBUG; 41#include ""TClass.h""; 42#include <iostream>; 43#endif; 44 ; 45 ; 46namespace ROOT {; 47 ; 48namespace Fit {; 49 ; 50// add a namespace to distinguish from the Graph functions; 51namespace HFitInterface {; 52 ; 53 ; 54bool IsPointOutOfRange(const TF1 * func, const double * x) {; 55 // function to check if a point is outside range; 56 if (func ==nullptr) return false;; 57 return !func->IsInside(x);; 58}; 59 ; 60bool AdjustError(const DataOptions & option, double & error, double value = 1) {; 61 // adjust the given error according to the option; 62 // return false when point must be skipped.; 63 // When point error = 0, the point is kept if the option UseEmpty is set or if; 64 // fErrors1 is set and the point value is not zero.; 65 // The value should be used only for points representing counts (histograms), not for the graph.; 66 // In the graph points with zero errors are by default skipped indepentently of the value.; 67 // If one wants to keep the points, the option fUseEmpty must be set; 68 ; 69 if (error <= 0) {; 70 if (option.fUseEmpty || (option.fErrors1 && std::abs(value) > 0 ) ); 71 error = 1.; // set error to 1; 72 else; 73 return false; // skip bins with zero errors or empty; 74 } else if (option.fErrors1); 75 error = 1; // set all error to 1 for non-empty bins; 76 return true;",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
Energy Efficiency,efficient,efficient," the function range ??); 140 // to check if inclusion/exclusion at end/point; 141 const DataRange & range = dv.Range();; 142 if (range.Size(0) != 0) {; 143 HFitInterface::ExamineRange( hfit->GetXaxis(), range(0), hxfirst, hxlast);; 144 if (range.Size(0) > 1 ) {; 145 Warning(""ROOT::Fit::FillData"",""support only one range interval for X coordinate"");; 146 }; 147 }; 148 ; 149 if (hfit->GetDimension() > 1 && range.Size(1) != 0) {; 150 HFitInterface::ExamineRange( hfit->GetYaxis(), range(1), hyfirst, hylast);; 151 if (range.Size(1) > 1 ); 152 Warning(""ROOT::Fit::FillData"",""support only one range interval for Y coordinate"");; 153 }; 154 ; 155 if (hfit->GetDimension() > 2 && range.Size(2) != 0) {; 156 HFitInterface::ExamineRange( hfit->GetZaxis(), range(2), hzfirst, hzlast);; 157 if (range.Size(2) > 1 ); 158 Warning(""ROOT::Fit::FillData"",""support only one range interval for Z coordinate"");; 159 }; 160 ; 161 ; 162 int n = (hxlast-hxfirst+1)*(hylast-hyfirst+1)*(hzlast-hzfirst+1);; 163 ; 164#ifdef DEBUG; 165 std::cout << ""THFitInterface: ifirst = "" << hxfirst << "" ilast = "" << hxlast; 166 << "" total bins "" << n; 167 << std::endl;; 168#endif; 169 ; 170 // reserve n for more efficient usage; 171 //dv.Data().reserve(n);; 172 ; 173 int hdim = hfit->GetDimension();; 174 int ndim = hdim;; 175 // case of function dimension less than histogram; 176 if (func !=nullptr && func->GetNdim() == hdim-1) ndim = hdim-1;; 177 ; 178 assert( ndim > 0 );; 179 //typedef BinPoint::CoordData CoordData;; 180 //CoordData x = CoordData( hfit->GetDimension() );; 181 dv.Initialize(n,ndim, (fitOpt.fErrors1) ? ROOT::Fit::BinData::kNoError : ROOT::Fit::BinData::kValueError);; 182 ; 183 double x[3];; 184 double s[3];; 185 ; 186 int binx = 0;; 187 int biny = 0;; 188 int binz = 0;; 189 ; 190 const TAxis *xaxis = hfit->GetXaxis();; 191 const TAxis *yaxis = hfit->GetYaxis();; 192 const TAxis *zaxis = hfit->GetZaxis();; 193 ; 194 for ( binx = hxfirst; binx <= hxlast; ++binx) {; 195 if (useBinEdges) {; 196 x[0] = x",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
Safety,avoid,avoid,"ze is "" << dv.Size() << std::endl;; 260#endif; 261 ; 262}; 263 ; 264////////////////////////////////////////////////////////////////////////////////; 265/// Compute rough values of parameters for an exponential; 266 ; 267void InitExpo(const ROOT::Fit::BinData & data, TF1 * f1); 268{; 269 unsigned int n = data.Size();; 270 if (n == 0) return;; 271 ; 272 // find xmin and xmax of the data; 273 double valxmin;; 274 double xmin = *(data.GetPoint(0,valxmin));; 275 double xmax = xmin;; 276 double valxmax = valxmin;; 277 ; 278 for (unsigned int i = 1; i < n; ++ i) {; 279 double val;; 280 double x = *(data.GetPoint(i,val) );; 281 if (x < xmin) {; 282 xmin = x;; 283 valxmin = val;; 284 }; 285 else if (x > xmax) {; 286 xmax = x;; 287 valxmax = val;; 288 }; 289 }; 290 ; 291 // avoid negative values of valxmin/valxmax; 292 if (valxmin <= 0 && valxmax > 0 ) valxmin = valxmax;; 293 else if (valxmax <=0 && valxmin > 0) valxmax = valxmin;; 294 else if (valxmin <=0 && valxmax <= 0) { valxmin = 1; valxmax = 1; }; 295 ; 296 double slope = std::log( valxmax/valxmin) / (xmax - xmin);; 297 double constant = std::log(valxmin) - slope * xmin;; 298 f1->SetParameters(constant, slope);; 299}; 300 ; 301 ; 302////////////////////////////////////////////////////////////////////////////////; 303/// Compute Initial values of parameters for a gaussian; 304/// derived from function H1InitGaus defined in TH1.cxx; 305 ; 306void InitGaus(const ROOT::Fit::BinData & data, TF1 * f1); 307{; 308 ; 309 static const double sqrtpi = 2.506628;; 310 ; 311 // - Compute mean value and RMS of the data; 312 unsigned int n = data.Size();; 313 if (n == 0) return;; 314 double sumx = 0;; 315 double sumx2 = 0;; 316 double allcha = 0;; 317 double valmax = 0;; 318 double rangex = data.Coords(n-1)[0] - data.Coords(0)[0];; 319 // to avoid binwidth = 0 set arbitrarly to 1; 320 double binwidth = 1;; 321 if ( rangex > 0) binwidth = rangex;; 322 double x0 = 0;; 323 for (unsigned int i = 0; i < n; ++ i) {; 324 double val;; 325 doub",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
Testability,assert,assert," end namespace HFitInterface; 105 ; 106 ; 107void FillData(BinData & dv, const TH1 * hfit, TF1 * func); 108{; 109 // Function to fill the binned Fit data structure from a TH1; 110 // The dimension of the data is the same of the histogram dimension; 111 // The function pointer is need in case of integral is used and to reject points; 112 // rejected in the function; 113 ; 114 // the TF1 pointer cannot be constant since EvalPar and InitArgs are not const methods; 115 ; 116 // get fit option; 117 const DataOptions & fitOpt = dv.Opt();; 118 ; 119 ; 120 // store instead of bin center the bin edges; 121 bool useBinEdges = fitOpt.fIntegral || fitOpt.fBinVolume;; 122 ; 123 assert(hfit != nullptr);; 124 ; 125 //std::cout << ""creating Fit Data from histogram "" << hfit->GetName() << std::endl;; 126 ; 127 int hxfirst = hfit->GetXaxis()->GetFirst();; 128 int hxlast = hfit->GetXaxis()->GetLast();; 129 ; 130 int hyfirst = hfit->GetYaxis()->GetFirst();; 131 int hylast = hfit->GetYaxis()->GetLast();; 132 ; 133 int hzfirst = hfit->GetZaxis()->GetFirst();; 134 int hzlast = hfit->GetZaxis()->GetLast();; 135 ; 136 // function by default has same range (use that one if requested otherwise use data one); 137 ; 138 ; 139 // get the range (add the function range ??); 140 // to check if inclusion/exclusion at end/point; 141 const DataRange & range = dv.Range();; 142 if (range.Size(0) != 0) {; 143 HFitInterface::ExamineRange( hfit->GetXaxis(), range(0), hxfirst, hxlast);; 144 if (range.Size(0) > 1 ) {; 145 Warning(""ROOT::Fit::FillData"",""support only one range interval for X coordinate"");; 146 }; 147 }; 148 ; 149 if (hfit->GetDimension() > 1 && range.Size(1) != 0) {; 150 HFitInterface::ExamineRange( hfit->GetYaxis(), range(1), hyfirst, hylast);; 151 if (range.Size(1) > 1 ); 152 Warning(""ROOT::Fit::FillData"",""support only one range interval for Y coordinate"");; 153 }; 154 ; 155 if (hfit->GetDimension() > 2 && range.Size(2) != 0) {; 156 HFitInterface::ExamineRange( hfit->GetZaxis(), range(2), hz",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
Usability,simpl,simple,"he fit data Set the constant and slope a...Definition HFitInterface.cxx:267; ROOT::Fit::InitGausvoid InitGaus(const ROOT::Fit::BinData &data, TF1 *f1)compute initial parameter for gaussian function given the fit data Set the sigma limits for zero top ...Definition HFitInterface.cxx:306; ROOT::Fit::DoFillDatavoid DoFillData(BinData &dv, const TGraph *gr, BinData::ErrorType type, TF1 *func)Definition HFitInterface.cxx:576; ROOT::Fit::GetDataTypeBinData::ErrorType GetDataType(const TGraph *gr, DataOptions &fitOpt)Definition HFitInterface.cxx:476; ROOT::Fit::GetConfidenceIntervalsbool GetConfidenceIntervals(const TH1 *h1, const ROOT::Fit::FitResult &r, TGraphErrors *gr, double cl=0.95)compute confidence intervals at level cl for a fitted histogram h1 in a TGraphErrors grDefinition HFitInterface.cxx:965; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fAsymErrorsbool fAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residua...Definition DataOptions.h:55; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:47; ROOT::Fit::DataOptions::fBinVolumebool fBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits)Definition DataOptions.h:48; ROOT::Fit::DataOptions::fCoordErrorsbool fCoordErrorsuse errors on the x coordinates when available (default is true)Def",MatchSource.WIKI,doc/master/HFitInterface_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html
Integrability,depend,dependency,". ROOT: hist/hist/inc/HFitInterface.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Enumerations |; Functions ; HFitInterface.h File Reference. #include ""TFitResultPtr.h"". Include dependency graph for HFitInterface.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Fit;  Namespace for the fitting classes. ;  ; namespace  ROOT::Math;  . Enumerations; enum class  ROOT::Fit::EChisquareType { ROOT::Fit::kNeyman = 0; , ROOT::Fit::kPLikeRatio; , ROOT::Fit::kPearson; };  ; enum class  ROOT::Fit::EFitObjectType { ROOT::Fit::kHistogram; , ROOT::Fit::kGraph; };  . Functions; double ROOT::Fit::Chisquare (const TGraph &h1, TF1 &f1, bool useRange);  compute the chi2 value for a graph given a function (see TGraph::Chisquare) ;  ; double ROOT::Fit::Chisquare (const TH1 &h1, TF1 &f1, bool useRange, EChisquareType type);  compute the chi2 value for an histogram given a function (see TH1::Chisquare for the documentation) ;  ; void ROOT::Fit::FillData (BinData &dv, const TGraph *gr, TF1 *func=nullptr);  fill the data vector from a TGraph. ;  ; void ROOT::Fit::FillData (BinData &dv, const TGraph2D *gr, TF1 *func=nullptr);  fill the data vector from a TGraph2D. ;  ; void ROOT::Fit::FillData (BinData &dv, const TH1 *hist, TF1 *func=nullptr);  fill the data vector from a TH1. ;  ; void ROOT::Fit::FillData (BinData &dv, const THnBase *hist, TF1 *func=nullptr);  fill the data vector from a THnBase. ;  ; void ROOT::Fit::FillData (BinData &dv, const TMultiGraph *gr, TF1 *func=nullptr);  fill the data vector from a TMultiGraph. ;  ; v",MatchSource.WIKI,doc/master/HFitInterface_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8h.html
Usability,simpl,simple,"tion for a TH1 (called from TH1::Fit) ;  ; TFitResultPtr ROOT::Fit::FitObject (THnBase *s1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range);  fitting function for a THn / THnSparse (called from THnBase::Fit) ;  ; TFitResultPtr ROOT::Fit::FitObject (TMultiGraph *mg, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range);  fitting function for a MultiGraph (called from TMultiGraph::Fit) ;  ; void ROOT::Fit::FitOptionsMake (EFitObjectType type, const char *option, Foption_t &fitOption);  Decode list of options into fitOption. ;  ; bool ROOT::Fit::GetConfidenceIntervals (const TH1 *h1, const ROOT::Fit::FitResult &r, TGraphErrors *gr, double cl=0.95);  compute confidence intervals at level cl for a fitted histogram h1 in a TGraphErrors gr ;  ; void ROOT::Fit::Init2DGaus (const ROOT::Fit::BinData &data, TF1 *f1);  compute initial parameter for 2D gaussian function given the fit data Set the sigma limits for zero top 10* initial rms values Set the initial parameter values in the TF1 ;  ; void ROOT::Fit::InitExpo (const ROOT::Fit::BinData &data, TF1 *f1);  compute initial parameter for an exponential function given the fit data Set the constant and slope assuming a simple exponential going through xmin and xmax of the data set ;  ; void ROOT::Fit::InitGaus (const ROOT::Fit::BinData &data, TF1 *f1);  compute initial parameter for gaussian function given the fit data Set the sigma limits for zero top 10* initial rms values Set the initial parameter values in the TF1 ;  ; TFitResultPtr ROOT::Fit::UnBinFit (ROOT::Fit::UnBinData *data, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption);  fit an unbin data set (from tree or from histogram buffer) using a TF1 pointer and fit options. ;  . histhistincHFitInterface.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/HFitInterface_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8h.html
Availability,error,error,"lor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; ROOT::Fit::BinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y ...Definition BinData.h:52; ROOT::Fit::DataRangeclass describing the range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::SparseDataSparseData class representing the data of a THNSparse histogram The data needs to be converted to a B...Definition SparseData.h:35; ROOT::Fit::UnBinDataClass describing the un-binned data sets (just x coordinates values) of any dimensions.Definition UnBinData.h:46; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; TF11-Dim function classDefinition TF1.h:233; TF2A 2-Dim function with parameters.Definition TF2.h:29; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TGraph2DGr",MatchSource.WIKI,doc/master/HFitInterface_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8h_source.html
Safety,avoid,avoid,". ROOT: hist/hist/inc/HFitInterface.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. HFitInterface.h. Go to the documentation of this file. 1// @(#)root/hist:$Id$; 2// Author: L. Moneta Thu Aug 31 10:40:20 2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class HFitInterface; 12// set of free functions used to couple the ROOT data object with the fitting classes; 13 ; 14// avoid including this file when running CINT since free functions cannot be re-defined; 15 ; 16#ifndef ROOT_HFitInterface; 17#define ROOT_HFitInterface; 18 ; 19 ; 20class TH1;; 21class THnBase;; 22class TF1;; 23class TF2;; 24class TGraph;; 25class TGraphErrors;; 26class TGraph2D;; 27class TMultiGraph;; 28struct Foption_t;; 29 ; 30#include ""TFitResultPtr.h""; 31 ; 32namespace ROOT {; 33 ; 34 namespace Math {; 35 class MinimizerOptions;; 36 }; 37 ; 38 namespace Fit {; 39 ; 40 //class BinData;; 41 ; 42 class FitResult;; 43 class DataRange;; 44 class BinData;; 45 class UnBinData;; 46 class SparseData;; 47 ; 48 enum class EFitObjectType {; 49 kHistogram,; 50 kGraph; 51 };; 52 ; 53 enum class EChisquareType {; 54 kNeyman = 0,; 55 kPLikeRatio,; 56 kPearson; 57 };; 58 ; 59 ; 60 ; 61 /**; 62 Decode list of options into fitOption; 63 */; 64 void FitOptionsMake(EFitObjectType type, const char *option, Foption_t &fitOption);; 65 ; 66 /**; 67 fitting function for a TH1 (called from TH1::Fit); 68 */; 69 TFitResultPtr FitObject(TH1 * h1, TF1 *f1, Foption_t & option, const ROOT::Math::MinimizerOptions & moption, const char *goption, ROOT::Fit::DataRange & range);; 70 ; 71 /**; 72 fitting function for a TGraph (called from TGraph::Fit); 73 */; 74 TFitResultPtr FitObject(TGraph * gr, TF1 *f1 , Foption_t & option , const ROOT::Math::MinimizerOptions & moption, co",MatchSource.WIKI,doc/master/HFitInterface_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8h_source.html
Usability,simpl,simple," void FillData ( BinData & dv, const TGraph2D * gr, TF1 * func = nullptr);; 130 ; 131 ; 132 /**; 133 fill the data vector from a TGraph. Pass also the TF1 function which is; 134 needed in case to exclude points rejected by the function; 135 */; 136 void FillData ( BinData & dv, const TGraph * gr, TF1 * func = nullptr);; 137 /**; 138 fill the data vector from a TMultiGraph. Pass also the TF1 function which is; 139 needed in case to exclude points rejected by the function; 140 */; 141 void FillData ( BinData & dv, const TMultiGraph * gr, TF1 * func = nullptr);; 142 ; 143 ; 144 /**; 145 compute initial parameter for an exponential function given the fit data; 146 Set the constant and slope assuming a simple exponential going through xmin and xmax; 147 of the data set; 148 */; 149 void InitExpo(const ROOT::Fit::BinData & data, TF1 * f1);; 150 ; 151 ; 152 /**; 153 compute initial parameter for gaussian function given the fit data; 154 Set the sigma limits for zero top 10* initial rms values; 155 Set the initial parameter values in the TF1; 156 */; 157 void InitGaus(const ROOT::Fit::BinData & data, TF1 * f1);; 158 ; 159 /**; 160 compute initial parameter for 2D gaussian function given the fit data; 161 Set the sigma limits for zero top 10* initial rms values; 162 Set the initial parameter values in the TF1; 163 */; 164 void Init2DGaus(const ROOT::Fit::BinData & data, TF1 * f1);; 165 ; 166 /**; 167 compute confidence intervals at level cl for a fitted histogram h1 in a TGraphErrors gr; 168 */; 169 bool GetConfidenceIntervals(const TH1 * h1, const ROOT::Fit::FitResult & r, TGraphErrors * gr, double cl = 0.95);; 170 ; 171 /**; 172 compute the chi2 value for an histogram given a function (see TH1::Chisquare for the documentation); 173 */; 174 double Chisquare(const TH1 & h1, TF1 & f1, bool useRange, EChisquareType type);; 175 ; 176 /**; 177 compute the chi2 value for a graph given a function (see TGraph::Chisquare); 178 */; 179 double Chisquare(const TGraph & h1, TF1 & f1, bo",MatchSource.WIKI,doc/master/HFitInterface_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HFitInterface_8h_source.html
Availability,error,error,", const char *title, int nbinsx, double xlow, double xup, int nbinsy,; 177 const double *ybins, const char *option = """");; 178 TProfile2DModel(const char *name, const char *title, int nbinsx, const double *xbins, int nbinsy,; 179 const double *ybins, const char *option = """");; 180 std::shared_ptr<::TProfile2D> GetProfile() const;; 181};; 182 ; 183} // ns RDF; 184 ; 185} // ns ROOT; 186 ; 187#endif // ROOT_RDFHISTOMODELS; h#define h(i)Definition RSha256.hxx:106; namechar name[80]Definition TGX11.cxx:110; xminfloat xminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; TString.h; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH2D2-D histogram with a double per channel (see TH1 documentation)Definition TH2.h:357; TH3D3-D histogram with a double per channel (see TH1 documentation)Definition TH3.h:363; THnTTemplated implementation of the abstract base THn.Definition THn.h:219; TProfile2DProfile2D histograms are used to display the mean value of Z and its error for each cell in X,...Definition TProfile2D.h:27; TProfileProfile Histogram.Definition TProfile.h:32; TStringBasic string class.Definition TString.h:139; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::RDF::TH1DModelA struct which stores the parameters of a TH1D.Definition HistoModels.hxx:30; ROOT::RDF::TH1DModel::fNameTString fNameDefinition HistoModels.hxx:31; ROOT::RDF::TH1DModel::~TH1DModel~TH1DModel()Definition RDFHistoModels.cxx:114; ROOT::RDF::TH1DModel::GetHistogramstd::shared_ptr<::TH1D > GetHistogram() constDefinition RDFHistoModels.cxx:103; ROOT::RDF::TH1DModel::fXUpdouble fXUpDefinition HistoModels.hxx:35; ROOT::RDF::TH1DModel::fNbinsXint fNbinsXDefinition HistoModels.hxx:33; ROOT::RDF::TH1DModel::TH1DModelTH1DModel()=default; ROOT::RDF::TH1DModel::fXLowdouble fXLowDefinition HistoModels.hxx:34; ROOT::RDF::TH1DModel::fBinXEdgesstd::vector<",MatchSource.WIKI,doc/master/HistoModels_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/HistoModels_8hxx_source.html
Availability,error,error,". ROOT: tutorials/hist/histpalettecolor.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. histpalettecolor.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Palette coloring for histogram is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ; When one of these options is given to TH1::Draw the histogram get its color from the current color palette defined by gStyle->SetPalette(...). The color is determined according to the number of objects having palette coloring in the current pad.; In this example five histograms are displayed with palette coloring for lines and and marker. The histograms are drawn with markers and error bars and one can see the color of each histogram is picked inside the default palette kBird. ; void histpalettecolor(); {; auto C = new TCanvas();; ; gStyle->SetOptTitle(kFALSE);; gStyle->SetOptStat(0);; ; auto h1 = new TH1F(""h1"",""Histogram drawn with full circles"",100,-4,4);; auto h2 = new TH1F(""h2"",""Histogram drawn with full squares"",100,-4,4);; auto h3 = new TH1F(""h3"",""Histogram drawn with full triangles up"",100,-4,4);; auto h4 = new TH1F(""h4"",""Histogram drawn with full triangles down"",100,-4,4);; auto h5 = new TH1F(""h5"",""Histogram drawn with empty circles"",100,-4,4);; ; TRandom3 rng;; Double_t px,py;; for (Int_t i = 0; i < 25000; i++) {; rng.Rannor(px,py);; h1->Fill(px,10.);; h2->Fill(px, 8.);; h3->Fill(px, 6.);; h4->Fill(px, 4.);; h5->Fill(px, 2.);; }; ; h1->SetMarkerStyle(kFullCircle);; h2->SetMarkerStyle(kFullSquare);; h3->SetMarkerStyle(kFullTriangleUp);; h4->SetMarkerStyle(kFullTriangleDown);; h5->SetMarkerStyle(kOpenCircle);; ; h1->Draw(""PLC PMC"");; h2->Draw(""SAME PLC PMC"");; h3->Draw(""SAME PLC PMC"");; h4->Draw(""SAME PLC PMC"");; h5->Draw(""SAME PLC PMC"");; ; gPad->BuildLegend();; }; Int_tint Int_tDefinition RtypesCore.h:45; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDe",MatchSource.WIKI,doc/master/histpalettecolor_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/histpalettecolor_8C.html
Testability,test,test,". ROOT: tutorials/hist/hlabels1.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hlabels1.C File ReferenceTutorials » Histograms tutorials. Detailed Description; 1-D histograms with alphanumeric labels . ; TCanvas *hlabels1(); {; const Int_t nx = 20;; const char *people[nx] = {""Jean"",""Pierre"",""Marie"",""Odile"",""Sebastien"",; ""Fons"",""Rene"",""Nicolas"",""Xavier"",""Greg"",""Bjarne"",""Anton"",""Otto"",; ""Eddy"",""Peter"",""Pasha"",""Philippe"",""Suzanne"",""Jeff"",""Valery""};; TCanvas *c1 = new TCanvas(""c1"",""demo bin labels"",10,10,900,500);; c1->SetGrid();; c1->SetTopMargin(0.15);; TH1F *h = new TH1F(""h"",""test"",3,0,3);; h->SetStats(0);; h->SetFillColor(38);; h->SetCanExtend(TH1::kAllAxes);; for (Int_t i=0;i<5000;i++) {; Int_t r = gRandom->Rndm()*20;; h->Fill(people[r],1);; }; h->LabelsDeflate();; h->Draw();; TPaveText *pt = new TPaveText(0.7,0.85,0.98,0.98,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Use the axis Context Menu LabelsOption"");; pt->AddText("" \""a\"" to sort by alphabetic order"");; pt->AddText("" \"">\"" to sort by decreasing values"");; pt->AddText("" \""<\"" to sort by increasing values"");; pt->Draw();; return c1;; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::kAllAxes@ kAllAxesDefinition TH1.h:76; TPaveTextA",MatchSource.WIKI,doc/master/hlabels1_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hlabels1_8C.html
Testability,test,test,". ROOT: tutorials/hist/hlabels2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hlabels2.C File ReferenceTutorials » Histograms tutorials. Detailed Description; 2-D histograms with alphanumeric labels. . ; TCanvas *hlabels2(); {; const Int_t nx = 12;; const Int_t ny = 20;; const char *month[nx] = {""January"",""February"",""March"",""April"",""May"",; ""June"",""July"",""August"",""September"",""October"",""November"",; ""December""};; const char *people[ny] = {""Jean"",""Pierre"",""Marie"",""Odile"",""Sebastien"",; ""Fons"",""Rene"",""Nicolas"",""Xavier"",""Greg"",""Bjarne"",""Anton"",; ""Otto"",""Eddy"",""Peter"",""Pasha"",""Philippe"",""Suzanne"",""Jeff"",; ""Valery""};; TCanvas *c1 = new TCanvas(""c1"",""demo bin labels"",10,10,600,600);; c1->SetGrid();; c1->SetLeftMargin(0.15);; c1->SetBottomMargin(0.15);; TH2F *h = new TH2F(""h"",""test"",3,0,3,2,0,2);; h->SetCanExtend(TH1::kAllAxes);; h->SetStats(0);; gRandom->SetSeed();; for (Int_t i=0;i<15000;i++) {; Int_t rx = gRandom->Rndm()*nx;; Int_t ry = gRandom->Rndm()*ny;; h->Fill(people[ry],month[rx],1);; }; h->LabelsDeflate(""X"");; h->LabelsDeflate(""Y"");; h->LabelsOption(""v"");; h->Draw(""text"");; ; TPaveText *pt = new TPaveText(0.6,0.85,0.98,0.98,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Use the axis Context Menu LabelsOption"");; pt->AddText("" \""a\"" to sort by alphabetic order"");; pt->AddText("" \"">\"" to sort by decreasing values"");; pt->AddText("" \""<\"" to sort by increasing values"");; pt->Draw();; return c1;; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1::kAllAxes@ kAllAxesDefinition TH1.h:76; TH2F2-D histogram with a float per channel (se",MatchSource.WIKI,doc/master/hlabels2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hlabels2_8C.html
Modifiability,variab,variables,"@ kBlackDefinition Rtypes.h:65; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; gInterpreter#define gInterpreterDefinition TInterpreter.h:573; kCanDelete@ kCanDeleteDefinition TObject.h:367; kCannotPick@ kCannotPickDefinition TObject.h:372; gROOT#define gROOTDefinition TROOT.h:406; gPad#define gPadDefinition TVirtualPad.h:308; TBoxCreate a Box.Definition TBox.h:22; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::HighlightConnectvirtual void HighlightConnect(const char *slot)This is ""simplification"" for function TCanvas::Connect with Highlighted signal for specific slot.Definition TCanvas.cxx:1631; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TTextBase class for several text objects.Definition TText.h:22; TTree::Drawvoid Draw(Option_t *opt) overrideDefault Draw method for all objects.Definition TTree.h:431; TTree::GetV3virtual Double_t * GetV3()Definition TTree.h:580; TTree::GetV1virtual Double_t * GetV1()Definition TTree.h:576; TTree::GetV4virtual Double_t * GetV4()Definition TTree.h:582; TTree::GetV2virtual Double_t * GetV2()Definition TTree.h:578; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; yDouble_t y[n]Definition legend1.C:",MatchSource.WIKI,doc/master/hlGraph2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hlGraph2_8C.html
Usability,simpl,simplification,", ""Canvas2"", 505, 0, 600, 400);; ntuple->Draw(""TMath::Sqrt(px*px + py*py + pz*pz)>>histo(100, 0, 15)"", cut);; ; // Must be last; ntuple->Draw(""px:py:pz:i"", cut, ""goff"");; }; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefinition RtypesCore.h:45; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; kRed@ kRedDefinition Rtypes.h:66; kBlack@ kBlackDefinition Rtypes.h:65; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; gInterpreter#define gInterpreterDefinition TInterpreter.h:573; kCanDelete@ kCanDeleteDefinition TObject.h:367; kCannotPick@ kCannotPickDefinition TObject.h:372; gROOT#define gROOTDefinition TROOT.h:406; gPad#define gPadDefinition TVirtualPad.h:308; TBoxCreate a Box.Definition TBox.h:22; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::HighlightConnectvirtual void HighlightConnect(const char *slot)This is ""simplification"" for function TCanvas::Connect with Highlighted signal for specific slot.Definition TCanvas.cxx:1631; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TTextBase class for several text objects.Definition TText.h:22; TTree::Drawvoid Draw(Option_t *op",MatchSource.WIKI,doc/master/hlGraph2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hlGraph2_8C.html
Deployability,update,update,". ROOT: tutorials/hist/hlHisto1.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hlHisto1.C File ReferenceTutorials » Histograms tutorials. Detailed Description; This tutorial demonstrates how the highlight mechanism can be used on an histogram. ; A 2D histogram is booked an filled with a random gaussian distribution. Then an highlight method is connected to the histogram. Moving the mouse on the histogram will update the histogram title in real time according to the highlighted bin.; ; TText *info = nullptr;; ; void HighlightTitle(TVirtualPad *pad, TObject *obj, Int_t xhb, Int_t yhb); {; auto h2 = dynamic_cast<TH2F*>(obj);; if (!h2) return;; if (!h2->IsHighlight()) { // after highlight disabled; h2->SetTitle(""Disable highlight"");; return;; }; if (info) info->SetTitle("""");; TString t;; t.Form(""bin[%02d, %02d] (%5.2f, %5.2f) content %g"", xhb, yhb,; h2->GetXaxis()->GetBinCenter(xhb), h2->GetYaxis()->GetBinCenter(yhb),; h2->GetBinContent(xhb, yhb));; h2->SetTitle(t.Data());; pad->Update();; }; ; void hlHisto1(); {; auto c1 = new TCanvas();; c1->HighlightConnect(""HighlightTitle(TVirtualPad*,TObject*,Int_t,Int_t)"");; ; auto h2 = new TH2F(""h2"", """", 50, -5.0, 5.0, 50, -5.0, 5.0);; for (Int_t i = 0; i < 10000; i++) h2->Fill(gRandom->Gaus(), gRandom->Gaus());; h2->Draw();; ; info = new TText(0.0, -4.0, ""please move the mouse over the frame"");; info->SetTextAlign(22);; info->SetTextColor(kRed+1);; info->SetBit(kCannotPick);; info->Draw();; c1->Update();; ; // call after update to apply changes in the histogram painter; h2->SetHighlight();; }; Int_tint Int_tDefinition RtypesCore.h:45; kRed@ kRedDefinition Rtypes.h:66; kCannotPick@ kCannotPickDefinition TObject.h:372; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definitio",MatchSource.WIKI,doc/master/hlHisto1_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hlHisto1_8C.html
Modifiability,variab,variables,"111; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::GetNbinsXvirtual Int_t GetNbinsX() constDefinition TH1.h:297; TH1::IsHighlightvirtual Bool_t IsHighlight() constDefinition TH1.h:338; TH1::FindBinvirtual Int_t FindBin(Double_t x, Double_t y=0, Double_t z=0)Return Global bin number corresponding to x,y,z.Definition TH1.cxx:3672; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TListA doubly linked list.Definition TList.h:38; TList::AtTObject * At(Int_t idx) const overrideReturns the object at position idx. Returns 0 if idx is out of range.Definition TList.cxx:355; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TPad::Dividevoid Divide(Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0) overrideAutomatic pad generation by division.Definition TPad.cxx:1249; TPad::FindObjectTObject * FindObject(const char *name) const overrideSearch if object named name is inside this pad or in pads inside this pad.Definition TPad.cxx:2700; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TTextBase class for several text objects.Definition TText.h:22; TTree::GetSelectedRowsvirtual Long64_t GetSelectedRows()Definition TTree.h:553; TTree::Drawvoid Draw(Option_t *opt) overrideDefault Draw method for all object",MatchSource.WIKI,doc/master/hlHisto3_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hlHisto3_8C.html
Usability,simpl,simplification,"on RSha256.hxx:105; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefinition RtypesCore.h:45; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; Long64_tlong long Long64_tDefinition RtypesCore.h:69; kGreen@ kGreenDefinition Rtypes.h:66; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; gInterpreter#define gInterpreterDefinition TInterpreter.h:573; kCanDelete@ kCanDeleteDefinition TObject.h:367; kCannotPick@ kCannotPickDefinition TObject.h:372; gROOT#define gROOTDefinition TROOT.h:406; gPad#define gPadDefinition TVirtualPad.h:308; TAttLine::GetLineColorvirtual Color_t GetLineColor() constReturn the line color.Definition TAttLine.h:33; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::HighlightConnectvirtual void HighlightConnect(const char *slot)This is ""simplification"" for function TCanvas::Connect with Highlighted signal for specific slot.Definition TCanvas.cxx:1631; TCanvas::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet current canvas & pad.Definition TCanvas.cxx:719; TCanvas::Updatevoid Update() overrideUpdate canvas pad buffers.Definition TCanvas.cxx:2489; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t y)Set x and y values for point number i.Definition TGraph.cxx:2342; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::GetXaxisTAxis * GetXaxis() constGet x axis of the graph.Definition TGraph.cxx:1566; TGraph::GetYaxisTAxis * GetYaxis() constGet y axis of the graph.Definition TGraph.cxx:1575; TGraph::Fin",MatchSource.WIKI,doc/master/hlHisto3_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hlHisto3_8C.html
Modifiability,config,configure,"->Clone(""hz"");; hz->SetTitle(TString::Format(""%s (zoomed)"", hz->GetTitle()));; hz->SetStats(kFALSE);; hz->Draw();; Canvas2->Update();; hz->SetHighlight(kFALSE);; }; ; Int_t zf = hz->GetNbinsX()*0.05; // zoom factor; hz->GetXaxis()->SetRange(xhb-zf, xhb+zf);; ; Canvas2->Modified();; Canvas2->Update();; }; ; void hlHisto4(); {; auto Canvas1 = new TCanvas(""Canvas1"", """", 0, 0, 600, 400);; Canvas1->HighlightConnect(""HighlightZoom(TVirtualPad*,TObject*,Int_t,Int_t)"");; ; auto f1 = new TF1(""f1"", ""x*gaus(0) + [3]*abs(sin(x)/x)"", -50.0, 50.0);; f1->SetParameters(20.0, 4.0, 1.0, 20.0);; auto h1 = new TH1F(""h1"", ""Test random numbers"", 200, -50.0, 50.0);; h1->FillRandom(""f1"", 100000);; h1->Draw();; h1->Fit(f1, ""Q"");; gStyle->SetGridColor(kGray);; Canvas1->SetGrid();; ; info = new TText(0.0, h1->GetMaximum()*0.7, ""please move the mouse over the frame"");; info->SetTextSize(0.04);; info->SetTextAlign(22);; info->SetTextColor(kRed-1);; info->SetBit(kCannotPick);; info->Draw();; ; Canvas1->Update();; ; // configure highlight at the end when histogram is already painted; h1->SetHighlight();; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kGray@ kGrayDefinition Rtypes.h:65; kRed@ kRedDefinition Rtypes.h:66; kCannotPick@ kCannotPickDefinition TObject.h:372; gROOT#define gROOTDefinition TROOT.h:406; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TAxis::SetRangevirtual void SetRange(Int_t first=0, Int_t last=0)Set the viewing range for the axis using bin numbers.Definition TAxis.cxx:1052; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classD",MatchSource.WIKI,doc/master/hlHisto4_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hlHisto4_8C.html
Availability,robust,robust,"ide ; .  . Loading...; Searching...; No Matches. hsimpleReader.C File ReferenceTutorials » Tree tutorials. Detailed Description; TTreeReader simplest example. ; Read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; auto myHist = new TH1F(""h1"",""ntuple"",100,-4,4);; ; // Open the file containing the tree.; auto myFile = TFile::Open(""hsimple.root"");; if (!myFile || myFile->IsZombie()) {; return;; }; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }; ; myHist->Draw();; }; TFile.h; TH1F.h; TTreeReaderValue.h; TTreeReader.h; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; AuthorAnders Eie, 2013 ; Definition in file hsimpleReader.C. tutorialstreehsimpleReader.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsimpleReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimpleReader_8C.html
Integrability,interface,interface,"ide ; .  . Loading...; Searching...; No Matches. hsimpleReader.C File ReferenceTutorials » Tree tutorials. Detailed Description; TTreeReader simplest example. ; Read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; auto myHist = new TH1F(""h1"",""ntuple"",100,-4,4);; ; // Open the file containing the tree.; auto myFile = TFile::Open(""hsimple.root"");; if (!myFile || myFile->IsZombie()) {; return;; }; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }; ; myHist->Draw();; }; TFile.h; TH1F.h; TTreeReaderValue.h; TTreeReader.h; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; AuthorAnders Eie, 2013 ; Definition in file hsimpleReader.C. tutorialstreehsimpleReader.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsimpleReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimpleReader_8C.html
Security,access,access,". ROOT: tutorials/tree/hsimpleReader.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hsimpleReader.C File ReferenceTutorials » Tree tutorials. Detailed Description; TTreeReader simplest example. ; Read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; auto myHist = new TH1F(""h1"",""ntuple"",100,-4,4);; ; // Open the file containing the tree.; auto myFile = TFile::Open(""hsimple.root"");; if (!myFile || myFile->IsZombie()) {; return;; }; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }; ; myHist->Draw();; }; TFile.h; TH1F.h; TTreeReaderValue.h; TTreeReader.h; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; AuthorAnders Eie, 2013 ; Definition in file hsimpleReader.C. tutorialstreehsimpleReader.C. ROOT master - Refe",MatchSource.WIKI,doc/master/hsimpleReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimpleReader_8C.html
Usability,simpl,simplest,". ROOT: tutorials/tree/hsimpleReader.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hsimpleReader.C File ReferenceTutorials » Tree tutorials. Detailed Description; TTreeReader simplest example. ; Read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; auto myHist = new TH1F(""h1"",""ntuple"",100,-4,4);; ; // Open the file containing the tree.; auto myFile = TFile::Open(""hsimple.root"");; if (!myFile || myFile->IsZombie()) {; return;; }; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }; ; myHist->Draw();; }; TFile.h; TH1F.h; TTreeReaderValue.h; TTreeReader.h; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; AuthorAnders Eie, 2013 ; Definition in file hsimpleReader.C. tutorialstreehsimpleReader.C. ROOT master - Refe",MatchSource.WIKI,doc/master/hsimpleReader_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimpleReader_8C.html
Modifiability,variab,variables,"ile-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TFile::WriteInt_t Write(const char *name=nullptr, Int_t opt=0, Int_t bufsiz=0) overrideWrite memory objects to this file.Definition TFile.cxx:2436; TFile::Closevoid Close(Option_t *option="""") overrideClose a file.Definition TFile.cxx:950; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH2::FillInt_t Fill(Double_t) overrideInvalid Fill method.Definition TH2.cxx:393; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TNtuple::FillInt_t Fill() overrideFill a Ntuple with current values in fArgs.Definition TNtuple.cxx:169; TProfileProfile Histogram.Definition TProfile.h:32; TProfile::FillInt_t Fill(const Double_t *v)Definition TProfile.h:55; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TRandom3::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom3.cxx:99; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TStringBasic string class.Definition TString.h:139; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TSystem::Pr",MatchSource.WIKI,doc/master/hsimple_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8C.html
Security,access,access,". ROOT: tutorials/hsimple.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hsimple.C File ReferenceTutorials. Detailed Description; This program creates : . a one dimensional histogram; a two dimensional histogram; a profile histogram; a memory-resident ntuple. These objects are filled with some random numbers and saved on a file. If get=1 the macro returns a pointer to the TFile of ""hsimple.root"" if this file exists, otherwise it is created. The file ""hsimple.root"" is created in $ROOTSYS/tutorials if the caller has write access to this directory, otherwise the file is created in $PWD. ; hsimple : Real Time = 0.08 seconds Cpu Time = 0.08 seconds; (TFile *) 0x55fa02b55090; ; #include <TFile.h>; #include <TNtuple.h>; #include <TH2.h>; #include <TProfile.h>; #include <TCanvas.h>; #include <TFrame.h>; #include <TROOT.h>; #include <TSystem.h>; #include <TRandom3.h>; #include <TBenchmark.h>; #include <TInterpreter.h>; ; TFile *hsimple(Int_t getFile=0); {; TString filename = ""hsimple.root"";; TString dir = gROOT->GetTutorialDir();; dir.ReplaceAll(""/./"",""/"");; TFile *hfile = nullptr;; if (getFile) {; // if the argument getFile =1 return the file ""hsimple.root""; // if the file does not exist, it is created; TString fullPath = dir+""hsimple.root"";; if (!gSystem->AccessPathName(fullPath,kFileExists)) {; hfile = TFile::Open(fullPath); //in $ROOTSYS/tutorials; if (hfile) return hfile;; }; //otherwise try $PWD/hsimple.root; if (!gSystem->AccessPathName(""hsimple.root"",kFileExists)) {; hfile = TFile::Open(""hsimple.root""); //in current dir; if (hfile) return hfile;; }; }; //no hsimple.root file found. Must generate it !; //generate hsimple.root in current directory if we have write access; if (gSystem->AccessPathName(""."",kWritePermission)) {; printf(""you must run the script in a directory with write access\n"");; return nullptr;; }; hfile = (TFile*)gROOT->FindObject(filename); if (hfile) hfile->Close();; hfile = new TFile(filename,""RECRE",MatchSource.WIKI,doc/master/hsimple_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8C.html
Usability,simpl,simple,"ile-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TFile::WriteInt_t Write(const char *name=nullptr, Int_t opt=0, Int_t bufsiz=0) overrideWrite memory objects to this file.Definition TFile.cxx:2436; TFile::Closevoid Close(Option_t *option="""") overrideClose a file.Definition TFile.cxx:950; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH2::FillInt_t Fill(Double_t) overrideInvalid Fill method.Definition TH2.cxx:393; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TNtuple::FillInt_t Fill() overrideFill a Ntuple with current values in fArgs.Definition TNtuple.cxx:169; TProfileProfile Histogram.Definition TProfile.h:32; TProfile::FillInt_t Fill(const Double_t *v)Definition TProfile.h:55; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TRandom3::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom3.cxx:99; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TStringBasic string class.Definition TString.h:139; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TSystem::Pr",MatchSource.WIKI,doc/master/hsimple_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8C.html
Modifiability,variab,variables,"dm; ; # For speed, bind and cache the Fill member functions,; histos = [ 'hpx', 'hpxpy', 'hprof', 'ntuple' ]; for name in histos:; exec('%sFill = %s.Fill' % (name,name)); ; # Fill histograms randomly.; px_ref, py_ref = ctypes.c_double(), ctypes.c_double(); kUPDATE = 1000; for i in range( 25000 ):; # Generate random values. Use ctypes to pass doubles by reference; rannor( px_ref, py_ref ); # Retrieve the generated values; px = px_ref.value; py = py_ref.value; ; pz = px*px + py*py; random = rndm(1); ; # Fill histograms.; hpx.Fill( px ); hpxpy.Fill( px, py ); hprof.Fill( px, pz ); ntuple.Fill( px, py, pz, random, i ); ; # Update display every kUPDATE events.; if i and i%kUPDATE == 0:; if i == kUPDATE:; hpx.Draw(); ; c1.Modified(); c1.Update(); ; if gSystem.ProcessEvents(): # allow user interrupt; break; ; # Destroy member functions cache.; for name in histos:; exec('del %sFill' % name); del histos; ; gBenchmark.Show( 'hsimple' ); ; # Save all objects in this file.; hpx.SetFillColor( 0 ); hfile.Write(); hpx.SetFillColor( 48 ); c1.Modified(); c1.Update(); ; # Note that the file is automatically closed when application terminates; # or when the file destructor is called.; SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TProfileProfile Histogram.Definition TProfile.h:32; SetBorderSizec SetBorderSize(2); AuthorWim Lavrijsen, Enric Tejedor ; Definition in file hsimple.py. tutorialspyroothsimple.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsimple_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8py.html
Performance,cache,cache,"Create a new ROOT binary machine independent file.; # Note that this file may contain any kind of ROOT objects, histograms,; # pictures, graphics objects, detector geometries, tracks, events, etc..; # This file is now becoming the current directory.; ; hfile = gROOT.FindObject( 'py-hsimple.root' ); if hfile:; hfile.Close(); hfile = TFile( 'py-hsimple.root', 'RECREATE', 'Demo ROOT file with histograms' ); ; # Create some histograms, a profile histogram and an ntuple; hpx = TH1F( 'hpx', 'This is the px distribution', 100, -4, 4 ); hpxpy = TH2F( 'hpxpy', 'py vs px', 40, -4, 4, 40, -4, 4 ); hprof = TProfile( 'hprof', 'Profile of pz versus px', 100, -4, 4, 0, 20 ); ntuple = TNtuple( 'ntuple', 'Demo ntuple', 'px:py:pz:random:i' ); ; # Set canvas/frame attributes.; hpx.SetFillColor( 48 ); ; gBenchmark.Start( 'hsimple' ); ; # Initialize random number generator.; gRandom.SetSeed(); rannor, rndm = gRandom.Rannor, gRandom.Rndm; ; # For speed, bind and cache the Fill member functions,; histos = [ 'hpx', 'hpxpy', 'hprof', 'ntuple' ]; for name in histos:; exec('%sFill = %s.Fill' % (name,name)); ; # Fill histograms randomly.; px_ref, py_ref = ctypes.c_double(), ctypes.c_double(); kUPDATE = 1000; for i in range( 25000 ):; # Generate random values. Use ctypes to pass doubles by reference; rannor( px_ref, py_ref ); # Retrieve the generated values; px = px_ref.value; py = py_ref.value; ; pz = px*px + py*py; random = rndm(1); ; # Fill histograms.; hpx.Fill( px ); hpxpy.Fill( px, py ); hprof.Fill( px, pz ); ntuple.Fill( px, py, pz, random, i ); ; # Update display every kUPDATE events.; if i and i%kUPDATE == 0:; if i == kUPDATE:; hpx.Draw(); ; c1.Modified(); c1.Update(); ; if gSystem.ProcessEvents(): # allow user interrupt; break; ; # Destroy member functions cache.; for name in histos:; exec('del %sFill' % name); del histos; ; gBenchmark.Show( 'hsimple' ); ; # Save all objects in this file.; hpx.SetFillColor( 0 ); hfile.Write(); hpx.SetFillColor( 48 ); c1.Modified(); c1.Update(); ; # Not",MatchSource.WIKI,doc/master/hsimple_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8py.html
Safety,detect,detector,". ROOT: tutorials/pyroot/hsimple.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; hsimple.py File ReferenceTutorials » PyRoot tutorials. Detailed Description; This program creates : . a one dimensional histogram; a two dimensional histogram; a profile histogram; a memory-resident ntuple. These objects are filled with some random numbers and saved on a file. ; from ROOT import TCanvas, TFile, TProfile, TNtuple, TH1F, TH2F; from ROOT import gROOT, gBenchmark, gRandom, gSystem; import ctypes; ; # Create a new canvas, and customize it.; c1 = TCanvas( 'c1', 'Dynamic Filling Example', 200, 10, 700, 500 ); c1.SetFillColor( 42 ); c1.GetFrame().SetFillColor( 21 ); c1.GetFrame().SetBorderSize( 6 ); c1.GetFrame().SetBorderMode( -1 ); ; # Create a new ROOT binary machine independent file.; # Note that this file may contain any kind of ROOT objects, histograms,; # pictures, graphics objects, detector geometries, tracks, events, etc..; # This file is now becoming the current directory.; ; hfile = gROOT.FindObject( 'py-hsimple.root' ); if hfile:; hfile.Close(); hfile = TFile( 'py-hsimple.root', 'RECREATE', 'Demo ROOT file with histograms' ); ; # Create some histograms, a profile histogram and an ntuple; hpx = TH1F( 'hpx', 'This is the px distribution', 100, -4, 4 ); hpxpy = TH2F( 'hpxpy', 'py vs px', 40, -4, 4, 40, -4, 4 ); hprof = TProfile( 'hprof', 'Profile of pz versus px', 100, -4, 4, 0, 20 ); ntuple = TNtuple( 'ntuple', 'Demo ntuple', 'px:py:pz:random:i' ); ; # Set canvas/frame attributes.; hpx.SetFillColor( 48 ); ; gBenchmark.Start( 'hsimple' ); ; # Initialize random number generator.; gRandom.SetSeed(); rannor, rndm = gRandom.Rannor, gRandom.Rndm; ; # For speed, bind and cache the Fill member functions,; histos = [ 'hpx', 'hpxpy', 'hprof', 'ntuple' ]; for name in histos:; exec('%sFill = %s.Fill' % (name,name)); ; # Fill histograms randomly.; px_ref, py_ref = ctypes.c_double(), ctypes.c_double(); kUPDATE = 1000; ",MatchSource.WIKI,doc/master/hsimple_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8py.html
Usability,simpl,simple,"dm; ; # For speed, bind and cache the Fill member functions,; histos = [ 'hpx', 'hpxpy', 'hprof', 'ntuple' ]; for name in histos:; exec('%sFill = %s.Fill' % (name,name)); ; # Fill histograms randomly.; px_ref, py_ref = ctypes.c_double(), ctypes.c_double(); kUPDATE = 1000; for i in range( 25000 ):; # Generate random values. Use ctypes to pass doubles by reference; rannor( px_ref, py_ref ); # Retrieve the generated values; px = px_ref.value; py = py_ref.value; ; pz = px*px + py*py; random = rndm(1); ; # Fill histograms.; hpx.Fill( px ); hpxpy.Fill( px, py ); hprof.Fill( px, pz ); ntuple.Fill( px, py, pz, random, i ); ; # Update display every kUPDATE events.; if i and i%kUPDATE == 0:; if i == kUPDATE:; hpx.Draw(); ; c1.Modified(); c1.Update(); ; if gSystem.ProcessEvents(): # allow user interrupt; break; ; # Destroy member functions cache.; for name in histos:; exec('del %sFill' % name); del histos; ; gBenchmark.Show( 'hsimple' ); ; # Save all objects in this file.; hpx.SetFillColor( 0 ); hfile.Write(); hpx.SetFillColor( 48 ); c1.Modified(); c1.Update(); ; # Note that the file is automatically closed when application terminates; # or when the file destructor is called.; SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TProfileProfile Histogram.Definition TProfile.h:32; SetBorderSizec SetBorderSize(2); AuthorWim Lavrijsen, Enric Tejedor ; Definition in file hsimple.py. tutorialspyroothsimple.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsimple_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8py.html
Modifiability,variab,variables,"os = [ 'hpx', 'hpxpy', 'hprof', 'ntuple' ]; 55for name in histos:; 56 exec('%sFill = %s.Fill' % (name,name)); 57 ; 58# Fill histograms randomly.; 59px_ref, py_ref = ctypes.c_double(), ctypes.c_double(); 60kUPDATE = 1000; 61for i in range( 25000 ):; 62 # Generate random values. Use ctypes to pass doubles by reference; 63 rannor( px_ref, py_ref ); 64 # Retrieve the generated values; 65 px = px_ref.value; 66 py = py_ref.value; 67 ; 68 pz = px*px + py*py; 69 random = rndm(1); 70 ; 71 # Fill histograms.; 72 hpx.Fill( px ); 73 hpxpy.Fill( px, py ); 74 hprof.Fill( px, pz ); 75 ntuple.Fill( px, py, pz, random, i ); 76 ; 77 # Update display every kUPDATE events.; 78 if i and i%kUPDATE == 0:; 79 if i == kUPDATE:; 80 hpx.Draw(); 81 ; 82 c1.Modified(); 83 c1.Update(); 84 ; 85 if gSystem.ProcessEvents(): # allow user interrupt; 86 break; 87 ; 88# Destroy member functions cache.; 89for name in histos:; 90 exec('del %sFill' % name); 91del histos; 92 ; 93gBenchmark.Show( 'hsimple' ); 94 ; 95# Save all objects in this file.; 96hpx.SetFillColor( 0 ); 97hfile.Write(); 98hpx.SetFillColor( 48 ); 99c1.Modified(); 100c1.Update(); 101 ; 102# Note that the file is automatically closed when application terminates; 103# or when the file destructor is called.; SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TProfileProfile Histogram.Definition TProfile.h:32; SetBorderSizec SetBorderSize(2). tutorialspyroothsimple.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsimple_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8py_source.html
Performance,cache,cache,"te that this file may contain any kind of ROOT objects, histograms,; 30# pictures, graphics objects, detector geometries, tracks, events, etc..; 31# This file is now becoming the current directory.; 32 ; 33hfile = gROOT.FindObject( 'py-hsimple.root' ); 34if hfile:; 35 hfile.Close(); 36hfile = TFile( 'py-hsimple.root', 'RECREATE', 'Demo ROOT file with histograms' ); 37 ; 38# Create some histograms, a profile histogram and an ntuple; 39hpx = TH1F( 'hpx', 'This is the px distribution', 100, -4, 4 ); 40hpxpy = TH2F( 'hpxpy', 'py vs px', 40, -4, 4, 40, -4, 4 ); 41hprof = TProfile( 'hprof', 'Profile of pz versus px', 100, -4, 4, 0, 20 ); 42ntuple = TNtuple( 'ntuple', 'Demo ntuple', 'px:py:pz:random:i' ); 43 ; 44# Set canvas/frame attributes.; 45hpx.SetFillColor( 48 ); 46 ; 47gBenchmark.Start( 'hsimple' ); 48 ; 49# Initialize random number generator.; 50gRandom.SetSeed(); 51rannor, rndm = gRandom.Rannor, gRandom.Rndm; 52 ; 53# For speed, bind and cache the Fill member functions,; 54histos = [ 'hpx', 'hpxpy', 'hprof', 'ntuple' ]; 55for name in histos:; 56 exec('%sFill = %s.Fill' % (name,name)); 57 ; 58# Fill histograms randomly.; 59px_ref, py_ref = ctypes.c_double(), ctypes.c_double(); 60kUPDATE = 1000; 61for i in range( 25000 ):; 62 # Generate random values. Use ctypes to pass doubles by reference; 63 rannor( px_ref, py_ref ); 64 # Retrieve the generated values; 65 px = px_ref.value; 66 py = py_ref.value; 67 ; 68 pz = px*px + py*py; 69 random = rndm(1); 70 ; 71 # Fill histograms.; 72 hpx.Fill( px ); 73 hpxpy.Fill( px, py ); 74 hprof.Fill( px, pz ); 75 ntuple.Fill( px, py, pz, random, i ); 76 ; 77 # Update display every kUPDATE events.; 78 if i and i%kUPDATE == 0:; 79 if i == kUPDATE:; 80 hpx.Draw(); 81 ; 82 c1.Modified(); 83 c1.Update(); 84 ; 85 if gSystem.ProcessEvents(): # allow user interrupt; 86 break; 87 ; 88# Destroy member functions cache.; 89for name in histos:; 90 exec('del %sFill' % name); 91del histos; 92 ; 93gBenchmark.Show( 'hsimple' ); 94 ; 95# Save all object",MatchSource.WIKI,doc/master/hsimple_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8py_source.html
Safety,detect,detector,"; Searching...; No Matches. hsimple.py. Go to the documentation of this file. 1## \file; 2## \ingroup tutorial_pyroot; 3## \notebook -js; 4## This program creates :; 5## - a one dimensional histogram; 6## - a two dimensional histogram; 7## - a profile histogram; 8## - a memory-resident ntuple; 9##; 10## These objects are filled with some random numbers and saved on a file.; 11##; 12## \macro_image; 13## \macro_code; 14##; 15## \author Wim Lavrijsen, Enric Tejedor; 16 ; 17from ROOT import TCanvas, TFile, TProfile, TNtuple, TH1F, TH2F; 18from ROOT import gROOT, gBenchmark, gRandom, gSystem; 19import ctypes; 20 ; 21# Create a new canvas, and customize it.; 22c1 = TCanvas( 'c1', 'Dynamic Filling Example', 200, 10, 700, 500 ); 23c1.SetFillColor( 42 ); 24c1.GetFrame().SetFillColor( 21 ); 25c1.GetFrame().SetBorderSize( 6 ); 26c1.GetFrame().SetBorderMode( -1 ); 27 ; 28# Create a new ROOT binary machine independent file.; 29# Note that this file may contain any kind of ROOT objects, histograms,; 30# pictures, graphics objects, detector geometries, tracks, events, etc..; 31# This file is now becoming the current directory.; 32 ; 33hfile = gROOT.FindObject( 'py-hsimple.root' ); 34if hfile:; 35 hfile.Close(); 36hfile = TFile( 'py-hsimple.root', 'RECREATE', 'Demo ROOT file with histograms' ); 37 ; 38# Create some histograms, a profile histogram and an ntuple; 39hpx = TH1F( 'hpx', 'This is the px distribution', 100, -4, 4 ); 40hpxpy = TH2F( 'hpxpy', 'py vs px', 40, -4, 4, 40, -4, 4 ); 41hprof = TProfile( 'hprof', 'Profile of pz versus px', 100, -4, 4, 0, 20 ); 42ntuple = TNtuple( 'ntuple', 'Demo ntuple', 'px:py:pz:random:i' ); 43 ; 44# Set canvas/frame attributes.; 45hpx.SetFillColor( 48 ); 46 ; 47gBenchmark.Start( 'hsimple' ); 48 ; 49# Initialize random number generator.; 50gRandom.SetSeed(); 51rannor, rndm = gRandom.Rannor, gRandom.Rndm; 52 ; 53# For speed, bind and cache the Fill member functions,; 54histos = [ 'hpx', 'hpxpy', 'hprof', 'ntuple' ]; 55for name in histos:; 56 exe",MatchSource.WIKI,doc/master/hsimple_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8py_source.html
Usability,simpl,simple,"os = [ 'hpx', 'hpxpy', 'hprof', 'ntuple' ]; 55for name in histos:; 56 exec('%sFill = %s.Fill' % (name,name)); 57 ; 58# Fill histograms randomly.; 59px_ref, py_ref = ctypes.c_double(), ctypes.c_double(); 60kUPDATE = 1000; 61for i in range( 25000 ):; 62 # Generate random values. Use ctypes to pass doubles by reference; 63 rannor( px_ref, py_ref ); 64 # Retrieve the generated values; 65 px = px_ref.value; 66 py = py_ref.value; 67 ; 68 pz = px*px + py*py; 69 random = rndm(1); 70 ; 71 # Fill histograms.; 72 hpx.Fill( px ); 73 hpxpy.Fill( px, py ); 74 hprof.Fill( px, pz ); 75 ntuple.Fill( px, py, pz, random, i ); 76 ; 77 # Update display every kUPDATE events.; 78 if i and i%kUPDATE == 0:; 79 if i == kUPDATE:; 80 hpx.Draw(); 81 ; 82 c1.Modified(); 83 c1.Update(); 84 ; 85 if gSystem.ProcessEvents(): # allow user interrupt; 86 break; 87 ; 88# Destroy member functions cache.; 89for name in histos:; 90 exec('del %sFill' % name); 91del histos; 92 ; 93gBenchmark.Show( 'hsimple' ); 94 ; 95# Save all objects in this file.; 96hpx.SetFillColor( 0 ); 97hfile.Write(); 98hpx.SetFillColor( 48 ); 99c1.Modified(); 100c1.Update(); 101 ; 102# Note that the file is automatically closed when application terminates; 103# or when the file destructor is called.; SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TProfileProfile Histogram.Definition TProfile.h:32; SetBorderSizec SetBorderSize(2). tutorialspyroothsimple.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsimple_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsimple_8py_source.html
Testability,test,test,". ROOT: tutorials/hist/hstackpads.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstackpads.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Drawing stack histograms on subpads. ; In this example three histograms are displayed on separate pads. If canvas divided in advance - provided subpads will be used by the THStack. ; void hstackpads(); {; auto hs = new THStack(""hs"", ""Stacked 1D histograms"");; ; // Create three 1-d histograms and add them in the stack; auto h1st = new TH1F(""h1st"", ""test hstack 1"", 100, -4, 4);; h1st->FillRandom(""gaus"", 20000);; hs->Add(h1st);; ; auto h2st = new TH1F(""h2st"", ""test hstack 2"", 100, -4, 4);; h2st->FillRandom(""gaus"", 15000);; hs->Add(h2st);; ; auto h3st = new TH1F(""h3st"", ""test hstack 3"", 100, -4, 4);; h3st->FillRandom(""gaus"", 10000);; hs->Add(h3st);; ; auto c1 = new TCanvas(""c1"", ""THStack drawing on pads"", 800, 800);; ; // prepare subpads for drawing of histograms; c1->Divide(1, 3);; ; // draw thstack on canvas with ""pads"" draw option; c1->Add(hs, ""pads"");; }; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; THStackThe Histogram stack class.Definition THStack.h:40; c1return c1Definition legend1.C:41; AuthorSergey Linev ; Definition in file hstackpads.C. tutorialshisthstackpads.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hstackpads_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hstackpads_8C.html
Availability,error,errors,". ROOT: tutorials/hist/hstack.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstack.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Example of stacked histograms: class THStack. . ; void hstack(); {; auto hs = new THStack(""hs"",""Stacked 1D histograms"");; //create three 1-d histograms; auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; h1st->FillRandom(""gaus"",20000);; h1st->SetFillColor(kRed);; h1st->SetMarkerStyle(21);; h1st->SetMarkerColor(kRed);; hs->Add(h1st);; auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; h2st->FillRandom(""gaus"",15000);; h2st->SetFillColor(kBlue);; h2st->SetMarkerStyle(21);; h2st->SetMarkerColor(kBlue);; hs->Add(h2st);; auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; h3st->FillRandom(""gaus"",10000);; h3st->SetFillColor(kGreen);; h3st->SetMarkerStyle(21);; h3st->SetMarkerColor(kGreen);; hs->Add(h3st);; ; auto cst = new TCanvas(""cst"",""stacked hists"",10,10,700,700);; cst->Divide(2,2);; // in top left pad, draw the stack with defaults; cst->cd(1);; hs->Draw();; // in top right pad, draw the stack in non-stack mode; // and errors option; cst->cd(2);; gPad->SetGrid();; hs->Draw(""nostack,e1p"");; //in bottom left, draw in stack mode with ""lego1"" option; cst->cd(3);; gPad->SetFrameFillColor(17);; gPad->SetTheta(3.77);; gPad->SetPhi(2.9);; hs->Draw(""lego1"");; ; cst->cd(4);; //create two 2-D histograms and draw them in stack mode; gPad->SetFrameFillColor(17);; auto a = new THStack(""a"",""Stacked 2D histograms"");; auto f1 = new TF2(""f1"",; ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 3600,-2,0.7,-3,0.3};; f1->SetParameters(params1);; auto h2sta = new TH2F(""h2sta"",""h2sta"",20,-4,4,20,-4,4);; h2sta->SetFillColor(38);; h2sta->FillRandom(""f1"",4000);; auto f2 = new TF2(""f2"",""xygaus + xygaus(5)"",-4,4,-4,4);; Double_t params2[] = {100,-1.4,1.9,1.1,2, 80,2,0.7,-2,0.5};; f2->SetParameters(params2);; auto h2stb = new T",MatchSource.WIKI,doc/master/hstack_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hstack_8C.html
Testability,test,test,". ROOT: tutorials/hist/hstack.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstack.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Example of stacked histograms: class THStack. . ; void hstack(); {; auto hs = new THStack(""hs"",""Stacked 1D histograms"");; //create three 1-d histograms; auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; h1st->FillRandom(""gaus"",20000);; h1st->SetFillColor(kRed);; h1st->SetMarkerStyle(21);; h1st->SetMarkerColor(kRed);; hs->Add(h1st);; auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; h2st->FillRandom(""gaus"",15000);; h2st->SetFillColor(kBlue);; h2st->SetMarkerStyle(21);; h2st->SetMarkerColor(kBlue);; hs->Add(h2st);; auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; h3st->FillRandom(""gaus"",10000);; h3st->SetFillColor(kGreen);; h3st->SetMarkerStyle(21);; h3st->SetMarkerColor(kGreen);; hs->Add(h3st);; ; auto cst = new TCanvas(""cst"",""stacked hists"",10,10,700,700);; cst->Divide(2,2);; // in top left pad, draw the stack with defaults; cst->cd(1);; hs->Draw();; // in top right pad, draw the stack in non-stack mode; // and errors option; cst->cd(2);; gPad->SetGrid();; hs->Draw(""nostack,e1p"");; //in bottom left, draw in stack mode with ""lego1"" option; cst->cd(3);; gPad->SetFrameFillColor(17);; gPad->SetTheta(3.77);; gPad->SetPhi(2.9);; hs->Draw(""lego1"");; ; cst->cd(4);; //create two 2-D histograms and draw them in stack mode; gPad->SetFrameFillColor(17);; auto a = new THStack(""a"",""Stacked 2D histograms"");; auto f1 = new TF2(""f1"",; ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 3600,-2,0.7,-3,0.3};; f1->SetParameters(params1);; auto h2sta = new TH2F(""h2sta"",""h2sta"",20,-4,4,20,-4,4);; h2sta->SetFillColor(38);; h2sta->FillRandom(""f1"",4000);; auto f2 = new TF2(""f2"",""xygaus + xygaus(5)"",-4,4,-4,4);; Double_t params2[] = {100,-1.4,1.9,1.1,2, 80,2,0.7,-2,0.5};; f2->SetParameters(params2);; auto h2stb = new T",MatchSource.WIKI,doc/master/hstack_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hstack_8C.html
Availability,error,errors,". ROOT: tutorials/hist/hstack.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstack.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_hist; 3/// \notebook; 4/// Example of stacked histograms: class THStack.; 5///; 6/// \macro_image; 7/// \macro_code; 8///; 9/// \author Rene Brun; 10 ; 11void hstack(); 12{; 13 auto hs = new THStack(""hs"",""Stacked 1D histograms"");; 14 //create three 1-d histograms; 15 auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; 16 h1st->FillRandom(""gaus"",20000);; 17 h1st->SetFillColor(kRed);; 18 h1st->SetMarkerStyle(21);; 19 h1st->SetMarkerColor(kRed);; 20 hs->Add(h1st);; 21 auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; 22 h2st->FillRandom(""gaus"",15000);; 23 h2st->SetFillColor(kBlue);; 24 h2st->SetMarkerStyle(21);; 25 h2st->SetMarkerColor(kBlue);; 26 hs->Add(h2st);; 27 auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; 28 h3st->FillRandom(""gaus"",10000);; 29 h3st->SetFillColor(kGreen);; 30 h3st->SetMarkerStyle(21);; 31 h3st->SetMarkerColor(kGreen);; 32 hs->Add(h3st);; 33 ; 34 auto cst = new TCanvas(""cst"",""stacked hists"",10,10,700,700);; 35 cst->Divide(2,2);; 36 // in top left pad, draw the stack with defaults; 37 cst->cd(1);; 38 hs->Draw();; 39 // in top right pad, draw the stack in non-stack mode; 40 // and errors option; 41 cst->cd(2);; 42 gPad->SetGrid();; 43 hs->Draw(""nostack,e1p"");; 44 //in bottom left, draw in stack mode with ""lego1"" option; 45 cst->cd(3);; 46 gPad->SetFrameFillColor(17);; 47 gPad->SetTheta(3.77);; 48 gPad->SetPhi(2.9);; 49 hs->Draw(""lego1"");; 50 ; 51 cst->cd(4);; 52 //create two 2-D histograms and draw them in stack mode; 53 gPad->SetFrameFillColor(17);; 54 auto a = new THStack(""a"",""Stacked 2D histograms"");; 55 auto f1 = new TF2(""f1"",; 56 ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; 57 Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 58 3600,-2,0.7,-3,0.3};; 59 f1->SetParameters(params1);; 60 auto h2sta = new TH2F(""h2sta",MatchSource.WIKI,doc/master/hstack_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hstack_8C_source.html
Testability,test,test,". ROOT: tutorials/hist/hstack.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. hstack.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_hist; 3/// \notebook; 4/// Example of stacked histograms: class THStack.; 5///; 6/// \macro_image; 7/// \macro_code; 8///; 9/// \author Rene Brun; 10 ; 11void hstack(); 12{; 13 auto hs = new THStack(""hs"",""Stacked 1D histograms"");; 14 //create three 1-d histograms; 15 auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; 16 h1st->FillRandom(""gaus"",20000);; 17 h1st->SetFillColor(kRed);; 18 h1st->SetMarkerStyle(21);; 19 h1st->SetMarkerColor(kRed);; 20 hs->Add(h1st);; 21 auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; 22 h2st->FillRandom(""gaus"",15000);; 23 h2st->SetFillColor(kBlue);; 24 h2st->SetMarkerStyle(21);; 25 h2st->SetMarkerColor(kBlue);; 26 hs->Add(h2st);; 27 auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; 28 h3st->FillRandom(""gaus"",10000);; 29 h3st->SetFillColor(kGreen);; 30 h3st->SetMarkerStyle(21);; 31 h3st->SetMarkerColor(kGreen);; 32 hs->Add(h3st);; 33 ; 34 auto cst = new TCanvas(""cst"",""stacked hists"",10,10,700,700);; 35 cst->Divide(2,2);; 36 // in top left pad, draw the stack with defaults; 37 cst->cd(1);; 38 hs->Draw();; 39 // in top right pad, draw the stack in non-stack mode; 40 // and errors option; 41 cst->cd(2);; 42 gPad->SetGrid();; 43 hs->Draw(""nostack,e1p"");; 44 //in bottom left, draw in stack mode with ""lego1"" option; 45 cst->cd(3);; 46 gPad->SetFrameFillColor(17);; 47 gPad->SetTheta(3.77);; 48 gPad->SetPhi(2.9);; 49 hs->Draw(""lego1"");; 50 ; 51 cst->cd(4);; 52 //create two 2-D histograms and draw them in stack mode; 53 gPad->SetFrameFillColor(17);; 54 auto a = new THStack(""a"",""Stacked 2D histograms"");; 55 auto f1 = new TF2(""f1"",; 56 ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; 57 Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 58 3600,-2,0.7,-3,0.3};; 59 f1->SetParameters(params1);; 60 auto h2sta = new TH2F(""h2sta",MatchSource.WIKI,doc/master/hstack_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hstack_8C_source.html
Testability,test,test,"ults This program is a variant of the tutorial ""hsum"". It illustrates the use of Timers. ; Float_t progressRatio = 0.;; TSlider *slider = nullptr;; TCanvas *c1 = nullptr;; ; void hsumUpdate(); {; // called when Timer times out; if (slider) slider->SetRange(0., progressRatio);; c1->Modified();; c1->Update();; }; ; void hsumTimer(Int_t nfill=100000); {; c1 = new TCanvas(""c1"",""The HSUM example"",200,10,600,400);; c1->SetGrid();; ; // Create some histograms.; auto total = new TH1F(""total"",""This is the total distribution"",100,-4,4);; auto main = new TH1F(""main"",""Main contributor"",100,-4,4);; auto s1 = new TH1F(""s1"",""This is the first signal"",100,-4,4);; auto s2 = new TH1F(""s2"",""This is the second signal"",100,-4,4);; total->Sumw2(); // store the sum of squares of weights; total->SetMarkerStyle(21);; total->SetMarkerSize(0.7);; main->SetFillColor(16);; s1->SetFillColor(42);; s2->SetFillColor(46);; total->SetMaximum(nfill/20.);; total->Draw(""e1p"");; main->Draw(""same"");; s1->Draw(""same"");; s2->Draw(""same"");; c1->Update();; ; slider = new TSlider(""slider"",""test"",4.2,0,4.6,0.8*total->GetMaximum(),38);; slider->SetFillColor(46);; ; // Create a TTimer (hsumUpdate called every 300 msec); TTimer timer(""hsumUpdate()"",300);; timer.TurnOn();; ; // Fill histograms randomly; Float_t xs1, xs2, xmain;; gRandom->SetSeed();; for (Int_t i=0; i<nfill; i++) {; progressRatio = i * 1. / nfill;; if (gSystem->ProcessEvents()) break;; xmain = gRandom->Gaus(-1,1.5);; xs1 = gRandom->Gaus(-0.5,0.5);; xs2 = gRandom->Landau(1,0.15);; main->Fill(xmain);; s1->Fill(xs1,0.3);; s2->Fill(xs2,0.2);; total->Fill(xmain);; total->Fill(xs1,0.3);; total->Fill(xs2,0.2);; }; timer.TurnOff();; hsumUpdate();; }; mainint main()Definition Prototype.cxx:12; s1#define s1(x)Definition RSha256.hxx:91; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; gSystemR__EXTE",MatchSource.WIKI,doc/master/hsumTimer_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsumTimer_8C.html
Testability,test,test,"->SetGrid();; ; gBenchmark->Start(""hsum"");; ; // Create some histograms.; auto total = new TH1F(""total"",""This is the total distribution"",100,-4,4);; auto main = new TH1F(""main"",""Main contributor"",100,-4,4);; auto s1 = new TH1F(""s1"",""This is the first signal"",100,-4,4);; auto s2 = new TH1F(""s2"",""This is the second signal"",100,-4,4);; total->Sumw2(); // store the sum of squares of weights; total->SetMarkerStyle(21);; total->SetMarkerSize(0.7);; main->SetFillColor(16);; s1->SetFillColor(42);; s2->SetFillColor(46);; TSlider *slider = nullptr;; ; // Fill histograms randomly; gRandom->SetSeed();; const Int_t kUPDATE = 500;; Float_t xs1, xs2, xmain;; for ( Int_t i=0; i<10000; i++) {; xmain = gRandom->Gaus(-1,1.5);; xs1 = gRandom->Gaus(-0.5,0.5);; xs2 = gRandom->Landau(1,0.15);; main->Fill(xmain);; s1->Fill(xs1,0.3);; s2->Fill(xs2,0.2);; total->Fill(xmain);; total->Fill(xs1,0.3);; total->Fill(xs2,0.2);; if (i && (i%kUPDATE) == 0) {; if (i == kUPDATE) {; total->Draw(""e1p"");; main->Draw(""same"");; s1->Draw(""same"");; s2->Draw(""same"");; c1->Update();; slider = new TSlider(""slider"",; ""test"",4.2,0,4.6,total->GetMaximum(),38);; slider->SetFillColor(46);; }; if (slider) slider->SetRange(0., 1.*i/10000.);; c1->Modified();; c1->Update();; }; }; slider->SetRange(0., 1.);; c1->Modified();; gBenchmark->Show(""hsum"");; }; mainint main()Definition Prototype.cxx:12; s1#define s1(x)Definition RSha256.hxx:91; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; kUPDATE@ kUPDATEDefinition TFitParametersDialog.cxx:46; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showv",MatchSource.WIKI,doc/master/hsum_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsum_8C.html
Deployability,update,update,"1F( 's1', 'This is the first signal', 100, -4, 4 ); s2 = TH1F( 's2', 'This is the second signal', 100, -4, 4 ); total.Sumw2() # this makes sure that the sum of squares of weights will be stored; ; # Set canvas/frame attributes.; total.SetMarkerStyle( 21 ); total.SetMarkerSize( 0.7 ); main.SetFillColor( 16 ); s1.SetFillColor( 42 ); s2.SetFillColor( 46 ); ; # Initialize random number generator.; gRandom.SetSeed(); gauss, landau = gRandom.Gaus, gRandom.Landau; ; # for speed, bind and cache the Fill member functions; histos = [ 'total', 'main', 's1', 's2' ]; for name in histos:; exec('%sFill = %s.Fill' % (name,name)); ; # Fill histograms randomly; kUPDATE = 500; for i in range( 10000 ):; # Generate random values.; xmain = gauss( -1, 1.5 ); xs1 = gauss( -0.5, 0.5 ); xs2 = landau( 1, 0.15 ); mainFill( xmain ); ; # Fill histograms.; s1Fill( xs1, 0.3 ); s2Fill( xs2, 0.2 ); totalFill( xmain ); totalFill( xs1, 0.3 ); totalFill( xs2, 0.2 ); ; # Update display every kUPDATE events.; if i and (i%kUPDATE) == 0 :; if i == kUPDATE :; total.Draw( 'e1p' ); main.Draw( 'same' ); s1.Draw( 'same' ); s2.Draw( 'same' ); c1.Update(); slider = TSlider( 'slider', 'test', 4.2, 0, 4.6, total.GetMaximum(), 38 ); slider.SetFillColor( 46 ); ; if slider:; slider.SetRange( 0, float(i) / 10000. ); ; c1.Modified(); c1.Update(); ; # Destroy member functions cache.; for name in histos:; exec('del %sFill' % name); del histos; ; # Done, finalized and trigger an update.; slider.SetRange( 0, 1 ); total.Draw( 'sameaxis' ) # to redraw axis hidden by the fill area; c1.Modified(); c1.Update(); ; gBenchmark.Show( 'hsum' ); TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TSliderA specialized TPad including a TSliderBox object.Definition TSlider.h:17; AuthorWim Lavrijsen ; Definition in file hsum.py. tutorialspyroothsum.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsum_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsum_8py.html
Performance,cache,cache,"escription; Simple example illustrating how to use the C++ interpreter . ; from ROOT import TCanvas, TH1F, TSlider; from ROOT import gROOT, gBenchmark, gRandom; ; # Create a new canvas, and customize it.; c1 = TCanvas( 'c1', 'The HSUM example', 200, 10, 600, 400 ); c1.SetGrid();; ; gBenchmark.Start( 'hsum' ); ; # Create some histograms.; total = TH1F( 'total', 'This is the total distribution', 100, -4, 4 ); main = TH1F( 'main', 'Main contributor', 100, -4, 4 ); s1 = TH1F( 's1', 'This is the first signal', 100, -4, 4 ); s2 = TH1F( 's2', 'This is the second signal', 100, -4, 4 ); total.Sumw2() # this makes sure that the sum of squares of weights will be stored; ; # Set canvas/frame attributes.; total.SetMarkerStyle( 21 ); total.SetMarkerSize( 0.7 ); main.SetFillColor( 16 ); s1.SetFillColor( 42 ); s2.SetFillColor( 46 ); ; # Initialize random number generator.; gRandom.SetSeed(); gauss, landau = gRandom.Gaus, gRandom.Landau; ; # for speed, bind and cache the Fill member functions; histos = [ 'total', 'main', 's1', 's2' ]; for name in histos:; exec('%sFill = %s.Fill' % (name,name)); ; # Fill histograms randomly; kUPDATE = 500; for i in range( 10000 ):; # Generate random values.; xmain = gauss( -1, 1.5 ); xs1 = gauss( -0.5, 0.5 ); xs2 = landau( 1, 0.15 ); mainFill( xmain ); ; # Fill histograms.; s1Fill( xs1, 0.3 ); s2Fill( xs2, 0.2 ); totalFill( xmain ); totalFill( xs1, 0.3 ); totalFill( xs2, 0.2 ); ; # Update display every kUPDATE events.; if i and (i%kUPDATE) == 0 :; if i == kUPDATE :; total.Draw( 'e1p' ); main.Draw( 'same' ); s1.Draw( 'same' ); s2.Draw( 'same' ); c1.Update(); slider = TSlider( 'slider', 'test', 4.2, 0, 4.6, total.GetMaximum(), 38 ); slider.SetFillColor( 46 ); ; if slider:; slider.SetRange( 0, float(i) / 10000. ); ; c1.Modified(); c1.Update(); ; # Destroy member functions cache.; for name in histos:; exec('del %sFill' % name); del histos; ; # Done, finalized and trigger an update.; slider.SetRange( 0, 1 ); total.Draw( 'sameaxis' ) # to redraw axis hidde",MatchSource.WIKI,doc/master/hsum_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsum_8py.html
Testability,test,test,"1F( 's1', 'This is the first signal', 100, -4, 4 ); s2 = TH1F( 's2', 'This is the second signal', 100, -4, 4 ); total.Sumw2() # this makes sure that the sum of squares of weights will be stored; ; # Set canvas/frame attributes.; total.SetMarkerStyle( 21 ); total.SetMarkerSize( 0.7 ); main.SetFillColor( 16 ); s1.SetFillColor( 42 ); s2.SetFillColor( 46 ); ; # Initialize random number generator.; gRandom.SetSeed(); gauss, landau = gRandom.Gaus, gRandom.Landau; ; # for speed, bind and cache the Fill member functions; histos = [ 'total', 'main', 's1', 's2' ]; for name in histos:; exec('%sFill = %s.Fill' % (name,name)); ; # Fill histograms randomly; kUPDATE = 500; for i in range( 10000 ):; # Generate random values.; xmain = gauss( -1, 1.5 ); xs1 = gauss( -0.5, 0.5 ); xs2 = landau( 1, 0.15 ); mainFill( xmain ); ; # Fill histograms.; s1Fill( xs1, 0.3 ); s2Fill( xs2, 0.2 ); totalFill( xmain ); totalFill( xs1, 0.3 ); totalFill( xs2, 0.2 ); ; # Update display every kUPDATE events.; if i and (i%kUPDATE) == 0 :; if i == kUPDATE :; total.Draw( 'e1p' ); main.Draw( 'same' ); s1.Draw( 'same' ); s2.Draw( 'same' ); c1.Update(); slider = TSlider( 'slider', 'test', 4.2, 0, 4.6, total.GetMaximum(), 38 ); slider.SetFillColor( 46 ); ; if slider:; slider.SetRange( 0, float(i) / 10000. ); ; c1.Modified(); c1.Update(); ; # Destroy member functions cache.; for name in histos:; exec('del %sFill' % name); del histos; ; # Done, finalized and trigger an update.; slider.SetRange( 0, 1 ); total.Draw( 'sameaxis' ) # to redraw axis hidden by the fill area; c1.Modified(); c1.Update(); ; gBenchmark.Show( 'hsum' ); TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TSliderA specialized TPad including a TSliderBox object.Definition TSlider.h:17; AuthorWim Lavrijsen ; Definition in file hsum.py. tutorialspyroothsum.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsum_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsum_8py.html
Deployability,update,update,"total.Sumw2() # this makes sure that the sum of squares of weights will be stored; 26 ; 27# Set canvas/frame attributes.; 28total.SetMarkerStyle( 21 ); 29total.SetMarkerSize( 0.7 ); 30main.SetFillColor( 16 ); 31s1.SetFillColor( 42 ); 32s2.SetFillColor( 46 ); 33 ; 34# Initialize random number generator.; 35gRandom.SetSeed(); 36gauss, landau = gRandom.Gaus, gRandom.Landau; 37 ; 38# for speed, bind and cache the Fill member functions; 39histos = [ 'total', 'main', 's1', 's2' ]; 40for name in histos:; 41 exec('%sFill = %s.Fill' % (name,name)); 42 ; 43# Fill histograms randomly; 44kUPDATE = 500; 45for i in range( 10000 ):; 46 # Generate random values.; 47 xmain = gauss( -1, 1.5 ); 48 xs1 = gauss( -0.5, 0.5 ); 49 xs2 = landau( 1, 0.15 ); 50 mainFill( xmain ); 51 ; 52 # Fill histograms.; 53 s1Fill( xs1, 0.3 ); 54 s2Fill( xs2, 0.2 ); 55 totalFill( xmain ); 56 totalFill( xs1, 0.3 ); 57 totalFill( xs2, 0.2 ); 58 ; 59 # Update display every kUPDATE events.; 60 if i and (i%kUPDATE) == 0 :; 61 if i == kUPDATE :; 62 total.Draw( 'e1p' ); 63 main.Draw( 'same' ); 64 s1.Draw( 'same' ); 65 s2.Draw( 'same' ); 66 c1.Update(); 67 slider = TSlider( 'slider', 'test', 4.2, 0, 4.6, total.GetMaximum(), 38 ); 68 slider.SetFillColor( 46 ); 69 ; 70 if slider:; 71 slider.SetRange( 0, float(i) / 10000. ); 72 ; 73 c1.Modified(); 74 c1.Update(); 75 ; 76# Destroy member functions cache.; 77for name in histos:; 78 exec('del %sFill' % name); 79del histos; 80 ; 81# Done, finalized and trigger an update.; 82slider.SetRange( 0, 1 ); 83total.Draw( 'sameaxis' ) # to redraw axis hidden by the fill area; 84c1.Modified(); 85c1.Update(); 86 ; 87gBenchmark.Show( 'hsum' ); TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TSliderA specialized TPad including a TSliderBox object.Definition TSlider.h:17. tutorialspyroothsum.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsum_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsum_8py_source.html
Performance,cache,cache,"ijsen; 10 ; 11from ROOT import TCanvas, TH1F, TSlider; 12from ROOT import gROOT, gBenchmark, gRandom; 13 ; 14# Create a new canvas, and customize it.; 15c1 = TCanvas( 'c1', 'The HSUM example', 200, 10, 600, 400 ); 16c1.SetGrid();; 17 ; 18gBenchmark.Start( 'hsum' ); 19 ; 20# Create some histograms.; 21total = TH1F( 'total', 'This is the total distribution', 100, -4, 4 ); 22main = TH1F( 'main', 'Main contributor', 100, -4, 4 ); 23s1 = TH1F( 's1', 'This is the first signal', 100, -4, 4 ); 24s2 = TH1F( 's2', 'This is the second signal', 100, -4, 4 ); 25total.Sumw2() # this makes sure that the sum of squares of weights will be stored; 26 ; 27# Set canvas/frame attributes.; 28total.SetMarkerStyle( 21 ); 29total.SetMarkerSize( 0.7 ); 30main.SetFillColor( 16 ); 31s1.SetFillColor( 42 ); 32s2.SetFillColor( 46 ); 33 ; 34# Initialize random number generator.; 35gRandom.SetSeed(); 36gauss, landau = gRandom.Gaus, gRandom.Landau; 37 ; 38# for speed, bind and cache the Fill member functions; 39histos = [ 'total', 'main', 's1', 's2' ]; 40for name in histos:; 41 exec('%sFill = %s.Fill' % (name,name)); 42 ; 43# Fill histograms randomly; 44kUPDATE = 500; 45for i in range( 10000 ):; 46 # Generate random values.; 47 xmain = gauss( -1, 1.5 ); 48 xs1 = gauss( -0.5, 0.5 ); 49 xs2 = landau( 1, 0.15 ); 50 mainFill( xmain ); 51 ; 52 # Fill histograms.; 53 s1Fill( xs1, 0.3 ); 54 s2Fill( xs2, 0.2 ); 55 totalFill( xmain ); 56 totalFill( xs1, 0.3 ); 57 totalFill( xs2, 0.2 ); 58 ; 59 # Update display every kUPDATE events.; 60 if i and (i%kUPDATE) == 0 :; 61 if i == kUPDATE :; 62 total.Draw( 'e1p' ); 63 main.Draw( 'same' ); 64 s1.Draw( 'same' ); 65 s2.Draw( 'same' ); 66 c1.Update(); 67 slider = TSlider( 'slider', 'test', 4.2, 0, 4.6, total.GetMaximum(), 38 ); 68 slider.SetFillColor( 46 ); 69 ; 70 if slider:; 71 slider.SetRange( 0, float(i) / 10000. ); 72 ; 73 c1.Modified(); 74 c1.Update(); 75 ; 76# Destroy member functions cache.; 77for name in histos:; 78 exec('del %sFill' % name); 79del histos; 80",MatchSource.WIKI,doc/master/hsum_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsum_8py_source.html
Testability,test,test,"total.Sumw2() # this makes sure that the sum of squares of weights will be stored; 26 ; 27# Set canvas/frame attributes.; 28total.SetMarkerStyle( 21 ); 29total.SetMarkerSize( 0.7 ); 30main.SetFillColor( 16 ); 31s1.SetFillColor( 42 ); 32s2.SetFillColor( 46 ); 33 ; 34# Initialize random number generator.; 35gRandom.SetSeed(); 36gauss, landau = gRandom.Gaus, gRandom.Landau; 37 ; 38# for speed, bind and cache the Fill member functions; 39histos = [ 'total', 'main', 's1', 's2' ]; 40for name in histos:; 41 exec('%sFill = %s.Fill' % (name,name)); 42 ; 43# Fill histograms randomly; 44kUPDATE = 500; 45for i in range( 10000 ):; 46 # Generate random values.; 47 xmain = gauss( -1, 1.5 ); 48 xs1 = gauss( -0.5, 0.5 ); 49 xs2 = landau( 1, 0.15 ); 50 mainFill( xmain ); 51 ; 52 # Fill histograms.; 53 s1Fill( xs1, 0.3 ); 54 s2Fill( xs2, 0.2 ); 55 totalFill( xmain ); 56 totalFill( xs1, 0.3 ); 57 totalFill( xs2, 0.2 ); 58 ; 59 # Update display every kUPDATE events.; 60 if i and (i%kUPDATE) == 0 :; 61 if i == kUPDATE :; 62 total.Draw( 'e1p' ); 63 main.Draw( 'same' ); 64 s1.Draw( 'same' ); 65 s2.Draw( 'same' ); 66 c1.Update(); 67 slider = TSlider( 'slider', 'test', 4.2, 0, 4.6, total.GetMaximum(), 38 ); 68 slider.SetFillColor( 46 ); 69 ; 70 if slider:; 71 slider.SetRange( 0, float(i) / 10000. ); 72 ; 73 c1.Modified(); 74 c1.Update(); 75 ; 76# Destroy member functions cache.; 77for name in histos:; 78 exec('del %sFill' % name); 79del histos; 80 ; 81# Done, finalized and trigger an update.; 82slider.SetRange( 0, 1 ); 83total.Draw( 'sameaxis' ) # to redraw axis hidden by the fill area; 84c1.Modified(); 85c1.Update(); 86 ; 87gBenchmark.Show( 'hsum' ); TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TSliderA specialized TPad including a TSliderBox object.Definition TSlider.h:17. tutorialspyroothsum.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hsum_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hsum_8py_source.html
Testability,test,test,". ROOT: tutorials/tree/htest.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. htest.C File ReferenceTutorials » Tree tutorials. Detailed Description; Save histograms in Tree branches ; To run this example, do root > .L htest.C; root > htw(); root > htr1(); root > htr2(); root > htr3(). ; void htw() {; // Create a Tree with a few branches of type histogram; // 25000 entries are filled in the Tree; // For each entry, the copy of 3 histograms is written; // The data base will contain 75000 histograms.; gBenchmark->Start(""hsimple"");; TFile f(""ht.root"",""recreate"");; auto T = new TTree(""T"",""test"");; auto hpx = new TH1F(""hpx"",""This is the px distribution"",100,-4,4);; auto hpxpy = new TH2F(""hpxpy"",""py vs px"",40,-4,4,40,-4,4);; auto hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; T->Branch(""hpx"",""TH1F"",&hpx,32000,0);; T->Branch(""hpxpy"",""TH2F"",&hpxpy,32000,0);; T->Branch(""hprof"",""TProfile"",&hprof,32000,0);; Float_t px, py, pz;; for (Int_t i = 0; i < 25000; i++) {; if (i%1000 == 0) printf(""at entry: %d\n"",i);; gRandom->Rannor(px,py);; pz = px*px + py*py;; hpx->Fill(px);; hpxpy->Fill(px,py);; hprof->Fill(px,pz);; T->Fill();; }; T->Print();; f.Write();; gBenchmark->Show(""hsimple"");; }; ; void htr1() {; // Connect Tree generated by htw and show histograms for entry 12345; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; TH1F *hpx = nullptr;; TH2F *hpxpy = nullptr;; TProfile *hprof = nullptr;; T->SetBranchAddress(""hpx"",&hpx);; T->SetBranchAddress(""hpxpy"",&hpxpy);; T->SetBranchAddress(""hprof"",&hprof);; T->GetEntry(12345);; auto c1 = new TCanvas(""c1"",""test"",10,10,600,1000);; c1->Divide(1,3);; c1->cd(1);; hpx->Draw();; c1->cd(2);; hpxpy->Draw();; c1->cd(3);; hprof->Draw();; c1->Print(""htr1.png"");; }; ; void htr2() {; // Connect Tree generated by htw and show histograms for entry 12345; // a variant of htr1; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; auto c1 = new TCanvas(""c1"",""t",MatchSource.WIKI,doc/master/htest_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/htest_8C.html
Energy Efficiency,allocate,allocate,"r *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TRandom::SetSeedvirtual void SetSeed(ULong_t seed=0)Set the random generator seed.Definition TRandom.cxx:615; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TSystem::ProcessEventsvirtual Bool_t ProcessEvents()Process pending events (GUI, timers, sockets).Definition TSystem.cxx:416; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::Fillvirtual Int_t Fill()Fill all branches.Definition TTree.cxx:4603; TTree::SetBranchAddressvirtual Int_t SetBranchAddress(const char *bname, void *add, TBranch **ptr=nullptr)Change branch address, dealing with clone trees properly.Definition TTree.cxx:8385; TTree::BranchTBranch * Branch(const char *name, T *obj, Int_t bufsize=32000, Int_t splitlevel=99)Add a new branch, and infer the data type from the type of obj being passed.Definition TTree.h:353; TTree::LoadTreevirtual Long64_t LoadTree(Long64_t entry)Set current entry.Definition TTree.cxx:6473; TTree::ResetBranchAddressesvirtual void ResetBranchAddresses()Tell all of our branches to drop their current objects and allocate new ones.Definition TTree.cxx:8075; c1return c1Definition legend1.C:41; AuthorThe ROOT Team ; Definition in file hvector.C. tutorialstreehvector.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/hvector_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hvector_8C.html
Modifiability,variab,variable,"r();; vrand.clear();; ; for (Int_t j = 0; j < npx; ++j) {; ; Float_t px,py,pz;; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->Rndm(1);; ; hpx->Fill(px);; ; vpx.emplace_back(px);; vpy.emplace_back(py);; vpz.emplace_back(pz);; vrand.emplace_back(random);; ; }; if (i && (i%kUPDATE) == 0) {; if (i == kUPDATE) hpx->Draw();; c1->Modified();; c1->Update();; if (gSystem->ProcessEvents()); break;; }; t->Fill();; }; f->Write();; ; delete f;; }; ; ; void read(); {; ; TFile *f = TFile::Open(""hvector.root"",""READ"");; ; if (!f) { return; }; ; TTree *t; f->GetObject(""tvec"",t);; ; std::vector<float> *vpx = nullptr;; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""c1"",""Dynamic Filling Example"",200,10,700,500);; ; const Int_t kUPDATE = 1000;; ; TBranch *bvpx = nullptr;; t->SetBranchAddress(""vpx"",&vpx,&bvpx);; ; ; // Create one histograms; TH1F *h = new TH1F(""h"",""This is the px distribution"",100,-4,4);; h->SetFillColor(48);; ; for (Int_t i = 0; i < 25000; i++) {; ; Long64_t tentry = t->LoadTree(i);; bvpx->GetEntry(tentry);; ; for (UInt_t j = 0; j < vpx->size(); ++j) {; ; h->Fill(vpx->at(j));; ; }; if (i && (i%kUPDATE) == 0) {; if (i == kUPDATE) h->Draw();; c1->Modified();; c1->Update();; if (gSystem->ProcessEvents()); break;; }; }; ; // Since we passed the address of a local variable we need; // to remove it.; t->ResetBranchAddresses();; }; ; ; void hvector(); {; gBenchmark->Start(""hvector"");; ; write();; read();; ; gBenchmark->Show(""hvector"");; }; f#define f(i)Definition RSha256.hxx:104; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; Float_tfloat Float_tDefinition RtypesCore.h:57; Long64_tlong long Long64_tDefinition RtypesCore.h:69; TBenchmark.h; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; TCanvas.h; TFile.h; kUPDATE@ kUPDATEDefinition TFitParametersDialog.cxx:46; TFrame.h; TH1F.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition T",MatchSource.WIKI,doc/master/hvector_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hvector_8C.html
Usability,clear,clear,"ls. Detailed Description; Write and read STL vectors in a tree. . ; #include <vector>; ; #include ""TFile.h""; #include ""TTree.h""; #include ""TCanvas.h""; #include ""TFrame.h""; #include ""TH1F.h""; #include ""TBenchmark.h""; #include ""TRandom.h""; #include ""TSystem.h""; ; void write(); {; ; TFile *f = TFile::Open(""hvector.root"",""RECREATE"");; ; if (!f) { return; }; ; // Create one histograms; TH1F *hpx = new TH1F(""hpx"",""This is the px distribution"",100,-4,4);; hpx->SetFillColor(48);; ; std::vector<float> vpx;; std::vector<float> vpy;; std::vector<float> vpz;; std::vector<float> vrand;; ; // Create a TTree; TTree *t = new TTree(""tvec"",""Tree with vectors"");; t->Branch(""vpx"",&vpx);; t->Branch(""vpy"",&vpy);; t->Branch(""vpz"",&vpz);; t->Branch(""vrand"",&vrand);; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""c1"",""Dynamic Filling Example"",200,10,700,500);; ; gRandom->SetSeed();; const Int_t kUPDATE = 1000;; for (Int_t i = 0; i < 25000; i++) {; Int_t npx = (Int_t)(gRandom->Rndm(1)*15);; ; vpx.clear();; vpy.clear();; vpz.clear();; vrand.clear();; ; for (Int_t j = 0; j < npx; ++j) {; ; Float_t px,py,pz;; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->Rndm(1);; ; hpx->Fill(px);; ; vpx.emplace_back(px);; vpy.emplace_back(py);; vpz.emplace_back(pz);; vrand.emplace_back(random);; ; }; if (i && (i%kUPDATE) == 0) {; if (i == kUPDATE) hpx->Draw();; c1->Modified();; c1->Update();; if (gSystem->ProcessEvents()); break;; }; t->Fill();; }; f->Write();; ; delete f;; }; ; ; void read(); {; ; TFile *f = TFile::Open(""hvector.root"",""READ"");; ; if (!f) { return; }; ; TTree *t; f->GetObject(""tvec"",t);; ; std::vector<float> *vpx = nullptr;; ; // Create a new canvas.; TCanvas *c1 = new TCanvas(""c1"",""Dynamic Filling Example"",200,10,700,500);; ; const Int_t kUPDATE = 1000;; ; TBranch *bvpx = nullptr;; t->SetBranchAddress(""vpx"",&vpx,&bvpx);; ; ; // Create one histograms; TH1F *h = new TH1F(""h"",""This is the px distribution"",100,-4,4);; h->SetFillColor(48);; ; for (Int_t i = 0; i < ",MatchSource.WIKI,doc/master/hvector_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/hvector_8C.html
Availability,error,errors,". ROOT: tutorials/fit/Ifit.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Ifit.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Example of a program to fit non-equidistant data points ; The fitting function fcn is a simple chisquare function The data consists of 5 data points (arrays x,y,z) + the errors in errorsz More details on the various functions or parameters for these functions can be obtained in an interactive ROOT session with:; Root > TMinuit *minuit = new TMinuit(10);; TMinuitDefinition TMinuit.h:27; Root > minuit->mnhelp(""*"") to see the list of possible keywords; Root > minuit->mnhelp(""SET"") explains most parameters; ; **********; ** 1 **SET ERR 1; **********; PARAMETER DEFINITIONS:; NO. NAME VALUE STEP SIZE LIMITS; 1 a1 3.00000e+00 1.00000e-01 no limits; 2 a2 1.00000e+00 1.00000e-01 no limits; 3 a3 1.00000e-01 1.00000e-02 no limits; 4 a4 1.00000e-02 1.00000e-03 no limits; **********; ** 2 **MIGRAD 500 1; **********; FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.; START MIGRAD MINIMIZATION. STRATEGY 1. CONVERGENCE WHEN EDM .LT. 1.00e-03; FCN=90047.1 FROM MIGRAD STATUS=INITIATE 14 CALLS 15 TOTAL; EDM= unknown STRATEGY= 1 NO ERROR MATRIX ; EXT PARAMETER CURRENT GUESS STEP FIRST ; NO. NAME VALUE ERROR SIZE DERIVATIVE ; 1 a1 3.00000e+00 1.00000e-01 1.00000e-01 2.81614e+05; 2 a2 1.00000e+00 1.00000e-01 1.00000e-01 -2.73395e+05; 3 a3 1.00000e-01 1.00000e-02 1.00000e-02 -3.08505e+05; 4 a4 1.00000e-02 1.00000e-03 1.00000e-03 3.53925e+05; MIGRAD MINIMIZATION HAS CONVERGED.; MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.; EIGENVALUES OF SECOND-DERIVATIVE MATRIX:; -6.7573e-05 7.2964e-05 4.1376e-02 3.9586e+00; MINUIT WARNING IN HESSE ; ============== MATRIX FORCED POS-DEF BY ADDING 0.004026 TO DIAGONAL.; FCN=10.3986 FROM HESSE STATUS=NOT POSDEF 23 CALLS 112 TOTAL; EDM=0.11462 STRATEGY= 1 ERR MATRIX NOT POS-DEF; EXT PARAMETER APPROXIMATE STEP FIRST ; NO. NAME VALUE ERROR SIZE DERIVATI",MatchSource.WIKI,doc/master/Ifit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Ifit_8C.html
Usability,simpl,simple,". ROOT: tutorials/fit/Ifit.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Ifit.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Example of a program to fit non-equidistant data points ; The fitting function fcn is a simple chisquare function The data consists of 5 data points (arrays x,y,z) + the errors in errorsz More details on the various functions or parameters for these functions can be obtained in an interactive ROOT session with:; Root > TMinuit *minuit = new TMinuit(10);; TMinuitDefinition TMinuit.h:27; Root > minuit->mnhelp(""*"") to see the list of possible keywords; Root > minuit->mnhelp(""SET"") explains most parameters; ; **********; ** 1 **SET ERR 1; **********; PARAMETER DEFINITIONS:; NO. NAME VALUE STEP SIZE LIMITS; 1 a1 3.00000e+00 1.00000e-01 no limits; 2 a2 1.00000e+00 1.00000e-01 no limits; 3 a3 1.00000e-01 1.00000e-02 no limits; 4 a4 1.00000e-02 1.00000e-03 no limits; **********; ** 2 **MIGRAD 500 1; **********; FIRST CALL TO USER FUNCTION AT NEW START POINT, WITH IFLAG=4.; START MIGRAD MINIMIZATION. STRATEGY 1. CONVERGENCE WHEN EDM .LT. 1.00e-03; FCN=90047.1 FROM MIGRAD STATUS=INITIATE 14 CALLS 15 TOTAL; EDM= unknown STRATEGY= 1 NO ERROR MATRIX ; EXT PARAMETER CURRENT GUESS STEP FIRST ; NO. NAME VALUE ERROR SIZE DERIVATIVE ; 1 a1 3.00000e+00 1.00000e-01 1.00000e-01 2.81614e+05; 2 a2 1.00000e+00 1.00000e-01 1.00000e-01 -2.73395e+05; 3 a3 1.00000e-01 1.00000e-02 1.00000e-02 -3.08505e+05; 4 a4 1.00000e-02 1.00000e-03 1.00000e-03 3.53925e+05; MIGRAD MINIMIZATION HAS CONVERGED.; MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX.; EIGENVALUES OF SECOND-DERIVATIVE MATRIX:; -6.7573e-05 7.2964e-05 4.1376e-02 3.9586e+00; MINUIT WARNING IN HESSE ; ============== MATRIX FORCED POS-DEF BY ADDING 0.004026 TO DIAGONAL.; FCN=10.3986 FROM HESSE STATUS=NOT POSDEF 23 CALLS 112 TOTAL; EDM=0.11462 STRATEGY= 1 ERR MATRIX NOT POS-DEF; EXT PARAMETER APPROXIMATE STEP FIRST ; NO. NAME VALUE ERROR SIZE DERIVATI",MatchSource.WIKI,doc/master/Ifit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Ifit_8C.html
Energy Efficiency,adapt,adapter,"le. 1// @(#)root/mathcore:$Id$; 2// Authors: L. Moneta 11/2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 , LCG ROOT MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for function interfaces; 12//; 13// Generic Interfaces for one or multi-dimensional functions; 14//; 15// Created by: Lorenzo Moneta : Wed Nov 13 2006; 16//; 17//; 18#ifndef ROOT_Math_IFunction; 19#define ROOT_Math_IFunction; 20 ; 21/**; 22@defgroup CppFunctions Function Classes and Interfaces; 23 ; 24 Interfaces (abstract classes) and Base classes used in MathCore and MathMore numerical methods; 25 for describing function classes. They define function and gradient evaluation and as well the; 26 functionality for dealing with parameters in the case of parametric functions which are used for; 27 fitting and data modeling.; 28 Included are also adapter classes, such as functors, to wrap generic callable C++ objects; 29 in the desired interface.; 30 ; 31@ingroup MathCore; 32*/; 33 ; 34#include ""Math/IFunctionfwd.h""; 35 ; 36 ; 37namespace ROOT {; 38 namespace Math {; 39 ; 40 /**; 41 @defgroup GenFunc Generic Function Evaluation Interfaces; 42 Interface classes for evaluation of function object classes in one or multi-dimensions.; 43 @ingroup CppFunctions; 44 */; 45 ; 46//___________________________________________________________________________________; 47 /**; 48 Documentation for the abstract class IBaseFunctionMultiDim.; 49 Interface (abstract class) for generic functions objects of multi-dimension; 50 Provides a method to evaluate the function given a vector of coordinate values,; 51 by implementing operator() (const double *).; 52 In addition it defines the interface for copying functions via the pure virtual method Clone(); 53 and the interface for getting the function dimension via the NDim() method.; 54 Derived classes must implement the pure private virtua",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
Integrability,interface,interfaces,". ROOT: math/mathcore/inc/Math/IFunction.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. IFunction.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Authors: L. Moneta 11/2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 , LCG ROOT MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for function interfaces; 12//; 13// Generic Interfaces for one or multi-dimensional functions; 14//; 15// Created by: Lorenzo Moneta : Wed Nov 13 2006; 16//; 17//; 18#ifndef ROOT_Math_IFunction; 19#define ROOT_Math_IFunction; 20 ; 21/**; 22@defgroup CppFunctions Function Classes and Interfaces; 23 ; 24 Interfaces (abstract classes) and Base classes used in MathCore and MathMore numerical methods; 25 for describing function classes. They define function and gradient evaluation and as well the; 26 functionality for dealing with parameters in the case of parametric functions which are used for; 27 fitting and data modeling.; 28 Included are also adapter classes, such as functors, to wrap generic callable C++ objects; 29 in the desired interface.; 30 ; 31@ingroup MathCore; 32*/; 33 ; 34#include ""Math/IFunctionfwd.h""; 35 ; 36 ; 37namespace ROOT {; 38 namespace Math {; 39 ; 40 /**; 41 @defgroup GenFunc Generic Function Evaluation Interfaces; 42 Interface classes for evaluation of function object classes in one or multi-dimensions.; 43 @ingroup CppFunctions; 44 */; 45 ; 46//___________________________________________________________________________________; 47 /**; 48 Documentation for the abstract class IBaseFunctionMultiDim.; 49 Interface (abstract class) for generic functions objects of multi-dimension; 50 Provides a method to evaluate the function given a vector of coordinate values,; 51 by implementing operator() (const double *).; 52 In addition it defines the interface for copying f",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
Modifiability,adapt,adapter,"le. 1// @(#)root/mathcore:$Id$; 2// Authors: L. Moneta 11/2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 , LCG ROOT MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for function interfaces; 12//; 13// Generic Interfaces for one or multi-dimensional functions; 14//; 15// Created by: Lorenzo Moneta : Wed Nov 13 2006; 16//; 17//; 18#ifndef ROOT_Math_IFunction; 19#define ROOT_Math_IFunction; 20 ; 21/**; 22@defgroup CppFunctions Function Classes and Interfaces; 23 ; 24 Interfaces (abstract classes) and Base classes used in MathCore and MathMore numerical methods; 25 for describing function classes. They define function and gradient evaluation and as well the; 26 functionality for dealing with parameters in the case of parametric functions which are used for; 27 fitting and data modeling.; 28 Included are also adapter classes, such as functors, to wrap generic callable C++ objects; 29 in the desired interface.; 30 ; 31@ingroup MathCore; 32*/; 33 ; 34#include ""Math/IFunctionfwd.h""; 35 ; 36 ; 37namespace ROOT {; 38 namespace Math {; 39 ; 40 /**; 41 @defgroup GenFunc Generic Function Evaluation Interfaces; 42 Interface classes for evaluation of function object classes in one or multi-dimensions.; 43 @ingroup CppFunctions; 44 */; 45 ; 46//___________________________________________________________________________________; 47 /**; 48 Documentation for the abstract class IBaseFunctionMultiDim.; 49 Interface (abstract class) for generic functions objects of multi-dimension; 50 Provides a method to evaluate the function given a vector of coordinate values,; 51 by implementing operator() (const double *).; 52 In addition it defines the interface for copying functions via the pure virtual method Clone(); 53 and the interface for getting the function dimension via the NDim() method.; 54 Derived classes must implement the pure private virtua",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
Performance,perform,performances,"p, these can be passed; 186 /// in with this overload. The `previous_*` arrays can also be used to return second derivative and step size; 187 /// so that these can be passed forward again as well at the call site, if necessary.; 188 virtual void GradientWithPrevResult(const T *x, T *grad, T *previous_grad, T *previous_g2, T *previous_gstep) const; 189 {; 190 unsigned int ndim = NDim();; 191 for (unsigned int icoord = 0; icoord < ndim; ++icoord) {; 192 grad[icoord] = Derivative(x, icoord, previous_grad, previous_g2, previous_gstep);; 193 }; 194 }; 195 ; 196 using BaseFunc::NDim;; 197 ; 198 /// Optimized method to evaluate at the same time the function value and derivative at a point x.; 199 /// Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; 200 /// Derived class should implement this method if performances play an important role and if it is faster to; 201 /// evaluate value and derivative at the same time; 202 virtual void FdF(const T *x, T &f, T *df) const; 203 {; 204 f = BaseFunc::operator()(x);; 205 Gradient(x, df);; 206 }; 207 ; 208 /// Return the partial derivative with respect to the passed coordinate.; 209 T Derivative(const T *x, unsigned int icoord = 0) const { return DoDerivative(x, icoord); }; 210 ; 211 /// In some cases, the derivative algorithm will use information from the previous step, these can be passed; 212 /// in with this overload. The `previous_*` arrays can also be used to return second derivative and step size; 213 /// so that these can be passed forward again as well at the call site, if necessary.; 214 T Derivative(const T *x, unsigned int icoord, T *previous_grad, T *previous_g2,; 215 T *previous_gstep) const; 216 {; 217 return DoDerivativeWithPrevResult(x, icoord, previous_grad, previous_g2, previous_gstep);; 218 }; 219 ; 220 bool HasGradient() const { return true; }; 221 ; 222 virtual bool returnsInMinuit2ParameterSpace() const { return false; }; 223 ; 224 private:; 225 /// F",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
Usability,simpl,simple,"t NDim() const = 0;; 76 ; 77 /// Evaluate the function at a point x[].; 78 /// Use the pure virtual private method DoEval which must be implemented by the sub-classes.; 79 T operator()(const T *x) const { return DoEval(x); }; 80 ; 81#ifdef LATER; 82 /// Template method to evaluate the function using the begin of an iterator.; 83 /// User is responsible to provide correct size for the iterator.; 84 template <class Iterator>; 85 T operator()(const Iterator it) const { return DoEval(&(*it)); }; 86#endif; 87 ; 88 // Indicate whether this class supports gradient calculations, i.e.,; 89 // if it inherits from ROOT::Math::IGradientFunctionMultiDim.; 90 virtual bool HasGradient() const { return false; }; 91 ; 92 private:; 93 ; 94 /// Implementation of the evaluation function. Must be implemented by derived classes.; 95 virtual T DoEval(const T *x) const = 0;; 96 };; 97 ; 98 ; 99//___________________________________________________________________________________; 100 /**; 101 Interface (abstract class) for generic functions objects of one-dimension; 102 Provides a method to evaluate the function given a value (simple double); 103 by implementing operator() (const double ).; 104 In addition it defines the interface for copying functions via the pure virtual method Clone().; 105 Derived classes must implement the pure virtual private method DoEval(double ) for the; 106 function evaluation in addition to Clone().; 107 An interface for evaluating the function passing a vector (like for multidim functions) is also; 108 provided; 109 ; 110 @ingroup GenFunc; 111 */; 112 class IBaseFunctionOneDim {; 113 ; 114 public:; 115 ; 116 typedef IBaseFunctionOneDim BaseFunc;; 117 ; 118 virtual ~IBaseFunctionOneDim() = default;; 119 ; 120 /// Clone a function.; 121 /// Each derived class will implement their version of the private DoClone method.; 122 virtual IBaseFunctionOneDim *Clone() const = 0;; 123 ; 124 /// Evaluate the function at a point x.; 125 /// Use the a pure virtual private metho",MatchSource.WIKI,doc/master/IFunction_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html
Availability,avail,available,". ROOT: ROOT Reference Documentation. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT Reference Documentation . Introduction; Welcome to ROOT!; This is the Reference Guide of the ROOT software toolkit. You can find in the reference documentation page pointers to Reference Guides for all ROOT versions. Manuals. The Manual provides a more in depth explanation of concepts and functionality available in the ROOT system. It is closely linked to the Reference Guide.; A number of topical User Guides and Manuals for various components of the system. Tutorials and courses. A rich set of ROOT tutorials and code examples are offered to developers to exercise specific functionality.; ROOT Primer.; ROOT Introductory Course. Provide your feedback; If you have suggestions about how to improve this documentation, you can let us know:. With a PR; On the ROOT Forum; On our tracker . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/index.html
Usability,feedback,feedback,". ROOT: ROOT Reference Documentation. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT Reference Documentation . Introduction; Welcome to ROOT!; This is the Reference Guide of the ROOT software toolkit. You can find in the reference documentation page pointers to Reference Guides for all ROOT versions. Manuals. The Manual provides a more in depth explanation of concepts and functionality available in the ROOT system. It is closely linked to the Reference Guide.; A number of topical User Guides and Manuals for various components of the system. Tutorials and courses. A rich set of ROOT tutorials and code examples are offered to developers to exercise specific functionality.; ROOT Primer.; ROOT Introductory Course. Provide your feedback; If you have suggestions about how to improve this documentation, you can let us know:. With a PR; On the ROOT Forum; On our tracker . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/index.html
Availability,toler,tolerance,"), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 118 lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; 119 ; 120 NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 121 */; 122 explicit; 123 IntegratorOneDim(IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 138 ; 139 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 140 */; 141 explicit; 142 IntegratorOneDim(const IGenFunction &f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 143 fIntegrator(nullptr), fFunc(nullptr); 144 {; 145 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 146 SetFunction(f,true);; 147 }; 148 ; 149 /**; 150 Template Constructor of one dimensional Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param typ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
Deployability,integrat,integration,"uide ; .  . Loading...; Searching...; No Matches. Integrator.h. Go to the documentation of this file. 1// @(#)root/mathmore:$Id$; 2// Authors: L. Moneta, M. Slawinska 10/2007; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class Integrator; 12//; 13//; 14#ifndef ROOT_Math_Integrator; 15#define ROOT_Math_Integrator; 16 ; 17#include ""Math/AllIntegrationTypes.h""; 18 ; 19#include ""Math/IntegratorOptions.h""; 20 ; 21#include ""Math/IFunction.h""; 22 ; 23#include ""Math/VirtualIntegrator.h""; 24 ; 25#include <memory>; 26#include <vector>; 27#include <string>; 28 ; 29 ; 30/**; 31@defgroup NumAlgo Numerical Algorithms; 32 ; 33Numerical Algorithm classes from the \ref MathCore and \ref MathMore libraries.; 34 ; 35@ingroup MathCore; 36@ingroup MathMore; 37 ; 38*/; 39 ; 40 ; 41/**; 42 ; 43@defgroup Integration Numerical Integration; 44 ; 45Classes for numerical integration of functions.; 46These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performi",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
Energy Efficiency,adapt,adaptive,"***********************************; 5 * *; 6 * Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class Integrator; 12//; 13//; 14#ifndef ROOT_Math_Integrator; 15#define ROOT_Math_Integrator; 16 ; 17#include ""Math/AllIntegrationTypes.h""; 18 ; 19#include ""Math/IntegratorOptions.h""; 20 ; 21#include ""Math/IFunction.h""; 22 ; 23#include ""Math/VirtualIntegrator.h""; 24 ; 25#include <memory>; 26#include <vector>; 27#include <string>; 28 ; 29 ; 30/**; 31@defgroup NumAlgo Numerical Algorithms; 32 ; 33Numerical Algorithm classes from the \ref MathCore and \ref MathMore libraries.; 34 ; 35@ingroup MathCore; 36@ingroup MathMore; 37 ; 38*/; 39 ; 40 ; 41/**; 42 ; 43@defgroup Integration Numerical Integration; 44 ; 45Classes for numerical integration of functions.; 46These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerica",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
Integrability,integrat,integration,"uide ; .  . Loading...; Searching...; No Matches. Integrator.h. Go to the documentation of this file. 1// @(#)root/mathmore:$Id$; 2// Authors: L. Moneta, M. Slawinska 10/2007; 3 ; 4 /**********************************************************************; 5 * *; 6 * Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class Integrator; 12//; 13//; 14#ifndef ROOT_Math_Integrator; 15#define ROOT_Math_Integrator; 16 ; 17#include ""Math/AllIntegrationTypes.h""; 18 ; 19#include ""Math/IntegratorOptions.h""; 20 ; 21#include ""Math/IFunction.h""; 22 ; 23#include ""Math/VirtualIntegrator.h""; 24 ; 25#include <memory>; 26#include <vector>; 27#include <string>; 28 ; 29 ; 30/**; 31@defgroup NumAlgo Numerical Algorithms; 32 ; 33Numerical Algorithm classes from the \ref MathCore and \ref MathMore libraries.; 34 ; 35@ingroup MathCore; 36@ingroup MathMore; 37 ; 38*/; 39 ; 40 ; 41/**; 42 ; 43@defgroup Integration Numerical Integration; 44 ; 45Classes for numerical integration of functions.; 46These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performi",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
Modifiability,adapt,adaptive,"***********************************; 5 * *; 6 * Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class Integrator; 12//; 13//; 14#ifndef ROOT_Math_Integrator; 15#define ROOT_Math_Integrator; 16 ; 17#include ""Math/AllIntegrationTypes.h""; 18 ; 19#include ""Math/IntegratorOptions.h""; 20 ; 21#include ""Math/IFunction.h""; 22 ; 23#include ""Math/VirtualIntegrator.h""; 24 ; 25#include <memory>; 26#include <vector>; 27#include <string>; 28 ; 29 ; 30/**; 31@defgroup NumAlgo Numerical Algorithms; 32 ; 33Numerical Algorithm classes from the \ref MathCore and \ref MathMore libraries.; 34 ; 35@ingroup MathCore; 36@ingroup MathMore; 37 ; 38*/; 39 ; 40 ; 41/**; 42 ; 43@defgroup Integration Numerical Integration; 44 ; 45Classes for numerical integration of functions.; 46These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerica",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
Performance,perform,performing,"ies.; 34 ; 35@ingroup MathCore; 36@ingroup MathMore; 37 ; 38*/; 39 ; 40 ; 41/**; 42 ; 43@defgroup Integration Numerical Integration; 44 ; 45Classes for numerical integration of functions.; 46These classes provide algorithms for integration of one-dimensional functions, with several adaptive and non-adaptive methods; 47and for integration of multi-dimensional function using an adaptive method or MonteCarlo Integration (GSLMCIntegrator).; 48The basic classes ROOT::Math::IntegratorOneDim provides a common interface for the one-dimensional methods while the class; 49ROOT::Math::IntegratorMultiDim provides the interface for the multi-dimensional ones.; 50The methods can be configured (e.g setting the default method with its default parameters) using the ROOT::Math::IntegratorOneDimOptions and; 51ROOT::Math::IntegratorMultiDimOptions classes.; 52 ; 53@ingroup NumAlgo; 54 ; 55*/; 56 ; 57 ; 58 ; 59namespace ROOT {; 60namespace Math {; 61 ; 62 ; 63 ; 64 ; 65//____________________________________________________________________________________________; 66/**; 67 ; 68User Class for performing numerical integration of a function in one dimension.; 69It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the; 70algorithms used in the QUADPACK, a numerical integration package written in Fortran.; 71 ; 72Various types of adaptive and non-adaptive integration are supported. These include; 73integration over infinite and semi-infinite ranges and singular integrals.; 74 ; 75The integration type is selected using the Integration::type enumeration; 76in the class constructor.; 77The default type is adaptive integration with singularity; 78(ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; 79In the case of ADAPTIVE type, the integration rule can also be specified via the; 80Integration::GKRule. The default rule is 31 points.; 81 ; 82In the case of integration over infinite and sem",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
Usability,simpl,simple,"l</A>.; 91 ; 92 ; 93@ingroup Integration; 94 ; 95*/; 96 ; 97 ; 98class IntegratorOneDim {; 99 ; 100public:; 101 ; 102 typedef IntegrationOneDim::Type Type; // for the enumerations defining the types; 103 ; 104 // constructors; 105 ; 106 ; 107 /**; 108 Constructor of one dimensional Integrator, default type is adaptive; 109 ; 110 @param type integration type (adaptive, non-adaptive, etc..); 111 @param absTol desired absolute Error; 112 @param relTol desired relative Error; 113 @param size maximum number of sub-intervals; 114 @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type); 115 ; 116 Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 118 lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; 119 ; 120 NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 121 */; 122 explicit; 123 IntegratorOneDim(IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE ",MatchSource.WIKI,doc/master/Integrator_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html
Availability,error,errorIgnoreLevel,"deBase;; 50}; 51}; 52namespace RDF {; 53template <typename T>; 54class RResultPtr;; 55template<typename T, typename V>; 56class RInterface;; 57using RNode = RInterface<::ROOT::Detail::RDF::RNodeBase, void>;; 58class RDataSource;; 59} // namespace RDF; 60 ; 61} // namespace ROOT; 62 ; 63/// \cond HIDDEN_SYMBOLS; 64 ; 65namespace ROOT {; 66namespace Internal {; 67namespace RDF {; 68using namespace ROOT::Detail::RDF;; 69using namespace ROOT::RDF;; 70namespace TTraits = ROOT::TypeTraits;; 71 ; 72std::string DemangleTypeIdName(const std::type_info &typeInfo);; 73 ; 74ColumnNames_t; 75ConvertRegexToColumns(const ColumnNames_t &colNames, std::string_view columnNameRegexp, std::string_view callerName);; 76 ; 77/// An helper object that sets and resets gErrorIgnoreLevel via RAII.; 78class RIgnoreErrorLevelRAII {; 79private:; 80 int fCurIgnoreErrorLevel = gErrorIgnoreLevel;; 81 ; 82public:; 83 RIgnoreErrorLevelRAII(int errorIgnoreLevel) { gErrorIgnoreLevel = errorIgnoreLevel; }; 84 ~RIgnoreErrorLevelRAII() { gErrorIgnoreLevel = fCurIgnoreErrorLevel; }; 85};; 86 ; 87/****** BuildAction overloads *******/; 88 ; 89// clang-format off; 90/// This namespace defines types to be used for tag dispatching in RInterface.; 91namespace ActionTags {; 92struct Histo1D{};; 93struct Histo2D{};; 94struct Histo3D{};; 95struct HistoND{};; 96struct Graph{};; 97struct GraphAsymmErrors{};; 98struct Profile1D{};; 99struct Profile2D{};; 100struct Min{};; 101struct Max{};; 102struct Sum{};; 103struct Mean{};; 104struct Fill{};; 105struct StdDev{};; 106struct Display{};; 107struct Snapshot{};; 108struct Book{};; 109}; 110// clang-format on; 111 ; 112template <typename T, bool ISV6HISTO = std::is_base_of<TH1, std::decay_t<T>>::value>; 113struct HistoUtils {; 114 static void SetCanExtendAllAxes(T &h) { h.SetCanExtend(::TH1::kAllAxes); }; 115 static bool HasAxisLimits(T &h); 116 {; 117 auto xaxis = h.GetXaxis();; 118 return !(xaxis->GetXmin() == 0. && xaxis->GetXmax() == 0.);; 119 }; 120};; 121 ; 122templ",MatchSource.WIKI,doc/master/InterfaceUtils_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html
Energy Efficiency,allocate,allocated,"const ColumnNames_t &branches,; 343 std::shared_ptr<RNodeBase> *upcastNodeOnHeap, bool isSingleColumn);; 344 ; 345std::string JitBuildAction(const ColumnNames_t &bl, std::shared_ptr<RDFDetail::RNodeBase> *prevNode,; 346 const std::type_info &art, const std::type_info &at, void *rOnHeap, TTree *tree,; 347 const unsigned int nSlots, const RColumnRegister &colRegister, RDataSource *ds,; 348 std::weak_ptr<RJittedAction> *jittedActionOnHeap, const bool vector2RVec = true);; 349 ; 350// Allocate a weak_ptr on the heap, return a pointer to it. The user is responsible for deleting this weak_ptr.; 351// This function is meant to be used by RInterface's methods that book code for jitting.; 352// The problem it solves is that we generate code to be lazily jitted with the addresses of certain objects in them,; 353// and we need to check those objects are still alive when the generated code is finally jitted and executed.; 354// So we pass addresses to weak_ptrs allocated on the heap to the jitted code, which is then responsible for; 355// the deletion of the weak_ptr object.; 356template <typename T>; 357std::weak_ptr<T> *MakeWeakOnHeap(const std::shared_ptr<T> &shPtr); 358{; 359 return new std::weak_ptr<T>(shPtr);; 360}; 361 ; 362// Same as MakeWeakOnHeap, but create a shared_ptr that makes sure the object is definitely kept alive.; 363template <typename T>; 364std::shared_ptr<T> *MakeSharedOnHeap(const std::shared_ptr<T> &shPtr); 365{; 366 return new std::shared_ptr<T>(shPtr);; 367}; 368 ; 369bool AtLeastOneEmptyString(const std::vector<std::string_view> strings);; 370 ; 371/// Take a shared_ptr<AnyNodeType> and return a shared_ptr<RNodeBase>.; 372/// This works for RLoopManager nodes as well as filters and ranges.; 373std::shared_ptr<RNodeBase> UpcastNode(std::shared_ptr<RNodeBase> ptr);; 374 ; 375ColumnNames_t GetValidatedColumnNames(RLoopManager &lm, const unsigned int nColumns, const ColumnNames_t &columns,; 376 const RColumnRegister &validDefines, RDataSource *ds);; 377 ;",MatchSource.WIKI,doc/master/InterfaceUtils_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html
Integrability,interface,interface,"er,; 379 TTree *tree, RDataSource *ds, const std::string &context,; 380 bool vector2RVec);; 381 ; 382std::vector<bool> FindUndefinedDSColumns(const ColumnNames_t &requestedCols, const ColumnNames_t &definedDSCols);; 383 ; 384template <typename T>; 385void AddDSColumnsHelper(const std::string &colName, RLoopManager &lm, RDataSource &ds, RColumnRegister &colRegister); 386{; 387 if (colRegister.IsDefineOrAlias(colName) || !ds.HasColumn(colName) ||; 388 lm.HasDataSourceColumnReaders(colName, typeid(T))); 389 return;; 390 ; 391 const auto nSlots = lm.GetNSlots();; 392 std::vector<std::unique_ptr<RColumnReaderBase>> colReaders;; 393 colReaders.reserve(nSlots);; 394 ; 395 const auto valuePtrs = ds.GetColumnReaders<T>(colName);; 396 if (!valuePtrs.empty()) { // we are using the old GetColumnReaders mechanism in this RDataSource; 397 for (auto *ptr : valuePtrs); 398 colReaders.emplace_back(new RDSColumnReader<T>(ptr));; 399 ; 400 } else { // using the new GetColumnReaders mechanism; 401 // TODO consider changing the interface so we return all of these for all slots in one go; 402 for (auto slot = 0u; slot < lm.GetNSlots(); ++slot); 403 colReaders.emplace_back(ds.GetColumnReaders(slot, colName, typeid(T)));; 404 }; 405 ; 406 lm.AddDataSourceColumnReaders(colName, std::move(colReaders), typeid(T));; 407}; 408 ; 409/// Take list of column names that must be defined, current map of custom columns, current list of defined column names,; 410/// and return a new map of custom columns (with the new datasource columns added to it); 411template <typename... ColumnTypes>; 412void AddDSColumns(const std::vector<std::string> &requiredCols, RLoopManager &lm, RDataSource &ds,; 413 TTraits::TypeList<ColumnTypes...>, RColumnRegister &colRegister); 414{; 415 // hack to expand a template parameter pack without c++17 fold expressions.; 416 using expander = int[];; 417 int i = 0;; 418 (void)expander{(AddDSColumnsHelper<ColumnTypes>(requiredCols[i], lm, ds, colRegister), ++i)..., 0};; 419}; 420 ;",MatchSource.WIKI,doc/master/InterfaceUtils_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html
Modifiability,variab,variable-sized," &colRegister, const ColumnNames_t &branches, std::shared_ptr< RNodeBase > *upcastNodeOnHeap, bool isSingleColumn)Book the jitting of a Vary call.Definition RDFInterfaceUtils.cxx:782; ROOT::Internal::RDF::GetValidatedArgTypesstd::vector< std::string > GetValidatedArgTypes(const ColumnNames_t &colNames, const RColumnRegister &colRegister, TTree *tree, RDataSource *ds, const std::string &context, bool vector2RVec)Definition RDFInterfaceUtils.cxx:951; ROOT::Internal::RDF::CheckForDuplicateSnapshotColumnsvoid CheckForDuplicateSnapshotColumns(const ColumnNames_t &cols)Definition RDFInterfaceUtils.cxx:985; ROOT::Internal::RDF::ConvertRegexToColumnsColumnNames_t ConvertRegexToColumns(const ColumnNames_t &colNames, std::string_view columnNameRegexp, std::string_view callerName)Definition RDFInterfaceUtils.cxx:450; ROOT::Internal::RDF::AddSizeBranchesstd::pair< std::vector< std::string >, std::vector< std::string > > AddSizeBranches(const std::vector< std::string > &branches, TTree *tree, std::vector< std::string > &&colsWithoutAliases, std::vector< std::string > &&colsWithAliases)Return copies of colsWithoutAliases and colsWithAliases with size branches for variable-sized array b...Definition RDFInterfaceUtils.cxx:1001; ROOT::Internal::RDF::FindUndefinedDSColumnsstd::vector< bool > FindUndefinedDSColumns(const ColumnNames_t &requestedCols, const ColumnNames_t &definedCols)Return a bitset each element of which indicates whether the corresponding element in selectedColumns ...Definition RDFInterfaceUtils.cxx:976; ROOT::Internal::RDF::BookDefinePerSampleJitstd::shared_ptr< RJittedDefine > BookDefinePerSampleJit(std::string_view name, std::string_view expression, RLoopManager &lm, const RColumnRegister &colRegister, std::shared_ptr< RNodeBase > *upcastNodeOnHeap)Book the jitting of a DefinePerSample call.Definition RDFInterfaceUtils.cxx:750; ROOT::Internal::RDF::JitBuildActionstd::string JitBuildAction(const ColumnNames_t &cols, std::shared_ptr< RDFDetail::RNodeBase > *prevNode",MatchSource.WIKI,doc/master/InterfaceUtils_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html
Performance,multi-thread,multi-thread,"tHelperArgs> &snapHelperArgs,; 259 const unsigned int nSlots, std::shared_ptr<PrevNodeType> prevNode, ActionTags::Snapshot,; 260 const RColumnRegister &colRegister); 261{; 262 const auto &filename = snapHelperArgs->fFileName;; 263 const auto &dirname = snapHelperArgs->fDirName;; 264 const auto &treename = snapHelperArgs->fTreeName;; 265 const auto &outputColNames = snapHelperArgs->fOutputColNames;; 266 const auto &options = snapHelperArgs->fOptions;; 267 ; 268 auto sz = sizeof...(ColTypes);; 269 std::vector<bool> isDefine(sz);; 270 for (auto i = 0u; i < sz; ++i); 271 isDefine[i] = colRegister.IsDefineOrAlias(colNames[i]);; 272 ; 273 std::unique_ptr<RActionBase> actionPtr;; 274 if (!ROOT::IsImplicitMTEnabled()) {; 275 // single-thread snapshot; 276 using Helper_t = SnapshotHelper<ColTypes...>;; 277 using Action_t = RAction<Helper_t, PrevNodeType>;; 278 actionPtr.reset(; 279 new Action_t(Helper_t(filename, dirname, treename, colNames, outputColNames, options, std::move(isDefine)),; 280 colNames, prevNode, colRegister));; 281 } else {; 282 // multi-thread snapshot; 283 using Helper_t = SnapshotHelperMT<ColTypes...>;; 284 using Action_t = RAction<Helper_t, PrevNodeType>;; 285 actionPtr.reset(new Action_t(; 286 Helper_t(nSlots, filename, dirname, treename, colNames, outputColNames, options, std::move(isDefine)),; 287 colNames, prevNode, colRegister));; 288 }; 289 return actionPtr;; 290}; 291 ; 292// Book with custom helper type; 293template <typename... ColTypes, typename PrevNodeType, typename Helper_t>; 294std::unique_ptr<RActionBase>; 295BuildAction(const ColumnNames_t &bl, const std::shared_ptr<Helper_t> &h, const unsigned int /*nSlots*/,; 296 std::shared_ptr<PrevNodeType> prevNode, ActionTags::Book, const RColumnRegister &colRegister); 297{; 298 using Action_t = RAction<Helper_t, PrevNodeType, TTraits::TypeList<ColTypes...>>;; 299 return std::make_unique<Action_t>(Helper_t(std::move(*h)), bl, std::move(prevNode), colRegister);; 300}; 301 ; 302/****** end BuildAndBoo",MatchSource.WIKI,doc/master/InterfaceUtils_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html
Testability,mock,mock,", 0};; 419}; 420 ; 421// this function is meant to be called by the jitted code generated by BookFilterJit; 422template <typename F, typename PrevNode>; 423void JitFilterHelper(F &&f, const char **colsPtr, std::size_t colsSize, std::string_view name,; 424 std::weak_ptr<RJittedFilter> *wkJittedFilter, std::shared_ptr<PrevNode> *prevNodeOnHeap,; 425 RColumnRegister *colRegister) noexcept; 426{; 427 if (wkJittedFilter->expired()) {; 428 // The branch of the computation graph that needed this jitted code went out of scope between the type; 429 // jitting was booked and the time jitting actually happened. Nothing to do other than cleaning up.; 430 delete wkJittedFilter;; 431 delete colRegister;; 432 delete prevNodeOnHeap;; 433 return;; 434 }; 435 ; 436 const ColumnNames_t cols(colsPtr, colsPtr + colsSize);; 437 delete[] colsPtr;; 438 ; 439 const auto jittedFilter = wkJittedFilter->lock();; 440 ; 441 // mock Filter logic -- validity checks and Define-ition of RDataSource columns; 442 using Callable_t = std::decay_t<F>;; 443 using F_t = RFilter<Callable_t, PrevNode>;; 444 using ColTypes_t = typename TTraits::CallableTraits<Callable_t>::arg_types;; 445 constexpr auto nColumns = ColTypes_t::list_size;; 446 CheckFilter(f);; 447 ; 448 auto &lm = *jittedFilter->GetLoopManagerUnchecked(); // RLoopManager must exist at this time; 449 auto ds = lm.GetDataSource();; 450 ; 451 if (ds != nullptr); 452 AddDSColumns(cols, lm, *ds, ColTypes_t(), *colRegister);; 453 ; 454 jittedFilter->SetFilter(; 455 std::unique_ptr<RFilterBase>(new F_t(std::forward<F>(f), cols, *prevNodeOnHeap, *colRegister, name)));; 456 // colRegister points to the columns structure in the heap, created before the jitted call so that the jitter can; 457 // share data after it has lazily compiled the code. Here the data has been used and the memory can be freed.; 458 delete colRegister;; 459 delete prevNodeOnHeap;; 460 delete wkJittedFilter;; 461}; 462 ; 463namespace DefineTypes {; 464struct RDefineTag {};; 465struct ",MatchSource.WIKI,doc/master/InterfaceUtils_8hxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html
Integrability,interface,interface,24 template<class T>; 25 class IParametricFunctionMultiDimTempl;; 26 using IParametricFunctionMultiDim = IParametricFunctionMultiDimTempl<double>;; 27 template<class T>; 28 class IParametricGradFunctionMultiDimTempl;; 29 using IParametricGradFunctionMultiDim = IParametricGradFunctionMultiDimTempl<double>;; 30 ; 31 typedef IParametricFunctionOneDim IParamFunction;; 32 typedef IParametricFunctionMultiDim IParamMultiFunction;; 33 template<class T>; 34 using IParamMultiFunctionTempl = IParametricFunctionMultiDimTempl<T>;; 35 ; 36 typedef IParametricGradFunctionOneDim IParamGradFunction;; 37 typedef IParametricGradFunctionMultiDim IParamMultiGradFunction;; 38 template<class T>; 39 using IParamMultiGradFunctionTempl = IParametricGradFunctionMultiDimTempl<T>;; 40 ; 41 ; 42 } // end namespace Math; 43 ; 44} // end namespace ROOT; 45 ; 46 ; 47#endif /* ROOT_Math_IParamFunctionfwd */; IFunctionfwd.h; ROOT::Math::IParametricFunctionMultiDimTempl< double >; ROOT::Math::IParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is ...Definition IParamFunction.h:161; ROOT::Math::IParametricGradFunctionMultiDimTemplInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition ...Definition IParamFunction.h:227; ROOT::Math::IParametricGradFunctionOneDimInterface (abstract class) for parametric one-dimensional gradient functions providing in addition to...Definition IParamFunction.h:330; MathNamespace for new Math classes and functions.; ROOT::Math::IParamFunctionIParametricFunctionOneDim IParamFunctionDefinition IParamFunctionfwd.h:31; ROOT::Math::IParamGradFunctionIParametricGradFunctionOneDim IParamGradFunctionDefinition IParamFunctionfwd.h:36; ROOT::Math::IParamMultiFunctionIParametricFunctionMultiDim IParamMultiFunctionDefinition IParamFunctionfwd.h:32; ROOT::Math::IParamMultiGradFunctionIParametricGradFunctionMultiDim IParamMultiGradFunctionDefinition IParamFunctionfwd.h:37; ,MatchSource.WIKI,doc/master/IParamFunctionfwd_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/IParamFunctionfwd_8h_source.html
Testability,test,test,". ROOT: tutorials/graphs/labels1.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. labels1.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Setting alphanumeric labels in a 1-d histogram. . ; void labels1(); {; Int_t i;; const Int_t nx = 20;; const char *people[nx] = {""Jean"",""Pierre"",""Marie"",""Odile"",; ""Sebastien"",""Fons"",""Rene"",""Nicolas"",""Xavier"",""Greg"",; ""Bjarne"",""Anton"",""Otto"",""Eddy"",""Peter"",""Pasha"",; ""Philippe"",""Suzanne"",""Jeff"",""Valery""};; TCanvas *c1 = new TCanvas(""c1"",""demo bin labels"",10,10,900,500);; c1->SetGrid();; c1->SetBottomMargin(0.15);; TH1F *h = new TH1F(""h"",""test"",nx,0,nx);; h->SetFillColor(38);; for (i=0;i<5000;i++) h->Fill(gRandom->Gaus(0.5*nx,0.2*nx));; h->SetStats(0);; for (i=1;i<=nx;i++) h->GetXaxis()->SetBinLabel(i,people[i-1]);; h->Draw();; TPaveText *pt = new TPaveText(0.6,0.7,0.98,0.98,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Use the axis Context Menu LabelsOption"");; pt->AddText("" \""a\"" to sort by alphabetic order"");; pt->AddText("" \"">\"" to sort by decreasing values"");; pt->AddText("" \""<\"" to sort by increasing values"");; pt->Draw();; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrid",MatchSource.WIKI,doc/master/labels1_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/labels1_8C.html
Testability,test,test,". ROOT: tutorials/graphs/labels2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. labels2.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Setting alphanumeric labels. . ; void labels2(); {; Int_t i;; const Int_t nx = 12;; const Int_t ny = 20;; const char *month[nx] = {""January"",""February"",""March"",""April"",; ""May"",""June"",""July"",""August"",""September"",""October"",; ""November"",""December""};; const char *people[ny] = {""Jean"",""Pierre"",""Marie"",""Odile"",; ""Sebastien"",""Fons"",""Rene"",""Nicolas"",""Xavier"",""Greg"",; ""Bjarne"",""Anton"",""Otto"",""Eddy"",""Peter"",""Pasha"",; ""Philippe"",""Suzanne"",""Jeff"",""Valery""};; TCanvas *c1 = new TCanvas(""c1"",""demo bin labels"",; 10,10,800,800);; c1->SetGrid();; c1->SetLeftMargin(0.15);; c1->SetBottomMargin(0.15);; TH2F *h = new TH2F(""h"",""test"",nx,0,nx,ny,0,ny);; for (i=0;i<5000;i++) {; h->Fill(gRandom->Gaus(0.5*nx,0.2*nx),; gRandom->Gaus(0.5*ny,0.2*ny));; }; h->SetStats(0);; for (i=1;i<=nx;i++) h->GetXaxis()->SetBinLabel(i,month[i-1]);; for (i=1;i<=ny;i++) h->GetYaxis()->SetBinLabel(i,people[i-1]);; h->Draw(""text"");; ; TPaveText *pt = new TPaveText(0.6,0.85,0.98,0.98,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Use the axis Context Menu LabelsOption"");; pt->AddText("" \""a\"" to sort by alphabetic order"");; pt->AddText("" \"">\"" to sort by decreasing values"");; pt->AddText("" \""<\"" to sort by increasing values"");; pt->Draw();; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TCanvasThe Canvas class.Definition TCanvas.h:23; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TPaveTextA Pave (see TPave) with text, lines or/and",MatchSource.WIKI,doc/master/labels2_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/labels2_8C.html
Availability,error,errors,,MatchSource.WIKI,doc/master/langaus_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/langaus_8C.html
Energy Efficiency,efficient,efficient,";; ; sprintf(FunName,""Fitfcn_%s"",his->GetName());; ; TF1 *ffitold = (TF1*)gROOT->GetListOfFunctions()->FindObject(FunName);; if (ffitold) delete ffitold;; ; TF1 *ffit = new TF1(FunName,langaufun,fitrange[0],fitrange[1],4);; ffit->SetParameters(startvalues);; ffit->SetParNames(""Width"",""MP"",""Area"",""GSigma"");; ; for (i=0; i<4; i++) {; ffit->SetParLimits(i, parlimitslo[i], parlimitshi[i]);; }; ; his->Fit(FunName,""RB0""); // fit within specified range, use ParLimits, do not plot; ; ffit->GetParameters(fitparams); // obtain fit parameters; for (i=0; i<4; i++) {; fiterrors[i] = ffit->GetParError(i); // obtain fit parameter errors; }; ChiSqr[0] = ffit->GetChisquare(); // obtain chi^2; NDF[0] = ffit->GetNDF(); // obtain ndf; ; return (ffit); // return fit function; ; }; ; ; int langaupro(double *params, double &maxx, double &FWHM) {; ; // Searches for the location (x value) at the maximum of the; // Landau-Gaussian convolute and its full width at half-maximum.; //; // The search is probably not very efficient, but it's a first try.; ; double p,x,fy,fxr,fxl;; double step;; double l,lold;; int i = 0;; int MAXCALLS = 10000;; ; ; // Search for maximum; ; p = params[1] - 0.1 * params[0];; step = 0.05 * params[0];; lold = -2.0;; l = -1.0;; ; ; while ( (l != lold) && (i < MAXCALLS) ) {; i++;; ; lold = l;; x = p + step;; l = langaufun(&x,params);; ; if (l < lold); step = -step/10;; ; p += step;; }; ; if (i == MAXCALLS); return (-1);; ; maxx = x;; ; fy = l/2;; ; ; // Search for right x location of fy; ; p = maxx + params[0];; step = params[0];; lold = -2.0;; l = -1e300;; i = 0;; ; ; while ( (l != lold) && (i < MAXCALLS) ) {; i++;; ; lold = l;; x = p + step;; l = TMath::Abs(langaufun(&x,params) - fy);; ; if (l > lold); step = -step/10;; ; p += step;; }; ; if (i == MAXCALLS); return (-2);; ; fxr = x;; ; ; // Search for left x location of fy; ; p = maxx - 0.5 * params[0];; step = -params[0];; lold = -2.0;; l = -1e300;; i = 0;; ; while ( (l != lold) && (i < MAXCALLS) ) {; i++;; ; lold = l;",MatchSource.WIKI,doc/master/langaus_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/langaus_8C.html
Modifiability,extend,extends,"ted); Fitting done; Plotting results...; ; #include ""TH1.h""; #include ""TF1.h""; #include ""TROOT.h""; #include ""TStyle.h""; #include ""TMath.h""; ; double langaufun(double *x, double *par) {; ; //Fit parameters:; //par[0]=Width (scale) parameter of Landau density; //par[1]=Most Probable (MP, location) parameter of Landau density; //par[2]=Total area (integral -inf to inf, normalization constant); //par[3]=Width (sigma) of convoluted Gaussian function; //; //In the Landau distribution (represented by the CERNLIB approximation),; //the maximum is located at x=-0.22278298 with the location parameter=0.; //This shift is corrected within this function, so that the actual; //maximum is identical to the MP parameter.; ; // Numeric constants; double invsq2pi = 0.3989422804014; // (2 pi)^(-1/2); double mpshift = -0.22278298; // Landau maximum location; ; // Control constants; double np = 100.0; // number of convolution steps; double sc = 5.0; // convolution extends to +-sc Gaussian sigmas; ; // Variables; double xx;; double mpc;; double fland;; double sum = 0.0;; double xlow,xupp;; double step;; double i;; ; ; // MP shift correction; mpc = par[1] - mpshift * par[0];; ; // Range of convolution integral; xlow = x[0] - sc * par[3];; xupp = x[0] + sc * par[3];; ; step = (xupp-xlow) / np;; ; // Convolution integral of Landau and Gaussian by sum; for(i=1.0; i<=np/2; i++) {; xx = xlow + (i-.5) * step;; fland = TMath::Landau(xx,mpc,par[0]) / par[0];; sum += fland * TMath::Gaus(x[0],xx,par[3]);; ; xx = xupp - (i-.5) * step;; fland = TMath::Landau(xx,mpc,par[0]) / par[0];; sum += fland * TMath::Gaus(x[0],xx,par[3]);; }; ; return (par[2] * step * sum * invsq2pi / par[3]);; }; ; ; ; TF1 *langaufit(TH1F *his, double *fitrange, double *startvalues, double *parlimitslo, double *parlimitshi, double *fitparams, double *fiterrors, double *ChiSqr, int *NDF); {; // Once again, here are the Landau * Gaussian parameters:; // par[0]=Width (scale) parameter of Landau density; // par[1]=Most Probable (MP,",MatchSource.WIKI,doc/master/langaus_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/langaus_8C.html
Testability,test,test,". ROOT: tutorials/graphics/latex.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. latex.C File ReferenceTutorials » Graphics tutorials. Detailed Description; This macro draws 5 Latex-style formula in a canvas and prints the canvas as a Postscript file. . ; void latex() {; TCanvas *c1 = new TCanvas(""c1"",""test"",600,700);; // write formulas; TLatex l;; l.SetTextAlign(12);; l.SetTextSize(0.04);; l.DrawLatex(0.1,0.9,""1) C(x) = d #sqrt{#frac{2}{#lambdaD}}\; #int^{x}_{0}cos(#frac{#pi}{2}t^{2})dt"");; l.DrawLatex(0.1,0.7,""2) C(x) = d #sqrt{#frac{2}{#lambdaD}}\; #int^{x}cos(#frac{#pi}{2}t^{2})dt"");; l.DrawLatex(0.1,0.5,""3) R = |A|^{2} = #frac{1}{2}#left(#[]{#frac{1}{2}+\; C(V)}^{2}+#[]{#frac{1}{2}+S(V)}^{2}#right)"");; l.DrawLatex(0.1,0.3,; ""4) F(t) = #sum_{i=-#infty}^{#infty}A(i)cos#[]{#frac{i}{t+i}}"");; l.DrawLatex(0.1,0.1,""5) {}_{3}^{7}Li"");; c1->Print(""latex.ps"");; }; TCanvasThe Canvas class.Definition TCanvas.h:23; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLine::Printvoid Print(Option_t *option="""") const overrideDump this line with its attributes.Definition TLine.cxx:419; c1return c1Definition legend1.C:41; lTLine lDefinition textangle.C:4; AuthorRene Brun ; Definition in file latex.C. tutorialsgraphicslatex.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/latex_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/latex_8C.html
Availability,error,error,". ROOT: graf2d/graf/doc/macros/legend1.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions |; Variables ; legend1.C File Reference. Functions; leg AddEntry (""f1"",""Function abs(#frac{sin(x)}{x})"",""l"");  ; leg AddEntry (""gr"",""Graph with error bars"",""lep"");  ; leg AddEntry (h1,""Histogram filled with random numbers"",""f"");  ; gr Draw (""P"");  ; f1 Draw (""same"");  ; h1 Draw ();  ; h1 FillRandom (""gaus"", 30000);  ;  for (Int_t i=0;i< n;i++);  ; h1 SetFillColor (kGreen);  ; h1 SetFillStyle (3003);  ; leg SetHeader (""The Legend Title"");  ; f1 SetLineColor (kBlue);  ; gr SetLineColor (kRed);  ; gr SetLineWidth (2);  ; f1 SetLineWidth (4);  ; gr SetMarkerColor (7);  ; gr SetMarkerSize (1.3);  ; gr SetMarkerStyle (21);  ; gr SetName (""gr"");  ; gStyle SetOptStat (0);  . Variables; return c1;  ; Double_t ex [n];  ; Double_t ey [n];  ; TF1 * f1 =new TF1(""f1"",""1000*TMath::Abs(sin(x)/x)"",-10,10);  ; TGraphErrors * gr = new TGraphErrors(n,x,y,ex,ey);  ; TH1F * h1 = new TH1F(""h1"",""TLegend Example"",200,-10,10);  ;  leg = new TLegend(0.1,0.7,0.48,0.9);  ; const Int_t n = 20;  ; Double_t x [n];  ; Double_t y [n];  . Function Documentation. ◆ AddEntry() [1/3]. leg AddEntry ; (; ""f1"" ; , . ""Function abs(#frac{sin(x)}{x})"" ; , . ""l"" ;  . ). ◆ AddEntry() [2/3]. leg AddEntry ; (; ""gr"" ; , . ""Graph with error bars"" ; , . ""lep"" ;  . ). ◆ AddEntry() [3/3]. leg AddEntry ; (; h1 ; , . ""Histogram filled with random numbers"" ; , . ""f"" ;  . ). ◆ Draw() [1/3]. gr Draw ; (; ""P"" ; ). ◆ Draw() [2/3]. f1 Draw ; (; ""same"" ; ). ◆ Draw() [3/3]. h1 Draw ; (; ). ◆ FillRandom(). h1 FillRandom ; (; ""gaus"" ; , . 30000 ;  . ). ◆ for(). for ; (; ). Definition at line 18 of file legend1.C. ◆ SetFillColor(). h1 SetFillColor ; (; kGreen ; ). ◆ SetFillStyle(). h1 SetFillStyle ; (; 3003 ; ). ◆ SetHeader(). leg SetHeader ; (; ""The Legend Title"" ; ). ◆ SetLineColor() [1/2]. f1 SetLineColor ; (; kBlue ; ). ◆ SetLineColor() [2/2]. gr SetLineColor ; (; kRed ; ). ◆ SetLin",MatchSource.WIKI,doc/master/legend1_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/legend1_8C.html
Availability,error,error,"""c1"",""c1"",600,500);; 3 gStyle->SetOptStat(0);; 4 ; 5 TH1F *h1 = new TH1F(""h1"",""TLegend Example"",200,-10,10);; 6 h1->FillRandom(""gaus"",30000);; 7 h1->SetFillColor(kGreen);; 8 h1->SetFillStyle(3003);; 9 h1->Draw();; 10 ; 11 TF1 *f1=new TF1(""f1"",""1000*TMath::Abs(sin(x)/x)"",-10,10);; 12 f1->SetLineColor(kBlue);; 13 f1->SetLineWidth(4);; 14 f1->Draw(""same"");; 15 ; 16 const Int_t n = 20;; 17 Double_t x[n], y[n], ex[n], ey[n];; 18 for (Int_t i=0;i<n;i++) {; 19 x[i] = i*0.1;; 20 y[i] = 1000*sin(x[i]+0.2);; 21 x[i] = 17.8*x[i]-8.9;; 22 ex[i] = 1.0;; 23 ey[i] = 10.*i;; 24 }; 25 TGraphErrors *gr = new TGraphErrors(n,x,y,ex,ey);; 26 gr->SetName(""gr"");; 27 gr->SetLineColor(kRed);; 28 gr->SetLineWidth(2);; 29 gr->SetMarkerStyle(21);; 30 gr->SetMarkerSize(1.3);; 31 gr->SetMarkerColor(7);; 32 gr->Draw(""P"");; 33 ; 34 leg = new TLegend(0.1,0.7,0.48,0.9);; 35 leg->SetHeader(""The Legend Title"");; 36 leg->AddEntry(h1,""Histogram filled with random numbers"",""f"");; 37 leg->AddEntry(""f1"",""Function abs(#frac{sin(x)}{x})"",""l"");; 38 leg->AddEntry(""gr"",""Graph with error bars"",""lep"");; 39 leg->Draw();; 40 ; 41 return c1;; 42}; 43 ; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t ",MatchSource.WIKI,doc/master/legend1_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/legend1_8C_source.html
Energy Efficiency,green,green,". ROOT: tutorials/hist/legendautoplaced.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. legendautoplaced.C File ReferenceTutorials » Histograms tutorials. Detailed Description; The legend can be placed automatically in the current pad in an empty space found at painting time. ; The following example illustrate this facility. Only the width and height of the legend is specified in percentage of the pad size. ; void legendautoplaced(); {; auto c4 = new TCanvas(""c"", ""c"", 600,500);; auto hpx = new TH1D(""hpx"",""This is the hpx distribution"",100,-4.,4.);; hpx->FillRandom(""gaus"", 50000);; hpx->Draw(""E"");; hpx->GetYaxis()->SetTitle(""Y Axis title"");; hpx->GetYaxis()->SetTitleOffset(1.3); hpx->GetYaxis()->CenterTitle(true);; hpx->GetXaxis()->SetTitle(""X Axis title"");; hpx->GetXaxis()->CenterTitle(true);; ; auto h1 = new TH1D(""h1"",""A green histogram"",100,-2.,2.);; h1->FillRandom(""gaus"", 10000);; h1->SetLineColor(kGreen);; h1->Draw(""same"");; ; auto g = new TGraph();; g->SetPoint(0, -3.5, 100 );; g->SetPoint(1, -3.0, 300 );; g->SetPoint(2, -2.0, 1000 );; g->SetPoint(3, 1.0, 800 );; g->SetPoint(4, 0.0, 200 );; g->SetPoint(5, 3.0, 200 );; g->SetPoint(6, 3.0, 700 );; g->Draw(""L"");; g->SetTitle(""This is a TGraph"");; g->SetLineColor(kRed);; g->SetFillColor(0);; ; // TPad::BuildLegend() default placement values are such that they trigger; // the automatic placement.; c4->BuildLegend();; }; g#define g(i)Definition RSha256.hxx:105; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fil",MatchSource.WIKI,doc/master/legendautoplaced_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/legendautoplaced_8C.html
Availability,error,error,"lt = fitter.Result();; ; std::cout << ""Total final distance square "" << result.MinFcnValue() << std::endl;; result.Print(std::cout);; ; ; gr->Draw(""p0"");; ; // get fit parameters; const double * parFit = result.GetParams();; ; // draw the fitted line; int n = 1000;; double t0 = 0;; double dt = 10;; TPolyLine3D *l = new TPolyLine3D(n);; for (int i = 0; i <n;++i) {; double t = t0+ dt*i/n;; double x,y,z;; line(t,parFit,x,y,z);; l->SetPoint(i,x,y,z);; }; l->SetLineColor(kRed);; l->Draw(""same"");; ; // draw original line; TPolyLine3D *l0 = new TPolyLine3D(n);; for (int i = 0; i <n;++i) {; double t = t0+ dt*i/n;; double x,y,z;; line(t,p0,x,y,z);; l0->SetPoint(i,x,y,z);; }; l0->SetLineColor(kBlue);; l0->Draw(""same"");; return 0;; }; Fitter.h; Functor.h; d#define d(i)Definition RSha256.hxx:102; g#define g(i)Definition RSha256.hxx:105; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TCanvas.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TF2.h; N#define N; CrossTGLVector3 Cross(const TGLVector3 &v1, const TGLVector3 &v2)Definition TGLUtil.h:323; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; TGraph2D.h; TH1.h; TMath.h; TPolyLine3D.h; operator()TRObject operator()(const T1 &t1) constDefinition TRFunctionImport__oprtr.h:14; TRandom2.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; Vector3D.h; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings",MatchSource.WIKI,doc/master/line3Dfit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/line3Dfit_8C.html
Deployability,configurat,configuration," TRandom2.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; Vector3D.h; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::Fitter::Resultconst FitResult & Result() constget fit resultDefinition Fitter.h:394; ROOT::Fit::Fitter::FitFCNbool FitFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Fit using the a generic FCN function as a C++ callable object implementing double () (const double *)...Definition Fitter.h:649; ROOT::Fit::Fitter::Configconst FitConfig & Config() constaccess to the fit configuration (const method)Definition Fitter.h:422; ROOT::Fit::Fitter::SetFCNbool SetFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Set a generic FCN function as a C++ callable object implementing double () (const double *) Note that...Definition Fitter.h:656; ROOT::Fit::ParameterSettings::SetStepSizevoid SetStepSize(double err)set the step sizeDefinition ParameterSettings.h:122; ROOT::Math::DisplacementVector3D< Cartesian3D< double >, DefaultCoordinateSystemTag >; ROOT::Math::FunctorDocumentation for class Functor class.Definition Functor.h:47; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each.Definition TGraph2D.h:41; TGraph2D::GetYDouble_t * GetY() constDefinition TGraph2D.h:124; TGraph2D::GetXDouble_t * GetX() constDefinition TGraph2D.h:123; TGraph2D::GetNI",MatchSource.WIKI,doc/master/line3Dfit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/line3Dfit_8C.html
Modifiability,config,configuration," TRandom2.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; Vector3D.h; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::Fitter::Resultconst FitResult & Result() constget fit resultDefinition Fitter.h:394; ROOT::Fit::Fitter::FitFCNbool FitFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Fit using the a generic FCN function as a C++ callable object implementing double () (const double *)...Definition Fitter.h:649; ROOT::Fit::Fitter::Configconst FitConfig & Config() constaccess to the fit configuration (const method)Definition Fitter.h:422; ROOT::Fit::Fitter::SetFCNbool SetFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Set a generic FCN function as a C++ callable object implementing double () (const double *) Note that...Definition Fitter.h:656; ROOT::Fit::ParameterSettings::SetStepSizevoid SetStepSize(double err)set the step sizeDefinition ParameterSettings.h:122; ROOT::Math::DisplacementVector3D< Cartesian3D< double >, DefaultCoordinateSystemTag >; ROOT::Math::FunctorDocumentation for class Functor class.Definition Functor.h:47; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each.Definition TGraph2D.h:41; TGraph2D::GetYDouble_t * GetY() constDefinition TGraph2D.h:124; TGraph2D::GetXDouble_t * GetX() constDefinition TGraph2D.h:123; TGraph2D::GetNI",MatchSource.WIKI,doc/master/line3Dfit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/line3Dfit_8C.html
Performance,perform,performing," GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; TGraph2D.h; TH1.h; TMath.h; TPolyLine3D.h; operator()TRObject operator()(const T1 &t1) constDefinition TRFunctionImport__oprtr.h:14; TRandom2.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; Vector3D.h; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::Fitter::Resultconst FitResult & Result() constget fit resultDefinition Fitter.h:394; ROOT::Fit::Fitter::FitFCNbool FitFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Fit using the a generic FCN function as a C++ callable object implementing double () (const double *)...Definition Fitter.h:649; ROOT::Fit::Fitter::Configconst FitConfig & Config() constaccess to the fit configuration (const method)Definition Fitter.h:422; ROOT::Fit::Fitter::SetFCNbool SetFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Set a generic FCN function as a C++ callable object implementing double () (const double *) Note that...Definition Fitter.h:656; ROOT::Fit::ParameterSettings::SetStepSizevoid SetStepSize(double err)set the step sizeDefinition ParameterSettings.h:122; ROOT::Math::DisplacementVector3D< Cartesian3D< doubl",MatchSource.WIKI,doc/master/line3Dfit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/line3Dfit_8C.html
Testability,assert,assert," // can choose z0 = 0 if line not parallel to x-y plane and z1 = 1;; x = p[0] + p[1]*t;; y = p[2] + p[3]*t;; z = t;; }; ; ; bool first = true;; ; // function Object to be minimized; struct SumDistance2 {; // the TGraph is a data member of the object; TGraph2D *fGraph;; ; SumDistance2(TGraph2D *g) : fGraph(g) {}; ; // calculate distance line-point; double distance2(double x,double y,double z, const double *p) {; // distance line point is D= | (xp-x0) cross ux |; // where ux is direction of line and x0 is a point in the line (like t = 0); XYZVector xp(x,y,z);; XYZVector x0(p[0], p[2], 0. );; XYZVector x1(p[0] + p[1], p[2] + p[3], 1. );; XYZVector u = (x1-x0).Unit();; double d2 = ((xp-x0).Cross(u)).Mag2();; return d2;; }; ; // implementation of the function to be minimized; double operator() (const double *par) {; assert(fGraph != nullptr);; double * x = fGraph->GetX();; double * y = fGraph->GetY();; double * z = fGraph->GetZ();; int npoints = fGraph->GetN();; double sum = 0;; for (int i = 0; i < npoints; ++i) {; double d = distance2(x[i],y[i],z[i],par);; sum += d;; }; if (first) {; std::cout << ""Total Initial distance square = "" << sum << std::endl;; }; first = false;; return sum;; }; ; };; ; int line3Dfit(); {; gStyle->SetOptStat(0);; gStyle->SetOptFit();; ; ; //double e = 0.1;; int nd = 10000;; ; ; // double xmin = 0; double ymin = 0;; // double xmax = 10; double ymax = 10;; ; TGraph2D * gr = new TGraph2D();; ; // Fill the 2D graph; double p0[4] = {10,20,1,2};; ; // generate graph with the 3d points; for (int N=0; N<nd; N++) {; double x,y,z = 0;; // Generate a random number; double t = gRandom->Uniform(0,10);; line(t,p0,x,y,z);; double err = 1;; // do a Gaussian smearing around the points in all coordinates; x += gRandom->Gaus(0,err);; y += gRandom->Gaus(0,err);; z += gRandom->Gaus(0,err);; gr->SetPoint(N,x,y,z);; //dt->SetPointError(N,0,0,err);; }; // fit the graph now; ; ROOT::Fit::Fitter fitter;; ; ; // make the functor objet; SumDistance2 sdist(gr);; ROOT::Math:",MatchSource.WIKI,doc/master/line3Dfit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/line3Dfit_8C.html
Availability,error,errors,"nt NFitPoints() const { return fNEffPoints; }; 119 ; 120 /// i-th likelihood contribution and its gradient; 121 virtual double DataElement(const double * x, unsigned int i, double * g, double * h = nullptr, bool fullHessian = false) const {; 122 if (i==0) this->UpdateNCalls();; 123 return FitUtil::Evaluate<T>::EvalPdf(BaseFCN::ModelFunction(), BaseFCN::Data(), x, i, g, h, BaseFCN::IsAGradFCN(), fullHessian);; 124 }; 125 ; 126 // need to be virtual to be instantiated; 127 virtual void Gradient(const double *x, double *g) const {; 128 // evaluate the chi2 gradient; 129 FitUtil::Evaluate<typename BaseFCN::T>::EvalLogLGradient(BaseFCN::ModelFunction(), BaseFCN::Data(), x, g,; 130 fNEffPoints, fExecutionPolicy);; 131 }; 132 ; 133 /// get type of fit method function; 134 virtual typename BaseObjFunction::Type_t Type() const { return BaseObjFunction::kLogLikelihood; }; 135 ; 136 ; 137 // Use sum of the weight squared in evaluating the likelihood; 138 // (this is needed for calculating the errors); 139 void UseSumOfWeightSquare(bool on = true) {; 140 if (fWeight == 0) return; // do nothing if it was not weighted; 141 if (on) fWeight = 2;; 142 else fWeight = 1;; 143 }; 144 ; 145 ; 146 ; 147protected:; 148 ; 149 ; 150private:; 151 ; 152 /**; 153 Evaluation of the function (required by interface); 154 */; 155 virtual double DoEval (const double * x) const {; 156 this->UpdateNCalls();; 157 return FitUtil::Evaluate<T>::EvalLogL(BaseFCN::ModelFunction(), BaseFCN::Data(), x, fWeight, fIsExtended, fNEffPoints, fExecutionPolicy);; 158 }; 159 ; 160 // for derivatives; 161 virtual double DoDerivative(const double * x, unsigned int icoord ) const {; 162 Gradient(x, &fGrad[0]);; 163 return fGrad[icoord];; 164 }; 165 ; 166 ; 167 //data member; 168 bool fIsExtended; ///< flag for indicating if likelihood is extended; 169 int fWeight; ///< flag to indicate if needs to evaluate using weight or weight squared (default weight = 0); 170 ; 171 ; 172 mutable unsigned int fNEffPoints; ///< number ",MatchSource.WIKI,doc/master/LogLikelihoodFCN_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html
Integrability,interface,interface,"aluate<T>::EvalPdf(BaseFCN::ModelFunction(), BaseFCN::Data(), x, i, g, h, BaseFCN::IsAGradFCN(), fullHessian);; 124 }; 125 ; 126 // need to be virtual to be instantiated; 127 virtual void Gradient(const double *x, double *g) const {; 128 // evaluate the chi2 gradient; 129 FitUtil::Evaluate<typename BaseFCN::T>::EvalLogLGradient(BaseFCN::ModelFunction(), BaseFCN::Data(), x, g,; 130 fNEffPoints, fExecutionPolicy);; 131 }; 132 ; 133 /// get type of fit method function; 134 virtual typename BaseObjFunction::Type_t Type() const { return BaseObjFunction::kLogLikelihood; }; 135 ; 136 ; 137 // Use sum of the weight squared in evaluating the likelihood; 138 // (this is needed for calculating the errors); 139 void UseSumOfWeightSquare(bool on = true) {; 140 if (fWeight == 0) return; // do nothing if it was not weighted; 141 if (on) fWeight = 2;; 142 else fWeight = 1;; 143 }; 144 ; 145 ; 146 ; 147protected:; 148 ; 149 ; 150private:; 151 ; 152 /**; 153 Evaluation of the function (required by interface); 154 */; 155 virtual double DoEval (const double * x) const {; 156 this->UpdateNCalls();; 157 return FitUtil::Evaluate<T>::EvalLogL(BaseFCN::ModelFunction(), BaseFCN::Data(), x, fWeight, fIsExtended, fNEffPoints, fExecutionPolicy);; 158 }; 159 ; 160 // for derivatives; 161 virtual double DoDerivative(const double * x, unsigned int icoord ) const {; 162 Gradient(x, &fGrad[0]);; 163 return fGrad[icoord];; 164 }; 165 ; 166 ; 167 //data member; 168 bool fIsExtended; ///< flag for indicating if likelihood is extended; 169 int fWeight; ///< flag to indicate if needs to evaluate using weight or weight squared (default weight = 0); 170 ; 171 ; 172 mutable unsigned int fNEffPoints; ///< number of effective points used in the fit; 173 ; 174 mutable std::vector<double> fGrad; ///< for derivatives; 175 ; 176 ::ROOT::EExecutionPolicy fExecutionPolicy; ///< Execution policy; 177};; 178 // define useful typedef's; 179 // using LogLikelihoodFunction_v = LogLikelihoodFCN<ROOT::Math::IMultiGenFunc",MatchSource.WIKI,doc/master/LogLikelihoodFCN_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html
Modifiability,extend,extended,"de ""Fit/UnBinData.h""; 20#include ""Math/IParamFunction.h""; 21 ; 22#include <memory>; 23#include <vector>; 24 ; 25namespace ROOT {; 26 ; 27 namespace Fit {; 28 ; 29 ; 30//___________________________________________________________________________________; 31/**; 32 LogLikelihoodFCN class; 33 for likelihood fits; 34 ; 35 it is template to distinguish gradient and non-gradient case; 36 ; 37 @ingroup FitMethodFunc; 38*/; 39template<class DerivFunType,class ModelFunType = ROOT::Math::IParamMultiFunction>; 40class LogLikelihoodFCN : public BasicFCN<DerivFunType,ModelFunType,UnBinData> {; 41 ; 42public:; 43 ; 44 typedef typename ModelFunType::BackendType T;; 45 typedef BasicFCN<DerivFunType,ModelFunType,UnBinData> BaseFCN;; 46 ; 47 typedef ::ROOT::Math::BasicFitMethodFunction<DerivFunType> BaseObjFunction;; 48 typedef typename BaseObjFunction::BaseFunction BaseFunction;; 49 ; 50 typedef ::ROOT::Math::IParamMultiFunctionTempl<T> IModelFunction;; 51 typedef typename BaseObjFunction::Type_t Type_t;; 52 ; 53 ; 54 /**; 55 Constructor from unbin data set and model function (pdf); 56 */; 57 LogLikelihoodFCN (const std::shared_ptr<UnBinData> & data, const std::shared_ptr<IModelFunction> & func, int weight = 0, bool extended = false, const ::ROOT::EExecutionPolicy &executionPolicy = ::ROOT::EExecutionPolicy::kSequential) :; 58 BaseFCN( data, func),; 59 fIsExtended(extended),; 60 fWeight(weight),; 61 fNEffPoints(0),; 62 fGrad ( std::vector<double> ( func->NPar() ) ),; 63 fExecutionPolicy(executionPolicy); 64 {}; 65 ; 66 /**; 67 Constructor from unbin data set and model function (pdf) for object managed by users; 68 */; 69 LogLikelihoodFCN (const UnBinData & data, const IModelFunction & func, int weight = 0, bool extended = false, const ::ROOT::EExecutionPolicy &executionPolicy = ::ROOT::EExecutionPolicy::kSequential) :; 70 BaseFCN(std::make_shared<UnBinData>(data), std::shared_ptr<IModelFunction>(dynamic_cast<IModelFunction*>(func.Clone() ) ) ),; 71 fIsExtended(extended),; 72 fWeight(",MatchSource.WIKI,doc/master/LogLikelihoodFCN_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html
Testability,log,logscales,". ROOT: tutorials/hist/logscales.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. logscales.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Draw parametric functions with log scales. . ; void logscales() {; TCanvas *c1 = new TCanvas(""c1"", ""Various options on LOG scales plots"",0,0,700,900);; c1->SetFillColor(30);; ; TPad *pad1 = new TPad(""pad1"",""pad1"",0.03,0.62,0.50,0.92,32);; TPad *pad2 = new TPad(""pad2"",""pad2"",0.51,0.62,0.98,0.92,33);; TPad *pad3 = new TPad(""pad3"",""pad3"",0.03,0.02,0.97,0.535,38);; pad1->Draw(); pad2->Draw(); pad3->Draw();; ; TPaveLabel *title = new TPaveLabel(0.1,0.94,0.9,0.98, ""Various options on LOG scales plots"");; title->SetFillColor(16);; title->SetTextFont(42);; title->Draw();; ; TPaveText *pave = new TPaveText(0.1,0.55,0.9,0.61);; pave->SetFillColor(42);; pave->SetTextAlign(12);; pave->SetTextFont(42);; pave->AddText(""When more Log labels are requested, the overlapping labels are removed"");; pave->Draw();; ; pad1->cd();; pad1->SetLogy();; pad1->SetGridy();; TF1 *f1 = new TF1(""f1"",""x*sin(x)*exp(-0.1*x)+15"",-10.,10.);; TF1 *f2 = new TF1(""f2"",""(sin(x)+cos(x))**5+15"",-10.,10.);; TF1 *f3 = new TF1(""f3"",""(sin(x)/(x)-x*cos(x))+15"",-10.,10.);; f1->SetLineWidth(1); f1->SetLineColor(2);; f2->SetLineWidth(1); f2->SetLineColor(3);; f3->SetLineWidth(1); f3->SetLineColor(4);; f1->Draw();; f2->Draw(""same"");; f3->Draw(""same"");; f1->GetYaxis()->SetMoreLogLabels();; TPaveText *pave1 = new TPaveText(-6,2,6,6);; pave1->SetFillColor(42);; pave1->SetTextAlign(12);; pave1->SetTextFont(42);; pave1->AddText(""Log scale along Y axis."");; pave1->AddText(""More Log labels requested."");; pave1->Draw();; ; pad2->cd();; double x[10] = { 200, 300, 400, 500, 600, 650, 700, 710, 900,1000 };; double y[10] = { 200, 1000, 900, 400, 500, 250, 800, 150, 201, 220 };; TGraph *g_2 = new TGraph(10,x,y);; g_2->Draw(""AL*"");; g_2->SetMarkerColor(2);; g_2->GetYaxis()->SetMoreLogLabels();; g_2->GetYaxis()->SetNoExponen",MatchSource.WIKI,doc/master/logscales_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/logscales_8C.html
Availability,error,error," = 1.0;; 99}; 100 ; 101LorentzRotation::LorentzRotation(RotationY const & r) {; 102 // construct from RotationY; 103 Scalar s = r.SinAngle();; 104 Scalar c = r.CosAngle();; 105 fM[kXX] = c ; fM[kXY] = 0.0; fM[kXZ] = s ; fM[kXT] = 0.0;; 106 fM[kYX] = 0.0; fM[kYY] = 1.0; fM[kYZ] = 0.0; fM[kYT] = 0.0;; 107 fM[kZX] = -s ; fM[kZY] = 0.0; fM[kZZ] = c ; fM[kZT] = 0.0;; 108 fM[kTX] = 0.0; fM[kTY] = 0.0; fM[kTZ] = 0.0; fM[kTT] = 1.0;; 109}; 110 ; 111LorentzRotation::LorentzRotation(RotationZ const & r) {; 112 // construct from RotationX; 113 Scalar s = r.SinAngle();; 114 Scalar c = r.CosAngle();; 115 fM[kXX] = c ; fM[kXY] = -s ; fM[kXZ] = 0.0; fM[kXT] = 0.0;; 116 fM[kYX] = s ; fM[kYY] = c ; fM[kYZ] = 0.0; fM[kYT] = 0.0;; 117 fM[kZX] = 0.0; fM[kZY] = 0.0; fM[kZZ] = 1.0; fM[kZT] = 0.0;; 118 fM[kTX] = 0.0; fM[kTY] = 0.0; fM[kTZ] = 0.0; fM[kTT] = 1.0;; 119}; 120 ; 121void; 122LorentzRotation::Rectify() {; 123 // Assuming the representation of this is close to a true Lorentz Rotation,; 124 // but may have drifted due to round-off error from many operations,; 125 // this forms an ""exact"" orthosymplectic matrix for the Lorentz Rotation; 126 // again.; 127 ; 128 typedef LorentzVector< PxPyPzE4D<Scalar> > FourVector;; 129 if (fM[kTT] <= 0) {; 130 GenVector::Throw (; 131 ""LorentzRotation:Rectify(): Non-positive TT component - cannot rectify"");; 132 return;; 133 }; 134 FourVector t ( fM[kTX], fM[kTY], fM[kTZ], fM[kTT] );; 135 Scalar m2 = t.M2();; 136 if ( m2 <= 0 ) {; 137 GenVector::Throw (; 138 ""LorentzRotation:Rectify(): Non-timelike time row - cannot rectify"");; 139 return;; 140 }; 141 t /= std::sqrt(m2);; 142 FourVector z ( fM[kZX], fM[kZY], fM[kZZ], fM[kZT] );; 143 z = z - z.Dot(t)*t;; 144 m2 = z.M2();; 145 if ( m2 >= 0 ) {; 146 GenVector::Throw (; 147 ""LorentzRotation:Rectify(): Non-spacelike Z row projection - ""; 148 ""cannot rectify"");; 149 return;; 150 }; 151 z /= std::sqrt(-m2);; 152 FourVector y ( fM[kYX], fM[kYY], fM[kYZ], fM[kYT] );; 153 y = y - y.Dot(t)*t - y.Dot(z)*z;; 15",MatchSource.WIKI,doc/master/LorentzRotation_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/LorentzRotation_8cxx_source.html
Availability,error,errors,".h; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TVirtualPad.h; gPad#define gPadDefinition TVirtualPad.h:308; TAxis::GetBinCentervirtual Double_t GetBinCenter(Int_t bin) constReturn center of bin.Definition TAxis.cxx:478; TAxis::GetXmaxDouble_t GetXmax() constDefinition TAxis.h:140; TAxis::GetXminDouble_t GetXmin() constDefinition TAxis.h:139; TCanvasThe Canvas class.Definition TCanvas.h:23; TComplexDefinition TComplex.h:29; TComplex::RhoDouble_t Rho() constDefinition TComplex.h:48; TH1::GetNbinsYvirtual Int_t GetNbinsY() constDefinition TH1.h:298; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::GetNbinsXvirtual Int_t GetNbinsX() constDefinition TH1.h:297; TH1::GetYaxisTAxis * GetYaxis()Definition TH1.h:325; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::SetContourvirtual void SetContour(Int_t nlevels, const Double_t *levels=nullptr)Set the number and values of contour levels.Definition TH1.cxx:8483; TH1::SetBinsvirtual void SetBins(Int_t nx, Double_t xmin, Double_t xmax)Redefine x axis parameters.Definition TH1.cxx:8767; TH1::SetStatsvirtual void SetStats(Bool_t stats=kTRUE)Set statistics option on/off.Definition TH1.cxx:8990; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH2F::Resetvoid Reset(Option_t *option="""") overrideReset this histogram: contents, errors, etc.Definition TH2.cxx:3972; TH2::FillInt_t Fill(Double_t) overrideInvalid Fill method.Definition TH2.cxx:393; TStyle::SetPadGridXvoid SetPadGridX(Bool_t gridx)Definition TStyle.h:362; TStyle::SetPadGridYvoid SetPadGridY(Bool_t gridy)Definition TStyle.h:363; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; AuthorLuigi Bardelli barde.nosp@m.lli@.nosp@m.fi.in.nosp@m.fn.i.nosp@m.t ; Definition in file mandelbrot.C. tutorialsgraphicsmandelbrot.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/mandelbrot_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/mandelbrot_8C.html
Energy Efficiency,allocate,allocate,"rot set. ; Pressing the keys 'z' and 'u' will zoom and unzoom the picture near the mouse location, 'r' will reset to the default view.; Try it (in compiled mode!) with: root mandelbrot.C+. Details; when a mouse event occurs the myexec() function is called (by using AddExec). Depending on the pressed key, the mygenerate() function is called, with the proper arguments. Note the last_x and last_y variables that are used in myexec() to store the last pointer coordinates (px is not a pointer position in kKeyPress events).; ; #include <TStyle.h>; #include <TROOT.h>; #include <TH2.h>; #include <TComplex.h>; #include <TVirtualPad.h>; #include <TCanvas.h>; ; TH2F *last_histo = nullptr;; ; void mygenerate(double factor, double cen_x, double cen_y); {; printf(""Regenerating...\n"");; // resize histo:; if(factor>0); {; double dx=last_histo->GetXaxis()->GetXmax()-last_histo->GetXaxis()->GetXmin();; double dy=last_histo->GetYaxis()->GetXmax()-last_histo->GetYaxis()->GetXmin();; last_histo->SetBins(; last_histo->GetNbinsX(),; cen_x-factor*dx/2,; cen_x+factor*dx/2,; last_histo->GetNbinsY(),; cen_y-factor*dy/2,; cen_y+factor*dy/2; );; last_histo->Reset();; }; else; {; if(last_histo) delete last_histo;; // allocate first view...; last_histo = new TH2F(""h2"",; ""Mandelbrot [move mouse and press z to zoom, u to unzoom, r to reset]"",; 200,-2,2,200,-2,2);; last_histo->SetStats(false);; }; const int max_iter=50;; for(int bx=1;bx<=last_histo->GetNbinsX();bx++); for(int by=1;by<=last_histo->GetNbinsY();by++); {; double x=last_histo->GetXaxis()->GetBinCenter(bx);; double y=last_histo->GetYaxis()->GetBinCenter(by);; TComplex point( x,y);; TComplex z=point;; int iter=0;; while (z.Rho()<2){; z=z*z+point;; last_histo->Fill(x,y);; iter++;; if(iter>max_iter) break;; }; }; last_histo->SetContour(99);; last_histo->Draw(""colz"");; gPad->Modified();; gPad->Update();; printf(""Done.\n"");; }; ; void myexec(); {; // get event information; int event = gPad->GetEvent();; int px = gPad->GetEventX();; int py = gPad",MatchSource.WIKI,doc/master/mandelbrot_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/mandelbrot_8C.html
Modifiability,variab,variables,". ROOT: tutorials/graphics/mandelbrot.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. mandelbrot.C File ReferenceTutorials » Graphics tutorials. Detailed Description; Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set. ; Pressing the keys 'z' and 'u' will zoom and unzoom the picture near the mouse location, 'r' will reset to the default view.; Try it (in compiled mode!) with: root mandelbrot.C+. Details; when a mouse event occurs the myexec() function is called (by using AddExec). Depending on the pressed key, the mygenerate() function is called, with the proper arguments. Note the last_x and last_y variables that are used in myexec() to store the last pointer coordinates (px is not a pointer position in kKeyPress events).; ; #include <TStyle.h>; #include <TROOT.h>; #include <TH2.h>; #include <TComplex.h>; #include <TVirtualPad.h>; #include <TCanvas.h>; ; TH2F *last_histo = nullptr;; ; void mygenerate(double factor, double cen_x, double cen_y); {; printf(""Regenerating...\n"");; // resize histo:; if(factor>0); {; double dx=last_histo->GetXaxis()->GetXmax()-last_histo->GetXaxis()->GetXmin();; double dy=last_histo->GetYaxis()->GetXmax()-last_histo->GetYaxis()->GetXmin();; last_histo->SetBins(; last_histo->GetNbinsX(),; cen_x-factor*dx/2,; cen_x+factor*dx/2,; last_histo->GetNbinsY(),; cen_y-factor*dy/2,; cen_y+factor*dy/2; );; last_histo->Reset();; }; else; {; if(last_histo) delete last_histo;; // allocate first view...; last_histo = new TH2F(""h2"",; ""Mandelbrot [move mouse and press z to zoom, u to unzoom, r to reset]"",; 200,-2,2,200,-2,2);; last_histo->SetStats(false);; }; const int max_iter=50;; for(int bx=1;bx<=last_histo->GetNbinsX();bx++); for(int by=1;by<=last_histo->GetNbinsY();by++); {; double x=last_histo->GetXaxis()->GetBinCenter(bx);; double y=last_histo->GetYaxis()->GetBinCenter(by);; TComplex point( x,y);; TComplex z=point;; int iter=0;; while (z.Rho()<2){; z=z*z+point;; last_histo-",MatchSource.WIKI,doc/master/mandelbrot_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/mandelbrot_8C.html
Availability,avail,available,". ROOT: tutorials/graphics/mass_spectrum.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. mass_spectrum.C File ReferenceTutorials » Graphics tutorials. Detailed Description; This macro makes use of some basic graphics primitives such as line, arrow and text. ; It has been written using the TCanvas ToolBar to produce a first draft and was then modified for fine adjustments. Note also the use of C functions. They allow to simplify the macro reading and editing by avoiding code repetition or defining some graphics attributes in one single place. This technique to generate drawings may appear not very user friendly compare to all the ""wysiwyg"" graphics editors available. In some cases it can be more powerful than a GUI interface because it allows to generate very precise drawing and using computation to generate them. ; void hline (Double_t x, Double_t y); {; Double_t dx = 0.1;; TLine *l = new TLine(x,y,x+dx,y);; l->Draw();; l->SetLineWidth(4);; }; ; void DrawArrow (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t ls); {; TArrow *arr = new TArrow(x1,y1,x2,y2,0.025,""|>"");; arr->SetFillColor(1);; arr->SetFillStyle(1001);; arr->SetLineStyle(ls);; arr->SetAngle(19);; arr->Draw();; }; ; void mass_spectrum(); {; TCanvas *C = new TCanvas(""C"",""C"",800,500);; ; hline (0.10,0.25);; hline (0.10,0.80);; hline (0.30,0.90);; hline (0.30,0.35);; hline (0.45,0.60);; hline (0.58,0.68);; hline (0.73,0.70);; hline (0.89,0.75);; ; DrawArrow(0.32, 0.90, 0.32, 0.35, 1);; DrawArrow(0.34, 0.90, 0.34, 0.35, 1);; DrawArrow(0.36, 0.90, 0.36, 0.60, 1);; DrawArrow(0.38, 0.90, 0.38, 0.70, 1);; ; DrawArrow(0.30, 0.90, 0.18, 0.25, 1);; DrawArrow(0.30, 0.35, 0.19, 0.25, 1);; DrawArrow(0.40, 0.90, 0.47, 0.61, 1);; ; DrawArrow(0.15, 0.25, 0.15, 0.19, 1);; DrawArrow(0.15, 0.80, 0.15, 0.74, 1);; ; DrawArrow(0.50, 0.60, 0.50, 0.54, 1);; DrawArrow(0.60, 0.68, 0.60, 0.62, 1);; DrawArrow(0.94, 0.75, 0.94, 0.69, 1);; ; DrawArrow(0.32, 0.35, 0.32, 0.19, 1)",MatchSource.WIKI,doc/master/mass__spectrum_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/mass__spectrum_8C.html
Energy Efficiency,power,powerful,". ROOT: tutorials/graphics/mass_spectrum.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. mass_spectrum.C File ReferenceTutorials » Graphics tutorials. Detailed Description; This macro makes use of some basic graphics primitives such as line, arrow and text. ; It has been written using the TCanvas ToolBar to produce a first draft and was then modified for fine adjustments. Note also the use of C functions. They allow to simplify the macro reading and editing by avoiding code repetition or defining some graphics attributes in one single place. This technique to generate drawings may appear not very user friendly compare to all the ""wysiwyg"" graphics editors available. In some cases it can be more powerful than a GUI interface because it allows to generate very precise drawing and using computation to generate them. ; void hline (Double_t x, Double_t y); {; Double_t dx = 0.1;; TLine *l = new TLine(x,y,x+dx,y);; l->Draw();; l->SetLineWidth(4);; }; ; void DrawArrow (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t ls); {; TArrow *arr = new TArrow(x1,y1,x2,y2,0.025,""|>"");; arr->SetFillColor(1);; arr->SetFillStyle(1001);; arr->SetLineStyle(ls);; arr->SetAngle(19);; arr->Draw();; }; ; void mass_spectrum(); {; TCanvas *C = new TCanvas(""C"",""C"",800,500);; ; hline (0.10,0.25);; hline (0.10,0.80);; hline (0.30,0.90);; hline (0.30,0.35);; hline (0.45,0.60);; hline (0.58,0.68);; hline (0.73,0.70);; hline (0.89,0.75);; ; DrawArrow(0.32, 0.90, 0.32, 0.35, 1);; DrawArrow(0.34, 0.90, 0.34, 0.35, 1);; DrawArrow(0.36, 0.90, 0.36, 0.60, 1);; DrawArrow(0.38, 0.90, 0.38, 0.70, 1);; ; DrawArrow(0.30, 0.90, 0.18, 0.25, 1);; DrawArrow(0.30, 0.35, 0.19, 0.25, 1);; DrawArrow(0.40, 0.90, 0.47, 0.61, 1);; ; DrawArrow(0.15, 0.25, 0.15, 0.19, 1);; DrawArrow(0.15, 0.80, 0.15, 0.74, 1);; ; DrawArrow(0.50, 0.60, 0.50, 0.54, 1);; DrawArrow(0.60, 0.68, 0.60, 0.62, 1);; DrawArrow(0.94, 0.75, 0.94, 0.69, 1);; ; DrawArrow(0.32, 0.35, 0.32, 0.19, 1)",MatchSource.WIKI,doc/master/mass__spectrum_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/mass__spectrum_8C.html
Integrability,interface,interface,". ROOT: tutorials/graphics/mass_spectrum.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. mass_spectrum.C File ReferenceTutorials » Graphics tutorials. Detailed Description; This macro makes use of some basic graphics primitives such as line, arrow and text. ; It has been written using the TCanvas ToolBar to produce a first draft and was then modified for fine adjustments. Note also the use of C functions. They allow to simplify the macro reading and editing by avoiding code repetition or defining some graphics attributes in one single place. This technique to generate drawings may appear not very user friendly compare to all the ""wysiwyg"" graphics editors available. In some cases it can be more powerful than a GUI interface because it allows to generate very precise drawing and using computation to generate them. ; void hline (Double_t x, Double_t y); {; Double_t dx = 0.1;; TLine *l = new TLine(x,y,x+dx,y);; l->Draw();; l->SetLineWidth(4);; }; ; void DrawArrow (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t ls); {; TArrow *arr = new TArrow(x1,y1,x2,y2,0.025,""|>"");; arr->SetFillColor(1);; arr->SetFillStyle(1001);; arr->SetLineStyle(ls);; arr->SetAngle(19);; arr->Draw();; }; ; void mass_spectrum(); {; TCanvas *C = new TCanvas(""C"",""C"",800,500);; ; hline (0.10,0.25);; hline (0.10,0.80);; hline (0.30,0.90);; hline (0.30,0.35);; hline (0.45,0.60);; hline (0.58,0.68);; hline (0.73,0.70);; hline (0.89,0.75);; ; DrawArrow(0.32, 0.90, 0.32, 0.35, 1);; DrawArrow(0.34, 0.90, 0.34, 0.35, 1);; DrawArrow(0.36, 0.90, 0.36, 0.60, 1);; DrawArrow(0.38, 0.90, 0.38, 0.70, 1);; ; DrawArrow(0.30, 0.90, 0.18, 0.25, 1);; DrawArrow(0.30, 0.35, 0.19, 0.25, 1);; DrawArrow(0.40, 0.90, 0.47, 0.61, 1);; ; DrawArrow(0.15, 0.25, 0.15, 0.19, 1);; DrawArrow(0.15, 0.80, 0.15, 0.74, 1);; ; DrawArrow(0.50, 0.60, 0.50, 0.54, 1);; DrawArrow(0.60, 0.68, 0.60, 0.62, 1);; DrawArrow(0.94, 0.75, 0.94, 0.69, 1);; ; DrawArrow(0.32, 0.35, 0.32, 0.19, 1)",MatchSource.WIKI,doc/master/mass__spectrum_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/mass__spectrum_8C.html
Safety,avoid,avoiding,". ROOT: tutorials/graphics/mass_spectrum.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. mass_spectrum.C File ReferenceTutorials » Graphics tutorials. Detailed Description; This macro makes use of some basic graphics primitives such as line, arrow and text. ; It has been written using the TCanvas ToolBar to produce a first draft and was then modified for fine adjustments. Note also the use of C functions. They allow to simplify the macro reading and editing by avoiding code repetition or defining some graphics attributes in one single place. This technique to generate drawings may appear not very user friendly compare to all the ""wysiwyg"" graphics editors available. In some cases it can be more powerful than a GUI interface because it allows to generate very precise drawing and using computation to generate them. ; void hline (Double_t x, Double_t y); {; Double_t dx = 0.1;; TLine *l = new TLine(x,y,x+dx,y);; l->Draw();; l->SetLineWidth(4);; }; ; void DrawArrow (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t ls); {; TArrow *arr = new TArrow(x1,y1,x2,y2,0.025,""|>"");; arr->SetFillColor(1);; arr->SetFillStyle(1001);; arr->SetLineStyle(ls);; arr->SetAngle(19);; arr->Draw();; }; ; void mass_spectrum(); {; TCanvas *C = new TCanvas(""C"",""C"",800,500);; ; hline (0.10,0.25);; hline (0.10,0.80);; hline (0.30,0.90);; hline (0.30,0.35);; hline (0.45,0.60);; hline (0.58,0.68);; hline (0.73,0.70);; hline (0.89,0.75);; ; DrawArrow(0.32, 0.90, 0.32, 0.35, 1);; DrawArrow(0.34, 0.90, 0.34, 0.35, 1);; DrawArrow(0.36, 0.90, 0.36, 0.60, 1);; DrawArrow(0.38, 0.90, 0.38, 0.70, 1);; ; DrawArrow(0.30, 0.90, 0.18, 0.25, 1);; DrawArrow(0.30, 0.35, 0.19, 0.25, 1);; DrawArrow(0.40, 0.90, 0.47, 0.61, 1);; ; DrawArrow(0.15, 0.25, 0.15, 0.19, 1);; DrawArrow(0.15, 0.80, 0.15, 0.74, 1);; ; DrawArrow(0.50, 0.60, 0.50, 0.54, 1);; DrawArrow(0.60, 0.68, 0.60, 0.62, 1);; DrawArrow(0.94, 0.75, 0.94, 0.69, 1);; ; DrawArrow(0.32, 0.35, 0.32, 0.19, 1)",MatchSource.WIKI,doc/master/mass__spectrum_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/mass__spectrum_8C.html
Usability,simpl,simplify,". ROOT: tutorials/graphics/mass_spectrum.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. mass_spectrum.C File ReferenceTutorials » Graphics tutorials. Detailed Description; This macro makes use of some basic graphics primitives such as line, arrow and text. ; It has been written using the TCanvas ToolBar to produce a first draft and was then modified for fine adjustments. Note also the use of C functions. They allow to simplify the macro reading and editing by avoiding code repetition or defining some graphics attributes in one single place. This technique to generate drawings may appear not very user friendly compare to all the ""wysiwyg"" graphics editors available. In some cases it can be more powerful than a GUI interface because it allows to generate very precise drawing and using computation to generate them. ; void hline (Double_t x, Double_t y); {; Double_t dx = 0.1;; TLine *l = new TLine(x,y,x+dx,y);; l->Draw();; l->SetLineWidth(4);; }; ; void DrawArrow (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t ls); {; TArrow *arr = new TArrow(x1,y1,x2,y2,0.025,""|>"");; arr->SetFillColor(1);; arr->SetFillStyle(1001);; arr->SetLineStyle(ls);; arr->SetAngle(19);; arr->Draw();; }; ; void mass_spectrum(); {; TCanvas *C = new TCanvas(""C"",""C"",800,500);; ; hline (0.10,0.25);; hline (0.10,0.80);; hline (0.30,0.90);; hline (0.30,0.35);; hline (0.45,0.60);; hline (0.58,0.68);; hline (0.73,0.70);; hline (0.89,0.75);; ; DrawArrow(0.32, 0.90, 0.32, 0.35, 1);; DrawArrow(0.34, 0.90, 0.34, 0.35, 1);; DrawArrow(0.36, 0.90, 0.36, 0.60, 1);; DrawArrow(0.38, 0.90, 0.38, 0.70, 1);; ; DrawArrow(0.30, 0.90, 0.18, 0.25, 1);; DrawArrow(0.30, 0.35, 0.19, 0.25, 1);; DrawArrow(0.40, 0.90, 0.47, 0.61, 1);; ; DrawArrow(0.15, 0.25, 0.15, 0.19, 1);; DrawArrow(0.15, 0.80, 0.15, 0.74, 1);; ; DrawArrow(0.50, 0.60, 0.50, 0.54, 1);; DrawArrow(0.60, 0.68, 0.60, 0.62, 1);; DrawArrow(0.94, 0.75, 0.94, 0.69, 1);; ; DrawArrow(0.32, 0.35, 0.32, 0.19, 1)",MatchSource.WIKI,doc/master/mass__spectrum_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/mass__spectrum_8C.html
Availability,avail,available,"lynomialIntegral(double const *coeffs, int nCoeffs, int lowestOrder, double xMin, double xMax); 482{; 483 int denom = lowestOrder + nCoeffs;; 484 double min = coeffs[nCoeffs - 1] / double(denom);; 485 double max = coeffs[nCoeffs - 1] / double(denom);; 486 ; 487 for (int i = nCoeffs - 2; i >= 0; i--) {; 488 denom--;; 489 min = (coeffs[i] / double(denom)) + xMin * min;; 490 max = (coeffs[i] / double(denom)) + xMax * max;; 491 }; 492 ; 493 max = max * std::pow(xMax, 1 + lowestOrder);; 494 min = min * std::pow(xMin, 1 + lowestOrder);; 495 ; 496 return max - min + (pdfMode && lowestOrder > 0.0 ? xMax - xMin : 0.0);; 497}; 498 ; 499/// use fast FMA if available, fall back to normal arithmetic if not; 500inline double fast_fma(double x, double y, double z) noexcept; 501{; 502#if defined(FP_FAST_FMA) // check if std::fma has fast hardware implementation; 503 return std::fma(x, y, z);; 504#else // defined(FP_FAST_FMA); 505 // std::fma might be slow, so use a more pedestrian implementation; 506#if defined(__clang__); 507#pragma STDC FP_CONTRACT ON // hint clang that using an FMA is okay here; 508#endif // defined(__clang__); 509 return (x * y) + z;; 510#endif // defined(FP_FAST_FMA); 511}; 512 ; 513inline double chebychevIntegral(double const *coeffs, unsigned int nCoeffs, double xMin, double xMax, double xMinFull,; 514 double xMaxFull); 515{; 516 const double halfrange = .5 * (xMax - xMin);; 517 const double mid = .5 * (xMax + xMin);; 518 ; 519 // the full range of the function is mapped to the normalised [-1, 1] range; 520 const double b = (xMaxFull - mid) / halfrange;; 521 const double a = (xMinFull - mid) / halfrange;; 522 ; 523 // coefficient for integral(T_0(x)) is 1 (implicit), integrate by hand; 524 // T_0(x) and T_1(x), and use for n > 1: integral(T_n(x) dx) =; 525 // (T_n+1(x) / (n + 1) - T_n-1(x) / (n - 1)) / 2; 526 double sum = b - a; // integrate T_0(x) by hand; 527 ; 528 const unsigned int iend = nCoeffs;; 529 if (iend > 0) {; 530 {; 531 // integrate T_1(x) by h",MatchSource.WIKI,doc/master/MathFuncs_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html
Deployability,update,update,"low[i], high[i], boundary, nominal, params[i], total);; 326 }; 327 ; 328 return doCutoff && total <= 0 ? TMath::Limits<double>::Min() : total;; 329}; 330 ; 331inline double landau(double x, double mu, double sigma); 332{; 333 if (sigma <= 0.); 334 return 0.;; 335 return ROOT::Math::landau_pdf((x - mu) / sigma);; 336}; 337 ; 338inline double logNormal(double x, double k, double m0); 339{; 340 return ROOT::Math::lognormal_pdf(x, std::log(m0), std::abs(std::log(k)));; 341}; 342 ; 343inline double logNormalStandard(double x, double sigma, double mu); 344{; 345 return ROOT::Math::lognormal_pdf(x, mu, std::abs(sigma));; 346}; 347 ; 348inline double effProd(double eff, double pdf); 349{; 350 return eff * pdf;; 351}; 352 ; 353inline double nll(double pdf, double weight, int binnedL, int doBinOffset); 354{; 355 if (binnedL) {; 356 // Special handling of this case since std::log(Poisson(0,0)=0 but can't be; 357 // calculated with usual log-formula since std::log(mu)=0. No update of result; 358 // is required since term=0.; 359 if (std::abs(pdf) < 1e-10 && std::abs(weight) < 1e-10) {; 360 return 0.0;; 361 }; 362 if (doBinOffset) {; 363 return pdf - weight - weight * (std::log(pdf) - std::log(weight));; 364 }; 365 return pdf - weight * std::log(pdf) + TMath::LnGamma(weight + 1);; 366 } else {; 367 return -weight * std::log(pdf);; 368 }; 369}; 370 ; 371inline double recursiveFraction(double *a, unsigned int n); 372{; 373 double prod = a[0];; 374 ; 375 for (unsigned int i = 1; i < n; ++i) {; 376 prod *= 1.0 - a[i];; 377 }; 378 ; 379 return prod;; 380}; 381 ; 382inline double cbShape(double m, double m0, double sigma, double alpha, double n); 383{; 384 double t = (m - m0) / sigma;; 385 if (alpha < 0); 386 t = -t;; 387 ; 388 double absAlpha = std::abs((double)alpha);; 389 ; 390 if (t >= -absAlpha) {; 391 return std::exp(-0.5 * t * t);; 392 } else {; 393 double a = std::pow(n / absAlpha, n) * std::exp(-0.5 * absAlpha * absAlpha);; 394 double b = n / absAlpha - absAlpha;; 395 ; 396 r",MatchSource.WIKI,doc/master/MathFuncs_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html
Energy Efficiency,power,power,"/ absAlpha, n) * std::exp(-0.5 * absAlpha * absAlpha);; 686 double b = n / absAlpha - absAlpha;; 687 ; 688 double term1 = 0.0;; 689 if (useLog) {; 690 term1 = a * sig * (std::log(b - tmin) - std::log(n / absAlpha));; 691 } else {; 692 term1 = a * sig / (1.0 - n) * (1.0 / (std::pow(b - tmin, n - 1.0)) - 1.0 / (std::pow(n / absAlpha, n - 1.0)));; 693 }; 694 ; 695 double term2 = sig * sqrtPiOver2 * (approxErf(tmax / sqrt2) - approxErf(-absAlpha / sqrt2));; 696 ; 697 result += term1 + term2;; 698 }; 699 ; 700 if (result == 0); 701 return 1.E-300;; 702 return result;; 703}; 704 ; 705inline double bernsteinIntegral(double xlo, double xhi, double xmin, double xmax, double *coefs, int nCoefs); 706{; 707 double xloScaled = (xlo - xmin) / (xmax - xmin);; 708 double xhiScaled = (xhi - xmin) / (xmax - xmin);; 709 ; 710 int degree = nCoefs - 1; // n+1 polys of degree n; 711 double norm = 0.;; 712 ; 713 for (int i = 0; i <= degree; ++i) {; 714 // for each of the i Bernstein basis polynomials; 715 // represent it in the 'power basis' (the naive polynomial basis); 716 // where the integral is straight forward.; 717 double temp = 0.;; 718 for (int j = i; j <= degree; ++j) { // power basis≈ß; 719 double binCoefs = binomial(degree, j) * binomial(j, i);; 720 double oneOverJPlusOne = 1. / (j + 1.);; 721 double powDiff = std::pow(xhiScaled, j + 1.) - std::pow(xloScaled, j + 1.);; 722 temp += std::pow(-1., j - i) * binCoefs * powDiff * oneOverJPlusOne;; 723 }; 724 temp *= coefs[i]; // include coeff; 725 norm += temp; // add this basis's contribution to total; 726 }; 727 ; 728 return norm * (xmax - xmin);; 729}; 730 ; 731} // namespace MathFuncs; 732 ; 733} // namespace Detail; 734 ; 735} // namespace RooFit; 736 ; 737#endif; PdfFuncMathCore.h; ProbFuncMathCore.h; d#define d(i)Definition RSha256.hxx:102; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; S0#define S0(x)Definition RSha256.hxx:88; S1#define S1(x)Definition RSha256.hxx:89; c#define c(i)Definition",MatchSource.WIKI,doc/master/MathFuncs_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html
Integrability,integrat,integrate,"75 for (unsigned int i = 1; i < n; ++i) {; 376 prod *= 1.0 - a[i];; 377 }; 378 ; 379 return prod;; 380}; 381 ; 382inline double cbShape(double m, double m0, double sigma, double alpha, double n); 383{; 384 double t = (m - m0) / sigma;; 385 if (alpha < 0); 386 t = -t;; 387 ; 388 double absAlpha = std::abs((double)alpha);; 389 ; 390 if (t >= -absAlpha) {; 391 return std::exp(-0.5 * t * t);; 392 } else {; 393 double a = std::pow(n / absAlpha, n) * std::exp(-0.5 * absAlpha * absAlpha);; 394 double b = n / absAlpha - absAlpha;; 395 ; 396 return a / std::pow(b - t, n);; 397 }; 398}; 399 ; 400// For RooCBShape; 401inline double approxErf(double arg); 402{; 403 if (arg > 5.0); 404 return 1.0;; 405 if (arg < -5.0); 406 return -1.0;; 407 ; 408 return TMath::Erf(arg);; 409}; 410 ; 411/// @brief Function to calculate the integral of an un-normalized RooGaussian over x. To calculate the integral over; 412/// mean, just interchange the respective values of x and mean.; 413/// @param xMin Minimum value of variable to integrate wrt.; 414/// @param xMax Maximum value of of variable to integrate wrt.; 415/// @param mean Mean.; 416/// @param sigma Sigma.; 417/// @return The integral of an un-normalized RooGaussian over the value in x.; 418inline double gaussianIntegral(double xMin, double xMax, double mean, double sigma); 419{; 420 // The normalisation constant 1./sqrt(2*pi*sigma^2) is left out in evaluate().; 421 // Therefore, the integral is scaled up by that amount to make RooFit normalise; 422 // correctly.; 423 double resultScale = 0.5 * std::sqrt(TMath::TwoPi()) * sigma;; 424 ; 425 // Here everything is scaled and shifted into a standard normal distribution:; 426 double xscale = TMath::Sqrt2() * sigma;; 427 double scaledMin = 0.;; 428 double scaledMax = 0.;; 429 scaledMin = (xMin - mean) / xscale;; 430 scaledMax = (xMax - mean) / xscale;; 431 ; 432 // Here we go for maximum precision: We compute all integrals in the UPPER; 433 // tail of the Gaussian, because erfc has the highes",MatchSource.WIKI,doc/master/MathFuncs_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html
Modifiability,flexible,flexibleInterpSingle,"terpolation; 184 double central = low + (idx + 0.5) * binWidth;; 185 if (val > low + 0.5 * binWidth && val < high - 0.5 * binWidth) {; 186 double slope;; 187 if (val < central) {; 188 slope = vals[idx] - vals[idx - 1];; 189 } else {; 190 slope = vals[idx + 1] - vals[idx];; 191 }; 192 return vals[idx] + slope * (val - central) / binWidth;; 193 }; 194 ; 195 return vals[idx];; 196}; 197 ; 198inline double poisson(double x, double par); 199{; 200 if (par < 0); 201 return TMath::QuietNaN();; 202 ; 203 if (x < 0) {; 204 return 0;; 205 } else if (x == 0.0) {; 206 return std::exp(-par);; 207 } else {; 208 double out = x * std::log(par) - TMath::LnGamma(x + 1.) - par;; 209 return std::exp(out);; 210 }; 211}; 212 ; 213inline double flexibleInterpSingle(unsigned int code, double low, double high, double boundary, double nominal,; 214 double paramVal, double res); 215{; 216 if (code == 0) {; 217 // piece-wise linear; 218 if (paramVal > 0) {; 219 return paramVal * (high - nominal);; 220 } else {; 221 return paramVal * (nominal - low);; 222 }; 223 } else if (code == 1) {; 224 // piece-wise log; 225 if (paramVal >= 0) {; 226 return res * (std::pow(high / nominal, +paramVal) - 1);; 227 } else {; 228 return res * (std::pow(low / nominal, -paramVal) - 1);; 229 }; 230 } else if (code == 2) {; 231 // parabolic with linear; 232 double a = 0.5 * (high + low) - nominal;; 233 double b = 0.5 * (high - low);; 234 double c = 0;; 235 if (paramVal > 1) {; 236 return (2 * a + b) * (paramVal - 1) + high - nominal;; 237 } else if (paramVal < -1) {; 238 return -1 * (2 * a - b) * (paramVal + 1) + low - nominal;; 239 } else {; 240 return a * std::pow(paramVal, 2) + b * paramVal + c;; 241 }; 242 } else if (code == 3) {; 243 // parabolic version of log-normal; 244 double a = 0.5 * (high + low) - nominal;; 245 double b = 0.5 * (high - low);; 246 double c = 0;; 247 if (paramVal > 1) {; 248 return (2 * a + b) * (paramVal - 1) + high - nominal;; 249 } else if (paramVal < -1) {; 250 return -1 * (2 * a - b) *",MatchSource.WIKI,doc/master/MathFuncs_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html
Testability,log,log,";; 135 retVal = retVal * std::pow(x, lowestOrder);; 136 return retVal + (pdfMode && lowestOrder > 0 ? 1.0 : 0.0);; 137}; 138 ; 139inline double chebychev(double *coeffs, unsigned int nCoeffs, double x_in, double xMin, double xMax); 140{; 141 // transform to range [-1, +1]; 142 const double xPrime = (x_in - 0.5 * (xMax + xMin)) / (0.5 * (xMax - xMin));; 143 ; 144 // extract current values of coefficients; 145 double sum = 1.;; 146 if (nCoeffs > 0) {; 147 double curr = xPrime;; 148 double twox = 2 * xPrime;; 149 double last = 1;; 150 double newval = twox * curr - last;; 151 last = curr;; 152 curr = newval;; 153 for (unsigned int i = 0; nCoeffs != i; ++i) {; 154 sum += last * coeffs[i];; 155 newval = twox * curr - last;; 156 last = curr;; 157 curr = newval;; 158 }; 159 }; 160 return sum;; 161}; 162 ; 163inline double constraintSum(double const *comp, unsigned int compSize); 164{; 165 double sum = 0;; 166 for (unsigned int i = 0; i < compSize; i++) {; 167 sum -= std::log(comp[i]);; 168 }; 169 return sum;; 170}; 171 ; 172inline unsigned int getUniformBinning(double low, double high, double val, unsigned int numBins); 173{; 174 double binWidth = (high - low) / numBins;; 175 return val >= high ? numBins - 1 : std::abs((val - low) / binWidth);; 176}; 177 ; 178inline double interpolate1d(double low, double high, double val, unsigned int numBins, double const* vals); 179{; 180 double binWidth = (high - low) / numBins;; 181 int idx = val >= high ? numBins - 1 : std::abs((val - low) / binWidth);; 182 ; 183 // interpolation; 184 double central = low + (idx + 0.5) * binWidth;; 185 if (val > low + 0.5 * binWidth && val < high - 0.5 * binWidth) {; 186 double slope;; 187 if (val < central) {; 188 slope = vals[idx] - vals[idx - 1];; 189 } else {; 190 slope = vals[idx + 1] - vals[idx];; 191 }; 192 return vals[idx] + slope * (val - central) / binWidth;; 193 }; 194 ; 195 return vals[idx];; 196}; 197 ; 198inline double poisson(double x, double par); 199{; 200 if (par < 0); 201 return TMat",MatchSource.WIKI,doc/master/MathFuncs_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html
Usability,simpl,simplification,"a0; // c0 - 2 * c1 + c2; 69 return (a2 * xScaled + a1) * xScaled + a0;; 70 }; 71 ; 72 double t = xScaled;; 73 double s = 1. - xScaled;; 74 ; 75 double result = coefs[0] * s;; 76 for (int i = 1; i < degree; i++) {; 77 result = (result + t * binomial(degree, i) * coefs[i]) * s;; 78 t *= xScaled;; 79 }; 80 result += t * coefs[degree];; 81 ; 82 return result;; 83}; 84 ; 85/// @brief Function to evaluate an un-normalized RooGaussian.; 86inline double gaussian(double x, double mean, double sigma); 87{; 88 const double arg = x - mean;; 89 const double sig = sigma;; 90 return std::exp(-0.5 * arg * arg / (sig * sig));; 91}; 92 ; 93inline double product(double const *factors, std::size_t nFactors); 94{; 95 double out = 1.0;; 96 for (std::size_t i = 0; i < nFactors; ++i) {; 97 out *= factors[i];; 98 }; 99 return out;; 100}; 101 ; 102// RooRatio evaluate function.; 103inline double ratio(double numerator, double denominator); 104{; 105 return numerator / denominator;; 106}; 107 ; 108inline double bifurGauss(double x, double mean, double sigmaL, double sigmaR); 109{; 110 // Note: this simplification does not work with Clad as of v1.1!; 111 // return gaussian(x, mean, x < mean ? sigmaL : sigmaR);; 112 if (x < mean); 113 return gaussian(x, mean, sigmaL);; 114 return gaussian(x, mean, sigmaR);; 115}; 116 ; 117inline double efficiency(double effFuncVal, int catIndex, int sigCatIndex); 118{; 119 // Truncate efficiency function in range 0.0-1.0; 120 effFuncVal = std::clamp(effFuncVal, 0.0, 1.0);; 121 ; 122 if (catIndex == sigCatIndex); 123 return effFuncVal; // Accept case; 124 else; 125 return 1 - effFuncVal; // Reject case; 126}; 127 ; 128/// In pdfMode, a coefficient for the constant term of 1.0 is implied if lowestOrder > 0.; 129template <bool pdfMode = false>; 130inline double polynomial(double const *coeffs, int nCoeffs, int lowestOrder, double x); 131{; 132 double retVal = coeffs[nCoeffs - 1];; 133 for (int i = nCoeffs - 2; i >= 0; i--); 134 retVal = coeffs[i] + x * retVal;; 135",MatchSource.WIKI,doc/master/MathFuncs_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html
Integrability,wrap,wrapper,"=================; 406// unit: returns a unit vector (worse performance); 407//==============================================================================; 408template <class A, class T, unsigned int D>; 409inline VecExpr<BinaryOp<DivOp<T>, VecExpr<A,T,D>, Constant<T>, T>, T, D>; 410 unit(const VecExpr<A,T,D>& lhs) {; 411 typedef BinaryOp<DivOp<T>, VecExpr<A,T,D>, Constant<T>, T> DivOpBinOp;; 412 return VecExpr<DivOpBinOp,T,D>(DivOpBinOp(DivOp<T>(),lhs,Constant<T>(mag(lhs))));; 413}; 414#endif; 415 ; 416 ; 417 } // namespace Math; 418 ; 419} // namespace ROOT; 420 ; 421 ; 422 ; 423#endif /* ROOT_Math_Functions */; Expression.h; ROOT::Math::SVectorSVector: a generic fixed size Vector class.Definition SVector.h:75; ROOT::Math::SVector::UnitSVector< T, D > & Unit()transform vector into a vector of length 1Definition SVector.icc:477; ROOT::Math::SVector::applyT apply(unsigned int i) constaccess the parse tree. Index starts from zeroDefinition SVector.icc:537; ROOT::Math::VecExprExpression wrapper class for Vector objects.Definition Expression.h:64; ROOT::Math::VecExpr::applyT apply(unsigned int i) constDefinition Expression.h:77; ROOT::Math::Squareconst T Square(const T &x)square Template function to compute , for any type T returning a type TDefinition Functions.h:74; ROOT::Math::Minimumconst T Minimum(const T &lhs, const T &rhs)minimum.Definition Functions.h:100; ROOT::Math::Signint Sign(const T &x)sign.Definition Functions.h:128; ROOT::Math::Roundint Round(const T &x)round.Definition Functions.h:113; ROOT::Math::Maximumconst T Maximum(const T &lhs, const T &rhs)maximum.Definition Functions.h:86; ROOT::Math::UnitSVector< T, D > Unit(const SVector< T, D > &rhs)Unit.Definition Functions.h:382; ROOT::Math::CrossSVector< T, 3 > Cross(const SVector< T, 3 > &lhs, const SVector< T, 3 > &rhs)Vector Cross Product (only for 3-dim vectors) .Definition Functions.h:323; ROOT::Math::Lmag2T Lmag2(const SVector< T, 4 > &rhs)Lmag2: Square of Minkowski Lorentz-Vector norm (only for ",MatchSource.WIKI,doc/master/math_2smatrix_2inc_2Math_2Functions_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/math_2smatrix_2inc_2Math_2Functions_8h_source.html
Performance,perform,performance,"();; 384}; 385 ; 386//==============================================================================; 387// unit: returns a unit vector; 388//==============================================================================; 389template <class A, class T, unsigned int D>; 390inline SVector<T,D> Unit(const VecExpr<A,T,D>& rhs) {; 391 return SVector<T,D>(rhs).Unit();; 392}; 393 ; 394#ifdef XXX; 395//==============================================================================; 396// unit: returns a unit vector (worse performance); 397//==============================================================================; 398template <class T, unsigned int D>; 399inline VecExpr<BinaryOp<DivOp<T>, SVector<T,D>, Constant<T>, T>, T, D>; 400 unit(const SVector<T,D>& lhs) {; 401 typedef BinaryOp<DivOp<T>, SVector<T,D>, Constant<T>, T> DivOpBinOp;; 402 return VecExpr<DivOpBinOp,T,D>(DivOpBinOp(DivOp<T>(),lhs,Constant<T>(mag(lhs))));; 403}; 404 ; 405//==============================================================================; 406// unit: returns a unit vector (worse performance); 407//==============================================================================; 408template <class A, class T, unsigned int D>; 409inline VecExpr<BinaryOp<DivOp<T>, VecExpr<A,T,D>, Constant<T>, T>, T, D>; 410 unit(const VecExpr<A,T,D>& lhs) {; 411 typedef BinaryOp<DivOp<T>, VecExpr<A,T,D>, Constant<T>, T> DivOpBinOp;; 412 return VecExpr<DivOpBinOp,T,D>(DivOpBinOp(DivOp<T>(),lhs,Constant<T>(mag(lhs))));; 413}; 414#endif; 415 ; 416 ; 417 } // namespace Math; 418 ; 419} // namespace ROOT; 420 ; 421 ; 422 ; 423#endif /* ROOT_Math_Functions */; Expression.h; ROOT::Math::SVectorSVector: a generic fixed size Vector class.Definition SVector.h:75; ROOT::Math::SVector::UnitSVector< T, D > & Unit()transform vector into a vector of length 1Definition SVector.icc:477; ROOT::Math::SVector::applyT apply(unsigned int i) constaccess the parse tree. Index starts from zeroDefinition SVector.icc:537; ROOT::Math::VecExprE",MatchSource.WIKI,doc/master/math_2smatrix_2inc_2Math_2Functions_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/math_2smatrix_2inc_2Math_2Functions_8h_source.html
Availability,error,error," to be included, and thus its `sqrt()`; 66// overloads have been declared.; 67// The trick is to keep sqrt() dependent (on its argument type) by making it; 68// an unqualified name. The `std::` of `std::sqrt()` makes it a qualified; 69// name, so the code here has to use `sqrt()`, not `std::sqrt()`. To still; 70// find `std::sqrt()` we pull `std::sqrt()` into the surrounding namespace.; 71//; 72// We don't want to use 'using namespace std' because it would pollute the including headers.; 73using std::atan2;; 74using std::cos;; 75using std::cosh;; 76using std::exp;; 77using std::floor;; 78using std::log;; 79using std::pow;; 80using std::sin;; 81using std::sinh;; 82using std::sqrt;; 83using std::tan;; 84 ; 85/**; 86 Mathematical constants; 87*/; 88inline double Pi(); 89{; 90 return M_PI;; 91 }; 92 ; 93 /**; 94 declarations for functions which are not implemented by some compilers; 95 */; 96 ; 97 /// log(1+x) with error cancelation when x is small; 98 inline double log1p(double x); 99 {; 100#ifndef HAVE_NO_LOG1P; 101 return ::log1p(x);; 102#else; 103 // if log1p is not in c math library; 104 volatile double y;; 105 y = 1 + x;; 106 return std::log(y) - ((y-1)-x)/y ; /* cancels errors with IEEE arithmetic */; 107#endif; 108}; 109/// exp(x) -1 with error cancellation when x is small; 110inline double expm1( double x) {; 111#ifndef HAVE_NO_EXPM1; 112 return ::expm1(x);; 113#else; 114 // compute using taylor expansion until difference is less than epsilon; 115 // use for values smaller than 0.5 (for larger (exp(x)-1 is fine; 116 if (std::abs(x) < 0.5); 117 {; 118 // taylor series S = x + (1/2!) x^2 + (1/3!) x^3 + ...; 119 ; 120 double i = 1.0;; 121 double sum = x;; 122 double term = x / 1.0;; 123 do {; 124 i++ ;; 125 term *= x/i;; 126 sum += term;; 127 }; 128 while (std::abs(term) > std::abs(sum) * std::numeric_limits<double>::epsilon() ) ;; 129 ; 130 return sum ;; 131 }; 132 else; 133 {; 134 return std::exp(x) - 1;; 135 }; 136#endif; 137}; 138 ; 139 } // end namespace Math;",MatchSource.WIKI,doc/master/Math_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Math_8h_source.html
Integrability,depend,dependent,"e <limits>; 31#endif; 32 ; 33 ; 34#ifndef M_PI; 35 ; 36#define M_PI 3.14159265358979323846264338328 // Pi; 37#endif; 38 ; 39#ifndef M_PI_2; 40#define M_PI_2 1.57079632679489661923132169164 // Pi/2; 41#endif; 42 ; 43#ifndef M_PI_4; 44#define M_PI_4 0.78539816339744830961566084582 // Pi/4; 45#endif; 46 ; 47/**; 48 \namespace ROOT; 49 Namespace for new ROOT classes and functions; 50 */; 51 ; 52namespace ROOT {; 53 ; 54/**; 55\namespace Math; 56Namespace for new Math classes and functions.; 57See the \ref Math ""Math Libraries"" page for a detailed description.; 58*/; 59 ; 60namespace Math {; 61// Enable Vc/VecCore template instantiations to replace std math functions.; 62//; 63// Vc declares `std::sqrt(Vc-type)`. To use this for Vc-`SCALAR`s, the call; 64// to `sqrt()` must only be resolved at the template instantiation time, when; 65// the Vc headers are guaranteed to be included, and thus its `sqrt()`; 66// overloads have been declared.; 67// The trick is to keep sqrt() dependent (on its argument type) by making it; 68// an unqualified name. The `std::` of `std::sqrt()` makes it a qualified; 69// name, so the code here has to use `sqrt()`, not `std::sqrt()`. To still; 70// find `std::sqrt()` we pull `std::sqrt()` into the surrounding namespace.; 71//; 72// We don't want to use 'using namespace std' because it would pollute the including headers.; 73using std::atan2;; 74using std::cos;; 75using std::cosh;; 76using std::exp;; 77using std::floor;; 78using std::log;; 79using std::pow;; 80using std::sin;; 81using std::sinh;; 82using std::sqrt;; 83using std::tan;; 84 ; 85/**; 86 Mathematical constants; 87*/; 88inline double Pi(); 89{; 90 return M_PI;; 91 }; 92 ; 93 /**; 94 declarations for functions which are not implemented by some compilers; 95 */; 96 ; 97 /// log(1+x) with error cancelation when x is small; 98 inline double log1p(double x); 99 {; 100#ifndef HAVE_NO_LOG1P; 101 return ::log1p(x);; 102#else; 103 // if log1p is not in c math library; 104 volatile double y;; 10",MatchSource.WIKI,doc/master/Math_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Math_8h_source.html
Testability,log,log," to be included, and thus its `sqrt()`; 66// overloads have been declared.; 67// The trick is to keep sqrt() dependent (on its argument type) by making it; 68// an unqualified name. The `std::` of `std::sqrt()` makes it a qualified; 69// name, so the code here has to use `sqrt()`, not `std::sqrt()`. To still; 70// find `std::sqrt()` we pull `std::sqrt()` into the surrounding namespace.; 71//; 72// We don't want to use 'using namespace std' because it would pollute the including headers.; 73using std::atan2;; 74using std::cos;; 75using std::cosh;; 76using std::exp;; 77using std::floor;; 78using std::log;; 79using std::pow;; 80using std::sin;; 81using std::sinh;; 82using std::sqrt;; 83using std::tan;; 84 ; 85/**; 86 Mathematical constants; 87*/; 88inline double Pi(); 89{; 90 return M_PI;; 91 }; 92 ; 93 /**; 94 declarations for functions which are not implemented by some compilers; 95 */; 96 ; 97 /// log(1+x) with error cancelation when x is small; 98 inline double log1p(double x); 99 {; 100#ifndef HAVE_NO_LOG1P; 101 return ::log1p(x);; 102#else; 103 // if log1p is not in c math library; 104 volatile double y;; 105 y = 1 + x;; 106 return std::log(y) - ((y-1)-x)/y ; /* cancels errors with IEEE arithmetic */; 107#endif; 108}; 109/// exp(x) -1 with error cancellation when x is small; 110inline double expm1( double x) {; 111#ifndef HAVE_NO_EXPM1; 112 return ::expm1(x);; 113#else; 114 // compute using taylor expansion until difference is less than epsilon; 115 // use for values smaller than 0.5 (for larger (exp(x)-1 is fine; 116 if (std::abs(x) < 0.5); 117 {; 118 // taylor series S = x + (1/2!) x^2 + (1/3!) x^3 + ...; 119 ; 120 double i = 1.0;; 121 double sum = x;; 122 double term = x / 1.0;; 123 do {; 124 i++ ;; 125 term *= x/i;; 126 sum += term;; 127 }; 128 while (std::abs(term) > std::abs(sum) * std::numeric_limits<double>::epsilon() ) ;; 129 ; 130 return sum ;; 131 }; 132 else; 133 {; 134 return std::exp(x) - 1;; 135 }; 136#endif; 137}; 138 ; 139 } // end namespace Math;",MatchSource.WIKI,doc/master/Math_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Math_8h_source.html
Integrability,rout,routines,"e user wants to pass const objects need to copy the matrices; 983// It will work only for symmetric matrices; 984template <class T, unsigned int D>; 985bool SolveChol( SMatrix<T, D, D, MatRepSym<T, D> > & mat, SVector<T, D> & vec ) {; 986 CholeskyDecomp<T, D> decomp(mat);; 987 return decomp.Solve(vec);; 988}; 989 ; 990/// same function as before but not overwriting the matrix and returning a copy of the vector; 991/// (this is the slow version); 992template <class T, unsigned int D>; 993SVector<T,D> SolveChol( const SMatrix<T, D, D, MatRepSym<T, D> > & mat, const SVector<T, D> & vec, int & ifail ) {; 994 SMatrix<T, D, D, MatRepSym<T, D> > atmp(mat);; 995 SVector<T,D> vret(vec);; 996 bool ok = SolveChol( atmp, vret);; 997 ifail = (ok) ? 0 : -1;; 998 return vret;; 999}; 1000 ; 1001 ; 1002 ; 1003 } // namespace Math; 1004 ; 1005} // namespace ROOT; 1006 ; 1007 ; 1008#endif /* ROOT_Math_MatrixFunctions */; BinaryOpPolicy.h; CholeskyDecomp.hheader file containing the templated implementation of matrix inversion routines for use with ROOT's ...; Expression.h; HelperOps.h; Productstatic Double_t Product(const Double_t *x, const Float_t *y)Product.Definition TCTUB.cxx:101; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h offsetDefinition TGWin32V",MatchSource.WIKI,doc/master/MatrixFunctions_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MatrixFunctions_8h_source.html
Performance,perform,performances,"2 namespace Math {; 53 ; 54 template <class T, unsigned int D>; 55 class SVector;; 56 ; 57#ifdef XXX; 58//==============================================================================; 59// SMatrix * SVector; 60//==============================================================================; 61template <class T, unsigned int D1, unsigned int D2, class R>; 62SVector<T,D1> operator*(const SMatrix<T,D1,D2,R>& rhs, const SVector<T,D2>& lhs); 63{; 64 SVector<T,D1> tmp;; 65 for(unsigned int i=0; i<D1; ++i) {; 66 const unsigned int rpos = i*D2;; 67 for(unsigned int j=0; j<D2; ++j) {; 68 tmp[i] += rhs.apply(rpos+j) * lhs.apply(j);; 69 }; 70 }; 71 return tmp;; 72}; 73#endif; 74 ; 75 ; 76// matrix-vector product:; 77// use apply(i) function for matrices. Tested (11/05/06) with using (i,j) but; 78// performances are slightly worse (not clear why); 79 ; 80//==============================================================================; 81// meta_row_dot; 82//==============================================================================; 83template <unsigned int I>; 84struct meta_row_dot {; 85 template <class A, class B>; 86 static inline typename A::value_type f(const A& lhs, const B& rhs,; 87 const unsigned int offset) {; 88 return lhs.apply(offset+I) * rhs.apply(I) + meta_row_dot<I-1>::f(lhs,rhs,offset);; 89 }; 90};; 91 ; 92 ; 93//==============================================================================; 94// meta_row_dot<0>; 95//==============================================================================; 96template <>; 97struct meta_row_dot<0> {; 98 template <class A, class B>; 99 static inline typename A::value_type f(const A& lhs, const B& rhs,; 100 const unsigned int offset) {; 101 return lhs.apply(offset) * rhs.apply(0);; 102 }; 103};; 104 ; 105//==============================================================================; 106// VectorMatrixRowOp; 107//==============================================================================; 108template <class Matrix, cla",MatchSource.WIKI,doc/master/MatrixFunctions_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MatrixFunctions_8h_source.html
Usability,clear,clear,"2 namespace Math {; 53 ; 54 template <class T, unsigned int D>; 55 class SVector;; 56 ; 57#ifdef XXX; 58//==============================================================================; 59// SMatrix * SVector; 60//==============================================================================; 61template <class T, unsigned int D1, unsigned int D2, class R>; 62SVector<T,D1> operator*(const SMatrix<T,D1,D2,R>& rhs, const SVector<T,D2>& lhs); 63{; 64 SVector<T,D1> tmp;; 65 for(unsigned int i=0; i<D1; ++i) {; 66 const unsigned int rpos = i*D2;; 67 for(unsigned int j=0; j<D2; ++j) {; 68 tmp[i] += rhs.apply(rpos+j) * lhs.apply(j);; 69 }; 70 }; 71 return tmp;; 72}; 73#endif; 74 ; 75 ; 76// matrix-vector product:; 77// use apply(i) function for matrices. Tested (11/05/06) with using (i,j) but; 78// performances are slightly worse (not clear why); 79 ; 80//==============================================================================; 81// meta_row_dot; 82//==============================================================================; 83template <unsigned int I>; 84struct meta_row_dot {; 85 template <class A, class B>; 86 static inline typename A::value_type f(const A& lhs, const B& rhs,; 87 const unsigned int offset) {; 88 return lhs.apply(offset+I) * rhs.apply(I) + meta_row_dot<I-1>::f(lhs,rhs,offset);; 89 }; 90};; 91 ; 92 ; 93//==============================================================================; 94// meta_row_dot<0>; 95//==============================================================================; 96template <>; 97struct meta_row_dot<0> {; 98 template <class A, class B>; 99 static inline typename A::value_type f(const A& lhs, const B& rhs,; 100 const unsigned int offset) {; 101 return lhs.apply(offset) * rhs.apply(0);; 102 }; 103};; 104 ; 105//==============================================================================; 106// VectorMatrixRowOp; 107//==============================================================================; 108template <class Matrix, cla",MatchSource.WIKI,doc/master/MatrixFunctions_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MatrixFunctions_8h_source.html
Integrability,depend,dependency,". ROOT: net/http/civetweb/md5.inl File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Macros |; Typedefs |; Functions ; md5.inl File Reference. #include <stdint.h>; #include <string.h>. Include dependency graph for md5.inl:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  md5_state_s;  . Macros; #define BYTE_ORDER   (0);  ; #define F(x, y, z)   (((x) & (y)) | (~(x) & (z)));  ; #define G(x, y, z)   (((x) & (z)) | ((y) & ~(z)));  ; #define H(x, y, z)   ((x) ^ (y) ^ (z));  ; #define I(x, y, z)   ((y) ^ ((x) | ~(z)));  ; #define md5_INCLUDED;  ; #define ROTATE_LEFT(x, n)   (((x) << (n)) | ((x) >> (32 - (n))));  ; #define SET(a, b, c, d, k, s, Ti);  ; #define SET(a, b, c, d, k, s, Ti);  ; #define SET(a, b, c, d, k, s, Ti);  ; #define SET(a, b, c, d, k, s, Ti);  ; #define T1   /* 0xd76aa478 */ (T_MASK ^ 0x28955b87);  ; #define T10   /* 0x8b44f7af */ (T_MASK ^ 0x74bb0850);  ; #define T11   /* 0xffff5bb1 */ (T_MASK ^ 0x0000a44e);  ; #define T12   /* 0x895cd7be */ (T_MASK ^ 0x76a32841);  ; #define T13   (0x6b901122);  ; #define T14   /* 0xfd987193 */ (T_MASK ^ 0x02678e6c);  ; #define T15   /* 0xa679438e */ (T_MASK ^ 0x5986bc71);  ; #define T16   (0x49b40821);  ; #define T17   /* 0xf61e2562 */ (T_MASK ^ 0x09e1da9d);  ; #define T18   /* 0xc040b340 */ (T_MASK ^ 0x3fbf4cbf);  ; #define T19   (0x265e5a51);  ; #define T2   /* 0xe8c7b756 */ (T_MASK ^ 0x173848a9);  ; #define T20   /* 0xe9b6c7aa */ (T_MASK ^ 0x16493855);  ; #define T21   /* 0xd62f105d */ (T_MASK ^ 0x29d0efa2);  ; #define T22   (0x02441453);  ; #define T23   /* 0xd8a1e681 */ (T_MASK ^ 0x275e197e);  ; #define T24   /* 0xe7d3fbc8 */ (T_MASK ^ 0x182c0437);  ; #define T25   (0x21e1cde6);  ; #define T26   /* 0xc33707d6 */ (T_MASK ^ 0x3cc8f829);  ; #define T27   ",MatchSource.WIKI,doc/master/md5_8inl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/md5_8inl.html
Availability,avail,available,". ROOT: net/http/civetweb/md5.inl Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. md5.inl. Go to the documentation of this file. 1/*; 2 * This an amalgamation of md5.c and md5.h into a single file; 3 * with all static declaration to reduce linker conflicts; 4 * in Civetweb.; 5 *; 6 * The MD5_STATIC declaration was added to facilitate static; 7 * inclusion.; 8 * No Face Press, LLC; 9 */; 10 ; 11/* $Id: md5.h,v 1.4 2002/04/13 19:20:28 lpd Exp $ */; 12/*; 13 Independent implementation of MD5 (RFC 1321).; 14 ; 15 This code implements the MD5 Algorithm defined in RFC 1321, whose; 16 text is available at; 17 http://www.ietf.org/rfc/rfc1321.txt; 18 The code is derived from the text of the RFC, including the test suite; 19 (section A.5) but excluding the rest of Appendix A. It does not include; 20 any code or documentation that is identified in the RFC as being; 21 copyrighted.; 22 ; 23 The original and principal author of md5.h is L. Peter Deutsch; 24 <ghost@aladdin.com>. Other authors are noted in the change history; 25 that follows (in reverse chronological order):; 26 ; 27 2002-04-13 lpd Removed support for non-ANSI compilers; removed; 28 references to Ghostscript; clarified derivation from RFC 1321;; 29 now handles byte order either statically or dynamically.; 30 1999-11-04 lpd Edited comments slightly for automatic TOC extraction.; 31 1999-10-18 lpd Fixed typo in header comment (ansi2knr rather than md5);; 32 added conditionalization for C++ compilation from Martin; 33 Purschke <purschke@bnl.gov>.; 34 1999-05-03 lpd Original version.; 35 */; 36 ; 37#if !defined(md5_INCLUDED); 38#define md5_INCLUDED; 39 ; 40/*; 41 * This package supports both compile-time and run-time determination of CPU; 42 * byte order. If ARCH_IS_BIG_ENDIAN is defined as 0, the code will be; 43 * compiled to run only on little-endian CPUs; if ARCH_IS_BIG_ENDIAN is; 44 * defined as non-zero, the code will be compiled to run only on big-endian; 45 * CPUs; ",MatchSource.WIKI,doc/master/md5_8inl_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/md5_8inl_source.html
Energy Efficiency,reduce,reduce,". ROOT: net/http/civetweb/md5.inl Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. md5.inl. Go to the documentation of this file. 1/*; 2 * This an amalgamation of md5.c and md5.h into a single file; 3 * with all static declaration to reduce linker conflicts; 4 * in Civetweb.; 5 *; 6 * The MD5_STATIC declaration was added to facilitate static; 7 * inclusion.; 8 * No Face Press, LLC; 9 */; 10 ; 11/* $Id: md5.h,v 1.4 2002/04/13 19:20:28 lpd Exp $ */; 12/*; 13 Independent implementation of MD5 (RFC 1321).; 14 ; 15 This code implements the MD5 Algorithm defined in RFC 1321, whose; 16 text is available at; 17 http://www.ietf.org/rfc/rfc1321.txt; 18 The code is derived from the text of the RFC, including the test suite; 19 (section A.5) but excluding the rest of Appendix A. It does not include; 20 any code or documentation that is identified in the RFC as being; 21 copyrighted.; 22 ; 23 The original and principal author of md5.h is L. Peter Deutsch; 24 <ghost@aladdin.com>. Other authors are noted in the change history; 25 that follows (in reverse chronological order):; 26 ; 27 2002-04-13 lpd Removed support for non-ANSI compilers; removed; 28 references to Ghostscript; clarified derivation from RFC 1321;; 29 now handles byte order either statically or dynamically.; 30 1999-11-04 lpd Edited comments slightly for automatic TOC extraction.; 31 1999-10-18 lpd Fixed typo in header comment (ansi2knr rather than md5);; 32 added conditionalization for C++ compilation from Martin; 33 Purschke <purschke@bnl.gov>.; 34 1999-05-03 lpd Original version.; 35 */; 36 ; 37#if !defined(md5_INCLUDED); 38#define md5_INCLUDED; 39 ; 40/*; 41 * This package supports both compile-time and run-time determination of CPU; 42 * byte order. If ARCH_IS_BIG_ENDIAN is defined as 0, the code will be; 43 * compiled to run only on little-endian CPUs; if ARCH_IS_BIG_ENDIAN is; 44 * defined as non-zero, the code will be compiled to run only on big-endian; 45 * CPUs; ",MatchSource.WIKI,doc/master/md5_8inl_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/md5_8inl_source.html
Integrability,message,message,"33 Purschke <purschke@bnl.gov>.; 34 1999-05-03 lpd Original version.; 35 */; 36 ; 37#if !defined(md5_INCLUDED); 38#define md5_INCLUDED; 39 ; 40/*; 41 * This package supports both compile-time and run-time determination of CPU; 42 * byte order. If ARCH_IS_BIG_ENDIAN is defined as 0, the code will be; 43 * compiled to run only on little-endian CPUs; if ARCH_IS_BIG_ENDIAN is; 44 * defined as non-zero, the code will be compiled to run only on big-endian; 45 * CPUs; if ARCH_IS_BIG_ENDIAN is not defined, the code will be compiled to; 46 * run on either big- or little-endian CPUs, but will run slightly less; 47 * efficiently on either one than if ARCH_IS_BIG_ENDIAN is defined.; 48 */; 49 ; 50typedef unsigned char md5_byte_t; /* 8-bit byte */; 51typedef unsigned int md5_word_t; /* 32-bit word */; 52 ; 53/* Define the state of the MD5 Algorithm. */; 54typedef struct md5_state_s {; 55 md5_word_t count[2]; /* message length in bits, lsw first */; 56 md5_word_t abcd[4]; /* digest buffer */; 57 md5_byte_t buf[64]; /* accumulate block */; 58} md5_state_t;; 59 ; 60#if defined(__cplusplus); 61extern ""C"" {; 62#endif; 63 ; 64/* Initialize the algorithm. */; 65MD5_STATIC void md5_init(md5_state_t *pms);; 66 ; 67/* Append a string to the message. */; 68MD5_STATIC void; 69md5_append(md5_state_t *pms, const md5_byte_t *data, size_t nbytes);; 70 ; 71/* Finish the message and return the digest. */; 72MD5_STATIC void md5_finish(md5_state_t *pms, md5_byte_t digest[16]);; 73 ; 74#if defined(__cplusplus); 75} /* end extern ""C"" */; 76#endif; 77 ; 78#endif /* md5_INCLUDED */; 79 ; 80/*; 81 Copyright (C) 1999, 2000, 2002 Aladdin Enterprises. All rights reserved.; 82 ; 83 This software is provided 'as-is', without any express or implied; 84 warranty. In no event will the authors be held liable for any damages; 85 arising from the use of this software.; 86 ; 87 Permission is granted to anyone to use this software for any purpose,; 88 including commercial applications, and to alter it and redistribut",MatchSource.WIKI,doc/master/md5_8inl_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/md5_8inl_source.html
Performance,perform,perform,"8);; 353 SET(c, d, a, b, 7, 16, T39);; 354 SET(b, c, d, a, 10, 23, T40);; 355 SET(a, b, c, d, 13, 4, T41);; 356 SET(d, a, b, c, 0, 11, T42);; 357 SET(c, d, a, b, 3, 16, T43);; 358 SET(b, c, d, a, 6, 23, T44);; 359 SET(a, b, c, d, 9, 4, T45);; 360 SET(d, a, b, c, 12, 11, T46);; 361 SET(c, d, a, b, 15, 16, T47);; 362 SET(b, c, d, a, 2, 23, T48);; 363#undef SET; 364 ; 365/* Round 4. */; 366/* Let [abcd k s t] denote the operation; 367 a = b + ((a + I(b,c,d) + X[k] + T[i]) <<< s). */; 368#define I(x, y, z) ((y) ^ ((x) | ~(z))); 369#define SET(a, b, c, d, k, s, Ti) \; 370 t = (a) + I(b, c, d) + X[k] + (Ti); \; 371 (a) = ROTATE_LEFT(t, s) + (b); 372 ; 373 /* Do the following 16 operations. */; 374 SET(a, b, c, d, 0, 6, T49);; 375 SET(d, a, b, c, 7, 10, T50);; 376 SET(c, d, a, b, 14, 15, T51);; 377 SET(b, c, d, a, 5, 21, T52);; 378 SET(a, b, c, d, 12, 6, T53);; 379 SET(d, a, b, c, 3, 10, T54);; 380 SET(c, d, a, b, 10, 15, T55);; 381 SET(b, c, d, a, 1, 21, T56);; 382 SET(a, b, c, d, 8, 6, T57);; 383 SET(d, a, b, c, 15, 10, T58);; 384 SET(c, d, a, b, 6, 15, T59);; 385 SET(b, c, d, a, 13, 21, T60);; 386 SET(a, b, c, d, 4, 6, T61);; 387 SET(d, a, b, c, 11, 10, T62);; 388 SET(c, d, a, b, 2, 15, T63);; 389 SET(b, c, d, a, 9, 21, T64);; 390#undef SET; 391 ; 392 /* Then perform the following additions. (That is increment each; 393 of the four registers by the value it had before this block; 394 was started.) */; 395 pms->abcd[0] += a;; 396 pms->abcd[1] += b;; 397 pms->abcd[2] += c;; 398 pms->abcd[3] += d;; 399}; 400 ; 401MD5_STATIC void; 402md5_init(md5_state_t *pms); 403{; 404 pms->count[0] = pms->count[1] = 0;; 405 pms->abcd[0] = 0x67452301;; 406 pms->abcd[1] = /*0xefcdab89*/ T_MASK ^ 0x10325476;; 407 pms->abcd[2] = /*0x98badcfe*/ T_MASK ^ 0x67452301;; 408 pms->abcd[3] = 0x10325476;; 409}; 410 ; 411MD5_STATIC void; 412md5_append(md5_state_t *pms, const md5_byte_t *data, size_t nbytes); 413{; 414 const md5_byte_t *p = data;; 415 size_t left = nbytes;; 416 size_t offset = (pms->co",MatchSource.WIKI,doc/master/md5_8inl_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/md5_8inl_source.html
Safety,avoid,avoid,"md5_process(md5_state_t *pms, const md5_byte_t *data /*[64]*/); 213{; 214 md5_word_t a = pms->abcd[0], b = pms->abcd[1], c = pms->abcd[2],; 215 d = pms->abcd[3];; 216 md5_word_t t;; 217#if BYTE_ORDER > 0; 218 /* Define storage only for big-endian CPUs. */; 219 md5_word_t X[16];; 220#else; 221 /* Define storage for little-endian or both types of CPUs. */; 222 md5_word_t xbuf[16];; 223 const md5_word_t *X;; 224#endif; 225 ; 226 {; 227#if BYTE_ORDER == 0; 228 /*; 229 * Determine dynamically whether this is a big-endian or; 230 * little-endian machine, since we can use a more efficient; 231 * algorithm on the latter.; 232 */; 233 static const int w = 1;; 234 ; 235 if (*((const md5_byte_t *)&w)) /* dynamic little-endian */; 236#endif; 237#if BYTE_ORDER <= 0 /* little-endian */; 238 {; 239 /*; 240 * On little-endian machines, we can process properly aligned; 241 * data without copying it.; 242 */; 243 if (!(((uintptr_t) data) & 3)) {; 244 /* data are properly aligned, a direct assignment is possible */; 245 /* cast through a (void *) should avoid a compiler warning,; 246 see; 247 https://github.com/bel2125/civetweb/issues/94#issuecomment-98112861; 248 */; 249 X = (const md5_word_t *)(const void *)data;; 250 } else {; 251 /* not aligned */; 252 memcpy(xbuf, data, 64);; 253 X = xbuf;; 254 }; 255 }; 256#endif; 257#if BYTE_ORDER == 0; 258 else /* dynamic big-endian */; 259#endif; 260#if BYTE_ORDER >= 0 /* big-endian */; 261 {; 262 /*; 263 * On big-endian machines, we must arrange the bytes in the; 264 * right order.; 265 */; 266 const md5_byte_t *xp = data;; 267 int i;; 268 ; 269#if BYTE_ORDER == 0; 270 X = xbuf; /* (dynamic only) */; 271#else; 272#define xbuf X /* (static only) */; 273#endif; 274 for (i = 0; i < 16; ++i, xp += 4); 275 xbuf[i] = (md5_word_t)(xp[0]) + (md5_word_t)(xp[1] << 8); 276 + (md5_word_t)(xp[2] << 16); 277 + (md5_word_t)(xp[3] << 24);; 278 }; 279#endif; 280 }; 281 ; 282#define ROTATE_LEFT(x, n) (((x) << (n)) | ((x) >> (32 - (n)))); 283 ; 284/* Round 1. *",MatchSource.WIKI,doc/master/md5_8inl_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/md5_8inl_source.html
Testability,test,test,". ROOT: net/http/civetweb/md5.inl Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. md5.inl. Go to the documentation of this file. 1/*; 2 * This an amalgamation of md5.c and md5.h into a single file; 3 * with all static declaration to reduce linker conflicts; 4 * in Civetweb.; 5 *; 6 * The MD5_STATIC declaration was added to facilitate static; 7 * inclusion.; 8 * No Face Press, LLC; 9 */; 10 ; 11/* $Id: md5.h,v 1.4 2002/04/13 19:20:28 lpd Exp $ */; 12/*; 13 Independent implementation of MD5 (RFC 1321).; 14 ; 15 This code implements the MD5 Algorithm defined in RFC 1321, whose; 16 text is available at; 17 http://www.ietf.org/rfc/rfc1321.txt; 18 The code is derived from the text of the RFC, including the test suite; 19 (section A.5) but excluding the rest of Appendix A. It does not include; 20 any code or documentation that is identified in the RFC as being; 21 copyrighted.; 22 ; 23 The original and principal author of md5.h is L. Peter Deutsch; 24 <ghost@aladdin.com>. Other authors are noted in the change history; 25 that follows (in reverse chronological order):; 26 ; 27 2002-04-13 lpd Removed support for non-ANSI compilers; removed; 28 references to Ghostscript; clarified derivation from RFC 1321;; 29 now handles byte order either statically or dynamically.; 30 1999-11-04 lpd Edited comments slightly for automatic TOC extraction.; 31 1999-10-18 lpd Fixed typo in header comment (ansi2knr rather than md5);; 32 added conditionalization for C++ compilation from Martin; 33 Purschke <purschke@bnl.gov>.; 34 1999-05-03 lpd Original version.; 35 */; 36 ; 37#if !defined(md5_INCLUDED); 38#define md5_INCLUDED; 39 ; 40/*; 41 * This package supports both compile-time and run-time determination of CPU; 42 * byte order. If ARCH_IS_BIG_ENDIAN is defined as 0, the code will be; 43 * compiled to run only on little-endian CPUs; if ARCH_IS_BIG_ENDIAN is; 44 * defined as non-zero, the code will be compiled to run only on big-endian; 45 * CPUs; ",MatchSource.WIKI,doc/master/md5_8inl_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/md5_8inl_source.html
Availability,robust,robust,". ROOT: RNTuple Introduction. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. RNTuple Introduction. RNTuple (for n-tuple and nested tuple) is the experimental evolution of TTree columnar data storage. RNTuple introduces new interfaces that aim to be more robust. In particular, the new interfaces are type-safe through the use of templates, and the ownership is well-defined through the use of smart pointers. For instance tree->Branch(""px"", &Category, ""px/F"");; becomes auto px = model->MakeField<float>(""px"");; // px is std::shared_ptr<float>; The physical layout changes slightly from big endian to little endian so that it matches the in-memory layout on most modern architectures. Combined with a clear separation of offset/index data and payload data for collections, uncompressed RNTuple data can be directly mapped to memory without further copies. Goals; RNTuple shall investigate improvements of the TTree I/O in the following ways. More speed; Improve mapping to vectorized and parallel hardware; For types known at compile / JIT time: generate optimized code; Optimized for simple types (float, int, and vectors of them); Better memory control: work with a fixed budget of pre-defined I/O buffers; Naturally thread-safe and asynchronous interfaces. More robust interfaces; Compile-time type safety by default; Decomposition into layers: logical layer, primitives layer, storage layer; Separation of data model and live data; Self-contained I/O code to support creation of a standalone I/O library. Concepts; At the logical layer, the user defines a data model using the RNTupleModel class. The data model is a collection of serializable C++ types with associated names, similar to branches in a TTree. The data model can contain (nested) collections, e.g., a type can be std::vector<std::vector<float>>.; Each serializable type is represented by a field, concretely by a templated version of RField, e.g. RField<double>. A field can generate or adopt an as",MatchSource.WIKI,doc/master/md_tree_2ntuple_2v7_2doc_2README.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/md_tree_2ntuple_2v7_2doc_2README.html
Integrability,interface,interfaces,". ROOT: RNTuple Introduction. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. RNTuple Introduction. RNTuple (for n-tuple and nested tuple) is the experimental evolution of TTree columnar data storage. RNTuple introduces new interfaces that aim to be more robust. In particular, the new interfaces are type-safe through the use of templates, and the ownership is well-defined through the use of smart pointers. For instance tree->Branch(""px"", &Category, ""px/F"");; becomes auto px = model->MakeField<float>(""px"");; // px is std::shared_ptr<float>; The physical layout changes slightly from big endian to little endian so that it matches the in-memory layout on most modern architectures. Combined with a clear separation of offset/index data and payload data for collections, uncompressed RNTuple data can be directly mapped to memory without further copies. Goals; RNTuple shall investigate improvements of the TTree I/O in the following ways. More speed; Improve mapping to vectorized and parallel hardware; For types known at compile / JIT time: generate optimized code; Optimized for simple types (float, int, and vectors of them); Better memory control: work with a fixed budget of pre-defined I/O buffers; Naturally thread-safe and asynchronous interfaces. More robust interfaces; Compile-time type safety by default; Decomposition into layers: logical layer, primitives layer, storage layer; Separation of data model and live data; Self-contained I/O code to support creation of a standalone I/O library. Concepts; At the logical layer, the user defines a data model using the RNTupleModel class. The data model is a collection of serializable C++ types with associated names, similar to branches in a TTree. The data model can contain (nested) collections, e.g., a type can be std::vector<std::vector<float>>.; Each serializable type is represented by a field, concretely by a templated version of RField, e.g. RField<double>. A field can generate or adopt an as",MatchSource.WIKI,doc/master/md_tree_2ntuple_2v7_2doc_2README.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/md_tree_2ntuple_2v7_2doc_2README.html
Modifiability,layers,layers,"he use of smart pointers. For instance tree->Branch(""px"", &Category, ""px/F"");; becomes auto px = model->MakeField<float>(""px"");; // px is std::shared_ptr<float>; The physical layout changes slightly from big endian to little endian so that it matches the in-memory layout on most modern architectures. Combined with a clear separation of offset/index data and payload data for collections, uncompressed RNTuple data can be directly mapped to memory without further copies. Goals; RNTuple shall investigate improvements of the TTree I/O in the following ways. More speed; Improve mapping to vectorized and parallel hardware; For types known at compile / JIT time: generate optimized code; Optimized for simple types (float, int, and vectors of them); Better memory control: work with a fixed budget of pre-defined I/O buffers; Naturally thread-safe and asynchronous interfaces. More robust interfaces; Compile-time type safety by default; Decomposition into layers: logical layer, primitives layer, storage layer; Separation of data model and live data; Self-contained I/O code to support creation of a standalone I/O library. Concepts; At the logical layer, the user defines a data model using the RNTupleModel class. The data model is a collection of serializable C++ types with associated names, similar to branches in a TTree. The data model can contain (nested) collections, e.g., a type can be std::vector<std::vector<float>>.; Each serializable type is represented by a field, concretely by a templated version of RField, e.g. RField<double>. A field can generate or adopt an associated value, which represents a memory location storing a value of the given C++ type. These distinguished memory locations are the destinations and sources for the deserialization and serialization.; The (de-)serialization is a mapping from the C++ type to the more simple column type system. A column contains an arbitrary number of fixed-sized elements of a well-defined set of types: integers and floats of dif",MatchSource.WIKI,doc/master/md_tree_2ntuple_2v7_2doc_2README.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/md_tree_2ntuple_2v7_2doc_2README.html
Performance,optimiz,optimized,"NTuple (for n-tuple and nested tuple) is the experimental evolution of TTree columnar data storage. RNTuple introduces new interfaces that aim to be more robust. In particular, the new interfaces are type-safe through the use of templates, and the ownership is well-defined through the use of smart pointers. For instance tree->Branch(""px"", &Category, ""px/F"");; becomes auto px = model->MakeField<float>(""px"");; // px is std::shared_ptr<float>; The physical layout changes slightly from big endian to little endian so that it matches the in-memory layout on most modern architectures. Combined with a clear separation of offset/index data and payload data for collections, uncompressed RNTuple data can be directly mapped to memory without further copies. Goals; RNTuple shall investigate improvements of the TTree I/O in the following ways. More speed; Improve mapping to vectorized and parallel hardware; For types known at compile / JIT time: generate optimized code; Optimized for simple types (float, int, and vectors of them); Better memory control: work with a fixed budget of pre-defined I/O buffers; Naturally thread-safe and asynchronous interfaces. More robust interfaces; Compile-time type safety by default; Decomposition into layers: logical layer, primitives layer, storage layer; Separation of data model and live data; Self-contained I/O code to support creation of a standalone I/O library. Concepts; At the logical layer, the user defines a data model using the RNTupleModel class. The data model is a collection of serializable C++ types with associated names, similar to branches in a TTree. The data model can contain (nested) collections, e.g., a type can be std::vector<std::vector<float>>.; Each serializable type is represented by a field, concretely by a templated version of RField, e.g. RField<double>. A field can generate or adopt an associated value, which represents a memory location storing a value of the given C++ type. These distinguished memory locations are th",MatchSource.WIKI,doc/master/md_tree_2ntuple_2v7_2doc_2README.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/md_tree_2ntuple_2v7_2doc_2README.html
Safety,safe,safe,". ROOT: RNTuple Introduction. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. RNTuple Introduction. RNTuple (for n-tuple and nested tuple) is the experimental evolution of TTree columnar data storage. RNTuple introduces new interfaces that aim to be more robust. In particular, the new interfaces are type-safe through the use of templates, and the ownership is well-defined through the use of smart pointers. For instance tree->Branch(""px"", &Category, ""px/F"");; becomes auto px = model->MakeField<float>(""px"");; // px is std::shared_ptr<float>; The physical layout changes slightly from big endian to little endian so that it matches the in-memory layout on most modern architectures. Combined with a clear separation of offset/index data and payload data for collections, uncompressed RNTuple data can be directly mapped to memory without further copies. Goals; RNTuple shall investigate improvements of the TTree I/O in the following ways. More speed; Improve mapping to vectorized and parallel hardware; For types known at compile / JIT time: generate optimized code; Optimized for simple types (float, int, and vectors of them); Better memory control: work with a fixed budget of pre-defined I/O buffers; Naturally thread-safe and asynchronous interfaces. More robust interfaces; Compile-time type safety by default; Decomposition into layers: logical layer, primitives layer, storage layer; Separation of data model and live data; Self-contained I/O code to support creation of a standalone I/O library. Concepts; At the logical layer, the user defines a data model using the RNTupleModel class. The data model is a collection of serializable C++ types with associated names, similar to branches in a TTree. The data model can contain (nested) collections, e.g., a type can be std::vector<std::vector<float>>.; Each serializable type is represented by a field, concretely by a templated version of RField, e.g. RField<double>. A field can generate or adopt an as",MatchSource.WIKI,doc/master/md_tree_2ntuple_2v7_2doc_2README.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/md_tree_2ntuple_2v7_2doc_2README.html
Testability,log,logical,"he use of smart pointers. For instance tree->Branch(""px"", &Category, ""px/F"");; becomes auto px = model->MakeField<float>(""px"");; // px is std::shared_ptr<float>; The physical layout changes slightly from big endian to little endian so that it matches the in-memory layout on most modern architectures. Combined with a clear separation of offset/index data and payload data for collections, uncompressed RNTuple data can be directly mapped to memory without further copies. Goals; RNTuple shall investigate improvements of the TTree I/O in the following ways. More speed; Improve mapping to vectorized and parallel hardware; For types known at compile / JIT time: generate optimized code; Optimized for simple types (float, int, and vectors of them); Better memory control: work with a fixed budget of pre-defined I/O buffers; Naturally thread-safe and asynchronous interfaces. More robust interfaces; Compile-time type safety by default; Decomposition into layers: logical layer, primitives layer, storage layer; Separation of data model and live data; Self-contained I/O code to support creation of a standalone I/O library. Concepts; At the logical layer, the user defines a data model using the RNTupleModel class. The data model is a collection of serializable C++ types with associated names, similar to branches in a TTree. The data model can contain (nested) collections, e.g., a type can be std::vector<std::vector<float>>.; Each serializable type is represented by a field, concretely by a templated version of RField, e.g. RField<double>. A field can generate or adopt an associated value, which represents a memory location storing a value of the given C++ type. These distinguished memory locations are the destinations and sources for the deserialization and serialization.; The (de-)serialization is a mapping from the C++ type to the more simple column type system. A column contains an arbitrary number of fixed-sized elements of a well-defined set of types: integers and floats of dif",MatchSource.WIKI,doc/master/md_tree_2ntuple_2v7_2doc_2README.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/md_tree_2ntuple_2v7_2doc_2README.html
Usability,clear,clear,". ROOT: RNTuple Introduction. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. RNTuple Introduction. RNTuple (for n-tuple and nested tuple) is the experimental evolution of TTree columnar data storage. RNTuple introduces new interfaces that aim to be more robust. In particular, the new interfaces are type-safe through the use of templates, and the ownership is well-defined through the use of smart pointers. For instance tree->Branch(""px"", &Category, ""px/F"");; becomes auto px = model->MakeField<float>(""px"");; // px is std::shared_ptr<float>; The physical layout changes slightly from big endian to little endian so that it matches the in-memory layout on most modern architectures. Combined with a clear separation of offset/index data and payload data for collections, uncompressed RNTuple data can be directly mapped to memory without further copies. Goals; RNTuple shall investigate improvements of the TTree I/O in the following ways. More speed; Improve mapping to vectorized and parallel hardware; For types known at compile / JIT time: generate optimized code; Optimized for simple types (float, int, and vectors of them); Better memory control: work with a fixed budget of pre-defined I/O buffers; Naturally thread-safe and asynchronous interfaces. More robust interfaces; Compile-time type safety by default; Decomposition into layers: logical layer, primitives layer, storage layer; Separation of data model and live data; Self-contained I/O code to support creation of a standalone I/O library. Concepts; At the logical layer, the user defines a data model using the RNTupleModel class. The data model is a collection of serializable C++ types with associated names, similar to branches in a TTree. The data model can contain (nested) collections, e.g., a type can be std::vector<std::vector<float>>.; Each serializable type is represented by a field, concretely by a templated version of RField, e.g. RField<double>. A field can generate or adopt an as",MatchSource.WIKI,doc/master/md_tree_2ntuple_2v7_2doc_2README.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/md_tree_2ntuple_2v7_2doc_2README.html
Integrability,depend,dependency,". ROOT: graf3d/eve7/glu/mesh.c File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Macros |; Functions ; mesh.c File Reference. #include ""gluos.h""; #include <stddef.h>; #include <assert.h>; #include ""mesh.h""; #include ""memalloc.h"". Include dependency graph for mesh.c:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Macros; #define FALSE   0;  ; #define TRUE   1;  . Functions; GLUhalfEdge * __gl_meshAddEdgeVertex (GLUhalfEdge *eOrg);  ; void __gl_meshCheckMesh (GLUmesh *mesh);  ; GLUhalfEdge * __gl_meshConnect (GLUhalfEdge *eOrg, GLUhalfEdge *eDst);  ; int __gl_meshDelete (GLUhalfEdge *eDel);  ; void __gl_meshDeleteMesh (GLUmesh *mesh);  ; GLUhalfEdge * __gl_meshMakeEdge (GLUmesh *mesh);  ; GLUmesh * __gl_meshNewMesh (void);  ; int __gl_meshSplice (GLUhalfEdge *eOrg, GLUhalfEdge *eDst);  ; GLUhalfEdge * __gl_meshSplitEdge (GLUhalfEdge *eOrg);  ; GLUmesh * __gl_meshUnion (GLUmesh *mesh1, GLUmesh *mesh2);  ; void __gl_meshZapFace (GLUface *fZap);  ; static GLUface * allocFace ();  ; static GLUvertex * allocVertex ();  ; static void KillEdge (GLUhalfEdge *eDel);  ; static void KillFace (GLUface *fDel, GLUface *newLface);  ; static void KillVertex (GLUvertex *vDel, GLUvertex *newOrg);  ; static GLUhalfEdge * MakeEdge (GLUhalfEdge *eNext);  ; static void MakeFace (GLUface *newFace, GLUhalfEdge *eOrig, GLUface *fNext);  ; static void MakeVertex (GLUvertex *newVertex, GLUhalfEdge *eOrig, GLUvertex *vNext);  ; static void Splice (GLUhalfEdge *a, GLUhalfEdge *b);  . Macro Definition Documentation. ◆ FALSE. #define FALSE   0. Definition at line 45 of file mesh.c. ◆ TRUE. #define TRUE   1. Definition at line 42 of file mesh.c. Function Documentation. ◆ __gl_meshAddEdgeVertex(). GLUhalfEdge * __gl_meshAddEdgeVertex ; (; GLUhalfEdge * ; eOrg). Definition at line 441 of file mesh.c. ◆ __gl_meshCheckMesh(). void __gl_meshCheckMesh ; (; GLUmesh * ; mesh). Definition at line 737 of file mesh.c. ◆ __gl_m",MatchSource.WIKI,doc/master/mesh_8c.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/mesh_8c.html
Testability,assert,assert,". ROOT: graf3d/eve7/glu/mesh.c File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Macros |; Functions ; mesh.c File Reference. #include ""gluos.h""; #include <stddef.h>; #include <assert.h>; #include ""mesh.h""; #include ""memalloc.h"". Include dependency graph for mesh.c:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Macros; #define FALSE   0;  ; #define TRUE   1;  . Functions; GLUhalfEdge * __gl_meshAddEdgeVertex (GLUhalfEdge *eOrg);  ; void __gl_meshCheckMesh (GLUmesh *mesh);  ; GLUhalfEdge * __gl_meshConnect (GLUhalfEdge *eOrg, GLUhalfEdge *eDst);  ; int __gl_meshDelete (GLUhalfEdge *eDel);  ; void __gl_meshDeleteMesh (GLUmesh *mesh);  ; GLUhalfEdge * __gl_meshMakeEdge (GLUmesh *mesh);  ; GLUmesh * __gl_meshNewMesh (void);  ; int __gl_meshSplice (GLUhalfEdge *eOrg, GLUhalfEdge *eDst);  ; GLUhalfEdge * __gl_meshSplitEdge (GLUhalfEdge *eOrg);  ; GLUmesh * __gl_meshUnion (GLUmesh *mesh1, GLUmesh *mesh2);  ; void __gl_meshZapFace (GLUface *fZap);  ; static GLUface * allocFace ();  ; static GLUvertex * allocVertex ();  ; static void KillEdge (GLUhalfEdge *eDel);  ; static void KillFace (GLUface *fDel, GLUface *newLface);  ; static void KillVertex (GLUvertex *vDel, GLUvertex *newOrg);  ; static GLUhalfEdge * MakeEdge (GLUhalfEdge *eNext);  ; static void MakeFace (GLUface *newFace, GLUhalfEdge *eOrig, GLUface *fNext);  ; static void MakeVertex (GLUvertex *newVertex, GLUhalfEdge *eOrig, GLUvertex *vNext);  ; static void Splice (GLUhalfEdge *a, GLUhalfEdge *b);  . Macro Definition Documentation. ◆ FALSE. #define FALSE   0. Definition at line 45 of file mesh.c. ◆ TRUE. #define TRUE   1. Definition at line 42 of file mesh.c. Function Documentation. ◆ __gl_meshAddEdgeVertex(). GLUhalfEdge * __gl_meshAddEdgeVertex ; (; GLUhalfEdge * ; eOrg). Definition at line 441 of file mesh.c. ◆ __gl_meshCheckMesh(). void __gl_meshCheckMesh ; (; GLUmesh * ; mesh). Definition at line 737 of file mesh.c. ◆ __gl_m",MatchSource.WIKI,doc/master/mesh_8c.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/mesh_8c.html
Deployability,update,updates,"ked ""inside"" if the old one was. This is a; 184 * convenience for the common case where a face has been split in two.; 185 */; 186 fNew->inside = fNext->inside;; 187 ; 188 /* fix other edges on this face loop */; 189 e = eOrig;; 190 do {; 191 e->Lface = fNew;; 192 e = e->Lnext;; 193 } while( e != eOrig );; 194}; 195 ; 196/* KillEdge( eDel ) destroys an edge (the half-edges eDel and eDel->Sym),; 197 * and removes from the global edge list.; 198 */; 199static void KillEdge( GLUhalfEdge *eDel ); 200{; 201 GLUhalfEdge *ePrev, *eNext;; 202 ; 203 /* Half-edges are allocated in pairs, see EdgePair above */; 204 if( eDel->Sym < eDel ) { eDel = eDel->Sym; }; 205 ; 206 /* delete from circular doubly-linked list */; 207 eNext = eDel->next;; 208 ePrev = eDel->Sym->next;; 209 eNext->Sym->next = ePrev;; 210 ePrev->Sym->next = eNext;; 211 ; 212 memFree( eDel );; 213}; 214 ; 215 ; 216/* KillVertex( vDel ) destroys a vertex and removes it from the global; 217 * vertex list. It updates the vertex loop to point to a given new vertex.; 218 */; 219static void KillVertex( GLUvertex *vDel, GLUvertex *newOrg ); 220{; 221 GLUhalfEdge *e, *eStart = vDel->anEdge;; 222 GLUvertex *vPrev, *vNext;; 223 ; 224 /* change the origin of all affected edges */; 225 e = eStart;; 226 do {; 227 e->Org = newOrg;; 228 e = e->Onext;; 229 } while( e != eStart );; 230 ; 231 /* delete from circular doubly-linked list */; 232 vPrev = vDel->prev;; 233 vNext = vDel->next;; 234 vNext->prev = vPrev;; 235 vPrev->next = vNext;; 236 ; 237 memFree( vDel );; 238}; 239 ; 240/* KillFace( fDel ) destroys a face and removes it from the global face; 241 * list. It updates the face loop to point to a given new face.; 242 */; 243static void KillFace( GLUface *fDel, GLUface *newLface ); 244{; 245 GLUhalfEdge *e, *eStart = fDel->anEdge;; 246 GLUface *fPrev, *fNext;; 247 ; 248 /* change the left face of all affected edges */; 249 e = eStart;; 250 do {; 251 e->Lface = newLface;; 252 e = e->Lnext;; 253 } while( e != eStart );; 254 ; 2",MatchSource.WIKI,doc/master/mesh_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/mesh_8c_source.html
Energy Efficiency,charge,charge,". ROOT: graf3d/eve7/glu/mesh.c Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. mesh.c. Go to the documentation of this file. 1/*; 2 * SGI FREE SOFTWARE LICENSE B (Version 2.0, Sept. 18, 2008); 3 * Copyright (C) 1991-2000 Silicon Graphics, Inc. All Rights Reserved.; 4 *; 5 * Permission is hereby granted, free of charge, to any person obtaining a; 6 * copy of this software and associated documentation files (the ""Software""),; 7 * to deal in the Software without restriction, including without limitation; 8 * the rights to use, copy, modify, merge, publish, distribute, sublicense,; 9 * and/or sell copies of the Software, and to permit persons to whom the; 10 * Software is furnished to do so, subject to the following conditions:; 11 *; 12 * The above copyright notice including the dates of first publication and; 13 * either this permission notice or a reference to; 14 * http://oss.sgi.com/projects/FreeB/; 15 * shall be included in all copies or substantial portions of the Software.; 16 *; 17 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS; 18 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; 19 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL; 20 * SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,; 21 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF; 22 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE; 23 * SOFTWARE.; 24 *; 25 * Except as contained in this notice, the name of Silicon Graphics, Inc.; 26 * shall not be used in advertising or otherwise to promote the sale, use or; 27 * other dealings in this Software without prior written authorization from; 28 * Silicon Graphics, Inc.; 29 */; 30/*; 31** Author: Eric Veach, July 1994.; 32**; 33*/; 34 ; 35#include ""gluos.h""; 36#include <stddef.h>; 37#include <assert.h>; 38#include ""mesh.h""; 39#include ""memalloc.h""; 40 ; 41#ifn",MatchSource.WIKI,doc/master/mesh_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/mesh_8c_source.html
Integrability,depend,depending,"m = &pair->eSym;; 74 ; 75 /* Make sure eNext points to the first edge of the edge pair */; 76 if( eNext->Sym < eNext ) { eNext = eNext->Sym; }; 77 ; 78 /* Insert in circular doubly-linked list before eNext.; 79 * Note that the prev pointer is stored in Sym->next.; 80 */; 81 ePrev = eNext->Sym->next;; 82 eSym->next = ePrev;; 83 ePrev->Sym->next = e;; 84 e->next = eNext;; 85 eNext->Sym->next = eSym;; 86 ; 87 e->Sym = eSym;; 88 e->Onext = e;; 89 e->Lnext = eSym;; 90 e->Org = NULL;; 91 e->Lface = NULL;; 92 e->winding = 0;; 93 e->activeRegion = NULL;; 94 ; 95 eSym->Sym = e;; 96 eSym->Onext = eSym;; 97 eSym->Lnext = e;; 98 eSym->Org = NULL;; 99 eSym->Lface = NULL;; 100 eSym->winding = 0;; 101 eSym->activeRegion = NULL;; 102 ; 103 return e;; 104}; 105 ; 106/* Splice( a, b ) is best described by the Guibas/Stolfi paper or the; 107 * CS348a notes (see mesh.h). Basically it modifies the mesh so that; 108 * a->Onext and b->Onext are exchanged. This can have various effects; 109 * depending on whether a and b belong to different face or vertex rings.; 110 * For more explanation see __gl_meshSplice() below.; 111 */; 112static void Splice( GLUhalfEdge *a, GLUhalfEdge *b ); 113{; 114 GLUhalfEdge *aOnext = a->Onext;; 115 GLUhalfEdge *bOnext = b->Onext;; 116 ; 117 aOnext->Sym->Lnext = b;; 118 bOnext->Sym->Lnext = a;; 119 a->Onext = bOnext;; 120 b->Onext = aOnext;; 121}; 122 ; 123/* MakeVertex( newVertex, eOrig, vNext ) attaches a new vertex and makes it the; 124 * origin of all edges in the vertex loop to which eOrig belongs. ""vNext"" gives; 125 * a place to insert the new vertex in the global vertex list. We insert; 126 * the new vertex *before* vNext so that algorithms which walk the vertex; 127 * list will not see the newly created vertices.; 128 */; 129static void MakeVertex( GLUvertex *newVertex,; 130 GLUhalfEdge *eOrig, GLUvertex *vNext ); 131{; 132 GLUhalfEdge *e;; 133 GLUvertex *vPrev;; 134 GLUvertex *vNew = newVertex;; 135 ; 136 assert(vNew != NULL);; 137 ; 138 /* insert in ",MatchSource.WIKI,doc/master/mesh_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/mesh_8c_source.html
Security,authoriz,authorization,"ftware is furnished to do so, subject to the following conditions:; 11 *; 12 * The above copyright notice including the dates of first publication and; 13 * either this permission notice or a reference to; 14 * http://oss.sgi.com/projects/FreeB/; 15 * shall be included in all copies or substantial portions of the Software.; 16 *; 17 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS; 18 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; 19 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL; 20 * SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,; 21 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF; 22 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE; 23 * SOFTWARE.; 24 *; 25 * Except as contained in this notice, the name of Silicon Graphics, Inc.; 26 * shall not be used in advertising or otherwise to promote the sale, use or; 27 * other dealings in this Software without prior written authorization from; 28 * Silicon Graphics, Inc.; 29 */; 30/*; 31** Author: Eric Veach, July 1994.; 32**; 33*/; 34 ; 35#include ""gluos.h""; 36#include <stddef.h>; 37#include <assert.h>; 38#include ""mesh.h""; 39#include ""memalloc.h""; 40 ; 41#ifndef TRUE; 42#define TRUE 1; 43#endif; 44#ifndef FALSE; 45#define FALSE 0; 46#endif; 47 ; 48static GLUvertex *allocVertex(); 49{; 50 return (GLUvertex *)memAlloc( sizeof( GLUvertex ));; 51}; 52 ; 53static GLUface *allocFace(); 54{; 55 return (GLUface *)memAlloc( sizeof( GLUface ));; 56}; 57 ; 58/************************ Utility Routines ************************/; 59 ; 60/* MakeEdge creates a new pair of half-edges which form their own loop.; 61 * No vertex or face structures are allocated, but these must be assigned; 62 * before the current edge operation is completed.; 63 */; 64static GLUhalfEdge *MakeEdge( GLUhalfEdge *eNext ); 65{; 66 GLUhalfEdge *e;; 67 GLUhalfEdge *eSym;; 68 GLUhalfEdge *ePrev;; 69 ",MatchSource.WIKI,doc/master/mesh_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/mesh_8c_source.html
Testability,assert,assert,"://oss.sgi.com/projects/FreeB/; 15 * shall be included in all copies or substantial portions of the Software.; 16 *; 17 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS; 18 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; 19 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL; 20 * SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,; 21 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF; 22 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE; 23 * SOFTWARE.; 24 *; 25 * Except as contained in this notice, the name of Silicon Graphics, Inc.; 26 * shall not be used in advertising or otherwise to promote the sale, use or; 27 * other dealings in this Software without prior written authorization from; 28 * Silicon Graphics, Inc.; 29 */; 30/*; 31** Author: Eric Veach, July 1994.; 32**; 33*/; 34 ; 35#include ""gluos.h""; 36#include <stddef.h>; 37#include <assert.h>; 38#include ""mesh.h""; 39#include ""memalloc.h""; 40 ; 41#ifndef TRUE; 42#define TRUE 1; 43#endif; 44#ifndef FALSE; 45#define FALSE 0; 46#endif; 47 ; 48static GLUvertex *allocVertex(); 49{; 50 return (GLUvertex *)memAlloc( sizeof( GLUvertex ));; 51}; 52 ; 53static GLUface *allocFace(); 54{; 55 return (GLUface *)memAlloc( sizeof( GLUface ));; 56}; 57 ; 58/************************ Utility Routines ************************/; 59 ; 60/* MakeEdge creates a new pair of half-edges which form their own loop.; 61 * No vertex or face structures are allocated, but these must be assigned; 62 * before the current edge operation is completed.; 63 */; 64static GLUhalfEdge *MakeEdge( GLUhalfEdge *eNext ); 65{; 66 GLUhalfEdge *e;; 67 GLUhalfEdge *eSym;; 68 GLUhalfEdge *ePrev;; 69 EdgePair *pair = (EdgePair *)memAlloc( sizeof( EdgePair ));; 70 if (pair == NULL) return NULL;; 71 ; 72 e = &pair->e;; 73 eSym = &pair->eSym;; 74 ; 75 /* Make sure eNext points to the first edge of the edge pair */; ",MatchSource.WIKI,doc/master/mesh_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/mesh_8c_source.html
Availability,error,errors,"* (see tmva/doc/LICENSE) *; 31 **********************************************************************************/; 32 ; 33#ifndef ROOT_TMVA_MethodBase; 34#define ROOT_TMVA_MethodBase; 35 ; 36//////////////////////////////////////////////////////////////////////////; 37// //; 38// MethodBase //; 39// //; 40// Virtual base class for all TMVA method //; 41// //; 42//////////////////////////////////////////////////////////////////////////; 43 ; 44#include <iosfwd>; 45#include <vector>; 46#include <map>; 47#include ""assert.h""; 48 ; 49#include ""TString.h""; 50 ; 51#include ""TMVA/IMethod.h""; 52#include ""TMVA/Configurable.h""; 53#include ""TMVA/Types.h""; 54#include ""TMVA/DataSet.h""; 55#include ""TMVA/Event.h""; 56#include ""TMVA/TransformationHandler.h""; 57#include <TMVA/Results.h>; 58#include ""TMVA/TrainingHistory.h""; 59 ; 60#include <TFile.h>; 61 ; 62class TGraph;; 63class TTree;; 64class TDirectory;; 65class TSpline;; 66class TH1F;; 67class TH1D;; 68class TMultiGraph;; 69 ; 70/*! \class TMVA::IPythonInteractive; 71\ingroup TMVA; 72 ; 73This class is needed by JsMVA, and it's a helper class for tracking errors during; 74the training in Jupyter notebook. It’s only initialized in Jupyter notebook context.; 75In initialization we specify some title, and a TGraph will be created for every title.; 76We can add new data points easily to all TGraphs. These graphs are added to a; 77TMultiGraph, and during an interactive training we get this TMultiGraph object; 78and plot it with JsROOT.; 79*/; 80 ; 81namespace TMVA {; 82 ; 83 class Ranking;; 84 class PDF;; 85 class TSpline1;; 86 class MethodCuts;; 87 class MethodBoost;; 88 class DataSetInfo;; 89 namespace Experimental {; 90 class Classification;; 91 }; 92 class TrainingHistory;; 93 ; 94 class IPythonInteractive {; 95 public:; 96 IPythonInteractive();; 97 ~IPythonInteractive();; 98 void Init(std::vector<TString>& graphTitles);; 99 void ClearGraphs();; 100 void AddPoint(Double_t x, Double_t y1, Double_t y2);; 101 void AddPoint(std::vecto",MatchSource.WIKI,doc/master/MethodBase_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html
Deployability,integrat,integrated,". ROOT: tmva/tmva/inc/TMVA/MethodBase.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. MethodBase.h. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; 3 ; 4/**********************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 6 * Package: TMVA *; 7 * Class : MethodBase *; 8 * *; 9 * *; 10 * Description: *; 11 * Virtual base class for all MVA method *; 12 * *; 13 * Authors (alphabetical): *; 14 * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; 15 * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; 16 * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; 17 * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; 18 * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; 19 * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; 20 * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; 21 * *; 22 * Copyright (c) 2005-2011: *; 23 * CERN, Switzerland *; 24 * U. of Victoria, Canada *; 25 * MPI-K Heidelberg, Germany *; 26 * U. of Bonn, Germany *; 27 * *; 28 * Redistribution and use in source and binary forms, with or without *; 29 * modification, are permitted according to the terms listed in LICENSE *; 30 * (see tmva/doc/LICENSE) *; 31 **********************************************************************************/; 32 ; 33#ifndef ROOT_TMVA_MethodBase; 34#define ROOT_TMVA_MethodBase; 35 ; 36//////////////////////////////////////////////////////////////////////////; 37// //; 38// MethodBase //; 39// //; 40// Virtual base class for all TMVA method //; 41// //; 42//////////////////////////////////////////////////////////////////////////; 43 ; 44#include <iosfwd>; 45#include <vector>; 46#include <map>; 47#include ""assert.h""; 48 ; 49#include """,MatchSource.WIKI,doc/master/MethodBase_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html
Energy Efficiency,monitor,monitoring,"268 private:; 269 friend class MethodCategory;; 270 friend class MethodCompositeBase;; 271 void WriteStateToXML ( void* parent ) const;; 272 void ReadStateFromXML ( void* parent );; 273 void WriteStateToStream ( std::ostream& tf ) const; // needed for MakeClass; 274 void WriteVarsToStream ( std::ostream& tf, const TString& prefix = """" ) const; // needed for MakeClass; 275 ; 276 ; 277 public: // these two need to be public, they are used to read in-memory weight-files; 278 void ReadStateFromStream ( std::istream& tf ); // backward compatibility; 279 void ReadStateFromStream ( TFile& rf ); // backward compatibility; 280 void ReadStateFromXMLString( const char* xmlstr ); // for reading from memory; 281 ; 282 private:; 283 // the variable information; 284 void AddVarsXMLTo ( void* parent ) const;; 285 void AddSpectatorsXMLTo ( void* parent ) const;; 286 void AddTargetsXMLTo ( void* parent ) const;; 287 void AddClassesXMLTo ( void* parent ) const;; 288 void ReadVariablesFromXML ( void* varnode );; 289 void ReadSpectatorsFromXML( void* specnode);; 290 void ReadTargetsFromXML ( void* tarnode );; 291 void ReadClassesFromXML ( void* clsnode );; 292 void ReadVarsFromStream ( std::istream& istr ); // backward compatibility; 293 ; 294 public:; 295 // ---------------------------------------------------------------------------; 296 ; 297 // write evaluation histograms into target file; 298 virtual void WriteEvaluationHistosToFile(Types::ETreeType treetype);; 299 ; 300 // write classifier-specific monitoring information to target file; 301 virtual void WriteMonitoringHistosToFile() const;; 302 ; 303 // ---------- public evaluation methods --------------------------------------; 304 ; 305 // individual initialization for testing of each method; 306 // overload this one for individual initialisation of the testing,; 307 // it is then called automatically within the global ""TestInit""; 308 ; 309 // variables (and private member functions) for the Evaluation:; 310 // get the efficiency.",MatchSource.WIKI,doc/master/MethodBase_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html
Integrability,integrat,integrated,". ROOT: tmva/tmva/inc/TMVA/MethodBase.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. MethodBase.h. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag; 3 ; 4/**********************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 6 * Package: TMVA *; 7 * Class : MethodBase *; 8 * *; 9 * *; 10 * Description: *; 11 * Virtual base class for all MVA method *; 12 * *; 13 * Authors (alphabetical): *; 14 * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; 15 * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; 16 * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; 17 * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; 18 * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; 19 * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; 20 * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; 21 * *; 22 * Copyright (c) 2005-2011: *; 23 * CERN, Switzerland *; 24 * U. of Victoria, Canada *; 25 * MPI-K Heidelberg, Germany *; 26 * U. of Bonn, Germany *; 27 * *; 28 * Redistribution and use in source and binary forms, with or without *; 29 * modification, are permitted according to the terms listed in LICENSE *; 30 * (see tmva/doc/LICENSE) *; 31 **********************************************************************************/; 32 ; 33#ifndef ROOT_TMVA_MethodBase; 34#define ROOT_TMVA_MethodBase; 35 ; 36//////////////////////////////////////////////////////////////////////////; 37// //; 38// MethodBase //; 39// //; 40// Virtual base class for all TMVA method //; 41// //; 42//////////////////////////////////////////////////////////////////////////; 43 ; 44#include <iosfwd>; 45#include <vector>; 46#include <map>; 47#include ""assert.h""; 48 ; 49#include """,MatchSource.WIKI,doc/master/MethodBase_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html
Modifiability,config,configuration,"ultiGraph;; 106 std::vector<TGraph*> fGraphs;; 107 Int_t fNumGraphs;; 108 Int_t fIndex;; 109 };; 110 ; 111 class MethodBase : virtual public IMethod, public Configurable {; 112 ; 113 friend class CrossValidation;; 114 friend class Factory;; 115 friend class RootFinder;; 116 friend class MethodBoost;; 117 friend class MethodCrossValidation;; 118 friend class Experimental::Classification;; 119 ; 120 public:; 121 ; 122 enum EWeightFileType { kROOT=0, kTEXT };; 123 ; 124 // default constructor; 125 MethodBase( const TString& jobName,; 126 Types::EMVA methodType,; 127 const TString& methodTitle,; 128 DataSetInfo& dsi,; 129 const TString& theOption = """" );; 130 ; 131 // constructor used for Testing + Application of the MVA, only (no training),; 132 // using given weight file; 133 MethodBase( Types::EMVA methodType,; 134 DataSetInfo& dsi,; 135 const TString& weightFile );; 136 ; 137 // default destructor; 138 virtual ~MethodBase();; 139 ; 140 // declaration, processing and checking of configuration options; 141 void SetupMethod();; 142 void ProcessSetup();; 143 virtual void CheckSetup(); // may be overwritten by derived classes; 144 ; 145 // ---------- main training and testing methods ------------------------------; 146 ; 147 // prepare tree branch with the method's discriminating variable; 148 void AddOutput( Types::ETreeType type, Types::EAnalysisType analysisType );; 149 ; 150 // performs classifier training; 151 // calls methods Train() implemented by derived classes; 152 void TrainMethod();; 153 ; 154 // optimize tuning parameters; 155 virtual std::map<TString,Double_t> OptimizeTuningParameters(TString fomType=""ROCIntegral"", TString fitType=""FitGA"");; 156 virtual void SetTuneParameters(std::map<TString,Double_t> tuneParameters);; 157 ; 158 virtual void Train() = 0;; 159 ; 160 // store and retrieve time used for training; 161 void SetTrainTime( Double_t trainTime ) { fTrainTime = trainTime; }; 162 Double_t GetTrainTime() const { return fTrainTime; }; 163 ; 164 // stor",MatchSource.WIKI,doc/master/MethodBase_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html
Performance,perform,performs,"lic:; 121 ; 122 enum EWeightFileType { kROOT=0, kTEXT };; 123 ; 124 // default constructor; 125 MethodBase( const TString& jobName,; 126 Types::EMVA methodType,; 127 const TString& methodTitle,; 128 DataSetInfo& dsi,; 129 const TString& theOption = """" );; 130 ; 131 // constructor used for Testing + Application of the MVA, only (no training),; 132 // using given weight file; 133 MethodBase( Types::EMVA methodType,; 134 DataSetInfo& dsi,; 135 const TString& weightFile );; 136 ; 137 // default destructor; 138 virtual ~MethodBase();; 139 ; 140 // declaration, processing and checking of configuration options; 141 void SetupMethod();; 142 void ProcessSetup();; 143 virtual void CheckSetup(); // may be overwritten by derived classes; 144 ; 145 // ---------- main training and testing methods ------------------------------; 146 ; 147 // prepare tree branch with the method's discriminating variable; 148 void AddOutput( Types::ETreeType type, Types::EAnalysisType analysisType );; 149 ; 150 // performs classifier training; 151 // calls methods Train() implemented by derived classes; 152 void TrainMethod();; 153 ; 154 // optimize tuning parameters; 155 virtual std::map<TString,Double_t> OptimizeTuningParameters(TString fomType=""ROCIntegral"", TString fitType=""FitGA"");; 156 virtual void SetTuneParameters(std::map<TString,Double_t> tuneParameters);; 157 ; 158 virtual void Train() = 0;; 159 ; 160 // store and retrieve time used for training; 161 void SetTrainTime( Double_t trainTime ) { fTrainTime = trainTime; }; 162 Double_t GetTrainTime() const { return fTrainTime; }; 163 ; 164 // store and retrieve time used for testing; 165 void SetTestTime ( Double_t testTime ) { fTestTime = testTime; }; 166 Double_t GetTestTime () const { return fTestTime; }; 167 ; 168 // performs classifier testing; 169 virtual void TestClassification();; 170 virtual Double_t GetKSTrainingVsTest(Char_t SorB, TString opt=""X"");; 171 ; 172 // performs multiclass classifier testing; 173 virtual void TestMulticlass(",MatchSource.WIKI,doc/master/MethodBase_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html
Security,access,accessors,"/ overload this one for individual initialisation of the testing,; 307 // it is then called automatically within the global ""TestInit""; 308 ; 309 // variables (and private member functions) for the Evaluation:; 310 // get the efficiency. It fills a histogram for efficiency/vs/bkg; 311 // and returns the one value fo the efficiency demanded for; 312 // in the TString argument. (Watch the string format); 313 virtual Double_t GetEfficiency( const TString&, Types::ETreeType, Double_t& err );; 314 virtual Double_t GetTrainingEfficiency(const TString& );; 315 virtual std::vector<Float_t> GetMulticlassEfficiency( std::vector<std::vector<Float_t> >& purity );; 316 virtual std::vector<Float_t> GetMulticlassTrainingEfficiency(std::vector<std::vector<Float_t> >& purity );; 317 virtual TMatrixD GetMulticlassConfusionMatrix(Double_t effB, Types::ETreeType type);; 318 virtual Double_t GetSignificance() const;; 319 virtual Double_t GetROCIntegral(TH1D *histS, TH1D *histB) const;; 320 virtual Double_t GetROCIntegral(PDF *pdfS=nullptr, PDF *pdfB=nullptr) const;; 321 virtual Double_t GetMaximumSignificance( Double_t SignalEvents, Double_t BackgroundEvents,; 322 Double_t& optimal_significance_value ) const;; 323 virtual Double_t GetSeparation( TH1*, TH1* ) const;; 324 virtual Double_t GetSeparation( PDF* pdfS = nullptr, PDF* pdfB = nullptr ) const;; 325 ; 326 virtual void GetRegressionDeviation(UInt_t tgtNum, Types::ETreeType type, Double_t& stddev,Double_t& stddev90Percent ) const;; 327 // ---------- public accessors -----------------------------------------------; 328 ; 329 // classifier naming (a lot of names ... aren't they ;-); 330 const TString& GetJobName () const { return fJobName; }; 331 const TString& GetMethodName () const { return fMethodName; }; 332 TString GetMethodTypeName() const { return Types::Instance().GetMethodName(fMethodType); }; 333 Types::EMVA GetMethodType () const { return fMethodType; }; 334 const char* GetName () const { return fMethodName.Data(); }; 335 c",MatchSource.WIKI,doc/master/MethodBase_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html
Testability,assert,assert," 12 * *; 13 * Authors (alphabetical): *; 14 * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; 15 * Peter Speckmayer <peter.speckmayer@cern.ch> - CERN, Switzerland *; 16 * Joerg Stelzer <Joerg.Stelzer@cern.ch> - CERN, Switzerland *; 17 * Jan Therhaag <Jan.Therhaag@cern.ch> - U of Bonn, Germany *; 18 * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; 19 * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; 20 * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; 21 * *; 22 * Copyright (c) 2005-2011: *; 23 * CERN, Switzerland *; 24 * U. of Victoria, Canada *; 25 * MPI-K Heidelberg, Germany *; 26 * U. of Bonn, Germany *; 27 * *; 28 * Redistribution and use in source and binary forms, with or without *; 29 * modification, are permitted according to the terms listed in LICENSE *; 30 * (see tmva/doc/LICENSE) *; 31 **********************************************************************************/; 32 ; 33#ifndef ROOT_TMVA_MethodBase; 34#define ROOT_TMVA_MethodBase; 35 ; 36//////////////////////////////////////////////////////////////////////////; 37// //; 38// MethodBase //; 39// //; 40// Virtual base class for all TMVA method //; 41// //; 42//////////////////////////////////////////////////////////////////////////; 43 ; 44#include <iosfwd>; 45#include <vector>; 46#include <map>; 47#include ""assert.h""; 48 ; 49#include ""TString.h""; 50 ; 51#include ""TMVA/IMethod.h""; 52#include ""TMVA/Configurable.h""; 53#include ""TMVA/Types.h""; 54#include ""TMVA/DataSet.h""; 55#include ""TMVA/Event.h""; 56#include ""TMVA/TransformationHandler.h""; 57#include <TMVA/Results.h>; 58#include ""TMVA/TrainingHistory.h""; 59 ; 60#include <TFile.h>; 61 ; 62class TGraph;; 63class TTree;; 64class TDirectory;; 65class TSpline;; 66class TH1F;; 67class TH1D;; 68class TMultiGraph;; 69 ; 70/*! \class TMVA::IPythonInteractive; 71\ingroup TMVA; 72 ; 73This class is needed by JsMVA, and it's a helper class for tracking errors during; 74the training in Jupyter notebook. It’s only ",MatchSource.WIKI,doc/master/MethodBase_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html
Usability,simpl,simple,"culation is skipped if err==0; 198 virtual Double_t GetMvaValue( Double_t* errLower = nullptr, Double_t* errUpper = nullptr) = 0;; 199 ; 200 // signal/background classification response; 201 Double_t GetMvaValue( const TMVA::Event* const ev, Double_t* err = nullptr, Double_t* errUpper = nullptr );; 202 ; 203 protected:; 204 // helper function to set errors to -1; 205 void NoErrorCalc(Double_t* const err, Double_t* const errUpper);; 206 ; 207 // signal/background classification response for all current set of data; 208 virtual std::vector<Double_t> GetMvaValues(Long64_t firstEvt = 0, Long64_t lastEvt = -1, Bool_t logProgress = false);; 209 // same as above but using a provided data set (used by MethodCategory); 210 virtual std::vector<Double_t> GetDataMvaValues(DataSet *data = nullptr, Long64_t firstEvt = 0, Long64_t lastEvt = -1, Bool_t logProgress = false);; 211 ; 212 public:; 213 // regression response; 214 const std::vector<Float_t>& GetRegressionValues(const TMVA::Event* const ev){; 215 fTmpEvent = ev;; 216 const std::vector<Float_t>* ptr = &GetRegressionValues();; 217 fTmpEvent = nullptr;; 218 return (*ptr);; 219 }; 220 ; 221 virtual const std::vector<Float_t>& GetRegressionValues() {; 222 std::vector<Float_t>* ptr = new std::vector<Float_t>(0);; 223 return (*ptr);; 224 }; 225 ; 226 // multiclass classification response; 227 virtual const std::vector<Float_t>& GetMulticlassValues() {; 228 std::vector<Float_t>* ptr = new std::vector<Float_t>(0);; 229 return (*ptr);; 230 }; 231 ; 232 // Training history; 233 virtual const std::vector<Float_t>& GetTrainingHistory(const char* /*name*/ ) {; 234 std::vector<Float_t>* ptr = new std::vector<Float_t>(0);; 235 return (*ptr);; 236 }; 237 ; 238 // probability of classifier response (mvaval) to be signal (requires ""CreateMvaPdf"" option set); 239 virtual Double_t GetProba( const Event *ev); // the simple one, automatically calculates the mvaVal and uses the SAME sig/bkg ratio as given in the training sample (typically 50/50 .",MatchSource.WIKI,doc/master/MethodBase_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html
Availability,avail,available,"];; 288 }; 289 ; 290 if (NULL != fCutMin) delete [] fCutMin;; 291 if (NULL != fCutMax) delete [] fCutMax;; 292 ; 293 if (NULL != fTmpCutMin) delete [] fTmpCutMin;; 294 if (NULL != fTmpCutMax) delete [] fTmpCutMax;; 295 ; 296 if (NULL != fBinaryTreeS) delete fBinaryTreeS;; 297 if (NULL != fBinaryTreeB) delete fBinaryTreeB;; 298}; 299 ; 300////////////////////////////////////////////////////////////////////////////////; 301/// define the options (their key words) that can be set in the option string.; 302///; 303/// know options:; 304/// - Method `<string>` Minimisation method. Available values are:; 305/// - MC Monte Carlo `<default>`; 306/// - GA Genetic Algorithm; 307/// - SA Simulated annealing; 308///; 309/// - EffMethod `<string>` Efficiency selection method. Available values are:; 310/// - EffSel `<default>`; 311/// - EffPDF; 312///; 313/// - VarProp `<string>` Property of variable 1 for the MC method (taking precedence over the; 314/// globale setting. The same values as for the global option are available. Variables 1..10 can be; 315/// set this way; 316///; 317/// - CutRangeMin/Max `<float>` user-defined ranges in which cuts are varied; 318 ; 319void TMVA::MethodCuts::DeclareOptions(); 320{; 321 DeclareOptionRef(fFitMethodS = ""GA"", ""FitMethod"", ""Minimisation Method (GA, SA, and MC are the primary methods to be used; the others have been introduced for testing purposes and are depreciated)"");; 322 AddPreDefVal(TString(""GA""));; 323 AddPreDefVal(TString(""SA""));; 324 AddPreDefVal(TString(""MC""));; 325 AddPreDefVal(TString(""MCEvents""));; 326 AddPreDefVal(TString(""MINUIT""));; 327 AddPreDefVal(TString(""EventScan""));; 328 ; 329 // selection type; 330 DeclareOptionRef(fEffMethodS = ""EffSel"", ""EffMethod"", ""Selection Method"");; 331 AddPreDefVal(TString(""EffSel""));; 332 AddPreDefVal(TString(""EffPDF""));; 333 ; 334 // cut ranges; 335 fCutRange.resize(GetNvar());; 336 fCutRangeMin = new Double_t[GetNvar()];; 337 fCutRangeMax = new Double_t[GetNvar()];; 338 for (UInt_t ivar=",MatchSource.WIKI,doc/master/MethodCuts_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html
Deployability,integrat,integrated,". ROOT: tmva/tmva/src/MethodCuts.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. MethodCuts.cxx. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Andreas Hoecker, Matt Jachowski, Peter Speckmayer, Eckhard von Toerne, Helge Voss, Kai Voss; 3 ; 4/**********************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; 6 * Package: TMVA *; 7 * Class : TMVA::MethodCuts *; 8 * *; 9 * *; 10 * Description: *; 11 * Implementation (see header for description) *; 12 * *; 13 * Authors (alphabetical): *; 14 * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; 15 * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; 16 * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; 17 * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; 18 * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; 19 * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; 20 * *; 21 * Copyright (c) 2005: *; 22 * CERN, Switzerland *; 23 * U. of Victoria, Canada *; 24 * MPI-K Heidelberg, Germany *; 25 * *; 26 * Redistribution and use in source and binary forms, with or without *; 27 * modification, are permitted according to the terms listed in LICENSE *; 28 * (see tmva/doc/LICENSE) *; 29 **********************************************************************************/; 30 ; 31/*! \class TMVA::MethodCuts; 32\ingroup TMVA; 33 ; 34 Multivariate optimisation of signal efficiency for given background; 35 efficiency, applying rectangular minimum and maximum requirements.; 36 ; 37 Also implemented is a ""decorrelate/diagonalized cuts approach"",; 38 which improves over the uncorrelated cuts approach by; 39 transforming linearly the input variables into a diagonal space,; 40 using the square-root of the covariance matrix.; 41 ; 42 Other optimisation criteria, such as maximising the si",MatchSource.WIKI,doc/master/MethodCuts_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html
Energy Efficiency,monitor,monitoring," {; 1395 Log() << kFATAL << ""Mismatch in bins: "" << tmpbin-1 << "" >= "" << fNbins << Endl;; 1396 }; 1397 ; 1398 fEffBvsSLocal->SetBinContent( tmpbin, tmpeffB );; 1399 void* ct = gTools().GetChild(ch);; 1400 for (UInt_t ivar=0; ivar<GetNvar(); ivar++) {; 1401 gTools().ReadAttr( ct, TString::Format( ""cutMin_%i"", ivar ), fCutMin[ivar][tmpbin-1] );; 1402 gTools().ReadAttr( ct, TString::Format( ""cutMax_%i"", ivar ), fCutMax[ivar][tmpbin-1] );; 1403 }; 1404 ch = gTools().GetNextChild(ch, ""Bin"");; 1405 }; 1406}; 1407 ; 1408////////////////////////////////////////////////////////////////////////////////; 1409/// write histograms and PDFs to file for monitoring purposes; 1410 ; 1411void TMVA::MethodCuts::WriteMonitoringHistosToFile( void ) const; 1412{; 1413 Log() << kINFO << ""Write monitoring histograms to file: "" << BaseDir()->GetPath() << Endl;; 1414 ; 1415 fEffBvsSLocal->Write();; 1416 ; 1417 // save reference histograms to file; 1418 if (fEffMethod == kUsePDFs) {; 1419 for (UInt_t ivar=0; ivar<GetNvar(); ivar++) {; 1420 (*fVarHistS)[ivar]->Write();; 1421 (*fVarHistB)[ivar]->Write();; 1422 (*fVarHistS_smooth)[ivar]->Write();; 1423 (*fVarHistB_smooth)[ivar]->Write();; 1424 (*fVarPdfS)[ivar]->GetPDFHist()->Write();; 1425 (*fVarPdfB)[ivar]->GetPDFHist()->Write();; 1426 }; 1427 }; 1428}; 1429 ; 1430////////////////////////////////////////////////////////////////////////////////; 1431/// Overloaded function to create background efficiency (rejection) versus; 1432/// signal efficiency plot (first call of this function).; 1433///; 1434/// The function returns the signal efficiency at background efficiency; 1435/// indicated in theString; 1436///; 1437/// ""theString"" must have two entries:; 1438/// - `[0]`: ""Efficiency""; 1439/// - `[1]`: the value of background efficiency at which the signal efficiency; 1440/// is to be returned; 1441 ; 1442Double_t TMVA::MethodCuts::GetTrainingEfficiency(const TString& theString); 1443{; 1444 // parse input string for required background efficien",MatchSource.WIKI,doc/master/MethodCuts_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html
Integrability,integrat,integrated,". ROOT: tmva/tmva/src/MethodCuts.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. MethodCuts.cxx. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Andreas Hoecker, Matt Jachowski, Peter Speckmayer, Eckhard von Toerne, Helge Voss, Kai Voss; 3 ; 4/**********************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate Data analysis *; 6 * Package: TMVA *; 7 * Class : TMVA::MethodCuts *; 8 * *; 9 * *; 10 * Description: *; 11 * Implementation (see header for description) *; 12 * *; 13 * Authors (alphabetical): *; 14 * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; 15 * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; 16 * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; 17 * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; 18 * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; 19 * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; 20 * *; 21 * Copyright (c) 2005: *; 22 * CERN, Switzerland *; 23 * U. of Victoria, Canada *; 24 * MPI-K Heidelberg, Germany *; 25 * *; 26 * Redistribution and use in source and binary forms, with or without *; 27 * modification, are permitted according to the terms listed in LICENSE *; 28 * (see tmva/doc/LICENSE) *; 29 **********************************************************************************/; 30 ; 31/*! \class TMVA::MethodCuts; 32\ingroup TMVA; 33 ; 34 Multivariate optimisation of signal efficiency for given background; 35 efficiency, applying rectangular minimum and maximum requirements.; 36 ; 37 Also implemented is a ""decorrelate/diagonalized cuts approach"",; 38 which improves over the uncorrelated cuts approach by; 39 transforming linearly the input variables into a diagonal space,; 40 using the square-root of the covariance matrix.; 41 ; 42 Other optimisation criteria, such as maximising the si",MatchSource.WIKI,doc/master/MethodCuts_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html
Modifiability,variab,variables,"* Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; 17 * Eckhard von Toerne <evt@physik.uni-bonn.de> - U. of Bonn, Germany *; 18 * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; 19 * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; 20 * *; 21 * Copyright (c) 2005: *; 22 * CERN, Switzerland *; 23 * U. of Victoria, Canada *; 24 * MPI-K Heidelberg, Germany *; 25 * *; 26 * Redistribution and use in source and binary forms, with or without *; 27 * modification, are permitted according to the terms listed in LICENSE *; 28 * (see tmva/doc/LICENSE) *; 29 **********************************************************************************/; 30 ; 31/*! \class TMVA::MethodCuts; 32\ingroup TMVA; 33 ; 34 Multivariate optimisation of signal efficiency for given background; 35 efficiency, applying rectangular minimum and maximum requirements.; 36 ; 37 Also implemented is a ""decorrelate/diagonalized cuts approach"",; 38 which improves over the uncorrelated cuts approach by; 39 transforming linearly the input variables into a diagonal space,; 40 using the square-root of the covariance matrix.; 41 ; 42 Other optimisation criteria, such as maximising the signal significance-; 43 squared, \f$ \frac{S^2}{(S+B)} \f$, with S and B being the signal and background yields,; 44 correspond to a particular point in the optimised background rejection; 45 versus signal efficiency curve. This working point requires the knowledge; 46 of the expected yields, which is not the case in general. Note also that; 47 for rare signals, Poissonian statistics should be used, which modifies; 48 the significance criterion.; 49 ; 50 The rectangular cut of a volume in the variable space is performed using; 51 a binary tree to sort the training events. This provides a significant; 52 reduction in computing time (up to several orders of magnitudes, depending; 53 on the complexity of the problem at hand).; 54 ; 55 Technically, optimisation is achieved in TMVA by two methods:; 56 ; 5",MatchSource.WIKI,doc/master/MethodCuts_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html
Performance,perform,performed,"hodCuts; 32\ingroup TMVA; 33 ; 34 Multivariate optimisation of signal efficiency for given background; 35 efficiency, applying rectangular minimum and maximum requirements.; 36 ; 37 Also implemented is a ""decorrelate/diagonalized cuts approach"",; 38 which improves over the uncorrelated cuts approach by; 39 transforming linearly the input variables into a diagonal space,; 40 using the square-root of the covariance matrix.; 41 ; 42 Other optimisation criteria, such as maximising the signal significance-; 43 squared, \f$ \frac{S^2}{(S+B)} \f$, with S and B being the signal and background yields,; 44 correspond to a particular point in the optimised background rejection; 45 versus signal efficiency curve. This working point requires the knowledge; 46 of the expected yields, which is not the case in general. Note also that; 47 for rare signals, Poissonian statistics should be used, which modifies; 48 the significance criterion.; 49 ; 50 The rectangular cut of a volume in the variable space is performed using; 51 a binary tree to sort the training events. This provides a significant; 52 reduction in computing time (up to several orders of magnitudes, depending; 53 on the complexity of the problem at hand).; 54 ; 55 Technically, optimisation is achieved in TMVA by two methods:; 56 ; 57 1. Monte Carlo generation using uniform priors for the lower cut value,; 58 and the cut width, thrown within the variable ranges.; 59 ; 60 2. A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; 61 The GA is configurable by many external settings through the option; 62 string. For difficult cases (such as many variables), some tuning; 63 may be necessary to achieve satisfying results; 64 ; 65 Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; 66 superior results, and often failed due to convergence at local minima.; 67 ; 68 The tests we have performed so far showed that in generic applications,; 69 the GA is superior to MC sampling, and hence GA is t",MatchSource.WIKI,doc/master/MethodCuts_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html
Safety,sanity check,sanity check,"] = -1;; 341 }; 342 ; 343 DeclareOptionRef( fCutRangeMin, GetNvar(), ""CutRangeMin"", ""Minimum of allowed cut range (set per variable)"" );; 344 DeclareOptionRef( fCutRangeMax, GetNvar(), ""CutRangeMax"", ""Maximum of allowed cut range (set per variable)"" );; 345 ; 346 fAllVarsI = new TString[GetNvar()];; 347 ; 348 for (UInt_t i=0; i<GetNvar(); i++) fAllVarsI[i] = ""NotEnforced"";; 349 ; 350 DeclareOptionRef(fAllVarsI, GetNvar(), ""VarProp"", ""Categorisation of cuts"");; 351 AddPreDefVal(TString(""NotEnforced""));; 352 AddPreDefVal(TString(""FMax""));; 353 AddPreDefVal(TString(""FMin""));; 354 AddPreDefVal(TString(""FSmart""));; 355}; 356 ; 357////////////////////////////////////////////////////////////////////////////////; 358/// process user options.; 359///; 360/// sanity check, do not allow the input variables to be normalised, because this; 361/// only creates problems when interpreting the cuts; 362 ; 363void TMVA::MethodCuts::ProcessOptions(); 364{; 365 if (IsNormalised()) {; 366 Log() << kWARNING << ""Normalisation of the input variables for cut optimisation is not"" << Endl;; 367 Log() << kWARNING << ""supported because this provides intransparent cut values, and no"" << Endl;; 368 Log() << kWARNING << ""improvement in the performance of the algorithm."" << Endl;; 369 Log() << kWARNING << ""Please remove \""Normalise\"" option from booking option string"" << Endl;; 370 Log() << kWARNING << ""==> Will reset normalisation flag to \""False\"""" << Endl;; 371 SetNormalised( kFALSE );; 372 }; 373 ; 374 if (IgnoreEventsWithNegWeightsInTraining()) {; 375 Log() << kFATAL << ""Mechanism to ignore events with negative weights in training not yet available for method: ""; 376 << GetMethodTypeName(); 377 << "" --> Please remove \""IgnoreNegWeightsInTraining\"" option from booking string.""; 378 << Endl;; 379 }; 380 ; 381 if (fFitMethodS == ""MC"" ) fFitMethod = kUseMonteCarlo;; 382 else if (fFitMethodS == ""MCEvents"") fFitMethod = kUseMonteCarloEvents;; 383 else if (fFitMethodS == ""GA"" ) fFitMethod = kUseGenet",MatchSource.WIKI,doc/master/MethodCuts_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html
Testability,test,tests,"; 50 The rectangular cut of a volume in the variable space is performed using; 51 a binary tree to sort the training events. This provides a significant; 52 reduction in computing time (up to several orders of magnitudes, depending; 53 on the complexity of the problem at hand).; 54 ; 55 Technically, optimisation is achieved in TMVA by two methods:; 56 ; 57 1. Monte Carlo generation using uniform priors for the lower cut value,; 58 and the cut width, thrown within the variable ranges.; 59 ; 60 2. A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; 61 The GA is configurable by many external settings through the option; 62 string. For difficult cases (such as many variables), some tuning; 63 may be necessary to achieve satisfying results; 64 ; 65 Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; 66 superior results, and often failed due to convergence at local minima.; 67 ; 68 The tests we have performed so far showed that in generic applications,; 69 the GA is superior to MC sampling, and hence GA is the default method.; 70 It is worthwhile trying both anyway.; 71 ; 72 **Decorrelated (or ""diagonalized"") Cuts**; 73 ; 74 See class description for Method Likelihood for a detailed explanation.; 75*/; 76 ; 77#include ""TMVA/MethodCuts.h""; 78 ; 79#include ""TMVA/BinarySearchTree.h""; 80#include ""TMVA/ClassifierFactory.h""; 81#include ""TMVA/Config.h""; 82#include ""TMVA/Configurable.h""; 83#include ""TMVA/DataSet.h""; 84#include ""TMVA/DataSetInfo.h""; 85#include ""TMVA/Event.h""; 86#include ""TMVA/IFitterTarget.h""; 87#include ""TMVA/IMethod.h""; 88#include ""TMVA/GeneticFitter.h""; 89#include ""TMVA/Interval.h""; 90#include ""TMVA/FitterBase.h""; 91#include ""TMVA/MCFitter.h""; 92#include ""TMVA/MethodBase.h""; 93#include ""TMVA/MethodFDA.h""; 94#include ""TMVA/MinuitFitter.h""; 95#include ""TMVA/MsgLogger.h""; 96#include ""TMVA/PDF.h""; 97#include ""TMVA/Results.h""; 98#include ""TMVA/SimulatedAnnealingFitter.h""; 99#include ""TMVA/Timer.h""; 100#include ""TMVA/Tools.h",MatchSource.WIKI,doc/master/MethodCuts_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html
Usability,clear,clear,"t; 537{; 538 std::vector<Double_t> cMin( GetNvar() );; 539 std::vector<Double_t> cMax( GetNvar() );; 540 Double_t trueEffS = GetCuts( effS, cMin, cMax );; 541 for (UInt_t ivar=0; ivar<GetNvar(); ivar++) {; 542 cutMin[ivar] = cMin[ivar];; 543 cutMax[ivar] = cMax[ivar];; 544 }; 545 return trueEffS;; 546}; 547 ; 548////////////////////////////////////////////////////////////////////////////////; 549/// retrieve cut values for given signal efficiency; 550 ; 551Double_t TMVA::MethodCuts::GetCuts( Double_t effS,; 552 std::vector<Double_t>& cutMin,; 553 std::vector<Double_t>& cutMax ) const; 554{; 555 // find corresponding bin; 556 Int_t ibin = fEffBvsSLocal->FindBin( effS );; 557 ; 558 // get the true efficiency which is the one on the ""left hand"" side of the bin; 559 Double_t trueEffS = fEffBvsSLocal->GetBinLowEdge( ibin );; 560 ; 561 ibin--; // the 'cut' vector has 0...fNbins indices; 562 if (ibin < 0 ) ibin = 0;; 563 else if (ibin >= fNbins) ibin = fNbins - 1;; 564 ; 565 cutMin.clear();; 566 cutMax.clear();; 567 for (UInt_t ivar=0; ivar<GetNvar(); ivar++) {; 568 cutMin.push_back( fCutMin[ivar][ibin] );; 569 cutMax.push_back( fCutMax[ivar][ibin] );; 570 }; 571 ; 572 return trueEffS;; 573}; 574 ; 575////////////////////////////////////////////////////////////////////////////////; 576/// training method: here the cuts are optimised for the training sample; 577 ; 578void TMVA::MethodCuts::Train( void ); 579{; 580 if (fEffMethod == kUsePDFs) CreateVariablePDFs(); // create PDFs for variables; 581 ; 582 // create binary trees (global member variables) for signal and background; 583 if (fBinaryTreeS != 0) { delete fBinaryTreeS; fBinaryTreeS = 0; }; 584 if (fBinaryTreeB != 0) { delete fBinaryTreeB; fBinaryTreeB = 0; }; 585 ; 586 // the variables may be transformed by a transformation method: to coherently; 587 // treat signal and background one must decide which transformation type shall; 588 // be used: our default is signal-type; 589 ; 590 fBinaryTreeS = new BinarySearchTree(",MatchSource.WIKI,doc/master/MethodCuts_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html
Integrability,depend,dependency,". ROOT: tmva/tmva/inc/TMVA/MethodCuts.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces ; MethodCuts.h File Reference. #include <vector>; #include ""TMVA/MethodBase.h""; #include ""TMVA/BinarySearchTree.h""; #include ""TMVA/PDF.h""; #include ""TMatrixDfwd.h""; #include ""IFitterTarget.h"". Include dependency graph for MethodCuts.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TMVA::MethodCuts;  Multivariate optimisation of signal efficiency for given background efficiency, applying rectangular minimum and maximum requirements. More...;  . Namespaces; namespace  TMVA;  create variable transformations ;  . tmvatmvaincTMVAMethodCuts.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/MethodCuts_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodCuts_8h.html
Modifiability,variab,variable,". ROOT: tmva/tmva/inc/TMVA/MethodCuts.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces ; MethodCuts.h File Reference. #include <vector>; #include ""TMVA/MethodBase.h""; #include ""TMVA/BinarySearchTree.h""; #include ""TMVA/PDF.h""; #include ""TMatrixDfwd.h""; #include ""IFitterTarget.h"". Include dependency graph for MethodCuts.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TMVA::MethodCuts;  Multivariate optimisation of signal efficiency for given background efficiency, applying rectangular minimum and maximum requirements. More...;  . Namespaces; namespace  TMVA;  create variable transformations ;  . tmvatmvaincTMVAMethodCuts.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/MethodCuts_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodCuts_8h.html
Availability,avail,available," 103 Double_t GetmuTransform ( TTree *) { return -1; }; 104 Double_t GetEfficiency ( const TString&, Types::ETreeType, Double_t& );; 105 Double_t GetTrainingEfficiency(const TString& );; 106 ; 107 // rarity distributions (signal or background (default) is uniform in [0,1]); 108 Double_t GetRarity( Double_t, Types::ESBType ) const { return 0; }; 109 ; 110 // accessors for Minuit; 111 Double_t ComputeEstimator( std::vector<Double_t> & );; 112 ; 113 Double_t EstimatorFunction( std::vector<Double_t> & );; 114 Double_t EstimatorFunction( Int_t ievt1, Int_t ievt2 );; 115 ; 116 void SetTestSignalEfficiency( Double_t effS ) { fTestSignalEff = effS; }; 117 ; 118 // retrieve cut values for given signal efficiency; 119 void PrintCuts( Double_t effS ) const;; 120 Double_t GetCuts ( Double_t effS, std::vector<Double_t>& cutMin, std::vector<Double_t>& cutMax ) const;; 121 Double_t GetCuts ( Double_t effS, Double_t* cutMin, Double_t* cutMax ) const;; 122 ; 123 // ranking of input variables (not available for cuts); 124 const Ranking* CreateRanking() { return nullptr; }; 125 ; 126 void DeclareOptions();; 127 void ProcessOptions();; 128 ; 129 // maximum |cut| value; 130 static const Double_t fgMaxAbsCutVal;; 131 ; 132 // no check of options at this place; 133 void CheckSetup() {}; 134 ; 135 protected:; 136 ; 137 // make ROOT-independent C++ class for classifier response (classifier-specific implementation); 138 void MakeClassSpecific( std::ostream&, const TString& ) const;; 139 ; 140 // get help message text; 141 void GetHelpMessage() const;; 142 ; 143 private:; 144 ; 145 // optimisation method; 146 enum EFitMethodType { kUseMonteCarlo = 0,; 147 kUseGeneticAlgorithm,; 148 kUseSimulatedAnnealing,; 149 kUseMinuit,; 150 kUseEventScan,; 151 kUseMonteCarloEvents };; 152 ; 153 // efficiency calculation method; 154 // - kUseEventSelection: computes efficiencies from given data sample; 155 // - kUsePDFs : creates smoothed PDFs from data samples, and; 156 // uses this to compute efficiencies",MatchSource.WIKI,doc/master/MethodCuts_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodCuts_8h_source.html
Deployability,integrat,integrated,". ROOT: tmva/tmva/inc/TMVA/MethodCuts.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. MethodCuts.h. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Andreas Hoecker, Matt Jachowski, Peter Speckmayer, Helge Voss, Kai Voss; 3 ; 4/**********************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 6 * Package: TMVA *; 7 * Class : MethodCuts *; 8 * *; 9 * *; 10 * Description: *; 11 * Multivariate optimisation of signal efficiency for given background *; 12 * efficiency, using rectangular minimum and maximum requirements on *; 13 * input variables *; 14 * *; 15 * Authors (alphabetical): *; 16 * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; 17 * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; 18 * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; 19 * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; 20 * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; 21 * *; 22 * Copyright (c) 2005: *; 23 * CERN, Switzerland *; 24 * U. of Victoria, Canada *; 25 * MPI-K Heidelberg, Germany *; 26 * LAPP, Annecy, France *; 27 * *; 28 * Redistribution and use in source and binary forms, with or without *; 29 * modification, are permitted according to the terms listed in LICENSE *; 30 * (see tmva/doc/LICENSE) *; 31 **********************************************************************************/; 32 ; 33#ifndef ROOT_TMVA_MethodCuts; 34#define ROOT_TMVA_MethodCuts; 35 ; 36//////////////////////////////////////////////////////////////////////////; 37// //; 38// MethodCuts //; 39// //; 40// Multivariate optimisation of signal efficiency for given background //; 41// efficiency, using rectangular minimum and maximum requirements on //; 42// input variables //; 43// //; 44//////////////////////////////////////////////////////////////////////////; 45 ; 46#i",MatchSource.WIKI,doc/master/MethodCuts_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodCuts_8h_source.html
Energy Efficiency,monitor,monitoring,"for given cut sampleDefinition MethodCuts.cxx:1050; TMVA::MethodCuts::AddWeightsXMLTovoid AddWeightsXMLTo(void *parent) constcreate XML description for LD classification and regression (for arbitrary number of output classes/t...Definition MethodCuts.cxx:1287; TMVA::MethodCuts::Initvoid Init(void)default initialisation called by all constructorsDefinition MethodCuts.cxx:220; TMVA::MethodCuts::GetTrainingEfficiencyDouble_t GetTrainingEfficiency(const TString &)Overloaded function to create background efficiency (rejection) versus signal efficiency plot (first ...Definition MethodCuts.cxx:1442; TMVA::MethodCuts::HasAnalysisTypevirtual Bool_t HasAnalysisType(Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets)Cuts can only handle classification with 2 classes.Definition MethodCuts.cxx:211; TMVA::MethodCuts::ProcessOptionsvoid ProcessOptions()process user options.Definition MethodCuts.cxx:363; TMVA::MethodCuts::WriteMonitoringHistosToFilevoid WriteMonitoringHistosToFile(void) constwrite histograms and PDFs to file for monitoring purposesDefinition MethodCuts.cxx:1411; TMVA::MethodCuts::EEffMethodEEffMethodDefinition MethodCuts.h:157; TMVA::MethodCuts::kUsePDFs@ kUsePDFsDefinition MethodCuts.h:158; TMVA::MethodCuts::kUseEventSelection@ kUseEventSelectionDefinition MethodCuts.h:157; TMVA::MethodCuts::CheckSetupvoid CheckSetup()check may be overridden by derived class (sometimes, eg, fitters are used which can only be implement...Definition MethodCuts.h:133; TMVA::MethodCuts::MatchParsToCutsvoid MatchParsToCuts(const std::vector< Double_t > &, Double_t *, Double_t *)translates parameters into cutsDefinition MethodCuts.cxx:974; TMVA::MethodCuts::~MethodCutsvirtual ~MethodCuts(void)destructorDefinition MethodCuts.cxx:270; TMVA::MethodCuts::TestClassificationvoid TestClassification()nothing to testDefinition MethodCuts.cxx:827; TMVA::MethodCuts::EFitMethodTypeEFitMethodTypeDefinition MethodCuts.h:146; TMVA::MethodCuts::kUseMinuit@ kUseMinuitDefinition MethodC",MatchSource.WIKI,doc/master/MethodCuts_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodCuts_8h_source.html
Integrability,integrat,integrated,". ROOT: tmva/tmva/inc/TMVA/MethodCuts.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. MethodCuts.h. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Andreas Hoecker, Matt Jachowski, Peter Speckmayer, Helge Voss, Kai Voss; 3 ; 4/**********************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 6 * Package: TMVA *; 7 * Class : MethodCuts *; 8 * *; 9 * *; 10 * Description: *; 11 * Multivariate optimisation of signal efficiency for given background *; 12 * efficiency, using rectangular minimum and maximum requirements on *; 13 * input variables *; 14 * *; 15 * Authors (alphabetical): *; 16 * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; 17 * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; 18 * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; 19 * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; 20 * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; 21 * *; 22 * Copyright (c) 2005: *; 23 * CERN, Switzerland *; 24 * U. of Victoria, Canada *; 25 * MPI-K Heidelberg, Germany *; 26 * LAPP, Annecy, France *; 27 * *; 28 * Redistribution and use in source and binary forms, with or without *; 29 * modification, are permitted according to the terms listed in LICENSE *; 30 * (see tmva/doc/LICENSE) *; 31 **********************************************************************************/; 32 ; 33#ifndef ROOT_TMVA_MethodCuts; 34#define ROOT_TMVA_MethodCuts; 35 ; 36//////////////////////////////////////////////////////////////////////////; 37// //; 38// MethodCuts //; 39// //; 40// Multivariate optimisation of signal efficiency for given background //; 41// efficiency, using rectangular minimum and maximum requirements on //; 42// input variables //; 43// //; 44//////////////////////////////////////////////////////////////////////////; 45 ; 46#i",MatchSource.WIKI,doc/master/MethodCuts_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodCuts_8h_source.html
Modifiability,variab,variables,". ROOT: tmva/tmva/inc/TMVA/MethodCuts.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. MethodCuts.h. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Andreas Hoecker, Matt Jachowski, Peter Speckmayer, Helge Voss, Kai Voss; 3 ; 4/**********************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 6 * Package: TMVA *; 7 * Class : MethodCuts *; 8 * *; 9 * *; 10 * Description: *; 11 * Multivariate optimisation of signal efficiency for given background *; 12 * efficiency, using rectangular minimum and maximum requirements on *; 13 * input variables *; 14 * *; 15 * Authors (alphabetical): *; 16 * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; 17 * Matt Jachowski <jachowski@stanford.edu> - Stanford University, USA *; 18 * Peter Speckmayer <speckmay@mail.cern.ch> - CERN, Switzerland *; 19 * Helge Voss <Helge.Voss@cern.ch> - MPI-K Heidelberg, Germany *; 20 * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; 21 * *; 22 * Copyright (c) 2005: *; 23 * CERN, Switzerland *; 24 * U. of Victoria, Canada *; 25 * MPI-K Heidelberg, Germany *; 26 * LAPP, Annecy, France *; 27 * *; 28 * Redistribution and use in source and binary forms, with or without *; 29 * modification, are permitted according to the terms listed in LICENSE *; 30 * (see tmva/doc/LICENSE) *; 31 **********************************************************************************/; 32 ; 33#ifndef ROOT_TMVA_MethodCuts; 34#define ROOT_TMVA_MethodCuts; 35 ; 36//////////////////////////////////////////////////////////////////////////; 37// //; 38// MethodCuts //; 39// //; 40// Multivariate optimisation of signal efficiency for given background //; 41// efficiency, using rectangular minimum and maximum requirements on //; 42// input variables //; 43// //; 44//////////////////////////////////////////////////////////////////////////; 45 ; 46#i",MatchSource.WIKI,doc/master/MethodCuts_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodCuts_8h_source.html
Performance,optimiz,optimized,"eGeneticAlgorithm,; 148 kUseSimulatedAnnealing,; 149 kUseMinuit,; 150 kUseEventScan,; 151 kUseMonteCarloEvents };; 152 ; 153 // efficiency calculation method; 154 // - kUseEventSelection: computes efficiencies from given data sample; 155 // - kUsePDFs : creates smoothed PDFs from data samples, and; 156 // uses this to compute efficiencies; 157 enum EEffMethod { kUseEventSelection = 0,; 158 kUsePDFs };; 159 ; 160 // improve the Monte Carlo by providing some additional information; 161 enum EFitParameters { kNotEnforced = 0,; 162 kForceMin,; 163 kForceMax,; 164 kForceSmart };; 165 ; 166 // general; 167 TString fFitMethodS; ///< chosen fit method (string); 168 EFitMethodType fFitMethod; ///< chosen fit method; 169 TString fEffMethodS; ///< chosen efficiency calculation method (string); 170 EEffMethod fEffMethod; ///< chosen efficiency calculation method; 171 std::vector<EFitParameters>* fFitParams; ///< vector for series of fit methods; 172 Double_t fTestSignalEff; ///< used to test optimized signal efficiency; 173 Double_t fEffSMin; ///< used to test optimized signal efficiency; 174 Double_t fEffSMax; ///< used to test optimized signal efficiency; 175 Double_t* fCutRangeMin; ///< minimum of allowed cut range; 176 Double_t* fCutRangeMax; ///< maximum of allowed cut range; 177 std::vector<Interval*> fCutRange; ///< allowed ranges for cut optimisation; 178 ; 179 // for the use of the binary tree method; 180 BinarySearchTree* fBinaryTreeS;; 181 BinarySearchTree* fBinaryTreeB;; 182 ; 183 // MC method; 184 Double_t** fCutMin; ///< minimum requirement; 185 Double_t** fCutMax; ///< maximum requirement; 186 Double_t* fTmpCutMin; ///< temporary minimum requirement; 187 Double_t* fTmpCutMax; ///< temporary maximum requirement; 188 TString* fAllVarsI; ///< what to do with variables; 189 ; 190 // relevant for all methods; 191 Int_t fNpar; ///< number of parameters in fit (default: 2*Nvar); 192 Double_t fEffRef; ///< reference efficiency; 193 std::vector<Int_t>* fRangeSign; ///< us",MatchSource.WIKI,doc/master/MethodCuts_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodCuts_8h_source.html
Security,access,accessors,"m & i );; 88 void ReadWeightsFromXML ( void* wghtnode );; 89 ; 90 // calculate the MVA value (for CUTs this is just a dummy); 91 Double_t GetMvaValue( Double_t* err = nullptr, Double_t* errUpper = nullptr );; 92 ; 93 // write method specific histos to target file; 94 void WriteMonitoringHistosToFile( void ) const;; 95 ; 96 // test the method; 97 void TestClassification();; 98 ; 99 // also overwrite --> not computed for cuts; 100 Double_t GetSeparation ( TH1*, TH1* ) const { return -1; }; 101 Double_t GetSeparation ( PDF* = nullptr, PDF* = nullptr ) const { return -1; }; 102 Double_t GetSignificance( void ) const { return -1; }; 103 Double_t GetmuTransform ( TTree *) { return -1; }; 104 Double_t GetEfficiency ( const TString&, Types::ETreeType, Double_t& );; 105 Double_t GetTrainingEfficiency(const TString& );; 106 ; 107 // rarity distributions (signal or background (default) is uniform in [0,1]); 108 Double_t GetRarity( Double_t, Types::ESBType ) const { return 0; }; 109 ; 110 // accessors for Minuit; 111 Double_t ComputeEstimator( std::vector<Double_t> & );; 112 ; 113 Double_t EstimatorFunction( std::vector<Double_t> & );; 114 Double_t EstimatorFunction( Int_t ievt1, Int_t ievt2 );; 115 ; 116 void SetTestSignalEfficiency( Double_t effS ) { fTestSignalEff = effS; }; 117 ; 118 // retrieve cut values for given signal efficiency; 119 void PrintCuts( Double_t effS ) const;; 120 Double_t GetCuts ( Double_t effS, std::vector<Double_t>& cutMin, std::vector<Double_t>& cutMax ) const;; 121 Double_t GetCuts ( Double_t effS, Double_t* cutMin, Double_t* cutMax ) const;; 122 ; 123 // ranking of input variables (not available for cuts); 124 const Ranking* CreateRanking() { return nullptr; }; 125 ; 126 void DeclareOptions();; 127 void ProcessOptions();; 128 ; 129 // maximum |cut| value; 130 static const Double_t fgMaxAbsCutVal;; 131 ; 132 // no check of options at this place; 133 void CheckSetup() {}; 134 ; 135 protected:; 136 ; 137 // make ROOT-independent C++ class for classifie",MatchSource.WIKI,doc/master/MethodCuts_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodCuts_8h_source.html
Testability,test,test,"& theOption = ""MC:150:10000:"");; 69 ; 70 MethodCuts( DataSetInfo& theData,; 71 const TString& theWeightFile);; 72 ; 73 // this is a workaround which is necessary since CINT is not capable of handling dynamic casts; 74 static MethodCuts* DynamicCast( IMethod* method ) { return dynamic_cast<MethodCuts*>(method); }; 75 ; 76 virtual ~MethodCuts( void );; 77 ; 78 virtual Bool_t HasAnalysisType( Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets );; 79 ; 80 // training method; 81 void Train( void );; 82 ; 83 using MethodBase::ReadWeightsFromStream;; 84 ; 85 void AddWeightsXMLTo ( void* parent ) const;; 86 ; 87 void ReadWeightsFromStream( std::istream & i );; 88 void ReadWeightsFromXML ( void* wghtnode );; 89 ; 90 // calculate the MVA value (for CUTs this is just a dummy); 91 Double_t GetMvaValue( Double_t* err = nullptr, Double_t* errUpper = nullptr );; 92 ; 93 // write method specific histos to target file; 94 void WriteMonitoringHistosToFile( void ) const;; 95 ; 96 // test the method; 97 void TestClassification();; 98 ; 99 // also overwrite --> not computed for cuts; 100 Double_t GetSeparation ( TH1*, TH1* ) const { return -1; }; 101 Double_t GetSeparation ( PDF* = nullptr, PDF* = nullptr ) const { return -1; }; 102 Double_t GetSignificance( void ) const { return -1; }; 103 Double_t GetmuTransform ( TTree *) { return -1; }; 104 Double_t GetEfficiency ( const TString&, Types::ETreeType, Double_t& );; 105 Double_t GetTrainingEfficiency(const TString& );; 106 ; 107 // rarity distributions (signal or background (default) is uniform in [0,1]); 108 Double_t GetRarity( Double_t, Types::ESBType ) const { return 0; }; 109 ; 110 // accessors for Minuit; 111 Double_t ComputeEstimator( std::vector<Double_t> & );; 112 ; 113 Double_t EstimatorFunction( std::vector<Double_t> & );; 114 Double_t EstimatorFunction( Int_t ievt1, Int_t ievt2 );; 115 ; 116 void SetTestSignalEfficiency( Double_t effS ) { fTestSignalEff = effS; }; 117 ; 118 // retrieve cut values for given s",MatchSource.WIKI,doc/master/MethodCuts_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodCuts_8h_source.html
Usability,simpl,simple,"Def(name, id)Definition Rtypes.h:342; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; TMatrixDfwd.h; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TMVA::BinarySearchTreeA simple Binary search tree including a volume search method.Definition BinarySearchTree.h:65; TMVA::DataSetInfoClass that contains all the data information.Definition DataSetInfo.h:62; TMVA::IFitterTargetInterface for a fitter 'target'.Definition IFitterTarget.h:44; TMVA::IMethodInterface for all concrete MVA method implementations.Definition IMethod.h:53; TMVA::MethodBaseVirtual base Class for all MVA method.Definition MethodBase.h:111; TMVA::MethodBase::MethodCutsfriend class MethodCutsDefinition MethodBase.h:603; TMVA::MethodBase::ReadWeightsFromStreamvirtual void ReadWeightsFromStream(std::istream &)=0; TMVA::MethodCutsMultivariate optimisation of signal efficiency for given background efficiency, applying rectangular ...Definition MethodCuts.h:61; TMVA::MethodCuts::fRandomTRandom * fRandomrandom generator for MC optimisation methodDefinition MethodCuts.h:194; TMVA::MethodCuts::fEffRefDouble_t fEffRefreference efficiencyDefinition MethodCuts.h:192; TMVA::MethodCuts::fFitMethodSTString fFitMethodSc",MatchSource.WIKI,doc/master/MethodCuts_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodCuts_8h_source.html
Availability,error,error,"s = parseString.Tokenize(tokenDelim);; 154 TIter nextToken(tokenStrings);; 155 TObjString *tokenString = (TObjString *)nextToken();; 156 for (; tokenString != NULL; tokenString = (TObjString *)nextToken()) {; 157 std::stringstream sstr;; 158 double currentValue;; 159 sstr << tokenString->GetString().Data();; 160 sstr >> currentValue;; 161 values.push_back(currentValue);; 162 }; 163 return values;; 164}; 165 ; 166////////////////////////////////////////////////////////////////////////////////; 167void MethodDL::DeclareOptions(); 168{; 169 // Set default values for all option strings; 170 ; 171 DeclareOptionRef(fInputLayoutString = ""0|0|0"", ""InputLayout"", ""The Layout of the input"");; 172 ; 173 DeclareOptionRef(fBatchLayoutString = ""0|0|0"", ""BatchLayout"", ""The Layout of the batch"");; 174 ; 175 DeclareOptionRef(fLayoutString = ""DENSE|(N+100)*2|SOFTSIGN,DENSE|0|LINEAR"", ""Layout"", ""Layout of the network."");; 176 ; 177 DeclareOptionRef(fErrorStrategy = ""CROSSENTROPY"", ""ErrorStrategy"", ""Loss function: Mean squared error (regression)""; 178 "" or cross entropy (binary classification)."");; 179 AddPreDefVal(TString(""CROSSENTROPY""));; 180 AddPreDefVal(TString(""SUMOFSQUARES""));; 181 AddPreDefVal(TString(""MUTUALEXCLUSIVE""));; 182 ; 183 DeclareOptionRef(fWeightInitializationString = ""XAVIER"", ""WeightInitialization"", ""Weight initialization strategy"");; 184 AddPreDefVal(TString(""XAVIER""));; 185 AddPreDefVal(TString(""XAVIERUNIFORM""));; 186 AddPreDefVal(TString(""GAUSS""));; 187 AddPreDefVal(TString(""UNIFORM""));; 188 AddPreDefVal(TString(""IDENTITY""));; 189 AddPreDefVal(TString(""ZERO""));; 190 ; 191 DeclareOptionRef(fRandomSeed = 0, ""RandomSeed"", ""Random seed used for weight initialization and batch shuffling"");; 192 ; 193 DeclareOptionRef(fNumValidationString = ""20%"", ""ValidationSize"", ""Part of the training data to use for validation. ""; 194 ""Specify as 0.2 or 20% to use a fifth of the data set as validation set. ""; 195 ""Specify as 100 to use exactly 100 events. (Default: 20%)"");; 196 ; 197",MatchSource.WIKI,doc/master/MethodDL_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html
Deployability,integrat,integrated,". ROOT: tmva/tmva/src/MethodDL.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. MethodDL.cxx. Go to the documentation of this file. 1// @(#)root/tmva/tmva/cnn:$Id$Ndl; 2// Authors: Vladimir Ilievski, Lorenzo Moneta, Saurav Shekhar, Ravi Kiran; 3/**********************************************************************************; 4 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 5 * Package: TMVA *; 6 * Class : MethodDL *; 7 * *; 8 * *; 9 * Description: *; 10 * Deep Neural Network Method *; 11 * *; 12 * Authors (alphabetical): *; 13 * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; 14 * Saurav Shekhar <sauravshekhar01@gmail.com> - ETH Zurich, Switzerland *; 15 * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; 16 * *; 17 * Copyright (c) 2005-2015: *; 18 * CERN, Switzerland *; 19 * U. of Victoria, Canada *; 20 * MPI-K Heidelberg, Germany *; 21 * U. of Bonn, Germany *; 22 * *; 23 * Redistribution and use in source and binary forms, with or without *; 24 * modification, are permitted according to the terms listed in LICENSE *; 25 * (see tmva/doc/LICENSE) *; 26 **********************************************************************************/; 27 ; 28#include ""TFormula.h""; 29#include ""TString.h""; 30#include ""TMath.h""; 31#include ""TObjString.h""; 32 ; 33#include ""TMVA/Tools.h""; 34#include ""TMVA/Configurable.h""; 35#include ""TMVA/IMethod.h""; 36#include ""TMVA/ClassifierFactory.h""; 37#include ""TMVA/MethodDL.h""; 38#include ""TMVA/Types.h""; 39#include ""TMVA/DNN/TensorDataLoader.h""; 40#include ""TMVA/DNN/Functions.h""; 41#include ""TMVA/DNN/DLMinimizers.h""; 42#include ""TMVA/DNN/SGD.h""; 43#include ""TMVA/DNN/Adam.h""; 44#include ""TMVA/DNN/Adagrad.h""; 45#include ""TMVA/DNN/RMSProp.h""; 46#include ""TMVA/DNN/Adadelta.h""; 47#include ""TMVA/Timer.h""; 48 ; 49#ifdef R__HAS_TMVAGPU; 50#include ""TMVA/DNN/Architectures/Cuda.h""; 51#ifdef R__HAS_CUDNN; 52#include ""TMVA/DNN/Architectures/TC",MatchSource.WIKI,doc/master/MethodDL_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html
Integrability,integrat,integrated,". ROOT: tmva/tmva/src/MethodDL.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. MethodDL.cxx. Go to the documentation of this file. 1// @(#)root/tmva/tmva/cnn:$Id$Ndl; 2// Authors: Vladimir Ilievski, Lorenzo Moneta, Saurav Shekhar, Ravi Kiran; 3/**********************************************************************************; 4 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 5 * Package: TMVA *; 6 * Class : MethodDL *; 7 * *; 8 * *; 9 * Description: *; 10 * Deep Neural Network Method *; 11 * *; 12 * Authors (alphabetical): *; 13 * Vladimir Ilievski <ilievski.vladimir@live.com> - CERN, Switzerland *; 14 * Saurav Shekhar <sauravshekhar01@gmail.com> - ETH Zurich, Switzerland *; 15 * Ravi Kiran S <sravikiran0606@gmail.com> - CERN, Switzerland *; 16 * *; 17 * Copyright (c) 2005-2015: *; 18 * CERN, Switzerland *; 19 * U. of Victoria, Canada *; 20 * MPI-K Heidelberg, Germany *; 21 * U. of Bonn, Germany *; 22 * *; 23 * Redistribution and use in source and binary forms, with or without *; 24 * modification, are permitted according to the terms listed in LICENSE *; 25 * (see tmva/doc/LICENSE) *; 26 **********************************************************************************/; 27 ; 28#include ""TFormula.h""; 29#include ""TString.h""; 30#include ""TMath.h""; 31#include ""TObjString.h""; 32 ; 33#include ""TMVA/Tools.h""; 34#include ""TMVA/Configurable.h""; 35#include ""TMVA/IMethod.h""; 36#include ""TMVA/ClassifierFactory.h""; 37#include ""TMVA/MethodDL.h""; 38#include ""TMVA/Types.h""; 39#include ""TMVA/DNN/TensorDataLoader.h""; 40#include ""TMVA/DNN/Functions.h""; 41#include ""TMVA/DNN/DLMinimizers.h""; 42#include ""TMVA/DNN/SGD.h""; 43#include ""TMVA/DNN/Adam.h""; 44#include ""TMVA/DNN/Adagrad.h""; 45#include ""TMVA/DNN/RMSProp.h""; 46#include ""TMVA/DNN/Adadelta.h""; 47#include ""TMVA/Timer.h""; 48 ; 49#ifdef R__HAS_TMVAGPU; 50#include ""TMVA/DNN/Architectures/Cuda.h""; 51#ifdef R__HAS_CUDNN; 52#include ""TMVA/DNN/Architectures/TC",MatchSource.WIKI,doc/master/MethodDL_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html
Modifiability,layers,layers,"ng = (TObjString *)nextBatchDim();; 498 int idxToken = 0;; 499 ; 500 for (; batchDimString != nullptr; batchDimString = (TObjString *)nextBatchDim()) {; 501 switch (idxToken) {; 502 case 0: // input depth; 503 {; 504 TString strDepth(batchDimString->GetString());; 505 batchDepth = (size_t)strDepth.Atoi();; 506 } break;; 507 case 1: // input height; 508 {; 509 TString strHeight(batchDimString->GetString());; 510 batchHeight = (size_t)strHeight.Atoi();; 511 } break;; 512 case 2: // input width; 513 {; 514 TString strWidth(batchDimString->GetString());; 515 batchWidth = (size_t)strWidth.Atoi();; 516 } break;; 517 }; 518 ++idxToken;; 519 }; 520 ; 521 this->SetBatchDepth(batchDepth);; 522 this->SetBatchHeight(batchHeight);; 523 this->SetBatchWidth(batchWidth);; 524}; 525 ; 526////////////////////////////////////////////////////////////////////////////////; 527/// Create a deep net based on the layout string; 528template <typename Architecture_t, typename Layer_t>; 529void MethodDL::CreateDeepNet(DNN::TDeepNet<Architecture_t, Layer_t> &deepNet,; 530 std::vector<DNN::TDeepNet<Architecture_t, Layer_t>> &nets); 531{; 532 // Layer specification, layer details; 533 const TString layerDelimiter("","");; 534 const TString subDelimiter(""|"");; 535 ; 536 TString layoutString = this->GetLayoutString();; 537 ; 538 //std::cout << ""Create Deepnet - layout string "" << layoutString << ""\t layers : "" << deepNet.GetLayers().size() << std::endl;; 539 ; 540 // Split layers; 541 TObjArray *layerStrings = layoutString.Tokenize(layerDelimiter);; 542 TIter nextLayer(layerStrings);; 543 TObjString *layerString = (TObjString *)nextLayer();; 544 ; 545 ; 546 for (; layerString != nullptr; layerString = (TObjString *)nextLayer()) {; 547 ; 548 // Split layer details; 549 TObjArray *subStrings = layerString->GetString().Tokenize(subDelimiter);; 550 TIter nextToken(subStrings);; 551 TObjString *token = (TObjString *)nextToken();; 552 ; 553 // Determine the type of the layer; 554 TString strLayerType = toke",MatchSource.WIKI,doc/master/MethodDL_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html
Performance,perform,perform,"; 178 "" or cross entropy (binary classification)."");; 179 AddPreDefVal(TString(""CROSSENTROPY""));; 180 AddPreDefVal(TString(""SUMOFSQUARES""));; 181 AddPreDefVal(TString(""MUTUALEXCLUSIVE""));; 182 ; 183 DeclareOptionRef(fWeightInitializationString = ""XAVIER"", ""WeightInitialization"", ""Weight initialization strategy"");; 184 AddPreDefVal(TString(""XAVIER""));; 185 AddPreDefVal(TString(""XAVIERUNIFORM""));; 186 AddPreDefVal(TString(""GAUSS""));; 187 AddPreDefVal(TString(""UNIFORM""));; 188 AddPreDefVal(TString(""IDENTITY""));; 189 AddPreDefVal(TString(""ZERO""));; 190 ; 191 DeclareOptionRef(fRandomSeed = 0, ""RandomSeed"", ""Random seed used for weight initialization and batch shuffling"");; 192 ; 193 DeclareOptionRef(fNumValidationString = ""20%"", ""ValidationSize"", ""Part of the training data to use for validation. ""; 194 ""Specify as 0.2 or 20% to use a fifth of the data set as validation set. ""; 195 ""Specify as 100 to use exactly 100 events. (Default: 20%)"");; 196 ; 197 DeclareOptionRef(fArchitectureString = ""CPU"", ""Architecture"", ""Which architecture to perform the training on."");; 198 AddPreDefVal(TString(""STANDARD"")); // deprecated and not supported anymore; 199 AddPreDefVal(TString(""CPU""));; 200 AddPreDefVal(TString(""GPU""));; 201 AddPreDefVal(TString(""OPENCL"")); // not yet implemented; 202 AddPreDefVal(TString(""CUDNN"")); // not needed (by default GPU is now CUDNN if available); 203 ; 204 // define training strategy separated by a separator ""|""; 205 DeclareOptionRef(fTrainingStrategyString = ""LearningRate=1e-3,""; 206 ""Momentum=0.0,""; 207 ""ConvergenceSteps=100,""; 208 ""MaxEpochs=2000,""; 209 ""Optimizer=ADAM,""; 210 ""BatchSize=30,""; 211 ""TestRepetitions=1,""; 212 ""WeightDecay=0.0,""; 213 ""Regularization=None,""; 214 ""DropConfig=0.0"",; 215 ""TrainingStrategy"", ""Defines the training strategies."");; 216}; 217 ; 218////////////////////////////////////////////////////////////////////////////////; 219void MethodDL::ProcessOptions(); 220{; 221 ; 222 if (IgnoreEventsWithNegWeightsInTraining()) {; 223 Log(",MatchSource.WIKI,doc/master/MethodDL_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html
Safety,detect,detected,"as not been implemented yet. ""; 237 ""Please use Architecture=CPU or Architecture=CPU for the ""; 238 ""time being. See the TMVA Users' Guide for instructions ""; 239 ""if you encounter problems.""; 240 << Endl;; 241 // use instead GPU; 242 Log() << kINFO << ""We will try using the GPU-CUDA architecture if available"" << Endl;; 243 fArchitectureString = ""GPU"";; 244 }; 245 ; 246 // the architecture can now be set at runtime as an option; 247 ; 248 ; 249 if (fArchitectureString == ""GPU"" || fArchitectureString == ""CUDNN"") {; 250#ifdef R__HAS_TMVAGPU; 251 Log() << kINFO << ""Will now use the GPU architecture !"" << Endl;; 252#else // case TMVA does not support GPU; 253 Log() << kERROR << ""CUDA backend not enabled. Please make sure ""; 254 ""you have CUDA installed and it was successfully ""; 255 ""detected by CMAKE by using -Dtmva-gpu=On ""; 256 << Endl;; 257 fArchitectureString = ""CPU"";; 258 Log() << kINFO << ""Will now use instead the CPU architecture !"" << Endl;; 259#endif; 260 }; 261 ; 262 if (fArchitectureString == ""CPU"") {; 263#ifdef R__HAS_TMVACPU // TMVA has CPU BLAS and IMT support; 264 Log() << kINFO << ""Will now use the CPU architecture with BLAS and IMT support !"" << Endl;; 265#else // TMVA has no CPU BLAS or IMT support; 266 Log() << kINFO << ""Multi-core CPU backend not enabled. For better performances, make sure ""; 267 ""you have a BLAS implementation and it was successfully ""; 268 ""detected by CMake as well that the imt CMake flag is set.""; 269 << Endl;; 270 Log() << kINFO << ""Will use anyway the CPU architecture but with slower performance"" << Endl;; 271#endif; 272 }; 273 ; 274 // Input Layout; 275 ParseInputLayout();; 276 ParseBatchLayout();; 277 ; 278 // Loss function and output.; 279 fOutputFunction = EOutputFunction::kSigmoid;; 280 if (fAnalysisType == Types::kClassification) {; 281 if (fErrorStrategy == ""SUMOFSQUARES"") {; 282 fLossFunction = ELossFunction::kMeanSquaredError;; 283 }; 284 if (fErrorStrategy == ""CROSSENTROPY"") {; 285 fLossFunction = ELossFunction::kCros",MatchSource.WIKI,doc/master/MethodDL_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html
Security,validat,validation,"//////////////////////////////; 167void MethodDL::DeclareOptions(); 168{; 169 // Set default values for all option strings; 170 ; 171 DeclareOptionRef(fInputLayoutString = ""0|0|0"", ""InputLayout"", ""The Layout of the input"");; 172 ; 173 DeclareOptionRef(fBatchLayoutString = ""0|0|0"", ""BatchLayout"", ""The Layout of the batch"");; 174 ; 175 DeclareOptionRef(fLayoutString = ""DENSE|(N+100)*2|SOFTSIGN,DENSE|0|LINEAR"", ""Layout"", ""Layout of the network."");; 176 ; 177 DeclareOptionRef(fErrorStrategy = ""CROSSENTROPY"", ""ErrorStrategy"", ""Loss function: Mean squared error (regression)""; 178 "" or cross entropy (binary classification)."");; 179 AddPreDefVal(TString(""CROSSENTROPY""));; 180 AddPreDefVal(TString(""SUMOFSQUARES""));; 181 AddPreDefVal(TString(""MUTUALEXCLUSIVE""));; 182 ; 183 DeclareOptionRef(fWeightInitializationString = ""XAVIER"", ""WeightInitialization"", ""Weight initialization strategy"");; 184 AddPreDefVal(TString(""XAVIER""));; 185 AddPreDefVal(TString(""XAVIERUNIFORM""));; 186 AddPreDefVal(TString(""GAUSS""));; 187 AddPreDefVal(TString(""UNIFORM""));; 188 AddPreDefVal(TString(""IDENTITY""));; 189 AddPreDefVal(TString(""ZERO""));; 190 ; 191 DeclareOptionRef(fRandomSeed = 0, ""RandomSeed"", ""Random seed used for weight initialization and batch shuffling"");; 192 ; 193 DeclareOptionRef(fNumValidationString = ""20%"", ""ValidationSize"", ""Part of the training data to use for validation. ""; 194 ""Specify as 0.2 or 20% to use a fifth of the data set as validation set. ""; 195 ""Specify as 100 to use exactly 100 events. (Default: 20%)"");; 196 ; 197 DeclareOptionRef(fArchitectureString = ""CPU"", ""Architecture"", ""Which architecture to perform the training on."");; 198 AddPreDefVal(TString(""STANDARD"")); // deprecated and not supported anymore; 199 AddPreDefVal(TString(""CPU""));; 200 AddPreDefVal(TString(""GPU""));; 201 AddPreDefVal(TString(""OPENCL"")); // not yet implemented; 202 AddPreDefVal(TString(""CUDNN"")); // not needed (by default GPU is now CUDNN if available); 203 ; 204 // define training strategy separat",MatchSource.WIKI,doc/master/MethodDL_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html
Testability,test,testInterval,"eightInitialization = DNN::EInitialization::kGauss;; 318 } else if (fWeightInitializationString == ""UNIFORM"") {; 319 fWeightInitialization = DNN::EInitialization::kUniform;; 320 } else if (fWeightInitializationString == ""ZERO"") {; 321 fWeightInitialization = DNN::EInitialization::kZero;; 322 } else if (fWeightInitializationString == ""IDENTITY"") {; 323 fWeightInitialization = DNN::EInitialization::kIdentity;; 324 } else {; 325 fWeightInitialization = DNN::EInitialization::kGlorotUniform;; 326 }; 327 ; 328 // Training settings.; 329 ; 330 KeyValueVector_t strategyKeyValues = ParseKeyValueString(fTrainingStrategyString, TString(""|""), TString("",""));; 331 for (auto &block : strategyKeyValues) {; 332 TTrainingSettings settings;; 333 ; 334 settings.convergenceSteps = fetchValueTmp(block, ""ConvergenceSteps"", 100);; 335 settings.batchSize = fetchValueTmp(block, ""BatchSize"", 30);; 336 settings.maxEpochs = fetchValueTmp(block, ""MaxEpochs"", 2000);; 337 settings.testInterval = fetchValueTmp(block, ""TestRepetitions"", 7);; 338 settings.weightDecay = fetchValueTmp(block, ""WeightDecay"", 0.0);; 339 settings.learningRate = fetchValueTmp(block, ""LearningRate"", 1e-5);; 340 settings.momentum = fetchValueTmp(block, ""Momentum"", 0.3);; 341 settings.dropoutProbabilities = fetchValueTmp(block, ""DropConfig"", std::vector<Double_t>());; 342 ; 343 TString regularization = fetchValueTmp(block, ""Regularization"", TString(""NONE""));; 344 if (regularization == ""L1"") {; 345 settings.regularization = DNN::ERegularization::kL1;; 346 } else if (regularization == ""L2"") {; 347 settings.regularization = DNN::ERegularization::kL2;; 348 } else {; 349 settings.regularization = DNN::ERegularization::kNone;; 350 }; 351 ; 352 TString optimizer = fetchValueTmp(block, ""Optimizer"", TString(""ADAM""));; 353 settings.optimizerName = optimizer;; 354 if (optimizer == ""SGD"") {; 355 settings.optimizer = DNN::EOptimizer::kSGD;; 356 } else if (optimizer == ""ADAM"") {; 357 settings.optimizer = DNN::EOptimizer::kAdam;; 358 } else i",MatchSource.WIKI,doc/master/MethodDL_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html
Usability,learn,learningRate,"N::EInitialization::kUniform;; 320 } else if (fWeightInitializationString == ""ZERO"") {; 321 fWeightInitialization = DNN::EInitialization::kZero;; 322 } else if (fWeightInitializationString == ""IDENTITY"") {; 323 fWeightInitialization = DNN::EInitialization::kIdentity;; 324 } else {; 325 fWeightInitialization = DNN::EInitialization::kGlorotUniform;; 326 }; 327 ; 328 // Training settings.; 329 ; 330 KeyValueVector_t strategyKeyValues = ParseKeyValueString(fTrainingStrategyString, TString(""|""), TString("",""));; 331 for (auto &block : strategyKeyValues) {; 332 TTrainingSettings settings;; 333 ; 334 settings.convergenceSteps = fetchValueTmp(block, ""ConvergenceSteps"", 100);; 335 settings.batchSize = fetchValueTmp(block, ""BatchSize"", 30);; 336 settings.maxEpochs = fetchValueTmp(block, ""MaxEpochs"", 2000);; 337 settings.testInterval = fetchValueTmp(block, ""TestRepetitions"", 7);; 338 settings.weightDecay = fetchValueTmp(block, ""WeightDecay"", 0.0);; 339 settings.learningRate = fetchValueTmp(block, ""LearningRate"", 1e-5);; 340 settings.momentum = fetchValueTmp(block, ""Momentum"", 0.3);; 341 settings.dropoutProbabilities = fetchValueTmp(block, ""DropConfig"", std::vector<Double_t>());; 342 ; 343 TString regularization = fetchValueTmp(block, ""Regularization"", TString(""NONE""));; 344 if (regularization == ""L1"") {; 345 settings.regularization = DNN::ERegularization::kL1;; 346 } else if (regularization == ""L2"") {; 347 settings.regularization = DNN::ERegularization::kL2;; 348 } else {; 349 settings.regularization = DNN::ERegularization::kNone;; 350 }; 351 ; 352 TString optimizer = fetchValueTmp(block, ""Optimizer"", TString(""ADAM""));; 353 settings.optimizerName = optimizer;; 354 if (optimizer == ""SGD"") {; 355 settings.optimizer = DNN::EOptimizer::kSGD;; 356 } else if (optimizer == ""ADAM"") {; 357 settings.optimizer = DNN::EOptimizer::kAdam;; 358 } else if (optimizer == ""ADAGRAD"") {; 359 settings.optimizer = DNN::EOptimizer::kAdagrad;; 360 } else if (optimizer == ""RMSPROP"") {; 361 settings.optim",MatchSource.WIKI,doc/master/MethodDL_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html
Availability,error,error,"arget; 113 ; 114Bool_t TMVA::MethodDNN::HasAnalysisType(Types::EAnalysisType type,; 115 UInt_t numberClasses,; 116 UInt_t /*numberTargets*/ ); 117{; 118 if (type == Types::kClassification && numberClasses == 2 ) return kTRUE;; 119 if (type == Types::kMulticlass ) return kTRUE;; 120 if (type == Types::kRegression ) return kTRUE;; 121 ; 122 return kFALSE;; 123}; 124 ; 125////////////////////////////////////////////////////////////////////////////////; 126/// default initializations; 127 ; 128void TMVA::MethodDNN::Init() {; 129 Log() << kWARNING; 130 << ""MethodDNN is deprecated and it will be removed in future ROOT version. ""; 131 ""Please use MethodDL ( TMVA::kDL)""; 132 << Endl;; 133 ; 134}; 135 ; 136////////////////////////////////////////////////////////////////////////////////; 137/// Options to be set in the option string:; 138///; 139/// - LearningRate <float> DNN learning rate parameter.; 140/// - DecayRate <float> Decay rate for learning parameter.; 141/// - TestRate <int> Period of validation set error computation.; 142/// - BatchSize <int> Number of event per batch.; 143///; 144/// - ValidationSize <string> How many events to use for validation. ""0.2""; 145/// or ""20%"" indicates that a fifth of the; 146/// training data should be used. ""100""; 147/// indicates that 100 events should be used.; 148 ; 149void TMVA::MethodDNN::DeclareOptions(); 150{; 151 ; 152 DeclareOptionRef(fLayoutString=""SOFTSIGN|(N+100)*2,LINEAR"",; 153 ""Layout"",; 154 ""Layout of the network."");; 155 ; 156 DeclareOptionRef(fValidationSize = ""20%"", ""ValidationSize"",; 157 ""Part of the training data to use for ""; 158 ""validation. Specify as 0.2 or 20% to use a ""; 159 ""fifth of the data set as validation set. ""; 160 ""Specify as 100 to use exactly 100 events. ""; 161 ""(Default: 20%)"");; 162 ; 163 DeclareOptionRef(fErrorStrategy=""CROSSENTROPY"",; 164 ""ErrorStrategy"",; 165 ""Loss function: Mean squared error (regression)""; 166 "" or cross entropy (binary classification)."");; 167 AddPreDefVal(TString(""CROSSEN",MatchSource.WIKI,doc/master/MethodDNN_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html
Deployability,integrat,integrated,". ROOT: tmva/tmva/src/MethodDNN.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. MethodDNN.cxx. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Peter Speckmayer; 3 ; 4/**********************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 6 * Package: TMVA *; 7 * Class : MethodDNN *; 8 * *; 9 * *; 10 * Description: *; 11 * A neural network implementation *; 12 * *; 13 * Authors (alphabetical): *; 14 * Simon Pfreundschuh <s.pfreundschuh@gmail.com> - CERN, Switzerland *; 15 * Peter Speckmayer <peter.speckmayer@gmx.ch> - CERN, Switzerland *; 16 * *; 17 * Copyright (c) 2005-2015: *; 18 * CERN, Switzerland *; 19 * U. of Victoria, Canada *; 20 * MPI-K Heidelberg, Germany *; 21 * U. of Bonn, Germany *; 22 * *; 23 * Redistribution and use in source and binary forms, with or without *; 24 * modification, are permitted according to the terms listed in LICENSE *; 25 * (see tmva/doc/LICENSE) *; 26 **********************************************************************************/; 27 ; 28/*! \class TMVA::MethodDNN; 29\ingroup TMVA; 30Deep Neural Network Implementation.; 31*/; 32 ; 33#include ""TMVA/MethodDNN.h""; 34 ; 35#include ""TString.h""; 36#include ""TFormula.h""; 37#include ""TObjString.h""; 38 ; 39#include ""TMVA/ClassifierFactory.h""; 40#include ""TMVA/Configurable.h""; 41#include ""TMVA/IMethod.h""; 42#include ""TMVA/MsgLogger.h""; 43#include ""TMVA/MethodBase.h""; 44#include ""TMVA/Timer.h""; 45#include ""TMVA/Types.h""; 46#include ""TMVA/Tools.h""; 47#include ""TMVA/Config.h""; 48#include ""TMVA/Ranking.h""; 49 ; 50#include ""TMVA/DNN/Net.h""; 51#include ""TMVA/DNN/Architectures/Reference.h""; 52 ; 53#include ""TMVA/NeuralNet.h""; 54#include ""TMVA/Monitoring.h""; 55 ; 56#ifdef R__HAS_TMVACPU; 57#include ""TMVA/DNN/Architectures/Cpu.h""; 58#endif; 59#ifdef R__HAS_TMVAGPU; 60#include ""TMVA/DNN/Architectures/Cuda.h""; 61#endif; 62 ; 63#includ",MatchSource.WIKI,doc/master/MethodDNN_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html
Energy Efficiency,reduce,reduced,"TString() : gTools().Color(""reset"");; 1485 ; 1486 Log() << Endl;; 1487 Log() << col << ""--- Short description:"" << colres << Endl;; 1488 Log() << Endl;; 1489 Log() << ""The DNN neural network is a feedforward"" << Endl;; 1490 Log() << ""multilayer perceptron implementation. The DNN has a user-"" << Endl;; 1491 Log() << ""defined hidden layer architecture, where the number of input (output)"" << Endl;; 1492 Log() << ""nodes is determined by the input variables (output classes, i.e., "" << Endl;; 1493 Log() << ""signal and one background, regression or multiclass). "" << Endl;; 1494 Log() << Endl;; 1495 Log() << col << ""--- Performance optimisation:"" << colres << Endl;; 1496 Log() << Endl;; 1497 ; 1498 const char* txt = ""The DNN supports various options to improve performance in terms of training speed and \n \; 1499reduction of overfitting: \n \; 1500\n \; 1501 - different training settings can be stacked. Such that the initial training \n\; 1502 is done with a large learning rate and a large drop out fraction whilst \n \; 1503 in a later stage learning rate and drop out can be reduced. \n \; 1504 - drop out \n \; 1505 [recommended: \n \; 1506 initial training stage: 0.0 for the first layer, 0.5 for later layers. \n \; 1507 later training stage: 0.1 or 0.0 for all layers \n \; 1508 final training stage: 0.0] \n \; 1509 Drop out is a technique where a at each training cycle a fraction of arbitrary \n \; 1510 nodes is disabled. This reduces co-adaptation of weights and thus reduces overfitting. \n \; 1511 - L1 and L2 regularization are available \n \; 1512 - Minibatches \n \; 1513 [recommended 10 - 150] \n \; 1514 Arbitrary mini-batch sizes can be chosen. \n \; 1515 - Multithreading \n \; 1516 [recommended: True] \n \; 1517 Multithreading can be turned on. The minibatches are distributed to the available \n \; 1518 cores. The algorithm is lock-free (\""Hogwild!\""-style) for each cycle. \n \; 1519 \n \; 1520 Options: \n \; 1521 \""Layout\"": \n \; 1522 - example: \""TANH|(N+30)*2,TAN",MatchSource.WIKI,doc/master/MethodDNN_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html
Integrability,integrat,integrated,". ROOT: tmva/tmva/src/MethodDNN.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. MethodDNN.cxx. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Peter Speckmayer; 3 ; 4/**********************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 6 * Package: TMVA *; 7 * Class : MethodDNN *; 8 * *; 9 * *; 10 * Description: *; 11 * A neural network implementation *; 12 * *; 13 * Authors (alphabetical): *; 14 * Simon Pfreundschuh <s.pfreundschuh@gmail.com> - CERN, Switzerland *; 15 * Peter Speckmayer <peter.speckmayer@gmx.ch> - CERN, Switzerland *; 16 * *; 17 * Copyright (c) 2005-2015: *; 18 * CERN, Switzerland *; 19 * U. of Victoria, Canada *; 20 * MPI-K Heidelberg, Germany *; 21 * U. of Bonn, Germany *; 22 * *; 23 * Redistribution and use in source and binary forms, with or without *; 24 * modification, are permitted according to the terms listed in LICENSE *; 25 * (see tmva/doc/LICENSE) *; 26 **********************************************************************************/; 27 ; 28/*! \class TMVA::MethodDNN; 29\ingroup TMVA; 30Deep Neural Network Implementation.; 31*/; 32 ; 33#include ""TMVA/MethodDNN.h""; 34 ; 35#include ""TString.h""; 36#include ""TFormula.h""; 37#include ""TObjString.h""; 38 ; 39#include ""TMVA/ClassifierFactory.h""; 40#include ""TMVA/Configurable.h""; 41#include ""TMVA/IMethod.h""; 42#include ""TMVA/MsgLogger.h""; 43#include ""TMVA/MethodBase.h""; 44#include ""TMVA/Timer.h""; 45#include ""TMVA/Types.h""; 46#include ""TMVA/Tools.h""; 47#include ""TMVA/Config.h""; 48#include ""TMVA/Ranking.h""; 49 ; 50#include ""TMVA/DNN/Net.h""; 51#include ""TMVA/DNN/Architectures/Reference.h""; 52 ; 53#include ""TMVA/NeuralNet.h""; 54#include ""TMVA/Monitoring.h""; 55 ; 56#ifdef R__HAS_TMVACPU; 57#include ""TMVA/DNN/Architectures/Cpu.h""; 58#endif; 59#ifdef R__HAS_TMVAGPU; 60#include ""TMVA/DNN/Architectures/Cuda.h""; 61#endif; 62 ; 63#includ",MatchSource.WIKI,doc/master/MethodDNN_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html
Modifiability,config,configuration,"break;; 842 }; 843 ; 844 Settings * settings = new Settings(TString(), s.convergenceSteps, s.batchSize,; 845 s.testInterval, s.weightDecay, r,; 846 MinimizerType::fSteepest, s.learningRate,; 847 s.momentum, 1, s.multithreading);; 848 std::shared_ptr<Settings> ptrSettings(settings);; 849 ptrSettings->setMonitoring (0);; 850 Log() << kINFO; 851 << ""Training with learning rate = "" << ptrSettings->learningRate (); 852 << "", momentum = "" << ptrSettings->momentum (); 853 << "", repetitions = "" << ptrSettings->repetitions (); 854 << Endl;; 855 ; 856 ptrSettings->setProgressLimits ((idxSetting)*100.0/(fSettings.size ()),; 857 (idxSetting+1)*100.0/(fSettings.size ()));; 858 ; 859 const std::vector<double>& dropConfig = ptrSettings->dropFractions ();; 860 if (!dropConfig.empty ()) {; 861 Log () << kINFO << ""Drop configuration"" << Endl; 862 << "" drop repetitions = "" << ptrSettings->dropRepetitions(); 863 << Endl;; 864 }; 865 ; 866 int idx = 0;; 867 for (auto f : dropConfig) {; 868 Log () << kINFO << "" Layer "" << idx << "" = "" << f << Endl;; 869 ++idx;; 870 }; 871 Log () << kINFO << Endl;; 872 ; 873 DNN::Steepest minimizer(ptrSettings->learningRate(),; 874 ptrSettings->momentum(),; 875 ptrSettings->repetitions());; 876 net.train(weights, trainPattern, testPattern, minimizer, *ptrSettings.get());; 877 ptrSettings.reset();; 878 Log () << kINFO << Endl;; 879 idxSetting++;; 880 }; 881 size_t weightIndex = 0;; 882 for (size_t l = 0; l < fNet.GetDepth(); l++) {; 883 auto & layerWeights = fNet.GetLayer(l).GetWeights();; 884 for (Int_t j = 0; j < layerWeights.GetNcols(); j++) {; 885 for (Int_t i = 0; i < layerWeights.GetNrows(); i++) {; 886 layerWeights(i,j) = weights[weightIndex];; 887 weightIndex++;; 888 }; 889 }; 890 auto & layerBiases = fNet.GetLayer(l).GetBiases();; 891 if (l == 0) {; 892 for (Int_t i = 0; i < layerBiases.GetNrows(); i++) {; 893 layerBiases(i,0) = weights[weightIndex];; 894 weightIndex++;; 895 }; 896 } else {; 897 for (Int_t i = 0; i < layerBiases.GetNrows(); i++) {",MatchSource.WIKI,doc/master/MethodDNN_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html
Performance,perform,perform,"s that a fifth of the; 146/// training data should be used. ""100""; 147/// indicates that 100 events should be used.; 148 ; 149void TMVA::MethodDNN::DeclareOptions(); 150{; 151 ; 152 DeclareOptionRef(fLayoutString=""SOFTSIGN|(N+100)*2,LINEAR"",; 153 ""Layout"",; 154 ""Layout of the network."");; 155 ; 156 DeclareOptionRef(fValidationSize = ""20%"", ""ValidationSize"",; 157 ""Part of the training data to use for ""; 158 ""validation. Specify as 0.2 or 20% to use a ""; 159 ""fifth of the data set as validation set. ""; 160 ""Specify as 100 to use exactly 100 events. ""; 161 ""(Default: 20%)"");; 162 ; 163 DeclareOptionRef(fErrorStrategy=""CROSSENTROPY"",; 164 ""ErrorStrategy"",; 165 ""Loss function: Mean squared error (regression)""; 166 "" or cross entropy (binary classification)."");; 167 AddPreDefVal(TString(""CROSSENTROPY""));; 168 AddPreDefVal(TString(""SUMOFSQUARES""));; 169 AddPreDefVal(TString(""MUTUALEXCLUSIVE""));; 170 ; 171 DeclareOptionRef(fWeightInitializationString=""XAVIER"",; 172 ""WeightInitialization"",; 173 ""Weight initialization strategy"");; 174 AddPreDefVal(TString(""XAVIER""));; 175 AddPreDefVal(TString(""XAVIERUNIFORM""));; 176 ; 177 DeclareOptionRef(fArchitectureString = ""CPU"", ""Architecture"", ""Which architecture to perform the training on."");; 178 AddPreDefVal(TString(""STANDARD""));; 179 AddPreDefVal(TString(""CPU""));; 180 AddPreDefVal(TString(""GPU""));; 181 AddPreDefVal(TString(""OPENCL""));; 182 ; 183 DeclareOptionRef(; 184 fTrainingStrategyString = ""LearningRate=1e-1,""; 185 ""Momentum=0.3,""; 186 ""Repetitions=3,""; 187 ""ConvergenceSteps=50,""; 188 ""BatchSize=30,""; 189 ""TestRepetitions=7,""; 190 ""WeightDecay=0.0,""; 191 ""Renormalize=L2,""; 192 ""DropConfig=0.0,""; 193 ""DropRepetitions=5|LearningRate=1e-4,""; 194 ""Momentum=0.3,""; 195 ""Repetitions=3,""; 196 ""ConvergenceSteps=50,""; 197 ""BatchSize=20,""; 198 ""TestRepetitions=7,""; 199 ""WeightDecay=0.001,""; 200 ""Renormalize=L2,""; 201 ""DropConfig=0.0+0.5+0.5,""; 202 ""DropRepetitions=5,""; 203 ""Multithreading=True"",; 204 ""TrainingStrategy"",; 205 ""Defines the tr",MatchSource.WIKI,doc/master/MethodDNN_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html
Safety,detect,detected,"L << ""The STANDARD architecture has been deprecated. ""; 439 ""Please use Architecture=CPU or Architecture=CPU.""; 440 ""See the TMVA Users' Guide for instructions if you ""; 441 ""encounter problems.""; 442 << Endl;; 443 }; 444 ; 445 if (fArchitectureString == ""OPENCL"") {; 446 Log() << kERROR << ""The OPENCL architecture has not been implemented yet. ""; 447 ""Please use Architecture=CPU or Architecture=CPU for the ""; 448 ""time being. See the TMVA Users' Guide for instructions ""; 449 ""if you encounter problems.""; 450 << Endl;; 451 Log() << kFATAL << ""The OPENCL architecture has not been implemented yet. ""; 452 ""Please use Architecture=CPU or Architecture=CPU for the ""; 453 ""time being. See the TMVA Users' Guide for instructions ""; 454 ""if you encounter problems.""; 455 << Endl;; 456 }; 457 ; 458 if (fArchitectureString == ""GPU"") {; 459#ifndef DNNCUDA // Included only if DNNCUDA flag is _not_ set.; 460 Log() << kERROR << ""CUDA backend not enabled. Please make sure ""; 461 ""you have CUDA installed and it was successfully ""; 462 ""detected by CMAKE.""; 463 << Endl;; 464 Log() << kFATAL << ""CUDA backend not enabled. Please make sure ""; 465 ""you have CUDA installed and it was successfully ""; 466 ""detected by CMAKE.""; 467 << Endl;; 468#endif // DNNCUDA; 469 }; 470 ; 471 if (fArchitectureString == ""CPU"") {; 472#ifndef DNNCPU // Included only if DNNCPU flag is _not_ set.; 473 Log() << kERROR << ""Multi-core CPU backend not enabled. Please make sure ""; 474 ""you have a BLAS implementation and it was successfully ""; 475 ""detected by CMake as well that the imt CMake flag is set.""; 476 << Endl;; 477 Log() << kFATAL << ""Multi-core CPU backend not enabled. Please make sure ""; 478 ""you have a BLAS implementation and it was successfully ""; 479 ""detected by CMake as well that the imt CMake flag is set.""; 480 << Endl;; 481#endif // DNNCPU; 482 }; 483 ; 484 //; 485 // Set network structure.; 486 //; 487 ; 488 fLayout = TMVA::MethodDNN::ParseLayoutString (fLayoutString);; 489 size_t inputSize = GetNV",MatchSource.WIKI,doc/master/MethodDNN_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html
Security,validat,validation,"arget; 113 ; 114Bool_t TMVA::MethodDNN::HasAnalysisType(Types::EAnalysisType type,; 115 UInt_t numberClasses,; 116 UInt_t /*numberTargets*/ ); 117{; 118 if (type == Types::kClassification && numberClasses == 2 ) return kTRUE;; 119 if (type == Types::kMulticlass ) return kTRUE;; 120 if (type == Types::kRegression ) return kTRUE;; 121 ; 122 return kFALSE;; 123}; 124 ; 125////////////////////////////////////////////////////////////////////////////////; 126/// default initializations; 127 ; 128void TMVA::MethodDNN::Init() {; 129 Log() << kWARNING; 130 << ""MethodDNN is deprecated and it will be removed in future ROOT version. ""; 131 ""Please use MethodDL ( TMVA::kDL)""; 132 << Endl;; 133 ; 134}; 135 ; 136////////////////////////////////////////////////////////////////////////////////; 137/// Options to be set in the option string:; 138///; 139/// - LearningRate <float> DNN learning rate parameter.; 140/// - DecayRate <float> Decay rate for learning parameter.; 141/// - TestRate <int> Period of validation set error computation.; 142/// - BatchSize <int> Number of event per batch.; 143///; 144/// - ValidationSize <string> How many events to use for validation. ""0.2""; 145/// or ""20%"" indicates that a fifth of the; 146/// training data should be used. ""100""; 147/// indicates that 100 events should be used.; 148 ; 149void TMVA::MethodDNN::DeclareOptions(); 150{; 151 ; 152 DeclareOptionRef(fLayoutString=""SOFTSIGN|(N+100)*2,LINEAR"",; 153 ""Layout"",; 154 ""Layout of the network."");; 155 ; 156 DeclareOptionRef(fValidationSize = ""20%"", ""ValidationSize"",; 157 ""Part of the training data to use for ""; 158 ""validation. Specify as 0.2 or 20% to use a ""; 159 ""fifth of the data set as validation set. ""; 160 ""Specify as 100 to use exactly 100 events. ""; 161 ""(Default: 20%)"");; 162 ; 163 DeclareOptionRef(fErrorStrategy=""CROSSENTROPY"",; 164 ""ErrorStrategy"",; 165 ""Loss function: Mean squared error (regression)""; 166 "" or cross entropy (binary classification)."");; 167 AddPreDefVal(TString(""CROSSEN",MatchSource.WIKI,doc/master/MethodDNN_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html
Testability,test,testInterval," {; 547 fWeightInitialization = DNN::EInitialization::kGauss;; 548 }; 549 else if (fWeightInitializationString == ""XAVIERUNIFORM"") {; 550 fWeightInitialization = DNN::EInitialization::kUniform;; 551 }; 552 else {; 553 fWeightInitialization = DNN::EInitialization::kGauss;; 554 }; 555 ; 556 //; 557 // Training settings.; 558 //; 559 ; 560 // Force validation of the ValidationSize option; 561 GetNumValidationSamples();; 562 ; 563 KeyValueVector_t strategyKeyValues = ParseKeyValueString(fTrainingStrategyString,; 564 TString (""|""),; 565 TString ("",""));; 566 ; 567 std::cout << ""Parsed Training DNN string "" << fTrainingStrategyString << std::endl;; 568 std::cout << ""STring has size "" << strategyKeyValues.size() << std::endl;; 569 for (auto& block : strategyKeyValues) {; 570 TTrainingSettings settings;; 571 ; 572 settings.convergenceSteps = fetchValue(block, ""ConvergenceSteps"", 100);; 573 settings.batchSize = fetchValue(block, ""BatchSize"", 30);; 574 settings.testInterval = fetchValue(block, ""TestRepetitions"", 7);; 575 settings.weightDecay = fetchValue(block, ""WeightDecay"", 0.0);; 576 settings.learningRate = fetchValue(block, ""LearningRate"", 1e-5);; 577 settings.momentum = fetchValue(block, ""Momentum"", 0.3);; 578 settings.dropoutProbabilities = fetchValue(block, ""DropConfig"",; 579 std::vector<Double_t>());; 580 ; 581 TString regularization = fetchValue(block, ""Regularization"",; 582 TString (""NONE""));; 583 if (regularization == ""L1"") {; 584 settings.regularization = DNN::ERegularization::kL1;; 585 } else if (regularization == ""L2"") {; 586 settings.regularization = DNN::ERegularization::kL2;; 587 } else {; 588 settings.regularization = DNN::ERegularization::kNone;; 589 }; 590 ; 591 TString strMultithreading = fetchValue(block, ""Multithreading"",; 592 TString (""True""));; 593 if (strMultithreading.BeginsWith (""T"")) {; 594 settings.multithreading = true;; 595 } else {; 596 settings.multithreading = false;; 597 }; 598 ; 599 fTrainingSettings.push_back(settings);; 600 }; 601}; 602 ;",MatchSource.WIKI,doc/master/MethodDNN_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html
Usability,learn,learning,"nction = DNN::EOutputFunction::kSigmoid;; 108}; 109 ; 110////////////////////////////////////////////////////////////////////////////////; 111/// MLP can handle classification with 2 classes and regression with; 112/// one regression-target; 113 ; 114Bool_t TMVA::MethodDNN::HasAnalysisType(Types::EAnalysisType type,; 115 UInt_t numberClasses,; 116 UInt_t /*numberTargets*/ ); 117{; 118 if (type == Types::kClassification && numberClasses == 2 ) return kTRUE;; 119 if (type == Types::kMulticlass ) return kTRUE;; 120 if (type == Types::kRegression ) return kTRUE;; 121 ; 122 return kFALSE;; 123}; 124 ; 125////////////////////////////////////////////////////////////////////////////////; 126/// default initializations; 127 ; 128void TMVA::MethodDNN::Init() {; 129 Log() << kWARNING; 130 << ""MethodDNN is deprecated and it will be removed in future ROOT version. ""; 131 ""Please use MethodDL ( TMVA::kDL)""; 132 << Endl;; 133 ; 134}; 135 ; 136////////////////////////////////////////////////////////////////////////////////; 137/// Options to be set in the option string:; 138///; 139/// - LearningRate <float> DNN learning rate parameter.; 140/// - DecayRate <float> Decay rate for learning parameter.; 141/// - TestRate <int> Period of validation set error computation.; 142/// - BatchSize <int> Number of event per batch.; 143///; 144/// - ValidationSize <string> How many events to use for validation. ""0.2""; 145/// or ""20%"" indicates that a fifth of the; 146/// training data should be used. ""100""; 147/// indicates that 100 events should be used.; 148 ; 149void TMVA::MethodDNN::DeclareOptions(); 150{; 151 ; 152 DeclareOptionRef(fLayoutString=""SOFTSIGN|(N+100)*2,LINEAR"",; 153 ""Layout"",; 154 ""Layout of the network."");; 155 ; 156 DeclareOptionRef(fValidationSize = ""20%"", ""ValidationSize"",; 157 ""Part of the training data to use for ""; 158 ""validation. Specify as 0.2 or 20% to use a ""; 159 ""fifth of the data set as validation set. ""; 160 ""Specify as 100 to use exactly 100 events. ""; 161 ""(Def",MatchSource.WIKI,doc/master/MethodDNN_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html
Availability,error,error,"empty() && ( Minim::gDefaultMinimizer == ""Minuit"" ||; 48 Minim::gDefaultMinimizer == ""Minuit2"") ); 49 Minim::gDefaultMinimAlgo = ""Migrad"";; 50}; 51void MinimizerOptions::SetDefaultErrorDef(double up) {; 52 // set the default error definition; 53 Minim::gDefaultErrorDef ",MatchSource.WIKI,doc/master/MinimizerOptions_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MinimizerOptions_8cxx_source.html
Deployability,configurat,configuration,winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; namechar name[80]Definition TGX11.cxx:110; TVirtualRWMutex.h; R__WRITE_LOCKGUARD#define R__WRITE_LOCKGUARD(mutex)Definition TVirtualRWMutex.h:157; R__READ_LOCKGUARD#define R__READ_LOCKGUARD(mutex)Definition TVirtualRWMutex.h:154; ROOT::Math::GenAlgoOptions::PrintAllDefaultstatic void PrintAllDefault(std::ostream &os=std::cout)print all the default optionsDefinition GenAlgoOptions.cxx:67; ROOT::Math::GenAlgoOptions::Defaultstatic IOptions & Default(const char *algoname)Definition GenAlgoOptions.cxx:55; ROOT::Math::GenAlgoOptions::FindDefaultstatic IOptions * FindDefault(const char *algoname)Definition GenAlgoOptions.cxx:48; ROOT::Math::IOptionsGeneric interface for defining configuration options of a numerical algorithm.Definition IOptions.h:28; ROOT::Math::IOptions::Clonevirtual IOptions * Clone() const =0; ROOT::Math::IOptions::Printvirtual void Print(std::ostream &=std::cout) constprint optionsDefinition IOptions.cxx:56; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; ROOT::Math::MinimizerOptions::operator=MinimizerOptions & operator=(const MinimizerOptions &opt)assignment operatorsDefinition MinimizerOptions.cxx:151; ROOT::Math::MinimizerOptions::DefaultPrintLevelstatic int DefaultPrintLevel()Definition MinimizerOptions.cxx:97; ROOT::Math::MinimizerOptions::DefaultPrecisionstatic double DefaultPrecision()Definition MinimizerOptions.cxx:93; ROOT::Math::MinimizerOptions::Defaultstatic ROOT::Math::IOptions & Default(const char *name)Retrieve extra options for a given minimizer name.Definition MinimizerOptions.cxx:234; ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCallsstatic void SetDefaultMaxFunctionCalls(int m,MatchSource.WIKI,doc/master/MinimizerOptions_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MinimizerOptions_8cxx_source.html
Integrability,interface,interface,winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; namechar name[80]Definition TGX11.cxx:110; TVirtualRWMutex.h; R__WRITE_LOCKGUARD#define R__WRITE_LOCKGUARD(mutex)Definition TVirtualRWMutex.h:157; R__READ_LOCKGUARD#define R__READ_LOCKGUARD(mutex)Definition TVirtualRWMutex.h:154; ROOT::Math::GenAlgoOptions::PrintAllDefaultstatic void PrintAllDefault(std::ostream &os=std::cout)print all the default optionsDefinition GenAlgoOptions.cxx:67; ROOT::Math::GenAlgoOptions::Defaultstatic IOptions & Default(const char *algoname)Definition GenAlgoOptions.cxx:55; ROOT::Math::GenAlgoOptions::FindDefaultstatic IOptions * FindDefault(const char *algoname)Definition GenAlgoOptions.cxx:48; ROOT::Math::IOptionsGeneric interface for defining configuration options of a numerical algorithm.Definition IOptions.h:28; ROOT::Math::IOptions::Clonevirtual IOptions * Clone() const =0; ROOT::Math::IOptions::Printvirtual void Print(std::ostream &=std::cout) constprint optionsDefinition IOptions.cxx:56; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; ROOT::Math::MinimizerOptions::operator=MinimizerOptions & operator=(const MinimizerOptions &opt)assignment operatorsDefinition MinimizerOptions.cxx:151; ROOT::Math::MinimizerOptions::DefaultPrintLevelstatic int DefaultPrintLevel()Definition MinimizerOptions.cxx:97; ROOT::Math::MinimizerOptions::DefaultPrecisionstatic double DefaultPrecision()Definition MinimizerOptions.cxx:93; ROOT::Math::MinimizerOptions::Defaultstatic ROOT::Math::IOptions & Default(const char *name)Retrieve extra options for a given minimizer name.Definition MinimizerOptions.cxx:234; ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCallsstatic void SetDefaultMaxFunctionCalls(int m,MatchSource.WIKI,doc/master/MinimizerOptions_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MinimizerOptions_8cxx_source.html
Modifiability,plug-in,plug-in,". ROOT: math/mathcore/src/MinimizerOptions.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. MinimizerOptions.cxx. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Author: L. Moneta Fri Aug 15 2008; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11#include ""Math/MinimizerOptions.h""; 12 ; 13#include ""Math/GenAlgoOptions.h""; 14 ; 15// case of using ROOT plug-in manager; 16#ifndef MATH_NO_PLUGIN_MANAGER; 17#include ""TEnv.h""; 18#include ""TVirtualRWMutex.h""; 19#endif; 20 ; 21 ; 22#include <iomanip>; 23 ; 24namespace ROOT {; 25 ; 26 ; 27namespace Math {; 28 ; 29 namespace Minim {; 30 static std::string gDefaultMinimizer; // take from /etc/system.rootrc in ROOT Fitter; 31 static std::string gDefaultMinimAlgo = ""Migrad"";; 32 static double gDefaultErrorDef = 1.;; 33 static double gDefaultTolerance = 1.E-2;; 34 static double gDefaultPrecision = -1; // value <= 0 means left to minimizer; 35 static int gDefaultMaxCalls = 0; // 0 means leave default values Deaf; 36 static int gDefaultMaxIter = 0;; 37 static int gDefaultStrategy = 1;; 38 static int gDefaultPrintLevel = 0;; 39 static IOptions * gDefaultExtraOptions = nullptr; // pointer to default extra options; 40 }; 41 ; 42 ; 43void MinimizerOptions::SetDefaultMinimizer(const char * type, const char * algo) {; 44 // set the default minimizer type and algorithm; 45 if (type) Minim::gDefaultMinimizer = std::string(type);; 46 if (algo) Minim::gDefaultMinimAlgo = std::string(algo);; 47 if (Minim::gDefaultMinimAlgo.empty() && ( Minim::gDefaultMinimizer == ""Minuit"" ||; 48 Minim::gDefaultMinimizer == ""Minuit2"") ); 49 Minim::gDefaultMinimAlgo = ""Migrad"";; 50}; 51void MinimizerOptions::SetDefaultErrorDef(double up) {; 52 // set the default error definition; 53 Minim::gDefaultErrorDef ",MatchSource.WIKI,doc/master/MinimizerOptions_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MinimizerOptions_8cxx_source.html
Integrability,depend,dependency,". ROOT: math/mathcore/inc/Math/MinimizerOptions.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces ; MinimizerOptions.h File Reference. #include <string>; #include <iostream>. Include dependency graph for MinimizerOptions.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Math::MinimizerOptions;  Minimizer options. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Math;  . mathmathcoreincMathMinimizerOptions.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/MinimizerOptions_8h.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MinimizerOptions_8h.html
Availability,avail,available,"*; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11#ifndef ROOT_Math_MinimizerOptions; 12#define ROOT_Math_MinimizerOptions; 13 ; 14#include <string>; 15 ; 16#include <iostream>; 17 ; 18namespace ROOT {; 19 ; 20 ; 21namespace Math {; 22 ; 23 ; 24class IOptions;; 25 ; 26//_______________________________________________________________________________; 27/**; 28 Minimizer options; 29 ; 30 @ingroup MultiMin; 31 ; 32 Class defining the options for the minimizer.; 33 It contains also static methods for setting the default Minimizer option values; 34 that will be used by default by all Minimizer instances.; 35 To see the current default options do:; 36 ; 37 ROOT::Math::MinimizerOptions::PrintDefault();; 38 ; 39*/; 40class MinimizerOptions {; 41 ; 42public:; 43 ; 44 // static methods for setting and retrieving the default options; 45 ; 46 /// Set the default Minimizer type and corresponding algorithms.; 47 /// Here is the list of the available minimizers and their corresponding algorithms.; 48 /// For some minimizers (e.g. Fumili) there are no specific algorithms available, then there is no need to specify it.; 49 ///; 50 /// \anchor ROOTMinimizers; 51 /// ### ROOT Minimizers; 52 ///; 53 /// - Minuit Minimizer based on TMinuit, the legacy Minuit implementation. Here are the available algorithms:; 54 /// - Migrad default algorithm based on the variable metric minimizer; 55 /// - Minimize combination of Simplex and Migrad; 56 /// - Simplex minimization algorithm not using the gradient information; 57 /// - Scan brute function scan; 58 /// - Minuit2 New C++ implementation of Minuit (the recommended one); 59 /// - Migrad (default); 60 /// - Minimize; 61 /// - Simplex; 62 /// - Fumili2 new implementation of Fumili integrated in Minuit2; 63 /// - Fumili Minimizer using an approximation for the Hessian based on first derivatives of the model function (see TFumili). Works only for chi-squared and likelihood functions.; 64 /// - Linear",MatchSource.WIKI,doc/master/MinimizerOptions_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MinimizerOptions_8h_source.html
Deployability,integrat,integrated,"t by all Minimizer instances.; 35 To see the current default options do:; 36 ; 37 ROOT::Math::MinimizerOptions::PrintDefault();; 38 ; 39*/; 40class MinimizerOptions {; 41 ; 42public:; 43 ; 44 // static methods for setting and retrieving the default options; 45 ; 46 /// Set the default Minimizer type and corresponding algorithms.; 47 /// Here is the list of the available minimizers and their corresponding algorithms.; 48 /// For some minimizers (e.g. Fumili) there are no specific algorithms available, then there is no need to specify it.; 49 ///; 50 /// \anchor ROOTMinimizers; 51 /// ### ROOT Minimizers; 52 ///; 53 /// - Minuit Minimizer based on TMinuit, the legacy Minuit implementation. Here are the available algorithms:; 54 /// - Migrad default algorithm based on the variable metric minimizer; 55 /// - Minimize combination of Simplex and Migrad; 56 /// - Simplex minimization algorithm not using the gradient information; 57 /// - Scan brute function scan; 58 /// - Minuit2 New C++ implementation of Minuit (the recommended one); 59 /// - Migrad (default); 60 /// - Minimize; 61 /// - Simplex; 62 /// - Fumili2 new implementation of Fumili integrated in Minuit2; 63 /// - Fumili Minimizer using an approximation for the Hessian based on first derivatives of the model function (see TFumili). Works only for chi-squared and likelihood functions.; 64 /// - Linear Linear minimizer (fitter) working only for linear functions (see TLinearFitter and TLinearMinimizer); 65 /// - GSLMultiMin Minimizer from GSL based on the ROOT::Math::GSLMinimizer. Available algorithms are:; 66 /// - BFGS2 (default); 67 /// - BFGS; 68 /// - ConjugateFR; 69 /// - ConjugatePR; 70 /// - SteepestDescent; 71 /// - GSLMultiFit Minimizer based on GSL for minimizing only non linear least-squared functions (using an approximation similar to Fumili). See ROOT::Math::GSLMultiFit.; 72 /// - GSLSimAn Simulated annealing minimizer from GSL (see ROOT::Math::GSLSimAnMinimizer). It is a stochastic minimization algorit",MatchSource.WIKI,doc/master/MinimizerOptions_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MinimizerOptions_8h_source.html
Integrability,integrat,integrated,"t by all Minimizer instances.; 35 To see the current default options do:; 36 ; 37 ROOT::Math::MinimizerOptions::PrintDefault();; 38 ; 39*/; 40class MinimizerOptions {; 41 ; 42public:; 43 ; 44 // static methods for setting and retrieving the default options; 45 ; 46 /// Set the default Minimizer type and corresponding algorithms.; 47 /// Here is the list of the available minimizers and their corresponding algorithms.; 48 /// For some minimizers (e.g. Fumili) there are no specific algorithms available, then there is no need to specify it.; 49 ///; 50 /// \anchor ROOTMinimizers; 51 /// ### ROOT Minimizers; 52 ///; 53 /// - Minuit Minimizer based on TMinuit, the legacy Minuit implementation. Here are the available algorithms:; 54 /// - Migrad default algorithm based on the variable metric minimizer; 55 /// - Minimize combination of Simplex and Migrad; 56 /// - Simplex minimization algorithm not using the gradient information; 57 /// - Scan brute function scan; 58 /// - Minuit2 New C++ implementation of Minuit (the recommended one); 59 /// - Migrad (default); 60 /// - Minimize; 61 /// - Simplex; 62 /// - Fumili2 new implementation of Fumili integrated in Minuit2; 63 /// - Fumili Minimizer using an approximation for the Hessian based on first derivatives of the model function (see TFumili). Works only for chi-squared and likelihood functions.; 64 /// - Linear Linear minimizer (fitter) working only for linear functions (see TLinearFitter and TLinearMinimizer); 65 /// - GSLMultiMin Minimizer from GSL based on the ROOT::Math::GSLMinimizer. Available algorithms are:; 66 /// - BFGS2 (default); 67 /// - BFGS; 68 /// - ConjugateFR; 69 /// - ConjugatePR; 70 /// - SteepestDescent; 71 /// - GSLMultiFit Minimizer based on GSL for minimizing only non linear least-squared functions (using an approximation similar to Fumili). See ROOT::Math::GSLMultiFit.; 72 /// - GSLSimAn Simulated annealing minimizer from GSL (see ROOT::Math::GSLSimAnMinimizer). It is a stochastic minimization algorit",MatchSource.WIKI,doc/master/MinimizerOptions_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MinimizerOptions_8h_source.html
Modifiability,variab,variable,"t by all Minimizer instances.; 35 To see the current default options do:; 36 ; 37 ROOT::Math::MinimizerOptions::PrintDefault();; 38 ; 39*/; 40class MinimizerOptions {; 41 ; 42public:; 43 ; 44 // static methods for setting and retrieving the default options; 45 ; 46 /// Set the default Minimizer type and corresponding algorithms.; 47 /// Here is the list of the available minimizers and their corresponding algorithms.; 48 /// For some minimizers (e.g. Fumili) there are no specific algorithms available, then there is no need to specify it.; 49 ///; 50 /// \anchor ROOTMinimizers; 51 /// ### ROOT Minimizers; 52 ///; 53 /// - Minuit Minimizer based on TMinuit, the legacy Minuit implementation. Here are the available algorithms:; 54 /// - Migrad default algorithm based on the variable metric minimizer; 55 /// - Minimize combination of Simplex and Migrad; 56 /// - Simplex minimization algorithm not using the gradient information; 57 /// - Scan brute function scan; 58 /// - Minuit2 New C++ implementation of Minuit (the recommended one); 59 /// - Migrad (default); 60 /// - Minimize; 61 /// - Simplex; 62 /// - Fumili2 new implementation of Fumili integrated in Minuit2; 63 /// - Fumili Minimizer using an approximation for the Hessian based on first derivatives of the model function (see TFumili). Works only for chi-squared and likelihood functions.; 64 /// - Linear Linear minimizer (fitter) working only for linear functions (see TLinearFitter and TLinearMinimizer); 65 /// - GSLMultiMin Minimizer from GSL based on the ROOT::Math::GSLMinimizer. Available algorithms are:; 66 /// - BFGS2 (default); 67 /// - BFGS; 68 /// - ConjugateFR; 69 /// - ConjugatePR; 70 /// - SteepestDescent; 71 /// - GSLMultiFit Minimizer based on GSL for minimizing only non linear least-squared functions (using an approximation similar to Fumili). See ROOT::Math::GSLMultiFit.; 72 /// - GSLSimAn Simulated annealing minimizer from GSL (see ROOT::Math::GSLSimAnMinimizer). It is a stochastic minimization algorit",MatchSource.WIKI,doc/master/MinimizerOptions_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MinimizerOptions_8h_source.html
Testability,log,log-likelihood,"r from GSL based on the ROOT::Math::GSLMinimizer. Available algorithms are:; 66 /// - BFGS2 (default); 67 /// - BFGS; 68 /// - ConjugateFR; 69 /// - ConjugatePR; 70 /// - SteepestDescent; 71 /// - GSLMultiFit Minimizer based on GSL for minimizing only non linear least-squared functions (using an approximation similar to Fumili). See ROOT::Math::GSLMultiFit.; 72 /// - GSLSimAn Simulated annealing minimizer from GSL (see ROOT::Math::GSLSimAnMinimizer). It is a stochastic minimization algorithm using only function values and not the gradient.; 73 /// - Genetic Genetic minimization algorithms (see TMVA::Genetic); 74 ///; 75 static void SetDefaultMinimizer(const char *type, const char *algo = nullptr);; 76 ; 77 /// Set the default level for computing the parameter errors.; 78 /// For example for 1-sigma parameter errors; 79 /// - up = 1 for a chi-squared function; 80 /// - up = 0.5 for a negative log-likelihood function; 81 ///; 82 /// The value will be used also by Minos when computing the confidence interval; 83 static void SetDefaultErrorDef(double up);; 84 ; 85 /// Set the Minimization tolerance.; 86 /// The Default value for Minuit and Minuit2 is 0.01; 87 static void SetDefaultTolerance(double tol);; 88 ; 89 /// Set the default Minimizer precision.; 90 /// (used only by MInuit and Minuit2); 91 /// It is used to specify the numerical precision used for computing the; 92 /// objective function. It should be left to the default value found by the Minimizer; 93 /// (typically double precision); 94 static void SetDefaultPrecision(double prec);; 95 ; 96 /// Set the maximum number of function calls.; 97 static void SetDefaultMaxFunctionCalls(int maxcall);; 98 ; 99 /// Set the maximum number of iterations.; 100 /// Used by the GSL minimizers and Genetic. Not used by Minuit,Minuit2.; 101 static void SetDefaultMaxIterations(int maxiter);; 102 ; 103 /// Set the default strategy.; 104 /// The strategy is a parameter used only by Minuit and Minuit2.; 105 /// Possible values are:",MatchSource.WIKI,doc/master/MinimizerOptions_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MinimizerOptions_8h_source.html
Availability,error,error,"h>; 9 ; 10namespace ROOT {; 11namespace Math {; 12 ; 13/** set initial second derivatives; 14 */; 15bool Minimizer::SetCovarianceDiag(std::span<const double> g2, unsigned int n); 16{; 17 MATH_UNUSED(g2);; 18 MATH_UNUSED(n);; 19 return false;; 20}; 21 ; 22/** set initial values for covariance/error matrix; 23 The covariance matrix must be provided in compressed form (row-major ordered upper traingular part); 24*/; 25bool Minimizer::SetCovariance(std::span<const double> cov, unsigned int nrow); 26{; 27 MATH_UNUSED(cov);; 28 MATH_UNUSED(nrow);; 29 return false;; 30}; 31 ; 32/// set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default set an unlimited; 33/// variable; 34bool Minimizer::SetLimitedVariable(unsigned int ivar, const std::string &name, double val, double step, double lower,; 35 double upper); 36{; 37 MATH_WARN_MSG(""Minimizer::SetLimitedVariable"", ""Setting of limited variable not implemented - set as unlimited"");; 38 MATH_UNUSED(lower);; 39 MATH_UNUSED(upper);; 40 return SetVariable(ivar, name, val, step);; 41}; 42 ; 43/// set a new fixed variable (override if minimizer supports them ); 44bool Minimizer::SetFixedVariable(unsigned int ivar, const std::string &name, double val); 45{; 46 MATH_ERROR_MSG(""Minimizer::SetFixedVariable"", ""Setting of fixed variable not implemented"");; 47 MATH_UNUSED(ivar);; 48 MATH_UNUSED(name);; 49 MATH_UNUSED(val);; 50 return false;; 51}; 52/// set the value of an already existing variable; 53bool Minimizer::SetVariableValue(unsigned int ivar, double value); 54{; 55 MATH_ERROR_MSG(""Minimizer::SetVariableValue"", ""Set of a variable value not implemented"");; 56 MATH_UNUSED(ivar);; 57 MATH",MatchSource.WIKI,doc/master/Minimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Minimizer_8cxx_source.html
Deployability,release,release,", const std::string &name, double val); 45{; 46 MATH_ERROR_MSG(""Minimizer::SetFixedVariable"", ""Setting of fixed variable not implemented"");; 47 MATH_UNUSED(ivar);; 48 MATH_UNUSED(name);; 49 MATH_UNUSED(val);; 50 return false;; 51}; 52/// set the value of an already existing variable; 53bool Minimizer::SetVariableValue(unsigned int ivar, double value); 54{; 55 MATH_ERROR_MSG(""Minimizer::SetVariableValue"", ""Set of a variable value not implemented"");; 56 MATH_UNUSED(ivar);; 57 MATH_UNUSED(value);; 58 return false;; 59}; 60 ; 61/// set the step size of an already existing variable; 62bool Minimizer::SetVariableStepSize(unsigned int ivar, double value); 63{; 64 MATH_ERROR_MSG(""Minimizer::SetVariableStepSize"", ""Setting an existing variable step size not implemented"");; 65 MATH_UNUSED(ivar);; 66 MATH_UNUSED(value);; 67 return false;; 68}; 69/// set the lower-limit of an already existing variable; 70bool Minimizer::SetVariableLowerLimit(unsigned int ivar, double lower); 71{; 72 MATH_ERROR_MSG(""Minimizer::SetVariableLowerLimit"", ""Setting an existing variable limit not implemented"");; 73 MATH_UNUSED(ivar);; 74 MATH_UNUSED(lower);; 75 return false;; 76}; 77/// set the upper-limit of an already existing variable; 78bool Minimizer::SetVariableUpperLimit(unsigned int ivar, double upper); 79{; 80 MATH_ERROR_MSG(""Minimizer::SetVariableUpperLimit"", ""Setting an existing variable limit not implemented"");; 81 MATH_UNUSED(ivar);; 82 MATH_UNUSED(upper);; 83 return false;; 84}; 85 ; 86/// fix an existing variable; 87bool Minimizer::FixVariable(unsigned int ivar); 88{; 89 MATH_ERROR_MSG(""Minimizer::FixVariable"", ""Fixing an existing variable not implemented"");; 90 MATH_UNUSED(ivar);; 91 return false;; 92}; 93/// release an existing variable; 94bool Minimizer::ReleaseVariable(unsigned int ivar); 95{; 96 MATH_ERROR_MSG(""Minimizer::ReleaseVariable"", ""Releasing an existing variable not implemented"");; 97 MATH_UNUSED(ivar);; 98 return false;; 99}; 100/// query if an existing variable is fixed (i.",MatchSource.WIKI,doc/master/Minimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Minimizer_8cxx_source.html
Integrability,interface,interface,"xisting variable not implemented"");; 112 MATH_UNUSED(ivar);; 113 MATH_UNUSED(pars);; 114 return false;; 115}; 116/** return covariance matrices element for variables ivar,jvar; 117 if the variable is fixed the return value is zero; 118 The ordering of the variables is the same as in the parameter and errors vectors; 119*/; 120double Minimizer::CovMatrix(unsigned int ivar, unsigned int jvar) const; 121{; 122 MATH_UNUSED(ivar);; 123 MATH_UNUSED(jvar);; 124 return 0;; 125}; 126 ; 127/**; 128 Fill the passed array with the covariance matrix elements; 129 if the variable is fixed or const the value is zero.; 130 The array will be filled as cov[i *ndim + j]; 131 The ordering of the variables is the same as in errors and parameter value.; 132 This is different from the direct interface of Minuit2 or TMinuit where the; 133 values were obtained only to variable parameters; 134*/; 135bool Minimizer::GetCovMatrix(double *covMat) const; 136{; 137 MATH_UNUSED(covMat);; 138 return false;; 139}; 140 ; 141/**; 142 Fill the passed array with the Hessian matrix elements; 143 The Hessian matrix is the matrix of the second derivatives; 144 and is the inverse of the covariance matrix; 145 If the variable is fixed or const the values for that variables are zero.; 146 The array will be filled as h[i *ndim + j]; 147*/; 148bool Minimizer::GetHessianMatrix(double *hMat) const; 149{; 150 MATH_UNUSED(hMat);; 151 return false;; 152}; 153 ; 154/**; 155 return global correlation coefficient for variable i; 156 This is a number between zero and one which gives; 157 the correlation between the i-th parameter and that linear combination of all; 158 other parameters which is most strongly correlated with i.; 159 Minimizer must overload method if implemented; 160 */; 161double Minimizer::GlobalCC(unsigned int ivar) const; 162{; 163 MATH_UNUSED(ivar);; 164 return -1;; 165}; 166 ; 167/**; 168 minos error for variable i, return false if Minos failed or not supported; 169 and the lower and upper errors ar",MatchSource.WIKI,doc/master/Minimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Minimizer_8cxx_source.html
Modifiability,variab,variable,"h>; 9 ; 10namespace ROOT {; 11namespace Math {; 12 ; 13/** set initial second derivatives; 14 */; 15bool Minimizer::SetCovarianceDiag(std::span<const double> g2, unsigned int n); 16{; 17 MATH_UNUSED(g2);; 18 MATH_UNUSED(n);; 19 return false;; 20}; 21 ; 22/** set initial values for covariance/error matrix; 23 The covariance matrix must be provided in compressed form (row-major ordered upper traingular part); 24*/; 25bool Minimizer::SetCovariance(std::span<const double> cov, unsigned int nrow); 26{; 27 MATH_UNUSED(cov);; 28 MATH_UNUSED(nrow);; 29 return false;; 30}; 31 ; 32/// set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default set an unlimited; 33/// variable; 34bool Minimizer::SetLimitedVariable(unsigned int ivar, const std::string &name, double val, double step, double lower,; 35 double upper); 36{; 37 MATH_WARN_MSG(""Minimizer::SetLimitedVariable"", ""Setting of limited variable not implemented - set as unlimited"");; 38 MATH_UNUSED(lower);; 39 MATH_UNUSED(upper);; 40 return SetVariable(ivar, name, val, step);; 41}; 42 ; 43/// set a new fixed variable (override if minimizer supports them ); 44bool Minimizer::SetFixedVariable(unsigned int ivar, const std::string &name, double val); 45{; 46 MATH_ERROR_MSG(""Minimizer::SetFixedVariable"", ""Setting of fixed variable not implemented"");; 47 MATH_UNUSED(ivar);; 48 MATH_UNUSED(name);; 49 MATH_UNUSED(val);; 50 return false;; 51}; 52/// set the value of an already existing variable; 53bool Minimizer::SetVariableValue(unsigned int ivar, double value); 54{; 55 MATH_ERROR_MSG(""Minimizer::SetVariableValue"", ""Set of a variable value not implemented"");; 56 MATH_UNUSED(ivar);; 57 MATH",MatchSource.WIKI,doc/master/Minimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Minimizer_8cxx_source.html
Performance,perform,perform,"nst the values for that variables are zero.; 146 The array will be filled as h[i *ndim + j]; 147*/; 148bool Minimizer::GetHessianMatrix(double *hMat) const; 149{; 150 MATH_UNUSED(hMat);; 151 return false;; 152}; 153 ; 154/**; 155 return global correlation coefficient for variable i; 156 This is a number between zero and one which gives; 157 the correlation between the i-th parameter and that linear combination of all; 158 other parameters which is most strongly correlated with i.; 159 Minimizer must overload method if implemented; 160 */; 161double Minimizer::GlobalCC(unsigned int ivar) const; 162{; 163 MATH_UNUSED(ivar);; 164 return -1;; 165}; 166 ; 167/**; 168 minos error for variable i, return false if Minos failed or not supported; 169 and the lower and upper errors are returned in errLow and errUp; 170 An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run; 171*/; 172bool Minimizer::GetMinosError(unsigned int ivar, double &errLow, double &errUp, int option); 173{; 174 MATH_ERROR_MSG(""Minimizer::GetMinosError"", ""Minos Error not implemented"");; 175 MATH_UNUSED(ivar);; 176 MATH_UNUSED(errLow);; 177 MATH_UNUSED(errUp);; 178 MATH_UNUSED(option);; 179 return false;; 180}; 181 ; 182/**; 183 perform a full calculation of the Hessian matrix for error calculation; 184 */; 185bool Minimizer::Hesse(); 186{; 187 MATH_ERROR_MSG(""Minimizer::Hesse"", ""Hesse not implemented"");; 188 return false;; 189}; 190 ; 191/**; 192 scan function minimum for variable i. Variable and function must be set before using Scan; 193 Return false if an error or if minimizer does not support this functionality; 194 */; 195bool Minimizer::Scan(unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin, double xmax); 196{; 197 MATH_ERROR_MSG(""Minimizer::Scan"", ""Scan not implemented"");; 198 MATH_UNUSED(ivar);; 199 MATH_UNUSED(nstep);; 200 MATH_UNUSED(x);; 201 MATH_UNUSED(y);; 202 MATH_UNUSED(xmin);; 203 MATH_UNUSED(xmax);; 204 return false;;",MatchSource.WIKI,doc/master/Minimizer_8cxx_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Minimizer_8cxx_source.html
Availability,avail,available,"inimizers and their respective methods (algorithms) that can be instantiated:; 55 The name shown below can be used to create them. More documentation can be found in the respective class; 56 ; 57 - Minuit (class TMinuitMinimizer); 58 - Migrad (default); 59 - MigradImproved (Migrad with adding a method to improve minimization when ends-up in a local minimum, see par. 6.3 of [Minuit tutorial on Function Minimization](https://seal.web.cern.ch/documents/minuit/mntutorial.pdf)); 60 - Simplex; 61 - Minimize (a combination of Simplex + Migrad); 62 - Minimize; 63 - Scan; 64 - Seek; 65 ; 66 - Minuit2 (class ROOT::Minuit2::Minuit2Minimizer); 67 - Migrad (default); 68 - Simplex; 69 - Minimize; 70 - Fumili (Fumili2); 71 - Scan; 72 ; 73 - Fumili (class TFumiliMinimizer); 74 ; 75 - GSLMultiMin (class ROOT::Math::GSLMinimizer) available when ROOT is built with `mathmore` support; 76 - BFGS2 (Default); 77 - BFGS; 78 - ConjugateFR; 79 - ConjugatePR; 80 - SteepestDescent; 81 ; 82 - GSLMultiFit (class ROOT::Math::GSLNLMinimizer) available when ROOT is built `mathmore` support; 83 ; 84 - GSLSimAn (class ROOT::Math::GSLSimAnMinimizer) available when ROOT is built with `mathmore` support; 85 ; 86 - Genetic (class ROOT::Math::GeneticMinimizer); 87 ; 88 - RMinimizer (class ROOT::Math::RMinimizer) available when ROOT is built with `r` support; 89 - BFGS (default); 90 - L-BFGS-S; 91 - Nelder-Mead; 92 - CG; 93 - and more methods, see the Details in the documentation of the function `optimix` of the [optmix R package](https://cran.r-project.org/web/packages/optimx/optimx.pdf); 94 ; 95 ; 96 The Minimizer class provides the interface to perform the minimization including; 97 ; 98 ; 99 In addition to provide the API for function minimization (via ROOT::Math::Minimizer::Minimize) the Minimizer class provides:; 100 - the interface for setting the function to be minimized. The objective function passed to the Minimizer must implement the multi-dimensional generic interface; 101 ROOT::Math::IBaseFunct",MatchSource.WIKI,doc/master/Minimizer_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Minimizer_8h_source.html
Deployability,configurat,configuration,"eturn status of covariance matrix; 254 /// using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate}; 255 /// Minimizer who implements covariance matrix calculation will re-implement the method; 256 virtual int CovMatrixStatus() const {; 257 return 0;; 258 }; 259 ; 260 /**; 261 return correlation coefficient between variable i and j.; 262 If the variable is fixed or const the return value is zero; 263 */; 264 virtual double Correlation(unsigned int i, unsigned int j ) const {; 265 double tmp = CovMatrix(i,i) * CovMatrix(j,j);; 266 return ( tmp < 0) ? 0 : CovMatrix(i,j) / std::sqrt( tmp );; 267 }; 268 ; 269 virtual double GlobalCC(unsigned int ivar) const;; 270 ; 271 virtual bool GetMinosError(unsigned int ivar , double & errLow, double & errUp, int option = 0);; 272 virtual bool Hesse();; 273 virtual bool Scan(unsigned int ivar , unsigned int & nstep , double * x , double * y ,; 274 double xmin = 0, double xmax = 0);; 275 virtual bool Contour(unsigned int ivar , unsigned int jvar, unsigned int & npoints,; 276 double * xi , double * xj );; 277 ; 278 /// return reference to the objective function; 279 ///virtual const ROOT::Math::IGenFunction & Function() const = 0;; 280 ; 281 /// print the result according to set level (implemented for TMinuit for maintaining Minuit-style printing); 282 virtual void PrintResults() {}; 283 ; 284 virtual std::string VariableName(unsigned int ivar) const;; 285 ; 286 virtual int VariableIndex(const std::string & name) const;; 287 ; 288 /** minimizer configuration parameters **/; 289 ; 290 /// set print level; 291 int PrintLevel() const { return fOptions.PrintLevel(); }; 292 ; 293 /// max number of function calls; 294 unsigned int MaxFunctionCalls() const { return fOptions.MaxFunctionCalls(); }; 295 ; 296 /// max iterations; 297 unsigned int MaxIterations() const { return fOptions.MaxIterations(); }; 298 ; 299 /// absolute tolerance; 300 double Tolerance() const { return fOptions.Tolerance(); }; 301 ; 302 /// p",MatchSource.WIKI,doc/master/Minimizer_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Minimizer_8h_source.html
Integrability,interface,interface,"Math/Minimizer.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Minimizer.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Author: L. Moneta Fri Sep 22 15:06:47 2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for class Minimizer; 12 ; 13#ifndef ROOT_Math_Minimizer; 14#define ROOT_Math_Minimizer; 15 ; 16#include ""Math/IFunction.h""; 17#include ""Math/MinimizerOptions.h""; 18 ; 19#include <ROOT/RSpan.hxx>; 20 ; 21#include <string>; 22#include <limits>; 23#include <cmath>; 24#include <vector>; 25#include <functional>; 26 ; 27 ; 28 ; 29namespace ROOT {; 30 ; 31 namespace Fit {; 32 class ParameterSettings;; 33 }; 34 ; 35 ; 36 namespace Math {; 37 ; 38/**; 39 @defgroup MultiMin Multi-dimensional Minimization; 40 @ingroup NumAlgo; 41 ; 42 Classes implementing algorithms for multi-dimensional minimization; 43 */; 44 ; 45 ; 46 ; 47//_______________________________________________________________________________; 48/**; 49 Abstract Minimizer class, defining the interface for the various minimizer; 50 (like Minuit2, Minuit, GSL, etc..) in ROOT.; 51 Plug-in's exist in ROOT to be able to instantiate the derived classes without linking the library; 52 using the static function ROOT::Math::Factory::CreateMinimizer.; 53 ; 54 Here is the list of all possible minimizers and their respective methods (algorithms) that can be instantiated:; 55 The name shown below can be used to create them. More documentation can be found in the respective class; 56 ; 57 - Minuit (class TMinuitMinimizer); 58 - Migrad (default); 59 - MigradImproved (Migrad with adding a method to improve minimization when ends-up in a local minimum, see par. 6.3 of [Minuit tutorial on Function Minimization](https://seal.web.cern.ch/documents/min",MatchSource.WIKI,doc/master/Minimizer_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Minimizer_8h_source.html
Modifiability,variab,variables,"00 - the interface for setting the function to be minimized. The objective function passed to the Minimizer must implement the multi-dimensional generic interface; 101 ROOT::Math::IBaseFunctionMultiDim. If the function provides gradient calculation (e.g. implementing the ROOT::Math::IGradientFunctionMultiDim interface); 102 the gradient will be used by the Minimizer class, when needed. There are convenient classes for the users to wrap their own functions in this required interface for minimization.; 103 These are the `ROOT::Math::Functor` class and the `ROOT::Math::GradFunctor` class for wrapping functions providing both evaluation and gradient. Some methods, like Fumili, Fumili2 and GSLMultiFit are; 104 specialized method for least-square and also likelihood minimizations. They require then that the given function implements in addition; 105 the `ROOT::Math::FitMethodFunction` interface.; 106 - The interface for setting the initial values for the function variables (which are the parameters in; 107 of the model function in case of solving for fitting) and specifying their limits.; 108 - The interface to set and retrieve basic minimization parameters. These parameter are controlled by the class `ROOT::Math::MinimizerOptions`.; 109 When no parameters are specified the default ones are used. Specific Minimizer options can also be passed via the `MinimizerOptions` class.; 110 For the list of the available option parameter one must look at the documentation of the corresponding derived class.; 111 - The interface to retrieve the result of minimization ( minimum X values, function value, gradient, error on the minimum, etc...); 112 - The interface to perform a Scan, Hesse or a Contour plot (for the minimizers that support this, i.e. Minuit and Minuit2); 113 ; 114 An example on how to use this interface is the tutorial NumericalMinimization.C in the tutorials/fit directory.; 115 ; 116 @ingroup MultiMin; 117*/; 118 ; 119class Minimizer {; 120 ; 121public:; 122 ; 123 /// D",MatchSource.WIKI,doc/master/Minimizer_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Minimizer_8h_source.html
Performance,perform,perform,"Scan; 72 ; 73 - Fumili (class TFumiliMinimizer); 74 ; 75 - GSLMultiMin (class ROOT::Math::GSLMinimizer) available when ROOT is built with `mathmore` support; 76 - BFGS2 (Default); 77 - BFGS; 78 - ConjugateFR; 79 - ConjugatePR; 80 - SteepestDescent; 81 ; 82 - GSLMultiFit (class ROOT::Math::GSLNLMinimizer) available when ROOT is built `mathmore` support; 83 ; 84 - GSLSimAn (class ROOT::Math::GSLSimAnMinimizer) available when ROOT is built with `mathmore` support; 85 ; 86 - Genetic (class ROOT::Math::GeneticMinimizer); 87 ; 88 - RMinimizer (class ROOT::Math::RMinimizer) available when ROOT is built with `r` support; 89 - BFGS (default); 90 - L-BFGS-S; 91 - Nelder-Mead; 92 - CG; 93 - and more methods, see the Details in the documentation of the function `optimix` of the [optmix R package](https://cran.r-project.org/web/packages/optimx/optimx.pdf); 94 ; 95 ; 96 The Minimizer class provides the interface to perform the minimization including; 97 ; 98 ; 99 In addition to provide the API for function minimization (via ROOT::Math::Minimizer::Minimize) the Minimizer class provides:; 100 - the interface for setting the function to be minimized. The objective function passed to the Minimizer must implement the multi-dimensional generic interface; 101 ROOT::Math::IBaseFunctionMultiDim. If the function provides gradient calculation (e.g. implementing the ROOT::Math::IGradientFunctionMultiDim interface); 102 the gradient will be used by the Minimizer class, when needed. There are convenient classes for the users to wrap their own functions in this required interface for minimization.; 103 These are the `ROOT::Math::Functor` class and the `ROOT::Math::GradFunctor` class for wrapping functions providing both evaluation and gradient. Some methods, like Fumili, Fumili2 and GSLMultiFit are; 104 specialized method for least-square and also likelihood minimizations. They require then that the given function implements in addition; 105 the `ROOT::Math::FitMethodFunction` interface.; 106 - ",MatchSource.WIKI,doc/master/Minimizer_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Minimizer_8h_source.html
Security,validat,validation,"nctionCalls(); }; 295 ; 296 /// max iterations; 297 unsigned int MaxIterations() const { return fOptions.MaxIterations(); }; 298 ; 299 /// absolute tolerance; 300 double Tolerance() const { return fOptions.Tolerance(); }; 301 ; 302 /// precision of minimizer in the evaluation of the objective function; 303 /// ( a value <=0 corresponds to the let the minimizer choose its default one); 304 double Precision() const { return fOptions.Precision(); }; 305 ; 306 /// strategy; 307 int Strategy() const { return fOptions.Strategy(); }; 308 ; 309 /// status code of minimizer; 310 int Status() const { return fStatus; }; 311 ; 312 /// status code of Minos (to be re-implemented by the minimizers supporting Minos); 313 virtual int MinosStatus() const { return -1; }; 314 ; 315 /// return the statistical scale used for calculate the error; 316 /// is typically 1 for Chi2 and 0.5 for likelihood minimization; 317 double ErrorDef() const { return fOptions.ErrorDef(); }; 318 ; 319 ///return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit); 320 bool IsValidError() const { return fValidError; }; 321 ; 322 /// retrieve the minimizer options (implement derived class if needed); 323 virtual MinimizerOptions Options() const {; 324 return fOptions;; 325 }; 326 ; 327 /// set print level; 328 void SetPrintLevel(int level) { fOptions.SetPrintLevel(level); }; 329 ; 330 ///set maximum of function calls; 331 void SetMaxFunctionCalls(unsigned int maxfcn) { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }; 332 ; 333 /// set maximum iterations (one iteration can have many function calls); 334 void SetMaxIterations(unsigned int maxiter) { if (maxiter > 0) fOptions.SetMaxIterations(maxiter); }; 335 ; 336 /// set the tolerance; 337 void SetTolerance(double tol) { fOptions.SetTolerance(tol); }; 338 ; 339 /// set in the minimizer the objective function evaluation precision; 340 /// ( a value <=0 means the minimizer will choose its optimal value automatically, i",MatchSource.WIKI,doc/master/Minimizer_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/Minimizer_8h_source.html
Availability,error,error,"h""; 16 ; 17#include <memory>; 18 ; 19namespace ROOT {; 20 ; 21 namespace Math {; 22 ; 23 /**; 24 Enumeration describing the status of the variable; 25 The enumeration are used in the minimizer classes to categorize the variables; 26 */; 27 enum EMinimVariableType {; 28 kDefault, ///< free variable (unlimited); 29 kFix, ///< fixed variable; 30 kBounds, ///< variable has two bounds; 31 kLowBound, ///< variable has a lower bound; 32 kUpBound ///< variable has an upper bounds; 33 };; 34 ; 35 ; 36 ; 37/**; 38 MinimTransformVariable class; 39 Contains meta information of the variables such as bounds, fix flags and; 40 deals with transformation of the variable; 41 The class does not contain the values and the step size (error) of the variable; 42 This is an internal class used by the MinimTransformFunction class; 43 ; 44 @ingroup MultiMin; 45*/; 46 ; 47 ; 48class MinimTransformVariable {; 49 ; 50public:; 51 ; 52 /**; 53 Default Constructor for an unlimited variable; 54 */; 55 MinimTransformVariable () :; 56 fFix(false), fLowBound(false), fUpBound(false), fBounds(false),; 57 fLower(1), fUpper(0); 58 {}; 59 ; 60 // constructor for fixed variable; 61 MinimTransformVariable (double value) :; 62 fFix(true), fLowBound(false), fUpBound(false), fBounds(false),; 63 fLower(value), fUpper(value); 64 {}; 65 ; 66 // con",MatchSource.WIKI,doc/master/MinimTransformVariable_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MinimTransformVariable_8h_source.html
Modifiability,variab,variable,"h""; 16 ; 17#include <memory>; 18 ; 19namespace ROOT {; 20 ; 21 namespace Math {; 22 ; 23 /**; 24 Enumeration describing the status of the variable; 25 The enumeration are used in the minimizer classes to categorize the variables; 26 */; 27 enum EMinimVariableType {; 28 kDefault, ///< free variable (unlimited); 29 kFix, ///< fixed variable; 30 kBounds, ///< variable has two bounds; 31 kLowBound, ///< variable has a lower bound; 32 kUpBound ///< variable has an upper bounds; 33 };; 34 ; 35 ; 36 ; 37/**; 38 MinimTransformVariable class; 39 Contains meta information of the variables such as bounds, fix flags and; 40 deals with transformation of the variable; 41 The class does not contain the values and the step size (error) of the variable; 42 This is an internal class used by the MinimTransformFunction class; 43 ; 44 @ingroup MultiMin; 45*/; 46 ; 47 ; 48class MinimTransformVariable {; 49 ; 50public:; 51 ; 52 /**; 53 Default Constructor for an unlimited variable; 54 */; 55 MinimTransformVariable () :; 56 fFix(false), fLowBound(false), fUpBound(false), fBounds(false),; 57 fLower(1), fUpper(0); 58 {}; 59 ; 60 // constructor for fixed variable; 61 MinimTransformVariable (double value) :; 62 fFix(true), fLowBound(false), fUpBound(false), fBounds(false),; 63 fLower(value), fUpper(value); 64 {}; 65 ; 66 // con",MatchSource.WIKI,doc/master/MinimTransformVariable_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MinimTransformVariable_8h_source.html
Testability,benchmark,benchmark,". ROOT: tutorials/fit/minuit2FitBench2D.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. minuit2FitBench2D.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Minuit2 fit 2D benchmark. . ; FCN=7196.63 FROM MIGRAD STATUS=CONVERGED 169 CALLS 170 TOTAL; EDM=3.06509e-09 STRATEGY= 1 ERROR MATRIX UNCERTAINTY 2.0 per cent; EXT PARAMETER STEP FIRST ; NO. NAME VALUE ERROR SIZE DERIVATIVE ; 1 p0 5.28670e+01 2.67227e-01 1.71567e-03 1.41590e-04; 2 p1 2.00562e+00 9.99521e-03 -6.72962e-05 -5.71949e-03; 3 p2 -1.02279e+00 1.35440e-02 3.22465e-05 2.77027e-03; 4 p3 2.89928e+00 7.94099e-03 -9.38703e-05 -4.55759e-03; 5 p4 3.86656e+00 1.13330e-02 1.06568e-05 -2.11126e-03; Minuit, npass=0 : RT= 0.143 s, Cpu= 0.140 s; ****************************************; Minimizer is Fumili; Chi2 = 7196.63; NDf = 7366; NCalls = 30; p0 = 52.8672 +/- 0.262932 ; p1 = 2.00562 +/- 0.00992527 ; p2 = -1.02279 +/- 0.0135821 ; p3 = 2.89927 +/- 0.00781808 ; p4 = 3.86655 +/- 0.011235 ; Fumili, npass=0 : RT= 0.084 s, Cpu= 0.090 s; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 7196.63; NDf = 7366; Edm = 4.35806e-08; NCalls = 176; p0 = 52.867 +/- 0.264728 ; p1 = 2.00562 +/- 0.00995152 ; p2 = -1.0228 +/- 0.0137398 ; p3 = 2.89928 +/- 0.00798634 ; p4 = 3.86656 +/- 0.0112306 ; Minuit2, npass=0 : RT= 0.096 s, Cpu= 0.100 s; ****************************************; Minimizer is Minuit2 / Fumili; Chi2 = 7196.63; NDf = 7366; Edm = 2.49758e-07; NCalls = 99; p0 = 52.8669 +/- 0.265504 ; p1 = 2.00562 +/- 0.00992463 ; p2 = -1.0228 +/- 0.0135834 ; p3 = 2.89928 +/- 0.00792724 ; p4 = 3.86656 +/- 0.0113104 ; Fumili2, npass=0 : RT= 0.062 s, Cpu= 0.060 s; ; #include ""TH1.h""; #include ""TF1.h""; #include ""TH2D.h""; #include ""TF2.h""; #include ""TCanvas.h""; #include ""TStopwatch.h""; #include ""TSystem.h""; #include ""TRandom3.h""; #include ""TVirtualFitter.h""; #include ""TPaveLabel.h""; #include ""TStyle.h""; ; ; TF2 *fitFcn;; TH2D *histo;; ; // Quadratic",MatchSource.WIKI,doc/master/minuit2FitBench2D_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/minuit2FitBench2D_8C.html
Availability,error,error,"r,cputime),""brNDC"");; p->Draw();; p->SetTextColor(kRed+3);; p->SetFillColor(kYellow-8);; pad->Update();; return ok;; }; ; int minuit2FitBench(int npass=20) {; TH1::AddDirectory(false);; TCanvas *c1 = new TCanvas(""FitBench"",""Fitting Demo"",10,10,900,900);; c1->Divide(2,2);; c1->SetFillColor(kYellow-9);; // create a TF1 with the range from 0 to 3 and 6 parameters; fitFcn = new TF1(""fitFcn"",fitFunction,0,3,6);; fitFcn->SetNpx(200);; gStyle->SetOptFit();; gStyle->SetStatY(0.6);; ; bool ok = true;; //with Minuit; c1->cd(1);; ok &= DoFit(""Minuit"",gPad,npass);; ; //with Fumili; c1->cd(2);; ok &= DoFit(""Fumili"",gPad,npass);; ; //with Minuit2; c1->cd(3);; ok &= DoFit(""Minuit2"",gPad,npass);; ; //with Fumili2; c1->cd(4);; ok &= DoFit(""Fumili2"",gPad,npass);; ; c1->SaveAs(""FitBench.root"");; return (ok) ? 0 : 1;; }; MinimizerOptions.h; kRed@ kRedDefinition Rtypes.h:66; kYellow@ kYellowDefinition Rtypes.h:66; TCanvas.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TF1.h; TFrame.h; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; SetLineColorOption_t Option_t SetLineColorDefinition TGWin32VirtualXProxy.cxx:54; TH1.h; TMath.h; TPaveLabel.h; TROOT.h; TRandom3.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TStopwatch.h; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TSystem.h; gPad#define gPadDefinition TVirtualPad.h:308; ROOT::Math::MinimizerOptions::SetDefaultMinimizerstatic void SetDefaultMinimizer(const char *type, const char *algo=nullptr)Set the default Minimizer type and corresponding algorithms.Definition MinimizerOptions.cxx:43; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::Updatevirtual void Update()Called by functions such as SetRange, SetNpx, SetParameters",MatchSource.WIKI,doc/master/minuit2FitBench_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/minuit2FitBench_8C.html
Performance,perform,performance,". ROOT: tutorials/fit/minuit2FitBench.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. minuit2FitBench.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Demonstrate performance and usage of Minuit2 and Fumili2 for monodimensional fits. . ; ; *********************************************************************************; Minuit ; *********************************************************************************; pass : 0; ................... FCN=205.276 FROM MINOS STATUS=SUCCESSFUL 44 CALLS 429 TOTAL; EDM=3.83288e-10 STRATEGY= 1 ERROR MATRIX ACCURATE ; EXT PARAMETER STEP FIRST ; NO. NAME VALUE ERROR SIZE DERIVATIVE ; 1 p0 5.13639e+01 2.01329e+00 -2.79418e-04 -2.05471e-06; 2 p1 5.57813e+01 4.80582e+00 3.09127e-03 -9.98919e-07; 3 p2 7.42112e+01 1.87041e+00 -1.20311e-03 -1.93173e-07; 4 p3 4.27344e+02 2.93232e+00 -1.66243e-02 -7.80957e-07; 5 p4 3.58604e-02 3.47005e-04 1.74159e-07 9.80777e-02; 6 p5 1.00001e+00 1.64203e-04 1.64203e-04 3.19213e-02; Minuit, npass=20 : RT= 0.170 s, Cpu= 0.170 s; ; *********************************************************************************; Fumili ; *********************************************************************************; pass : 0; ...................****************************************; Minimizer is Fumili; Chi2 = 206.284; NDf = 194; NCalls = 4; p0 = 51.4325 +/- 2.01397 ; p1 = 55.5412 +/- 4.81253 ; p2 = 74.2976 +/- 1.87298 ; p3 = 427.425 +/- 2.93868 ; p4 = 0.0358559 +/- 0.000357243 ; p5 = 1.00001 +/- 0.00016009 ; Fumili, npass=20 : RT= 0.055 s, Cpu= 0.060 s; ; *********************************************************************************; Minuit2 ; *********************************************************************************; pass : 0; ...................****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 205.34; NDf = 194; Edm = 1.91398e-10; NCalls = 85; p0 = 51.3576 +/- 2.0133 -2.01329 +2.0133 (Minos) ; p1 = 55.8172 +/- 4.",MatchSource.WIKI,doc/master/minuit2FitBench_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/minuit2FitBench_8C.html
Deployability,configurat,configurations,. ROOT: tutorials/fit/minuit2GausFit.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. minuit2GausFit.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Perform fits with different configurations using Minuit2 . ; ; Do Fit 1; ; Do Fit 2; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 65.1586; NDf = 56; Edm = 1.93774e-09; NCalls = 69; Constant = 36.3132 +/- 1.52625 -1.51651 +1.53547 (Minos) ; Mean = 0.013082 +/- 0.0347499 -0.0347674 +0.0347613 (Minos) ; Sigma = 1.03413 +/- 0.0288039 -0.0286274 +0.0290102 (Minos) (limited); ; Do Fit 3; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 65.1586; NDf = 56; Edm = 6.86315e-08; NCalls = 57; Constant = 36.327 +/- 2 -1.51685 +1.53726 (Minos) ; Mean = 0.0130817 +/- 2 ; Sigma = 1.03373 +/- 6.72116 (limited); ; Do Fit 4; ****************************************; Minimizer is Minuit2 / Migrad; MinFCN = 43.3935; Chi2 = 86.7869; NDf = 97; Edm = 9.97216e-08; NCalls = 62; Constant = 38.427 +/- 1.48837 -1.46667 +1.51031 (Minos) ; Mean = 0.027601 +/- 0.032831 -0.0328395 +0.0328395 (Minos) ; Sigma = 1.03819 +/- 0.0232194 -0.0227841 +0.0236699 (Minos) (limited); ; Do Fit 1; ; Do Fit 2; ****************************************; Minimizer is Minuit2 / Fumili; Chi2 = 65.1586; NDf = 56; Edm = 8.05693e-09; NCalls = 45; Constant = 36.3131 +/- 1.52625 -1.51642 +1.53556 (Minos) ; Mean = 0.0130818 +/- 0.0347499 -0.0347671 +0.0347615 (Minos) ; Sigma = 1.03413 +/- 0.0288039 -0.0286291 +0.0290085 (Minos) (limited); ; Do Fit 3; ****************************************; Minimizer is Minuit2 / Fumili; Chi2 = 65.1586; NDf = 56; Edm = 1.52369e-08; NCalls = 45; Constant = 36.3272 +/- 1.52734 -1.51745 +1.53671 (Minos) ; Mean = 0.0130818 +/- 0.0347499 -0.0347671 +0.0347615 (Minos) ; Sigma = 1.03373 +/- 0.0288151 -0.0286415 +0.0290186 (Minos) (limited); ; Do Fit 4; ****************************************; Minimizer is Minuit2 / Fumili,MatchSource.WIKI,doc/master/minuit2GausFit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/minuit2GausFit_8C.html
Modifiability,config,configurations,. ROOT: tutorials/fit/minuit2GausFit.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. minuit2GausFit.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Perform fits with different configurations using Minuit2 . ; ; Do Fit 1; ; Do Fit 2; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 65.1586; NDf = 56; Edm = 1.93774e-09; NCalls = 69; Constant = 36.3132 +/- 1.52625 -1.51651 +1.53547 (Minos) ; Mean = 0.013082 +/- 0.0347499 -0.0347674 +0.0347613 (Minos) ; Sigma = 1.03413 +/- 0.0288039 -0.0286274 +0.0290102 (Minos) (limited); ; Do Fit 3; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 65.1586; NDf = 56; Edm = 6.86315e-08; NCalls = 57; Constant = 36.327 +/- 2 -1.51685 +1.53726 (Minos) ; Mean = 0.0130817 +/- 2 ; Sigma = 1.03373 +/- 6.72116 (limited); ; Do Fit 4; ****************************************; Minimizer is Minuit2 / Migrad; MinFCN = 43.3935; Chi2 = 86.7869; NDf = 97; Edm = 9.97216e-08; NCalls = 62; Constant = 38.427 +/- 1.48837 -1.46667 +1.51031 (Minos) ; Mean = 0.027601 +/- 0.032831 -0.0328395 +0.0328395 (Minos) ; Sigma = 1.03819 +/- 0.0232194 -0.0227841 +0.0236699 (Minos) (limited); ; Do Fit 1; ; Do Fit 2; ****************************************; Minimizer is Minuit2 / Fumili; Chi2 = 65.1586; NDf = 56; Edm = 8.05693e-09; NCalls = 45; Constant = 36.3131 +/- 1.52625 -1.51642 +1.53556 (Minos) ; Mean = 0.0130818 +/- 0.0347499 -0.0347671 +0.0347615 (Minos) ; Sigma = 1.03413 +/- 0.0288039 -0.0286291 +0.0290085 (Minos) (limited); ; Do Fit 3; ****************************************; Minimizer is Minuit2 / Fumili; Chi2 = 65.1586; NDf = 56; Edm = 1.52369e-08; NCalls = 45; Constant = 36.3272 +/- 1.52734 -1.51745 +1.53671 (Minos) ; Mean = 0.0130818 +/- 0.0347499 -0.0347671 +0.0347615 (Minos) ; Sigma = 1.03373 +/- 0.0288151 -0.0286415 +0.0290186 (Minos) (limited); ; Do Fit 4; ****************************************; Minimizer is Minuit2 / Fumili,MatchSource.WIKI,doc/master/minuit2GausFit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/minuit2GausFit_8C.html
Testability,test,testGausFit,"= 1.03413 +/- 0.0288039 -0.0286291 +0.0290085 (Minos) (limited); ; Do Fit 3; ****************************************; Minimizer is Minuit2 / Fumili; Chi2 = 65.1586; NDf = 56; Edm = 1.52369e-08; NCalls = 45; Constant = 36.3272 +/- 1.52734 -1.51745 +1.53671 (Minos) ; Mean = 0.0130818 +/- 0.0347499 -0.0347671 +0.0347615 (Minos) ; Sigma = 1.03373 +/- 0.0288151 -0.0286415 +0.0290186 (Minos) (limited); ; Do Fit 4; ****************************************; Minimizer is Minuit2 / Fumili; MinFCN = 43.3935; Chi2 = 86.7869; NDf = 97; Edm = 3.18744e-08; NCalls = 45; Constant = 38.4264 +/- 1.48835 -1.46601 +1.51097 (Minos) ; Mean = 0.0275931 +/- 0.0328313 -0.0328316 +0.0328474 (Minos) ; Sigma = 1.0382 +/- 0.0232197 -0.0227928 +0.0236612 (Minos) (limited); ; #include ""TH1.h""; #include ""TF1.h""; #include ""TCanvas.h""; #include ""TRandom3.h""; #include ""TVirtualFitter.h""; #include ""TPaveLabel.h""; #include ""TStyle.h""; ; #include <iostream>; #include <string>; ; ; void testGausFit( std::string type = ""Minuit2"", int n = 1000) {; ; gRandom = new TRandom3();; ; TVirtualFitter::SetDefaultFitter(type.c_str() );; ; std::string name;; name = ""h1_"" + type;; TH1D * h1 = new TH1D(name.c_str(),""Chi2 Fit"",100, -5, 5. );; name = ""h2_"" + type;; TH1D * h2 = new TH1D(name.c_str(),""Chi2 Fit with Minos Error"",100, -5, 5. );; name = ""h3_"" + type;; TH1D * h3 = new TH1D(name.c_str(),""Chi2 Fit with Integral and Minos"",100, -5, 5. );; name = ""h4_"" + type;; TH1D * h4 = new TH1D(name.c_str(),""Likelihood Fit with Minos Error"",100, -5, 5. );; ; gStyle->SetOptStat(1111111);; gStyle->SetOptFit(1111111);; ; for (int i = 0; i < n; ++i) {; double x = gRandom->Gaus(0,1);; h1->Fill( x );; h2->Fill( x );; h3->Fill( x );; h4->Fill( x );; }; ; std::string cname = type + ""Canvas"" ;; std::string ctitle = type + "" Gaussian Fit"" ;; TCanvas *c1 = new TCanvas(cname.c_str(),cname.c_str(),10,10,900,900);; c1->Divide(2,2);; ; c1->cd(1);; std::cout << ""\nDo Fit 1\n"";; h1->Fit(""gaus"",""Q"");; h1->Draw();; c1->cd(2);; std::cout << ""\nDo",MatchSource.WIKI,doc/master/minuit2GausFit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/minuit2GausFit_8C.html
Availability,avail,available,"***************; 5 * *; 6 * Copyright (c) 2015 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// random engines based on ROOT; 12 ; 13#ifndef ROOT_Math_MixMaxEngine; 14#define ROOT_Math_MixMaxEngine; 15 ; 16#include <cstdint>; 17#include <vector>; 18 ; 19#include ""Math/TRandomEngine.h""; 20 ; 21 ; 22// struct rng_state_st; /// forward declare generator state; 23 ; 24// typedef struct rng_state_st rng_state_t;; 25 ; 26// namespace mixmax {; 27// template<int Ndim>; 28// class mixmax_engine;; 29// }; 30 ; 31namespace ROOT {; 32 ; 33 namespace Math {; 34 ; 35 template<int N>; 36 class MixMaxEngineImpl;; 37 ; 38/**; 39MixMaxEngine is a wrapper class for the MIXMAX Random number generator.; 40MIXMAX is a matrix-recursive random number generator introduced by; 41G. Savvidy.; 42 ; 43The real implementation of the generator, written in C, is in the mixmax.h and mixmax.cxx files.; 44This generator code is available also at hepforge: http://mixmax.hepforge.org; 45The MIXMAX code has been created and developed by Konstantin Savvidy and it is; 46released under GNU Lesser General Public License v3.; 47 ; 48This wrapper class provides 3 different variants of MIXMAX according to the template para extra parameter N.; 49The extra parameter, `SkipNumber`, is used to perform additional iterations of the generator before returning the random numbers.; 50For example, when `SkipNumber = 2`, the generator will have two extra iterations that will be discarder.; 51 ; 52 - MIXMAX with N = 240. This is a new version of the generator (version 2.0beta) described in the; 53 <a href=""http://dx.doi.org/10.1016/j.chaos.2016.05.003"">2016 paper</a> (3rd reference), with; 54 special number \f$s=487013230256099140\f$, \f$m=2^{51}+1\f$ and having a period of \f$10^{4389}\f$.; 55 ; 56 - MIXMAX with N = 17, from the 2.0 beta version with \f$s=0\f$ and \f$m=2^{36}+1\f$. The period of the; 57 generator is \f$10^{294}\f$.; 58 ;",MatchSource.WIKI,doc/master/MixMaxEngine_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MixMaxEngine_8h_source.html
Integrability,wrap,wrapper,". ROOT: math/mathcore/inc/Math/MixMaxEngine.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. MixMaxEngine.h. Go to the documentation of this file. 1// @(#)root/mathcore:$Id$; 2// Author: L. Moneta Tue Aug 4 2015; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2015 LCG ROOT Math Team, CERN/PH-SFT *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// random engines based on ROOT; 12 ; 13#ifndef ROOT_Math_MixMaxEngine; 14#define ROOT_Math_MixMaxEngine; 15 ; 16#include <cstdint>; 17#include <vector>; 18 ; 19#include ""Math/TRandomEngine.h""; 20 ; 21 ; 22// struct rng_state_st; /// forward declare generator state; 23 ; 24// typedef struct rng_state_st rng_state_t;; 25 ; 26// namespace mixmax {; 27// template<int Ndim>; 28// class mixmax_engine;; 29// }; 30 ; 31namespace ROOT {; 32 ; 33 namespace Math {; 34 ; 35 template<int N>; 36 class MixMaxEngineImpl;; 37 ; 38/**; 39MixMaxEngine is a wrapper class for the MIXMAX Random number generator.; 40MIXMAX is a matrix-recursive random number generator introduced by; 41G. Savvidy.; 42 ; 43The real implementation of the generator, written in C, is in the mixmax.h and mixmax.cxx files.; 44This generator code is available also at hepforge: http://mixmax.hepforge.org; 45The MIXMAX code has been created and developed by Konstantin Savvidy and it is; 46released under GNU Lesser General Public License v3.; 47 ; 48This wrapper class provides 3 different variants of MIXMAX according to the template para extra parameter N.; 49The extra parameter, `SkipNumber`, is used to perform additional iterations of the generator before returning the random numbers.; 50For example, when `SkipNumber = 2`, the generator will have two extra iterations that will be discarder.; 51 ; 52 - MIXMAX with N = 240. This is a new version of the generator (version 2.0beta) described in the; 53 <a href=""http://dx.doi.org",MatchSource.WIKI,doc/master/MixMaxEngine_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MixMaxEngine_8h_source.html
Performance,perform,perform,"h""; 20 ; 21 ; 22// struct rng_state_st; /// forward declare generator state; 23 ; 24// typedef struct rng_state_st rng_state_t;; 25 ; 26// namespace mixmax {; 27// template<int Ndim>; 28// class mixmax_engine;; 29// }; 30 ; 31namespace ROOT {; 32 ; 33 namespace Math {; 34 ; 35 template<int N>; 36 class MixMaxEngineImpl;; 37 ; 38/**; 39MixMaxEngine is a wrapper class for the MIXMAX Random number generator.; 40MIXMAX is a matrix-recursive random number generator introduced by; 41G. Savvidy.; 42 ; 43The real implementation of the generator, written in C, is in the mixmax.h and mixmax.cxx files.; 44This generator code is available also at hepforge: http://mixmax.hepforge.org; 45The MIXMAX code has been created and developed by Konstantin Savvidy and it is; 46released under GNU Lesser General Public License v3.; 47 ; 48This wrapper class provides 3 different variants of MIXMAX according to the template para extra parameter N.; 49The extra parameter, `SkipNumber`, is used to perform additional iterations of the generator before returning the random numbers.; 50For example, when `SkipNumber = 2`, the generator will have two extra iterations that will be discarder.; 51 ; 52 - MIXMAX with N = 240. This is a new version of the generator (version 2.0beta) described in the; 53 <a href=""http://dx.doi.org/10.1016/j.chaos.2016.05.003"">2016 paper</a> (3rd reference), with; 54 special number \f$s=487013230256099140\f$, \f$m=2^{51}+1\f$ and having a period of \f$10^{4389}\f$.; 55 ; 56 - MIXMAX with N = 17, from the 2.0 beta version with \f$s=0\f$ and \f$m=2^{36}+1\f$. The period of the; 57 generator is \f$10^{294}\f$.; 58 ; 59 - MIXMAX with N = 256 from the 1.0 version. The period is (for `SkipNumber=0`) \f$10^{4682}\f$.; 60 For this generator we recommend in ROOT using a default value of `SkipNumber=2, while for the; 61 previous two generators skipping is not needed.; 62 ; 63This table describes the properties of the MIXMAX generators. MIXMAX is a genuine 61 bit; 64generator on the G",MatchSource.WIKI,doc/master/MixMaxEngine_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MixMaxEngine_8h_source.html
Testability,test,testing,"inimum integer that can be generated. For MIXMAX is 0; 129 static uint64_t MinInt();; 130 ; 131 /// set the generator seed; 132 void SetSeed(Result_t seed);; 133 ; 134 // generate a random number (virtual interface); 135 double Rndm() override { return Rndm_impl(); }; 136 ; 137 /// generate a double random number (faster interface); 138 inline double operator() () { return Rndm_impl(); }; 139 ; 140 /// generate an array of random numbers; 141 void RndmArray (int n, double * array);; 142 ; 143 /// generate a 64 bit integer number; 144 Result_t IntRndm();; 145 ; 146 /// get name of the generator; 147 static const char *Name();; 148 ; 149 protected:; 150 // protected functions used for testing the generator; 151 ; 152 /// get the state of the generator; 153 void GetState(std::vector<StateInt_t> & state) const;; 154 ; 155 ; 156 ///set the full initial generator state; 157 void SetState(const std::vector<StateInt_t> & state);; 158 ; 159 /// Get the counter (between 0 and Size-1); 160 int Counter() const;; 161 ; 162 ; 163 private:; 164 ; 165 /// implementation function to generate the random number; 166 double Rndm_impl();; 167 ; 168 //rng_state_t * fRngState; ///< mix-max generator state; 169 //mixmax::mixmax_engine<N> * fRng; ///< mixmax internal engine class; 170 MixMaxEngineImpl<N> * fRng; ///< mixmax internal engine class; 171 ; 172 };; 173 ; 174 typedef MixMaxEngine<240,0> MixMaxEngine240;; 175 typedef MixMaxEngine<256,2> MixMaxEngine256;; 176 typedef MixMaxEngine<17,0> MixMaxEngine17;; 177 ; 178 extern template class MixMaxEngine<240,0>;; 179 extern template class MixMaxEngine<256,0>;; 180 extern template class MixMaxEngine<256,2>;; 181 extern template class MixMaxEngine<256,4>;; 182 extern template class MixMaxEngine<17,0>;; 183 extern template class MixMaxEngine<17,1>;; 184 extern template class MixMaxEngine<17,2>;; 185 ; 186 } // end namespace Math; 187 ; 188} // end namespace ROOT; 189 ; 190 ; 191#include ""Math/MixMaxEngine.icc""; 192 ; 193#endif /* ROOT_Math_Mi",MatchSource.WIKI,doc/master/MixMaxEngine_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MixMaxEngine_8h_source.html
Testability,test,test,". ROOT: tutorials/graphs/motorcycle.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. motorcycle.C File ReferenceTutorials » Graphs tutorials. Detailed Description; Macro to test scatterplot smoothers: ksmooth, lowess, supsmu as described in: ; Modern Applied Statistics with S-Plus, 3rd Edition; W.N. Venables and B.D. Ripley; Chapter 9: Smooth Regression, Figure 9.1; Example is a set of data on 133 observations of acceleration against time for a simulated motorcycle accident, taken from Silverman (1985). ; #include ""TString.h""; #include ""TInterpreter.h""; #include <fstream>; #include ""TH1.h""; #include ""TGraphSmooth.h""; #include ""TCanvas.h""; #include ""TSystem.h""; ; ; TCanvas *vC1;; TGraph *grin, *grout;; ; void DrawSmooth(Int_t pad, const char *title, const char *xt, const char *yt); {; vC1->cd(pad);; TH1F *vFrame = gPad->DrawFrame(0,-130,60,70);; vFrame->SetTitle(title);; vFrame->SetTitleSize(0.2);; vFrame->SetXTitle(xt);; vFrame->SetYTitle(yt);; grin->Draw(""P"");; grout->DrawClone(""LPX"");; }; ; void motorcycle(); {; // data taken from R library MASS: mcycle.txt; TString dir = gROOT->GetTutorialDir();; dir.Append(""/graphs/"");; dir.ReplaceAll(""/./"",""/"");; ; // read file and add to fit object; Double_t *x = new Double_t[133];; Double_t *y = new Double_t[133];; Double_t vX, vY;; Int_t vNData = 0;; ifstream vInput;; vInput.open(Form(""%smotorcycle.dat"",dir.Data()));; while (1) {; vInput >> vX >> vY;; if (!vInput.good()) break;; x[vNData] = vX;; y[vNData] = vY;; vNData++;; }//while; vInput.close();; grin = new TGraph(vNData,x,y);; ; // draw graph; vC1 = new TCanvas(""vC1"",""Smooth Regression"",200,10,900,700);; vC1->Divide(2,3);; ; // Kernel Smoother; // create new kernel smoother and smooth data with bandwidth = 2.0; TGraphSmooth *gs = new TGraphSmooth(""normal"");; grout = gs->SmoothKern(grin,""normal"",2.0);; DrawSmooth(1,""Kernel Smoother: bandwidth = 2.0"",""times"",""accel"");; ; // redraw ksmooth with bandwidth = 5.0; grout = gs->Sm",MatchSource.WIKI,doc/master/motorcycle_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/motorcycle_8C.html
Integrability,interface,interface,"tTextSize(0.06);; Tex.SetTextColor(10);; Tex.DrawLatex(0.06,0.55,""+ GUI Theme Skin"");; ; Tex.SetTextSize(0.06);; Tex.SetTextColor(10);; Tex.DrawLatex(0.06,0.45,""+ Noble White&Black"");; ; Tex.SetTextSize(0.06);; Tex.SetTextColor(10);; Tex.DrawLatex(0.06,0.35,""+ Text Viewer+Image Viewer"");; ; Tex.SetTextSize(0.06);; Tex.SetTextColor(10);; Tex.DrawLatex(0.06,0.25,""+ 20 Hours Playing"");; ; Tex.SetTextSize(0.06);; Tex.SetTextColor(10);; Tex.DrawLatex(0.06,0.15,""+ The Best Quality of Sound"");; ; ; pad1->cd();; }; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; TButton.h; TCanvas.h; TGeoManager.h; TImage.h; TLatex.h; TLine.h; TPaveText.h; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TButtonA TButton object is a user interface object.Definition TButton.h:18; TButton::Drawvoid Draw(Option_t *option="""") overrideDraw this button with its current attributes.Definition TButton.cxx:139; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet current canvas & pad.Definition TCanvas.cxx:719; TGeoCombiTransClass describing rotation + translation.Definition TGeoMatrix.h:317; TGeoManagerThe manager class for any TGeo geometry.Definition TGeoManager.h:44; TGeoManager::MakeTubeTGeoVolume * MakeTube(const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Double_t dz)Make in one step a volume pointing to a tube shape with given medium.Definition TGeoManager.cxx:3204; TGeoManager::CloseGeometryvoid CloseGeometry(Option_t *option=""d"")Closing geometry implies checking the geometry validity, fixing shapes with negative parameters (run-...Definition TGeoManager.cxx:1480; TGeoManager::MakeBoxTGeoVolume * MakeBox(const char *name, TGeoMedium *",MatchSource.WIKI,doc/master/mp3player_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/mp3player_8C.html
Usability,simpl,simple," using geometry ...Definition TGeoMedium.h:23; TGeoRotationClass describing rotations.Definition TGeoMatrix.h:168; TGeoTranslationClass describing translations.Definition TGeoMatrix.h:116; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TGeoVolume::Drawvoid Draw(Option_t *option="""") overridedraw top volume according to optionDefinition TGeoVolume.cxx:1206; TGeoVolume::AddNodeOverlapvirtual void AddNodeOverlap(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""")Add a TGeoNode to the list of nodes.Definition TGeoVolume.cxx:1044; TGeoVolume::SetLineColorvoid SetLineColor(Color_t lcolor) overrideSet the line color.Definition TGeoVolume.cxx:2169; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLatex::DrawLatexTLatex * DrawLatex(Double_t x, Double_t y, const char *text)Make a copy of this object with the new parameters And copy object attributes.Definition TLatex.cxx:1943; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if necessary).Definition TPad.cxx:1364; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; ptTPaveText * ptDefinition entrylist_figure1.C:7; AuthorEun Young Kim, Dept. of Physics, Univ. of Seoul ; Definition in file mp3player.C. tutorialsgeommp3player.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) usi",MatchSource.WIKI,doc/master/mp3player_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/mp3player_8C.html
Deployability,install,installation,". ROOT: tutorials/pyroot/mrt.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; mrt.py File ReferenceTutorials » PyRoot tutorials. Detailed Description; Build ROOT Ntuple from other source. ; This program reads the ‘aptuple.txt’ file row by row, then creates the Ntuple by adding row by row.; opening file /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials/pyroot/aptuple.txt ...; writing file aptuple.root ...; done; ; import sys, os; from ROOT import TFile, TNtuple, TROOT; ; ; ifn = os.path.join(str(TROOT.GetTutorialDir()), 'pyroot', 'aptuple.txt'); ofn = 'aptuple.root'; ; print('opening file %s ...' % ifn); infile = open( ifn, 'r' ); lines = infile.readlines(); title = lines[0]; labels = lines[1].split(); ; print('writing file %s ...' % ofn); outfile = TFile( ofn, 'RECREATE', 'ROOT file with an NTuple' ); ntuple = TNtuple( 'ntuple', title, ':'.join( labels ) ); ; for line in lines[2:]:; words = line.split(); row = map( float, words ); ntuple.Fill(*row); ; outfile.Write(); ; print('done'); TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TROOT::GetTutorialDirstatic const TString & GetTutorialDir()Get the tutorials directory in the installation. Static utility function.Definition TROOT.cxx:3119; AuthorWim Lavrijsen ; Definition in file mrt.py. tutorialspyrootmrt.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/mrt_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/mrt_8py.html
Modifiability,variab,variables,". ROOT: tutorials/pyroot/mrt.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; mrt.py File ReferenceTutorials » PyRoot tutorials. Detailed Description; Build ROOT Ntuple from other source. ; This program reads the ‘aptuple.txt’ file row by row, then creates the Ntuple by adding row by row.; opening file /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials/pyroot/aptuple.txt ...; writing file aptuple.root ...; done; ; import sys, os; from ROOT import TFile, TNtuple, TROOT; ; ; ifn = os.path.join(str(TROOT.GetTutorialDir()), 'pyroot', 'aptuple.txt'); ofn = 'aptuple.root'; ; print('opening file %s ...' % ifn); infile = open( ifn, 'r' ); lines = infile.readlines(); title = lines[0]; labels = lines[1].split(); ; print('writing file %s ...' % ofn); outfile = TFile( ofn, 'RECREATE', 'ROOT file with an NTuple' ); ntuple = TNtuple( 'ntuple', title, ':'.join( labels ) ); ; for line in lines[2:]:; words = line.split(); row = map( float, words ); ntuple.Fill(*row); ; outfile.Write(); ; print('done'); TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TROOT::GetTutorialDirstatic const TString & GetTutorialDir()Get the tutorials directory in the installation. Static utility function.Definition TROOT.cxx:3119; AuthorWim Lavrijsen ; Definition in file mrt.py. tutorialspyrootmrt.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/mrt_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/mrt_8py.html
Usability,simpl,simple,". ROOT: tutorials/pyroot/mrt.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; mrt.py File ReferenceTutorials » PyRoot tutorials. Detailed Description; Build ROOT Ntuple from other source. ; This program reads the ‘aptuple.txt’ file row by row, then creates the Ntuple by adding row by row.; opening file /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials/pyroot/aptuple.txt ...; writing file aptuple.root ...; done; ; import sys, os; from ROOT import TFile, TNtuple, TROOT; ; ; ifn = os.path.join(str(TROOT.GetTutorialDir()), 'pyroot', 'aptuple.txt'); ofn = 'aptuple.root'; ; print('opening file %s ...' % ifn); infile = open( ifn, 'r' ); lines = infile.readlines(); title = lines[0]; labels = lines[1].split(); ; print('writing file %s ...' % ofn); outfile = TFile( ofn, 'RECREATE', 'ROOT file with an NTuple' ); ntuple = TNtuple( 'ntuple', title, ':'.join( labels ) ); ; for line in lines[2:]:; words = line.split(); row = map( float, words ); ntuple.Fill(*row); ; outfile.Write(); ; print('done'); TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TROOT::GetTutorialDirstatic const TString & GetTutorialDir()Get the tutorials directory in the installation. Static utility function.Definition TROOT.cxx:3119; AuthorWim Lavrijsen ; Definition in file mrt.py. tutorialspyrootmrt.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/mrt_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/mrt_8py.html
Deployability,integrat,integrated,". ROOT: tmva/tmva/inc/TMVA/MsgLogger.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. MsgLogger.h. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Attila Krasznahorkay, Andreas Hoecker, Joerg Stelzer, Eckhard von Toerne; 3 ; 4/**********************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 6 * Package: TMVA *; 7 * Class : MsgLogger *; 8 * *; 9 * *; 10 * Description: *; 11 * TMVA output logger class producing nicely formatted log messages *; 12 * *; 13 * Author: *; 14 * Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch> - CERN, Switzerland *; 15 * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; 16 * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; 17 * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; 18 * *; 19 * Copyright (c) 2005-2011: *; 20 * CERN, Switzerland *; 21 * U. of Victoria, Canada *; 22 * MPI-K Heidelberg, Germany *; 23 * U. of Bonn, Germany *; 24 * *; 25 * Redistribution and use in source and binary forms, with or without *; 26 * modification, are permitted according to the terms listed in LICENSE *; 27 * (see tmva/doc/LICENSE) *; 28 **********************************************************************************/; 29 ; 30#ifndef ROOT_TMVA_MsgLogger; 31#define ROOT_TMVA_MsgLogger; 32 ; 33//////////////////////////////////////////////////////////////////////////; 34// //; 35// MsgLogger //; 36// //; 37// ostringstream derivative to redirect and format output //; 38// //; 39//////////////////////////////////////////////////////////////////////////; 40 ; 41// STL include(s):; 42#include <string>; 43#include <sstream>; 44#include <iostream>; 45#include <map>; 46#include <atomic>; 47 ; 48// ROOT include(s); 49#include ""TObject.h""; 50 ; 51#include ""TMVA/Types.h""; 52 ; 53// Local include(s):; 54 ; 55namespace TMVA {; 56 ; 57 class MsgLogger : public std::ostri",MatchSource.WIKI,doc/master/MsgLogger_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MsgLogger_8h_source.html
Integrability,integrat,integrated,". ROOT: tmva/tmva/inc/TMVA/MsgLogger.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. MsgLogger.h. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Attila Krasznahorkay, Andreas Hoecker, Joerg Stelzer, Eckhard von Toerne; 3 ; 4/**********************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 6 * Package: TMVA *; 7 * Class : MsgLogger *; 8 * *; 9 * *; 10 * Description: *; 11 * TMVA output logger class producing nicely formatted log messages *; 12 * *; 13 * Author: *; 14 * Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch> - CERN, Switzerland *; 15 * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; 16 * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; 17 * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; 18 * *; 19 * Copyright (c) 2005-2011: *; 20 * CERN, Switzerland *; 21 * U. of Victoria, Canada *; 22 * MPI-K Heidelberg, Germany *; 23 * U. of Bonn, Germany *; 24 * *; 25 * Redistribution and use in source and binary forms, with or without *; 26 * modification, are permitted according to the terms listed in LICENSE *; 27 * (see tmva/doc/LICENSE) *; 28 **********************************************************************************/; 29 ; 30#ifndef ROOT_TMVA_MsgLogger; 31#define ROOT_TMVA_MsgLogger; 32 ; 33//////////////////////////////////////////////////////////////////////////; 34// //; 35// MsgLogger //; 36// //; 37// ostringstream derivative to redirect and format output //; 38// //; 39//////////////////////////////////////////////////////////////////////////; 40 ; 41// STL include(s):; 42#include <string>; 43#include <sstream>; 44#include <iostream>; 45#include <map>; 46#include <atomic>; 47 ; 48// ROOT include(s); 49#include ""TObject.h""; 50 ; 51#include ""TMVA/Types.h""; 52 ; 53// Local include(s):; 54 ; 55namespace TMVA {; 56 ; 57 class MsgLogger : public std::ostri",MatchSource.WIKI,doc/master/MsgLogger_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MsgLogger_8h_source.html
Modifiability,variab,variable,"for name)Definition MsgLogger.h:108; TMVA::MsgLogger::fgSuffixstatic const std::string fgSuffixsuffix following source nameDefinition MsgLogger.h:111; TMVA::MsgLogger::EnableOutputstatic void EnableOutput()Definition MsgLogger.cxx:68; TMVA::MsgLogger::fMinTypeEMsgType fMinTypeminimum type for outputDefinition MsgLogger.h:119; TMVA::MsgLogger::fgTypeMapstatic std::atomic< const std::map< EMsgType, std::string > * > fgTypeMapmatches output types with stringsDefinition MsgLogger.h:117; TMVA::MsgLogger::GetSourcestd::string GetSource() constDefinition MsgLogger.h:71; TMVA::MsgLogger::GetFormattedSourcestd::string GetFormattedSource() constmake sure the source name is no longer than fgMaxSourceSize:Definition MsgLogger.cxx:143; TMVA::MsgLogger::InitMapsvoid InitMaps()Create the message type and color maps.Definition MsgLogger.cxx:270; TMVA::MsgLogger::fActiveTypeEMsgType fActiveTypeactive typeDefinition MsgLogger.h:112; TMVA::MsgLogger::WriteMsgvoid WriteMsg(EMsgType type, const std::string &line) constputting the output string, the message type, and the color switcher together into a single stringDefinition MsgLogger.cxx:220; TMVA::MsgLogger::Endmsgstatic MsgLogger & Endmsg(MsgLogger &logger)end lineDefinition MsgLogger.cxx:261; TMVA::MsgLogger::fgInhibitOutputstatic std::atomic< Bool_t > fgInhibitOutputflag to suppress all outputDefinition MsgLogger.h:115; TMVA::MsgLogger::Sendvoid Send()activates the logger writerDefinition MsgLogger.cxx:185; TMVA::MsgLogger::GetMinTypeEMsgType GetMinType() constDefinition MsgLogger.h:69; TMVA::EMsgTypeEMsgTypeDefinition Types.h:55; TObjectMother of all ROOT objects.Definition TObject.h:41; unsigned int; lineTLine * lineDefinition entrylistblock_figure1.C:235; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; TMVA::EndlMsgLogger & Endl(MsgLogger &ml)Definition MsgLogger.h:148; Types.h. tmvatmvaincTMVAMsgLogger.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/MsgLogger_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MsgLogger_8h_source.html
Testability,log,logger,". ROOT: tmva/tmva/inc/TMVA/MsgLogger.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. MsgLogger.h. Go to the documentation of this file. 1// @(#)root/tmva $Id$; 2// Author: Attila Krasznahorkay, Andreas Hoecker, Joerg Stelzer, Eckhard von Toerne; 3 ; 4/**********************************************************************************; 5 * Project: TMVA - a Root-integrated toolkit for multivariate data analysis *; 6 * Package: TMVA *; 7 * Class : MsgLogger *; 8 * *; 9 * *; 10 * Description: *; 11 * TMVA output logger class producing nicely formatted log messages *; 12 * *; 13 * Author: *; 14 * Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch> - CERN, Switzerland *; 15 * Andreas Hoecker <Andreas.Hocker@cern.ch> - CERN, Switzerland *; 16 * Joerg Stelzer <stelzer@cern.ch> - DESY, Germany *; 17 * Eckhard v. Toerne <evt@uni-bonn.de> - U of Bonn, Germany *; 18 * *; 19 * Copyright (c) 2005-2011: *; 20 * CERN, Switzerland *; 21 * U. of Victoria, Canada *; 22 * MPI-K Heidelberg, Germany *; 23 * U. of Bonn, Germany *; 24 * *; 25 * Redistribution and use in source and binary forms, with or without *; 26 * modification, are permitted according to the terms listed in LICENSE *; 27 * (see tmva/doc/LICENSE) *; 28 **********************************************************************************/; 29 ; 30#ifndef ROOT_TMVA_MsgLogger; 31#define ROOT_TMVA_MsgLogger; 32 ; 33//////////////////////////////////////////////////////////////////////////; 34// //; 35// MsgLogger //; 36// //; 37// ostringstream derivative to redirect and format output //; 38// //; 39//////////////////////////////////////////////////////////////////////////; 40 ; 41// STL include(s):; 42#include <string>; 43#include <sstream>; 44#include <iostream>; 45#include <map>; 46#include <atomic>; 47 ; 48// ROOT include(s); 49#include ""TObject.h""; 50 ; 51#include ""TMVA/Types.h""; 52 ; 53// Local include(s):; 54 ; 55namespace TMVA {; 56 ; 57 class MsgLogger : public std::ostri",MatchSource.WIKI,doc/master/MsgLogger_8h_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/MsgLogger_8h_source.html
Energy Efficiency,power,powers," 6235 1147 87.5 0.333 5 5.095 44.16 0 0 0 2; 10 5218 1018 87.5 0.333 12 4.983 40.99 0 2 0 0; 11 4193 1025 87.5 0.667 53 5.229 37.5 0 0 4 0; 12 3299 893.8 88.8 0.333 6 -4.058 54.27 0 0 1 1; 13 2458 841.2 88.8 0.333 7 -4.155 48.73 0 1 0 1; 14 1933 524.7 88.8 0.333 13 -3.291 48.45 0 1 1 0; 15 1675 258.1 88.8 0.5 19 4.211 14.56 1 0 0 2; 16 1334 340.6 88.8 0.5 26 -4.731 15.22 1 1 0 1; 17 1079 255.5 88.8 0.5 33 3.953 16.35 1 0 2 0; 18 788.2 290.4 88.8 0.5 34 4.687 13.22 1 2 0 0; 19 709.2 78.94 89.4 0.5 21 2.23 15.88 0 1 1 1; 20 473.4 235.8 89.4 0.5 23 -3.543 18.78 1 0 1 1; 21 235.4 238 89.4 0.5 28 -3.976 15.06 1 1 1 0; Results of Parameterisation:; ----------------------------; Total reduction of square residuals 5.063e+05; Relative precision obtained: 0.01185; Error obtained: 235.4; Multiple correlation coefficient: 0.9995; Reduced Chi square over sample: 0.4975; Maximum residual value: 3.243; Minimum residual value: -2.59; Estimated root mean square: 0.6862; Maximum powers used: 1 2 4 2 ; Function codes of candidate functions.; 1: considered, 2: too little contribution, 3: accepted.; 3333333333 1133311113 1313113131 1113311111 1111111111 1113111111; 1111111111 1111111111 1111111111 1111111111 1111111111 1111111111; 111111; Loop over candidates stopped because max allowed studies reached; ; Coefficients:; -------------; # Value Error Powers; ---------------------------------------; 0 -4.371 0.08798 0 0 0 0; 1 43.15 0.1601 1 0 0 0; 2 13.43 0.08032 0 0 0 1; 3 13.46 0.07805 0 0 1 0; 4 13.4 0.08054 0 1 0 0; 5 13.33 0.1423 1 1 0 0; 6 13.3 0.1367 1 0 0 1; 7 13.35 0.1331 1 0 1 0; 8 4.497 0.1511 0 0 0 2; 9 4.639 0.1585 0 2 0 0; 10 4.89 0.164 0 0 4 0; 11 -3.7 0.1364 0 0 1 1; 12 -3.986 0.1438 0 1 0 1; 13 -3.862 0.1458 0 1 1 0; 14 4.361 0.2614 1 0 0 2; 15 -4.026 0.2555 1 1 0 1; 16 4.57 0.2477 1 0 2 0; 17 4.698 0.2729 1 2 0 0; 18 2.838 0.2525 0 1 1 1; 19 -3.489 0.2292 1 0 1 1; 20 -3.976 0.2566 1 1 1 0; ; Results of Fit:; ---------------; Test sample size: 2100; Multiple correlation c",MatchSource.WIKI,doc/master/multidimfit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/multidimfit_8C.html
Modifiability,variab,variables,"< ""*************************************************"" << std::endl;; std::cout << std::endl;; ; // Initialize global TRannom object.; gRandom = new TRandom();; ; // Open output file; TFile* output = new TFile(""mdf.root"", ""RECREATE"");; ; // Global data parameters; int nVars = 4;; int nData = 500;; double x[4];; ; // make fit object and set parameters on it.; TMultiDimFit* fit = new TMultiDimFit(nVars, TMultiDimFit::kMonomials,""v"");; ; int mPowers[] = { 6 , 6, 6, 6 };; fit->SetMaxPowers(mPowers);; fit->SetMaxFunctions(1000);; fit->SetMaxStudy(1000);; fit->SetMaxTerms(30);; fit->SetPowerLimit(1);; fit->SetMinAngle(10);; fit->SetMaxAngle(10);; fit->SetMinRelativeError(.01);; ; // variables to hold the temporary input data; double d;; double e;; ; // Print out the start parameters; fit->Print(""p"");; ; printf(""======================================\n"");; ; // Create training sample; int i;; for (i = 0; i < nData ; i++) {; ; // Make some data; makeData(x,d,e);; ; // Add the row to the fit object; fit->AddRow(x,d,e);; }; ; // Print out the statistics; fit->Print(""s"");; ; // Book histograms; fit->MakeHistograms();; ; // Find the parameterization; fit->FindParameterization();; ; // Print coefficents; fit->Print(""rc"");; ; // Get the min and max of variables from the training sample, used; // for cuts in test sample.; double *xMax = new double[nVars];; double *xMin = new double[nVars];; for (i = 0; i < nVars; i++) {; xMax[i] = (*fit->GetMaxVariables())(i);; xMin[i] = (*fit->GetMinVariables())(i);; }; ; nData = fit->GetNCoefficients() * 100;; int j;; ; // Create test sample; for (i = 0; i < nData ; i++) {; // Make some data; makeData(x,d,e);; ; for (j = 0; j < nVars; j++); if (x[j] < xMin[j] || x[j] > xMax[j]); break;; ; // If we get through the loop above, all variables are in range; if (j == nVars); // Add the row to the fit object; fit->AddTestRow(x,d,e);; else; i--;; }; //delete gRandom;; ; // Test the parameterizatio and coefficents using the test sample.; if (doFit); fit->",MatchSource.WIKI,doc/master/multidimfit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/multidimfit_8C.html
Performance,optimiz,optimizer,""");; } else {; printf(""\nmultidimfit .............................................. fails case %d\n"",compare);; }; ; // We're done; delete fit;; delete [] xMin;; delete [] xMax;; return compare;; }; d#define d(i)Definition RSha256.hxx:102; e#define e(i)Definition RSha256.hxx:103; Riostream.h; TApplication.h; TBrowser.h; TCanvas.h; TFile.h; TH1.h; TMath.h; TMultiDimFit.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TSystem.h; TVectorD.h; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TMultiDimFitMultidimensional Fits in ROOT.Definition TMultiDimFit.h:15; TMultiDimFit::kMonomials@ kMonomialsDefinition TMultiDimFit.h:19; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TVectorT< Double_t >; xDouble_t x[n]Definition legend1.C:17; PyTorch_Generate_CNN_Model.fitfit(model, train_loader, val_loader, num_epochs, batch_size, optimizer, criterion, save_best, scheduler)Definition PyTorch_Generate_CNN_Model.py:34; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::AreEqualRelBool_t AreEqualRel(Double_t af, Double_t bf, Double_t relPrec)Comparing floating points.Definition TMath.h:426; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; outputstatic void output(); AuthorsRene Brun, Christian Holm Christensen ; Definition in file multidimfit.C. tutorialsfitmultidimfit.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/multidimfit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/multidimfit_8C.html
Testability,test,test,"eference run; ; ; // the right coefficients (before fit); double GoodCoeffsNoFit[] = {; -4.37056,; 43.1468,; 13.432,; 13.4632,; 13.3964,; 13.328,; 13.3016,; 13.3519,; 4.49724,; 4.63876,; 4.89036,; -3.69982,; -3.98618,; -3.86195,; 4.36054,; -4.02597,; 4.57037,; 4.69845,; 2.83819,; -3.48855,; -3.97612; };; ; // the right coefficients (after fit); double GoodCoeffs[] = {; -4.399,; 43.15,; 13.41,; 13.49,; 13.4,; 13.23,; 13.34,; 13.29,; 4.523,; 4.659,; 4.948,; -4.026,; -4.045,; -3.939,; 4.421,; -4.006,; 4.626,; 4.378,; 3.516,; -4.111,; -3.823,; };; ; // Good Powers; int GoodPower[] = {; 1, 1, 1, 1,; 2, 1, 1, 1,; 1, 1, 1, 2,; 1, 1, 2, 1,; 1, 2, 1, 1,; 2, 2, 1, 1,; 2, 1, 1, 2,; 2, 1, 2, 1,; 1, 1, 1, 3,; 1, 3, 1, 1,; 1, 1, 5, 1,; 1, 1, 2, 2,; 1, 2, 1, 2,; 1, 2, 2, 1,; 2, 1, 1, 3,; 2, 2, 1, 2,; 2, 1, 3, 1,; 2, 3, 1, 1,; 1, 2, 2, 2,; 2, 1, 2, 2,; 2, 2, 2, 1; };; ; int nc = fit->GetNCoefficients();; int nv = fit->GetNVariables();; const int *powers = fit->GetPowers();; const int *pindex = fit->GetPowerIndex();; if (nc != 21) return 1;; const TVectorD *coeffs = fit->GetCoefficients();; int k = 0;; for (int i=0;i<nc;i++) {; if (doFit) {; if (!TMath::AreEqualRel((*coeffs)[i],GoodCoeffs[i],1e-3)) return 2;; }; else {; if (TMath::Abs((*coeffs)[i] - GoodCoeffsNoFit[i]) > 5e-5) return 2;; }; for (int j=0;j<nv;j++) {; if (powers[pindex[i]*nv+j] != GoodPower[k]) return 3;; k++;; }; }; ; // now test the result of the generated function; gROOT->ProcessLine("".L MDF.C"");; ; double refMDF = (doFit) ? 43.95 : 43.98;; // this does not work in CLing since the function is not defined; //double x[] = {5,5,5,5};; //double rMDF = MDF(x);; //LM: need to return the address of the result since it is casted to a long (this should not be in a tutorial !); std::intptr_t iret = gROOT->ProcessLine("" double xvalues[] = {5,5,5,5}; double result=MDF(xvalues); &result;"");; double rMDF = * ( (double*)iret);; //printf(""%f\n"",rMDF);; if (TMath::Abs(rMDF -refMDF) > 1e-2) return 4;; return 0;; }; ; //______________",MatchSource.WIKI,doc/master/multidimfit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/multidimfit_8C.html
Availability,error,errors,". ROOT: tutorials/fit/multifit.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. multifit.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ; Three Gaussians are fitted in sub-ranges of this histogram. A new function (a sum of 3 Gaussians) is fitted on another subrange Note that when fitting simple functions, such as Gaussians, the initial values of parameters are automatically computed by ROOT. In the more complicated case of the sum of 3 Gaussians, the initial values of parameters must be given. In this particular case, the initial values are taken from the result of the individual fits. ; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 0.0848003; NDf = 7; Edm = 8.86911e-08; NCalls = 106; Constant = 4.96664 +/- 2.83221 ; Mean = 95.4663 +/- 12.3905 ; Sigma = 6.82779 +/- 7.49131 (limited); ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 0.0771026; NDf = 7; Edm = 1.00182e-07; NCalls = 73; Constant = 5.96312 +/- 1.14355 ; Mean = 100.467 +/- 1.53372 ; Sigma = 3.54806 +/- 1.16899 (limited); ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 0.00877492; NDf = 8; Edm = 4.98832e-06; NCalls = 87; Constant = 0.912053 +/- 0.435309 ; Mean = 116.304 +/- 8.32344 ; Sigma = 8.38103 +/- 18.5139 (limited); ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 0.31282; NDf = 31; Edm = 3.25006e-06; NCalls = 495; p0 = 4.91052 +/- 1.41324 ; p1 = 94.4492 +/- 3.71244 ; p2 = 5.9461 +/- 2.41662 ; p3 = 3.22456 +/- 3.11384 ; p4 = 101.662 +/- 1.67862 ; p5 = 2.48631 +/- 1.91151 ; p6 = 0.911626 +/- 0.368736 ; p7 = 117.581 +/- 5.06092 ; p8 = 7.59194 +/- 8.78217 ; ; #include ""TH1.h""; #include ""TF1.h""; ; ",MatchSource.WIKI,doc/master/multifit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/multifit_8C.html
Usability,simpl,simple,". ROOT: tutorials/fit/multifit.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. multifit.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ; Three Gaussians are fitted in sub-ranges of this histogram. A new function (a sum of 3 Gaussians) is fitted on another subrange Note that when fitting simple functions, such as Gaussians, the initial values of parameters are automatically computed by ROOT. In the more complicated case of the sum of 3 Gaussians, the initial values of parameters must be given. In this particular case, the initial values are taken from the result of the individual fits. ; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 0.0848003; NDf = 7; Edm = 8.86911e-08; NCalls = 106; Constant = 4.96664 +/- 2.83221 ; Mean = 95.4663 +/- 12.3905 ; Sigma = 6.82779 +/- 7.49131 (limited); ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 0.0771026; NDf = 7; Edm = 1.00182e-07; NCalls = 73; Constant = 5.96312 +/- 1.14355 ; Mean = 100.467 +/- 1.53372 ; Sigma = 3.54806 +/- 1.16899 (limited); ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 0.00877492; NDf = 8; Edm = 4.98832e-06; NCalls = 87; Constant = 0.912053 +/- 0.435309 ; Mean = 116.304 +/- 8.32344 ; Sigma = 8.38103 +/- 18.5139 (limited); ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 0.31282; NDf = 31; Edm = 3.25006e-06; NCalls = 495; p0 = 4.91052 +/- 1.41324 ; p1 = 94.4492 +/- 3.71244 ; p2 = 5.9461 +/- 2.41662 ; p3 = 3.22456 +/- 3.11384 ; p4 = 101.662 +/- 1.67862 ; p5 = 2.48631 +/- 1.91151 ; p6 = 0.911626 +/- 0.368736 ; p7 = 117.581 +/- 5.06092 ; p8 = 7.59194 +/- 8.78217 ; ; #include ""TH1.h""; #include ""TF1.h""; ; ",MatchSource.WIKI,doc/master/multifit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/multifit_8C.html
Availability,error,errors,". ROOT: tutorials/fit/multifit.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. multifit.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_fit; 3/// \notebook -js; 4/// Fitting multiple functions to different ranges of a 1-D histogram; 5/// Example showing how to fit in a sub-range of an histogram; 6/// A histogram is created and filled with the bin contents and errors; 7/// defined in the table below.; 8/// Three Gaussians are fitted in sub-ranges of this histogram.; 9/// A new function (a sum of 3 Gaussians) is fitted on another subrange; 10/// Note that when fitting simple functions, such as Gaussians, the initial; 11/// values of parameters are automatically computed by ROOT.; 12/// In the more complicated case of the sum of 3 Gaussians, the initial values; 13/// of parameters must be given. In this particular case, the initial values; 14/// are taken from the result of the individual fits.; 15///; 16/// \macro_image; 17/// \macro_output; 18/// \macro_code; 19///; 20/// \author Rene Brun; 21 ; 22#include ""TH1.h""; 23#include ""TF1.h""; 24 ; 25void multifit(); 26{; 27 const int np = 49;; 28 float x[np] = {1.913521, 1.953769, 2.347435, 2.883654, 3.493567, 4.047560, 4.337210, 4.364347, 4.563004,; 29 5.054247, 5.194183, 5.380521, 5.303213, 5.384578, 5.563983, 5.728500, 5.685752, 5.080029,; 30 4.251809, 3.372246, 2.207432, 1.227541, 0.8597788, 0.8220503, 0.8046592, 0.7684097, 0.7469761,; 31 0.8019787, 0.8362375, 0.8744895, 0.9143721, 0.9462768, 0.9285364, 0.8954604, 0.8410891, 0.7853871,; 32 0.7100883, 0.6938808, 0.7363682, 0.7032954, 0.6029015, 0.5600163, 0.7477068, 1.188785, 1.938228,; 33 2.602717, 3.472962, 4.465014, 5.177035};; 34 ; 35 // The histogram are filled with bins defined in the array x.; 36 TH1F *h = new TH1F(""h"", ""Example of several fits in subranges"", np, 85, 134);; 37 h->SetMaximum(7);; 38 ; 39 for (int i = 0; i < np; i++) {; 40 h->SetBinContent(i + 1, x[i]);; 41 }; 42 ; 43 // Defin",MatchSource.WIKI,doc/master/multifit_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/multifit_8C_source.html
Usability,simpl,simple,". ROOT: tutorials/fit/multifit.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. multifit.C. Go to the documentation of this file. 1/// \file; 2/// \ingroup tutorial_fit; 3/// \notebook -js; 4/// Fitting multiple functions to different ranges of a 1-D histogram; 5/// Example showing how to fit in a sub-range of an histogram; 6/// A histogram is created and filled with the bin contents and errors; 7/// defined in the table below.; 8/// Three Gaussians are fitted in sub-ranges of this histogram.; 9/// A new function (a sum of 3 Gaussians) is fitted on another subrange; 10/// Note that when fitting simple functions, such as Gaussians, the initial; 11/// values of parameters are automatically computed by ROOT.; 12/// In the more complicated case of the sum of 3 Gaussians, the initial values; 13/// of parameters must be given. In this particular case, the initial values; 14/// are taken from the result of the individual fits.; 15///; 16/// \macro_image; 17/// \macro_output; 18/// \macro_code; 19///; 20/// \author Rene Brun; 21 ; 22#include ""TH1.h""; 23#include ""TF1.h""; 24 ; 25void multifit(); 26{; 27 const int np = 49;; 28 float x[np] = {1.913521, 1.953769, 2.347435, 2.883654, 3.493567, 4.047560, 4.337210, 4.364347, 4.563004,; 29 5.054247, 5.194183, 5.380521, 5.303213, 5.384578, 5.563983, 5.728500, 5.685752, 5.080029,; 30 4.251809, 3.372246, 2.207432, 1.227541, 0.8597788, 0.8220503, 0.8046592, 0.7684097, 0.7469761,; 31 0.8019787, 0.8362375, 0.8744895, 0.9143721, 0.9462768, 0.9285364, 0.8954604, 0.8410891, 0.7853871,; 32 0.7100883, 0.6938808, 0.7363682, 0.7032954, 0.6029015, 0.5600163, 0.7477068, 1.188785, 1.938228,; 33 2.602717, 3.472962, 4.465014, 5.177035};; 34 ; 35 // The histogram are filled with bins defined in the array x.; 36 TH1F *h = new TH1F(""h"", ""Example of several fits in subranges"", np, 85, 134);; 37 h->SetMaximum(7);; 38 ; 39 for (int i = 0; i < np; i++) {; 40 h->SetBinContent(i + 1, x[i]);; 41 }; 42 ; 43 // Defin",MatchSource.WIKI,doc/master/multifit_8C_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/multifit_8C_source.html
Availability,error,errors,". ROOT: tutorials/fit/multifit.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; multifit.py File ReferenceTutorials » Fit Tutorials. Detailed Description; Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ; Three Gaussians are fitted in sub-ranges of this histogram. A new function (a sum of 3 Gaussians) is fitted on another subrange Note that when fitting simple functions, such as Gaussians, the initial values of parameters are automatically computed by ROOT. In the more complicated case of the sum of 3 Gaussians, the initial values of parameters must be given. In this particular case, the initial values are taken from the result of the individual fits. ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 0.0848003; NDf = 7; Edm = 8.86911e-08; NCalls = 106; Constant = 4.96664 +/- 2.83221 ; Mean = 95.4663 +/- 12.3905 ; Sigma = 6.82779 +/- 7.49131 (limited); ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 0.0771026; NDf = 7; Edm = 1.00182e-07; NCalls = 73; Constant = 5.96312 +/- 1.14355 ; Mean = 100.467 +/- 1.53372 ; Sigma = 3.54806 +/- 1.16899 (limited); ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 0.00877492; NDf = 8; Edm = 4.98832e-06; NCalls = 87; Constant = 0.912053 +/- 0.435309 ; Mean = 116.304 +/- 8.32344 ; Sigma = 8.38103 +/- 18.5139 (limited); ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 0.31282; NDf = 31; Edm = 3.25006e-06; NCalls = 495; p0 = 4.91052 +/- 1.41324 ; p1 = 94.4492 +/- 3.71244 ; p2 = 5.9461 +/- 2.41662 ; p3 = 3.22456 +/- 3.11384 ; p4 = 101.662 +/- 1.67862 ; p5 = 2.48631 +/- 1.91151 ; p6 = 0.911626 +/- 0.368736 ; p7 = 117.581 +/- 5.06092 ; p8 = 7.59194 +/- 8.78217 ; [ 4.96663958 95.46632975 6.",MatchSource.WIKI,doc/master/multifit_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/multifit_8py.html
Usability,simpl,simple,". ROOT: tutorials/fit/multifit.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; multifit.py File ReferenceTutorials » Fit Tutorials. Detailed Description; Fitting multiple functions to different ranges of a 1-D histogram Example showing how to fit in a sub-range of an histogram A histogram is created and filled with the bin contents and errors defined in the table below. ; Three Gaussians are fitted in sub-ranges of this histogram. A new function (a sum of 3 Gaussians) is fitted on another subrange Note that when fitting simple functions, such as Gaussians, the initial values of parameters are automatically computed by ROOT. In the more complicated case of the sum of 3 Gaussians, the initial values of parameters must be given. In this particular case, the initial values are taken from the result of the individual fits. ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 0.0848003; NDf = 7; Edm = 8.86911e-08; NCalls = 106; Constant = 4.96664 +/- 2.83221 ; Mean = 95.4663 +/- 12.3905 ; Sigma = 6.82779 +/- 7.49131 (limited); ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 0.0771026; NDf = 7; Edm = 1.00182e-07; NCalls = 73; Constant = 5.96312 +/- 1.14355 ; Mean = 100.467 +/- 1.53372 ; Sigma = 3.54806 +/- 1.16899 (limited); ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 0.00877492; NDf = 8; Edm = 4.98832e-06; NCalls = 87; Constant = 0.912053 +/- 0.435309 ; Mean = 116.304 +/- 8.32344 ; Sigma = 8.38103 +/- 18.5139 (limited); ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 0.31282; NDf = 31; Edm = 3.25006e-06; NCalls = 495; p0 = 4.91052 +/- 1.41324 ; p1 = 94.4492 +/- 3.71244 ; p2 = 5.9461 +/- 2.41662 ; p3 = 3.22456 +/- 3.11384 ; p4 = 101.662 +/- 1.67862 ; p5 = 2.48631 +/- 1.91151 ; p6 = 0.911626 +/- 0.368736 ; p7 = 117.581 +/- 5.06092 ; p8 = 7.59194 +/- 8.78217 ; [ 4.96663958 95.46632975 6.",MatchSource.WIKI,doc/master/multifit_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/multifit_8py.html
Availability,error,errors,". ROOT: tutorials/fit/multifit.py Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. multifit.py. Go to the documentation of this file. 1## \file; 2## \ingroup tutorial_fit; 3## \notebook; 4## Fitting multiple functions to different ranges of a 1-D histogram; 5## Example showing how to fit in a sub-range of an histogram; 6## A histogram is created and filled with the bin contents and errors; 7## defined in the table below.; 8## Three Gaussians are fitted in sub-ranges of this histogram.; 9## A new function (a sum of 3 Gaussians) is fitted on another subrange; 10## Note that when fitting simple functions, such as Gaussians, the initial; 11## values of parameters are automatically computed by ROOT.; 12## In the more complicated case of the sum of 3 Gaussians, the initial values; 13## of parameters must be given. In this particular case, the initial values; 14## are taken from the result of the individual fits.; 15##; 16## \macro_image; 17## \macro_output; 18## \macro_code; 19##; 20## \authors Jonas Rembser, Rene Brun (C++ version); 21 ; 22import ROOT; 23 ; 24import numpy as np; 25 ; 26n_x = 49; 27 ; 28# fmt: off; 29x = np.array( [ 1.913521, 1.953769, 2.347435, 2.883654, 3.493567, 4.047560,; 30 4.337210, 4.364347, 4.563004, 5.054247, 5.194183, 5.380521, 5.303213,; 31 5.384578, 5.563983, 5.728500, 5.685752, 5.080029, 4.251809, 3.372246,; 32 2.207432, 1.227541, 0.8597788, 0.8220503, 0.8046592, 0.7684097, 0.7469761,; 33 0.8019787, 0.8362375, 0.8744895, 0.9143721, 0.9462768, 0.9285364,; 34 0.8954604, 0.8410891, 0.7853871, 0.7100883, 0.6938808, 0.7363682,; 35 0.7032954, 0.6029015, 0.5600163, 0.7477068, 1.188785, 1.938228, 2.602717,; 36 3.472962, 4.465014, 5.177035, ], dtype=np.float32,); 37# fmt: on; 38 ; 39# The histogram are filled with bins defined in the array x.; 40h = ROOT.TH1F(""h"", ""Example of several fits in subranges"", n_x, 85, 134); 41h.SetMaximum(7); 42 ; 43for i, x_i in enumerate(x):; 44 h.SetBinContent(i + 1, x[i]); 45 ",MatchSource.WIKI,doc/master/multifit_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/multifit_8py_source.html
Usability,simpl,simple,". ROOT: tutorials/fit/multifit.py Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. multifit.py. Go to the documentation of this file. 1## \file; 2## \ingroup tutorial_fit; 3## \notebook; 4## Fitting multiple functions to different ranges of a 1-D histogram; 5## Example showing how to fit in a sub-range of an histogram; 6## A histogram is created and filled with the bin contents and errors; 7## defined in the table below.; 8## Three Gaussians are fitted in sub-ranges of this histogram.; 9## A new function (a sum of 3 Gaussians) is fitted on another subrange; 10## Note that when fitting simple functions, such as Gaussians, the initial; 11## values of parameters are automatically computed by ROOT.; 12## In the more complicated case of the sum of 3 Gaussians, the initial values; 13## of parameters must be given. In this particular case, the initial values; 14## are taken from the result of the individual fits.; 15##; 16## \macro_image; 17## \macro_output; 18## \macro_code; 19##; 20## \authors Jonas Rembser, Rene Brun (C++ version); 21 ; 22import ROOT; 23 ; 24import numpy as np; 25 ; 26n_x = 49; 27 ; 28# fmt: off; 29x = np.array( [ 1.913521, 1.953769, 2.347435, 2.883654, 3.493567, 4.047560,; 30 4.337210, 4.364347, 4.563004, 5.054247, 5.194183, 5.380521, 5.303213,; 31 5.384578, 5.563983, 5.728500, 5.685752, 5.080029, 4.251809, 3.372246,; 32 2.207432, 1.227541, 0.8597788, 0.8220503, 0.8046592, 0.7684097, 0.7469761,; 33 0.8019787, 0.8362375, 0.8744895, 0.9143721, 0.9462768, 0.9285364,; 34 0.8954604, 0.8410891, 0.7853871, 0.7100883, 0.6938808, 0.7363682,; 35 0.7032954, 0.6029015, 0.5600163, 0.7477068, 1.188785, 1.938228, 2.602717,; 36 3.472962, 4.465014, 5.177035, ], dtype=np.float32,); 37# fmt: on; 38 ; 39# The histogram are filled with bins defined in the array x.; 40h = ROOT.TH1F(""h"", ""Example of several fits in subranges"", n_x, 85, 134); 41h.SetMaximum(7); 42 ; 43for i, x_i in enumerate(x):; 44 h.SetBinContent(i + 1, x[i]); 45 ",MatchSource.WIKI,doc/master/multifit_8py_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/multifit_8py_source.html
Availability,error,error," {.6,.8,.7,.4,.3,.3,.4,.5,.6,.7};; auto gr2 = new TGraphErrors(n2,x2,y2,ex2,ey2);; gr2->SetMarkerColor(kRed);; gr2->SetMarkerStyle(20);; ; gr2->Fit(""pol5"",""q"");; auto func2 = (TF1 *) gr2->GetListOfFunctions()->FindObject(""pol5"");; func2->SetLineColor(kRed);; func2->SetLineStyle(2);; ; mg->Add(gr2);; ; mg->Draw(""ap"");; ; //force drawing of canvas to generate the fit TPaveStats; c1->Update();; ; auto stats1 = (TPaveStats*) gr1->GetListOfFunctions()->FindObject(""stats"");; auto stats2 = (TPaveStats*) gr2->GetListOfFunctions()->FindObject(""stats"");; ; if (stats1 && stats2) {; stats1->SetTextColor(kBlue);; stats2->SetTextColor(kRed);; stats1->SetX1NDC(0.12); stats1->SetX2NDC(0.32); stats1->SetY1NDC(0.82);; stats2->SetX1NDC(0.72); stats2->SetX2NDC(0.92); stats2->SetY1NDC(0.75);; c1->Modified();; }; }; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; Double_tdouble Double_tDefinition RtypesCore.h:59; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TPaveStatsThe histogram statistics painter class.Definition TPaveStats.h:18; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; c1return c1Definition legend1.C:41; AuthorRene Brun ; Definition in file multigraph.C. tutorialsgraphsmultigraph.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/multigraph_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/multigraph_8C.html
Modifiability,variab,variables,". ROOT: tutorials/fit/myfit.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. myfit.C File ReferenceTutorials » Fit Tutorials. Detailed Description; Get in memory an histogram from a root file and fit a user defined function. ; Note that a user defined function must always be defined as in this example:; first parameter: array of variables (in this example only 1-dimension); second parameter: array of parameters Note also that in case of user defined functions, one must set an initial value for each parameter. ; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 36.7428; NDf = 47; Edm = 2.03167e-06; NCalls = 101; Constant = 797.969 +/- 6.79742 ; Mean_value = -7.42918e-05 +/- 0.00734861 ; Sigma = 0.998754 +/- 0.0071337 ; Integral of function = 1907.36; ; #include <TCanvas.h>; #include <TF1.h>; #include <TFile.h>; #include <TH1F.h>; #include <TInterpreter.h>; #include <TROOT.h>; ; #include <cmath>; ; double fitf(double *x, double *par); {; double arg = 0;; if (par[2] != 0) arg = (x[0] - par[1])/par[2];; ; double fitval = par[0]*std::exp(-0.5*arg*arg);; return fitval;; }; void myfit(); {; TString dir = gROOT->GetTutorialDir();; dir.Append(""/hsimple.C"");; dir.ReplaceAll(""/./"",""/"");; if (!gInterpreter->IsLoaded(dir.Data())) gInterpreter->LoadMacro(dir.Data());; TFile *hsimpleFile = (TFile*)gROOT->ProcessLineFast(""hsimple(1)"");; if (!hsimpleFile) return;; ; TCanvas *c1 = new TCanvas(""c1"",""the fit canvas"",500,400);; ; TH1F *hpx = (TH1F*)hsimpleFile->Get(""hpx"");; ; // Creates a Root function based on function fitf above; TF1 *func = new TF1(""fitf"",fitf,-2,2,3);; ; // Sets initial values and parameter names; func->SetParameters(100,0,1);; func->SetParNames(""Constant"",""Mean_value"",""Sigma"");; ; // Fit histogram in range defined by function; hpx->Fit(func,""r"");; ; // Gets integral of function between fit limits; printf(""Integral of function = %g\n"",func->Integral(-2,2));; }; TCanvas.h; TF1.h; TFile.h; ",MatchSource.WIKI,doc/master/myfit_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/myfit_8C.html
Safety,detect,detector,". ROOT: tutorials/geom/na49view.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. na49view.C File ReferenceTutorials » Geometry tutorials. Detailed Description; This macro generates with 2 views of the NA49 detector using the old obsolete geometry package. . ; void na49view() {; TCanvas *c1 = new TCanvas(""c1"",""The NA49 canvas"",200,10,700,780);; ; gBenchmark->Start(""na49view"");; ; TPad *all = new TPad(""all"",""A Global view of NA49"",0.02,0.02,0.48,0.82,28);; TPad *tof = new TPad(""tof"",""One Time Of Flight element"",0.52,0.02,0.98,0.82,28);; all->Draw();; tof->Draw();; TPaveLabel *na49title = new TPaveLabel(0.04,0.86,0.96,0.98,""Two views of the NA49 detector"");; na49title->SetFillColor(32);; na49title->Draw();; //; TFile *nageom = new TFile(""na49.root"");; if (!nageom || nageom->IsZombie()) return;; TGeometry *n49 =(TGeometry*)gROOT->FindObject(""na49"");; n49->SetBomb(1.2);; n49->cd(); //Set current geometry; all->cd(); //Set current pad; n49->Draw();; c1->Update();; tof->cd();; TNode *TOFR1 = n49->GetNode(""TOFR1"");; TOFR1->Draw();; c1->Update();; ; gBenchmark->Show(""na49view"");; ; // To have a better and dynamic view of any of these pads,; // you can click with the middle button of your mouse to select it.; // Then select ""View with x3d"" in the VIEW menu of the Canvas.; // Once in x3d, you are in wireframe mode by default.; // You can switch to:; // - Hidden Line mode by typing E; // - Solid mode by typing R; // - Wireframe mode by typing W; // - Stereo mode by clicking S (and you need special glasses); // - To leave x3d type Q; }; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; gROOT#define gROOTDefinition TROOT.h:406; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showvirtual void Show(const char *name",MatchSource.WIKI,doc/master/na49view_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/na49view_8C.html
Safety,detect,detector,". ROOT: tutorials/pyroot/na49view.py File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; na49view.py File ReferenceTutorials » PyRoot tutorials. Detailed Description; This macro generates two views of the NA49 detector. ; To have a better and dynamic view of any of these pads, you can click with the middle button of your mouse to select it. Then select ""View with x3d"" in the VIEW menu of the Canvas. Once in x3d, you are in wireframe mode by default. You can switch to:; Hidden Line mode by typing E; Solid mode by typing R; Wireframe mode by typing W; Stereo mode by clicking S (and you need special glasses); To leave x3d type Q. ; import ROOT; ; c1 = ROOT.TCanvas( 'c1', 'The NA49 canvas', 200, 10, 700, 780 ); ; ROOT.gBenchmark.Start( 'na49view' ); ; all = ROOT.TPad( 'all', 'A Global view of NA49', 0.02, 0.02, 0.48, 0.82, 28 ); tof = ROOT.TPad( 'tof', 'One Time Of Flight element', 0.52, 0.02, 0.98, 0.82, 28 ); all.Draw();; tof.Draw();; na49title = ROOT.TPaveLabel( 0.04, 0.86, 0.96, 0.98, 'Two views of the NA49 detector' ); na49title.SetFillColor( 32 ); na49title.Draw(); #; nageom = ROOT.TFile( 'py-na49.root' ); n49 = ROOT.gROOT.FindObject( 'na49' ); n49.SetBomb( 1.2 ); n49.cd() # Set current geometry; all.cd() # Set current pad; n49.Draw(); c1.Update(); tof.cd(); TOFR1 = n49.GetNode( 'TOFR1' ); TOFR1.Draw(); c1.Update(); ; ROOT.gBenchmark.Show( 'na49view' ); AuthorWim Lavrijsen ; Definition in file na49view.py. tutorialspyrootna49view.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/na49view_8py.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/na49view_8py.html
Performance,optimiz,optimize,". ROOT: tutorials/geom/na49.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. na49.C File ReferenceTutorials » Geometry tutorials. Detailed Description; This file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ; ; #ifdef __CLING__; #pragma cling optimize(0); #endif; ; #include ""TMaterial.h""; #include ""TMixture.h""; #include ""TNode.h""; #include ""TGeometry.h""; #include ""TRotMatrix.h""; #include ""TBenchmark.h""; #include ""TBRIK.h""; #include ""TTRAP.h""; #include ""TTUBE.h""; ; void na49() {; gBenchmark->Start(""na49"");; ; TMaterial *mat;; TMixture *mix;; TRotMatrix *rot;; TNode *Node;; ; TGeometry *na49 = new TGeometry(""na49"",""na49.C"");; ; ; //-----------List of Materials and Mixtures--------------; ; mat = new TMaterial(""mat1"",""HYDROGEN"",1.01,1,.0708);; mat = new TMaterial(""mat2"",""DEUTERIUM"",2.01,1,.162);; mat = new TMaterial(""mat3"",""HELIUM"",4,2,.125);; mat = new TMaterial(""mat4"",""LITHIUM"",6.94,3,.534);; mat = new TMaterial(""mat5"",""BERILLIUM"",9.01,4,1.848);; mat = new TMaterial(""mat6"",""CARBON"",12.01,6,2.265);; mat = new TMaterial(""mat7"",""NITROGEN"",14.01,7,.808);; mat = new TMaterial(""mat8"",""NEON"",20.18,10,1.207);; mat = new TMaterial(""mat9"",""ALUMINIUM"",26.97999,13,2.7);; mat = new TMaterial(""mat10"",""IRON"",55.84999,26,7.869999);; mat = new TMaterial(""mat11"",""COPPER"",63.54,29,8.96);; mat = new TMaterial(""mat12"",""TUNGSTEN"",183.85,74,19.29999);; mat = new TMaterial(""mat13"",""LEAD"",207.19,82,11.35);; mat = new TMaterial(""mat14"",""URANIUM"",238.0299,92,18.95);; mat = new TMaterial(""mat15"",""AIR"",14.60999,7.3,.001205);; mat = new TMaterial(""mat16"",""VACUUM"",0,0,0);; mat = new TMaterial(""mat17"",""JUNK"",28.09,14,2.329999);; mat = new TMaterial(""mat18"",""JUNK"",28.09,14,2.329999);; mat = new TMaterial(""mat19"",""JUNK"",28.09,14,2.329999);; mat = new TMaterial(""mat20"",""SILICON"",28.",MatchSource.WIKI,doc/master/na49_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/na49_8C.html
Safety,detect,detector,"eAttributes();; ; // Set Node attributes; CAVE1->SetVisibility(2); //node is not drawn but its sons are drawn; VT1_1->SetVisibility(-4); //Node is not drawn. Its immediate sons are drawn; VT2_1->SetVisibility(-4);; MTL_1->SetVisibility(-4);; MTR_1->SetVisibility(-4);; TOFR1->SetVisibility(-4);; ; gBenchmark->Show(""na49"");; }; TBRIK.h; TBenchmark.h; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; TGeometry.h; TMaterial.h; TMixture.h; TNode.h; TRotMatrix.h; TTRAP.h; TTUBE.h; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TBRIKA box with faces perpendicular to the axes.Definition TBRIK.h:26; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showvirtual void Show(const char *name)Stops Benchmark name and Prints results.Definition TBenchmark.cxx:155; TGeometryTGeometry description.Definition TGeometry.h:39; TMaterialManages a detector material.Definition TMaterial.h:28; TMixtureManages a detector mixture.Definition TMixture.h:27; TMixture::DefineElementvirtual void DefineElement(Int_t n, Float_t a, Float_t z, Float_t w)Define one mixture element.Definition TMixture.cxx:86; TNodeTNode description.Definition TNode.h:33; TNode::cdvirtual void cd(const char *path=nullptr)Change Current Reference node to this.Definition TNode.cxx:249; TNode::ImportShapeAttributesvirtual void ImportShapeAttributes()Copy shape attributes as node attributes.Definition TNode.cxx:409; TNode::SetVisibilityvirtual void SetVisibility(Int_t vis=1)Set visibility for this node and its sons.Definition TNode.cxx:758; TRotMatrixManages a detector rotation matrix.Definition TRotMatrix.h:28; TShape::SetVisibilityvirtual void SetVisibility(Int_t vis)Definition TShape.h:62; TTRAPA general trapezoid.Definition TTRAP.h:33; TTUBEA tube.Definition TTUBE.h:32; AuthorRene Brun ; Definition in file na49.C. tutorialsgeomna49.C. ROOT master - Reference",MatchSource.WIKI,doc/master/na49_8C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/na49_8C.html
Availability,error,errors,"const std::string &name, cf_t fac);  ; CPYCPPYY_EXTERN bool RegisterConverter (const std::string &name, ConverterFactory_t);  ; CPYCPPYY_EXTERN bool RegisterConverterAlias (const std::string &name, const std::string &target);  ; CPYCPPYY_EXTERN bool RegisterExecutor (const std::string &name, ExecutorFactory_t);  ; CPYCPPYY_EXTERN bool RegisterExecutorAlias (const std::string &name, const std::string &target);  ; bool ReleasesGIL (CallContext *ctxt);  ; static std::regex s_fnptr (""\\‍(:*\\*&*\\‍)"");  ; CPYCPPYY_EXTERN bool Scope_Check (PyObject *pyobject);  ; CPYCPPYY_EXTERN bool Scope_CheckExact (PyObject *pyobject);  ; static bool ScopeFlagCheck (CPPInstance *self, CPPScope::EFlags flag);  ; static void ScopeFlagSet (CPPInstance *self, CPPScope::EFlags flag);  ; static PyObject * SelectAndForward (TemplateProxy *pytmpl, CPPOverload *pymeth, CPyCppyy_PyArgs_t args, size_t nargsf, PyObject *kwds, bool implicitOkay, bool use_targs, uint64_t sighash, std::vector< Utility::PyError_t > &errors);  ; CPYCPPYY_EXTERN bool Sequence_Check (PyObject *pyobject);  ; static void sync_templates (PyObject *pyclass, const std::string &mtCppName, const std::string &mtName);  ; static std::string targs2str (TemplateProxy *pytmpl);  ; static PyObject * TC2CppName (PyObject *pytc, const char *cpd, bool allow_voidp);  ; template<typename T > ; bool TemplateProxy_Check (T *object);  ; template<typename T > ; bool TemplateProxy_CheckExact (T *object);  ; TemplateProxy * TemplateProxy_New (const std::string &cppname, const std::string &pyname, PyObject *pyclass);  ; static PyObject * tpp_call (TemplateProxy *pytmpl, PyObject *args, PyObject *kwds);  ; static int tpp_clear (TemplateProxy *pytmpl);  ; static void tpp_dealloc (TemplateProxy *pytmpl);  ; static TemplateProxy * tpp_descr_get (TemplateProxy *pytmpl, PyObject *pyobj, PyObject *);  ; static PyObject * tpp_doc (TemplateProxy *pytmpl, void *);  ; static int tpp_doc_set (TemplateProxy *pytmpl, PyObject *val, void *);  ; static PyObject",MatchSource.WIKI,doc/master/namespaceCPyCppyy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceCPyCppyy.html
Performance,perform,performance,"mplateProxy *pytmpl, bool use_targs, uint64_t sighash, CPPOverload *pymeth);  ; bool UseStrictOwnership (CallContext *ctxt);  ; static void vectoriter_dealloc (vectoriterobject *vi);  ; static PyObject * vectoriter_iternext (vectoriterobject *vi);  . Variables; PyTypeObject CPPDataMember_Type;  ; PyTypeObject CPPExcInstance_Type;  ; PyTypeObject CPPInstance_Type;  ; PyTypeObject CPPOverload_Type;  ; PyTypeObject CPPScope_Type;  ; PyTypeObject CustomInstanceMethod_Type;  ; static PyMemberDef dm_members [];  ; static PyMethodDef dm_methods [];  ; static PyNumberMethods ep_as_number;  ; static PyMethodObject * free_list;  ; PyObject * gAbrtException = nullptr;  ; PyObject * gBusException = nullptr;  ; std::ostringstream gCapturedError;  ; static ConvFactories_t gConvFactories;  ; PyObject * gDefaultObject = nullptr;  ; bool gDictLookupActive = false;  ; dict_lookup_func gDictLookupOrg = 0;  ; static ExecFactories_t gExecFactories;  ; PyObject * gIllException = nullptr;  ; std::set< std::string > gIteratorTypes;  ; PyObject * gNullPtrObject = nullptr;  ; std::streambuf * gOldErrorBuffer = nullptr;  ; std::set< Cppyy::TCppType_t > gPinnedTypes;  ; PyObject * gPyTypeMap = nullptr;  ; PyObject * gSegvException = nullptr;  ; PyObject * gThisModule = nullptr;  ; PyTypeObject IndexIter_Type;  ; PyTypeObject InstanceArrayIter_Type;  ; PyTypeObject LowLevelView_Type;  ; static PyGetSetDef meta_getset [];  ; static PyMethodDef meta_methods [];  ; static int numfree = 0;  ; static PyNumberMethods op_as_number;  ; static PySequenceMethods op_as_sequence;  ; static PyGetSetDef op_getset [];  ; static PyMethodDef op_methods [];  ; PyTypeObject RefFloat_Type;  Custom ""builtins,"" detectable by type, for pass by ref and improved performance. ;  ; PyTypeObject RefInt_Type;  ; const int SMALL_ARGS_N = 8;  ; PyTypeObject TemplateProxy_Type;  ; static PyMappingMethods tpp_as_mapping;  ; static PyGetSetDef tpp_getset [];  ; static PyMethodDef tpp_methods [];  ; static PyGetSetDef tptc_getset",MatchSource.WIKI,doc/master/namespaceCPyCppyy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceCPyCppyy.html
Safety,detect,detectable,"mplateProxy *pytmpl, bool use_targs, uint64_t sighash, CPPOverload *pymeth);  ; bool UseStrictOwnership (CallContext *ctxt);  ; static void vectoriter_dealloc (vectoriterobject *vi);  ; static PyObject * vectoriter_iternext (vectoriterobject *vi);  . Variables; PyTypeObject CPPDataMember_Type;  ; PyTypeObject CPPExcInstance_Type;  ; PyTypeObject CPPInstance_Type;  ; PyTypeObject CPPOverload_Type;  ; PyTypeObject CPPScope_Type;  ; PyTypeObject CustomInstanceMethod_Type;  ; static PyMemberDef dm_members [];  ; static PyMethodDef dm_methods [];  ; static PyNumberMethods ep_as_number;  ; static PyMethodObject * free_list;  ; PyObject * gAbrtException = nullptr;  ; PyObject * gBusException = nullptr;  ; std::ostringstream gCapturedError;  ; static ConvFactories_t gConvFactories;  ; PyObject * gDefaultObject = nullptr;  ; bool gDictLookupActive = false;  ; dict_lookup_func gDictLookupOrg = 0;  ; static ExecFactories_t gExecFactories;  ; PyObject * gIllException = nullptr;  ; std::set< std::string > gIteratorTypes;  ; PyObject * gNullPtrObject = nullptr;  ; std::streambuf * gOldErrorBuffer = nullptr;  ; std::set< Cppyy::TCppType_t > gPinnedTypes;  ; PyObject * gPyTypeMap = nullptr;  ; PyObject * gSegvException = nullptr;  ; PyObject * gThisModule = nullptr;  ; PyTypeObject IndexIter_Type;  ; PyTypeObject InstanceArrayIter_Type;  ; PyTypeObject LowLevelView_Type;  ; static PyGetSetDef meta_getset [];  ; static PyMethodDef meta_methods [];  ; static int numfree = 0;  ; static PyNumberMethods op_as_number;  ; static PySequenceMethods op_as_sequence;  ; static PyGetSetDef op_getset [];  ; static PyMethodDef op_methods [];  ; PyTypeObject RefFloat_Type;  Custom ""builtins,"" detectable by type, for pass by ref and improved performance. ;  ; PyTypeObject RefInt_Type;  ; const int SMALL_ARGS_N = 8;  ; PyTypeObject TemplateProxy_Type;  ; static PyMappingMethods tpp_as_mapping;  ; static PyGetSetDef tpp_getset [];  ; static PyMethodDef tpp_methods [];  ; static PyGetSetDef tptc_getset",MatchSource.WIKI,doc/master/namespaceCPyCppyy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceCPyCppyy.html
Energy Efficiency,reduce,reduce,". ROOT: PyROOT Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions |; Variables ; PyROOT Namespace Reference. Classes; class  RegulatorCleanup;  A TObject-derived class to inject the memory regulation logic in the ROOT list of cleanups. More...;  ; class  RPyROOTApplication;  Interactive application for Python. More...;  ; class  TMemoryRegulator;  Manages TObject-derived objects created in a PyROOT application. More...;  . Functions; PyObject * AddCPPInstancePickling (PyObject *self, PyObject *args);  Set reduce attribute for CPPInstance objects. ;  ; PyObject * AddPrettyPrintingPyz (PyObject *self, PyObject *args);  Add pretty printing pythonization. ;  ; PyObject * AddTClassDynamicCastPyz (PyObject *self, PyObject *args);  Add pythonization for TClass::DynamicCast. ;  ; PyObject * AddTObjectEqNePyz (PyObject *self, PyObject *args);  Add pythonization for equality and inequality operators in TObject. ;  ; PyObject * BranchPyz (PyObject *self, PyObject *args);  Add pythonization for TTree::Branch. ;  ; PyObject * ClearProxiedObjects (PyObject *self, PyObject *args);  ; PyObject * CPPInstanceExpand (PyObject *self, PyObject *args);  Deserialize pickled objects. ;  ; PyObject * GetBranchAttr (PyObject *self, PyObject *args);  ; void Init ();  ; PyObject * RegisterConverterAlias (PyObject *, PyObject *args);  ; PyObject * RegisterExecutorAlias (PyObject *, PyObject *args);  . Variables; PyObject * gRootModule = nullptr;  . Function Documentation. ◆ AddCPPInstancePickling(). PyObject * PyROOT::AddCPPInstancePickling ; (; PyObject * ; self, . PyObject * ; args . ). Set reduce attribute for CPPInstance objects. ; Parameters. [in]selfAlways null, since this is a module function. ; [in]argsPointer to a Python tuple object containing the arguments received from Python. The C++ function op_reduce defined above is wrapped in a Python method so that it can be injected in CPPInstance ; Definition at line 123 ",MatchSource.WIKI,doc/master/namespacePyROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespacePyROOT.html
Integrability,inject,inject,". ROOT: PyROOT Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions |; Variables ; PyROOT Namespace Reference. Classes; class  RegulatorCleanup;  A TObject-derived class to inject the memory regulation logic in the ROOT list of cleanups. More...;  ; class  RPyROOTApplication;  Interactive application for Python. More...;  ; class  TMemoryRegulator;  Manages TObject-derived objects created in a PyROOT application. More...;  . Functions; PyObject * AddCPPInstancePickling (PyObject *self, PyObject *args);  Set reduce attribute for CPPInstance objects. ;  ; PyObject * AddPrettyPrintingPyz (PyObject *self, PyObject *args);  Add pretty printing pythonization. ;  ; PyObject * AddTClassDynamicCastPyz (PyObject *self, PyObject *args);  Add pythonization for TClass::DynamicCast. ;  ; PyObject * AddTObjectEqNePyz (PyObject *self, PyObject *args);  Add pythonization for equality and inequality operators in TObject. ;  ; PyObject * BranchPyz (PyObject *self, PyObject *args);  Add pythonization for TTree::Branch. ;  ; PyObject * ClearProxiedObjects (PyObject *self, PyObject *args);  ; PyObject * CPPInstanceExpand (PyObject *self, PyObject *args);  Deserialize pickled objects. ;  ; PyObject * GetBranchAttr (PyObject *self, PyObject *args);  ; void Init ();  ; PyObject * RegisterConverterAlias (PyObject *, PyObject *args);  ; PyObject * RegisterExecutorAlias (PyObject *, PyObject *args);  . Variables; PyObject * gRootModule = nullptr;  . Function Documentation. ◆ AddCPPInstancePickling(). PyObject * PyROOT::AddCPPInstancePickling ; (; PyObject * ; self, . PyObject * ; args . ). Set reduce attribute for CPPInstance objects. ; Parameters. [in]selfAlways null, since this is a module function. ; [in]argsPointer to a Python tuple object containing the arguments received from Python. The C++ function op_reduce defined above is wrapped in a Python method so that it can be injected in CPPInstance ; Definition at line 123 ",MatchSource.WIKI,doc/master/namespacePyROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespacePyROOT.html
Security,inject,inject,". ROOT: PyROOT Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions |; Variables ; PyROOT Namespace Reference. Classes; class  RegulatorCleanup;  A TObject-derived class to inject the memory regulation logic in the ROOT list of cleanups. More...;  ; class  RPyROOTApplication;  Interactive application for Python. More...;  ; class  TMemoryRegulator;  Manages TObject-derived objects created in a PyROOT application. More...;  . Functions; PyObject * AddCPPInstancePickling (PyObject *self, PyObject *args);  Set reduce attribute for CPPInstance objects. ;  ; PyObject * AddPrettyPrintingPyz (PyObject *self, PyObject *args);  Add pretty printing pythonization. ;  ; PyObject * AddTClassDynamicCastPyz (PyObject *self, PyObject *args);  Add pythonization for TClass::DynamicCast. ;  ; PyObject * AddTObjectEqNePyz (PyObject *self, PyObject *args);  Add pythonization for equality and inequality operators in TObject. ;  ; PyObject * BranchPyz (PyObject *self, PyObject *args);  Add pythonization for TTree::Branch. ;  ; PyObject * ClearProxiedObjects (PyObject *self, PyObject *args);  ; PyObject * CPPInstanceExpand (PyObject *self, PyObject *args);  Deserialize pickled objects. ;  ; PyObject * GetBranchAttr (PyObject *self, PyObject *args);  ; void Init ();  ; PyObject * RegisterConverterAlias (PyObject *, PyObject *args);  ; PyObject * RegisterExecutorAlias (PyObject *, PyObject *args);  . Variables; PyObject * gRootModule = nullptr;  . Function Documentation. ◆ AddCPPInstancePickling(). PyObject * PyROOT::AddCPPInstancePickling ; (; PyObject * ; self, . PyObject * ; args . ). Set reduce attribute for CPPInstance objects. ; Parameters. [in]selfAlways null, since this is a module function. ; [in]argsPointer to a Python tuple object containing the arguments received from Python. The C++ function op_reduce defined above is wrapped in a Python method so that it can be injected in CPPInstance ; Definition at line 123 ",MatchSource.WIKI,doc/master/namespacePyROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespacePyROOT.html
Testability,log,logic,". ROOT: PyROOT Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions |; Variables ; PyROOT Namespace Reference. Classes; class  RegulatorCleanup;  A TObject-derived class to inject the memory regulation logic in the ROOT list of cleanups. More...;  ; class  RPyROOTApplication;  Interactive application for Python. More...;  ; class  TMemoryRegulator;  Manages TObject-derived objects created in a PyROOT application. More...;  . Functions; PyObject * AddCPPInstancePickling (PyObject *self, PyObject *args);  Set reduce attribute for CPPInstance objects. ;  ; PyObject * AddPrettyPrintingPyz (PyObject *self, PyObject *args);  Add pretty printing pythonization. ;  ; PyObject * AddTClassDynamicCastPyz (PyObject *self, PyObject *args);  Add pythonization for TClass::DynamicCast. ;  ; PyObject * AddTObjectEqNePyz (PyObject *self, PyObject *args);  Add pythonization for equality and inequality operators in TObject. ;  ; PyObject * BranchPyz (PyObject *self, PyObject *args);  Add pythonization for TTree::Branch. ;  ; PyObject * ClearProxiedObjects (PyObject *self, PyObject *args);  ; PyObject * CPPInstanceExpand (PyObject *self, PyObject *args);  Deserialize pickled objects. ;  ; PyObject * GetBranchAttr (PyObject *self, PyObject *args);  ; void Init ();  ; PyObject * RegisterConverterAlias (PyObject *, PyObject *args);  ; PyObject * RegisterExecutorAlias (PyObject *, PyObject *args);  . Variables; PyObject * gRootModule = nullptr;  . Function Documentation. ◆ AddCPPInstancePickling(). PyObject * PyROOT::AddCPPInstancePickling ; (; PyObject * ; self, . PyObject * ; args . ). Set reduce attribute for CPPInstance objects. ; Parameters. [in]selfAlways null, since this is a module function. ; [in]argsPointer to a Python tuple object containing the arguments received from Python. The C++ function op_reduce defined above is wrapped in a Python method so that it can be injected in CPPInstance ; Definition at line 123 ",MatchSource.WIKI,doc/master/namespacePyROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespacePyROOT.html
Usability,user-friendly,user-friendly,"Alias (PyObject *, PyObject *args);  . Variables; PyObject * gRootModule = nullptr;  . Function Documentation. ◆ AddCPPInstancePickling(). PyObject * PyROOT::AddCPPInstancePickling ; (; PyObject * ; self, . PyObject * ; args . ). Set reduce attribute for CPPInstance objects. ; Parameters. [in]selfAlways null, since this is a module function. ; [in]argsPointer to a Python tuple object containing the arguments received from Python. The C++ function op_reduce defined above is wrapped in a Python method so that it can be injected in CPPInstance ; Definition at line 123 of file CPPInstancePyz.cxx. ◆ AddPrettyPrintingPyz(). PyObject * PyROOT::AddPrettyPrintingPyz ; (; PyObject * ; self, . PyObject * ; args . ). Add pretty printing pythonization. ; Parameters. [in]selfAlways null, since this is a module function. ; [in]argsPointer to a Python tuple object containing the arguments received from Python. This function adds the following pythonizations to print the object more user-friendly than cppyy by using the output of cling::printValue as the return value of the special method str. ; Definition at line 119 of file GenericPyz.cxx. ◆ AddTClassDynamicCastPyz(). PyObject * PyROOT::AddTClassDynamicCastPyz ; (; PyObject * ; self, . PyObject * ; args . ). Add pythonization for TClass::DynamicCast. ; Parameters. [in]selfAlways null, since this is a module function. ; [in]argsPointer to a Python tuple object containing the arguments received from Python. TClass::DynamicCast returns a void* that the user still has to cast (it will have the proper offset, though). Fix this by providing the requested binding if the cast succeeded. ; Definition at line 68 of file TClassPyz.cxx. ◆ AddTObjectEqNePyz(). PyObject * PyROOT::AddTObjectEqNePyz ; (; PyObject * ; self, . PyObject * ; args . ). Add pythonization for equality and inequality operators in TObject. ; Parameters. [in]selfAlways null, since this is a module function. ; [in]argsPointer to a Python tuple object containing the argument",MatchSource.WIKI,doc/master/namespacePyROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespacePyROOT.html
Integrability,wrap,wraps,"unction3Binding.h. ◆ CFUNCD4DDDB. typedef double(* RooFit::CFUNCD4DDDB) (double, double, double, bool). Definition at line 32 of file RooCFunction4Binding.h. ◆ CFUNCD4DDDD. typedef double(* RooFit::CFUNCD4DDDD) (double, double, double, double). Definition at line 30 of file RooCFunction4Binding.h. ◆ CFUNCD4DDDI. typedef double(* RooFit::CFUNCD4DDDI) (double, double, double, Int_t). Definition at line 31 of file RooCFunction4Binding.h. ◆ ModelConfig. using RooFit::ModelConfig = typedef RooStats::ModelConfig. Definition at line 374 of file ModelConfig.h. ◆ OwningPtr. template<typename T > . using RooFit::OwningPtr = typedef T *. An alias for raw pointers for indicating that the return type of a RooFit function is an owning pointer that must be deleted by the caller. ; For RooFit developers, it can be very useful to make this an alias to std::unique_ptr<T>, in order to check that your code has no memory problems. Changing this alias is equivalent to forcing all code immediately wraps the result of functions returning a RooFit::OwningPtr<T> in a std::unique_ptr<T>. ; Definition at line 35 of file Config.h. ◆ SuperFloat. typedef double RooFit::SuperFloat. Definition at line 29 of file Floats.h. ◆ SuperFloatPrecision. typedef std::numeric_limits<double> RooFit::SuperFloatPrecision. Definition at line 30 of file Floats.h. Enumeration Type Documentation. ◆ MPSplit. enum RooFit::MPSplit. EnumeratorBulkPartition ; Interleave ; SimComponents ; Hybrid . Definition at line 65 of file RooGlobalFunc.h. ◆ MsgLevel. enum RooFit::MsgLevel. Verbosity level for RooMsgService::StreamConfig in RooMsgService. . EnumeratorDEBUG ; INFO ; PROGRESS ; WARNING ; ERROR ; FATAL . Definition at line 60 of file RooGlobalFunc.h. ◆ MsgTopic. enum RooFit::MsgTopic. Topics for a RooMsgService::StreamConfig in RooMsgService. . EnumeratorGeneration ; Minimization ; Plotting ; Fitting ; Integration ; LinkStateMgmt ; Eval ; Caching ; Optimization ; ObjectHandling ; InputArguments ; Tracing ; Contents ; Dat",MatchSource.WIKI,doc/master/namespaceRooFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html
Modifiability,enhance,enhance,". ROOT: RooFit Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions ; RooFit Namespace Reference. The namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or other types of arguments). ; More... Namespaces; namespace  Detail;  ; namespace  Experimental;  ; namespace  JSONIO;  ; namespace  MultiProcess;  ; namespace  TestStatistics;  Namespace for new RooFit test statistic calculation. ;  . Classes; class  EvalBackend;  ; class  EvalContext;  ; class  Evaluator;  Evaluates a RooAbsReal object in other ways than recursive graph traversal. More...;  ; struct  NodeInfo;  A struct used by the Evaluator to store information on the RooAbsArgs in the computation graph. More...;  ; struct  UniqueId;  A UniqueId can be added as a class member to enhance any class with a unique identifier for each instantiated object. More...;  . Typedefs; typedef double(* CFUNCD1D) (double);  ; typedef double(* CFUNCD1I) (Int_t);  ; typedef double(* CFUNCD2DD) (double, double);  ; typedef double(* CFUNCD2DI) (double, Int_t);  ; typedef double(* CFUNCD2ID) (Int_t, double);  ; typedef double(* CFUNCD2II) (Int_t, Int_t);  ; typedef double(* CFUNCD2UD) (UInt_t, double);  ; typedef double(* CFUNCD3DDB) (double, double, bool);  ; typedef double(* CFUNCD3DDD) (double, double, double);  ; typedef double(* CFUNCD3DII) (double, Int_t, Int_t);  ; typedef double(* CFUNCD3UDD) (UInt_t, double, double);  ; typedef double(* CFUNCD3UDU) (UInt_t, double, UInt_t);  ; typedef double(* CFUNCD3UUD) (UInt_t, UInt_t, double);  ; typedef double(* CFUNCD4DDDB) (double, double, double, bool);  ; typedef double(* CFUNCD4DDDD) (double, double, double, double);  ; typedef double(* CFUNCD4DDDI) (double, double, double, Int_t);  ; using ModelConfig = RooStats::ModelConfig;  ; template<typename T > ; using OwningPtr = T *;  An alias for raw pointers for indicating that the retur",MatchSource.WIKI,doc/master/namespaceRooFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html
Testability,test,test,". ROOT: RooFit Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions ; RooFit Namespace Reference. The namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or other types of arguments). ; More... Namespaces; namespace  Detail;  ; namespace  Experimental;  ; namespace  JSONIO;  ; namespace  MultiProcess;  ; namespace  TestStatistics;  Namespace for new RooFit test statistic calculation. ;  . Classes; class  EvalBackend;  ; class  EvalContext;  ; class  Evaluator;  Evaluates a RooAbsReal object in other ways than recursive graph traversal. More...;  ; struct  NodeInfo;  A struct used by the Evaluator to store information on the RooAbsArgs in the computation graph. More...;  ; struct  UniqueId;  A UniqueId can be added as a class member to enhance any class with a unique identifier for each instantiated object. More...;  . Typedefs; typedef double(* CFUNCD1D) (double);  ; typedef double(* CFUNCD1I) (Int_t);  ; typedef double(* CFUNCD2DD) (double, double);  ; typedef double(* CFUNCD2DI) (double, Int_t);  ; typedef double(* CFUNCD2ID) (Int_t, double);  ; typedef double(* CFUNCD2II) (Int_t, Int_t);  ; typedef double(* CFUNCD2UD) (UInt_t, double);  ; typedef double(* CFUNCD3DDB) (double, double, bool);  ; typedef double(* CFUNCD3DDD) (double, double, double);  ; typedef double(* CFUNCD3DII) (double, Int_t, Int_t);  ; typedef double(* CFUNCD3UDD) (UInt_t, double, double);  ; typedef double(* CFUNCD3UDU) (UInt_t, double, UInt_t);  ; typedef double(* CFUNCD3UUD) (UInt_t, UInt_t, double);  ; typedef double(* CFUNCD4DDDB) (double, double, double, bool);  ; typedef double(* CFUNCD4DDDD) (double, double, double, double);  ; typedef double(* CFUNCD4DDDI) (double, double, double, Int_t);  ; using ModelConfig = RooStats::ModelConfig;  ; template<typename T > ; using OwningPtr = T *;  An alias for raw pointers for indicating that the retur",MatchSource.WIKI,doc/master/namespaceRooFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html
Usability,guid,guides," Z=1);  ; RooCmdArg VisualizeError (const RooFitResult &fitres, const RooArgSet &param, double Z=1, bool linearMethod=true);  ; RooCmdArg VisualizeError (const RooFitResult &fitres, double Z=1, bool linearMethod=true);  ; RooCmdArg VLines ();  ; RooCmdArg Warnings (bool flag=true);  ; RooCmdArg Weight (double wgt);  ; RooCmdArg WeightVar (const char *name=""weight"", bool reinterpretAsWeight=false);  ; RooCmdArg WeightVar (const RooRealVar &arg, bool reinterpretAsWeight=false);  ; RooCmdArg What (const char *str);  ; RooCmdArg XErrorSize (double width);  ; RooCmdArg YVar (const RooAbsRealLValue &var, const RooCmdArg &arg={});  ; RooCmdArg ZVar (const RooAbsRealLValue &var, const RooCmdArg &arg={});  . Detailed Description; The namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or other types of arguments). ; These switches are documented with the relevant functions, e.g. RooAbsPdf::fitTo(). For an introduction to RooFit (not the namespace), check the user's guides, courses or the RooFit chapter of the Manual. ; Typedef Documentation. ◆ CFUNCD1D. typedef double(* RooFit::CFUNCD1D) (double). Definition at line 31 of file RooCFunction1Binding.h. ◆ CFUNCD1I. typedef double(* RooFit::CFUNCD1I) (Int_t). Definition at line 32 of file RooCFunction1Binding.h. ◆ CFUNCD2DD. typedef double(* RooFit::CFUNCD2DD) (double, double). Definition at line 30 of file RooCFunction2Binding.h. ◆ CFUNCD2DI. typedef double(* RooFit::CFUNCD2DI) (double, Int_t). Definition at line 33 of file RooCFunction2Binding.h. ◆ CFUNCD2ID. typedef double(* RooFit::CFUNCD2ID) (Int_t, double). Definition at line 31 of file RooCFunction2Binding.h. ◆ CFUNCD2II. typedef double(* RooFit::CFUNCD2II) (Int_t, Int_t). Definition at line 34 of file RooCFunction2Binding.h. ◆ CFUNCD2UD. typedef double(* RooFit::CFUNCD2UD) (UInt_t, double). Definition at line 32 of file RooCFunction2Binding.h. ◆ CFUNCD3DDB. typedef double(* RooFit::CFUNCD3DDB) (double, double, bool). Definition at lin",MatchSource.WIKI,doc/master/namespaceRooFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit.html
Availability,avail,available,"east one coefficient. ;  ; double bernsteinIntegral (double xlo, double xhi, double xmin, double xmax, double *coefs, int nCoefs);  ; double bifurGauss (double x, double mean, double sigmaL, double sigmaR);  ; double bifurGaussIntegral (double xMin, double xMax, double mean, double sigmaL, double sigmaR);  ; double binomial (int n, int k);  Calculates the binomial coefficient n over k. ;  ; double cbShape (double m, double m0, double sigma, double alpha, double n);  ; double cbShapeIntegral (double mMin, double mMax, double m0, double sigma, double alpha, double n);  ; double chebychev (double *coeffs, unsigned int nCoeffs, double x_in, double xMin, double xMax);  ; double chebychevIntegral (double const *coeffs, unsigned int nCoeffs, double xMin, double xMax, double xMinFull, double xMaxFull);  ; double constraintSum (double const *comp, unsigned int compSize);  ; double efficiency (double effFuncVal, int catIndex, int sigCatIndex);  ; double effProd (double eff, double pdf);  ; double exponentialIntegral (double xMin, double xMax, double constant);  ; double fast_fma (double x, double y, double z) noexcept;  use fast FMA if available, fall back to normal arithmetic if not ;  ; double flexibleInterp (unsigned int code, double const *params, unsigned int n, double const *low, double const *high, double boundary, double nominal, int doCutoff);  ; double flexibleInterpSingle (unsigned int code, double low, double high, double boundary, double nominal, double paramVal, double res);  ; double gaussian (double x, double mean, double sigma);  Function to evaluate an un-normalized RooGaussian. ;  ; double gaussianIntegral (double xMin, double xMax, double mean, double sigma);  Function to calculate the integral of an un-normalized RooGaussian over x. ;  ; unsigned int getUniformBinning (double low, double high, double val, unsigned int numBins);  ; double interpolate1d (double low, double high, double val, unsigned int numBins, double const *vals);  ; double landau (double ",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
Deployability,integrat,integrate,"low, . double const * ; high, . double ; boundary, . double ; nominal, . int ; doCutoff . ). inline . Definition at line 320 of file MathFuncs.h. ◆ flexibleInterpSingle(). double RooFit::Detail::MathFuncs::flexibleInterpSingle ; (; unsigned int ; code, . double ; low, . double ; high, . double ; boundary, . double ; nominal, . double ; paramVal, . double ; res . ). inline . Definition at line 213 of file MathFuncs.h. ◆ gaussian(). double RooFit::Detail::MathFuncs::gaussian ; (; double ; x, . double ; mean, . double ; sigma . ). inline . Function to evaluate an un-normalized RooGaussian. ; Definition at line 86 of file MathFuncs.h. ◆ gaussianIntegral(). double RooFit::Detail::MathFuncs::gaussianIntegral ; (; double ; xMin, . double ; xMax, . double ; mean, . double ; sigma . ). inline . Function to calculate the integral of an un-normalized RooGaussian over x. ; To calculate the integral over mean, just interchange the respective values of x and mean. Parameters. xMinMinimum value of variable to integrate wrt. ; xMaxMaximum value of of variable to integrate wrt. ; meanMean. ; sigmaSigma. . ReturnsThe integral of an un-normalized RooGaussian over the value in x. ; Definition at line 418 of file MathFuncs.h. ◆ getUniformBinning(). unsigned int RooFit::Detail::MathFuncs::getUniformBinning ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins . ). inline . Definition at line 172 of file MathFuncs.h. ◆ interpolate1d(). double RooFit::Detail::MathFuncs::interpolate1d ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins, . double const * ; vals . ). inline . Definition at line 178 of file MathFuncs.h. ◆ landau(). double RooFit::Detail::MathFuncs::landau ; (; double ; x, . double ; mu, . double ; sigma . ). inline . Definition at line 331 of file MathFuncs.h. ◆ logNormal(). double RooFit::Detail::MathFuncs::logNormal ; (; double ; x, . double ; k, . double ; m0 . ). inline . Definition at line 338 of file MathFuncs.h. ◆ logNorma",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
Integrability,integrat,integrate,"low, . double const * ; high, . double ; boundary, . double ; nominal, . int ; doCutoff . ). inline . Definition at line 320 of file MathFuncs.h. ◆ flexibleInterpSingle(). double RooFit::Detail::MathFuncs::flexibleInterpSingle ; (; unsigned int ; code, . double ; low, . double ; high, . double ; boundary, . double ; nominal, . double ; paramVal, . double ; res . ). inline . Definition at line 213 of file MathFuncs.h. ◆ gaussian(). double RooFit::Detail::MathFuncs::gaussian ; (; double ; x, . double ; mean, . double ; sigma . ). inline . Function to evaluate an un-normalized RooGaussian. ; Definition at line 86 of file MathFuncs.h. ◆ gaussianIntegral(). double RooFit::Detail::MathFuncs::gaussianIntegral ; (; double ; xMin, . double ; xMax, . double ; mean, . double ; sigma . ). inline . Function to calculate the integral of an un-normalized RooGaussian over x. ; To calculate the integral over mean, just interchange the respective values of x and mean. Parameters. xMinMinimum value of variable to integrate wrt. ; xMaxMaximum value of of variable to integrate wrt. ; meanMean. ; sigmaSigma. . ReturnsThe integral of an un-normalized RooGaussian over the value in x. ; Definition at line 418 of file MathFuncs.h. ◆ getUniformBinning(). unsigned int RooFit::Detail::MathFuncs::getUniformBinning ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins . ). inline . Definition at line 172 of file MathFuncs.h. ◆ interpolate1d(). double RooFit::Detail::MathFuncs::interpolate1d ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins, . double const * ; vals . ). inline . Definition at line 178 of file MathFuncs.h. ◆ landau(). double RooFit::Detail::MathFuncs::landau ; (; double ; x, . double ; mu, . double ; sigma . ). inline . Definition at line 331 of file MathFuncs.h. ◆ logNormal(). double RooFit::Detail::MathFuncs::logNormal ; (; double ; x, . double ; k, . double ; m0 . ). inline . Definition at line 338 of file MathFuncs.h. ◆ logNorma",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
Modifiability,flexible,flexibleInterp,"east one coefficient. ;  ; double bernsteinIntegral (double xlo, double xhi, double xmin, double xmax, double *coefs, int nCoefs);  ; double bifurGauss (double x, double mean, double sigmaL, double sigmaR);  ; double bifurGaussIntegral (double xMin, double xMax, double mean, double sigmaL, double sigmaR);  ; double binomial (int n, int k);  Calculates the binomial coefficient n over k. ;  ; double cbShape (double m, double m0, double sigma, double alpha, double n);  ; double cbShapeIntegral (double mMin, double mMax, double m0, double sigma, double alpha, double n);  ; double chebychev (double *coeffs, unsigned int nCoeffs, double x_in, double xMin, double xMax);  ; double chebychevIntegral (double const *coeffs, unsigned int nCoeffs, double xMin, double xMax, double xMinFull, double xMaxFull);  ; double constraintSum (double const *comp, unsigned int compSize);  ; double efficiency (double effFuncVal, int catIndex, int sigCatIndex);  ; double effProd (double eff, double pdf);  ; double exponentialIntegral (double xMin, double xMax, double constant);  ; double fast_fma (double x, double y, double z) noexcept;  use fast FMA if available, fall back to normal arithmetic if not ;  ; double flexibleInterp (unsigned int code, double const *params, unsigned int n, double const *low, double const *high, double boundary, double nominal, int doCutoff);  ; double flexibleInterpSingle (unsigned int code, double low, double high, double boundary, double nominal, double paramVal, double res);  ; double gaussian (double x, double mean, double sigma);  Function to evaluate an un-normalized RooGaussian. ;  ; double gaussianIntegral (double xMin, double xMax, double mean, double sigma);  Function to calculate the integral of an un-normalized RooGaussian over x. ;  ; unsigned int getUniformBinning (double low, double high, double val, unsigned int numBins);  ; double interpolate1d (double low, double high, double val, unsigned int numBins, double const *vals);  ; double landau (double ",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
Testability,log,logNormal," *params, unsigned int n, double const *low, double const *high, double boundary, double nominal, int doCutoff);  ; double flexibleInterpSingle (unsigned int code, double low, double high, double boundary, double nominal, double paramVal, double res);  ; double gaussian (double x, double mean, double sigma);  Function to evaluate an un-normalized RooGaussian. ;  ; double gaussianIntegral (double xMin, double xMax, double mean, double sigma);  Function to calculate the integral of an un-normalized RooGaussian over x. ;  ; unsigned int getUniformBinning (double low, double high, double val, unsigned int numBins);  ; double interpolate1d (double low, double high, double val, unsigned int numBins, double const *vals);  ; double landau (double x, double mu, double sigma);  ; double logNormal (double x, double k, double m0);  ; double logNormalIntegral (double xMin, double xMax, double m0, double k);  ; double logNormalIntegralStandard (double xMin, double xMax, double mu, double sigma);  ; double logNormalStandard (double x, double sigma, double mu);  ; double nll (double pdf, double weight, int binnedL, int doBinOffset);  ; double poisson (double x, double par);  ; double poissonIntegral (int code, double mu, double x, double integrandMin, double integrandMax, unsigned int protectNegative);  ; template<bool pdfMode = false> ; double polynomial (double const *coeffs, int nCoeffs, int lowestOrder, double x);  In pdfMode, a coefficient for the constant term of 1.0 is implied if lowestOrder > 0. ;  ; template<bool pdfMode = false> ; double polynomialIntegral (double const *coeffs, int nCoeffs, int lowestOrder, double xMin, double xMax);  In pdfMode, a coefficient for the constant term of 1.0 is implied if lowestOrder > 0. ;  ; double product (double const *factors, std::size_t nFactors);  ; double ratio (double numerator, double denominator);  ; double recursiveFraction (double *a, unsigned int n);  . Function Documentation. ◆ approxErf(). double RooFit::Detail::MathFuncs::a",MatchSource.WIKI,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html
Availability,error,error,"ONENTIALTOYDISTRIBUTION; };  . Functions; double AsimovSignificance (double s, double b, double sigma_b=0.0);  Compute the Asimov Median significance for a Poisson process with s = expected number of signal events, b = expected number of background events and optionally sigma_b = expected uncertainty of background events. ;  ; BranchStore * CreateBranchStore (const RooDataSet &data);  ; void FactorizePdf (const RooArgSet &observables, RooAbsPdf &pdf, RooArgList &obsTerms, RooArgList &constraints);  ; void FactorizePdf (RooStats::ModelConfig &model, RooAbsPdf &pdf, RooArgList &obsTerms, RooArgList &constraints);  ; void FillTree (TTree &myTree, const RooDataSet &data);  ; TTree * GetAsTTree (TString name, TString desc, const RooDataSet &data);  Create a TTree with the given name and description. All RooRealVars in the RooDataSet are represented as branches that contain values of type double. ;  ; RooStatsConfig & GetGlobalRooStatsConfig ();  Retrieve the config object which can be used to set flags for things like offsetting the likelihood or using the error wall for the minimiser. ;  ; bool IsNLLOffset ();  function returning if the flag to check if the flag to use NLLOffset is set ;  ; RooAbsPdf * MakeNuisancePdf (const RooStats::ModelConfig &model, const char *name);  ; RooAbsPdf * MakeNuisancePdf (RooAbsPdf &pdf, const RooArgSet &observables, const char *name);  extract constraint terms from pdf ;  ; RooWorkspace * MakeReducedWorkspace (RooWorkspace *oldWS, const char *newName, bool copySnapshots, const char *mcname, const char *newmcname, bool copyData=true);  function that clones a workspace, copying all needed components and discarding all others ;  ; RooAbsPdf * MakeUnconstrainedPdf (const RooStats::ModelConfig &model, const char *name=nullptr);  ; RooAbsPdf * MakeUnconstrainedPdf (RooAbsPdf &pdf, const RooArgSet &observables, const char *name=nullptr);  remove constraints from pdf and return the unconstrained pdf ;  ; void PrintListContent (const RooArgList ",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
Deployability,configurat,configuration,"ntation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method. More...;  ; class  BernsteinCorrection;  BernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term. More...;  ; class  BranchStore;  ; class  CombinedCalculator;  CombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. More...;  ; class  ConfidenceBelt;  ConfidenceBelt is a concrete implementation of the ConfInterval interface. More...;  ; class  ConfInterval;  ConfInterval is an interface class for a generic interval in the RooStats framework. More...;  ; class  DebuggingSampler;  ; class  DebuggingTestStat;  ; class  DetailedOutputAggregator;  This class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations. More...;  ; class  FeldmanCousins;  The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction. More...;  ; class  FrequentistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. More...;  ; class  HybridCalculator;  Same purpose as HybridCalculatorOriginal, but different implementation. More...;  ; class  HybridPlot;  This class provides the plots for the result of a study performed with the HybridCalculatorOriginal class. More...;  ; class  HybridResult;  Class encapsulating the result of the HybridCalculatorOriginal. More...;  ; class  HypoTestCalculator;  HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. More...;  ; class  HypoTestCalculatorGeneric;  Common base class for the Hypothesis Test Calcula",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
Integrability,interface,interface,". ROOT: RooStats Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Enumerations |; Functions |; Variables ; RooStats Namespace ReferenceRooFit » RooStats » HistFactory | RooFit » RooStats. Namespace for the RooStats classes. ; More... Namespaces; namespace  HistFactory;  ; namespace  NumberCountingUtils;  ; namespace  ROOTDict;  . Classes; class  AcceptanceRegion;  ; class  AsymptoticCalculator;  Hypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio. More...;  ; class  BayesianCalculator;  BayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method. More...;  ; class  BernsteinCorrection;  BernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term. More...;  ; class  BranchStore;  ; class  CombinedCalculator;  CombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. More...;  ; class  ConfidenceBelt;  ConfidenceBelt is a concrete implementation of the ConfInterval interface. More...;  ; class  ConfInterval;  ConfInterval is an interface class for a generic interval in the RooStats framework. More...;  ; class  DebuggingSampler;  ; class  DebuggingTestStat;  ; class  DetailedOutputAggregator;  This class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations. More...;  ; class  FeldmanCousins;  The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction. More...;  ; class  FrequentistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configu",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
Modifiability,config,configuration,"ntation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method. More...;  ; class  BernsteinCorrection;  BernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term. More...;  ; class  BranchStore;  ; class  CombinedCalculator;  CombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. More...;  ; class  ConfidenceBelt;  ConfidenceBelt is a concrete implementation of the ConfInterval interface. More...;  ; class  ConfInterval;  ConfInterval is an interface class for a generic interval in the RooStats framework. More...;  ; class  DebuggingSampler;  ; class  DebuggingTestStat;  ; class  DetailedOutputAggregator;  This class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations. More...;  ; class  FeldmanCousins;  The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction. More...;  ; class  FrequentistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. More...;  ; class  HybridCalculator;  Same purpose as HybridCalculatorOriginal, but different implementation. More...;  ; class  HybridPlot;  This class provides the plots for the result of a study performed with the HybridCalculatorOriginal class. More...;  ; class  HybridResult;  Class encapsulating the result of the HybridCalculatorOriginal. More...;  ; class  HypoTestCalculator;  HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. More...;  ; class  HypoTestCalculatorGeneric;  Common base class for the Hypothesis Test Calcula",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
Performance,perform,performed,"e class for a generic interval in the RooStats framework. More...;  ; class  DebuggingSampler;  ; class  DebuggingTestStat;  ; class  DetailedOutputAggregator;  This class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations. More...;  ; class  FeldmanCousins;  The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction. More...;  ; class  FrequentistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. More...;  ; class  HybridCalculator;  Same purpose as HybridCalculatorOriginal, but different implementation. More...;  ; class  HybridPlot;  This class provides the plots for the result of a study performed with the HybridCalculatorOriginal class. More...;  ; class  HybridResult;  Class encapsulating the result of the HybridCalculatorOriginal. More...;  ; class  HypoTestCalculator;  HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. More...;  ; class  HypoTestCalculatorGeneric;  Common base class for the Hypothesis Test Calculators. More...;  ; class  HypoTestInverter;  A class for performing a hypothesis test inversion by scanning the hypothesis test results of a HypoTestCalculator for various values of the parameter of interest. More...;  ; class  HypoTestInverterPlot;  Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. More...;  ; class  HypoTestInverterResult;  HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval. More...;  ; class  HypoTestPlot;  This class provides the plots for the result of a study performed with any of the Hyp",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
Testability,test,test,"steinCorrection;  BernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term. More...;  ; class  BranchStore;  ; class  CombinedCalculator;  CombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals. More...;  ; class  ConfidenceBelt;  ConfidenceBelt is a concrete implementation of the ConfInterval interface. More...;  ; class  ConfInterval;  ConfInterval is an interface class for a generic interval in the RooStats framework. More...;  ; class  DebuggingSampler;  ; class  DebuggingTestStat;  ; class  DetailedOutputAggregator;  This class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations. More...;  ; class  FeldmanCousins;  The FeldmanCousins class (like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction. More...;  ; class  FrequentistCalculator;  Does a frequentist hypothesis test. More...;  ; class  Heaviside;  Represents the Heaviside function. More...;  ; class  HLFactory;  HLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool. More...;  ; class  HybridCalculator;  Same purpose as HybridCalculatorOriginal, but different implementation. More...;  ; class  HybridPlot;  This class provides the plots for the result of a study performed with the HybridCalculatorOriginal class. More...;  ; class  HybridResult;  Class encapsulating the result of the HybridCalculatorOriginal. More...;  ; class  HypoTestCalculator;  HypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults. More...;  ; class  HypoTestCalculatorGeneric;  Common base class for the Hypothesis Test Calculators. More...;  ; class  HypoTestInverter;  A class for performing a hypothesis test inversion by scanning the hypothesis test re",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
Usability,simpl,simple,"nning the hypothesis test results of a HypoTestCalculator for various values of the parameter of interest. More...;  ; class  HypoTestInverterPlot;  Class to plot a HypoTestInverterResult, the output of the HypoTestInverter calculator. More...;  ; class  HypoTestInverterResult;  HypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval. More...;  ; class  HypoTestPlot;  This class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.g. More...;  ; class  HypoTestResult;  HypoTestResult is a base class for results from hypothesis tests. More...;  ; class  IntervalCalculator;  IntervalCalculator is an interface class for a tools which produce RooStats ConfIntervals. More...;  ; struct  LikelihoodFunction;  ; class  LikelihoodInterval;  LikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  LikelihoodIntervalPlot;  This class provides simple and straightforward utilities to plot a LikelihoodInterval object. More...;  ; class  MarkovChain;  Stores the steps in a Markov Chain of points. More...;  ; class  MaxLikelihoodEstimateTestStat;  MaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter. More...;  ; class  MCMCCalculator;  Bayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function. More...;  ; class  MCMCInterval;  MCMCInterval is a concrete implementation of the RooStats::ConfInterval interface. More...;  ; class  MCMCIntervalPlot;  This class provides simple and straightforward utilities to plot a MCMCInterval object. More...;  ; class  MetropolisHastings;  This class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo. More...;  ; class  MinNLLTestStat;  MinNLLTestStat is an implementati",MatchSource.WIKI,doc/master/namespaceRooStats.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html
Availability,down,down,"al::RLogChannel & RGeomLog ();  Log channel for Geomviewer diagnostics. ;  ; template<class RootClass > ; Short_t SetClassVersion (RootClass *);  ; std::vector< std::string > Split (std::string_view str, std::string_view delims, bool skipEmpty);  Splits a string at each character in delims. ;  ; static void StrReplace (std::string &proc, const std::string &pat, const std::string &tr);  Replace all accurances of given string with other string. ;  ; template<typename value_type > ; void ToHumanReadableSize (value_type bytes, Bool_t si, Double_t *coeff, const char **units);  Return the size expressed in 'human readable' format. ;  ; static Bool_t ValidateRule (const std::map< std::string, std::string > &rule, std::string &error_string);  Validate if the user specified rules are correct. ;  ; ROOT::Experimental::RLogChannel & WebGUILog ();  Log channel for WebGUI diagnostics. ;  ; static void WriteAutoVariables (const std::list< std::string > &target, const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output);  Write down the sources. ;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ;  ; void WriteReadRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ;  ; void WriteSchemaList (std::list< SchemaRuleMap_t > &rules, const std::string &listName, std::ostream &output);  Write schema rules. ;  . Variables; R__EXTERN TVirtualRWMutex * gCoreMutex = nullptr;  ; R__EXTERN SchemaRuleClassMap_t gReadRawRules;  ; R__EXTERN SchemaRuleClassMap_t gReadRules;  ; int Use the overload accepting RCompressionSetting::EAlgorithm instead;  ; struct ROOT::RQt5Crea",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
Deployability,update,update,"nge_t > RangeDynCast (Range_t &&coll);  Takes any collection that can be used in range-based loops and applies dynamic_cast<T> to each element. ;  ; template<typename T , typename U , std::size_t N> ; RRangeCast< T, true, std::span< U > > RangeDynCast (U(&arr)[N]);  ; template<typename T , typename Range_t > ; RRangeCast< T, false, Range_t > RangeStaticCast (Range_t &&coll);  Takes any collection that can be used in range-based loops and applies static_cast<T> to each element. ;  ; template<typename T , typename U , std::size_t N> ; RRangeCast< T, false, std::span< U > > RangeStaticCast (U(&arr)[N]);  ; TNamed * RegisterClassTemplate (const char *name, const char *file, Int_t line);  Global function to register the implementation file and line of a class template (i.e. ;  ; void RemoveClass (const char *cname, TClass *cl);  Global function called by the dtor of a class's init class (see the ClassImp macro). ;  ; void RemoveClassAlternate (ROOT::TClassAlt *);  ; void ResetClassVersion (TClass *, const char *, Short_t);  Global function to update the version number. ;  ; Experimental::RLogChannel & RGeomLog ();  Log channel for Geomviewer diagnostics. ;  ; template<class RootClass > ; Short_t SetClassVersion (RootClass *);  ; std::vector< std::string > Split (std::string_view str, std::string_view delims, bool skipEmpty);  Splits a string at each character in delims. ;  ; static void StrReplace (std::string &proc, const std::string &pat, const std::string &tr);  Replace all accurances of given string with other string. ;  ; template<typename value_type > ; void ToHumanReadableSize (value_type bytes, Bool_t si, Double_t *coeff, const char **units);  Return the size expressed in 'human readable' format. ;  ; static Bool_t ValidateRule (const std::map< std::string, std::string > &rule, std::string &error_string);  Validate if the user specified rules are correct. ;  ; ROOT::Experimental::RLogChannel & WebGUILog ();  Log channel for WebGUI diagnostics. ;  ; static void Wr",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
Energy Efficiency,schedul,scheduler,"The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT ob",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
Integrability,depend,depend,"or ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; class  RBrowser;  Web-based ROOT files and objects browser. More...;  ; class  RBrowserCatchedWidget;  ; class  RBrowserData;  Way to browse (hopefully) everything in ROOT. More...;  ; class  RBrowserDataCleanup;  ; class  RBrowserEditorWidget;  ; class  RBrowserInfoWidget;  ; class  RBrowserReply;  Reply on browser request. More...;  ; class  RBrowserRequest;  Request send from client to get content of path element. More...;  ; class  RBrowserTimer;  ; class  RBrowserWidget;  Abstract Web-based widget, which can be used in the RBrowser Used to embed canvas, geometry viewer and potentially any other widgets. More...;  ; class  RBrowserWidgetProvider;  ; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  RFileDialog;  Web-based FileDialog. More...;  ; class  RGeoItem;  Representation of single item in the geometry browser. More...;  ; class  RGeomBrowserIter;  Iterator of hierarchical geometry structures. More...;  ; class  RGeomConfig;  Configuration parameters which can be configured on the client Send as is to-from client. More...;  ; class  RGeomDescription;  ; class  RGeomDrawing;  Object with full description for drawing geometry It includes list of visible items and list of nodes required to build them. More...;  ; class  RGeomHierarchy;  Web-based ROOT geometry hierarchy viewer. More...;  ; class  RGeomNode;  Full node description including matrices and other attributes. More...;  ; class  RG",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
Modifiability,inherit,inherits,". ROOT: ROOT Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT Namespace ReferenceMath » MathCore | Math » MathMore » Statistical functions. tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ; More... Namespaces; namespace  Browsable;  ; namespace  CocoaTutorials;  ; namespace  Detail;  Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ;  ; namespace  Details;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; class  RBrowser;  Web-based ROOT files and objects browser. More...;  ; class  RBrowserCatchedWidget;  ; class  RBrowserData;  Way to browse (hopefully) everything in ROOT. More...;  ; class  RBrowserDataCleanup;  ; class  RBrowserEditorWidget;  ; class  RBrowserInfoWidget;  ; class  RBrowserReply;  Reply on browser request. More...;  ; class  RBrowserRequest;  Request send from client to g",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
Performance,queue,queue,"mporary directories. More...;  ; class  RWebBrowserImp;  ; class  RWebDisplayArgs;  Holds different arguments for starting browser with RWebDisplayHandle::Display() method. More...;  ; class  RWebDisplayHandle;  Handle of created web-based display Depending from type of web display, holds handle of started browser process or other display-specific information to correctly stop and cleanup display. More...;  ; class  RWebWindow;  Represents web window, which can be shown in web browser or any other supported environment. More...;  ; class  RWebWindowsManager;  Central instance to create and show web-based windows like Canvas or FitPanel. More...;  ; class  RWebWindowWSHandler;  just wrapper to deliver websockets call-backs to the RWebWindow class More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWr",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
Safety,safe,safe,"ngs (RCompressionSetting::EAlgorithm::EValues algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel) R__DEPRECATED(6;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void EnableThreadSafety ();  Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; TString & GetMacroPath ();  ; TROOT * GetROOT ();  ; void GetRuleIncludes (std::list< std::string > &result);  Get the list of",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
Security,checksum,checksum,"a class template (i.e. ; NOT a concrete class). ; Definition at line 1005 of file TClassTable.cxx. ◆ RemoveClass(). void ROOT::RemoveClass ; (; const char * ; cname, . TClass * ; cl . ). Global function called by the dtor of a class's init class (see the ClassImp macro). ; Definition at line 985 of file TClassTable.cxx. ◆ RemoveClassAlternate(). void ROOT::RemoveClassAlternate ; (; ROOT::TClassAlt * ; alt). Definition at line 931 of file TClassTable.cxx. ◆ ResetClassVersion(). void ROOT::ResetClassVersion ; (; TClass * ; cl, . const char * ; cname, . Short_t ; newid . ). Global function to update the version number. ; This is called via the RootClassVersion macro.; if cl!=0 and cname==-1, set the new class version if and only is greater than the existing one and greater or equal to 2; and also ignore the request if fVersionUsed is true.; Note on class version number:; If no class has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specify via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 951 of file TClassTable.cxx. ◆ RGeomLog(). ROOT::Experimental::RLogChannel & ROOT::RGeomLog ; (; ). Log channel for Geomviewer diagnostics. ; Definition at line 49 of file RGeomData.cxx. ◆ SetClassVersion(). template<class RootClass > . Short_t ROOT::SetClassVersion ; (; RootClass * ; ). ◆ Split(). std::vector< std::string > ROOT::Split ; (; std::string_view ; str, . std::string_view ; delims, . bool ; skipEmpty . ). Splits a string at each character in delims. ; The behavior mimics str.split from Python, Parameters. [in]strString to tokenise. ; [in]delimsOne or more delimiters used to split the string. ; [in]skipEmptyStrip empty strings from the output. . Definition at line 23 of file StringUtils.cxx. ◆ StrReplace(). static void ROOT::StrReplace ; (; std::string & ; proc, . const std::string & ; pat, . const std::st",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
Usability,simpl,simple,"lass More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. Mo",MatchSource.WIKI,doc/master/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT.html
Availability,error,error,"lection to contain elements of the type requested (or a derived class). Any deviation from this expectation will only be caught/reported by an assert in debug builds.; This is best used with a TClonesArray, for other cases prefered TRangeDynCast.; The typical use is: for(auto bcl : TRangeStaticCast<TBaseClass>( *tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; for(auto bcl : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; a#define a(i)Definition RSha256.hxx:99; ROOT::Detail::TRangeCastDefinition TCollection.h:311; TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; Template Parameters. TThe new type to convert to. . Definition at line 337 of file TCollection.h. Function Documentation. ◆ HasBeenDeleted(). R__ALWAYS_INLINE bool ROOT::Detail::HasBeenDeleted ; (; const TObject * ; obj). Check if the TObject's memory has been deleted. ; WarningThis should be only used for error mitigation as the answer is only sometimes correct. It actually just checks whether the object has been deleted, so this will falsely return true for an object that has been destructed but its memory has not been deleted. This will return an undefined value if the memory is re-used between the deletion and the check. i.e. This is useful to prevent a segmentation fault in case where the problem can be detected when the deletion and the usage are 'close-by' . In enviroment where delete taints (changes) the memory, this function always returns false as the marker left by ~TObject will be overwritten. ; Parameters. objThe memory to check . Returnstrue if the object has been destructed and it can be inferred that it has been deleted ; Definition at line 402 of file TObject.h. ◆ HasCallOp() [1/2]. template<typename T > . constexpr bool ROOT::Detail::HasCallOp ; (; char ; ). constexpr . Definition at line 32 of file TypeTraits.hxx. ◆ HasCallOp() [2/2]. template<typename T > . constexpr auto ROOT",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail.html
Energy Efficiency,adapt,adapter,"; struct  is_array_class< std::vector< T > >;  ; struct  make_indices_;  ; struct  make_indices_impl;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N > 1 &&N % 2==0)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N > 1 &&N % 2==1)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N==0)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N==1)>::type >;  ; struct  make_indices_next;  ; struct  make_indices_next2;  ; struct  make_indices_next2< indices< Indices... >, Next, Tail >;  ; struct  make_indices_next< indices< Indices... >, Next >;  ; class  TBranchProxy;  Base class for all the proxy object. More...;  ; class  TCollectionProxyInfo;  ; class  TRangeCast;  ; class  TSchemaRuleSet;  ; class  TStatusBitsChecker;  . Typedefs; template<size_t Start, size_t Last, size_t Step = 1> ; using make_indices = typename make_indices_< Start, Last, Step >::type;  ; template<typename T > ; using TRangeStaticCast = TRangeCast< T, false >;  TRangeStaticCast is an adapter class that allows the typed iteration through a TCollection. ;  . Functions; R__ALWAYS_INLINE bool HasBeenDeleted (const TObject *obj);  Check if the TObject's memory has been deleted. ;  ; template<typename T > ; constexpr bool HasCallOp (char);  ; template<typename T > ; constexpr auto HasCallOp (int) -> decltype(&T::operator(), true);  ; template<class ArrayL , class ArrayR > ; bool operator_equal_impl (ArrayL const &lhs, size_t const lhs_size, ArrayR const &rhs, size_t const rhs_size);  . Detailed Description; Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. . Typedef Documentation. ◆ make_indices. template<size_t Start, size_t Last",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail.html
Integrability,adapter,adapter,"; struct  is_array_class< std::vector< T > >;  ; struct  make_indices_;  ; struct  make_indices_impl;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N > 1 &&N % 2==0)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N > 1 &&N % 2==1)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N==0)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N==1)>::type >;  ; struct  make_indices_next;  ; struct  make_indices_next2;  ; struct  make_indices_next2< indices< Indices... >, Next, Tail >;  ; struct  make_indices_next< indices< Indices... >, Next >;  ; class  TBranchProxy;  Base class for all the proxy object. More...;  ; class  TCollectionProxyInfo;  ; class  TRangeCast;  ; class  TSchemaRuleSet;  ; class  TStatusBitsChecker;  . Typedefs; template<size_t Start, size_t Last, size_t Step = 1> ; using make_indices = typename make_indices_< Start, Last, Step >::type;  ; template<typename T > ; using TRangeStaticCast = TRangeCast< T, false >;  TRangeStaticCast is an adapter class that allows the typed iteration through a TCollection. ;  . Functions; R__ALWAYS_INLINE bool HasBeenDeleted (const TObject *obj);  Check if the TObject's memory has been deleted. ;  ; template<typename T > ; constexpr bool HasCallOp (char);  ; template<typename T > ; constexpr auto HasCallOp (int) -> decltype(&T::operator(), true);  ; template<class ArrayL , class ArrayR > ; bool operator_equal_impl (ArrayL const &lhs, size_t const lhs_size, ArrayR const &rhs, size_t const rhs_size);  . Detailed Description; Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. . Typedef Documentation. ◆ make_indices. template<size_t Start, size_t Last",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail.html
Modifiability,inherit,inherits,". ROOT: ROOT::Detail Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Functions ; ROOT::Detail Namespace Reference. Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ; More... Namespaces; namespace  Internal;  ; namespace  RDF;  ; namespace  VecOps;  . Classes; struct  CallableTraitsImpl;  Extract types from the signature of a callable object. See CallableTraits. More...;  ; struct  CallableTraitsImpl< R(*)(Args...), false >;  ; struct  CallableTraitsImpl< R(Args...), false >;  ; struct  CallableTraitsImpl< R(T::*)(Args...) const, false >;  ; struct  CallableTraitsImpl< R(T::*)(Args...), false >;  ; struct  CallableTraitsImpl< T, true >;  ; struct  indices;  ; struct  is_array_class;  ; struct  is_array_class< std::array< T, N > >;  ; struct  is_array_class< std::initializer_list< T > >;  ; struct  is_array_class< std::vector< T > >;  ; struct  make_indices_;  ; struct  make_indices_impl;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N > 1 &&N % 2==0)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N > 1 &&N % 2==1)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N==0)>::type >;  ; struct  make_indices_impl< First, Step, N, typename std::enable_if<(N==1)>::type >;  ; struct  make_indices_next;  ; struct  make_indices_next2;  ; struct  make_indices_next2< indices< Indices... >, Next, Tail >;  ; struct  make_indices_next< indices< Indices... >, Next >;  ; class  TBranchProxy;  Base class for all the proxy object. More...;  ; class  TCollectionProxyInfo;  ; class  TRangeCast;  ; class  TSchemaRuleSet;  ; class  TStatusBitsChecker;  . Typedefs; template<size_t Start, size_t Last, size_t Step = 1> ; using make_indices = typename make_indices_< Start, Last, Ste",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail.html
Safety,detect,detected,"l : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; a#define a(i)Definition RSha256.hxx:99; ROOT::Detail::TRangeCastDefinition TCollection.h:311; TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; Template Parameters. TThe new type to convert to. . Definition at line 337 of file TCollection.h. Function Documentation. ◆ HasBeenDeleted(). R__ALWAYS_INLINE bool ROOT::Detail::HasBeenDeleted ; (; const TObject * ; obj). Check if the TObject's memory has been deleted. ; WarningThis should be only used for error mitigation as the answer is only sometimes correct. It actually just checks whether the object has been deleted, so this will falsely return true for an object that has been destructed but its memory has not been deleted. This will return an undefined value if the memory is re-used between the deletion and the check. i.e. This is useful to prevent a segmentation fault in case where the problem can be detected when the deletion and the usage are 'close-by' . In enviroment where delete taints (changes) the memory, this function always returns false as the marker left by ~TObject will be overwritten. ; Parameters. objThe memory to check . Returnstrue if the object has been destructed and it can be inferred that it has been deleted ; Definition at line 402 of file TObject.h. ◆ HasCallOp() [1/2]. template<typename T > . constexpr bool ROOT::Detail::HasCallOp ; (; char ; ). constexpr . Definition at line 32 of file TypeTraits.hxx. ◆ HasCallOp() [2/2]. template<typename T > . constexpr auto ROOT::Detail::HasCallOp ; (; int ; ); -> decltype(&T::operator(), true) . constexpr . Definition at line 31 of file TypeTraits.hxx. ◆ operator_equal_impl(). template<class ArrayL , class ArrayR > . bool ROOT::Detail::operator_equal_impl ; (; ArrayL const & ; lhs, . size_t const ; lhs_size, . ArrayR const & ; rhs, . size_t const ; rhs_size . ). inline . Definition at line 456 of file span.hx",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail.html
Testability,assert,assert,"(ArrayL const &lhs, size_t const lhs_size, ArrayR const &rhs, size_t const rhs_size);  . Detailed Description; Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ; Template Parameters. TThe new type to convert to. ; isDynamicIf true, dynamic_cast is used, otherwise static_cast is used. . Typedef Documentation. ◆ make_indices. template<size_t Start, size_t Last, size_t Step = 1> . using ROOT::Detail::make_indices = typedef typename make_indices_< Start, Last, Step >::type. Definition at line 148 of file span.hxx. ◆ TRangeStaticCast. template<typename T > . using ROOT::Detail::TRangeStaticCast = typedef TRangeCast<T, false>. TRangeStaticCast is an adapter class that allows the typed iteration through a TCollection. ; This requires the collection to contain elements of the type requested (or a derived class). Any deviation from this expectation will only be caught/reported by an assert in debug builds.; This is best used with a TClonesArray, for other cases prefered TRangeDynCast.; The typical use is: for(auto bcl : TRangeStaticCast<TBaseClass>( *tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; for(auto bcl : TRangeStaticCast<TBaseClass>( tbaseClassClonesArrayPtr )) {; ... use bcl as a TBaseClass*; }; a#define a(i)Definition RSha256.hxx:99; ROOT::Detail::TRangeCastDefinition TCollection.h:311; TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; Template Parameters. TThe new type to convert to. . Definition at line 337 of file TCollection.h. Function Documentation. ◆ HasBeenDeleted(). R__ALWAYS_INLINE bool ROOT::Detail::HasBeenDeleted ; (; const TObject * ; obj). Check if the TObject's memory has been deleted. ; WarningThis should be only used for error mitigation as the answer is only sometimes correct. It actually just checks whether the object has been deleted, so this w",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail.html
Integrability,wrap,wrapper,". ROOT: ROOT::Detail::RDF Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Functions ; ROOT::Detail::RDF Namespace Reference. Namespaces; namespace  ExtraArgsForDefine;  . Classes; class  RActionImpl;  Base class for action helpers, see RInterface::Book() for more information. More...;  ; struct  RCallCleanUpTask;  A RAII object that calls RLoopManager::CleanUpTask at destruction. More...;  ; class  RColumnReaderBase;  ; class  RDefaultValueFor;  The implementation of the DefaultValueFor transformation. More...;  ; class  RDefine;  ; class  RDefineBase;  ; class  RDefinePerSample;  ; class  RFilter;  ; class  RFilterBase;  ; class  RFilterWithMissingValues;  implementation of FilterAvailable and FilterMissing operations More...;  ; struct  RInferredType;  ; class  RJittedDefine;  A wrapper around a concrete RDefine, which forwards all calls to it RJittedDefine is a placeholder that is put in the collection of custom columns in place of a RDefine that will be just-in-time compiled. More...;  ; class  RJittedFilter;  A wrapper around a concrete RFilter, which forwards all calls to it RJittedFilter is the type of the node returned by jitted Filter calls: the concrete filter can be created and set at a later time, from jitted code. More...;  ; class  RLoopManager;  The head node of a RDF computation graph. More...;  ; class  RMergeableCount;  Specialization of RMergeableValue for the Count action. More...;  ; class  RMergeableFill;  Specialization of RMergeableValue for histograms and statistics. More...;  ; class  RMergeableMax;  ; class  RMergeableMean;  Specialization of RMergeableValue for the Mean action. More...;  ; class  RMergeableMin;  ; class  RMergeableStdDev;  Specialization of RMergeableValue for the StdDev action. More...;  ; class  RMergeableSum;  ; class  RMergeableValue;  A result of an RDataFrame execution, that knows how to merge with other results of the same type. More...; ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1RDF.html
Security,access,access," (std::string_view datasetName, const std::vector< std::string > &fileNameGlobs, const std::vector< std::string > &defaultColumns, bool checkFile=true);  Create an RLoopManager that reads a TChain. ;  ; std::shared_ptr< ROOT::Detail::RDF::RLoopManager > CreateLMFromTTree (std::string_view datasetName, std::string_view fileNameGlob, const std::vector< std::string > &defaultColumns, bool checkFile=true);  Create an RLoopManager that reads a TChain. ;  ; template<typename T > ; std::unique_ptr< RMergeableVariations< T > > GetMergeableValue (ROOT::RDF::Experimental::RResultMap< T > &rmap);  Retrieve mergeable values after calling ROOT::RDF::VariationsFor . ;  ; template<typename T > ; std::unique_ptr< RMergeableValue< T > > GetMergeableValue (RResultPtr< T > &rptr);  Retrieve a mergeable value from an RDataFrame action. ;  ; template<typename T > ; RResultPtr< T > MakeResultPtr (const std::shared_ptr< T > &r, RLoopManager &lm, std::shared_ptr< RDFInternal::RActionBase > actionPtr);  Create a RResultPtr and set its pointer to the corresponding RAction This overload is invoked by non-jitted actions, as they have access to RAction before constructing RResultPtr. ;  ; template<typename T , typename... Ts> ; void MergeValues (RMergeableValue< T > &OutputMergeable, const RMergeableValue< Ts > &... InputMergeables);  Merge multiple RMergeableValue objects into one. ;  ; template<typename T , typename... Ts> ; void MergeValues (RMergeableVariations< T > &OutputMergeable, const RMergeableVariations< Ts > &... InputMergeables);  Merge multiple RMergeableVariations objects into one. ;  ; template<typename T , typename... Ts> ; std::unique_ptr< RMergeableValue< T > > MergeValues (std::unique_ptr< RMergeableValue< T > > OutputMergeable, std::unique_ptr< RMergeableValue< Ts > >... InputMergeables);  Merge multiple RMergeableValue objects into one. ;  ; ROOT::Experimental::RLogChannel & RDFLogChannel ();  . Function Documentation. ◆ CreateLMFromTTree() [1/2]. std::shared_ptr< ROOT::De",MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1RDF.html
Energy Efficiency,reduce,reduce,. ROOT: ROOT::Detail::VecOps Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::Detail::VecOps Namespace Reference. Classes; class  RVecImpl;  This class consists of common code factored out of the SmallVector class to reduce code duplication based on the SmallVector 'N' template parameter. More...;  . Functions; template<typename T > ; bool IsAdopting (const ROOT::VecOps::RVec< T > &v);  ; template<typename T > ; bool IsSmall (const ROOT::VecOps::RVec< T > &v);  . Function Documentation. ◆ IsAdopting(). template<typename T > . bool ROOT::Detail::VecOps::IsAdopting ; (; const ROOT::VecOps::RVec< T > & ; v). Definition at line 1124 of file RVec.hxx. ◆ IsSmall(). template<typename T > . bool ROOT::Detail::VecOps::IsSmall ; (; const ROOT::VecOps::RVec< T > & ; v). Definition at line 1118 of file RVec.hxx. ROOTDetailVecOps. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:02 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/namespaceROOT_1_1Detail_1_1VecOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Detail_1_1VecOps.html
Availability,error,error,"ent for display of RHistStat, required to avoid sending histogram to the client. More...;  ; class  RDisplayItem;  Base class for painting data for JS. More...;  ; class  RDrawable;  Base class for drawable entities: objects that can be painted on a RPad. More...;  ; class  RDrawableDisplayItem;  Generic display item for RDrawable, just reference drawable itself. More...;  ; class  RDrawableExecRequest;  Request execution of method of referenced drawable, no reply. More...;  ; class  RDrawableMenuRequest;  Request menu items for the drawable object. More...;  ; class  RDrawableReply;  Base class for replies on RDrawableRequest. More...;  ; class  RDrawableRequest;  Base class for requests which can be submitted from the clients. More...;  ; class  REntry;  The REntry is a collection of values in an ntuple corresponding to a complete row in the data set. More...;  ; class  REnumField;  The field for an unscoped or scoped enum with dictionary. More...;  ; class  RError;  Captures diagnostics related to a ROOT runtime error. More...;  ; class  REve3DProjection;  ; class  REveAunt;  ; class  REveAuntAsList;  ; class  REveBox;  ; class  REveBoxProjected;  ; class  REveBoxSet;  ; class  REveCalo2D;  ; class  REveCalo3D;  ; class  REveCaloData;  ; class  REveCaloDataHist;  ; class  REveCaloDataSelector;  ; class  REveCaloDataSliceSelector;  ; class  REveCaloDataVec;  ; class  REveCaloLego;  ; class  REveCaloViz;  ; class  REveChunkManager;  ; class  REveChunkVector;  ; class  REveClient;  ; class  REveCluster;  REveCluster Reconstructed cluster (also used in VSD). More...;  ; class  REveCollectionCompound;  ; class  REveCompound;  ; class  REveCompoundProjected;  ; class  REveDataCollection;  ; class  REveDataColumn;  ; class  REveDataItem;  ; class  REveDataItemList;  ; class  REveDataProxyBuilderBase;  ; class  REveDataSimpleProxyBuilder;  ; class  REveDataSimpleProxyBuilderTemplate;  ; class  REveDataTable;  ; class  REveDigitSet;  ; class  REveElement;  ; class  REveEl",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
Deployability,configurat,configuration," total sum of squared weights. More...;  ; class  RHistStatTotalSumOfWeights;  Keeps track of the histogram's total sum of weights. More...;  ; class  RHistStatUncertainty;  Histogram statistics to keep track of the Poisson uncertainty per bin. More...;  ; class  RHistView;  A view on a histogram, selecting a range on a subset of dimensions. More...;  ; struct  RHistViewOutOfRange;  ; class  RIndirectDisplayItem;  Extract (reference) only basic attributes from drawable, but not drawable itself. More...;  ; class  RIntegralField;  ; class  RIntegralField< std::int16_t >;  ; class  RIntegralField< std::int32_t >;  ; class  RIntegralField< std::int64_t >;  ; class  RIntegralField< std::int8_t >;  ; class  RIntegralField< std::uint16_t >;  ; class  RIntegralField< std::uint32_t >;  ; class  RIntegralField< std::uint64_t >;  ; class  RIntegralField< std::uint8_t >;  ; class  RInvalidField;  Used in RFieldBase::Check() to record field creation failures. More...;  ; class  RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  ; class  RMapField;  Template specializations for C++ std::[unordered_][multi]map. More...;  ; class  RMenuItems;  List of items for object context menu. M",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
Energy Efficiency,efficient,efficient,". template<> . const RAttrMap::Value_t * ROOT::Experimental::RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, RColor > ; (; const Value_t * ; rec). ◆ RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, RPadLength >(). template<> . const RAttrMap::Value_t * ROOT::Experimental::RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, RPadLength > ; (; const Value_t * ; rec). ◆ RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, void >(). template<> . const RAttrMap::Value_t * ROOT::Experimental::RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, void > ; (; const Value_t * ; rec). ◆ REveLog(). REX::RLogChannel & ROOT::Experimental::REveLog ; (; ). Log channel for Eve diagnostics. ; Definition at line 51 of file REveTypes.cxx. ◆ swap(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT> . void ROOT::Experimental::swap ; (; RHist< DIMENSIONS, PRECISION, STAT... > & ; a, . RHist< DIMENSIONS, PRECISION, STAT... > & ; b . ). noexcept . Swap two histograms. ; Very efficient; swaps the fImpl pointers. ; Definition at line 210 of file RHist.hxx. Variable Documentation. ◆ gEve. REveManager * ROOT::Experimental::gEve = nullptr. Definition at line 286 of file REveManager.hxx. ◆ kInvalidColumnId. constexpr ColumnId_t ROOT::Experimental::kInvalidColumnId = -1. constexpr . Definition at line 163 of file RNTupleUtil.hxx. ◆ kInvalidDescriptorId. constexpr DescriptorId_t ROOT::Experimental::kInvalidDescriptorId = std::uint64_t(-1). constexpr . Definition at line 167 of file RNTupleUtil.hxx. ◆ kInvalidNTupleIndex. constexpr NTupleSize_t ROOT::Experimental::kInvalidNTupleIndex = std::uint64_t(-1). constexpr . Definition at line 116 of file RNTupleUtil.hxx. ◆ kUnknownCompressionSettings. constexpr int ROOT::Experimental::kUnknownCompressionSettings = -1. constexpr . Definition at line 146 of file RNTupleUtil.hxx. ROOTExperimental. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
Integrability,interface,interface,n;  ; class  REveDataColumn;  ; class  REveDataItem;  ; class  REveDataItemList;  ; class  REveDataProxyBuilderBase;  ; class  REveDataSimpleProxyBuilder;  ; class  REveDataSimpleProxyBuilderTemplate;  ; class  REveDataTable;  ; class  REveDigitSet;  ; class  REveElement;  ; class  REveEllipsoid;  ; class  REveEllipsoidProjected;  ; class  REveException;  REveException Exception-type thrown by Eve classes. More...;  ; class  REveFrameBox;  ; class  REveGeoManagerHolder;  REveGeoManagerHolder Exception-safe global variable holders. More...;  ; class  REveGeoPolyShape;  ; class  REveGeoShape;  ; class  REveGeoShapeExtract;  ; class  REveGeoShapeProjected;  ; class  REveGeoTopNodeData;  ; class  REveGeoTopNodeViz;  ; class  REveHit;  REveHit Monte Carlo hit (also used in VSD). More...;  ; class  REveJetCone;  ; class  REveJetConeProjected;  ; class  REveLine;  REveLine An arbitrary polyline with fixed line and marker attributes. More...;  ; class  REveLineProjected;  ; class  REveMagField;  REveMagField Abstract interface to magnetic field. More...;  ; class  REveMagFieldConst;  REveMagFieldConst Interface to constant magnetic field. More...;  ; class  REveMagFieldDuo;  REveMagFieldDuo Interface to magnetic field with two different values depending on radius. More...;  ; class  REveManager;  ; class  REveMCRecCrossRef;  REveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD). More...;  ; class  REveMCTrack;  REveMCTrack. More...;  ; class  REvePathMarkT;  Special-point on track: More...;  ; class  REvePointSelector;  REvePointSelector TSelector for direct extraction of point-like data from a Tree. More...;  ; class  REvePointSelectorConsumer;  ; class  REvePointSet;  ; class  REvePointSetArray;  ; class  REvePointSetProjected;  ; class  REvePolygonSetProjected;  ; class  REveProjectable;  ; class  REveProjected;  ; class  REveProjection;  REveProjection Base for specific classes that implement non-linear projections. More...;  ; class  REvePro,MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
Modifiability,config,configure,"ticks attributes. More...;  ; class  RAttrAxisTitle;  Axis title and its drawing attributes. More...;  ; class  RAttrBase;  Base class for all attributes, used with RDrawable. More...;  ; class  RAttrBorder;  Drawing line attributes for different objects. More...;  ; class  RAttrFill;  Drawing fill attributes for different objects. More...;  ; class  RAttrFont;  A font attributes, used together with text attributes. More...;  ; class  RAttrLine;  Drawing line attributes for different objects. More...;  ; class  RAttrLineEnding;  Attributes for line ending. More...;  ; class  RAttrMap;  ; class  RAttrMargins;  A margins attributes. Only relative and pixel coordinates are allowed. More...;  ; class  RAttrMarker;  A marker attributes. More...;  ; class  RAttrText;  A text attributes. More...;  ; class  RAttrValue;  Template class to access single value from drawable or other attributes. More...;  ; class  RAxisBase;  Histogram axis base class. More...;  ; class  RAxisConfig;  Objects used to configure the different axis types. More...;  ; class  RAxisDrawable;  Axis drawing. More...;  ; class  RAxisEquidistant;  Axis with equidistant bin borders. More...;  ; class  RAxisGrow;  An axis that can extend its range, keeping the number of its bins unchanged. More...;  ; class  RAxisIrregular;  An axis with non-equidistant bins (also known as ""variable binning""). More...;  ; class  RAxisLabels;  A RAxisGrow that has a label assigned to each bin and a bin width of 1. More...;  ; class  RBitsetField;  Template specializations for C++ std::bitset. More...;  ; class  RCanvas;  A window's topmost RPad. More...;  ; class  RCanvasDisplayItem;  class RCanvasDisplayItem More...;  ; class  RCanvasPainter;  Implementation of painter for ROOT::Experimental::RCanvas, using RWebWindow. More...;  ; class  RCardinalityField;  An artificial field that transforms an RNTuple column that contains the offset of collections into collection sizes. More...;  ; class  RChangeAttrRequest;  ; class  RCl",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
Performance,perform,performed,"can be enabled via: ;  ; class  RField< T, typename std::enable_if< std::is_enum_v< T > >::type >;  ; class  RField< T, typename std::enable_if< std::is_integral_v< T > >::type >;  ; class  RField< TObject >;  TObject requires special handling of the fBits and fUniqueID members. More...;  ; class  RField< void >;  Template specializations for concrete C++ fundamental types. More...;  ; class  RFieldBase;  A field translates read and write calls from/to underlying columns to/from tree values. More...;  ; class  RFieldDescriptor;  Meta-data stored for every field of an ntuple. More...;  ; class  RFieldZero;  The container field for an ntuple model, which itself has no physical representation. More...;  ; class  RFile;  A ROOT file. More...;  ; class  RFilePtr;  Points to an object that stores or reads objects in ROOT's binary format. More...;  ; class  RFitPanel;  ; struct  RFitPanelModel;  Data structure for the fit panel. More...;  ; class  RFitResult;  ; class  RFrame;  Holds an area where drawing on user coordinate-system can be performed. More...;  ; class  RFunction;  ; class  RHist;  Histogram class for histograms with DIMENSIONS dimensions, where each bin count is stored by a value of type PRECISION. More...;  ; class  RHist1Drawable;  ; class  RHist1StatBox;  ; class  RHist2Drawable;  ; class  RHist2StatBox;  ; class  RHist3Drawable;  ; class  RHist3StatBox;  ; class  RHist< DIMENSIONS, PRECISION >;  RHist with no STAT parameter uses RHistStatContent by default. More...;  ; class  RHistBufferedFill;  Buffers calls to Fill(). More...;  ; class  RHistConcurrentFiller;  Buffers a thread's Fill calls and submits them to the RHistConcurrentFillManager. More...;  ; class  RHistConcurrentFillManager;  Manages the synchronization of calls to FillN(). More...;  ; class  RHistDataMomentUncert;  For now do as RH1: calculate first (xw) and second (x^2w) moment. More...;  ; class  RHistDisplayItem;  ; class  RHistDrawable;  ; class  RHistDrawableBase;  ; class  RHistStatB",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
Safety,avoid,avoid,"el assigned to each bin and a bin width of 1. More...;  ; class  RBitsetField;  Template specializations for C++ std::bitset. More...;  ; class  RCanvas;  A window's topmost RPad. More...;  ; class  RCanvasDisplayItem;  class RCanvasDisplayItem More...;  ; class  RCanvasPainter;  Implementation of painter for ROOT::Experimental::RCanvas, using RWebWindow. More...;  ; class  RCardinalityField;  An artificial field that transforms an RNTuple column that contains the offset of collections into collection sizes. More...;  ; class  RChangeAttrRequest;  ; class  RClassField;  The field for a class with dictionary. More...;  ; class  RClusterDescriptor;  Meta-data for a set of ntuple clusters. More...;  ; class  RClusterGroupDescriptor;  Clusters are bundled in cluster groups. More...;  ; class  RClusterIndex;  Addresses a column element or field item relative to a particular cluster, instead of a global NTupleSize_t index. More...;  ; struct  RClusterSize;  Wrap the integer in a struct in order to avoid template specialization clash with std::uint64_t. More...;  ; class  RColor;  The color class. More...;  ; class  RColumnDescriptor;  Meta-data stored for every column of an ntuple. More...;  ; class  RColumnSwitch;  Holds the index and the tag of a kSwitch column. More...;  ; class  RDirectory;  Key/value store of objects. More...;  ; class  RDirectoryTypeMismatch;  Objects of this class are thrown to signal that the value known under the given name . More...;  ; class  RDirectoryUnknownKey;  Objects of this class are thrown to signal that no key with that name exists. More...;  ; class  RDisplayHistStat;  Object send to client for display of RHistStat, required to avoid sending histogram to the client. More...;  ; class  RDisplayItem;  Base class for painting data for JS. More...;  ; class  RDrawable;  Base class for drawable entities: objects that can be painted on a RPad. More...;  ; class  RDrawableDisplayItem;  Generic display item for RDrawable, just reference drawa",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
Security,access,access," labels, title, min/max, log, reverse, ... More...;  ; class  RAttrAxisLabels;  Axis labels drawing attributes. More...;  ; class  RAttrAxisTicks;  Axis ticks attributes. More...;  ; class  RAttrAxisTitle;  Axis title and its drawing attributes. More...;  ; class  RAttrBase;  Base class for all attributes, used with RDrawable. More...;  ; class  RAttrBorder;  Drawing line attributes for different objects. More...;  ; class  RAttrFill;  Drawing fill attributes for different objects. More...;  ; class  RAttrFont;  A font attributes, used together with text attributes. More...;  ; class  RAttrLine;  Drawing line attributes for different objects. More...;  ; class  RAttrLineEnding;  Attributes for line ending. More...;  ; class  RAttrMap;  ; class  RAttrMargins;  A margins attributes. Only relative and pixel coordinates are allowed. More...;  ; class  RAttrMarker;  A marker attributes. More...;  ; class  RAttrText;  A text attributes. More...;  ; class  RAttrValue;  Template class to access single value from drawable or other attributes. More...;  ; class  RAxisBase;  Histogram axis base class. More...;  ; class  RAxisConfig;  Objects used to configure the different axis types. More...;  ; class  RAxisDrawable;  Axis drawing. More...;  ; class  RAxisEquidistant;  Axis with equidistant bin borders. More...;  ; class  RAxisGrow;  An axis that can extend its range, keeping the number of its bins unchanged. More...;  ; class  RAxisIrregular;  An axis with non-equidistant bins (also known as ""variable binning""). More...;  ; class  RAxisLabels;  A RAxisGrow that has a label assigned to each bin and a bin width of 1. More...;  ; class  RBitsetField;  Template specializations for C++ std::bitset. More...;  ; class  RCanvas;  A window's topmost RPad. More...;  ; class  RCanvasDisplayItem;  class RCanvasDisplayItem More...;  ; class  RCanvasPainter;  Implementation of painter for ROOT::Experimental::RCanvas, using RWebWindow. More...;  ; class  RCardinalityField;  An artificial fi",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
Testability,log,log,"amespaces; namespace  Detail;  ; namespace  EveGlu;  ; namespace  Hist;  ; namespace  Internal;  ; namespace  XRooFit;  xRooFit is a high-level API for RooFit. ;  . Classes; struct  HasCollectionProxyMemberType;  Template specializations for classes with collection proxies. More...;  ; struct  HasCollectionProxyMemberType< T, typename std::enable_if< std::is_same< typename T::IsCollectionProxy, std::true_type >::value >::type >;  ; struct  IsCollectionProxy;  The point here is that we can only tell at run time if a class has an associated collection proxy. More...;  ; class  RArrayAsRVecField;  Additional classes related to sequence containers. More...;  ; class  RArrayField;  Template specializations for C++ std::array and C-style arrays. More...;  ; class  RAtomicField;  Template specializations for C++ std::atomic. More...;  ; class  RAttrAggregation;  Base class for attributes aggregations like lines or fill attributes. More...;  ; class  RAttrAxis;  All supported axes attributes for: line, ticks, labels, title, min/max, log, reverse, ... More...;  ; class  RAttrAxisLabels;  Axis labels drawing attributes. More...;  ; class  RAttrAxisTicks;  Axis ticks attributes. More...;  ; class  RAttrAxisTitle;  Axis title and its drawing attributes. More...;  ; class  RAttrBase;  Base class for all attributes, used with RDrawable. More...;  ; class  RAttrBorder;  Drawing line attributes for different objects. More...;  ; class  RAttrFill;  Drawing fill attributes for different objects. More...;  ; class  RAttrFont;  A font attributes, used together with text attributes. More...;  ; class  RAttrLine;  Drawing line attributes for different objects. More...;  ; class  RAttrLineEnding;  Attributes for line ending. More...;  ; class  RAttrMap;  ; class  RAttrMargins;  A margins attributes. Only relative and pixel coordinates are allowed. More...;  ; class  RAttrMarker;  A marker attributes. More...;  ; class  RAttrText;  A text attributes. More...;  ; class  RAttrValue;  Template",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html
Availability,error,error,"in edge. . kBinCenter Get the bin center. . kBinTo Get the bin high edge. . Definition at line 252 of file RHistImpl.hxx. ◆ EColumnCppType. enum class ROOT::Experimental::Internal::EColumnCppType. strong . EnumeratorkChar ; kBool ; kByte ; kUint8 ; kUint16 ; kUint32 ; kUint64 ; kInt8 ; kInt16 ; kInt32 ; kInt64 ; kFloat ; kDouble ; kClusterSize ; kColumnSwitch ; kMax . Definition at line 119 of file RColumnElementBase.hxx. ◆ EDaosLocatorFlags. enum ROOT::Experimental::Internal::EDaosLocatorFlags. EnumeratorkCagedPage . Definition at line 43 of file RPageStorageDaos.hxx. ◆ EFindStatus. enum class ROOT::Experimental::Internal::EFindStatus. strong . Status of FindBin(x) and FindAdjustedBin(x) . EnumeratorkCanGrow The coordinate could fit after growing the axis. . kValid The returned bin index is valid. . Definition at line 259 of file RHistImpl.hxx. ◆ ENTupleMergeErrBehavior. enum class ROOT::Experimental::Internal::ENTupleMergeErrBehavior. strong . EnumeratorkAbort The merger will abort merging as soon as an error is encountered. . kSkip Upon errors, the merger will skip the current source and continue. . Definition at line 45 of file RNTupleMerger.hxx. ◆ ENTupleMergingMode. enum class ROOT::Experimental::Internal::ENTupleMergingMode. strong . EnumeratorkFilter The merger will discard all columns that aren't present in the prototype model (i.e. ; the model of the first source) . kStrict The merger will refuse to merge any 2 RNTuples whose schema doesn't match exactly. . kUnion The merger will update the output model to include all columns from all sources. ; Entries corresponding to columns that are not present in a source will be set to the default value of the type. . Definition at line 34 of file RNTupleMerger.hxx. ◆ EPageStorageType. enum class ROOT::Experimental::Internal::EPageStorageType. strong . EnumeratorkSink ; kSource . Definition at line 56 of file RPageStorage.hxx. Function Documentation. ◆ CallCommitClusterOnField(). void ROOT::Experimental::Internal::Cal",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
Deployability,release,release,"class  RNTupleIndex;  Builds an index on one or several fields of an RNTuple so it can be joined onto other RNTuples. More...;  ; struct  RNTupleMergeData;  ; struct  RNTupleMergeOptions;  ; class  RNTupleMerger;  Given a set of RPageSources merge them into an RPageSink, optionally changing their compression. More...;  ; class  RNTupleModelChangeset;  The incremental changes to a RNTupleModel More...;  ; class  RNTupleSerializer;  A helper class for serializing and deserialization of the RNTuple binary format. More...;  ; class  RNTupleWriteOptionsManip;  ; class  ROnDiskPage;  A page as being stored on disk, that is packed and compressed. More...;  ; class  ROnDiskPageMap;  A memory region that contains packed and compressed pages. More...;  ; class  ROnDiskPageMapHeap;  An ROnDiskPageMap that is used for an fMemory allocated as an array of unsigned char. More...;  ; class  RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  RPageRef;  Reference to a page stored in the page pool. More...;  ; class  RPageSink;  Abstract interface to write data into an ntuple. More...;  ; class  RPageSinkBuf;  Wrapper sink that coalesces cluster column page writes. More...;  ; class  RPageSinkDaos;  Storage provider that writes ntuple pages to into a DAOS container. More...;  ; class  RPageSinkFile;  Storage provider that write ntuple pages into a file. More...;  ; class  RPageSource;  Abstract interface to read data from an ntuple. More...;  ; class  RPageSourceDaos;  Storage provider that reads ntuple pages from ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
Energy Efficiency,allocate,allocated,"ise construction of an RNTupleDescriptor. More...;  ; class  RNTupleFileWriter;  Write RNTuple data blocks in a TFile or a bare file container. More...;  ; class  RNTupleImtTaskScheduler;  ; class  RNTupleIndex;  Builds an index on one or several fields of an RNTuple so it can be joined onto other RNTuples. More...;  ; struct  RNTupleMergeData;  ; struct  RNTupleMergeOptions;  ; class  RNTupleMerger;  Given a set of RPageSources merge them into an RPageSink, optionally changing their compression. More...;  ; class  RNTupleModelChangeset;  The incremental changes to a RNTupleModel More...;  ; class  RNTupleSerializer;  A helper class for serializing and deserialization of the RNTuple binary format. More...;  ; class  RNTupleWriteOptionsManip;  ; class  ROnDiskPage;  A page as being stored on disk, that is packed and compressed. More...;  ; class  ROnDiskPageMap;  A memory region that contains packed and compressed pages. More...;  ; class  ROnDiskPageMapHeap;  An ROnDiskPageMap that is used for an fMemory allocated as an array of unsigned char. More...;  ; class  RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  RPageRef;  Reference to a page stored in the page pool. More...;  ; class  RPageSink;  Abstract interface to write data into an ntuple. More...;  ; class  RPageSinkBuf;  Wrapper sink that coalesces cluster column page writes. More...;  ; class  RPageSinkDaos;  Storage provider that writes ntuple pages to into a DAOS container. More...;  ; class  RPageSinkFile;  Storage provider that write",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
Integrability,interface,interface,"class  RNTupleIndex;  Builds an index on one or several fields of an RNTuple so it can be joined onto other RNTuples. More...;  ; struct  RNTupleMergeData;  ; struct  RNTupleMergeOptions;  ; class  RNTupleMerger;  Given a set of RPageSources merge them into an RPageSink, optionally changing their compression. More...;  ; class  RNTupleModelChangeset;  The incremental changes to a RNTupleModel More...;  ; class  RNTupleSerializer;  A helper class for serializing and deserialization of the RNTuple binary format. More...;  ; class  RNTupleWriteOptionsManip;  ; class  ROnDiskPage;  A page as being stored on disk, that is packed and compressed. More...;  ; class  ROnDiskPageMap;  A memory region that contains packed and compressed pages. More...;  ; class  ROnDiskPageMapHeap;  An ROnDiskPageMap that is used for an fMemory allocated as an array of unsigned char. More...;  ; class  RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  RPageRef;  Reference to a page stored in the page pool. More...;  ; class  RPageSink;  Abstract interface to write data into an ntuple. More...;  ; class  RPageSinkBuf;  Wrapper sink that coalesces cluster column page writes. More...;  ; class  RPageSinkDaos;  Storage provider that writes ntuple pages to into a DAOS container. More...;  ; class  RPageSinkFile;  Storage provider that write ntuple pages into a file. More...;  ; class  RPageSource;  Abstract interface to read data from an ntuple. More...;  ; class  RPageSourceDaos;  Storage provider that reads ntuple pages from ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
Performance,cache,cache," incremental changes to a RNTupleModel More...;  ; class  RNTupleSerializer;  A helper class for serializing and deserialization of the RNTuple binary format. More...;  ; class  RNTupleWriteOptionsManip;  ; class  ROnDiskPage;  A page as being stored on disk, that is packed and compressed. More...;  ; class  ROnDiskPageMap;  A memory region that contains packed and compressed pages. More...;  ; class  ROnDiskPageMapHeap;  An ROnDiskPageMap that is used for an fMemory allocated as an array of unsigned char. More...;  ; class  RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  RPageRef;  Reference to a page stored in the page pool. More...;  ; class  RPageSink;  Abstract interface to write data into an ntuple. More...;  ; class  RPageSinkBuf;  Wrapper sink that coalesces cluster column page writes. More...;  ; class  RPageSinkDaos;  Storage provider that writes ntuple pages to into a DAOS container. More...;  ; class  RPageSinkFile;  Storage provider that write ntuple pages into a file. More...;  ; class  RPageSource;  Abstract interface to read data from an ntuple. More...;  ; class  RPageSourceDaos;  Storage provider that reads ntuple pages from a DAOS container. More...;  ; class  RPageSourceFile;  Storage provider that reads ntuple pages from a file. More...;  ; class  RPageSourceFriends;  Virtual storage that combines several other sources horizontally. More...;  ; class  RPageStorage;  Common functionality of an ntuple storage for both reading and writing. More...;  ; class  RProjectedFields; ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
Safety,safe,safe," incremental changes to a RNTupleModel More...;  ; class  RNTupleSerializer;  A helper class for serializing and deserialization of the RNTuple binary format. More...;  ; class  RNTupleWriteOptionsManip;  ; class  ROnDiskPage;  A page as being stored on disk, that is packed and compressed. More...;  ; class  ROnDiskPageMap;  A memory region that contains packed and compressed pages. More...;  ; class  ROnDiskPageMapHeap;  An ROnDiskPageMap that is used for an fMemory allocated as an array of unsigned char. More...;  ; class  RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  RPageRef;  Reference to a page stored in the page pool. More...;  ; class  RPageSink;  Abstract interface to write data into an ntuple. More...;  ; class  RPageSinkBuf;  Wrapper sink that coalesces cluster column page writes. More...;  ; class  RPageSinkDaos;  Storage provider that writes ntuple pages to into a DAOS container. More...;  ; class  RPageSinkFile;  Storage provider that write ntuple pages into a file. More...;  ; class  RPageSource;  Abstract interface to read data from an ntuple. More...;  ; class  RPageSourceDaos;  Storage provider that reads ntuple pages from a DAOS container. More...;  ; class  RPageSourceFile;  Storage provider that reads ntuple pages from a file. More...;  ; class  RPageSourceFriends;  Virtual storage that combines several other sources horizontally. More...;  ; class  RPageStorage;  Common functionality of an ntuple storage for both reading and writing. More...;  ; class  RProjectedFields; ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
Security,access,access,"t  RComputeGlobalBin<-1, NDIMS, BINS, AXES >;  ; struct  RComputeGlobalBinRaw;  Recursively computes a zero-based global bin index, given... More...;  ; struct  RComputeGlobalBinRaw<-1, NDIMS, BINS, AXES, BINTYPE >;  ; struct  RComputeLocalBins;  Recursively computes the number of regular bins before the current dimension, as well as the number of under- and overflow bins left to account for, after the current dimension. More...;  ; struct  RComputeLocalBins< 0, NDIMS, AXES >;  ; struct  RComputeLocalBinsInitialisation;  Recursively compute some quantities needed for ComputeLocalBins, namely the total number of bins per hyperplane (overflow and regular) and the number of regular bins per hyperplane on the hyperplanes that have them. More...;  ; struct  RComputeLocalBinsInitialisation< 0, NDIMS, AXES >;  ; struct  RComputeLocalBinsRaw;  Recursively computes zero-based local bin indices, given... More...;  ; struct  RComputeLocalBinsRaw<-1, NDIMS, BINS, AXES, BINTYPE >;  ; class  RDaosContainer;  A RDaosContainer provides read/write access to objects in a given container. More...;  ; struct  RDaosEventQueue;  ; class  RDaosNTupleAnchor;  Entry point for an RNTuple in a DAOS container. More...;  ; class  RDaosObject;  Provides low-level access to DAOS objects in a container. More...;  ; class  RDaosPool;  A RDaosPool provides access to containers in a specific DAOS pool. More...;  ; class  RDirectoryEntry;  ; class  RExtraTypeInfoDescriptorBuilder;  A helper class for piece-wise construction of an RExtraTypeInfoDescriptor. More...;  ; class  RFieldDescriptorBuilder;  A helper class for piece-wise construction of an RFieldDescriptor. More...;  ; struct  RFieldRepresentationModifier;  ; class  RFileSharedPtrCtor;  ; class  RFileStorageInterface;  Base class for RFile storage backends. More...;  ; struct  RFillIterRange;  Recursively fills the ranges of all axes, excluding under- and overflow. More...;  ; struct  RFillIterRange<-1, AXES >;  ; struct  RFindLocalBins;  Find ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
Usability,simpl,simple,"nce. Namespaces; namespace  BitPacking;  . Classes; struct  AxisConfigToType;  Converts a RAxisConfig of whatever kind to the corresponding RAxisBase-derived object. More...;  ; struct  AxisConfigToType< RAxisConfig::kEquidistant >;  ; struct  AxisConfigToType< RAxisConfig::kGrow >;  ; struct  AxisConfigToType< RAxisConfig::kIrregular >;  ; struct  AxisConfigToType< RAxisConfig::kLabels >;  ; class  RArraySizeField;  An artificial field that provides the size of a fixed-size array. More...;  ; class  RCluster;  An in-memory subset of the packed and compressed pages of a cluster. More...;  ; class  RClusterDescriptorBuilder;  A helper class for piece-wise construction of an RClusterDescriptor. More...;  ; class  RClusterGroupDescriptorBuilder;  A helper class for piece-wise construction of an RClusterGroupDescriptor. More...;  ; class  RClusterPool;  Managed a set of clusters containing compressed and packed pages. More...;  ; class  RColumn;  A column is a storage-backed array of a simple, fixed-size type, from which pages can be mapped into memory. More...;  ; class  RColumnDescriptorBuilder;  A helper class for piece-wise construction of an RColumnDescriptor. More...;  ; class  RColumnElementBase;  A column element encapsulates the translation between basic C++ types and their column representation. More...;  ; struct  RColumnInfo;  ; struct  RComputeGlobalBin;  Recursively gets the total number of regular bins before the current dimension, when computing a global bin that is in under- or overflow in at least one dimension. More...;  ; struct  RComputeGlobalBin<-1, NDIMS, BINS, AXES >;  ; struct  RComputeGlobalBinRaw;  Recursively computes a zero-based global bin index, given... More...;  ; struct  RComputeGlobalBinRaw<-1, NDIMS, BINS, AXES, BINTYPE >;  ; struct  RComputeLocalBins;  Recursively computes the number of regular bins before the current dimension, as well as the number of under- and overflow bins left to account for, after the current dimension. More..",MatchSource.WIKI,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html
Availability,error,error,". ROOT: ROOT::Fit Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT::Fit Namespace ReferenceMath » MathCore » Fitting and Parameter Estimation. Namespace for the fitting classes. ; More... Namespaces; namespace  FitUtil;  namespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ;  ; namespace  HFitInterface;  . Classes; class  AreaComparer;  ; class  BasicFCN;  BasicFCN class: base class for the objective functions used in the fits It has a reference to the data and the model function used in the fit. More...;  ; class  BinData;  Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: More...;  ; class  Box;  ; class  BoxContainer;  ; class  Chi2FCN;  Chi2FCN class for binned fits using the least square methods. More...;  ; struct  DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  FcnAdapter;  ; class  FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html
Deployability,configurat,configuration,"it method functions (chi2, likelihood, etc..) given the data and the model function ;  ; namespace  HFitInterface;  . Classes; class  AreaComparer;  ; class  BasicFCN;  BasicFCN class: base class for the objective functions used in the fits It has a reference to the data and the model function used in the fit. More...;  ; class  BinData;  Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: More...;  ; class  Box;  ; class  BoxContainer;  ; class  Chi2FCN;  Chi2FCN class for binned fits using the least square methods. More...;  ; struct  DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  FcnAdapter;  ; class  FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  LogLikelihoodFCN;  LogLikelihoodFCN class for likelihood fits. More...;  ; struct  ObjFuncTrait;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodFunction >;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodGradFunction >;  ; class  ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html
Modifiability,config,configuration,"it method functions (chi2, likelihood, etc..) given the data and the model function ;  ; namespace  HFitInterface;  . Classes; class  AreaComparer;  ; class  BasicFCN;  BasicFCN class: base class for the objective functions used in the fits It has a reference to the data and the model function used in the fit. More...;  ; class  BinData;  Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: More...;  ; class  Box;  ; class  BoxContainer;  ; class  Chi2FCN;  Chi2FCN class for binned fits using the least square methods. More...;  ; struct  DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  FcnAdapter;  ; class  FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  LogLikelihoodFCN;  LogLikelihoodFCN class for likelihood fits. More...;  ; struct  ObjFuncTrait;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodFunction >;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodGradFunction >;  ; class  ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html
Performance,perform,performing,"ifferent options: More...;  ; class  Box;  ; class  BoxContainer;  ; class  Chi2FCN;  Chi2FCN class for binned fits using the least square methods. More...;  ; struct  DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  FcnAdapter;  ; class  FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  LogLikelihoodFCN;  LogLikelihoodFCN class for likelihood fits. More...;  ; struct  ObjFuncTrait;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodFunction >;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodGradFunction >;  ; class  ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;  ; class  PoissonLikelihoodFCN;  class evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case More...;  ; class  ProxyListBox;  ; class  SparseData;  SparseData class representing the data of a THNSparse histogram The data needs to be converted to a BinData class before fitting using the GetBinData functions. More...;  ; class  UnBinData;  Class describing the un-binned data sets (just x coordinates values) of any dimensions. More...;  . Typedefs; typ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html
Testability,log,log,"More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  LogLikelihoodFCN;  LogLikelihoodFCN class for likelihood fits. More...;  ; struct  ObjFuncTrait;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodFunction >;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodGradFunction >;  ; class  ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;  ; class  PoissonLikelihoodFCN;  class evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case More...;  ; class  ProxyListBox;  ; class  SparseData;  SparseData class representing the data of a THNSparse histogram The data needs to be converted to a BinData class before fitting using the GetBinData functions. More...;  ; class  UnBinData;  Class describing the un-binned data sets (just x coordinates values) of any dimensions. More...;  . Typedefs; typedef Chi2FCN< ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction > Chi2Function;  ; typedef Chi2FCN< ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction > Chi2GradFunction;  ; typedef LogLikelihoodFCN< ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction > LogLikelihoodFunction;  ; typedef LogLikelihoodFCN< ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction > LogLikelihoodGradFunction;  ; typedef PoissonLikelihoodFCN< ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction > PoissonLLFunction;  ; ty",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html
Usability,simpl,simple,"unctions |; Variables ; ROOT::Fit Namespace ReferenceMath » MathCore » Fitting and Parameter Estimation. Namespace for the fitting classes. ; More... Namespaces; namespace  FitUtil;  namespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ;  ; namespace  HFitInterface;  . Classes; class  AreaComparer;  ; class  BasicFCN;  BasicFCN class: base class for the objective functions used in the fits It has a reference to the data and the model function used in the fit. More...;  ; class  BinData;  Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: More...;  ; class  Box;  ; class  BoxContainer;  ; class  Chi2FCN;  Chi2FCN class for binned fits using the least square methods. More...;  ; struct  DataOptions;  DataOptions : simple structure holding the options on how the data are filled. More...;  ; class  DataRange;  class describing the range in the coordinates it supports multiple range in a coordinate. More...;  ; class  FcnAdapter;  ; class  FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  FitData;  Base class for all the fit data types: Stores the coordinates and the DataOptions. More...;  ; class  FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  LogLikelihoodFCN;  LogLikelihoodFCN class for likelihood fits. More...;  ; struct  ObjFuncTrait;  ; struct  ObjFuncTrait< ROOT::Math::FitMethodFunct",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html
Availability,error,errors,"ine 181 of file FitUtil.cxx. ◆ CorrectValue(). double ROOT::Fit::FitUtil::CorrectValue ; (; double ; rval). Definition at line 167 of file FitUtil.cxx. ◆ EvaluateChi2(). double ROOT::Fit::FitUtil::EvaluateChi2 ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). Chi2 Functions. ; evaluate the Chi2 given a model function and the data at the point x. return also nPoints as the effective number of used points in the Chi2 evaluation ; Definition at line 226 of file FitUtil.cxx. ◆ EvaluateChi2Effective(). double ROOT::Fit::FitUtil::EvaluateChi2Effective ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; x, . unsigned int & ; nPoints . ). evaluate the effective Chi2 given a model function and the data at the point x. ; The effective chi2 uses the errors on the coordinates : W = 1/(sigma_y**2 + ( sigma_x_i * df/dx_i )**2 ) return also nPoints as the effective number of used points in the Chi2 evaluation ; Definition at line 424 of file FitUtil.cxx. ◆ EvaluateChi2Gradient(). void ROOT::Fit::FitUtil::EvaluateChi2Gradient ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the Chi2 gradient given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the Chi2 evaluation . ◆ EvaluateChi2Residual(). double ROOT::Fit::FitUtil::EvaluateChi2Residual ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . unsigned int ; i, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; useFullHessian = false . ). evaluate the residual contribution to the Chi2 given a model function and the BinPoint data and if the ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
Integrability,depend,depends,"ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the Chi2 gradient given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the Chi2 evaluation . ◆ EvaluateChi2Residual(). double ROOT::Fit::FitUtil::EvaluateChi2Residual ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . unsigned int ; i, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; useFullHessian = false . ). evaluate the residual contribution to the Chi2 given a model function and the BinPoint data and if the pointer g is not null evaluate also the gradient of the residual. ; evaluate the chi2 contribution (residual term) only for data with no coord-errors This function is used in the specialized least square algorithms like FUMILI or L.M.; If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used; if we have error on the coordinates the residual weight depends on the function value and the approximation used by Fumili and Levenberg-Marquardt cannot be used. Also the expected error and bin integral options should not be used in this case ; Definition at line 545 of file FitUtil.cxx. ◆ EvaluateLogL(). double ROOT::Fit::FitUtil::EvaluateLogL ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the LogL given a model function and the data at the point x. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ EvaluateLogLGradient(). void ROOT::Fit::FitUtil::EvaluateLogLGradient ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . u",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
Modifiability,extend,extended,"(const IModelFunction &func, const BinData &data, const double *x, unsigned int &nPoints);  evaluate the effective Chi2 given a model function and the data at the point x. ;  ; void EvaluateChi2Gradient (const IModelFunction &func, const BinData &data, const double *p, double *grad, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy=::ROOT::EExecutionPolicy::kSequential, unsigned nChunks=0);  evaluate the Chi2 gradient given a model function and the data at the point p. ;  ; double EvaluateChi2Residual (const IModelFunction &func, const BinData &data, const double *p, unsigned int ipoint, double *g=nullptr, double *h=nullptr, bool hasGrad=false, bool fullHessian=false);  evaluate the residual contribution to the Chi2 given a model function and the BinPoint data and if the pointer g is not null evaluate also the gradient of the residual. ;  ; double EvaluateLogL (const IModelFunction &func, const UnBinData &data, const double *p, int iWeight, bool extended, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy, unsigned nChunks=0);  evaluate the LogL given a model function and the data at the point x. ;  ; void EvaluateLogLGradient (const IModelFunction &func, const UnBinData &data, const double *p, double *grad, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy=::ROOT::EExecutionPolicy::kSequential, unsigned nChunks=0);  evaluate the LogL gradient given a model function and the data at the point p. ;  ; double EvaluatePdf (const IModelFunction &func, const UnBinData &data, const double *p, unsigned int ipoint, double *g=nullptr, double *h=nullptr, bool hasGrad=false, bool fullHessian=false);  evaluate the pdf contribution to the LogL given a model function and the BinPoint data. ;  ; double EvaluatePoissonBinPdf (const IModelFunction &func, const BinData &data, const double *x, unsigned int ipoint, double *g=nullptr, double *h=nullptr, bool hasGrad=false, bool fullHessian=false);  evaluate the pdf contribution to the Poisson LogL ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
Testability,log,logl,"func, . const UnBinData & ; data, . const double * ; p, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the LogL given a model function and the BinPoint data. ; If the pointer g is not null evaluate also the gradient of the pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 891 of file FitUtil.cxx. ◆ EvaluatePoissonBinPdf(). double ROOT::Fit::FitUtil::EvaluatePoissonBinPdf ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; x, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the Poisson LogL given a model function and the BinPoint data. ; evaluate the pdf (Poisson) contribution to the logl (return actually log of pdf) and its gradient (gradient of log(pdf)); If the pointer g is not null evaluate also the gradient of the Poisson pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 1297 of file FitUtil.cxx. ◆ EvaluatePoissonLogL(). double ROOT::Fit::FitUtil::EvaluatePoissonLogL ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the Poisson LogL given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation By default is extended, pass extend to false if want to be not extended (MultiNomial) . ◆ EvaluatePoissonLogLGradient(). void ROOT::Fit::FitUtil::EvaluatePoissonLogLGradient ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . double * ; grad, . unsi",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
Usability,simpl,simple,"ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the Chi2 gradient given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the Chi2 evaluation . ◆ EvaluateChi2Residual(). double ROOT::Fit::FitUtil::EvaluateChi2Residual ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . unsigned int ; i, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; useFullHessian = false . ). evaluate the residual contribution to the Chi2 given a model function and the BinPoint data and if the pointer g is not null evaluate also the gradient of the residual. ; evaluate the chi2 contribution (residual term) only for data with no coord-errors This function is used in the specialized least square algorithms like FUMILI or L.M.; If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used; if we have error on the coordinates the residual weight depends on the function value and the approximation used by Fumili and Levenberg-Marquardt cannot be used. Also the expected error and bin integral options should not be used in this case ; Definition at line 545 of file FitUtil.cxx. ◆ EvaluateLogL(). double ROOT::Fit::FitUtil::EvaluateLogL ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the LogL given a model function and the data at the point x. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ EvaluateLogLGradient(). void ROOT::Fit::FitUtil::EvaluateLogLGradient ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . u",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html
Availability,error,error,". ROOT: ROOT::Fit::HFitInterface Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Fit::HFitInterface Namespace Reference. Functions; bool AdjustError (const DataOptions &option, double &error, double value=1);  ; void ExamineRange (const TAxis *axis, std::pair< double, double > range, int &hxfirst, int &hxlast);  ; bool IsPointOutOfRange (const TF1 *func, const double *x);  . Function Documentation. ◆ AdjustError(). bool ROOT::Fit::HFitInterface::AdjustError ; (; const DataOptions & ; option, . double & ; error, . double ; value = 1 . ). Definition at line 60 of file HFitInterface.cxx. ◆ ExamineRange(). void ROOT::Fit::HFitInterface::ExamineRange ; (; const TAxis * ; axis, . std::pair< double, double > ; range, . int & ; hxfirst, . int & ; hxlast . ). Definition at line 79 of file HFitInterface.cxx. ◆ IsPointOutOfRange(). bool ROOT::Fit::HFitInterface::IsPointOutOfRange ; (; const TF1 * ; func, . const double * ; x . ). Definition at line 54 of file HFitInterface.cxx. ROOTFitHFitInterface. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Fit_1_1HFitInterface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1HFitInterface.html
Deployability,install,installation,". ROOT: ROOT::FoundationUtils Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::FoundationUtils Namespace Reference. Functions; bool CanConvertEnvValueToBool (const std::string &value);  ; bool ConvertEnvValueToBool (const std::string &value);  ; void ConvertToUnixPath (std::string &Path);  Transforms a file path by replacing its backslashes with slashes. ;  ; std::string GetCurrentDir ();  ; const char & GetEnvPathSeparator ();  ; const std::string & GetEtcDir ();  ; const std::string & GetFallbackRootSys ();  ; const std::string & GetIncludeDir ();  \ returns the include directory in the installation. ;  ; const std::string & GetPathSeparator ();  ; const std::string & GetRootSys ();  ; std::string MakePathRelative (const std::string &path, const std::string &base, bool isBuildingROOT=false);  ; static std::string str_tolower (std::string s);  . Function Documentation. ◆ CanConvertEnvValueToBool(). bool ROOT::FoundationUtils::CanConvertEnvValueToBool ; (; const std::string & ; value). Returnstrue if lowercase value is 1, on, true, 0, off, false ; Definition at line 214 of file FoundationUtils.cxx. ◆ ConvertEnvValueToBool(). bool ROOT::FoundationUtils::ConvertEnvValueToBool ; (; const std::string & ; value). Returnstrue if the lowercase string is 1, on, true; false if 0, off, false ; Definition at line 224 of file FoundationUtils.cxx. ◆ ConvertToUnixPath(). void ROOT::FoundationUtils::ConvertToUnixPath ; (; std::string & ; Path). Transforms a file path by replacing its backslashes with slashes. ; Definition at line 107 of file FoundationUtils.cxx. ◆ GetCurrentDir(). std::string ROOT::FoundationUtils::GetCurrentDir ; (; ). Returnsthe $PWD. ; Definition at line 47 of file FoundationUtils.cxx. ◆ GetEnvPathSeparator(). const char & ROOT::FoundationUtils::GetEnvPathSeparator ; (; ). inline . Returnsthe path separator for the PATH environment variable on the platform. ; Definition at line 54 of file Fou",MatchSource.WIKI,doc/master/namespaceROOT_1_1FoundationUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1FoundationUtils.html
Integrability,depend,depending,"on at line 47 of file FoundationUtils.cxx. ◆ GetEnvPathSeparator(). const char & ROOT::FoundationUtils::GetEnvPathSeparator ; (; ). inline . Returnsthe path separator for the PATH environment variable on the platform. ; Definition at line 54 of file FoundationUtils.hxx. ◆ GetEtcDir(). const std::string & ROOT::FoundationUtils::GetEtcDir ; (; ). Returnsthe sysconfig directory in the installation. ; Definition at line 195 of file FoundationUtils.cxx. ◆ GetFallbackRootSys(). const std::string & ROOT::FoundationUtils::GetFallbackRootSys ; (; ). Returnsthe fallback directory in the installation (eg. /usr/local/root/). ; Definition at line 111 of file FoundationUtils.cxx. ◆ GetIncludeDir(). const std::string & ROOT::FoundationUtils::GetIncludeDir ; (; ). \ returns the include directory in the installation. ; Definition at line 180 of file FoundationUtils.cxx. ◆ GetPathSeparator(). const std::string & ROOT::FoundationUtils::GetPathSeparator ; (; ). inline . Returnsthe path separator slash or backslash depending on the platform. ; Definition at line 43 of file FoundationUtils.hxx. ◆ GetRootSys(). const std::string & ROOT::FoundationUtils::GetRootSys ; (; ). Returnsthe rootsys directory in the installation. ; Definition at line 158 of file FoundationUtils.cxx. ◆ MakePathRelative(). std::string ROOT::FoundationUtils::MakePathRelative ; (; const std::string & ; path, . const std::string & ; base, . bool ; isBuildingROOT = false . ). Returnsthe relative path of path with respect to base. For instance, for path being ""/a/b/c/d"" and base ""/a/b"", returns ""c/d"".; Parameters. path- the input path; base- the base path to be removed from path.; isBuildingROOT- if true, it converts module directories such as core/base/inc/ to include/ . Definition at line 82 of file FoundationUtils.cxx. ◆ str_tolower(). static std::string ROOT::FoundationUtils::str_tolower ; (; std::string ; s). static . Definition at line 208 of file FoundationUtils.cxx. ROOTFoundationUtils. ROOT master - Reference Gu",MatchSource.WIKI,doc/master/namespaceROOT_1_1FoundationUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1FoundationUtils.html
Modifiability,variab,variable,"  . Function Documentation. ◆ CanConvertEnvValueToBool(). bool ROOT::FoundationUtils::CanConvertEnvValueToBool ; (; const std::string & ; value). Returnstrue if lowercase value is 1, on, true, 0, off, false ; Definition at line 214 of file FoundationUtils.cxx. ◆ ConvertEnvValueToBool(). bool ROOT::FoundationUtils::ConvertEnvValueToBool ; (; const std::string & ; value). Returnstrue if the lowercase string is 1, on, true; false if 0, off, false ; Definition at line 224 of file FoundationUtils.cxx. ◆ ConvertToUnixPath(). void ROOT::FoundationUtils::ConvertToUnixPath ; (; std::string & ; Path). Transforms a file path by replacing its backslashes with slashes. ; Definition at line 107 of file FoundationUtils.cxx. ◆ GetCurrentDir(). std::string ROOT::FoundationUtils::GetCurrentDir ; (; ). Returnsthe $PWD. ; Definition at line 47 of file FoundationUtils.cxx. ◆ GetEnvPathSeparator(). const char & ROOT::FoundationUtils::GetEnvPathSeparator ; (; ). inline . Returnsthe path separator for the PATH environment variable on the platform. ; Definition at line 54 of file FoundationUtils.hxx. ◆ GetEtcDir(). const std::string & ROOT::FoundationUtils::GetEtcDir ; (; ). Returnsthe sysconfig directory in the installation. ; Definition at line 195 of file FoundationUtils.cxx. ◆ GetFallbackRootSys(). const std::string & ROOT::FoundationUtils::GetFallbackRootSys ; (; ). Returnsthe fallback directory in the installation (eg. /usr/local/root/). ; Definition at line 111 of file FoundationUtils.cxx. ◆ GetIncludeDir(). const std::string & ROOT::FoundationUtils::GetIncludeDir ; (; ). \ returns the include directory in the installation. ; Definition at line 180 of file FoundationUtils.cxx. ◆ GetPathSeparator(). const std::string & ROOT::FoundationUtils::GetPathSeparator ; (; ). inline . Returnsthe path separator slash or backslash depending on the platform. ; Definition at line 43 of file FoundationUtils.hxx. ◆ GetRootSys(). const std::string & ROOT::FoundationUtils::GetRootSys ; (; ). Returnsthe ",MatchSource.WIKI,doc/master/namespaceROOT_1_1FoundationUtils.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1FoundationUtils.html
Availability,error,error,"ation of the branch proxy around an stl container of array of T. More...;  ; class  TStlImpProxy;  Template of the Concrete Implementation of the branch proxy around an stl container of T. More...;  ; class  TStlObjProxy;  ; class  TStlProxy;  Base class for the proxy around STL containers. More...;  ; class  TStlSimpleProxy;  ; class  TTreeGeneratorBase;  Base class for code generators like TTreeProxyGenerator and TTreeReaderGenerator. More...;  ; class  TTreeProxyGenerator;  ; class  TTreeReaderArrayBase;  Base class of TTreeReaderArray. More...;  ; class  TTreeReaderDescriptor;  ; class  TTreeReaderGenerator;  ; class  TTreeReaderOpaqueValue;  Read a value in a branch without knowledge of its type. More...;  ; class  TTreeReaderValueBase;  Base class of TTreeReaderValue. More...;  ; class  TTreeView;  ; class  TVirtualCollectionReader;  ; class  TypedIter;  ; struct  UniqueLockRecurseCount;  ; struct  Update;  . Typedefs; using ErrorSystemMsgHandlerFunc_t = std::function< const char *()>;  Retrieves the error string associated with the last system error. ;  ; using FreeIfTMapFile_t = bool(void *);  ; using GetMapFileMapllocDesc_t = void *(void *);  ; typedef TROOT *(* GetROOTFun_t) ();  ; typedef std::map< std::string, std::string > MembersMap_t;  ; using RUidColl = std::vector< Int_t >;  ; typedef TArrayProxy< TArrayType< bool > > TArrayBoolProxy;  ; typedef TArrayProxy< TArrayType< Double32_t > > TArrayDouble32Proxy;  ; typedef TArrayProxy< TArrayType< Double_t > > TArrayDoubleProxy;  ; typedef TArrayProxy< TArrayType< Float16_t > > TArrayFloat16Proxy;  ; typedef TArrayProxy< TArrayType< Float_t > > TArrayFloatProxy;  ; typedef TArrayProxy< TArrayType< Int_t > > TArrayIntProxy;  ; typedef TArrayProxy< TArrayType< Long64_t > > TArrayLong64Proxy;  ; typedef TArrayProxy< TArrayType< Long_t > > TArrayLongProxy;  ; typedef TArrayProxy< TArrayType< UShort_t > > TArrayShortProxy;  ; typedef TArrayProxy< TArrayType< UChar_t > > TArrayUCharProxy;  ; typedef TArrayProxy< ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
Deployability,release,release,"bject in TClonesArray. More...;  ; struct  TClassGetClassHelper;  ; struct  TClassGetClassHelper< std::pair< F, S > >;  ; class  TClonesArrayOwnershipRAII;  ; class  TDefaultInitBehavior;  ; struct  TDirectoryAtomicAdapter;  Internal class used in the implementation of gDirectory The objects of type TDirectoryAtomicAdapter should only be used inside the thread that created them. More...;  ; class  TExecutor;  This class implements the interface to execute the same task multiple times, sequentially or in parallel depending on the execution policy passed as a first parameter on construction, and possibly with different arguments every time. More...;  ; struct  TF1Builder;  Internal class used by TF1 for defining template specialization for different TF1 constructors More...;  ; struct  TF1Builder< const char * >;  TF1 building from a string used to build a TFormula based on a lambda function. More...;  ; struct  TF1Builder< Func * >;  ; class  TFriendProxy;  ; class  TFriendProxyDescriptor;  ; class  TGILRAII;  Class to acquire and release the Python GIL where it applies, i.e. More...;  ; struct  THashConsistencyHolder;  ; class  THnBaseBinIter;  Iterator over THnBase bins (internal implementation). More...;  ; class  THnBaseBrowsable;  TBrowser helper for THnBase. More...;  ; class  TImpProxy;  Template of the proxy around objects. More...;  ; class  TInitBehavior;  ; struct  TMultiArrayType;  Helper class for proxy around multi dimension array. More...;  ; class  TNamedBranchProxy;  ; class  TObjProxy;  ; class  TOperatorNewHelper;  ; class  TParBranchProcessingRAII;  ; class  TQObjectInitBehavior;  ; class  TROOTAllocator;  ; struct  TSchemaHelper;  ; class  TSchemaRuleProcessor;  ; struct  TSchemaType;  ; class  TSpinLockGuard;  A spin mutex-as-code-guard class. More...;  ; class  TStdBitsetHelper;  ; class  TStlArrayProxy;  Template of the Concrete Implementation of the branch proxy around an stl container of array of T. More...;  ; class  TStlImpProxy;  Template",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
Integrability,protocol,protocol,":*)(const T *, const double *)>;  ; struct  GetFunctorType< T(F::*)(T *, double *) const >;  ; struct  GetFunctorType< T(F::*)(T *, double *)>;  ; struct  InterpreterMutexRegistrationRAII;  ; struct  ParsingStateRAII;  RAII used to store Parser, Sema, Preprocessor state for recursive parsing. More...;  ; struct  RBaseType;  ; struct  RCast;  ; struct  RCast< T, false, false >;  ; struct  RCast< T, false, true >;  ; class  RConcurrentHashColl;  This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N indexes (0 to size - 1). More...;  ; struct  RSlotStackRAII;  A RAII object to pop and push slot numbers from a RSlotStack object. More...;  ; class  RStl;  ; class  RTaskArenaWrapper;  Wrapper for tbb::task_arena. More...;  ; class  TArrayCharProxy;  Concrete Implementation of the branch proxy around the data members which are array of char. More...;  ; class  TArrayProxy;  Template for concrete implementation of proxy around array of T. More...;  ; struct  TArrayType;  Helper template to be able to determine and use array dime",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
Modifiability,portab,portable," T, false, false >;  ; struct  RCast< T, false, true >;  ; class  RConcurrentHashColl;  This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N indexes (0 to size - 1). More...;  ; struct  RSlotStackRAII;  A RAII object to pop and push slot numbers from a RSlotStack object. More...;  ; class  RStl;  ; class  RTaskArenaWrapper;  Wrapper for tbb::task_arena. More...;  ; class  TArrayCharProxy;  Concrete Implementation of the branch proxy around the data members which are array of char. More...;  ; class  TArrayProxy;  Template for concrete implementation of proxy around array of T. More...;  ; struct  TArrayType;  Helper template to be able to determine and use array dimensions. More...;  ; struct  TArrayType< T, 0 >;  Helper class for proxy around multi dimension array. More...;  ; class  TAtomicPointer;  Helper class to manage atomic pointers. More...;  ; class  TBranchCacheInfo;  ; class  TBranchDescriptor;  ; class  TBranchIMTHelper;  A helper class for managing IMT work during TTree:Fill operations. More...;  ; class  TB",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
Performance,multi-thread,multi-threading,"ase, 1 when this a split clases inside a TClonesArray, 2 when this is a split classes inside an STL container. More...;  . Functions; tbb::isolated_task_group * CastToTG (void *p);  ; bool ContaineeInheritsFrom (TClass *cl, TClass *base);  Return true if 'cl' inherits from 'base'. ;  ; void DefaultStreamer (TBuffer &R__b, const TClass *cl, void *objpointer);  Default streamer implementation used by ClassDefInline to avoid requirement to include TBuffer.h. ;  ; const TQObjectInitBehavior * DefineBehavior (TQObject *, TQObject *);  ; const TInitBehavior * DefineBehavior (void *, void *);  ; bool DeleteChangesMemory ();  ; bool DeleteChangesMemoryImpl ();  ; void DisableParBranchProcessing ();  Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ;  ; const TCollection & EmptyCollection ();  Return an empty collection for use with nullptr TRangeCast. ;  ; void EnableParBranchProcessing ();  Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ;  ; void EvalParMultiDim (TF1 *func, Double_t *out, const Double_t *x, std::size_t size, std::size_t rows, Double_t *params);  ; void GenericShowMembers (const char *topClassName, void *obj, TMemberInspector &R__insp, bool transientMember);  ; TString GetArrayType (TStreamerElement *element, const char *subtype, TTreeProxyGenerator::EContainer container);  ; template<typename T > ; TClass * GetClassHelper (Bool_t load, Bool_t silent, std::false_type);  ; template<typename T > ; TClass * GetClassHelper (Bool_t, Bool_t, std::true_type);  ; std::string GetDemangledTypeName (const std::type_info &t);  ; ErrorSystemMsgHandlerFunc_t GetErrorSystemMsgHandler ();  ; std::shared_ptr< ROOT::Internal::RTaskArenaWrapper > GetGlobalTaskArena (unsigned maxConcurrency=0);  Factory function returning a shared pointer to the instance of the global RTaskArenaWrapper. ;  ; TROOT * GetROOT1 ();  ; TROOT * GetROOT2 ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
Safety,safe,safe," namespace  TDS;  ; namespace  TreeUtils;  Namespace hosting functions and classes to retrieve tree information for internal use. ;  ; namespace  TThreadedObjectUtils;  ; namespace  VecOps;  . Classes; class  ClassDefGenerateInitInstanceLocalInjector;  ; class  DictSelectionReader;  ; struct  GetFunctorType;  Internal class used by TF1 for obtaining the type from a functor out of the set of valid operator() signatures. More...;  ; struct  GetFunctorType< T(F::*)(const T *, const double *) const >;  ; struct  GetFunctorType< T(F::*)(const T *, const double *)>;  ; struct  GetFunctorType< T(F::*)(T *, double *) const >;  ; struct  GetFunctorType< T(F::*)(T *, double *)>;  ; struct  InterpreterMutexRegistrationRAII;  ; struct  ParsingStateRAII;  RAII used to store Parser, Sema, Preprocessor state for recursive parsing. More...;  ; struct  RBaseType;  ; struct  RCast;  ; struct  RCast< T, false, false >;  ; struct  RCast< T, false, true >;  ; class  RConcurrentHashColl;  This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
Security,hash,hash," namespace  TDS;  ; namespace  TreeUtils;  Namespace hosting functions and classes to retrieve tree information for internal use. ;  ; namespace  TThreadedObjectUtils;  ; namespace  VecOps;  . Classes; class  ClassDefGenerateInitInstanceLocalInjector;  ; class  DictSelectionReader;  ; struct  GetFunctorType;  Internal class used by TF1 for obtaining the type from a functor out of the set of valid operator() signatures. More...;  ; struct  GetFunctorType< T(F::*)(const T *, const double *) const >;  ; struct  GetFunctorType< T(F::*)(const T *, const double *)>;  ; struct  GetFunctorType< T(F::*)(T *, double *) const >;  ; struct  GetFunctorType< T(F::*)(T *, double *)>;  ; struct  InterpreterMutexRegistrationRAII;  ; struct  ParsingStateRAII;  RAII used to store Parser, Sema, Preprocessor state for recursive parsing. More...;  ; struct  RBaseType;  ; struct  RCast;  ; struct  RCast< T, false, false >;  ; struct  RCast< T, false, true >;  ; class  RConcurrentHashColl;  This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
Testability,log,logical,"ltype(opPtr);  Internal class used by TF1 to get the right operator() signature from a Functor with several ones. ;  ; template<typename T , typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<typename T > ; constexpr auto hasBeginEnd (int) -> decltype(std::begin(std::declval< T >()), std::end(std::declval< T >()), true);  ; Bool_t HasConsistentHashMember (const char *clName);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; Bool_t HasConsistentHashMember (TClass &clRef);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; static Bool_t & IsImplicitMTEnabledImpl ();  Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ;  ; Bool_t IsParBranchProcessingEnabled ();  Returns true if parallel branch processing is enabled. ;  ; int LogicalCPUBandwidthControl ();  Returns the available number of logical cores. ;  ; void MinimalErrorHandler (Int_t level, Bool_t abort_bool, const char *location, const char *msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void NotifyDirected (Detail::TBranchProxy *x);  ; std::ostream & operator<< (std::ostream &os, const RConcurrentHashColl::HashValue &h);  ; bool operator== (const RConcurrentHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ clas",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
Usability,simpl,simple," typename F > ; auto GetTheRightOp (T(F::*opPtr)(T *, double *)) -> decltype(opPtr);  ; static TVersionCheck gVersionCheck (ROOT_VERSION_CODE);  ; template<typename > ; constexpr bool hasBeginEnd (...);  ; template<typename T > ; constexpr auto hasBeginEnd (int) -> decltype(std::begin(std::declval< T >()), std::end(std::declval< T >()), true);  ; Bool_t HasConsistentHashMember (const char *clName);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; Bool_t HasConsistentHashMember (TClass &clRef);  Return true is the Hash/RecursiveRemove setup is consistent, i.e. ;  ; static Bool_t & IsImplicitMTEnabledImpl ();  Keeps track of the status of ImplicitMT w/o resorting to the load of libImt. ;  ; Bool_t IsParBranchProcessingEnabled ();  Returns true if parallel branch processing is enabled. ;  ; int LogicalCPUBandwidthControl ();  Returns the available number of logical cores. ;  ; void MinimalErrorHandler (Int_t level, Bool_t abort_bool, const char *location, const char *msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void NotifyDirected (Detail::TBranchProxy *x);  ; std::ostream & operator<< (std::ostream &os, const RConcurrentHashColl::HashValue &h);  ; bool operator== (const RConcurrentHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs);  ; template<typename T > ; static T ParallelReduceHelper (const std::vector< T > &objs, const std::function< T(T a, T b)> &redfunc);  A helper function to implement the TThreadExecutor::ParallelReduce methods. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, const char *classname);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; static bool R__AddPragmaForClass (TTreeProxyGenerator *gen, TClass *cl);  Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be needed. ;  ; void ReleaseDefaultErrorHandler ();  Destructs res",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html
Availability,error,errors," TypeList<>, const RColumnReadersInfo &, const std::string &=""nominal"");  ; unsigned int GetColumnWidth (const std::vector< std::string > &names, const unsigned int minColumnSpace=8u);  Get optimal column width for printing a table given the names and the desired minimal space between columns. ;  ; std::string GetDataSourceLabel (const ROOT::RDF::RNode &node);  ; std::vector< std::string > GetFilterNames (const std::shared_ptr< RLoopManager > &loopManager);  ; std::string GetLeafTypeName (TLeaf *leaf, const std::string &colName);  ; unsigned int GetNSlots ();  ; template<std::size_t N, typename... Ts> ; decltype(auto) GetNthElement (Ts &&...args);  ; std::vector< std::string > GetValidatedArgTypes (const ColumnNames_t &colNames, const RColumnRegister &colRegister, TTree *tree, RDataSource *ds, const std::string &context, bool vector2RVec);  ; ColumnNames_t GetValidatedColumnNames (RLoopManager &lm, const unsigned int nColumns, const ColumnNames_t &columns, const RColumnRegister &colRegister, RDataSource *ds);  Given the desired number of columns and the user-provided list of columns: ;  ; template<typename dtype > ; ULong64_t GetVectorAddress (std::vector< dtype > &p);  ; Long64_t InterpreterCalc (const std::string &code, const std::string &context="""");  Jit code in the interpreter with TInterpreter::Calc, throw in case of errors. ;  ; void InterpreterDeclare (const std::string &code);  Declare code in the interpreter via the TInterpreter::Declare method, throw in case of errors. ;  ; bool IsInternalColumn (std::string_view colName);  Whether custom column with name colName is an ""internal"" column such as rdfentry_ or rdfslot_. ;  ; bool IsStrInVec (const std::string &str, const std::vector< std::string > &vec);  ; std::string JitBuildAction (const ColumnNames_t &cols, std::shared_ptr< RDFDetail::RNodeBase > *prevNode, const std::type_info &helperArgType, const std::type_info &at, void *helperArgOnHeap, TTree *tree, const unsigned int nSlots, const RColumnRegister &c",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
Integrability,wrap,wrap,". ROOT: ROOT::Internal::RDF Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Functions |; Variables ; ROOT::Internal::RDF Namespace Reference. Namespaces; namespace  GraphDrawing;  . Classes; class  ArrayPtrVisitor;  ; struct  CallGuaranteedOrder;  Struct to wrap the call to a function with a guaranteed order of execution of its arguments. More...;  ; struct  ColumnType;  ; struct  ColumnType< ROOT::RVec< ROOT::RVec< T > >, false >;  ; struct  ColumnType< ROOT::RVec< T >, true >;  ; struct  Disjunction;  ; struct  Disjunction< B1 >;  ; struct  Disjunction< B1, Bn... >;  ; class  DisplayHelper;  ; struct  IsDataContainer;  Check for container traits. More...;  ; struct  IsDataContainer< ROOT::VecOps::RVec< bool > >;  ; struct  IsDataContainer< std::span< T > >;  ; struct  IsDataContainer< std::vector< bool > >;  ; struct  IsVector_t;  Detect whether a type is an instantiation of vector<T,A> More...;  ; struct  IsVector_t< std::vector< T, A > >;  ; class  PassAsVecHelper;  ; class  PassAsVecHelper< std::index_sequence< N... >, T, F >;  ; class  RAction;  A RDataFrame node that produces a result. More...;  ; class  RActionBase;  ; class  RCallback;  ; struct  RColumnReadersInfo;  This type aggregates some of the arguments passed to GetColumnReaders. More...;  ; class  RColumnRegister;  A binder for user-defined columns, variations and aliases. More...;  ; class  RDefineReader;  Column reader for defined columns. More...;  ; class  RDefinesWithReaders;  A helper type that keeps track of RDefine objects and their corresponding RDefineReaders. More...;  ; class  RDisplayElement;  Helper class to let Display print compact tabular representations of the events. More...;  ; class  RDSColumnReader;  Column reader type that deals with values read from RDataSources. More...;  ; struct  RemoveFirstParameterIf;  type is TypeList if MustRemove is false, otherwise it is a TypeList with the firs",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
Modifiability,variab,variable-sized,"ore...;  ; struct  ValueType;  ; struct  ValueType< ROOT::VecOps::RVec< T >, false >;  ; struct  ValueType< T, false >;  . Typedefs; using Callback_t = std::function< void(unsigned int)>;  ; template<bool IsSingleColumn, typename Ret_t > ; using ColumnType_t = typename ColumnType< Ret_t, IsSingleColumn >::type;  When varying a single column, Ret_t is RVec<T> and ColumnType_t is T. ;  ; template<bool MustRemove, typename TypeList > ; using RemoveFirstParameterIf_t = typename RemoveFirstParameterIf< MustRemove, TypeList >::type;  ; template<bool MustRemove, typename TypeList > ; using RemoveFirstTwoParametersIf_t = typename RemoveFirstTwoParametersIf< MustRemove, TypeList >::type;  ; using SnapshotPtr_t = ROOT::RDF::RResultPtr< ROOT::RDF::RInterface< ROOT::Detail::RDF::RLoopManager, void > >;  . Functions; std::pair< std::vector< std::string >, std::vector< std::string > > AddSizeBranches (const std::vector< std::string > &branches, TTree *tree, std::vector< std::string > &&colsWithoutAliases, std::vector< std::string > &&colsWithAliases);  Return copies of colsWithoutAliases and colsWithAliases with size branches for variable-sized array branches added in the right positions (i.e. ;  ; bool AtLeastOneEmptyString (const std::vector< std::string_view > strings);  ; std::shared_ptr< RJittedDefine > BookDefineJit (std::string_view name, std::string_view expression, RLoopManager &lm, RDataSource *ds, const RColumnRegister &colRegister, const ColumnNames_t &branches, std::shared_ptr< RNodeBase > *upcastNodeOnHeap);  Book the jitting of a Define call. ;  ; std::shared_ptr< RJittedDefine > BookDefinePerSampleJit (std::string_view name, std::string_view expression, RLoopManager &lm, const RColumnRegister &colRegister, std::shared_ptr< RNodeBase > *upcastNodeOnHeap);  Book the jitting of a DefinePerSample call. ;  ; std::shared_ptr< RDFDetail::RJittedFilter > BookFilterJit (std::shared_ptr< RDFDetail::RNodeBase > *prevNodeOnHeap, std::string_view name, std::string_view express",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
Performance,cache,cache,"ete RVariation, which forwards all calls to it RJittedVariation is a placeholder that is inserted in the computation graph in place of a RVariation that will be just-in-time compiled. More...;  ; struct  RMetaDataJson;  ; struct  RNewSampleFlag;  ; class  RNewSampleNotifier;  ; class  ROneTimeCallback;  ; struct  RootConversionTraits;  ; struct  RootConversionTraits< bool >;  ; struct  RootConversionTraits< double >;  ; struct  RootConversionTraits< float >;  ; struct  RootConversionTraits< int16_t >;  ; struct  RootConversionTraits< int32_t >;  ; struct  RootConversionTraits< int8_t >;  ; struct  RootConversionTraits< Long64_t >;  ; struct  RootConversionTraits< std::string >;  ; struct  RootConversionTraits< uint16_t >;  ; struct  RootConversionTraits< uint32_t >;  ; struct  RootConversionTraits< uint8_t >;  ; struct  RootConversionTraits< ULong64_t >;  ; class  RRootDS;  This class is unused and it has only been implemented as a proof of concept. More...;  ; class  RStringCache;  A Thread-safe cache for strings. More...;  ; class  RTreeColumnReader;  RTreeColumnReader specialization for TTree values read via TTreeReaderValues. More...;  ; class  RTreeColumnReader< RVec< bool > >;  RTreeColumnReader specialization for arrays of boolean values read via TTreeReaderArrays. More...;  ; class  RTreeColumnReader< RVec< T > >;  RTreeColumnReader specialization for TTree values read via TTreeReaderArrays. More...;  ; class  RTreeColumnReader< std::array< T, N > >;  RTreeColumnReader specialization for TTree values read via TTreeReaderArrays. ;  ; class  RTreeOpaqueColumnReader;  ; class  RVariation;  ; class  RVariationBase;  This type includes all parts of RVariation that do not depend on the callable signature. More...;  ; class  RVariationReader;  Column reader that reads the value for a specific column, variation and slot. More...;  ; class  RVariationsWithReaders;  ; class  RVariedAction;  Just like an RAction, but it has N action helpers and N previous nodes (N is th",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
Safety,safe,safe,"ete RVariation, which forwards all calls to it RJittedVariation is a placeholder that is inserted in the computation graph in place of a RVariation that will be just-in-time compiled. More...;  ; struct  RMetaDataJson;  ; struct  RNewSampleFlag;  ; class  RNewSampleNotifier;  ; class  ROneTimeCallback;  ; struct  RootConversionTraits;  ; struct  RootConversionTraits< bool >;  ; struct  RootConversionTraits< double >;  ; struct  RootConversionTraits< float >;  ; struct  RootConversionTraits< int16_t >;  ; struct  RootConversionTraits< int32_t >;  ; struct  RootConversionTraits< int8_t >;  ; struct  RootConversionTraits< Long64_t >;  ; struct  RootConversionTraits< std::string >;  ; struct  RootConversionTraits< uint16_t >;  ; struct  RootConversionTraits< uint32_t >;  ; struct  RootConversionTraits< uint8_t >;  ; struct  RootConversionTraits< ULong64_t >;  ; class  RRootDS;  This class is unused and it has only been implemented as a proof of concept. More...;  ; class  RStringCache;  A Thread-safe cache for strings. More...;  ; class  RTreeColumnReader;  RTreeColumnReader specialization for TTree values read via TTreeReaderValues. More...;  ; class  RTreeColumnReader< RVec< bool > >;  RTreeColumnReader specialization for arrays of boolean values read via TTreeReaderArrays. More...;  ; class  RTreeColumnReader< RVec< T > >;  RTreeColumnReader specialization for TTree values read via TTreeReaderArrays. More...;  ; class  RTreeColumnReader< std::array< T, N > >;  RTreeColumnReader specialization for TTree values read via TTreeReaderArrays. ;  ; class  RTreeOpaqueColumnReader;  ; class  RVariation;  ; class  RVariationBase;  This type includes all parts of RVariation that do not depend on the callable signature. More...;  ; class  RVariationReader;  Column reader that reads the value for a specific column, variation and slot. More...;  ; class  RVariationsWithReaders;  ; class  RVariedAction;  Just like an RAction, but it has N action helpers and N previous nodes (N is th",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html
Energy Efficiency,power,power,"T's. More...;  ; class  SmallVectorTemplateBase< T, true >;  SmallVectorTemplateBase<TriviallyCopyable = true> - This is where we put method implementations that are designed to work with trivially copyable T's. More...;  ; class  SmallVectorTemplateCommon;  This is the part of SmallVectorTemplateBase which does not depend on whether the type T is a POD. More...;  . Typedefs; template<typename T > ; using RVec = ROOT::VecOps::RVec< T >;  . Functions; constexpr bool All (const bool *vals, std::size_t size);  ; template<typename... T> ; std::size_t GetVectorsSize (const std::string &id, const RVec< T > &... vs);  ; template<typename Tuple_t , std::size_t... Is> ; auto MapFromTuple (Tuple_t &&t, std::index_sequence< Is... >) -> decltype(MapImpl(std::get< std::tuple_size< Tuple_t >::value - 1 >(t), std::get< Is >(t)...));  ; template<typename F , typename... RVecs> ; auto MapImpl (F &&f, RVecs &&... vs) -> RVec< decltype(f(vs[0]...))>;  ; uint64_t NextPowerOf2 (uint64_t A);  Return the next power of two (in 64-bits) that is strictly greater than A. ;  ; template<typename T > ; void ResetView (RVec< T > &v, T *addr, std::size_t sz);  An unsafe function to reset the buffer for which this RVec is acting as a view. ;  ; template<typename ForwardIt > ; void UninitializedValueConstruct (ForwardIt first, ForwardIt last);  ; template<typename T , bool TriviallyCopyable> ;  void (off) SmallVectorTemplateBase< T;  . Typedef Documentation. ◆ RVec. template<typename T > . using ROOT::Internal::VecOps::RVec = typedef ROOT::VecOps::RVec<T>. Definition at line 69 of file RVec.hxx. Function Documentation. ◆ All(). constexpr bool ROOT::Internal::VecOps::All ; (; const bool * ; vals, . std::size_t ; size . ). constexpr . Definition at line 79 of file RVec.hxx. ◆ GetVectorsSize(). template<typename... T> . std::size_t ROOT::Internal::VecOps::GetVectorsSize ; (; const std::string & ; id, . const RVec< T > &... ; vs . ). Definition at line 88 of file RVec.hxx. ◆ MapFromTuple(). template<type",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1VecOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1VecOps.html
Integrability,depend,depend,"e;  The size of the inline storage of an RVec. More...;  ; struct  SmallVectorAlignmentAndSize;  Used to figure out the offset of the first element of an RVec. More...;  ; class  SmallVectorBase;  This is all the stuff common to all SmallVectors. More...;  ; struct  SmallVectorStorage;  Storage for the SmallVector elements. More...;  ; struct  SmallVectorStorage< T, 0 >;  We need the storage to be properly aligned even for small-size of 0 so that the pointer math in SmallVectorTemplateCommon::getFirstEl() is well-defined. More...;  ; class  SmallVectorTemplateBase;  SmallVectorTemplateBase<TriviallyCopyable = false> - This is where we put method implementations that are designed to work with non-trivial T's. More...;  ; class  SmallVectorTemplateBase< T, true >;  SmallVectorTemplateBase<TriviallyCopyable = true> - This is where we put method implementations that are designed to work with trivially copyable T's. More...;  ; class  SmallVectorTemplateCommon;  This is the part of SmallVectorTemplateBase which does not depend on whether the type T is a POD. More...;  . Typedefs; template<typename T > ; using RVec = ROOT::VecOps::RVec< T >;  . Functions; constexpr bool All (const bool *vals, std::size_t size);  ; template<typename... T> ; std::size_t GetVectorsSize (const std::string &id, const RVec< T > &... vs);  ; template<typename Tuple_t , std::size_t... Is> ; auto MapFromTuple (Tuple_t &&t, std::index_sequence< Is... >) -> decltype(MapImpl(std::get< std::tuple_size< Tuple_t >::value - 1 >(t), std::get< Is >(t)...));  ; template<typename F , typename... RVecs> ; auto MapImpl (F &&f, RVecs &&... vs) -> RVec< decltype(f(vs[0]...))>;  ; uint64_t NextPowerOf2 (uint64_t A);  Return the next power of two (in 64-bits) that is strictly greater than A. ;  ; template<typename T > ; void ResetView (RVec< T > &v, T *addr, std::size_t sz);  An unsafe function to reset the buffer for which this RVec is acting as a view. ;  ; template<typename ForwardIt > ; void UninitializedValueC",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1VecOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1VecOps.html
Safety,unsafe,unsafe,"plementations that are designed to work with trivially copyable T's. More...;  ; class  SmallVectorTemplateCommon;  This is the part of SmallVectorTemplateBase which does not depend on whether the type T is a POD. More...;  . Typedefs; template<typename T > ; using RVec = ROOT::VecOps::RVec< T >;  . Functions; constexpr bool All (const bool *vals, std::size_t size);  ; template<typename... T> ; std::size_t GetVectorsSize (const std::string &id, const RVec< T > &... vs);  ; template<typename Tuple_t , std::size_t... Is> ; auto MapFromTuple (Tuple_t &&t, std::index_sequence< Is... >) -> decltype(MapImpl(std::get< std::tuple_size< Tuple_t >::value - 1 >(t), std::get< Is >(t)...));  ; template<typename F , typename... RVecs> ; auto MapImpl (F &&f, RVecs &&... vs) -> RVec< decltype(f(vs[0]...))>;  ; uint64_t NextPowerOf2 (uint64_t A);  Return the next power of two (in 64-bits) that is strictly greater than A. ;  ; template<typename T > ; void ResetView (RVec< T > &v, T *addr, std::size_t sz);  An unsafe function to reset the buffer for which this RVec is acting as a view. ;  ; template<typename ForwardIt > ; void UninitializedValueConstruct (ForwardIt first, ForwardIt last);  ; template<typename T , bool TriviallyCopyable> ;  void (off) SmallVectorTemplateBase< T;  . Typedef Documentation. ◆ RVec. template<typename T > . using ROOT::Internal::VecOps::RVec = typedef ROOT::VecOps::RVec<T>. Definition at line 69 of file RVec.hxx. Function Documentation. ◆ All(). constexpr bool ROOT::Internal::VecOps::All ; (; const bool * ; vals, . std::size_t ; size . ). constexpr . Definition at line 79 of file RVec.hxx. ◆ GetVectorsSize(). template<typename... T> . std::size_t ROOT::Internal::VecOps::GetVectorsSize ; (; const std::string & ; id, . const RVec< T > &... ; vs . ). Definition at line 88 of file RVec.hxx. ◆ MapFromTuple(). template<typename Tuple_t , std::size_t... Is> . auto ROOT::Internal::VecOps::MapFromTuple ; (; Tuple_t && ; t, . std::index_sequence< Is... > ;  . ); -> d",MatchSource.WIKI,doc/master/namespaceROOT_1_1Internal_1_1VecOps.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1VecOps.html
Availability,error,error,"ationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  AssignSym;  Force Expression evaluation from general to symmetric. More...;  ; class  AxisAngle;  AxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis. More...;  ; class  BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  BasicFitMethodFunction;  FitMethodFun",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
Deployability,integrat,integration,"space  CholeskyDecompHelpers;  helpers for CholeskyDecomp ;  ; namespace  detail;  ; namespace  GenAlgoOptUtil;  ; namespace  GenVector;  ; namespace  GenVector_detail;  ; namespace  GSLRootHelper;  Helper functions to test convergence of Root-Finding algorithms. ;  ; namespace  GSLSimAn;  ; namespace  gv_detail;  ; namespace  Impl;  ; namespace  IntegMultiDim;  ; namespace  IntegOneDim;  ; namespace  IntegOptionsUtil;  ; namespace  Integration;  ; namespace  IntegrationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  Assig",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
Energy Efficiency,adapt,adaptive,"space  CholeskyDecompHelpers;  helpers for CholeskyDecomp ;  ; namespace  detail;  ; namespace  GenAlgoOptUtil;  ; namespace  GenVector;  ; namespace  GenVector_detail;  ; namespace  GSLRootHelper;  Helper functions to test convergence of Root-Finding algorithms. ;  ; namespace  GSLSimAn;  ; namespace  gv_detail;  ; namespace  Impl;  ; namespace  IntegMultiDim;  ; namespace  IntegOneDim;  ; namespace  IntegOptionsUtil;  ; namespace  Integration;  ; namespace  IntegrationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  Assig",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
Integrability,integrat,integration,"space  CholeskyDecompHelpers;  helpers for CholeskyDecomp ;  ; namespace  detail;  ; namespace  GenAlgoOptUtil;  ; namespace  GenVector;  ; namespace  GenVector_detail;  ; namespace  GSLRootHelper;  Helper functions to test convergence of Root-Finding algorithms. ;  ; namespace  GSLSimAn;  ; namespace  gv_detail;  ; namespace  Impl;  ; namespace  IntegMultiDim;  ; namespace  IntegOneDim;  ; namespace  IntegOptionsUtil;  ; namespace  Integration;  ; namespace  IntegrationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  Assig",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
Modifiability,adapt,adaptive,"space  CholeskyDecompHelpers;  helpers for CholeskyDecomp ;  ; namespace  detail;  ; namespace  GenAlgoOptUtil;  ; namespace  GenVector;  ; namespace  GenVector_detail;  ; namespace  GSLRootHelper;  Helper functions to test convergence of Root-Finding algorithms. ;  ; namespace  GSLSimAn;  ; namespace  gv_detail;  ; namespace  Impl;  ; namespace  IntegMultiDim;  ; namespace  IntegOneDim;  ; namespace  IntegOptionsUtil;  ; namespace  Integration;  ; namespace  IntegrationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  Assig",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
Performance,perform,performing,"ass  BasicMinimizer;  Base Minimizer class, which defines the basic functionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transformation etc. More...;  ; class  BinaryOp;  BinaryOperation class A class representing binary operators in the parse tree. More...;  ; class  BinaryOpCopyL;  Binary Operation class with value storage for the left argument. More...;  ; class  BinaryOpCopyR;  Binary Operation class with value storage for the right argument. More...;  ; class  Boost;  Lorentz boost class with the (4D) transformation represented internally by a 4x4 orthosymplectic matrix. More...;  ; class  BoostX;  Class representing a Lorentz Boost along the X axis, by beta. More...;  ; class  BoostY;  Class representing a Lorentz Boost along the Y axis, by beta. More...;  ; class  BoostZ;  Class representing a Lorentz Boost along the Z axis, by beta. More...;  ; class  BrentMinimizer1D;  User class for performing function minimization. More...;  ; class  BrentRootFinder;  Class for finding the root of a one dimensional function using the Brent algorithm. More...;  ; class  Cartesian2D;  Class describing a 2D cartesian coordinate system (x, y coordinates) More...;  ; class  Cartesian3D;  Class describing a 3D cartesian coordinate system (x, y, z coordinates) More...;  ; struct  CDFWrapper;  ; class  ChebyshevApprox;  Class describing a Chebyshev series which can be used to approximate a function in a defined range [a,b] using Chebyshev polynomials. More...;  ; class  ChebyshevPol;  ; class  CholeskyDecomp;  class to compute the Cholesky decomposition of a matrix More...;  ; class  CholeskyDecompGenDim;  class to compute the Cholesky decomposition of a matrix More...;  ; class  CholInverter;  ; struct  CompileTimeChecker;  ; struct  CompileTimeChecker< false >;  ; class  Constant;  Constant expression class A class representing constant expressions (literals) in the parse tree. M",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
Safety,avoid,avoid,"ationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based on a general matrix to a symmetric matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  Structure to assign from an expression based to symmetric matrix to symmetric matrix. More...;  ; struct  AssignItr;  Structure for assignment to a general matrix from iterator. More...;  ; struct  AssignItr< T, D1, D2, MatRepSym< T, D1 > >;  Specialized structure for assignment to a symmetrix matrix from iterator. More...;  ; struct  AssignSym;  Force Expression evaluation from general to symmetric. More...;  ; class  AxisAngle;  AxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis. More...;  ; class  BaseIntegratorOptions;  Base class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user. More...;  ; class  BasicFitMethodFunction;  FitMethodFun",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
Testability,test,test,". ROOT: ROOT::Math Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT::Math Namespace Reference. Namespaces; namespace  Blas;  ; namespace  BrentMethods;  ; namespace  Cephes;  ; namespace  Chebyshev;  template recursive functions for defining evaluation of Chebyshev polynomials T_n(x) and the series S(x) = Sum_i c_i* T_i(x) ;  ; namespace  CholeskyDecompHelpers;  helpers for CholeskyDecomp ;  ; namespace  detail;  ; namespace  GenAlgoOptUtil;  ; namespace  GenVector;  ; namespace  GenVector_detail;  ; namespace  GSLRootHelper;  Helper functions to test convergence of Root-Finding algorithms. ;  ; namespace  GSLSimAn;  ; namespace  gv_detail;  ; namespace  Impl;  ; namespace  IntegMultiDim;  ; namespace  IntegOneDim;  ; namespace  IntegOptionsUtil;  ; namespace  Integration;  ; namespace  IntegrationMultiDim;  ; namespace  IntegrationOneDim;  ; namespace  Internal;  ; namespace  internal;  ; namespace  Interpolation;  ; namespace  MCIntegration;  ; namespace  Minim;  ; namespace  Minim1D;  ; namespace  Roots;  Root-Finding Algorithms. ;  ; namespace  rowOffsetsUtils;  ; namespace  Sampler;  ; namespace  Util;  namespace defining Utility functions needed by mathcore ;  ; namespace  VectorUtil;  Global Helper functions for generic Vector classes. ;  . Classes; class  AdaptiveIntegratorMultiDim;  Class for adaptive quadrature integration in multi-dimensions using rectangular regions. More...;  ; class  AddOp;  Addition Operation Class. More...;  ; struct  AddPolicy;  matrix addition policy More...;  ; struct  AddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  ; struct  Assign;  Structure to assign from an expression based to general matrix to general matrix. More...;  ; struct  Assign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >;  Dummy Structure which flags an error to avoid assignment from expression based o",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
Usability,simpl,simple,l functions which do not use function derivatives. More...;  ; class  GSLRootFinderDeriv;  Base class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives. More...;  ; class  GSLRootFSolver;  Root-Finder implementation class using GSL. More...;  ; class  GSLSimAnFunc;  GSLSimAnFunc class description. More...;  ; class  GSLSimAnMinimizer;  GSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL. More...;  ; class  GSLSimAnnealing;  GSLSimAnnealing class for performing a simulated annealing search of a multidimensional function. More...;  ; struct  GSLSimAnParams;  structure holding the simulated annealing parameters More...;  ; class  GSLVegasIntegrationWorkspace;  workspace for VEGAS More...;  ; class  IBaseFunctionMultiDimTempl;  Documentation for the abstract class IBaseFunctionMultiDim. More...;  ; class  IBaseFunctionOneDim;  Interface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). More...;  ; class  IBaseParam;  Documentation for the abstract class IBaseParam. More...;  ; class  IGradientFunctionMultiDimTempl;  Interface (abstract class) for multi-dimensional functions providing a gradient calculation. More...;  ; class  IGradientFunctionOneDim;  Interface (abstract class) for one-dimensional functions providing a gradient calculation. More...;  ; class  IGradientMultiDimTempl;  ; class  IMinimizer1D;  Interface class for numerical methods for one-dimensional minimization. More...;  ; class  IntegrandTransform;  Auxiliary inner class for mapping infinite and semi-infinite integrals. More...;  ; class  IntegratorMultiDim;  User class for performing multidimensional integration. More...;  ; class  IntegratorMultiDimOptions;  Numerical multi dimensional integration options. More...;  ; class  IntegratorOneDim;  User Class for performing numerical integra,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html
Availability,toler,tolerance,". ROOT: ROOT::Math::BrentMethods Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::BrentMethods Namespace Reference. Functions; double MinimBrent (const IGenFunction *f, int type, double &xmin, double &xmax, double xmiddle, double fy, bool &ok, int &niter, double epsabs=1.E-8, double epsrel=1.E-10, int maxiter=100);  Finds a minimum of a function, if the function is unimodal between xmin and xmax This method uses a combination of golden section search and parabolic interpolation Details about convergence and properties of this algorithm can be found in the book by R.P.Brent ""Algorithms for Minimization Without Derivatives"" or in the ""Numerical Recipes"", chapter 10.2 convergence is reached using tolerance = 2 *( epsrel * abs(x) + epsabs) ;  ; double MinimStep (const IGenFunction *f, int type, double &xmin, double &xmax, double fy, int npx=100, bool useLog=false);  Grid search implementation, used to bracket the minimum and later use Brent's method with the bracketed interval The step of the search is set to (xmax-xmin)/fNpx type: 0-returns MinimumX 1-returns Minimum 2-returns MaximumX 3-returns Maximum 4-returns X corresponding to fy. ;  . Function Documentation. ◆ MinimBrent(). double ROOT::Math::BrentMethods::MinimBrent ; (; const IGenFunction * ; f, . int ; type, . double & ; xmin, . double & ; xmax, . double ; xmiddle, . double ; fy, . bool & ; ok, . int & ; niter, . double ; epsabs = 1.E-8, . double ; epsrel = 1.E-10, . int ; maxiter = 100 . ). Finds a minimum of a function, if the function is unimodal between xmin and xmax This method uses a combination of golden section search and parabolic interpolation Details about convergence and properties of this algorithm can be found in the book by R.P.Brent ""Algorithms for Minimization Without Derivatives"" or in the ""Numerical Recipes"", chapter 10.2 convergence is reached using tolerance = 2 *( epsrel * abs(x) + epsabs) ; type: 0-returns Minimu",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1BrentMethods.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1BrentMethods.html
Performance,perform,performed,"double &xmax, double fy, int npx=100, bool useLog=false);  Grid search implementation, used to bracket the minimum and later use Brent's method with the bracketed interval The step of the search is set to (xmax-xmin)/fNpx type: 0-returns MinimumX 1-returns Minimum 2-returns MaximumX 3-returns Maximum 4-returns X corresponding to fy. ;  . Function Documentation. ◆ MinimBrent(). double ROOT::Math::BrentMethods::MinimBrent ; (; const IGenFunction * ; f, . int ; type, . double & ; xmin, . double & ; xmax, . double ; xmiddle, . double ; fy, . bool & ; ok, . int & ; niter, . double ; epsabs = 1.E-8, . double ; epsrel = 1.E-10, . int ; maxiter = 100 . ). Finds a minimum of a function, if the function is unimodal between xmin and xmax This method uses a combination of golden section search and parabolic interpolation Details about convergence and properties of this algorithm can be found in the book by R.P.Brent ""Algorithms for Minimization Without Derivatives"" or in the ""Numerical Recipes"", chapter 10.2 convergence is reached using tolerance = 2 *( epsrel * abs(x) + epsabs) ; type: 0-returns MinimumX 1-returns Minimum 2-returns MaximumX 3-returns Maximum 4-returns X corresponding to fy; if ok=true the method has converged. Maxiter returns the actual number of iteration performed ; Definition at line 130 of file BrentMethods.cxx. ◆ MinimStep(). double ROOT::Math::BrentMethods::MinimStep ; (; const IGenFunction * ; f, . int ; type, . double & ; xmin, . double & ; xmax, . double ; fy, . int ; npx = 100, . bool ; useLog = false . ). Grid search implementation, used to bracket the minimum and later use Brent's method with the bracketed interval The step of the search is set to (xmax-xmin)/fNpx type: 0-returns MinimumX 1-returns Minimum 2-returns MaximumX 3-returns Maximum 4-returns X corresponding to fy. ; Definition at line 28 of file BrentMethods.cxx. ROOTMathBrentMethods. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1BrentMethods.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1BrentMethods.html
Availability,error,error," ; (; double ; a, . double ; b, . double ; x . ). Definition at line 581 of file SpecFuncCephes.cxx. ◆ incbd(). double ROOT::Math::Cephes::incbd ; (; double ; a, . double ; b, . double ; x . ). Definition at line 674 of file SpecFuncCephes.cxx. ◆ incbet(). double ROOT::Math::Cephes::incbet ; (; double ; aa, . double ; bb, . double ; xx . ). DESCRIPTION: ; Returns incomplete beta integral of the arguments, evaluated from zero to x. The function is defined as x; - -; | (a+b) | | a-1 b-1 . --------— t (1-t) dt. . (a) (b) - . 0; The domain of definition is 0 <= x <= 1. In this implementation a and b are restricted to positive values. The integral from x to 1 may be obtained by the symmetry relation; 1 - incbet( a, b, x ) = incbet( b, a, 1-x ).; The integral is evaluated by a continued fraction expansion or, when b*x is small, by a power series.; ACCURACY:; Tested at uniformly distributed random points (a,b,x) with a and b in ""domain"" and x between 0 and 1. Relative error arithmetic domain # trials peak rms IEEE 0,5 10000 6.9e-15 4.5e-16 IEEE 0,85 250000 2.2e-13 1.7e-14 IEEE 0,1000 30000 5.3e-12 6.3e-13 IEEE 0,10000 250000 9.3e-11 7.1e-12 IEEE 0,100000 10000 8.7e-10 4.8e-11 Outputs smaller than the IEEE gradual underflow threshold were excluded from these statistics.; ERROR MESSAGES: message condition value returned incbet domain x<0, x>1 0.0 incbet underflow 0.0; Cephes Math Library, Release 2.8: June, 2000 Copyright 1984, 1995, 2000 by Stephen L. Moshier ; Definition at line 484 of file SpecFuncCephes.cxx. ◆ incbi(). double ROOT::Math::Cephes::incbi ; (; double ; a, . double ; b, . double ; y . ). Definition at line 411 of file SpecFuncCephesInv.cxx. ◆ lgam(). double ROOT::Math::Cephes::lgam ; (; double ; x). Definition at line 197 of file SpecFuncCephes.cxx. ◆ ndtri(). double ROOT::Math::Cephes::ndtri ; (; double ; y). Definition at line 137 of file SpecFuncCephesInv.cxx. ◆ pseries(). double ROOT::Math::Cephes::pseries ; (; double ; a, . double ; b, . double ; x . ). D",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Cephes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Cephes.html
Energy Efficiency,power,power,"e SpecFuncCephes.cxx. ◆ igami(). double ROOT::Math::Cephes::igami ; (; double ; a, . double ; y . ). Definition at line 225 of file SpecFuncCephesInv.cxx. ◆ incbcf(). double ROOT::Math::Cephes::incbcf ; (; double ; a, . double ; b, . double ; x . ). Definition at line 581 of file SpecFuncCephes.cxx. ◆ incbd(). double ROOT::Math::Cephes::incbd ; (; double ; a, . double ; b, . double ; x . ). Definition at line 674 of file SpecFuncCephes.cxx. ◆ incbet(). double ROOT::Math::Cephes::incbet ; (; double ; aa, . double ; bb, . double ; xx . ). DESCRIPTION: ; Returns incomplete beta integral of the arguments, evaluated from zero to x. The function is defined as x; - -; | (a+b) | | a-1 b-1 . --------— t (1-t) dt. . (a) (b) - . 0; The domain of definition is 0 <= x <= 1. In this implementation a and b are restricted to positive values. The integral from x to 1 may be obtained by the symmetry relation; 1 - incbet( a, b, x ) = incbet( b, a, 1-x ).; The integral is evaluated by a continued fraction expansion or, when b*x is small, by a power series.; ACCURACY:; Tested at uniformly distributed random points (a,b,x) with a and b in ""domain"" and x between 0 and 1. Relative error arithmetic domain # trials peak rms IEEE 0,5 10000 6.9e-15 4.5e-16 IEEE 0,85 250000 2.2e-13 1.7e-14 IEEE 0,1000 30000 5.3e-12 6.3e-13 IEEE 0,10000 250000 9.3e-11 7.1e-12 IEEE 0,100000 10000 8.7e-10 4.8e-11 Outputs smaller than the IEEE gradual underflow threshold were excluded from these statistics.; ERROR MESSAGES: message condition value returned incbet domain x<0, x>1 0.0 incbet underflow 0.0; Cephes Math Library, Release 2.8: June, 2000 Copyright 1984, 1995, 2000 by Stephen L. Moshier ; Definition at line 484 of file SpecFuncCephes.cxx. ◆ incbi(). double ROOT::Math::Cephes::incbi ; (; double ; a, . double ; b, . double ; y . ). Definition at line 411 of file SpecFuncCephesInv.cxx. ◆ lgam(). double ROOT::Math::Cephes::lgam ; (; double ; x). Definition at line 197 of file SpecFuncCephes.cxx. ◆ ndtri(). dou",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Cephes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Cephes.html
Integrability,message,message,"bb, . double ; xx . ). DESCRIPTION: ; Returns incomplete beta integral of the arguments, evaluated from zero to x. The function is defined as x; - -; | (a+b) | | a-1 b-1 . --------— t (1-t) dt. . (a) (b) - . 0; The domain of definition is 0 <= x <= 1. In this implementation a and b are restricted to positive values. The integral from x to 1 may be obtained by the symmetry relation; 1 - incbet( a, b, x ) = incbet( b, a, 1-x ).; The integral is evaluated by a continued fraction expansion or, when b*x is small, by a power series.; ACCURACY:; Tested at uniformly distributed random points (a,b,x) with a and b in ""domain"" and x between 0 and 1. Relative error arithmetic domain # trials peak rms IEEE 0,5 10000 6.9e-15 4.5e-16 IEEE 0,85 250000 2.2e-13 1.7e-14 IEEE 0,1000 30000 5.3e-12 6.3e-13 IEEE 0,10000 250000 9.3e-11 7.1e-12 IEEE 0,100000 10000 8.7e-10 4.8e-11 Outputs smaller than the IEEE gradual underflow threshold were excluded from these statistics.; ERROR MESSAGES: message condition value returned incbet domain x<0, x>1 0.0 incbet underflow 0.0; Cephes Math Library, Release 2.8: June, 2000 Copyright 1984, 1995, 2000 by Stephen L. Moshier ; Definition at line 484 of file SpecFuncCephes.cxx. ◆ incbi(). double ROOT::Math::Cephes::incbi ; (; double ; a, . double ; b, . double ; y . ). Definition at line 411 of file SpecFuncCephesInv.cxx. ◆ lgam(). double ROOT::Math::Cephes::lgam ; (; double ; x). Definition at line 197 of file SpecFuncCephes.cxx. ◆ ndtri(). double ROOT::Math::Cephes::ndtri ; (; double ; y). Definition at line 137 of file SpecFuncCephesInv.cxx. ◆ pseries(). double ROOT::Math::Cephes::pseries ; (; double ; a, . double ; b, . double ; x . ). Definition at line 766 of file SpecFuncCephes.cxx. ◆ stirf(). static double ROOT::Math::Cephes::stirf ; (; double ; x). static . Definition at line 316 of file SpecFuncCephes.cxx. Variable Documentation. ◆ A. double ROOT::Math::Cephes::A[]. static . Initial value:= {; 8.11614167470508450300E-4,; -5.95061904284301438324",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Cephes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Cephes.html
Energy Efficiency,adapt,adapter,"ecomposition (N = 1) More...;  ; struct  _inverter< F, 2, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 2) More...;  ; struct  _inverter< F, 3, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 3) More...;  ; struct  _inverter< F, 4, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 4) More...;  ; struct  _inverter< F, 5, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 5) More...;  ; struct  _inverter< F, 6, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 6) More...;  ; struct  _inverterGenDim;  struct to obtain the inverse from a Cholesky decomposition (general dimensionality) More...;  ; struct  _solver;  struct to solve a linear system using its Cholesky decomposition More...;  ; struct  _solver< F, 0, V >;  struct to solve a linear system using its Cholesky decomposition (N=0) More...;  ; struct  _solver< F, 1, V >;  struct to solve a linear system using its Cholesky decomposition (N=1) More...;  ; struct  _solver< F, 2, V >;  struct to solve a linear system using its Cholesky decomposition (N=2) More...;  ; struct  _solver< F, 3, V >;  struct to solve a linear system using its Cholesky decomposition (N=3) More...;  ; struct  _solver< F, 4, V >;  struct to solve a linear system using its Cholesky decomposition (N=4) More...;  ; struct  _solver< F, 5, V >;  struct to solve a linear system using its Cholesky decomposition (N=5) More...;  ; struct  _solver< F, 6, V >;  struct to solve a linear system using its Cholesky decomposition (N=6) More...;  ; struct  _solverGenDim;  struct to solve a linear system using its Cholesky decomposition (generalised dimensionality) More...;  ; class  PackedArrayAdapter;  adapter for packed arrays (to SMatrix indexing conventions) More...;  . Detailed Description; helpers for CholeskyDecomp . ROOTMathCholeskyDecompHelpers. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1CholeskyDecompHelpers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1CholeskyDecompHelpers.html
Integrability,adapter,adapter,"ecomposition (N = 1) More...;  ; struct  _inverter< F, 2, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 2) More...;  ; struct  _inverter< F, 3, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 3) More...;  ; struct  _inverter< F, 4, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 4) More...;  ; struct  _inverter< F, 5, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 5) More...;  ; struct  _inverter< F, 6, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 6) More...;  ; struct  _inverterGenDim;  struct to obtain the inverse from a Cholesky decomposition (general dimensionality) More...;  ; struct  _solver;  struct to solve a linear system using its Cholesky decomposition More...;  ; struct  _solver< F, 0, V >;  struct to solve a linear system using its Cholesky decomposition (N=0) More...;  ; struct  _solver< F, 1, V >;  struct to solve a linear system using its Cholesky decomposition (N=1) More...;  ; struct  _solver< F, 2, V >;  struct to solve a linear system using its Cholesky decomposition (N=2) More...;  ; struct  _solver< F, 3, V >;  struct to solve a linear system using its Cholesky decomposition (N=3) More...;  ; struct  _solver< F, 4, V >;  struct to solve a linear system using its Cholesky decomposition (N=4) More...;  ; struct  _solver< F, 5, V >;  struct to solve a linear system using its Cholesky decomposition (N=5) More...;  ; struct  _solver< F, 6, V >;  struct to solve a linear system using its Cholesky decomposition (N=6) More...;  ; struct  _solverGenDim;  struct to solve a linear system using its Cholesky decomposition (generalised dimensionality) More...;  ; class  PackedArrayAdapter;  adapter for packed arrays (to SMatrix indexing conventions) More...;  . Detailed Description; helpers for CholeskyDecomp . ROOTMathCholeskyDecompHelpers. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1CholeskyDecompHelpers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1CholeskyDecompHelpers.html
Modifiability,adapt,adapter,"ecomposition (N = 1) More...;  ; struct  _inverter< F, 2, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 2) More...;  ; struct  _inverter< F, 3, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 3) More...;  ; struct  _inverter< F, 4, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 4) More...;  ; struct  _inverter< F, 5, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 5) More...;  ; struct  _inverter< F, 6, M >;  struct to obtain the inverse from a Cholesky decomposition (N = 6) More...;  ; struct  _inverterGenDim;  struct to obtain the inverse from a Cholesky decomposition (general dimensionality) More...;  ; struct  _solver;  struct to solve a linear system using its Cholesky decomposition More...;  ; struct  _solver< F, 0, V >;  struct to solve a linear system using its Cholesky decomposition (N=0) More...;  ; struct  _solver< F, 1, V >;  struct to solve a linear system using its Cholesky decomposition (N=1) More...;  ; struct  _solver< F, 2, V >;  struct to solve a linear system using its Cholesky decomposition (N=2) More...;  ; struct  _solver< F, 3, V >;  struct to solve a linear system using its Cholesky decomposition (N=3) More...;  ; struct  _solver< F, 4, V >;  struct to solve a linear system using its Cholesky decomposition (N=4) More...;  ; struct  _solver< F, 5, V >;  struct to solve a linear system using its Cholesky decomposition (N=5) More...;  ; struct  _solver< F, 6, V >;  struct to solve a linear system using its Cholesky decomposition (N=6) More...;  ; struct  _solverGenDim;  struct to solve a linear system using its Cholesky decomposition (generalised dimensionality) More...;  ; class  PackedArrayAdapter;  adapter for packed arrays (to SMatrix indexing conventions) More...;  . Detailed Description; helpers for CholeskyDecomp . ROOTMathCholeskyDecompHelpers. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1CholeskyDecompHelpers.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1CholeskyDecompHelpers.html
Testability,test,test,". ROOT: ROOT::Math::GSLRootHelper Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::GSLRootHelper Namespace Reference. Helper functions to test convergence of Root-Finding algorithms. ; More... Functions; int TestDelta (double x1, double x0, double epsAbs, double epsRel);  ; int TestInterval (double xlow, double xup, double epsAbs, double epsRel);  ; int TestResidual (double f, double epsAbs);  . Detailed Description; Helper functions to test convergence of Root-Finding algorithms. ; Used by ROOT::Math::RootFinder class (see there for the doc) ; Function Documentation. ◆ TestDelta(). int ROOT::Math::GSLRootHelper::TestDelta ; (; double ; x1, . double ; x0, . double ; epsAbs, . double ; epsRel . ). Definition at line 47 of file GSLRootHelper.cxx. ◆ TestInterval(). int ROOT::Math::GSLRootHelper::TestInterval ; (; double ; xlow, . double ; xup, . double ; epsAbs, . double ; epsRel . ). Definition at line 42 of file GSLRootHelper.cxx. ◆ TestResidual(). int ROOT::Math::GSLRootHelper::TestResidual ; (; double ; f, . double ; epsAbs . ). Definition at line 52 of file GSLRootHelper.cxx. ROOTMathGSLRootHelper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1GSLRootHelper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1GSLRootHelper.html
Availability,error,error,"t, const RotationY &r);  ; template<class T > ; Transform3D< T > operator* (const Translation3D< T > &t, const RotationZ &r);  ; template<class T > ; Transform3D< T > operator* (const Translation3D< T > &t, const RotationZYX &r);  ; template<typename T > ; std::ostream & operator<< (std::ostream &os, const Plane3D< T > &p);  Stream Output and Input. ;  ; template<class T > ; std::ostream & operator<< (std::ostream &os, const Transform3D< T > &t);  print the 12 components of the Transform3D ;  ; template<class T > ; std::ostream & operator<< (std::ostream &os, const Translation3D< T > &t);  . Function Documentation. ◆ Eta_FromRhoZ(). template<typename Scalar > . Scalar ROOT::Math::Impl::Eta_FromRhoZ ; (; Scalar ; rho, . Scalar ; z . ). inline . Calculate eta given rho and zeta. ; This formula is faster than the standard calculation (below) from log(tan(theta/2) but one has to be careful when rho is much smaller than z (large eta values) Formula is eta = log( zs + sqrt(zs^2 + 1) ) where zs = z/rho; For large value of z_scaled (tan(theta) ) one can approximate the sqrt via a Taylor expansion We do the approximation of the sqrt if the numerical error is of the same order of second term of the sqrt.expansion: eps > 1/zs^4 => zs > 1/(eps^0.25); When rho == 0 we use etaMax (see definition in etaMax.h) ; Definition at line 48 of file eta.h. ◆ Eta_FromTheta(). template<typename Scalar > . Scalar ROOT::Math::Impl::Eta_FromTheta ; (; Scalar ; theta, . Scalar ; r . ). inline . Implementation of eta from -log(tan(theta/2)). ; This is convenient when theta is already known (for example in a polar coorindate system) ; Definition at line 85 of file eta.h. ◆ operator*() [1/34]. template<class T > . Transform3D< T > ROOT::Math::Impl::operator* ; (; const AxisAngle & ; r, . const Transform3D< T > & ; t . ). inline . Definition at line 1278 of file Transform3D.h. ◆ operator*() [2/34]. template<class T > . Transform3D< T > ROOT::Math::Impl::operator* ; (; const AxisAngle & ; r, . const ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Impl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Impl.html
Testability,log,log,". ROOT: ROOT::Math::Impl Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; ROOT::Math::Impl Namespace Reference. Classes; class  Plane3D;  Class describing a geometrical plane in 3 dimensions. More...;  ; class  Transform3D;  Basic 3D Transformation class describing a rotation and then a translation The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data. More...;  ; class  Translation3D;  Class describing a 3 dimensional translation. More...;  . Functions; template<typename Scalar > ; Scalar Eta_FromRhoZ (Scalar rho, Scalar z);  Calculate eta given rho and zeta. ;  ; template<typename Scalar > ; Scalar Eta_FromTheta (Scalar theta, Scalar r);  Implementation of eta from -log(tan(theta/2)). ;  ; template<class T > ; Transform3D< T > operator* (const AxisAngle &r, const Transform3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const AxisAngle &r, const Translation3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const EulerAngles &r, const Transform3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const EulerAngles &r, const Translation3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const Quaternion &r, const Transform3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const Quaternion &r, const Translation3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const Rotation3D &r, const Transform3D< T > &t);  combine a rotation and a transformation to give a transform3d First the transformation then the rotation ;  ; template<class T > ; Transform3D< T > operator* (const Rotation3D &r, const Translation3D< T > &t);  combine a translation and a rotation to give a transform3d First the translation then the rotation ;  ; template<class T > ; Transform3D< T > operator* (const RotationX &r, const Transform3D< T > &t);  ; template<class T > ; Transform3D< T > operator* (const Rotat",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Impl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Impl.html
Deployability,integrat,integration,". ROOT: ROOT::Math::Integration Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::Integration Namespace Reference. Enumerations; enum  GKRule { ;   kGAUSS15 = 1; , kGAUSS21 = 2; , kGAUSS31 = 3; , kGAUSS41 = 4; , ;   kGAUSS51 = 5; , kGAUSS61 = 6. };  enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type More...;  . ROOTMathIntegration. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Integration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Integration.html
Integrability,integrat,integration,". ROOT: ROOT::Math::Integration Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::Integration Namespace Reference. Enumerations; enum  GKRule { ;   kGAUSS15 = 1; , kGAUSS21 = 2; , kGAUSS31 = 3; , kGAUSS41 = 4; , ;   kGAUSS51 = 5; , kGAUSS61 = 6. };  enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type More...;  . ROOTMathIntegration. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Integration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Integration.html
Deployability,integrat,integration,". ROOT: ROOT::Math::IntegrationMultiDim Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::IntegrationMultiDim Namespace Reference. Enumerations; enum  Type { ;   kDEFAULT = -1; , kADAPTIVE; , kVEGAS; , kMISER; , ;   kPLAIN. };  enumeration specifying the integration types. More...;  . ROOTMathIntegrationMultiDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1IntegrationMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegrationMultiDim.html
Integrability,integrat,integration,". ROOT: ROOT::Math::IntegrationMultiDim Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::IntegrationMultiDim Namespace Reference. Enumerations; enum  Type { ;   kDEFAULT = -1; , kADAPTIVE; , kVEGAS; , kMISER; , ;   kPLAIN. };  enumeration specifying the integration types. More...;  . ROOTMathIntegrationMultiDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1IntegrationMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegrationMultiDim.html
Deployability,integrat,integration,". ROOT: ROOT::Math::IntegrationOneDim Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::IntegrationOneDim Namespace Reference. Enumerations; enum  Type { ;   kDEFAULT = -1; , kGAUSS; , kLEGENDRE; , kADAPTIVE; , ;   kADAPTIVESINGULAR; , kNONADAPTIVE. };  enumeration specifying the integration types. More...;  . ROOTMathIntegrationOneDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1IntegrationOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegrationOneDim.html
Integrability,integrat,integration,". ROOT: ROOT::Math::IntegrationOneDim Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::IntegrationOneDim Namespace Reference. Enumerations; enum  Type { ;   kDEFAULT = -1; , kGAUSS; , kLEGENDRE; , kADAPTIVE; , ;   kADAPTIVESINGULAR; , kNONADAPTIVE. };  enumeration specifying the integration types. More...;  . ROOTMathIntegrationOneDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1IntegrationOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1IntegrationOneDim.html
Availability,avail,availables,". ROOT: ROOT::Math::Interpolation Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; ROOT::Math::Interpolation Namespace Reference. Enumerations; enum  Type { ;   kLINEAR; , kPOLYNOMIAL; , kCSPLINE; , kCSPLINE_PERIODIC; , ;   kAKIMA; , kAKIMA_PERIODIC. };  Enumeration defining the types of interpolation methods availables. More...;  . ROOTMathInterpolation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Interpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Interpolation.html
Usability,simpl,simplest,". ROOT: ROOT::Math::Roots Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; ROOT::Math::Roots Namespace Reference. Root-Finding Algorithms. ; More... Classes; class  Bisection;  Roots::Bisection Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one. More...;  ; class  Brent;  Brent-Dekker algorithm which combines an interpolation strategy with the bisection algorithm See the GSL manual for more information. More...;  ; class  FalsePos;  False Position algorithm based on linear interpolation. More...;  ; class  Newton;  a Newton algorithm, which computes the derivative at each iteration See the GSL manual for more information More...;  ; class  Secant;  Secant algorithm, simplified version of Newton method, which does not require the derivative at every step. More...;  ; class  Steffenson;  Steffenson method, providing the fastes convergence. More...;  . Detailed Description; Root-Finding Algorithms. . ROOTMathRoots. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Roots.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Roots.html
Safety,safe,safe,. ROOT: ROOT::Math::Util Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::Util Namespace Reference. namespace defining Utility functions needed by mathcore ; More... Functions; template<class T > ; T EvalLog (T x);  safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ;  ; template<class T > ; std::string ToString (const T &val);  Utility function for conversion to strings. ;  . Detailed Description; namespace defining Utility functions needed by mathcore ; Function Documentation. ◆ EvalLog(). template<class T > . T ROOT::Math::Util::EvalLog ; (; T ; x). inline . safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ; Definition at line 64 of file Util.h. ◆ ToString(). template<class T > . std::string ROOT::Math::Util::ToString ; (; const T & ; val). Utility function for conversion to strings. ; Definition at line 50 of file Util.h. ROOTMathUtil. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Util.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html
Testability,log,log,. ROOT: ROOT::Math::Util Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::Util Namespace Reference. namespace defining Utility functions needed by mathcore ; More... Functions; template<class T > ; T EvalLog (T x);  safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ;  ; template<class T > ; std::string ToString (const T &val);  Utility function for conversion to strings. ;  . Detailed Description; namespace defining Utility functions needed by mathcore ; Function Documentation. ◆ EvalLog(). template<class T > . T ROOT::Math::Util::EvalLog ; (; T ; x). inline . safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ; Definition at line 64 of file Util.h. ◆ ToString(). template<class T > . std::string ROOT::Math::Util::ToString ; (; const T & ; val). Utility function for conversion to strings. ; Definition at line 50 of file Util.h. ROOTMathUtil. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Util.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html
Usability,simpl,simple,. ROOT: ROOT::Math::Util Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOT::Math::Util Namespace Reference. namespace defining Utility functions needed by mathcore ; More... Functions; template<class T > ; T EvalLog (T x);  safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ;  ; template<class T > ; std::string ToString (const T &val);  Utility function for conversion to strings. ;  . Detailed Description; namespace defining Utility functions needed by mathcore ; Function Documentation. ◆ EvalLog(). template<class T > . T ROOT::Math::Util::EvalLog ; (; T ; x). inline . safe evaluation of log(x) with a protections against negative or zero argument to the log smooth linear extrapolation below function values smaller than epsilon (better than a simple cut-off) ; Definition at line 64 of file Util.h. ◆ ToString(). template<class T > . std::string ROOT::Math::Util::ToString ; (; const T & ; val). Utility function for conversion to strings. ; Definition at line 50 of file Util.h. ROOTMathUtil. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/namespaceROOT_1_1Math_1_1Util.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Util.html
Availability,avail,available,"umili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using external gradient provided by FCN Note that the computed Hessian and G2 are an approximation valid for small residuals. More...;  ; class  FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliMinimizer;  Instantiates the seed generator and Minimum builder for the Fumili minimization method. More...;  ; class  FumiliStandardChi2FCN;  Class implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; class  FumiliStandardMaximumLikelihoodFCN;  Class implementing the Elements member function for the standard maximum likelihood method. More...;  ; class  FunctionGradient;  ; class  FunctionMinimum;  class holding the full result of the minimization; both internal and external (MnUserParameterState) representation available for the parameters at the Minimum More...;  ; class  gen;  ; class  GenericFunction;  Class from which all the other classes, representing functions, inherit. More...;  ; class  GradientCalculator;  interface class for gradient calculators More...;  ; class  HessianGradientCalculator;  HessianGradientCalculator: class to calculate Gradient for Hessian. More...;  ; class  InitialGradientCalculator;  Class to calculate an initial estimate of the gradient. More...;  ; class  LASquareMatrix;  ; class  LASymMatrix;  Class describing a symmetric matrix of size n. More...;  ; class  LAVector;  ; class  MatrixInverse;  ; class  MatrixInverse< vec, M, T >;  ; class  MinimumBuilder;  ; class  MinimumError;  MinimumError keeps the inv. More...;  ; class  MinimumErrorUpdator;  ; class  MinimumParameters;  ; class  MinimumSeed;  ; class  MinimumSeedGenerator;  base class for seed generators (starting values); the seed generator",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
Deployability,release,release,"AVector;  ; class  MatrixInverse;  ; class  MatrixInverse< vec, M, T >;  ; class  MinimumBuilder;  ; class  MinimumError;  MinimumError keeps the inv. More...;  ; class  MinimumErrorUpdator;  ; class  MinimumParameters;  ; class  MinimumSeed;  ; class  MinimumSeedGenerator;  base class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; More...;  ; class  MinimumState;  MinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder). More...;  ; class  MinosError;  Class holding the result of Minos (lower and upper values) for a specific parameter. More...;  ; class  Minuit2Minimizer;  Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. More...;  ; class  MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calculating the eigenvalues of symmetric matrix. More...;  ; class  MnFcn;  Wrapper class to FCNBase interface used internally by Minuit. More...;  ; class  MnFumiliMinimize;  API class for minimization using Fumil",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
Energy Efficiency,adapt,adapting,"Type< vec, gen >;  ; class  AlgebraicProdType< vec, sym >;  ; class  AlgebraicSumType;  ; class  AlgebraicSumType< gen, vec >;  ; class  AlgebraicSumType< sym, vec >;  ; class  AlgebraicSumType< T, T >;  ; class  AlgebraicSumType< vec, gen >;  ; class  AlgebraicSumType< vec, sym >;  ; class  AnalyticalGradientCalculator;  ; class  BFGSErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; class  BFGSMinimizerType;  ; class  CombinedMinimizer;  Combined minimizer: combination of Migrad and Simplex. More...;  ; class  CombinedMinimumBuilder;  ; class  ContoursError;  ; class  DavidonErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; struct  DerivatorElement;  ; class  ExternalInternalGradientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  Extension of the FCNBase for providing the analytical Gradient of the function. More...;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili m",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
Integrability,wrap,wrapped,"Type< vec, gen >;  ; class  AlgebraicProdType< vec, sym >;  ; class  AlgebraicSumType;  ; class  AlgebraicSumType< gen, vec >;  ; class  AlgebraicSumType< sym, vec >;  ; class  AlgebraicSumType< T, T >;  ; class  AlgebraicSumType< vec, gen >;  ; class  AlgebraicSumType< vec, sym >;  ; class  AnalyticalGradientCalculator;  ; class  BFGSErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; class  BFGSMinimizerType;  ; class  CombinedMinimizer;  Combined minimizer: combination of Migrad and Simplex. More...;  ; class  CombinedMinimumBuilder;  ; class  ContoursError;  ; class  DavidonErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; struct  DerivatorElement;  ; class  ExternalInternalGradientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  Extension of the FCNBase for providing the analytical Gradient of the function. More...;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili m",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
Modifiability,adapt,adapting,"Type< vec, gen >;  ; class  AlgebraicProdType< vec, sym >;  ; class  AlgebraicSumType;  ; class  AlgebraicSumType< gen, vec >;  ; class  AlgebraicSumType< sym, vec >;  ; class  AlgebraicSumType< T, T >;  ; class  AlgebraicSumType< vec, gen >;  ; class  AlgebraicSumType< vec, sym >;  ; class  AnalyticalGradientCalculator;  ; class  BFGSErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; class  BFGSMinimizerType;  ; class  CombinedMinimizer;  Combined minimizer: combination of Migrad and Simplex. More...;  ; class  CombinedMinimumBuilder;  ; class  ContoursError;  ; class  DavidonErrorUpdator;  Update of the covariance matrix for the Variable Metric minimizer (MIGRAD) More...;  ; struct  DerivatorElement;  ; class  ExternalInternalGradientCalculator;  Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  Extension of the FCNBase for providing the analytical Gradient of the function. More...;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili m",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
Performance,perform,performing," MnUserParameterState;  class which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; More...;  ; class  MnUserTransformation;  class dealing with the transformation between user specified parameters (external) and internal parameters used for minimization More...;  ; class  MnVectorTransform;  ; class  ModularFunctionMinimizer;  Base common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters. More...;  ; class  MPIProcess;  ; class  MPITerminate;  ; class  NegativeG2LineSearch;  In case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive. More...;  ; class  Numerical2PGradientCalculator;  class performing the numerical gradient calculation More...;  ; class  NumericalDerivator;  ; class  ParametricFunction;  Function which has parameters. More...;  ; class  PrefixStack;  ; class  ScanBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  ScanMinimizer;  Class implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. More...;  ; class  SimplexBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  SimplexMinimizer;  Class implementing the required methods for a minimization using Simplex. More...;  ; class  SimplexParameters;  class describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process. More...;  ; class  SimplexSeedGenerator;  generate Simplex starting point (state) More...;  ; class  SinParameterTransformation;  class for the transformation for double-li",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
Safety,predict,predicted,"; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using external gradient provided by FCN Note that the computed Hessian and G2 are an approximation valid for small residuals. More...;  ; class  FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliMinimizer;  Instantiates the seed generator and Minimum builder for the Fumili minimization method. More...;  ; class  FumiliStandardChi2FCN;  Class implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; class  FumiliStandardMaximumLikelihoodFCN;  Class implementing the Elements member function for the standard maximum likelihood method. More...;  ; class  FunctionGradient;  ; class  FunctionMinimum;  class holding the full result of the minimization; both internal and external (MnUserParameterState) representation available for the parameters at the Minimum More...;  ; class  gen;  ; class  GenericFunction;  Class from which all the other classes, representing functions, inherit. More...;  ; class  GradientCalculator;  interface class for gradient calculators More...;  ; class  HessianGradientCalculator;  HessianGradientCalculator: class to calculate Gradient for Hessian. More...;  ; class  InitialGradientCalculator;  Class to calculate an initial estimate of the gradient. More...;  ; class  LASquareMatrix;  ; class  LASymMatrix",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
Security,access,accessed,"the derivatives of the function, but only function values. More...;  ; class  MnStrategy;  API class for defining four levels of strategies: low (0), medium (1), high (2), very high (>=3); acts on: Migrad (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) More...;  ; class  MnTiny;  ; class  MnTraceObject;  ; class  MnUserCovariance;  Class containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user. More...;  ; class  MnUserFcn;  Wrapper used by Minuit of FCN interface containing a reference to the transformation object. More...;  ; class  MnUserParameters;  API class for the user interaction with the parameters; serves as input to the minimizer as well as output from it; users can interact: Fix/release parameters, set values and errors, etc.; parameters can be accessed via their Parameter number (determined internally by Minuit and followed the order how the parameters are created) or via their user-specified Name (10 character string). More...;  ; class  MnUserParameterState;  class which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; More...;  ; class  MnUserTransformation;  class dealing with the transformation between user specified parameters (external) and internal parameters used for minimization More...;  ; class  MnVectorTransform;  ; class  ModularFunctionMinimizer;  Base common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters. More...;  ; class  MPIProcess;  ; class  MPITerminate;  ; class  NegativeG2LineSearch;  In case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
Usability,simpl,simplex,";  ; class  MinimumSeedGenerator;  base class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; More...;  ; class  MinimumState;  MinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder). More...;  ; class  MinosError;  Class holding the result of Minos (lower and upper values) for a specific parameter. More...;  ; class  Minuit2Minimizer;  Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. More...;  ; class  MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calculating the eigenvalues of symmetric matrix. More...;  ; class  MnFcn;  Wrapper class to FCNBase interface used internally by Minuit. More...;  ; class  MnFumiliMinimize;  API class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.; also used by MnMinos and MnContours;. More...;  ; class  MnFunctionCross;  MnFunctionCross. More...;  ; class  Mn",MatchSource.WIKI,doc/master/namespaceROOT_1_1Minuit2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html
Availability,error,error,"ment: Returns ARG_NONE.Definition OptionParser.h:907; ROOT::option::DescriptorDescribes an option, its help text (usage) and how it should be parsed.Definition OptionParser.h:327; A CheckArg function has the following signature: ArgStatus CheckArg(const Option& option, bool msg); ; ROOT::option::OptionA parsed option from the command line together with its argument if it has one.Definition OptionParser.h:454; ROOT::option::ArgStatusArgStatusPossible results when checking if an argument is valid for a certain option.Definition OptionParser.h:263; ROOT::option::CheckArgArgStatus(* CheckArg)(const Option &option, bool msg)Signature of functions that check if an argument is valid for a certain type of option.Definition OptionParser.h:302; It is used to check if a potential argument would be acceptable for the option. It will even be called if there is no argument. In that case option.arg will be NULL.; If msg is true and the function determines that an argument is not acceptable and that this is a fatal error, it should output a message to the user before returning ARG_ILLEGAL. If msg is false the function should remain silent (or you will get duplicate messages).; See ArgStatus for the meaning of the return values.; While you can provide your own functions, often the following pre-defined checks (which never return ARG_ILLEGAL) will suffice:. Arg::None For options that don't take an argument: Returns ARG_NONE. ; Arg::Optional Returns ARG_OK if the argument is attached and ARG_IGNORE otherwise. . Definition at line 302 of file OptionParser.h. Enumeration Type Documentation. ◆ ArgStatus. enum ROOT::option::ArgStatus. Possible results when checking if an argument is valid for a certain option. ; In the case that no argument is provided for an option that takes an optional argument, return codes ARG_OK and ARG_IGNORE are equivalent. . EnumeratorARG_NONE The option does not take an argument. . ARG_OK The argument is acceptable for the option. . ARG_IGNORE The argument is no",MatchSource.WIKI,doc/master/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html
Integrability,wrap,wrapping,"and parses them into data structures that are easier to work with. More...;  ; struct  PrintUsageImplementation;  ; struct  Stats;  Determines the minimum lengths of the buffer and options arrays used for Parser. More...;  . Typedefs; typedef ArgStatus(* CheckArg) (const Option &option, bool msg);  Signature of functions that check if an argument is valid for a certain type of option. ;  . Enumerations; enum  ArgStatus { ARG_NONE; , ARG_OK; , ARG_IGNORE; , ARG_ILLEGAL; };  Possible results when checking if an argument is valid for a certain option. More...;  . Functions; template<typename Temporary > ; void printUsage (const Temporary &prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  ; template<typename Function > ; void printUsage (Function *prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  ; template<typename Function , typename Stream > ; void printUsage (Function *prn, Stream *stream, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  ; template<typename OStream > ; void printUsage (OStream &prn, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping. ;  ; template<typename Syscall > ; void printUsage (Syscall *prn, int fd, const Descriptor usage[], int width=80, int last_column_min_percent=50, int last_column_own_line_max_percent=75);  . Detailed Description; The namespace of The Lean Mean C++ Option Parser. ; Typedef Documentation. ◆ CheckArg. typedef ArgStatus(* ROOT::option::CheckArg) (const Option &option, bool msg). Signature of functions that check if an argument is valid for a certain type of option. ; Every Option has such a function assigned in its Descriptor. Descriptor usage[] = { {UNKNOWN, 0, ",MatchSource.WIKI,doc/master/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html
Usability,simpl,simply,"lumn_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2806 of file OptionParser.h. ◆ printUsage() [3/5]. template<typename Function , typename Stream > . void ROOT::option::printUsage ; (; Function * ; prn, . Stream * ; stream, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2830 of file OptionParser.h. ◆ printUsage() [4/5]. template<typename OStream > . void ROOT::option::printUsage ; (; OStream & ; prn, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Outputs a nicely formatted usage string with support for multi-column formatting and line-wrapping. ; printUsage() takes the help texts of a Descriptor[] array and formats them into a usage message, wrapping lines to achieve the desired output width.; Table formatting:; Aside from plain strings which are simply line-wrapped, the usage may contain tables. Tables are used to align elements in the output.; // Without a table. The explanatory texts are not aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; ; // With table formatting. The explanatory texts are aligned.; -c, --create |Creates something.; -k, --kill |Destroys something.; c#define c(i)Definition RSha256.hxx:101; Table formatting removes the need to pad help texts manually with spaces to achieve alignment. To create a table, simply insert \t (tab) characters to separate the cells within a row.; const option::Descriptor usage[] = {; {..., ""-c, --create \tCreates something."" },; {..., ""-k, --kill \tDestroys something."" }, ...; Note that you must include the minimum amount of space desired between cells yourself. Table formatting will insert further spaces as needed to achieve alignment.; You can insert line breaks within cells by using \v (vertical tab).; const option::Descriptor usage[] = {; {..., ""-",MatchSource.WIKI,doc/master/namespaceROOT_1_1option.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html
Modifiability,extend,extendedColor,"_t markerSize);  ; void DrawMarkerOpenSquare (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerOpenSquareDiagonal (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerOpenStar (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerOpenThreeTriangles (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerOpenTriangleDown (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerOpenTriangleUp (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerPlus (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerStar (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawMarkerX (CGContextRef ctx, unsigned n, const TPoint *xy, Size_t markerSize);  ; void DrawPattern (void *data, CGContextRef ctx);  ; void DrawPolygonWithGradientFill (CGContextRef ctx, const TColorGradient *extendedColor, const CGSize &sizeOfDrawable, Int_t nPoints, const TPoint *xy, Bool_t drawShadow);  ; void DrawPolyLine (CGContextRef ctx, Int_t n, TPoint *xy);  ; void DrawPolyMarker (CGContextRef ctx, const std::vector< TPoint > &marker, Size_t markerSize, Style_t markerStyle);  ; void DrawPolyMarker (CGContextRef ctx, unsigned nPoints, const TPoint *marker, Size_t markerSize, Style_t markerStyle);  ; void DrawTextLineNoKerning (CGContextRef ctx, CTFontRef font, const std::vector< UniChar > &text, Int_t x, Int_t y);  ; Bool_t SetFillAreaParameters (CGContextRef ctx, unsigned *patternIndex);  ; Bool_t SetFillColor (CGContextRef ctx, Color_t colorIndex);  ; bool SetFillPattern (CGContextRef ctx, const unsigned *patternIndex);  ; Bool_t SetLineColor (CGContextRef ctx, Color_t colorIndex);  ; void SetLineStyle (CGContextRef ctx, Int_t lstyle);  ; void SetLineType (CGContextRef ctx, Int_t n, Int_t *dash);  ; void SetLineWidth (CGContextRef ctx, Int_t width);  .",MatchSource.WIKI,doc/master/namespaceROOT_1_1Quartz.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Quartz.html
Availability,down,down,"escription . ). Definition at line 34 of file RDFDescription.cxx. ◆ operator==() [1/3]. template<class T1 , class T2 > . bool ROOT::RDF::operator== ; (; const RResultPtr< T1 > & ; lhs, . const RResultPtr< T2 > & ; rhs . ). Definition at line 401 of file RResultPtr.hxx. ◆ operator==() [2/3]. template<class T1 > . bool ROOT::RDF::operator== ; (; const RResultPtr< T1 > & ; lhs, . std::nullptr_t ; rhs . ). Definition at line 413 of file RResultPtr.hxx. ◆ operator==() [3/3]. template<class T1 > . bool ROOT::RDF::operator== ; (; std::nullptr_t ; lhs, . const RResultPtr< T1 > & ; rhs . ). Definition at line 419 of file RResultPtr.hxx. ◆ PassAsVec(). template<std::size_t N, typename T , typename F > . auto ROOT::RDF::PassAsVec ; (; F && ; f); -> RDFInternal::PassAsVecHelper<std::make_index_sequence<N>, T, F>. PassAsVec is a callable generator that allows passing N variables of type T to a function as a single collection. ; PassAsVec<N, T>(func) returns a callable that takes N arguments of type T, passes them down to function func as an initializer list {t1, t2, t3,..., tN} and returns whatever f({t1, t2, t3, ..., tN}) returns.; Note that for this to work with RDataFrame the type of all columns that the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loo",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
Energy Efficiency,efficient,efficient,", t2, t3,..., tN} and returns whatever f({t1, t2, t3, ..., tN}) returns.; Note that for this to work with RDataFrame the type of all columns that the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loops will run concurrently. Therefore, the overall computation of all results is generally more efficient. It should be noted that user-defined operations (e.g., Filters and Defines) of the different RDataFrame graphs are assumed to be safe to call concurrently.; ROOT::RDataFrame df1(""tree1"", ""file1.root"");; auto r1 = df1.Histo1D(""var1"");; ; ROOT::RDataFrame df2(""tree2"", ""file2.root"");; auto r2 = df2.Sum(""var2"");; ; // RResultPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string.",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
Integrability,interface,interface,". ROOT: ROOT::RDF Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Functions ; ROOT::RDF Namespace Reference. Namespaces; namespace  Experimental;  ; namespace  Internal;  . Classes; class  RArrowDS;  RDataFrame data source class to interface with Apache Arrow. More...;  ; class  RCsvDS;  RDataFrame data source class for reading CSV files. More...;  ; class  RCutFlowReport;  ; class  RDataSource;  RDataSource defines an API that RDataFrame can use to read arbitrary data formats. More...;  ; class  RDFDescription;  A DFDescription contains useful information about a given RDataFrame computation graph. More...;  ; class  RDFTypeNameGetter;  Helper to get the contents of a given column. More...;  ; class  RDisplay;  This class is the textual representation of the content of a columnar dataset. More...;  ; class  RInterface;  The public interface to the RDataFrame federation of classes. More...;  ; class  RInterfaceBase;  ; class  RLazyDS;  A RDataSource implementation which is built on top of result proxies. More...;  ; class  RResultHandle;  A type-erased version of RResultPtr and RResultMap. More...;  ; class  RResultPtr;  Smart pointer for the return type of actions. More...;  ; class  RSampleInfo;  This type represents a sample identifier, to be used in conjunction with RDataFrame features such as DefinePerSample() and per-sample callbacks. More...;  ; struct  RSnapshotOptions;  A collection of options to steer the creation of the dataset on file. More...;  ; class  RSqliteDS;  RSqliteDS is an RDF data source implementation for SQL result sets from sqlite3 files. More...;  ; class  RTrivialDS;  A simple data-source implementation, for demo purposes. More...;  ; class  RVariationsDescription;  A descriptor for the systematic variations known to a given RDataFrame node. More...;  ; class  TCutInfo;  ; class  TH1DModel;  A struct which stores the parameters of a TH1D. More...;  ; ",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
Modifiability,variab,variables,"ong64_t size, bool skipEvenEntries=false);  Make a RDF wrapping a RTrivialDS with the specified amount of entries. ;  ; template<typename F , typename Args = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::arg_types_nodecay, typename Ret = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::ret_type> ; auto Not (F &&f) -> decltype(RDFInternal::NotHelper(Args(), std::forward< F >(f)));  Given a callable with signature bool(T1, T2, ...) return a callable with same signature that returns the negated result. ;  ; template<class T1 , class T2 > ; bool operator!= (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);  ; template<class T1 > ; bool operator!= (const RResultPtr< T1 > &lhs, std::nullptr_t rhs);  ; template<class T1 > ; bool operator!= (std::nullptr_t lhs, const RResultPtr< T1 > &rhs);  ; std::ostream & operator<< (std::ostream &os, const RDFDescription &description);  ; template<class T1 , class T2 > ; bool operator== (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);  ; template<class T1 > ; bool operator== (const RResultPtr< T1 > &lhs, std::nullptr_t rhs);  ; template<class T1 > ; bool operator== (std::nullptr_t lhs, const RResultPtr< T1 > &rhs);  ; template<std::size_t N, typename T , typename F > ; auto PassAsVec (F &&f) -> RDFInternal::PassAsVecHelper< std::make_index_sequence< N >, T, F >;  PassAsVec is a callable generator that allows passing N variables of type T to a function as a single collection. ;  ; unsigned int RunGraphs (std::vector< RResultHandle > handles);  Trigger the event loop of multiple RDataFrames concurrently. ;  ; template<typename NodeType > ; std::string SaveGraph (NodeType node);  Create a graphviz representation of the dataframe computation graph, return it as a string. ;  ; template<typename NodeType > ; void SaveGraph (NodeType node, const std::string &outputFile);  Create a graphviz representation of the dataframe computation graph, write it to the specified file. ;  ; void splitInEqualRanges ",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
Performance,concurren,concurrently,"mplate<class T1 , class T2 > ; bool operator!= (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);  ; template<class T1 > ; bool operator!= (const RResultPtr< T1 > &lhs, std::nullptr_t rhs);  ; template<class T1 > ; bool operator!= (std::nullptr_t lhs, const RResultPtr< T1 > &rhs);  ; std::ostream & operator<< (std::ostream &os, const RDFDescription &description);  ; template<class T1 , class T2 > ; bool operator== (const RResultPtr< T1 > &lhs, const RResultPtr< T2 > &rhs);  ; template<class T1 > ; bool operator== (const RResultPtr< T1 > &lhs, std::nullptr_t rhs);  ; template<class T1 > ; bool operator== (std::nullptr_t lhs, const RResultPtr< T1 > &rhs);  ; template<std::size_t N, typename T , typename F > ; auto PassAsVec (F &&f) -> RDFInternal::PassAsVecHelper< std::make_index_sequence< N >, T, F >;  PassAsVec is a callable generator that allows passing N variables of type T to a function as a single collection. ;  ; unsigned int RunGraphs (std::vector< RResultHandle > handles);  Trigger the event loop of multiple RDataFrames concurrently. ;  ; template<typename NodeType > ; std::string SaveGraph (NodeType node);  Create a graphviz representation of the dataframe computation graph, return it as a string. ;  ; template<typename NodeType > ; void SaveGraph (NodeType node, const std::string &outputFile);  Create a graphviz representation of the dataframe computation graph, write it to the specified file. ;  ; void splitInEqualRanges (std::vector< std::pair< ULong64_t, ULong64_t > > &ranges, int nRecords, unsigned int nSlots);  . Typedef Documentation. ◆ ColumnNames_t. typedef std::vector< std::string > ROOT::RDF::ColumnNames_t. Definition at line 35 of file RInterfaceBase.hxx. ◆ RNode. typedef RInterface<::ROOT::Detail::RDF::RNodeBase, void > ROOT::RDF::RNode. Definition at line 57 of file InterfaceUtils.hxx. ◆ SampleCallback_t. using ROOT::RDF::SampleCallback_t = typedef std::function<void(unsigned int, const ROOT::RDF::RSampleInfo &)>. The type of a data-bl",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
Safety,safe,safe," the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loops will run concurrently. Therefore, the overall computation of all results is generally more efficient. It should be noted that user-defined operations (e.g., Filters and Defines) of the different RDataFrame graphs are assumed to be safe to call concurrently.; ROOT::RDataFrame df1(""tree1"", ""file1.root"");; auto r1 = df1.Histo1D(""var1"");; ; ROOT::RDataFrame df2(""tree2"", ""file2.root"");; auto r2 = df2.Sum(""var2"");; ; // RResultPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node b",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
Security,access,accessing,"s a callable that takes N arguments of type T, passes them down to function func as an initializer list {t1, t2, t3,..., tN} and returns whatever f({t1, t2, t3, ..., tN}) returns.; Note that for this to work with RDataFrame the type of all columns that the callable is applied to must be exactly T. Example usage together with RDataFrame (""varX"" columns must all be float variables): bool myVecFunc(std::vector<float> args);; df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});. Definition at line 103 of file RDFHelpers.hxx. ◆ RunGraphs(). unsigned int ROOT::RDF::RunGraphs ; (; std::vector< RResultHandle > ; handles). Trigger the event loop of multiple RDataFrames concurrently. ; Parameters. [in]handlesA vector of RResultHandles . ReturnsThe number of distinct computation graphs that have been processed; This function triggers the event loop of all computation graphs which relate to the given RResultHandles. The advantage compared to running the event loop implicitly by accessing the RResultPtr is that the event loops will run concurrently. Therefore, the overall computation of all results is generally more efficient. It should be noted that user-defined operations (e.g., Filters and Defines) of the different RDataFrame graphs are assumed to be safe to call concurrently.; ROOT::RDataFrame df1(""tree1"", ""file1.root"");; auto r1 = df1.Histo1D(""var1"");; ; ROOT::RDataFrame df2(""tree2"", ""file2.root"");; auto r2 = df2.Sum(""var2"");; ; // RResultPtr -> RResultHandle conversion is automatic; ROOT::RDF::RunGraphs({r1, r2});; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; No",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
Testability,test,test,"umnTypes > > > &&... ; colNameProxyPairs). Factory method to create a Lazy RDataFrame. ; Parameters. [in]colNameProxyPairsthe series of pairs to describe the columns of the data source, first element of the pair is the name of the column and the second is the RResultPtr to the column in the parent data frame. . Definition at line 29 of file RLazyDS.hxx. ◆ MakeTrivialDataFrame() [1/2]. RInterface< RDFDetail::RLoopManager > ROOT::RDF::MakeTrivialDataFrame ; (; ). Make a RDF wrapping a RTrivialDS with infinite entries, for demo purposes. ; Definition at line 130 of file RTrivialDS.cxx. ◆ MakeTrivialDataFrame() [2/2]. RInterface< RDFDetail::RLoopManager > ROOT::RDF::MakeTrivialDataFrame ; (; ULong64_t ; size, . bool ; skipEvenEntries = false . ). Make a RDF wrapping a RTrivialDS with the specified amount of entries. ; Constructing an RDataFrame as RDataFrame(nEntries) is a superior alternative. If size is std::numeric_limits<ULong64_t>::max(), this acts as an infinite data-source: it returns entries from GetEntryRanges forever or until a Range stops the event loop (for test purposes). ; Definition at line 123 of file RTrivialDS.cxx. ◆ Not(). template<typename F , typename Args = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::arg_types_nodecay, typename Ret = typename ROOT::TypeTraits::CallableTraits<std::decay_t<F>>::ret_type> . auto ROOT::RDF::Not ; (; F && ; f); -> decltype(RDFInternal::NotHelper(Args(), std::forward<F>(f))). Given a callable with signature bool(T1, T2, ...) return a callable with same signature that returns the negated result. ; The callable must have one single non-template definition of operator(). This is a limitation with respect to std::not_fn, required for interoperability with RDataFrame. ; Definition at line 83 of file RDFHelpers.hxx. ◆ operator!=() [1/3]. template<class T1 , class T2 > . bool ROOT::RDF::operator!= ; (; const RResultPtr< T1 > & ; lhs, . const RResultPtr< T2 > & ; rhs . ). Definition at line 407 of file RResultPtr",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
Usability,simpl,simple,"Getter;  Helper to get the contents of a given column. More...;  ; class  RDisplay;  This class is the textual representation of the content of a columnar dataset. More...;  ; class  RInterface;  The public interface to the RDataFrame federation of classes. More...;  ; class  RInterfaceBase;  ; class  RLazyDS;  A RDataSource implementation which is built on top of result proxies. More...;  ; class  RResultHandle;  A type-erased version of RResultPtr and RResultMap. More...;  ; class  RResultPtr;  Smart pointer for the return type of actions. More...;  ; class  RSampleInfo;  This type represents a sample identifier, to be used in conjunction with RDataFrame features such as DefinePerSample() and per-sample callbacks. More...;  ; struct  RSnapshotOptions;  A collection of options to steer the creation of the dataset on file. More...;  ; class  RSqliteDS;  RSqliteDS is an RDF data source implementation for SQL result sets from sqlite3 files. More...;  ; class  RTrivialDS;  A simple data-source implementation, for demo purposes. More...;  ; class  RVariationsDescription;  A descriptor for the systematic variations known to a given RDataFrame node. More...;  ; class  TCutInfo;  ; class  TH1DModel;  A struct which stores the parameters of a TH1D. More...;  ; class  TH2DModel;  A struct which stores the parameters of a TH2D. More...;  ; class  TH3DModel;  A struct which stores the parameters of a TH3D. More...;  ; class  THnDModel;  A struct which stores the parameters of a THnD. More...;  ; class  TProfile1DModel;  A struct which stores the parameters of a TProfile. More...;  ; class  TProfile2DModel;  A struct which stores the parameters of a TProfile2D. More...;  ; class  VerifyValidColumnType;  Helper to determine if a given Column is a supported type. More...;  . Typedefs; using ColumnNames_t = std::vector< std::string >;  ; using RNode = RInterface<::ROOT::Detail::RDF::RNodeBase, void >;  ; using SampleCallback_t = std::function< void(unsigned int, const ROOT::RDF::R",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html
Availability,down,down,"sample must have at least one key ""trees"" and at least one key ""files"" from which the data is read. Optionally, one or more metadata information can be added, as well as the friend list information. Example specification file JSON:; The following is an example of the dataset specification JSON file formatting: {; ""samples"": {; ""sampleA"": {; ""trees"": [""tree1"", ""tree2""],; ""files"": [""file1.root"", ""file2.root""],; ""metadata"": {""lumi"": 1.0, }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {""lumi"": 0.5, }; },; ...; },; }. Definition at line 1906 of file RDataFrame.cxx. ◆ VariationsFor() [1/2]. template<typename T > . RResultMap< T > ROOT::RDF::Experimental::VariationsFor ; (; RResultPtr< T > ; resPtr). Produce all required systematic variations for the given result. ; Parameters. [in]resPtrThe result for which variations should be produced. . ReturnsA RResultMap object with full variation names as strings (e.g. ""pt:down"") and the corresponding varied results as values.; A given input RResultPtr<T> produces a corresponding RResultMap<T> with a ""nominal"" key that will return a value identical to the one contained in the original RResultPtr. Other keys correspond to the varied values of this result, one for each variation that the result depends on. VariationsFor does not trigger the event loop. The event loop is only triggered upon first access to a valid key, similarly to what happens with RResultPtr.; If the result does not depend, directly or indirectly, from any registered systematic variation, the returned RResultMap will contain only the ""nominal"" key.; See RDataFrame's Vary method for more information and example usages.; NoteCurrently, producing variations for the results of Display, Report and Snapshot actions is not supported. ; Definition at line 219 of file RDFHelpers.hxx. ◆ VariationsFor() [2/2]. ROOT::RDF::Experimental::SnapshotPtr_t ROOT::RDF::Experimental::VariationsFor ; (; SnapshotPtr_t ; resPtr). Definit",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF_1_1Experimental.html
Integrability,interface,interface,"en result. ;  ; SnapshotPtr_t VariationsFor (SnapshotPtr_t resPtr);  . Typedef Documentation. ◆ SnapshotPtr_t. using ROOT::RDF::Experimental::SnapshotPtr_t = typedef ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void> >. Definition at line 269 of file RDFHelpers.hxx. Function Documentation. ◆ AddProgressBar() [1/2]. void ROOT::RDF::Experimental::AddProgressBar ; (; ROOT::RDataFrame ; df). Add ProgressBar to an RDataFrame. ; Parameters. [in]dfRDataFrame for which ProgressBar is called. This function adds a ProgressBar to display the event statistics in the terminal every m events and every n seconds, including elapsed time, currently processed file, currently processed events, the rate of event processing and an estimated remaining time (per file being processed). ProgressBar should be added after the dataframe object (df) is created first: ROOT::RDataFrame df(""tree"", ""file.root"");; ROOT::RDF::Experimental::AddProgressBar(df);; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; For more details see ROOT::RDF::Experimental::ProgressHelper Class. ; Definition at line 382 of file RDFHelpers.cxx. ◆ AddProgressBar() [2/2]. void ROOT::RDF::Experimental::AddProgressBar ; (; ROOT::RDF::RNode ; df). Add ProgressBar to a ROOT::RDF::RNode. ; Parameters. [in]dfRDataFrame node at which ProgressBar is called. The ProgressBar can be added not only at the RDataFrame head node, but also at any any computational node, such as Filter or Define. . Example usage:; ROOT::RDataFrame df(""tree"", ""file.root"");; auto df_1 = ROOT::RDF::RNode(df.Filter(""x>1""));; ROOT::RDF::Experimental::AddProgressBar(df_1);; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57. Definition at lin",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF_1_1Experimental.html
Security,access,access," as the friend list information. Example specification file JSON:; The following is an example of the dataset specification JSON file formatting: {; ""samples"": {; ""sampleA"": {; ""trees"": [""tree1"", ""tree2""],; ""files"": [""file1.root"", ""file2.root""],; ""metadata"": {""lumi"": 1.0, }; },; ""sampleB"": {; ""trees"": [""tree3"", ""tree4""],; ""files"": [""file3.root"", ""file4.root""],; ""metadata"": {""lumi"": 0.5, }; },; ...; },; }. Definition at line 1906 of file RDataFrame.cxx. ◆ VariationsFor() [1/2]. template<typename T > . RResultMap< T > ROOT::RDF::Experimental::VariationsFor ; (; RResultPtr< T > ; resPtr). Produce all required systematic variations for the given result. ; Parameters. [in]resPtrThe result for which variations should be produced. . ReturnsA RResultMap object with full variation names as strings (e.g. ""pt:down"") and the corresponding varied results as values.; A given input RResultPtr<T> produces a corresponding RResultMap<T> with a ""nominal"" key that will return a value identical to the one contained in the original RResultPtr. Other keys correspond to the varied values of this result, one for each variation that the result depends on. VariationsFor does not trigger the event loop. The event loop is only triggered upon first access to a valid key, similarly to what happens with RResultPtr.; If the result does not depend, directly or indirectly, from any registered systematic variation, the returned RResultMap will contain only the ""nominal"" key.; See RDataFrame's Vary method for more information and example usages.; NoteCurrently, producing variations for the results of Display, Report and Snapshot actions is not supported. ; Definition at line 219 of file RDFHelpers.hxx. ◆ VariationsFor() [2/2]. ROOT::RDF::Experimental::SnapshotPtr_t ROOT::RDF::Experimental::VariationsFor ; (; SnapshotPtr_t ; resPtr). Definition at line 135 of file RDFHelpers.cxx. ROOTRDFExperimental. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1RDF_1_1Experimental.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF_1_1Experimental.html
Availability,failure,failures,". ROOT: ROOT::TestSupport Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions |; Variables ; ROOT::TestSupport Namespace Reference. Classes; class  CheckDiagsRAII;  Install a ROOT diagnostic handler to analyse diagnostics. More...;  ; class  FilterDiagsRAII;  Allows a user function to catch and filter/analyse ROOT and cling diagnostics, e.g. More...;  ; struct  ForbidDiagnostics;  Error handler for gtests that generates failures for every received diagnostic > kInfo when this file is linked to. More...;  . Functions; std::ostream & operator<< (std::ostream &stream, CheckDiagsRAII::Diag_t const &diag);  . Variables; static struct ROOT::TestSupport::ForbidDiagnostics noDiagCheckerInstance;  . Function Documentation. ◆ operator<<(). std::ostream & ROOT::TestSupport::operator<< ; (; std::ostream & ; stream, . CheckDiagsRAII::Diag_t const & ; diag . ). Definition at line 138 of file TestSupport.cxx. Variable Documentation. ◆ noDiagCheckerInstance. struct ROOT::TestSupport::ForbidDiagnostics ROOT::TestSupport::noDiagCheckerInstance. static . ROOTTestSupport. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/namespaceROOT_1_1TestSupport.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TestSupport.html
