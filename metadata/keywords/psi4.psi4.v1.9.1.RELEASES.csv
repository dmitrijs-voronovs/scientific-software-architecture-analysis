quality_attribute,keyword,matched_word,sentence,source,author,repo,version,wiki,url
Availability,redundant,redundant,"/psi4/psi4/pull/3050): Adds Einsums library to build system as an optional dependency. ## Breaking Changes (1 PR); [#2974](https://github.com/psi4/psi4/pull/2974): Using the ERISieve class now throws an UpgradeHelper exception: `ERISieve.build(orbital_basis, cutoff, do_csam)` --> `factory = psi4.core.IntegralFactory(basis); factory.eri(0)`; #3095 The old versions of `variable`/`set_variable` (e.g., `get_variable`, `arrays`) have been warning-and-forwarding since v1.4 but now raise an UpgradeHelper. ## Performance Optimizations (5 PRs); [#3064](https://github.com/psi4/psi4/pull/3064): Improves performance of call to “psi4 –version”, especially for networked drives ; [#2851](https://github.com/psi4/psi4/pull/2851): Improves memory usage of DLPNO-MP2 by better exploiting PAO sparsity during computation of DF integrals ; [#2994](https://github.com/psi4/psi4/pull/2994) / [#2996](https://github.com/psi4/psi4/pull/2996): Refactors UHF Hessian code to avoid redundant recomputation of intermediates required in both alpha- and beta-spin components of the calculation ; [#3080](https://github.com/psi4/psi4/pull/3080): Disable unnecessary computation of FDDS dispersion for SAPT(DFT) when the DFT functional is set to HF. ## Details of Interest (30 PRs); #3095 Allow running a a GRID_ESP or GRID_FIELD property through qcschema. need to pass in grid.dat contents through atin.extras[""extra_infiles""] = {""grid.dat"": <contents>} and be sure to atin.protocols.native_files = ""all"", then one can retrieve through atres.native_files[""grid_esp.dat""] or ""grid_field.dat"" closes https://github.com/psi4/psi4/issues/2307; [#2955](https://github.com/psi4/psi4/pull/2955), [#3055](https://github.com/psi4/psi4/pull/3055): Adds new “SplitJK” backend for composite SCF_TYPE combinations ; [#3001](https://github.com/psi4/psi4/pull/3001): Composite SCF_TYPE methods can now be specified using only a J algorithm for non-hybrid DFT calculations ; [#3024](https://github.com/psi4/psi4/pull/3024) / [#3026](https",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
Deployability,install,installers,"Advertised Version: 1.9.0 ; Continuous Version: 1.9.0 ; Release Date: 6 Dec 2023 ; Documentation: https://psicode.org/psi4manual/1.9.x/ . ; Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.app/installs/v19/), [Docker](https://hub.docker.com/r/psi4/psi4/tags) Span: [79 PRs](https://github.com/psi4/psi4/milestone/10?closed=1). ## Required Dependency Changes (3 PRs); [#3022](https://github.com/psi4/psi4/pull/3022): Updates QCEngine to v0.28; [#2968](https://github.com/psi4/psi4/pull/2968): Updates gdma to v2.3 and switches gdma usage to be selectable at runtime; [#3090](https://github.com/psi4/psi4/pull/3090): Updates QCFractal to v0.52; #2842 Bump Libxc minimum from v5.1.2 to v6. ## New Methods (6 PRs); [#2992](https://github.com/psi4/psi4/pull/2992): Adds support for computation of analytic Hessians when using unrestricted DFT with LDA functionals; [#3039](https://github.com/psi4/psi4/pull/3039): adds fitted SAP guess described in J. Chem. Phys. 152, 144105 (2020) and accessed through set guess sapgau (backported to v1.8.2) ; [#3002](https://github.com/psi4/psi4/pull/3002) / [#3011](https://github.com/psi4/psi4/pull/3011): Implements new option for GUESS keyword, MODHUCKEL, using a Huckel guess computed on-the-fly using atomic UHF and a modification to the generalized Wolfsberg-Helmholz formula from doi:10.1021/ja00480a005 ; [#2982](https://github.com/psi4/psi4/pull/2982): Adds the ability to construct basis sets from combinations of two constituent basis sets, via either a simple combination or through the Complementary Auxiliary Basis Set (CABS) method; [#2842](https://github.com/psi4/psi4/pull/2842): Adds new composite methods r2SCAN-3c, wB97X-3c, and B97-3c, and new density functionals r2SCAN0, r2SCANh, and r2SCAN50 and their -D4 variants. Some of these require recent versions of dftd4-python, dftd3-python (s-dftd3), gcp-correction (aka mctc-gcp), all from the conda-forge channel. The ""classic"" dftd3 (executable) ",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
Energy Efficiency,charge,charges,"tion snapshots of previous code versions ; [#2961](https://github.com/psi4/psi4/pull/2961) / [#2979](https://github.com/psi4/psi4/pull/2979): Updates dependencies within Azure CI execution on Windows, and makes general improvements to such execution; [#3059](https://github.com/psi4/psi4/pull/3059): Cleans up documentation regarding management of Psi4 releases ; [#3088](https://github.com/psi4/psi4/pull/3088) Removes unnecessary macros kept over from previous usage of Boost, and never removed; [#3049](https://github.com/psi4/psi4/pull/3049): Fixes up code to support Python 3.12 and more modern versions of QCFractal ; [#3079](https://github.com/psi4/psi4/pull/3079): Updates documentation regarding usage of composite JK methods and COSX grid defaults; [#3081](https://github.com/psi4/psi4/pull/3081): Sets broken combinations of SCF type and screening method to throw exceptions ; [#3087](https://github.com/psi4/psi4/pull/3087): Adds the capability to compute and retrieve gradients with respect to embedded point charges in external potential calculations; [#3053](https://github.com/psi4/psi4/pull/3053): Reworks internal documentation building process to fix broken Psicode redirects and enable capabilities with new Sphinx themes. ## Conda Package Updates; includes PCMSolver (backported to v1.8.1); includes libECPInt (build _2 onwards; not present for osx-arm64 with py != 3.10 in build _1 or _0) (backported to v1.8.1); includes files so psi4 --plugin-compile from Linux and Mac can work off the conda binary compatible with pydantic v1 or v2 in build _2 (backported to v1.8.1). ## Features (11 PRs); [#2999](https://github.com/psi4/psi4/pull/2999) / [#3019](https://github.com/psi4/psi4/pull/3019): still using pydantic v1 API, but now tolerant of a v1 or v2 pydantic environment. (this was already present by patch in build _2 of v1.8.1 on conda-forge.) (backported to v1.8.2); [#3013](https://github.com/psi4/psi4/pull/3013): allow passing protocols, tag, owner_group, and priority ",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
Integrability,depend,dependency," keyword, MODHUCKEL, using a Huckel guess computed on-the-fly using atomic UHF and a modification to the generalized Wolfsberg-Helmholz formula from doi:10.1021/ja00480a005 ; [#2982](https://github.com/psi4/psi4/pull/2982): Adds the ability to construct basis sets from combinations of two constituent basis sets, via either a simple combination or through the Complementary Auxiliary Basis Set (CABS) method; [#2842](https://github.com/psi4/psi4/pull/2842): Adds new composite methods r2SCAN-3c, wB97X-3c, and B97-3c, and new density functionals r2SCAN0, r2SCANh, and r2SCAN50 and their -D4 variants. Some of these require recent versions of dftd4-python, dftd3-python (s-dftd3), gcp-correction (aka mctc-gcp), all from the conda-forge channel. The ""classic"" dftd3 (executable) and gcp from the psi4 channel still work for many methods (e.g., b3lyp-d3) and aren't disabled but are no longer supported. ## External Libraries (1 PR); [#3050](https://github.com/psi4/psi4/pull/3050): Adds Einsums library to build system as an optional dependency. ## Breaking Changes (1 PR); [#2974](https://github.com/psi4/psi4/pull/2974): Using the ERISieve class now throws an UpgradeHelper exception: `ERISieve.build(orbital_basis, cutoff, do_csam)` --> `factory = psi4.core.IntegralFactory(basis); factory.eri(0)`; #3095 The old versions of `variable`/`set_variable` (e.g., `get_variable`, `arrays`) have been warning-and-forwarding since v1.4 but now raise an UpgradeHelper. ## Performance Optimizations (5 PRs); [#3064](https://github.com/psi4/psi4/pull/3064): Improves performance of call to “psi4 –version”, especially for networked drives ; [#2851](https://github.com/psi4/psi4/pull/2851): Improves memory usage of DLPNO-MP2 by better exploiting PAO sparsity during computation of DF integrals ; [#2994](https://github.com/psi4/psi4/pull/2994) / [#2996](https://github.com/psi4/psi4/pull/2996): Refactors UHF Hessian code to avoid redundant recomputation of intermediates required in both alpha- and beta-spin",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
Modifiability,variab,variable,"a simple combination or through the Complementary Auxiliary Basis Set (CABS) method; [#2842](https://github.com/psi4/psi4/pull/2842): Adds new composite methods r2SCAN-3c, wB97X-3c, and B97-3c, and new density functionals r2SCAN0, r2SCANh, and r2SCAN50 and their -D4 variants. Some of these require recent versions of dftd4-python, dftd3-python (s-dftd3), gcp-correction (aka mctc-gcp), all from the conda-forge channel. The ""classic"" dftd3 (executable) and gcp from the psi4 channel still work for many methods (e.g., b3lyp-d3) and aren't disabled but are no longer supported. ## External Libraries (1 PR); [#3050](https://github.com/psi4/psi4/pull/3050): Adds Einsums library to build system as an optional dependency. ## Breaking Changes (1 PR); [#2974](https://github.com/psi4/psi4/pull/2974): Using the ERISieve class now throws an UpgradeHelper exception: `ERISieve.build(orbital_basis, cutoff, do_csam)` --> `factory = psi4.core.IntegralFactory(basis); factory.eri(0)`; #3095 The old versions of `variable`/`set_variable` (e.g., `get_variable`, `arrays`) have been warning-and-forwarding since v1.4 but now raise an UpgradeHelper. ## Performance Optimizations (5 PRs); [#3064](https://github.com/psi4/psi4/pull/3064): Improves performance of call to “psi4 –version”, especially for networked drives ; [#2851](https://github.com/psi4/psi4/pull/2851): Improves memory usage of DLPNO-MP2 by better exploiting PAO sparsity during computation of DF integrals ; [#2994](https://github.com/psi4/psi4/pull/2994) / [#2996](https://github.com/psi4/psi4/pull/2996): Refactors UHF Hessian code to avoid redundant recomputation of intermediates required in both alpha- and beta-spin components of the calculation ; [#3080](https://github.com/psi4/psi4/pull/3080): Disable unnecessary computation of FDDS dispersion for SAPT(DFT) when the DFT functional is set to HF. ## Details of Interest (30 PRs); #3095 Allow running a a GRID_ESP or GRID_FIELD property through qcschema. need to pass in grid.dat content",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
Performance,perform,performance,"4 variants. Some of these require recent versions of dftd4-python, dftd3-python (s-dftd3), gcp-correction (aka mctc-gcp), all from the conda-forge channel. The ""classic"" dftd3 (executable) and gcp from the psi4 channel still work for many methods (e.g., b3lyp-d3) and aren't disabled but are no longer supported. ## External Libraries (1 PR); [#3050](https://github.com/psi4/psi4/pull/3050): Adds Einsums library to build system as an optional dependency. ## Breaking Changes (1 PR); [#2974](https://github.com/psi4/psi4/pull/2974): Using the ERISieve class now throws an UpgradeHelper exception: `ERISieve.build(orbital_basis, cutoff, do_csam)` --> `factory = psi4.core.IntegralFactory(basis); factory.eri(0)`; #3095 The old versions of `variable`/`set_variable` (e.g., `get_variable`, `arrays`) have been warning-and-forwarding since v1.4 but now raise an UpgradeHelper. ## Performance Optimizations (5 PRs); [#3064](https://github.com/psi4/psi4/pull/3064): Improves performance of call to “psi4 –version”, especially for networked drives ; [#2851](https://github.com/psi4/psi4/pull/2851): Improves memory usage of DLPNO-MP2 by better exploiting PAO sparsity during computation of DF integrals ; [#2994](https://github.com/psi4/psi4/pull/2994) / [#2996](https://github.com/psi4/psi4/pull/2996): Refactors UHF Hessian code to avoid redundant recomputation of intermediates required in both alpha- and beta-spin components of the calculation ; [#3080](https://github.com/psi4/psi4/pull/3080): Disable unnecessary computation of FDDS dispersion for SAPT(DFT) when the DFT functional is set to HF. ## Details of Interest (30 PRs); #3095 Allow running a a GRID_ESP or GRID_FIELD property through qcschema. need to pass in grid.dat contents through atin.extras[""extra_infiles""] = {""grid.dat"": <contents>} and be sure to atin.protocols.native_files = ""all"", then one can retrieve through atres.native_files[""grid_esp.dat""] or ""grid_field.dat"" closes https://github.com/psi4/psi4/issues/2307; [#2955](https",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
Safety,avoid,avoid,"/psi4/psi4/pull/3050): Adds Einsums library to build system as an optional dependency. ## Breaking Changes (1 PR); [#2974](https://github.com/psi4/psi4/pull/2974): Using the ERISieve class now throws an UpgradeHelper exception: `ERISieve.build(orbital_basis, cutoff, do_csam)` --> `factory = psi4.core.IntegralFactory(basis); factory.eri(0)`; #3095 The old versions of `variable`/`set_variable` (e.g., `get_variable`, `arrays`) have been warning-and-forwarding since v1.4 but now raise an UpgradeHelper. ## Performance Optimizations (5 PRs); [#3064](https://github.com/psi4/psi4/pull/3064): Improves performance of call to “psi4 –version”, especially for networked drives ; [#2851](https://github.com/psi4/psi4/pull/2851): Improves memory usage of DLPNO-MP2 by better exploiting PAO sparsity during computation of DF integrals ; [#2994](https://github.com/psi4/psi4/pull/2994) / [#2996](https://github.com/psi4/psi4/pull/2996): Refactors UHF Hessian code to avoid redundant recomputation of intermediates required in both alpha- and beta-spin components of the calculation ; [#3080](https://github.com/psi4/psi4/pull/3080): Disable unnecessary computation of FDDS dispersion for SAPT(DFT) when the DFT functional is set to HF. ## Details of Interest (30 PRs); #3095 Allow running a a GRID_ESP or GRID_FIELD property through qcschema. need to pass in grid.dat contents through atin.extras[""extra_infiles""] = {""grid.dat"": <contents>} and be sure to atin.protocols.native_files = ""all"", then one can retrieve through atres.native_files[""grid_esp.dat""] or ""grid_field.dat"" closes https://github.com/psi4/psi4/issues/2307; [#2955](https://github.com/psi4/psi4/pull/2955), [#3055](https://github.com/psi4/psi4/pull/3055): Adds new “SplitJK” backend for composite SCF_TYPE combinations ; [#3001](https://github.com/psi4/psi4/pull/3001): Composite SCF_TYPE methods can now be specified using only a J algorithm for non-hybrid DFT calculations ; [#3024](https://github.com/psi4/psi4/pull/3024) / [#3026](https",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
Security,access,accessed," 1.9.0 ; Release Date: 6 Dec 2023 ; Documentation: https://psicode.org/psi4manual/1.9.x/ . ; Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.app/installs/v19/), [Docker](https://hub.docker.com/r/psi4/psi4/tags) Span: [79 PRs](https://github.com/psi4/psi4/milestone/10?closed=1). ## Required Dependency Changes (3 PRs); [#3022](https://github.com/psi4/psi4/pull/3022): Updates QCEngine to v0.28; [#2968](https://github.com/psi4/psi4/pull/2968): Updates gdma to v2.3 and switches gdma usage to be selectable at runtime; [#3090](https://github.com/psi4/psi4/pull/3090): Updates QCFractal to v0.52; #2842 Bump Libxc minimum from v5.1.2 to v6. ## New Methods (6 PRs); [#2992](https://github.com/psi4/psi4/pull/2992): Adds support for computation of analytic Hessians when using unrestricted DFT with LDA functionals; [#3039](https://github.com/psi4/psi4/pull/3039): adds fitted SAP guess described in J. Chem. Phys. 152, 144105 (2020) and accessed through set guess sapgau (backported to v1.8.2) ; [#3002](https://github.com/psi4/psi4/pull/3002) / [#3011](https://github.com/psi4/psi4/pull/3011): Implements new option for GUESS keyword, MODHUCKEL, using a Huckel guess computed on-the-fly using atomic UHF and a modification to the generalized Wolfsberg-Helmholz formula from doi:10.1021/ja00480a005 ; [#2982](https://github.com/psi4/psi4/pull/2982): Adds the ability to construct basis sets from combinations of two constituent basis sets, via either a simple combination or through the Complementary Auxiliary Basis Set (CABS) method; [#2842](https://github.com/psi4/psi4/pull/2842): Adds new composite methods r2SCAN-3c, wB97X-3c, and B97-3c, and new density functionals r2SCAN0, r2SCANh, and r2SCAN50 and their -D4 variants. Some of these require recent versions of dftd4-python, dftd3-python (s-dftd3), gcp-correction (aka mctc-gcp), all from the conda-forge channel. The ""classic"" dftd3 (executable) and gcp from the psi4 channel still work for m",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
Testability,test,test,"e export docstrings for fix_orientation and fix_com functions in export_mints.cc; [#2975](https://github.com/psi4/psi4/pull/2975): Adds missing LibXC citation to documentation; [#3018](https://github.com/psi4/psi4/pull/3018): Cleans up broken links and deprecated functions in psiapi Jupyter notebook; [#3005](https://github.com/psi4/psi4/pull/3005): Adds clarifying details to cubature.cc code regarding the Chebyshev quadrature implementation; [#3078](https://github.com/psi4/psi4/pull/3078): Refines build process for Libint2 code generator; [#2953](https://github.com/psi4/psi4/pull/2953): Deprecate assignment-from-int* and cast-to-int* operations for the Dimension object, and make multiple significant improvements to the Dimension object under the hood ; [#2987](https://github.com/psi4/psi4/pull/2987): Adds capability to acquire more types of F12 integrals Python-side with basis set quadruplets; [#2966](https://github.com/psi4/psi4/pull/2966): Update README display badges and binder demo, and fix bug in serial quick_not_d2ints test; [#3056](https://github.com/psi4/psi4/pull/3056) / [#3058](https://github.com/psi4/psi4/pull/3058): Alters internal handling of documentation building to more effectively handle storage of documentation snapshots of previous code versions ; [#2961](https://github.com/psi4/psi4/pull/2961) / [#2979](https://github.com/psi4/psi4/pull/2979): Updates dependencies within Azure CI execution on Windows, and makes general improvements to such execution; [#3059](https://github.com/psi4/psi4/pull/3059): Cleans up documentation regarding management of Psi4 releases ; [#3088](https://github.com/psi4/psi4/pull/3088) Removes unnecessary macros kept over from previous usage of Boost, and never removed; [#3049](https://github.com/psi4/psi4/pull/3049): Fixes up code to support Python 3.12 and more modern versions of QCFractal ; [#3079](https://github.com/psi4/psi4/pull/3079): Updates documentation regarding usage of composite JK methods and COSX grid default",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
Usability,simpl,simple,"968): Updates gdma to v2.3 and switches gdma usage to be selectable at runtime; [#3090](https://github.com/psi4/psi4/pull/3090): Updates QCFractal to v0.52; #2842 Bump Libxc minimum from v5.1.2 to v6. ## New Methods (6 PRs); [#2992](https://github.com/psi4/psi4/pull/2992): Adds support for computation of analytic Hessians when using unrestricted DFT with LDA functionals; [#3039](https://github.com/psi4/psi4/pull/3039): adds fitted SAP guess described in J. Chem. Phys. 152, 144105 (2020) and accessed through set guess sapgau (backported to v1.8.2) ; [#3002](https://github.com/psi4/psi4/pull/3002) / [#3011](https://github.com/psi4/psi4/pull/3011): Implements new option for GUESS keyword, MODHUCKEL, using a Huckel guess computed on-the-fly using atomic UHF and a modification to the generalized Wolfsberg-Helmholz formula from doi:10.1021/ja00480a005 ; [#2982](https://github.com/psi4/psi4/pull/2982): Adds the ability to construct basis sets from combinations of two constituent basis sets, via either a simple combination or through the Complementary Auxiliary Basis Set (CABS) method; [#2842](https://github.com/psi4/psi4/pull/2842): Adds new composite methods r2SCAN-3c, wB97X-3c, and B97-3c, and new density functionals r2SCAN0, r2SCANh, and r2SCAN50 and their -D4 variants. Some of these require recent versions of dftd4-python, dftd3-python (s-dftd3), gcp-correction (aka mctc-gcp), all from the conda-forge channel. The ""classic"" dftd3 (executable) and gcp from the psi4 channel still work for many methods (e.g., b3lyp-d3) and aren't disabled but are no longer supported. ## External Libraries (1 PR); [#3050](https://github.com/psi4/psi4/pull/3050): Adds Einsums library to build system as an optional dependency. ## Breaking Changes (1 PR); [#2974](https://github.com/psi4/psi4/pull/2974): Using the ERISieve class now throws an UpgradeHelper exception: `ERISieve.build(orbital_basis, cutoff, do_csam)` --> `factory = psi4.core.IntegralFactory(basis); factory.eri(0)`; #3095 The old ",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.9
Availability,avail,available,"Advertised Version: 1.7; Continuous Version: 1.7; Release Date: 6 Dec 2022; NYI Documentation: https://psicode.org/psi4manual/1.7.0/; Availability: Public, GitHub source, CMake build, NYI [Conda binary installers](https://psicode.netlify.com/installs/v17/); Span: [141 PRs](https://github.com/psi4/psi4/milestone/8?closed=1). ## Required Dependency Changes. ## New Methods. * Hybrid perturbative methods REMP (https://doi.org/10.1063/1.5086168) and OO-REMP (https://doi.org/10.1021/acs.jctc.1c00280) with `cc_type = CONV/DF/CD`. REMP is essentially a hybrid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). REMP2 energies and OREMP2 energies and non-CD gradients are available. (#2354, #2653, #2670); * UHF non-orbital-optimized, non-FNO coupled cluster methods: DF/CD energies and DF gradients for UHF CCD/CCSD are available. (#2739); * Implementation of PCM and COSMO solvation models based on the ddx library. (#2767). ## External Libraries. * Works with geomeTRIC v1.0 rather than longstanding v0.9.7. (#2750); * Internal ADC module removed. External ADCC v0.15.13 module covers its capabilities and more. (#2737, #2785); * Works with Libxc v5 or v6. (#2815, #2817); * Replace internal C++ geometry optimizer, optking, with an external Python module. (#2727); * Most inputs should continue to work as before.; * The fixed_* optimization keywords have been changed to ranged_* options.; * Optimizer output will be changed. Check output.dat for simple convergence/step info and output.log for detailed info.; * IRC convergence behavior different for minima and substep.; * Note that this is a new *required* dependency.; * Interface to the ddx library for solvation. (#2767); * Additionally support the next branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8 (#2821); * Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks main",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
Deployability,install,installers,"Advertised Version: 1.7; Continuous Version: 1.7; Release Date: 6 Dec 2022; NYI Documentation: https://psicode.org/psi4manual/1.7.0/; Availability: Public, GitHub source, CMake build, NYI [Conda binary installers](https://psicode.netlify.com/installs/v17/); Span: [141 PRs](https://github.com/psi4/psi4/milestone/8?closed=1). ## Required Dependency Changes. ## New Methods. * Hybrid perturbative methods REMP (https://doi.org/10.1063/1.5086168) and OO-REMP (https://doi.org/10.1021/acs.jctc.1c00280) with `cc_type = CONV/DF/CD`. REMP is essentially a hybrid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). REMP2 energies and OREMP2 energies and non-CD gradients are available. (#2354, #2653, #2670); * UHF non-orbital-optimized, non-FNO coupled cluster methods: DF/CD energies and DF gradients for UHF CCD/CCSD are available. (#2739); * Implementation of PCM and COSMO solvation models based on the ddx library. (#2767). ## External Libraries. * Works with geomeTRIC v1.0 rather than longstanding v0.9.7. (#2750); * Internal ADC module removed. External ADCC v0.15.13 module covers its capabilities and more. (#2737, #2785); * Works with Libxc v5 or v6. (#2815, #2817); * Replace internal C++ geometry optimizer, optking, with an external Python module. (#2727); * Most inputs should continue to work as before.; * The fixed_* optimization keywords have been changed to ranged_* options.; * Optimizer output will be changed. Check output.dat for simple convergence/step info and output.log for detailed info.; * IRC convergence behavior different for minima and substep.; * Note that this is a new *required* dependency.; * Interface to the ddx library for solvation. (#2767); * Additionally support the next branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8 (#2821); * Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks main",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
Energy Efficiency,energy,energy,"u notice a problem. (#2758); * LinearK algorithm has been removed as an option to SCF_TYPE=DIRECT (`DO_LINK` is no longer an option). It has been added back through `SCF_TYPE=LINK` that enables integral-direct density-fitted J + Linear Exchange K algorithm combination for JK computations. (#2762, #2768); * Delayed announcement that IR intensities through finite difference Hessians work as of distributed driver in v1.6. (#2469); * UHF instability analysis is migrated over to use the Python Davidson solver. This adds LDA UKS instability analysis. (#2766); * The keyword SOLVER_ROOTS_PER_IRREP has been added to allow more fine-tuned control over the roots converged during instability analysis. (#2766); * Instability keywords have moved from the CPHF module to the SCF module. See the corresponding SCF subsection of the documentation for details. (#2766); * The LINEQ_SOLVER option for occ has been removed in favor of LAPACK calls. (#2778); * Kinetic energy, potential energy, and virial energy are added as QCVariables for fully QM HF and CC computations. The variable names are subject to change. (#2769); * Changed the default scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from DISP to FIXED which scales the uncoupled Exch-Disp2 by 0.769848. (#2481); * Added shortcut for SPW92 functional. (#2784); * Replace `sq_rsp()` function internally with a new wrapper to DSYEV. Deprecate `rsp()` and `sq_rsp()`. (#2686, #2798); * Orbital-optimized occ densities now available on the wavefunction. (#2788); * DC-06 densities now symmetrized. (#2788); * Empirical dispersion capabilities changed slightly between dftd3 and s-dftd3. In particular, the former can also do -D2 and the latter can do 3-body -D3 in the same call as 2-body -D3. All Psi4 calls will continue to do only 2-body -D3 as default (regardless of dftd3 or s-dftd3 engine). That is, -d3 is still an alias to -d3zero which is now an alias to a new extension -d3zero2b, which can now be given explicitly disallo",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
Integrability,depend,dependency,"6.07.081). REMP2 energies and OREMP2 energies and non-CD gradients are available. (#2354, #2653, #2670); * UHF non-orbital-optimized, non-FNO coupled cluster methods: DF/CD energies and DF gradients for UHF CCD/CCSD are available. (#2739); * Implementation of PCM and COSMO solvation models based on the ddx library. (#2767). ## External Libraries. * Works with geomeTRIC v1.0 rather than longstanding v0.9.7. (#2750); * Internal ADC module removed. External ADCC v0.15.13 module covers its capabilities and more. (#2737, #2785); * Works with Libxc v5 or v6. (#2815, #2817); * Replace internal C++ geometry optimizer, optking, with an external Python module. (#2727); * Most inputs should continue to work as before.; * The fixed_* optimization keywords have been changed to ranged_* options.; * Optimizer output will be changed. Check output.dat for simple convergence/step info and output.log for detailed info.; * IRC convergence behavior different for minima and substep.; * Note that this is a new *required* dependency.; * Interface to the ddx library for solvation. (#2767); * Additionally support the next branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8 (#2821); * Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks maintained by Psi4 folks still work and will be maintained until there's a reason not to. All are still run through QCEngine. Psi4 chooses automatically based on what's detected, so no change to input files needed. Package names and locations are a little different -- see table at PR or in docs. (#2791, #2360). ## Contributors to v1.7. @AlexHeide, @andyj10224, @aquaticseatard, @behnle, @bozkaya, @davpoolechem, @JonathonMisiewicz, @JoshRackers, @lazaroid, @loriab, @psi-rking, @maxscheurer, @mfherbst, @philipmnel, @sashashura, @susilehtola, @tallakahath, @TiborGY, @yxie326, @zachglick. ## Breaking Changes. * MRCC now called with `set qc_module mrcc",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
Modifiability,plugin,plugin,"eloped software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks maintained by Psi4 folks still work and will be maintained until there's a reason not to. All are still run through QCEngine. Psi4 chooses automatically based on what's detected, so no change to input files needed. Package names and locations are a little different -- see table at PR or in docs. (#2791, #2360). ## Contributors to v1.7. @AlexHeide, @andyj10224, @aquaticseatard, @behnle, @bozkaya, @davpoolechem, @JonathonMisiewicz, @JoshRackers, @lazaroid, @loriab, @psi-rking, @maxscheurer, @mfherbst, @philipmnel, @sashashura, @susilehtola, @tallakahath, @TiborGY, @yxie326, @zachglick. ## Breaking Changes. * MRCC now called with `set qc_module mrcc` rather than ""mr"" prefix onto method. (#2731); * Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF. Use MPn for RHF and ZAPTn for ROHF. (#2731); * Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. (#2727). ## Performance Optimizations. * Improves convergence of DF & CD orbital-optimized methods by implementing coupled DIIS for dfocc module. Can now converge tightly. (#2354, #2669); * Optimizes the integral transformation step of SAPT(DFT) where the transformed MO is written to disk. (#2481); * Running wavefunction SAPT0 through the SAPT(DFT) procedure now avoids redundant SCF calculations. (#2481); * Fixed a bug where UKS was not properly parallelized. (#2824). ## Details of Interest. * Migrate density screening from TwoBodyAOInt toward JK objects. (#2547); * Expanded standard suite testing to check return and QCVariable contracts for remp2, oremp2, omp2, omp2.5, omp3, oremp2, olccd, and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). (#2653, #2632); * Tightened rms_mograd_convergence default for OO in occ and dfocc modules so that at least small molecu",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
Performance,optimiz,optimized,"Advertised Version: 1.7; Continuous Version: 1.7; Release Date: 6 Dec 2022; NYI Documentation: https://psicode.org/psi4manual/1.7.0/; Availability: Public, GitHub source, CMake build, NYI [Conda binary installers](https://psicode.netlify.com/installs/v17/); Span: [141 PRs](https://github.com/psi4/psi4/milestone/8?closed=1). ## Required Dependency Changes. ## New Methods. * Hybrid perturbative methods REMP (https://doi.org/10.1063/1.5086168) and OO-REMP (https://doi.org/10.1021/acs.jctc.1c00280) with `cc_type = CONV/DF/CD`. REMP is essentially a hybrid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). REMP2 energies and OREMP2 energies and non-CD gradients are available. (#2354, #2653, #2670); * UHF non-orbital-optimized, non-FNO coupled cluster methods: DF/CD energies and DF gradients for UHF CCD/CCSD are available. (#2739); * Implementation of PCM and COSMO solvation models based on the ddx library. (#2767). ## External Libraries. * Works with geomeTRIC v1.0 rather than longstanding v0.9.7. (#2750); * Internal ADC module removed. External ADCC v0.15.13 module covers its capabilities and more. (#2737, #2785); * Works with Libxc v5 or v6. (#2815, #2817); * Replace internal C++ geometry optimizer, optking, with an external Python module. (#2727); * Most inputs should continue to work as before.; * The fixed_* optimization keywords have been changed to ranged_* options.; * Optimizer output will be changed. Check output.dat for simple convergence/step info and output.log for detailed info.; * IRC convergence behavior different for minima and substep.; * Note that this is a new *required* dependency.; * Interface to the ddx library for solvation. (#2767); * Additionally support the next branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8 (#2821); * Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks main",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
Safety,detect,detected,"#2737, #2785); * Works with Libxc v5 or v6. (#2815, #2817); * Replace internal C++ geometry optimizer, optking, with an external Python module. (#2727); * Most inputs should continue to work as before.; * The fixed_* optimization keywords have been changed to ranged_* options.; * Optimizer output will be changed. Check output.dat for simple convergence/step info and output.log for detailed info.; * IRC convergence behavior different for minima and substep.; * Note that this is a new *required* dependency.; * Interface to the ddx library for solvation. (#2767); * Additionally support the next branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8 (#2821); * Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks maintained by Psi4 folks still work and will be maintained until there's a reason not to. All are still run through QCEngine. Psi4 chooses automatically based on what's detected, so no change to input files needed. Package names and locations are a little different -- see table at PR or in docs. (#2791, #2360). ## Contributors to v1.7. @AlexHeide, @andyj10224, @aquaticseatard, @behnle, @bozkaya, @davpoolechem, @JonathonMisiewicz, @JoshRackers, @lazaroid, @loriab, @psi-rking, @maxscheurer, @mfherbst, @philipmnel, @sashashura, @susilehtola, @tallakahath, @TiborGY, @yxie326, @zachglick. ## Breaking Changes. * MRCC now called with `set qc_module mrcc` rather than ""mr"" prefix onto method. (#2731); * Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF. Use MPn for RHF and ZAPTn for ROHF. (#2731); * Downstream plugin users who were still getting wfn from globals will find it has now departed. Please follow the advice it's been issuing for years to do wfn passing. (#2727). ## Performance Optimizations. * Improves convergence of DF & CD orbital-optimized methods by implementing coupled DIIS for dfocc module. Can now",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
Security,access,accessing," tweaks. This latter is the same behavior as -D4, which turns on 3-body by default. If this seems confusing, state what calc you want — e.g., energy(""b3lyp-d3atm"") — and Psi4 will figure out if you have the right engine to do the job. (#2791); * psi4.core.Molecule.run_dftd3 and qcdb.Molecule.run_dftd3 don't work with s-dftd3. Please file an issue if you really want this capability. run_gcp will use classic gcp or mctc-gcp interchangeably, whichever you have available. (#2791). ## Bug Fixes. * Fixed memory estimates for larger systems in dfocc module by deploying long ints. (#2354, #2669); * Fixed OO ROHF printing and setting wrong plain MP2 energies. Fixed wrong `Wfn.energy_` for OMP3 & OMP2.5. (#2653); * Worked around Intel compiler bug. (#2625); * Fixed memory estimation bug in DFTensor that affects fno-df-cc. (#2673); * Fixed `c1_deep_copy` which sent nsopi_ to `Wavefunction::epsilon_subset_helper` in place of the number of occupied orbitals. When nsopi_[h] > nmopi_[h] for some h, this led to accessing out-of-bounds memory. (#2692); * Fixed Mulliken charges used qualitatively in DLPNO-MP2. (#2707); * Fixed SCF gradient segfault from serialized Wavefunction. (#2712, #2714); * Fixed insidious bug in Lebedev initialization that fails approximately once-in-a-thousand in parallel DFT runs. (#2743); * Fixed segfaults in `Matrix::transpose` and `Matrix::transpose_this` for matrices that are not totally symmetric. Now performs the transpose or raises an error messages, respectively. (#2740); * Fixed arbitrary order methods and MRCC methods to work with distributed driver. (#2731); * Fixed CBS extrapolated finite-difference Hessians crashing on molecules with zero dipole moment. (#2759); * Fixed so `basis_relativistic <name> {...}` now works. (#2764); * Fixed using multithreading with PK algorithm and small basis sets. (#2760, #2763); * Fixed a segfault caused by Libint2's engine.h being indirectly imported into mintshelper.cc. (#2770); * Raise an error when a user request",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
Testability,log,log,"brid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). REMP2 energies and OREMP2 energies and non-CD gradients are available. (#2354, #2653, #2670); * UHF non-orbital-optimized, non-FNO coupled cluster methods: DF/CD energies and DF gradients for UHF CCD/CCSD are available. (#2739); * Implementation of PCM and COSMO solvation models based on the ddx library. (#2767). ## External Libraries. * Works with geomeTRIC v1.0 rather than longstanding v0.9.7. (#2750); * Internal ADC module removed. External ADCC v0.15.13 module covers its capabilities and more. (#2737, #2785); * Works with Libxc v5 or v6. (#2815, #2817); * Replace internal C++ geometry optimizer, optking, with an external Python module. (#2727); * Most inputs should continue to work as before.; * The fixed_* optimization keywords have been changed to ranged_* options.; * Optimizer output will be changed. Check output.dat for simple convergence/step info and output.log for detailed info.; * IRC convergence behavior different for minima and substep.; * Note that this is a new *required* dependency.; * Interface to the ddx library for solvation. (#2767); * Additionally support the next branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8 (#2821); * Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks maintained by Psi4 folks still work and will be maintained until there's a reason not to. All are still run through QCEngine. Psi4 chooses automatically based on what's detected, so no change to input files needed. Package names and locations are a little different -- see table at PR or in docs. (#2791, #2360). ## Contributors to v1.7. @AlexHeide, @andyj10224, @aquaticseatard, @behnle, @bozkaya, @davpoolechem, @JonathonMisiewicz, @JoshRackers, @lazaroid, @loriab, @psi-rking, @maxscheurer, @mfherbst, @philipmnel, @sashashura, @susilehtola, @tallakahat",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
Usability,simpl,simple,"NV/DF/CD`. REMP is essentially a hybrid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). REMP2 energies and OREMP2 energies and non-CD gradients are available. (#2354, #2653, #2670); * UHF non-orbital-optimized, non-FNO coupled cluster methods: DF/CD energies and DF gradients for UHF CCD/CCSD are available. (#2739); * Implementation of PCM and COSMO solvation models based on the ddx library. (#2767). ## External Libraries. * Works with geomeTRIC v1.0 rather than longstanding v0.9.7. (#2750); * Internal ADC module removed. External ADCC v0.15.13 module covers its capabilities and more. (#2737, #2785); * Works with Libxc v5 or v6. (#2815, #2817); * Replace internal C++ geometry optimizer, optking, with an external Python module. (#2727); * Most inputs should continue to work as before.; * The fixed_* optimization keywords have been changed to ranged_* options.; * Optimizer output will be changed. Check output.dat for simple convergence/step info and output.log for detailed info.; * IRC convergence behavior different for minima and substep.; * Note that this is a new *required* dependency.; * Interface to the ddx library for solvation. (#2767); * Additionally support the next branch of QCArchive with the distributed driver, as well as the longstanding v0.15.8 (#2821); * Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks maintained by Psi4 folks still work and will be maintained until there's a reason not to. All are still run through QCEngine. Psi4 chooses automatically based on what's detected, so no change to input files needed. Package names and locations are a little different -- see table at PR or in docs. (#2791, #2360). ## Contributors to v1.7. @AlexHeide, @andyj10224, @aquaticseatard, @behnle, @bozkaya, @davpoolechem, @JonathonMisiewicz, @JoshRackers, @lazaroid, @loriab, @psi-rking, @maxscheurer, @mfherbst, @philipmnel, @sa",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.7
Availability,avail,available," to build against Libint2. Better Eigen3, Boost transitive dependency handling. (#2413, #2046); * Newer Libint2 required (interface change) and need new integrals classes. When in doubt, make a new conda environment to get a suitable Libint2.; * Pytest >=7 is required.; * Perl no longer required for testing. (#2551); * msgpack-python required to keep numpy arrays serialized when communicating in schema. (#2575). ## New Methods. * ADIIS/EDIIS for RHF/UHF. Now the default. (#2320, #2235); * E(30)exch-ind term in SAPT2+3 without the S^2 approximation. (#2314); * Linear exchange matrix build (LinK) in Direct SCF algorithm. (#2359); * ""Chain of Spheres"" exchange. Used with density-fitted J, this is completely in-core and faster than DF for large system. Access through `SCF_TYPE=COSX`. (#2567). ## External Libraries. * [libecpint](https://github.com/robashaw/libecpint) -- switched from internal code to R. Shaw's library. Enable with `-D ENABLE_ecpint=ON`. Analytic gradients and Hessians available (use with caution for post-SCF). Conda packages available for Linux and Mac. (#2368, #2135) ; * For ADC, the built-in code is deprecated and will only be used if external adcc library is not present. Built-in adc module will be fully removed in v1.7. (#2419); * adcc, cppe, openfermion, dftd4: some external libraries previously packaged on psi4 conda channel, it is now advisable to obtain from conda-forge. See GitHub Action for details on running with Psi4. (#2454); * Use of Libint2 is much expanded, including one-electron integrals and F12 integrals. See details below and summary at https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/prog_integrals.rst#one-electron-integral-algorithm-overview. (#2527); * Ambit >=v0.6 required if ambit enabled. (#2546); * For CheMPS2, DMRG densities saved to wavefunction to allow natural orbitals. (#2570, #2558). ## Contributors to v1.6. @alenaizan, @andyj10224, @brianz98, @carolinesargent, @cgbriggs99, @e-kwsm, @konpat, @lazaroid, @phili",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
Deployability,install,installers,"Advertised Version: 1.6; Continuous Version: 1.6; Release Date: 19 May 2022; NYI Documentation: https://psicode.org/psi4manual/1.6.0/; Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v16/); Span: [138 PRs](https://github.com/psi4/psi4/milestone/7?closed=1). ## Required Dependency Changes. * SciPy for ADIIS/EDIIS. Can be avoided.; * Python minimum bumped to v3.8.; * No longer need GMP/MPFR to build against Libint2. Better Eigen3, Boost transitive dependency handling. (#2413, #2046); * Newer Libint2 required (interface change) and need new integrals classes. When in doubt, make a new conda environment to get a suitable Libint2.; * Pytest >=7 is required.; * Perl no longer required for testing. (#2551); * msgpack-python required to keep numpy arrays serialized when communicating in schema. (#2575). ## New Methods. * ADIIS/EDIIS for RHF/UHF. Now the default. (#2320, #2235); * E(30)exch-ind term in SAPT2+3 without the S^2 approximation. (#2314); * Linear exchange matrix build (LinK) in Direct SCF algorithm. (#2359); * ""Chain of Spheres"" exchange. Used with density-fitted J, this is completely in-core and faster than DF for large system. Access through `SCF_TYPE=COSX`. (#2567). ## External Libraries. * [libecpint](https://github.com/robashaw/libecpint) -- switched from internal code to R. Shaw's library. Enable with `-D ENABLE_ecpint=ON`. Analytic gradients and Hessians available (use with caution for post-SCF). Conda packages available for Linux and Mac. (#2368, #2135) ; * For ADC, the built-in code is deprecated and will only be used if external adcc library is not present. Built-in adc module will be fully removed in v1.7. (#2419); * adcc, cppe, openfermion, dftd4: some external libraries previously packaged on psi4 conda channel, it is now advisable to obtain from conda-forge. See GitHub Action for details on running with Psi4. (#2454); * Use of Libint2 is much expanded, including one-electron integrals a",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
Energy Efficiency,charge,charges," Action for details on running with Psi4. (#2454); * Use of Libint2 is much expanded, including one-electron integrals and F12 integrals. See details below and summary at https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/prog_integrals.rst#one-electron-integral-algorithm-overview. (#2527); * Ambit >=v0.6 required if ambit enabled. (#2546); * For CheMPS2, DMRG densities saved to wavefunction to allow natural orbitals. (#2570, #2558). ## Contributors to v1.6. @alenaizan, @andyj10224, @brianz98, @carolinesargent, @cgbriggs99, @e-kwsm, @konpat, @lazaroid, @philipmnel, @susilehtola, @TiborGY, @timostrunk, @andysim, @hokru, @jeffschriber, @JonathonMisiewicz, @jturney, @loriab, @maxscheurer, @zachglick. ## Breaking Changes. * Require adcc 0.15.9 and possible adjustment to environment keyword. (#2393); * Scalar Debye-based n-pole components QCVariables are retired, replaced by atomic-units arrays (e.g., `CC DIPOLE X` --> `CC DIPOLE`. (#2479); * External charges locations now always specified in Bohr, rather than units of molecule. Also, creation of QMMM object is discouraged. Instead, pass charges and locations through `external_potentials` keyword argument. (#2515); * In composite (CBS) methods, extrapolation functions like `corl_xtpl_helgaker_2` must be referred to as strings, not objects. User-supplied ones use NumPy arrays rather than psi4.core.Matrix objects and must be registered with a `register_xtpl_function` function call. In any inputs where the cbs() function was referred to as an object (e.g., `energy(cbs)`), it must now be referred to by string (e.g., `energy(""cbs"")`). Functions analogous to `sherrill_gold_standard` must be referred to as strings and registered with `register_composite_function`. Running old inputs will trigger update guidance. (#2526, #2532, #2575); * The default `energy(""sapt0"")` code changed its default density-fitting basis, so it's more physically correct and matches `energy(""fisapt0"")` values but no longer matches values report",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
Integrability,depend,dependency,"Advertised Version: 1.6; Continuous Version: 1.6; Release Date: 19 May 2022; NYI Documentation: https://psicode.org/psi4manual/1.6.0/; Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v16/); Span: [138 PRs](https://github.com/psi4/psi4/milestone/7?closed=1). ## Required Dependency Changes. * SciPy for ADIIS/EDIIS. Can be avoided.; * Python minimum bumped to v3.8.; * No longer need GMP/MPFR to build against Libint2. Better Eigen3, Boost transitive dependency handling. (#2413, #2046); * Newer Libint2 required (interface change) and need new integrals classes. When in doubt, make a new conda environment to get a suitable Libint2.; * Pytest >=7 is required.; * Perl no longer required for testing. (#2551); * msgpack-python required to keep numpy arrays serialized when communicating in schema. (#2575). ## New Methods. * ADIIS/EDIIS for RHF/UHF. Now the default. (#2320, #2235); * E(30)exch-ind term in SAPT2+3 without the S^2 approximation. (#2314); * Linear exchange matrix build (LinK) in Direct SCF algorithm. (#2359); * ""Chain of Spheres"" exchange. Used with density-fitted J, this is completely in-core and faster than DF for large system. Access through `SCF_TYPE=COSX`. (#2567). ## External Libraries. * [libecpint](https://github.com/robashaw/libecpint) -- switched from internal code to R. Shaw's library. Enable with `-D ENABLE_ecpint=ON`. Analytic gradients and Hessians available (use with caution for post-SCF). Conda packages available for Linux and Mac. (#2368, #2135) ; * For ADC, the built-in code is deprecated and will only be used if external adcc library is not present. Built-in adc module will be fully removed in v1.7. (#2419); * adcc, cppe, openfermion, dftd4: some external libraries previously packaged on psi4 conda channel, it is now advisable to obtain from conda-forge. See GitHub Action for details on running with Psi4. (#2454); * Use of Libint2 is much expanded, including one-electron integrals a",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
Modifiability,flexible,flexible,"o write to output in real-time. (#2575). ## Bug Fixes. * Allow MBIS volume ratios to be called from `set scf_properties ['MBIS_VOLUME_RATIOS']`. This is equivalent to the already-working `oeprop(...,'MBIS_VOLUME_RATIOS')` but now can be used with a QCSchema call. (#2299, #2370); * Fixes error in MBE VMFC Hessian. (#2389); * Fixes bug in `compare_recursive()` (#2397); * Fixes bug where `fchk()` couldn't be run on a Wavefunction deserialized from file (#2400, #2408); * Fixes bug in MemDFJK affecting TD-DFT excitation spectra with range-separated functionals in asymmetric case. (#2431, #2435); * Avert segfault for non-RHF CC response properties. (#2310, #2450); * Fixes export of left eigenvector beta in TDSCF scf_response.py. (#2452, #2453); * Fixes parallel scaling of Libint2 one-electron integrals by using new Libint2. (#2491, #2413); * Fixes finding ambit when specialty ambit path given. (#2500); * Fixes bug with Karton 2-point SCF extrapolation. (#2526); * Fixes bug where `allen_focal_point` wasn't working because higher deltas were getting lopped off. (#2532); * Fixes CC properties naming bug by making OEProp names flexible. (#2534); * Fixes fcidump.py handling of frozen orbitals. (#2545); * Fixes incremental Fock convergence bug. (#2550); * Fixes bug where non-physical masses couldn't run through QCSchema. (#2557); * Fixes testing bug where `pytest psi4/` would pick up unconfigured tests so one had to use `pytest psi4/tests/`. (#2549); * Fixes dftd3/gcp/mp2d on single cpu job. (#2548, #2549); * Fixes single-atom Hessian by finite difference. (#1683, #2552); * Fixes bad performance where SCF gradients took longer with more threads. (#2559, #2581). ## Known Bugs; Find them and tell us. <!-- ## Skipped; #2367, #2373, #2391, #2394, #2402/#2409, #2406, #2418, #2423, #2422, #2424, #2426, #2441, #2446, #2448, #2428, #2415, #2459, #2464, #2455, #2467, #2468, #2471, #2474, #2482, #2484, #2465, #2494, #2501, #2509, #2511, #2518, #2528, #2531, #2539, #2540, #2458, #2574 -->",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
Performance,perform,performance," example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test: (#2575). | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. * The n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg. (#2575); * The Libint2 conda packages for Linux are no longer extra-high angular momentum (AM) compared to Mac and Windows. There isn't a proven Libint2 tarball file for higher AM if requested through `MAX_AM_ERI`. ## Performance Optimizations. * Improve performance for the DLPNO-MP2 algorithm on many-core machines by around 20%. (#2378). ## Details of Interest. * Modernize `-D ENABLE_XHOST` CMake option for processor tuning to more architectures. (#2377, #2384); * Remove potentially buggy convergence metric in DCT. (#2381); * Plan memory feasibility correctly for large (~1k nbf) (FNO)-DF-CC computations. (#1372, #2382); * Memory/const cleanup (DMRG #2383; FittingMetric #2417; SCF #2425; FNOCC #2421, #2444, #2561; CCDENSITY #2438; CCEOM #2466); MERGE* Move DIIS to Python, and implement ADIIS/EDIIS (#2369, #2387, #2436, #2445, #2449); * Allow C++17 syntax in code (#2392); * Fix guess mix with SAD and other guesses. (#2411); * Expose to Python (`Vector.clone()` #2375; `FittingMetric` #2420; `DIISManager::reset_subspace()` #2437; OEProp #2507); * Add an atomic blocking scheme for quadrature grid points (needed for COSX and ddCOSMO). (#2336); * Reform `ccdensity` keywords around OPDM relaxation. Keywords `ONEPDM`, `OPDM_ONLY`, `ONEPDM_GRID_DUMP`, and `OPDM_GRID_DUMP` affe",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
Safety,avoid,avoided,"Advertised Version: 1.6; Continuous Version: 1.6; Release Date: 19 May 2022; NYI Documentation: https://psicode.org/psi4manual/1.6.0/; Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v16/); Span: [138 PRs](https://github.com/psi4/psi4/milestone/7?closed=1). ## Required Dependency Changes. * SciPy for ADIIS/EDIIS. Can be avoided.; * Python minimum bumped to v3.8.; * No longer need GMP/MPFR to build against Libint2. Better Eigen3, Boost transitive dependency handling. (#2413, #2046); * Newer Libint2 required (interface change) and need new integrals classes. When in doubt, make a new conda environment to get a suitable Libint2.; * Pytest >=7 is required.; * Perl no longer required for testing. (#2551); * msgpack-python required to keep numpy arrays serialized when communicating in schema. (#2575). ## New Methods. * ADIIS/EDIIS for RHF/UHF. Now the default. (#2320, #2235); * E(30)exch-ind term in SAPT2+3 without the S^2 approximation. (#2314); * Linear exchange matrix build (LinK) in Direct SCF algorithm. (#2359); * ""Chain of Spheres"" exchange. Used with density-fitted J, this is completely in-core and faster than DF for large system. Access through `SCF_TYPE=COSX`. (#2567). ## External Libraries. * [libecpint](https://github.com/robashaw/libecpint) -- switched from internal code to R. Shaw's library. Enable with `-D ENABLE_ecpint=ON`. Analytic gradients and Hessians available (use with caution for post-SCF). Conda packages available for Linux and Mac. (#2368, #2135) ; * For ADC, the built-in code is deprecated and will only be used if external adcc library is not present. Built-in adc module will be fully removed in v1.7. (#2419); * adcc, cppe, openfermion, dftd4: some external libraries previously packaged on psi4 conda channel, it is now advisable to obtain from conda-forge. See GitHub Action for details on running with Psi4. (#2454); * Use of Libint2 is much expanded, including one-electron integrals a",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
Testability,test,testing,"Advertised Version: 1.6; Continuous Version: 1.6; Release Date: 19 May 2022; NYI Documentation: https://psicode.org/psi4manual/1.6.0/; Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v16/); Span: [138 PRs](https://github.com/psi4/psi4/milestone/7?closed=1). ## Required Dependency Changes. * SciPy for ADIIS/EDIIS. Can be avoided.; * Python minimum bumped to v3.8.; * No longer need GMP/MPFR to build against Libint2. Better Eigen3, Boost transitive dependency handling. (#2413, #2046); * Newer Libint2 required (interface change) and need new integrals classes. When in doubt, make a new conda environment to get a suitable Libint2.; * Pytest >=7 is required.; * Perl no longer required for testing. (#2551); * msgpack-python required to keep numpy arrays serialized when communicating in schema. (#2575). ## New Methods. * ADIIS/EDIIS for RHF/UHF. Now the default. (#2320, #2235); * E(30)exch-ind term in SAPT2+3 without the S^2 approximation. (#2314); * Linear exchange matrix build (LinK) in Direct SCF algorithm. (#2359); * ""Chain of Spheres"" exchange. Used with density-fitted J, this is completely in-core and faster than DF for large system. Access through `SCF_TYPE=COSX`. (#2567). ## External Libraries. * [libecpint](https://github.com/robashaw/libecpint) -- switched from internal code to R. Shaw's library. Enable with `-D ENABLE_ecpint=ON`. Analytic gradients and Hessians available (use with caution for post-SCF). Conda packages available for Linux and Mac. (#2368, #2135) ; * For ADC, the built-in code is deprecated and will only be used if external adcc library is not present. Built-in adc module will be fully removed in v1.7. (#2419); * adcc, cppe, openfermion, dftd4: some external libraries previously packaged on psi4 conda channel, it is now advisable to obtain from conda-forge. See GitHub Action for details on running with Psi4. (#2454); * Use of Libint2 is much expanded, including one-electron integrals a",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
Usability,guid,guidance,"ossible adjustment to environment keyword. (#2393); * Scalar Debye-based n-pole components QCVariables are retired, replaced by atomic-units arrays (e.g., `CC DIPOLE X` --> `CC DIPOLE`. (#2479); * External charges locations now always specified in Bohr, rather than units of molecule. Also, creation of QMMM object is discouraged. Instead, pass charges and locations through `external_potentials` keyword argument. (#2515); * In composite (CBS) methods, extrapolation functions like `corl_xtpl_helgaker_2` must be referred to as strings, not objects. User-supplied ones use NumPy arrays rather than psi4.core.Matrix objects and must be registered with a `register_xtpl_function` function call. In any inputs where the cbs() function was referred to as an object (e.g., `energy(cbs)`), it must now be referred to by string (e.g., `energy(""cbs"")`). Functions analogous to `sherrill_gold_standard` must be referred to as strings and registered with `register_composite_function`. Running old inputs will trigger update guidance. (#2526, #2532, #2575); * The default `energy(""sapt0"")` code changed its default density-fitting basis, so it's more physically correct and matches `energy(""fisapt0"")` values but no longer matches values reported from high-level SAPT methods. (#2582); * Hessian calculations no longer always evaluate gradient beforehand to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explicitly to control. (#2575); * Previously, the CBS wrapper issued a `clean()` btwn calcs. Plain ""string modelchem"" calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. Now, string modelchem calcs behave like ""set"" calcs, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. Signatures of this problem are PSIO errors a",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.6
Availability,avail,available,"* Advertised Version: 1.5; * Continuous Version: 1.5; * Release Date: 27 November 2021; * Documentation: https://psicode.org/psi4manual/1.5.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v15/); * Span: [60 PRs](https://github.com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
Deployability,install,installers,"* Advertised Version: 1.5; * Continuous Version: 1.5; * Release Date: 27 November 2021; * Documentation: https://psicode.org/psi4manual/1.5.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v15/); * Span: [60 PRs](https://github.com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
Energy Efficiency,energy,energy,"* Advertised Version: 1.5; * Continuous Version: 1.5; * Release Date: 27 November 2021; * Documentation: https://psicode.org/psi4manual/1.5.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v15/); * Span: [60 PRs](https://github.com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
Integrability,depend,dependencies,"* Advertised Version: 1.5; * Continuous Version: 1.5; * Release Date: 27 November 2021; * Documentation: https://psicode.org/psi4manual/1.5.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v15/); * Span: [60 PRs](https://github.com/psi4/psi4/milestone/6?closed=1), roughly 2247-2366. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
Modifiability,refactor,refactoring,"560); - Dropped dependencies: none; - Added dependencies: none. ## New Methods. - Domain-based local pair natural orbital MP2 implemented! Accessible through `energy(""dlpno-mp2"")` (#2093, #2313). ## External Libraries. - DFTD4 has been interfaced, so functional calls like `energy(""b3lyp-d4"")` run through QCEngine if the upstream software is available (#2142). Note that it's not the dftd4 executable that's needed but the dftd4 Python module. For linux, this is distributed via `conda install dftd4 -c psi4`. It is also available as `conda install dftd4-python -c conda-forge`, but that's trickier to get it and Psi4 dependencies installed together happily.; - QCSchema runs now return the input and other selected text files in the `AtomicResult.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory mangement: DFT integration coordinates (#2352), `qcdb.BasisSet` (#2349), libmints (#2346), cubeprop (#2345).; - Prepare DIIS for moving to Python (#2298, #2327, #2350, #2325). ## Bug Fixes. - The performance improvement for exchange in range-separated functionals added in #1911 in v1.4 has been found to have correctness issues discussed in #2279. An internal library call was fixed in v1.4.1 with #2283, but some runtime conditions and BLAS calls still lead to errors, so the controlling w",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
Performance,perform,performance,"lt.native_files` field, controllable by `AtomicInput.protocols.native_files` setting (#2361). ## Performance Optimizations. - Direct SCF jobs can now use density screening and incremental Fock build (#2155).; - DIIS routines have been vectorized in preparation for their refactoring to Python (#2355). ## Details of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory mangement: DFT integration coordinates (#2352), `qcdb.BasisSet` (#2349), libmints (#2346), cubeprop (#2345).; - Prepare DIIS for moving to Python (#2298, #2327, #2350, #2325). ## Bug Fixes. - The performance improvement for exchange in range-separated functionals added in #1911 in v1.4 has been found to have correctness issues discussed in #2279. An internal library call was fixed in v1.4.1 with #2283, but some runtime conditions and BLAS calls still lead to errors, so the controlling wcombine option is disabled while under investigation in #2362.; - Fix mapping for DFT functional names for BrianQC jobs (#2357).; - Allow UHF gradients to be run on systems without beta electrons (#2344).; - Fix external potential + FISAPT results when moledule specified with units Bohr (#2331).; - Fix MCSCF final energy mismatch (#2259); - Fix SCF initialization so that linear dependencies get fed properly to FNOCC (#2302).; - Make Windows conda build more broadly runnable by altering ENABLE_XHOST option (#2292).; - Fix fractional occupation with symmetry (#2280, #2290).; - Fix print spacing in FCIDUMP files for 1e and 0e (#2277).; - Fix a bug where MOM could clear all electrons (#2270).; - Fix handling of frozen core orbitals in SAPT ",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
Usability,clear,clear,"ails of Interest. - Linear response enabled for UHF references (#2266).; - Fix SCF memory leak and `Vector::dgemv` error. Not an correctness issue (#2347).; - MBIS charges and volume ratios separated as OEProp tasks (#2273).; - Save gradient and Hessian results from finite difference more thoroughly in QCVars (#2293).; - Add DFTensor class for better recording and manipulating density cummulant theory (DCT) (#2250).; - Fix some memory leaks or memory mangement: DFT integration coordinates (#2352), `qcdb.BasisSet` (#2349), libmints (#2346), cubeprop (#2345).; - Prepare DIIS for moving to Python (#2298, #2327, #2350, #2325). ## Bug Fixes. - The performance improvement for exchange in range-separated functionals added in #1911 in v1.4 has been found to have correctness issues discussed in #2279. An internal library call was fixed in v1.4.1 with #2283, but some runtime conditions and BLAS calls still lead to errors, so the controlling wcombine option is disabled while under investigation in #2362.; - Fix mapping for DFT functional names for BrianQC jobs (#2357).; - Allow UHF gradients to be run on systems without beta electrons (#2344).; - Fix external potential + FISAPT results when moledule specified with units Bohr (#2331).; - Fix MCSCF final energy mismatch (#2259); - Fix SCF initialization so that linear dependencies get fed properly to FNOCC (#2302).; - Make Windows conda build more broadly runnable by altering ENABLE_XHOST option (#2292).; - Fix fractional occupation with symmetry (#2280, #2290).; - Fix print spacing in FCIDUMP files for 1e and 0e (#2277).; - Fix a bug where MOM could clear all electrons (#2270).; - Fix handling of frozen core orbitals in SAPT between monomer and dimer parts. Common case is when one monomer is an alkali cation (#2271). ## Contributors to v1.5. @andyj10224, @maxscheurer, @kis-gergely-dzsi, @alenaizan, @Icyyork, @konpat, @zachglick, @susilehtola, @brianz98, @jeffschriber, @hokru, @loriab, @JonathonMisiewicz, @fevangelista, @andysim",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.5
Availability,error,errors,", #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . ### Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. ### Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). ### Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922); - SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. (#760); - The DFT V Potential object now has Hessian-Vector functionality. (#698",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
Deployability,install,installers,"Advertised Version: 1.2; Continuous Version: 1.2; Release Date: 4 July 2018; Documentation: http://psicode.org/psi4manual/1.2/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2.html). ### Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. ### Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ### New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. ### New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). ### New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate s",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
Energy Efficiency,efficient,efficient,"s://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. ### First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . ### Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. ### Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectabi",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
Integrability,interface,interface,"s optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. ### Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ### New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. ### New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). ### New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. ### First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - ",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
Modifiability,enhance,enhancement,"Advertised Version: 1.2; Continuous Version: 1.2; Release Date: 4 July 2018; Documentation: http://psicode.org/psi4manual/1.2/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2.html). ### Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. ### Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ### New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. ### New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). ### New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate s",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
Performance,optimiz,optimized,"Advertised Version: 1.2; Continuous Version: 1.2; Release Date: 4 July 2018; Documentation: http://psicode.org/psi4manual/1.2/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/nu-psicode/install-v1.2.html). ### Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. ### Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ### New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. ### New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). ### New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate s",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
Safety,avoid,avoid,"meTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. ### First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . ### Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. ### Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf ex",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
Security,expose,exposed,"(#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. ### Documentation; - Additional Documentation Information (#787). ### Miscellaneous; - Added N to ANO0 basis set (#825). ### Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). ### Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than s",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
Testability,test,tests,"bind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). ### Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922); - SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. (#760); - The DFT V Potential object now has Hessian-Vector functionality. (#698); - DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
Usability,simpl,simpler,"(#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. ### Documentation; - Additional Documentation Information (#787). ### Miscellaneous; - Added N to ANO0 basis set (#825). ### Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). ### Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than s",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.2
Availability,down,download,"Advertised Version: 1.1; Continuous Version: 1.1; Release Date: 19 May 2017; Documentation: http://psicode.org/psi4manual/1.1/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/psicode-download/1.1.html). ### New Methods. * <b>Added analytic RHF Hessians, conventional and density fitted.</b>; * Added analytic RHF CCSD(T) gradients (no frozen core).; * Added functional-group and intramolecular symmetry-adapted perturbation theory (F/I-SAPT) capabilities, scripts, and tests. (DOIs: [10.1021/ct500724p](http://pubs.acs.org/doi/abs/10.1021/ct500724p), [10.1063/1.4927575](http://aip.scitation.org/doi/10.1063/1.4927575)); * Added high-spin open-shell SAPT0. Note that Ind20,r (and exch counterpart) contains _unrelaxed_ induction. (DOI: [10.1063/1.4963385](http://aip.scitation.org/doi/10.1063/1.4963385)); * Added analytic RHF-CC2 gradients and building of CC2 UHF and ROHF densities.; * Reworked MCSCF with density-fitting, py driver, augmented Hessian iterations, better printing, and the ability to rotate guess orbitals in MCSCF procedure with `MCSCF_ROTATE` keyword.; * Added B86B & PW86 exchange and B86BPBE & PW86PBE exchange-correlation functionals; * Added X2C and (external) DKH relativistic corrections for post-SCF methods.; * <b>(external) Added Grimme's semi-semiempirical HF-3c and PBEh-3c semi-semiempirical energy methods through gCP interface.</b>; * (external) Added ROHF reference for perturbative methods (e.g., ROHF-CCSDT(Q)) in MRCC interface.; * (external) Added PCM in the PTE (perturbation to energy) approximation for implicit solvation to CCSD via PCMSolver.; * (external) Added SIMINT integral interface. ### User Improvements. * Fixed interfragment coordinates in geometry optimizer; * Added option to only write occupied orbitals to Molden files.; * Added saving of geometry and normal modes to Molden file after vibrational analysis.; * Added Jensen [aug-]pc[s][seg]-N, N=0–4 basis sets.; * Renamed `rel_b",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
Deployability,install,installers,"Advertised Version: 1.1; Continuous Version: 1.1; Release Date: 19 May 2017; Documentation: http://psicode.org/psi4manual/1.1/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/psicode-download/1.1.html). ### New Methods. * <b>Added analytic RHF Hessians, conventional and density fitted.</b>; * Added analytic RHF CCSD(T) gradients (no frozen core).; * Added functional-group and intramolecular symmetry-adapted perturbation theory (F/I-SAPT) capabilities, scripts, and tests. (DOIs: [10.1021/ct500724p](http://pubs.acs.org/doi/abs/10.1021/ct500724p), [10.1063/1.4927575](http://aip.scitation.org/doi/10.1063/1.4927575)); * Added high-spin open-shell SAPT0. Note that Ind20,r (and exch counterpart) contains _unrelaxed_ induction. (DOI: [10.1063/1.4963385](http://aip.scitation.org/doi/10.1063/1.4963385)); * Added analytic RHF-CC2 gradients and building of CC2 UHF and ROHF densities.; * Reworked MCSCF with density-fitting, py driver, augmented Hessian iterations, better printing, and the ability to rotate guess orbitals in MCSCF procedure with `MCSCF_ROTATE` keyword.; * Added B86B & PW86 exchange and B86BPBE & PW86PBE exchange-correlation functionals; * Added X2C and (external) DKH relativistic corrections for post-SCF methods.; * <b>(external) Added Grimme's semi-semiempirical HF-3c and PBEh-3c semi-semiempirical energy methods through gCP interface.</b>; * (external) Added ROHF reference for perturbative methods (e.g., ROHF-CCSDT(Q)) in MRCC interface.; * (external) Added PCM in the PTE (perturbation to energy) approximation for implicit solvation to CCSD via PCMSolver.; * (external) Added SIMINT integral interface. ### User Improvements. * Fixed interfragment coordinates in geometry optimizer; * Added option to only write occupied orbitals to Molden files.; * Added saving of geometry and normal modes to Molden file after vibrational analysis.; * Added Jensen [aug-]pc[s][seg]-N, N=0–4 basis sets.; * Renamed `rel_b",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
Energy Efficiency,adapt,adapted,"Advertised Version: 1.1; Continuous Version: 1.1; Release Date: 19 May 2017; Documentation: http://psicode.org/psi4manual/1.1/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/psicode-download/1.1.html). ### New Methods. * <b>Added analytic RHF Hessians, conventional and density fitted.</b>; * Added analytic RHF CCSD(T) gradients (no frozen core).; * Added functional-group and intramolecular symmetry-adapted perturbation theory (F/I-SAPT) capabilities, scripts, and tests. (DOIs: [10.1021/ct500724p](http://pubs.acs.org/doi/abs/10.1021/ct500724p), [10.1063/1.4927575](http://aip.scitation.org/doi/10.1063/1.4927575)); * Added high-spin open-shell SAPT0. Note that Ind20,r (and exch counterpart) contains _unrelaxed_ induction. (DOI: [10.1063/1.4963385](http://aip.scitation.org/doi/10.1063/1.4963385)); * Added analytic RHF-CC2 gradients and building of CC2 UHF and ROHF densities.; * Reworked MCSCF with density-fitting, py driver, augmented Hessian iterations, better printing, and the ability to rotate guess orbitals in MCSCF procedure with `MCSCF_ROTATE` keyword.; * Added B86B & PW86 exchange and B86BPBE & PW86PBE exchange-correlation functionals; * Added X2C and (external) DKH relativistic corrections for post-SCF methods.; * <b>(external) Added Grimme's semi-semiempirical HF-3c and PBEh-3c semi-semiempirical energy methods through gCP interface.</b>; * (external) Added ROHF reference for perturbative methods (e.g., ROHF-CCSDT(Q)) in MRCC interface.; * (external) Added PCM in the PTE (perturbation to energy) approximation for implicit solvation to CCSD via PCMSolver.; * (external) Added SIMINT integral interface. ### User Improvements. * Fixed interfragment coordinates in geometry optimizer; * Added option to only write occupied orbitals to Molden files.; * Added saving of geometry and normal modes to Molden file after vibrational analysis.; * Added Jensen [aug-]pc[s][seg]-N, N=0–4 basis sets.; * Renamed `rel_b",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
Integrability,interface,interface,"d analytic RHF CCSD(T) gradients (no frozen core).; * Added functional-group and intramolecular symmetry-adapted perturbation theory (F/I-SAPT) capabilities, scripts, and tests. (DOIs: [10.1021/ct500724p](http://pubs.acs.org/doi/abs/10.1021/ct500724p), [10.1063/1.4927575](http://aip.scitation.org/doi/10.1063/1.4927575)); * Added high-spin open-shell SAPT0. Note that Ind20,r (and exch counterpart) contains _unrelaxed_ induction. (DOI: [10.1063/1.4963385](http://aip.scitation.org/doi/10.1063/1.4963385)); * Added analytic RHF-CC2 gradients and building of CC2 UHF and ROHF densities.; * Reworked MCSCF with density-fitting, py driver, augmented Hessian iterations, better printing, and the ability to rotate guess orbitals in MCSCF procedure with `MCSCF_ROTATE` keyword.; * Added B86B & PW86 exchange and B86BPBE & PW86PBE exchange-correlation functionals; * Added X2C and (external) DKH relativistic corrections for post-SCF methods.; * <b>(external) Added Grimme's semi-semiempirical HF-3c and PBEh-3c semi-semiempirical energy methods through gCP interface.</b>; * (external) Added ROHF reference for perturbative methods (e.g., ROHF-CCSDT(Q)) in MRCC interface.; * (external) Added PCM in the PTE (perturbation to energy) approximation for implicit solvation to CCSD via PCMSolver.; * (external) Added SIMINT integral interface. ### User Improvements. * Fixed interfragment coordinates in geometry optimizer; * Added option to only write occupied orbitals to Molden files.; * Added saving of geometry and normal modes to Molden file after vibrational analysis.; * Added Jensen [aug-]pc[s][seg]-N, N=0–4 basis sets.; * Renamed `rel_basis` keyword to `basis_relativistic`.; * Added 3c overlap integrals to libmints.; * Switched default auxiliary basis sets for sto-3g and 3-21g to def2-SVP series.; * Enhanced cc* modules to write OPDM back to Wavefunction object if computed and to construct psivars for eom-cc, 0-indexed (ground state = 0).; * Added `psi4.set_options(dict)` function, making `",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
Modifiability,adapt,adapted,"Advertised Version: 1.1; Continuous Version: 1.1; Release Date: 19 May 2017; Documentation: http://psicode.org/psi4manual/1.1/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/psicode-download/1.1.html). ### New Methods. * <b>Added analytic RHF Hessians, conventional and density fitted.</b>; * Added analytic RHF CCSD(T) gradients (no frozen core).; * Added functional-group and intramolecular symmetry-adapted perturbation theory (F/I-SAPT) capabilities, scripts, and tests. (DOIs: [10.1021/ct500724p](http://pubs.acs.org/doi/abs/10.1021/ct500724p), [10.1063/1.4927575](http://aip.scitation.org/doi/10.1063/1.4927575)); * Added high-spin open-shell SAPT0. Note that Ind20,r (and exch counterpart) contains _unrelaxed_ induction. (DOI: [10.1063/1.4963385](http://aip.scitation.org/doi/10.1063/1.4963385)); * Added analytic RHF-CC2 gradients and building of CC2 UHF and ROHF densities.; * Reworked MCSCF with density-fitting, py driver, augmented Hessian iterations, better printing, and the ability to rotate guess orbitals in MCSCF procedure with `MCSCF_ROTATE` keyword.; * Added B86B & PW86 exchange and B86BPBE & PW86PBE exchange-correlation functionals; * Added X2C and (external) DKH relativistic corrections for post-SCF methods.; * <b>(external) Added Grimme's semi-semiempirical HF-3c and PBEh-3c semi-semiempirical energy methods through gCP interface.</b>; * (external) Added ROHF reference for perturbative methods (e.g., ROHF-CCSDT(Q)) in MRCC interface.; * (external) Added PCM in the PTE (perturbation to energy) approximation for implicit solvation to CCSD via PCMSolver.; * (external) Added SIMINT integral interface. ### User Improvements. * Fixed interfragment coordinates in geometry optimizer; * Added option to only write occupied orbitals to Molden files.; * Added saving of geometry and normal modes to Molden file after vibrational analysis.; * Added Jensen [aug-]pc[s][seg]-N, N=0–4 basis sets.; * Renamed `rel_b",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
Performance,optimiz,optimizer,"d_ induction. (DOI: [10.1063/1.4963385](http://aip.scitation.org/doi/10.1063/1.4963385)); * Added analytic RHF-CC2 gradients and building of CC2 UHF and ROHF densities.; * Reworked MCSCF with density-fitting, py driver, augmented Hessian iterations, better printing, and the ability to rotate guess orbitals in MCSCF procedure with `MCSCF_ROTATE` keyword.; * Added B86B & PW86 exchange and B86BPBE & PW86PBE exchange-correlation functionals; * Added X2C and (external) DKH relativistic corrections for post-SCF methods.; * <b>(external) Added Grimme's semi-semiempirical HF-3c and PBEh-3c semi-semiempirical energy methods through gCP interface.</b>; * (external) Added ROHF reference for perturbative methods (e.g., ROHF-CCSDT(Q)) in MRCC interface.; * (external) Added PCM in the PTE (perturbation to energy) approximation for implicit solvation to CCSD via PCMSolver.; * (external) Added SIMINT integral interface. ### User Improvements. * Fixed interfragment coordinates in geometry optimizer; * Added option to only write occupied orbitals to Molden files.; * Added saving of geometry and normal modes to Molden file after vibrational analysis.; * Added Jensen [aug-]pc[s][seg]-N, N=0–4 basis sets.; * Renamed `rel_basis` keyword to `basis_relativistic`.; * Added 3c overlap integrals to libmints.; * Switched default auxiliary basis sets for sto-3g and 3-21g to def2-SVP series.; * Enhanced cc* modules to write OPDM back to Wavefunction object if computed and to construct psivars for eom-cc, 0-indexed (ground state = 0).; * Added `psi4.set_options(dict)` function, making `psi4.geometry()`, `psi4.set_options()`, and `psi4.energy()`, etc. the mainstays of driving calculations in PsiAPI.; * Added AO-based CASSCF.; * Reworked CI root indexing to use 0 as ground-state index, so now CI and CC use so the same indexing for PSI variables.; * Added atom- and AM-labels to printing of molecular orbitals.; * Reworked exiting so that if a geometry optimization exceeds maxiter, it no longer just pr",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
Safety,detect,detection," when you turn it on. From a build directory, using CTest, `ctest -L smoke`. On any executable, using pytest, `psi4 --test`. On the python module, using pytest, `psi4.test()`.; * Reworked plugin system to CMake from GNUMake. Use `psi4 --plugin-compile` to generate Makefile rather than `psi4 --new-plugin-makefile` as formerly. Plugin interface has been substantially renovated.; * Renamed plugin generation from, for example, `psi4 --new-plugin +wavefunction myplugin` to `psi4 --plugin-name myplugin --plugin-template wavefunction`.; * Build performs pre-install to `BuildDir/stage/` so python driver _not_ being run from source. Use `psi4 --inplace` to run python driver from source.; * Switched versioning (e.g., 15 commits after tag v1.0 before tab v1.1rc1) from 1.0.15 to 1.1rc1.dev15.; * Reworked build documentation into documentation proper (http://psicode.org/psi4manual/master/build_faq.html), making GitHub wiki defunct.; * Switched Python build detection from find_package(PythonLibs) to find_package(PythonLibsNew) CMake module used by NumPy and pybind11.; * Reworked ASCII scratch/output file names to incorporate job PID, just as binary scratch files do.; * Adjusts BLAS/LAPACK detection to detect OpenBLAS and to favor unified runtime library mkl_rt.so for MKL.; * Added internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively, to the Wavefunction class. These should be used inside a computation to enable greater localization of variables.; * Switched Mac conda binary builds from gnu/libstdc++ to clang/libc++ with implications for mixing conda packages with locally compiled software (e.g., plugins from conda Psi4).; * Rewrote GitHub history of psi4/psi4. All forks prior to 2016-10-19 are no longer valid. Please refork before working on Psi4.; * Reworked `BasisSet`s to be exclusively built in Python and passed into C-side by the Wavefunction get_basisset and set_basisset calls. ### Performance Optimization. * Reworked I/O in UHF CC rou",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
Security,access,accessed,"ity improvements for calculations in the presence of a dipole field.; * Fixed silent fail for non-Lebedev numbers in dft_spherical_points.; * Fixed instability of matrix diagonalization that led to anomolous DFT grid generation on Haswell processors.; * Fixed specifying non-default basis-set-extrapolation schemes as a keyword argument to energy(), optimize(), etc.; * Fixed `properties_origin[""COM""]` that wasn't working.; * Fixed bug in ccresponse that led to different polariability values with symmetry on and off.; * Fixed `molden(..., dovirtual)` bug so that keyword is honored and unrestricted occupations are returned correctly.; * Fixed wB97X-based functionals that were using 0.3 instead of 0.4. This makes no appreciable difference at the cross-database hundredths of a kcal/mol level but in a little wrong. ### External Features and Infrastructure. * Reworked Libint integration to pull from upstream repository at 1.2.0 or 1.2.1; * Added new integral library SIMINT by Ben Pritchard for energy integrals, accessed through `cmake -DENABLE_simint`. Pinned at 0.7.; * Added using ERD for most all energy integrals (previously only direct conventional HF).; * Reworked LIBEFP integration so no longer required for Psi4 and so source built from upstream repository, not code internal to Psi4. Bumped LIBEFP to 1.4.2.; * Bumped CheMPS2 to 1.8.3-12; * Reworked ambit to reenable it and the ambit plugin template. Ambit not presently linked into Psi4 as not used internally.; * Reworked DKH integration so that project obtained from home repository, not from code stored in Psi4. Reworked DKH procedure so that orbital basis decontracted to form the DKH one-electron integrals, then recontracted for further calculation.; * Bumped PCMSolver to 1.1.9 (see also ""PTE"").; * Added basic gCP interface (see also ""3c"").; * Maintained GDMA, MRCC (see also ""ROHF-CC""), DFTD3 interfaces.; * Bumped v2rdm_casscf plugin to 0.3.; * Switches PubChem to use REST interface.; * Pinned pybind11 version at 2.0.0",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
Testability,test,tests,"Advertised Version: 1.1; Continuous Version: 1.1; Release Date: 19 May 2017; Documentation: http://psicode.org/psi4manual/1.1/; Availability: Public, GitHub source, CMake build, [Conda binary installers](http://vergil.chemistry.gatech.edu/psicode-download/1.1.html). ### New Methods. * <b>Added analytic RHF Hessians, conventional and density fitted.</b>; * Added analytic RHF CCSD(T) gradients (no frozen core).; * Added functional-group and intramolecular symmetry-adapted perturbation theory (F/I-SAPT) capabilities, scripts, and tests. (DOIs: [10.1021/ct500724p](http://pubs.acs.org/doi/abs/10.1021/ct500724p), [10.1063/1.4927575](http://aip.scitation.org/doi/10.1063/1.4927575)); * Added high-spin open-shell SAPT0. Note that Ind20,r (and exch counterpart) contains _unrelaxed_ induction. (DOI: [10.1063/1.4963385](http://aip.scitation.org/doi/10.1063/1.4963385)); * Added analytic RHF-CC2 gradients and building of CC2 UHF and ROHF densities.; * Reworked MCSCF with density-fitting, py driver, augmented Hessian iterations, better printing, and the ability to rotate guess orbitals in MCSCF procedure with `MCSCF_ROTATE` keyword.; * Added B86B & PW86 exchange and B86BPBE & PW86PBE exchange-correlation functionals; * Added X2C and (external) DKH relativistic corrections for post-SCF methods.; * <b>(external) Added Grimme's semi-semiempirical HF-3c and PBEh-3c semi-semiempirical energy methods through gCP interface.</b>; * (external) Added ROHF reference for perturbative methods (e.g., ROHF-CCSDT(Q)) in MRCC interface.; * (external) Added PCM in the PTE (perturbation to energy) approximation for implicit solvation to CCSD via PCMSolver.; * (external) Added SIMINT integral interface. ### User Improvements. * Fixed interfragment coordinates in geometry optimizer; * Added option to only write occupied orbitals to Molden files.; * Added saving of geometry and normal modes to Molden file after vibrational analysis.; * Added Jensen [aug-]pc[s][seg]-N, N=0–4 basis sets.; * Renamed `rel_b",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
Usability,guid,guidance,"vements. * <b>Relicensed Psi4 from GPL-2.0+ to LGPL-3.0.</b>; * <b>""Inverted"" Psi4 from C++ executable with embedded Python to ordinary Python module layout. Added PsiAPI mode for interacting with Psi4 as Python module (i.e., `python -c ""import psi4""`. Tutorial at http://psicode.org/psi4manual/master/psiapi.html .</b>; * Reworked `bin/psi4` so now a light script calling `import psi4` rather than a hefty C++ executable. No longer linking to libpython.so.; * Added Python 3 (3.5 & 3.6) support to existing Python 2.7; * Reorganized directory layout so that Psi4+Addons in `/`, Psi4 Python module in `/psi4/`, and Psi4 C++ library in `/psi4/src/`.; * Rewrote build system into a CMake (min version 3.3) superbuild, evicting all external code and leaving each add-on with only a single-file build footprint in the external/upstream/ folder specifying its build as a CMake External Project.; * Removed `setup.py` as user interface to CMake build. Now one should call CMake directly using options and guidance in the first ~115 lines of top-level CMakeLists.txt.; * Switched Python binding of C++ from Boost Python to pybind11. Renamed Py-bound C++ library from ""psi4"" to ""core"". A consequence is that Psi4 now requires full C++11 compliance (GCC 4.9+, Clang 3.3+, Apple Clang 6.1+, ICC 2016.0.2+). Note that ICC requires GCC and therefore GCC 4.9+. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; * Added testing mode to see if Psi4 basically works when you turn it on. From a build directory, using CTest, `ctest -L smoke`. On any executable, using pytest, `psi4 --test`. On the python module, using pytest, `psi4.test()`.; * Reworked plugin system to CMake from GNUMake. Use `psi4 --plugin-compile` to generate Makefile rather than `psi4 --new-plugin-makefile` as formerly. Plugin interface has been substantial",MatchSource.RELEASES,psi4,psi4,v1.9.1,http://psicode.org,https://github.com/psi4/psi4/releases/tag/v1.1
