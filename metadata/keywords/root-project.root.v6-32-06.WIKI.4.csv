quality_attribute,keyword,matched_word,sentence,source,filename,author,repo,version,wiki,url
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEveMCRecCrossRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveMCRecCrossRef.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEveMCRecCrossRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveMCRecCrossRef.html
Modifiability,inherit,inherited,". ROOT: TEveMCRecCrossRef Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveMCRecCrossRef Class Reference. . Definition at line 257 of file TEveVSDStructs.h. Public Member Functions;  TEveMCRecCrossRef ();  ;  ~TEveMCRecCrossRef () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass ",MatchSource.WIKI,doc/master/classTEveMCRecCrossRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveMCRecCrossRef.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTEveMCRecCrossRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveMCRecCrossRef.html
Availability,error,error,"lar Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTEveMCTrack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveMCTrack.html
Integrability,message,message,"lar Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTEveMCTrack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveMCTrack.html
Modifiability,inherit,inherited,". ROOT: TEveMCTrack Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveMCTrack Class Reference. . Definition at line 42 of file TEveVSDStructs.h. Public Member Functions;  TEveMCTrack ();  ;  ~TEveMCTrack () override;  ; TClass * IsA () const override;  ; TEveMCTrack & operator= (const TParticle &p);  ; void ResetPdgCode ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TParticle;  TParticle ();  reference to the particle record in PDG database ;  ;  TParticle (const TParticle &part);  copy constructor ;  ;  TParticle (Int_t pdg, Int_t status, Int_t mother1, Int_t mother2, Int_t daughter1, Int_t daughter2, const TLorentzVector &p, const TLorentzVector &v);  constructor ;  ;  TParticle (Int_t pdg, Int_t status, Int_t mother1, Int_t mother2, Int_t daughter1, Int_t daughter2, Double_t px, Double_t py, Double_t pz, Double_t etot, Double_t vx, Double_t vy, Double_t vz, Double_t time);  constructor ;  ;  ~TParticle () override;  destructor ;  ; Int_t Beauty () const;  Return beauty quantum number. ;  ; Int_t Charm () const;  Return charm quantum number. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a primary track. ;  ; Double_t Ek () const;  ; Double_t Energy () const;  ; Double_t Eta () const;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; Double_t GetCalcMass () const;  ; Int_t GetDaughter (Int_t i) const;  ; Int_t GetFirstDaughter () const;  ; Int_t GetFirstMother () const;  ; Int_t GetLastDaughter () const;  ; Double_t GetMass () const;  Return nominal particle mass from PDG table. ;  ; Int_t GetMother (Int_t i) const;  ; const char * Get",MatchSource.WIKI,doc/master/classTEveMCTrack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveMCTrack.html
Security,hash,hash,"*method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTEveMCTrack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveMCTrack.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEventIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIter.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEventIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIter.html
Modifiability,inherit,inherited,". ROOT: TEventIter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TEventIter Class ReferenceabstractPROOF » PROOF kernel Libraries. ; Special iterator class used in TProofPlayer to iterate over events or objects in the packets. ; Definition at line 42 of file TEventIter.h. Public Types; enum  EIterType { kData = 15; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TEventIter ();  Default constructor. ;  ;  TEventIter (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIter () override;  Destructor. ;  ; virtual Long64_t GetCacheSize ()=0;  ; virtual Long64_t GetEntryNumber (Long64_t);  ; virtual Int_t GetLearnEntries ()=0;  ; virtual Long64_t GetNextEvent ()=0;  ; virtual Int_t GetNextPacket (Long64_t &first, Long64_t &num)=0;  ; TList * GetPackets ();  ; virtual void InvalidatePacket ();  Invalidated the current packet (if any) by setting the TDSetElement::kCorrupted bit. ;  ; TClass * IsA () const override;  ; virtual void StopProcess (Bool_t abort);  Set flag to stop the process. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &Class",MatchSource.WIKI,doc/master/classTEventIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIter.html
Safety,abort,abort,"e = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TEventIter ();  Default constructor. ;  ;  TEventIter (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIter () override;  Destructor. ;  ; virtual Long64_t GetCacheSize ()=0;  ; virtual Long64_t GetEntryNumber (Long64_t);  ; virtual Int_t GetLearnEntries ()=0;  ; virtual Long64_t GetNextEvent ()=0;  ; virtual Int_t GetNextPacket (Long64_t &first, Long64_t &num)=0;  ; TList * GetPackets ();  ; virtual void InvalidatePacket ();  Invalidated the current packet (if any) by setting the TDSetElement::kCorrupted bit. ;  ; TClass * IsA () const override;  ; virtual void StopProcess (Bool_t abort);  Set flag to stop the process. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belo",MatchSource.WIKI,doc/master/classTEventIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIter.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTEventIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIter.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEventIterObj.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIterObj.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEventIterObj.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIterObj.html
Modifiability,inherit,inherited,". ROOT: TEventIterObj Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TEventIterObj Class Reference. . Definition at line 122 of file TEventIter.h. Public Member Functions;  TEventIterObj ();  Default ctor. ;  ;  TEventIterObj (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIterObj () override;  Destructor. ;  ; Long64_t GetCacheSize () override;  ; Int_t GetLearnEntries () override;  ; Long64_t GetNextEvent () override;  Get next event. ;  ; Int_t GetNextPacket (Long64_t &first, Long64_t &num) override;  Get loop range. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEventIter;  TEventIter ();  Default constructor. ;  ;  TEventIter (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIter () override;  Destructor. ;  ; virtual Long64_t GetEntryNumber (Long64_t);  ; TList * GetPackets ();  ; virtual void InvalidatePacket ();  Invalidated the current packet (if any) by setting the TDSetElement::kCorrupted bit. ;  ; virtual void StopProcess (Bool_t abort);  Set flag to stop the process. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  B",MatchSource.WIKI,doc/master/classTEventIterObj.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIterObj.html
Safety,abort,abort,";  TEventIterObj (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIterObj () override;  Destructor. ;  ; Long64_t GetCacheSize () override;  ; Int_t GetLearnEntries () override;  ; Long64_t GetNextEvent () override;  Get next event. ;  ; Int_t GetNextPacket (Long64_t &first, Long64_t &num) override;  Get loop range. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEventIter;  TEventIter ();  Default constructor. ;  ;  TEventIter (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIter () override;  Destructor. ;  ; virtual Long64_t GetEntryNumber (Long64_t);  ; TList * GetPackets ();  ; virtual void InvalidatePacket ();  Invalidated the current packet (if any) by setting the TDSetElement::kCorrupted bit. ;  ; virtual void StopProcess (Bool_t abort);  Set flag to stop the process. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname=""",MatchSource.WIKI,doc/master/classTEventIterObj.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIterObj.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTEventIterObj.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIterObj.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEventIterTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIterTree.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEventIterTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIterTree.html
Modifiability,inherit,inherited,"r Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TEventIterTree Class Reference. . Definition at line 148 of file TEventIter.h. Classes; class  TFileTree;  . Public Member Functions;  TEventIterTree ();  Default ctor. ;  ;  TEventIterTree (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIterTree () override;  Destructor. ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache, if any Return -1 if not used. ;  ; Int_t GetLearnEntries () override;  Return the number of entries in the learning phase. ;  ; Long64_t GetNextEvent () override;  Get next event. ;  ; Int_t GetNextPacket (Long64_t &first, Long64_t &num) override;  Get loop range. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEventIter;  TEventIter ();  Default constructor. ;  ;  TEventIter (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIter () override;  Destructor. ;  ; virtual Long64_t GetEntryNumber (Long64_t);  ; TList * GetPackets ();  ; virtual void InvalidatePacket ();  Invalidated the current packet (if any) by setting the TDSetElement::kCorrupted bit. ;  ; virtual void StopProcess (Bool_t abort);  Set flag to stop the process. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; vi",MatchSource.WIKI,doc/master/classTEventIterTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIterTree.html
Performance,cache,cache,". ROOT: TEventIterTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TEventIterTree Class Reference. . Definition at line 148 of file TEventIter.h. Classes; class  TFileTree;  . Public Member Functions;  TEventIterTree ();  Default ctor. ;  ;  TEventIterTree (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIterTree () override;  Destructor. ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache, if any Return -1 if not used. ;  ; Int_t GetLearnEntries () override;  Return the number of entries in the learning phase. ;  ; Long64_t GetNextEvent () override;  Get next event. ;  ; Int_t GetNextPacket (Long64_t &first, Long64_t &num) override;  Get loop range. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEventIter;  TEventIter ();  Default constructor. ;  ;  TEventIter (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIter () override;  Destructor. ;  ; virtual Long64_t GetEntryNumber (Long64_t);  ; TList * GetPackets ();  ; virtual void InvalidatePacket ();  Invalidated the current packet (if any) by setting the TDSetElement::kCorrupted bit. ;  ; virtual void StopProcess (Bool_t abort);  Set flag to stop the process. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement",MatchSource.WIKI,doc/master/classTEventIterTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIterTree.html
Safety,abort,abort,"Destructor. ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache, if any Return -1 if not used. ;  ; Int_t GetLearnEntries () override;  Return the number of entries in the learning phase. ;  ; Long64_t GetNextEvent () override;  Get next event. ;  ; Int_t GetNextPacket (Long64_t &first, Long64_t &num) override;  Get loop range. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEventIter;  TEventIter ();  Default constructor. ;  ;  TEventIter (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIter () override;  Destructor. ;  ; virtual Long64_t GetEntryNumber (Long64_t);  ; TList * GetPackets ();  ; virtual void InvalidatePacket ();  Invalidated the current packet (if any) by setting the TDSetElement::kCorrupted bit. ;  ; virtual void StopProcess (Bool_t abort);  Set flag to stop the process. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname=""",MatchSource.WIKI,doc/master/classTEventIterTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIterTree.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTEventIterTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIterTree.html
Usability,learn,learning,". ROOT: TEventIterTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TEventIterTree Class Reference. . Definition at line 148 of file TEventIter.h. Classes; class  TFileTree;  . Public Member Functions;  TEventIterTree ();  Default ctor. ;  ;  TEventIterTree (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIterTree () override;  Destructor. ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache, if any Return -1 if not used. ;  ; Int_t GetLearnEntries () override;  Return the number of entries in the learning phase. ;  ; Long64_t GetNextEvent () override;  Get next event. ;  ; Int_t GetNextPacket (Long64_t &first, Long64_t &num) override;  Get loop range. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEventIter;  TEventIter ();  Default constructor. ;  ;  TEventIter (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIter () override;  Destructor. ;  ; virtual Long64_t GetEntryNumber (Long64_t);  ; TList * GetPackets ();  ; virtual void InvalidatePacket ();  Invalidated the current packet (if any) by setting the TDSetElement::kCorrupted bit. ;  ; virtual void StopProcess (Bool_t abort);  Set flag to stop the process. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement",MatchSource.WIKI,doc/master/classTEventIterTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIterTree.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEventIterTree_1_1TFileTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIterTree_1_1TFileTree.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEventIterTree_1_1TFileTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIterTree_1_1TFileTree.html
Modifiability,inherit,inherited,". ROOT: TEventIterTree::TFileTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TEventIterTree::TFileTree Class Reference. . Definition at line 162 of file TEventIter.h. Public Member Functions;  TFileTree (const char *name, TFile *f, Bool_t islocal);  Default ctor. ;  ;  ~TFileTree () override;  Default dtor. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () c",MatchSource.WIKI,doc/master/classTEventIterTree_1_1TFileTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIterTree_1_1TFileTree.html
Security,hash,hash,"eTree (const char *name, TFile *f, Bool_t islocal);  Default ctor. ;  ;  ~TFileTree () override;  Default dtor. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEventIterTree_1_1TFileTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIterTree_1_1TFileTree.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEventIterUnit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIterUnit.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEventIterUnit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIterUnit.html
Modifiability,inherit,inherited,". ROOT: TEventIterUnit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TEventIterUnit Class Reference. . Definition at line 99 of file TEventIter.h. Public Member Functions;  TEventIterUnit ();  Default constructor. ;  ;  TEventIterUnit (TDSet *dset, TSelector *sel, Long64_t num);  Main constructor. ;  ;  ~TEventIterUnit () override;  ; Long64_t GetCacheSize () override;  ; Int_t GetLearnEntries () override;  ; Long64_t GetNextEvent () override;  Get next event. ;  ; Int_t GetNextPacket (Long64_t &first, Long64_t &num) override;  Get loop range. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEventIter;  TEventIter ();  Default constructor. ;  ;  TEventIter (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIter () override;  Destructor. ;  ; virtual Long64_t GetEntryNumber (Long64_t);  ; TList * GetPackets ();  ; virtual void InvalidatePacket ();  Invalidated the current packet (if any) by setting the TDSetElement::kCorrupted bit. ;  ; virtual void StopProcess (Bool_t abort);  Set flag to stop the process. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another d",MatchSource.WIKI,doc/master/classTEventIterUnit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIterUnit.html
Safety,abort,abort,"Default constructor. ;  ;  TEventIterUnit (TDSet *dset, TSelector *sel, Long64_t num);  Main constructor. ;  ;  ~TEventIterUnit () override;  ; Long64_t GetCacheSize () override;  ; Int_t GetLearnEntries () override;  ; Long64_t GetNextEvent () override;  Get next event. ;  ; Int_t GetNextPacket (Long64_t &first, Long64_t &num) override;  Get loop range. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEventIter;  TEventIter ();  Default constructor. ;  ;  TEventIter (TDSet *dset, TSelector *sel, Long64_t first, Long64_t num);  Constructor. ;  ;  ~TEventIter () override;  Destructor. ;  ; virtual Long64_t GetEntryNumber (Long64_t);  ; TList * GetPackets ();  ; virtual void InvalidatePacket ();  Invalidated the current packet (if any) by setting the TDSetElement::kCorrupted bit. ;  ; virtual void StopProcess (Bool_t abort);  Set flag to stop the process. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname=""",MatchSource.WIKI,doc/master/classTEventIterUnit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIterUnit.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTEventIterUnit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventIterUnit.html
Availability,error,error,"st char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Contains(Long64_t entry)TEventListvirtual; ContainsRange(Long64_t entrymin, Long64_t entrymax)TEventListvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TEventListinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirectoryAutoAdd(TDirectory *)TEventListvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Enter(Long64_t entry)TEventListvirtual; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fDeltaTEventListprotected; fDirectoryTEventListprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fListTEventListprotected; fNTEventListprotected; fNameTNamedprotected; fReapplyTEventListprotected; fSizeTEventListprotected; fTitleTNamedprotected; fUniqueIDTObjectprivate; GetDirectory() constTEventListinline; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetEntry(Int_t index) constTEventListvirtual; GetIconName() constTObjectvirtual; GetIndex(Long64_t entry) constTEventListvirtual; GetList() constTEventListinlinevirtual; GetN() constTEventListinlinevirtual; GetName() const overrideTNamedinlinevirtu",MatchSource.WIKI,doc/master/classTEventList-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventList-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TEventList Member List. This is the complete list of members for TEventList, including all inherited members. AbstractMethod(const char *method) constTObject; Add(const TEventList *list)TEventListvirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Class()TEventListstatic; Class_Name()TEventListstatic; Class_Version()TEventListinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTEventListinlinevirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Contains(Long64_t entry)TEventListvirtual; ContainsRange(Long64_t entrymin, Long64_t entrymax)TEventListvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TEventListinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirectoryAutoAdd(TDirectory *)TEventListvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Enter(Long64_t entry)TEventListvirtual; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fDeltaTEventListprotected; fDirectoryTEventListprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FillBu",MatchSource.WIKI,doc/master/classTEventList-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventList-members.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventList.html
Integrability,interface,interface,". ROOT: TEventList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; TEventList Class ReferenceTree Library. ; Legacy Code TEventList is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TEventList might still be a valid solution. ; A TEventList object is a list of selected events (entries) in a TTree.; A TEventList is automatically generated by TTree::Draw: example tree->Draw("">>elist1"",""x<0 && y> 0"");; In this example, a TEventList object named ""elist1"" will be generated. (Previous contents are overwritten). tree->Draw("">>+elist1"",""x<0 && y> 0"");; In this example, selected entries are added to the list.; The TEventList object is added to the list of objects in the current directory.; Use TTree:SetEventList(TEventList *list) to inform TTree that you want to use the list as input. The following code gets a pointer to the TEventList object created in the above commands: TEventList *list = (TEventList*)gDirectory->Get(""elist1"");; gDirectory#define gDirectoryDefinition TDirectory.h:384; TEventList<div class=""legacybox""><h2>Legacy Code</h2> TEventList is a legacy interface: there will be no bug fi...Definition TEventList.h:31. Use function Enter to enter an element in the list; The function Add may be used to merge two lists.; The function Subtract may be used to subtract two lists.; The function Reset may be used to reset a list.; Use TEventList::Print(option) to print the contents. (option ""all"" prints all the list entries).; Operators + and - correspond to functions Add and Subtract.; A TEventList object can be saved on a file via the Write function. . Definition at line 31 of file TEventList.h. Public Member Functions;  TEventList ();  Default construc",MatchSource.WIKI,doc/master/classTEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventList.html
Modifiability,inherit,inherited," &list);  Assingment. ;  ; void Print (Option_t *option="""") const override;  Print contents of this list. ;  ; virtual void Reset (Option_t *option="""");  Reset number of entries in event list. ;  ; virtual void Resize (Int_t delta=0);  Resize list by delta entries. ;  ; virtual void SetDelta (Int_t delta=100);  ; virtual void SetDirectory (TDirectory *dir);  Remove reference to this EventList from current directory and add reference to new directory dir. ;  ; void SetName (const char *name) override;  Change the name of this TEventList. ;  ; virtual void SetReapplyCut (bool apply=false);  ; virtual void Sort ();  Sort list entries in increasing order. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TEventList. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Subtract (const TEventList *list);  Remove elements from this list that are present in alist. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,doc/master/classTEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventList.html
Security,hash,hash,";  ; virtual void Subtract (const TEventList *list);  Remove elements from this list that are present in alist. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (con",MatchSource.WIKI,doc/master/classTEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEventList.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveParamList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveParamList.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveParamList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveParamList.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveParamList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveParamList.html
Modifiability,inherit,inherited,"es |; Private Member Functions |; Friends |; List of all members ; TEveParamList Class ReferenceGraphics » 3D Graphics » Event Display. ; Collection of named parameters. ; Definition at line 24 of file TEveParamList.h. Classes; struct  BoolConfig_t;  ; struct  FloatConfig_t;  ; struct  IntConfig_t;  . Public Types; typedef BoolConfigVec_t::const_iterator BoolConfigVec_ci;  ; typedef BoolConfigVec_t::iterator BoolConfigVec_i;  ; typedef std::vector< BoolConfig_t > BoolConfigVec_t;  ; typedef FloatConfigVec_t::const_iterator FloatConfigVec_ci;  ; typedef FloatConfigVec_t::iterator FloatConfigVec_i;  ; typedef std::vector< FloatConfig_t > FloatConfigVec_t;  ; typedef IntConfigVec_t::const_iterator IntConfigVec_ci;  ; typedef IntConfigVec_t::iterator IntConfigVec_i;  ; typedef std::vector< IntConfig_t > IntConfigVec_t;  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( ",MatchSource.WIKI,doc/master/classTEveParamList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveParamList.html
Security,hash,hash,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveParamList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveParamList.html
Usability,feedback,feedback,"tual function for retrieving title of the render-element. ;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; virtual TObject * GetObject (const TEveException &eh) const;  Get a TObject associated with this render-element. ;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveParamList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveParamList.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetO",MatchSource.WIKI,doc/master/classTEveParamListEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveParamListEditor.html
Deployability,update,update,"ons |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveParamListEditor Class ReferenceGraphics » 3D Graphics » Event Display. ; GUI editor for TEveParamList. ; Slot methods from this object do not call Update, instead they call their model's ParamChanged(const char* name) function which emits a corresponding signal.; This helps in handling of parameter changes as they are probably related to displayed objects in a more complicated way. Further, the TGCheckButton::HandleButton() emits more signal after the Clicked() signal and if model is reset in the editor, its contents is removed. This results in a crash. ; Definition at line 122 of file TEveParamList.h. Public Member Functions;  TEveParamListEditor (const TGWindow *p=nullptr, Int_t width=170, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor. ;  ;  ~TEveParamListEditor () override;  ; void DoBoolUpdate ();  Slot for bool parameter update. ;  ; void DoFloatUpdate ();  Slot for float parameter update. ;  ; void DoIntUpdate ();  Slot for integer parameter update. ;  ; TClass * IsA () const override;  ; void SetModel (TObject *obj) override;  Set model object. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGedFrame;  TGedFrame (const TGWindow *p=nullptr, Int_t width=140, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor of the base GUI attribute frame. ;  ;  ~TGedFrame () override;  Destructor of the base GUI attribute frame. ;  ; virtual Bool_t AcceptModel (TObject *);  ; virtual void ActivateBaseClassEditors (TClass *cl);  Provide list of editors for base-classes. ;  ; virtual void AddExtraTab (TGedSubFrame *sf);  Adds tab container to list of extra tabs. ;  ;  ClassDefOverride (TGedF",MatchSource.WIKI,doc/master/classTEveParamListEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveParamListEditor.html
Integrability,message,message,"d DrawBorder ();  Draw frame border. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; Bool_t HandleEvent (Event_t *event) override;  Handle all frame events. ;  ; virtual Bool_t HandleSelectionClear (Event_t *);  ; virtual Bool_t HandleSelectionRequest (Event_t *);  ; void Inspect () const override;  Dump contents of this object in a graphics canvas. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsActive () const;  ; Bool_t IsDNDSource () con",MatchSource.WIKI,doc/master/classTEveParamListEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveParamListEditor.html
Modifiability,inherit,inherited,"cts in a more complicated way. Further, the TGCheckButton::HandleButton() emits more signal after the Clicked() signal and if model is reset in the editor, its contents is removed. This results in a crash. ; Definition at line 122 of file TEveParamList.h. Public Member Functions;  TEveParamListEditor (const TGWindow *p=nullptr, Int_t width=170, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor. ;  ;  ~TEveParamListEditor () override;  ; void DoBoolUpdate ();  Slot for bool parameter update. ;  ; void DoFloatUpdate ();  Slot for float parameter update. ;  ; void DoIntUpdate ();  Slot for integer parameter update. ;  ; TClass * IsA () const override;  ; void SetModel (TObject *obj) override;  Set model object. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGedFrame;  TGedFrame (const TGWindow *p=nullptr, Int_t width=140, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor of the base GUI attribute frame. ;  ;  ~TGedFrame () override;  Destructor of the base GUI attribute frame. ;  ; virtual Bool_t AcceptModel (TObject *);  ; virtual void ActivateBaseClassEditors (TClass *cl);  Provide list of editors for base-classes. ;  ; virtual void AddExtraTab (TGedSubFrame *sf);  Adds tab container to list of extra tabs. ;  ;  ClassDefOverride (TGedFrame, 0);  ; virtual TGVerticalFrame * CreateEditorTabSubFrame (const char *name);  Create a vertical frame to be used by 'owner' in extra tab 'name'. ;  ; Option_t * GetDrawOption () const override;  Get draw options of the selected object. ;  ; TList * GetExtraTabs ();  ; TGedEditor * GetGedEditor ();  ; TClass * GetModelClass ();  ; Int_t GetPriority ();  ; virtual void Refresh (TObject *model);  Refresh the GUI info about the object attributes. ;  ; void SetDrawOption (Option_t *option="""") overr",MatchSource.WIKI,doc/master/classTEveParamListEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveParamListEditor.html
Security,hash,hash,"n response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; TClass * IsA () const override;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTEveParamListEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveParamListEditor.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEvePlot3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePlot3D.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEvePlot3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePlot3D.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEvePlot3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePlot3D.html
Modifiability,inherit,inherited,"; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEvePlot3D Class ReferenceGraphics » 3D Graphics » Event Display. ; Description of TEvePlot3D. ; Definition at line 18 of file TEvePlot3D.h. Public Member Functions;  TEvePlot3D (const char *n=""TEvePlot3D"", const char *t="""");  Constructor. ;  ;  ~TEvePlot3D () override;  ; Bool_t GetLogX () const;  ; Bool_t GetLogY () const;  ; Bool_t GetLogZ () const;  ; TObject * GetPlot () const;  ; TString GetPlotOption () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this object. Only direct rendering is supported. ;  ; void SetLogX (Bool_t l);  ; void SetLogXYZ (Bool_t lx, Bool_t ly, Bool_t lz);  ; void SetLogY (Bool_t l);  ; void SetLogZ (Bool_t l);  ; void SetPlot (TObject *obj, const TString &opt);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEve",MatchSource.WIKI,doc/master/classTEvePlot3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePlot3D.html
Security,hash,hash,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEvePlot3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePlot3D.html
Usability,feedback,feedback,"t;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEvePlot3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePlot3D.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSelector.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSelector.html
Modifiability,inherit,inherited,"erride;  ; TEvePointSelectorConsumer * GetConsumer () const;  ; const char * GetSelection () const;  ; const char * GetSubIdExp () const;  ; Int_t GetSubIdNum () const;  ; TTree * GetTree () const;  ; const char * GetVarexp () const;  ; TClass * IsA () const override;  ; virtual Long64_t Select (const char *selection=nullptr);  Process the tree, select points matching 'selection'. ;  ; virtual Long64_t Select (TTree *t, const char *selection=nullptr);  Process tree 't', select points matching 'selection'. ;  ; void SetConsumer (TEvePointSelectorConsumer *c);  ; void SetSelection (const char *s);  ; void SetSubIdExp (const char *s);  ; void SetTree (TTree *t);  ; void SetVarexp (const char *v);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TakeAction () override;  Callback from tree-player after a chunk of data has been processed. ;  ;  Public Member Functions inherited from TSelectorDraw;  TSelectorDraw ();  Default selector constructor. ;  ;  ~TSelectorDraw () override;  Selector destructor. ;  ; void Begin (TTree *tree) override;  Called every time a loop on the tree(s) starts. ;  ; virtual Int_t GetAction () const;  ; virtual bool GetCleanElist () const;  ; virtual Int_t GetDimension () const;  ; virtual Long64_t GetDrawFlag () const;  ; Int_t GetMultiplicity () const;  ; virtual Int_t GetNfill () const;  ; TObject * GetObject () const;  ; TH1 * GetOldHistogram () const;  ; TTreeFormula * GetSelect () const;  ; virtual Long64_t GetSelectedRows () const;  ; TTree * GetTree () const;  ; virtual Double_t * GetV1 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetV2 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetV3 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetV4 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetVal (Int_t i) const;  Return the last values corresponding to the i-th component of the f",MatchSource.WIKI,doc/master/classTEvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSelector.html
Performance,load,loaded,";  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelectorDraw; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelector; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TSelector * GetSelector (const char *filename);  The code in filename is loaded (interpreted or compiled, see below), filename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag",MatchSource.WIKI,doc/master/classTEvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSelector.html
Security,hash,hash," to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTEvePointSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSelector.html
Availability,error,error,"ault action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () cons",MatchSource.WIKI,doc/master/classTEvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSet.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from TPointSet3D;  TPointSet3D ();  ;  TPointSet3D (const TPointSet3D &t);  Copy constructor. ;  ;  TPointSet3D (Int_t n, Double_t *p, Marker_t m=1, Option_t *opt="""");  ;  TPointSet3D (Int_t n, Float_t *p, Marker_t m=1, Option_t *opt="""");  ;  TPointSet3D (Int_t n, Marker_t m=1, Option_t *opt="""");  ;  ~TPointSet3D () override;  Destructor. ;  ; void ClearIds ();  Clears the id-array. If ids are owned the TObjects are deleted. ;  ; void ComputeBBox () override;  Compute the bounding box of this points set. ;  ; Bool_t GetOwnIds () const;  ; TObject * GetPointId (Int_t n) const;  ; TClass * IsA () const override;  ; TPointSet3D & operator= (const TPointSet3D &t);  Assignment operator. ",MatchSource.WIKI,doc/master/classTEvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSet.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSet.html
Modifiability,inherit,inherited,"ting of title of an element. ;  ; void SetMarkerColor (Color_t col) override;  Set the marker color. ;  ; void SetMarkerSize (Size_t msize=1) override;  Set marker size, propagate to projecteds. ;  ; void SetMarkerStyle (Style_t mstyle=1) override;  Set marker style, propagate to projecteds. ;  ; void SetPointIntIds (Int_t *ids);  Set integer ids for the last point that was registered (most probably via TPolyMarker3D::SetNextPoint(x,y,z)). ;  ; void SetPointIntIds (Int_t n, Int_t *ids);  Set integer ids for point with index n. ;  ; virtual void SetTitle (const char *t);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TakeAction (TEvePointSelector *) override;  Called from TEvePointSelector when internal arrays of the tree-selector are filled up and need to be processed. ;  ; void WriteVizParams (std::ostream &out, const TString &var) override;  Write visualization parameters. ;  ;  Public Member Functions inherited from TEveElement;  TEveElement ();  Default constructor. ;  ;  TEveElement (Color_t &main_color);  Constructor. ;  ;  TEveElement (const TEveElement &e);  Copy constructor. ;  ; virtual ~TEveElement ();  Destructor. ;  ; virtual Bool_t AcceptElement (TEveElement *el);  Check if el can be added to this element. ;  ; virtual void AddElement (TEveElement *el);  Add el to the list of children. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TEveElement *parent);  Add this render element into ltree to all items belonging to parent. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Add this element into ltree to an already existing item parent_lti. ;  ; virtual TGListTreeItem * AddIntoListTrees (TEveElement *parent);  Add this render element into all list-trees and all items belonging to parent. ;  ; virtual void AddParent (TEveElement *re);  Add re into the list parents. ;  ; virtual void AddStamp (UChar_t bits);  Add (bitwise or) give",MatchSource.WIKI,doc/master/classTEvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSet.html
Security,hash,hash,", e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTEvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSet.html
Usability,feedback,feedback,"he number of times deny-destroy has been requested on the element. ;  ; Bool_t GetDestroyOnZeroRefCnt () const;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEvePointSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSet.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSetArray.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSetArray.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSetArray.html
Modifiability,variab,variable,". ROOT: TEvePointSetArray Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEvePointSetArray Class ReferenceGraphics » 3D Graphics » Event Display. ; An array of point-sets with each point-set playing a role of a bin in a histogram. ; When a new point is added to a TEvePointSetArray, an additional separating quantity needs to be specified: it determines into which TEvePointSet (bin) the point will actually be stored. Underflow and overflow bins are automatically created but they are not drawn by default.; By using the TEvePointSelector the points and the separating quantities can be filled directly from a TTree holding the source data. Setting of per-point TRef's is not supported.; After the filling, the range of separating variable can be controlled with a slider to choose a sub-set of PointSets that are actually shown. ; Definition at line 107 of file TEvePointSet.h. Public Member Functions;  TEvePointSetArray (const char *name=""TEvePointSetArray"", const char *title="""");  Constructor. ;  ;  ~TEvePointSetArray () override;  Destructor: deletes the fBins array. ;  ; void CloseBins ();  Call this after all the points have been filled. ;  ; Bool_t Fill (Double_t x, Double_t y, Double_t z, Double_t quant);  Add a new point. ;  ; TEvePointSet * GetBin (Int_t bin) const;  ; Double_t GetCurMax () const;  ; Double_t GetCurMin () const;  ; Int_t GetDefPointSetCapacity () const;  ; Double_t GetMax () const;  ; Double_t GetMin () const;  ; Int_t GetNBins () const;  ; void InitBins (const char *quant_name, Int_t nbins, Double_t min, Double_t max);  Initialize internal point-sets with given binning parameters. ;  ; TClass * IsA () const override;  ; void RemoveElementLocal (TEveElement *el) override;  Virtual from TEveElement, provide bin management. ;  ; void Remo",MatchSource.WIKI,doc/master/classTEvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSetArray.html
Security,hash,hash,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSetArray.html
Usability,feedback,feedback,"tual function for retrieving title of the render-element. ;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; virtual TObject * GetObject (const TEveException &eh) const;  Get a TObject associated with this render-element. ;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEvePointSetArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSetArray.html
Availability,error,error,"ault action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () cons",MatchSource.WIKI,doc/master/classTEvePointSetProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSetProjected.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from TPointSet3D;  TPointSet3D ();  ;  TPointSet3D (const TPointSet3D &t);  Copy constructor. ;  ;  TPointSet3D (Int_t n, Double_t *p, Marker_t m=1, Option_t *opt="""");  ;  TPointSet3D (Int_t n, Float_t *p, Marker_t m=1, Option_t *opt="""");  ;  TPointSet3D (Int_t n, Marker_t m=1, Option_t *opt="""");  ;  ~TPointSet3D () override;  Destructor. ;  ; void ClearIds ();  Clears the id-array. If ids are owned the TObjects are deleted. ;  ; void ComputeBBox () override;  Compute the bounding box of this points set. ;  ; Bool_t GetOwnIds () const;  ; TObject * GetPointId (Int_t n) const;  ; TClass * IsA () const override;  ; TPointSet3D & operator= (const TPointSet3D &t);  Assignment operator. ",MatchSource.WIKI,doc/master/classTEvePointSetProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSetProjected.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEvePointSetProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSetProjected.html
Modifiability,inherit,inherited,"tic Public Member Functions |; Protected Member Functions |; Private Member Functions |; List of all members ; TEvePointSetProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; Projected copy of a TEvePointSet. ; Definition at line 170 of file TEvePointSet.h. Public Member Functions;  TEvePointSetProjected ();  Default contructor. ;  ;  ~TEvePointSetProjected () override;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void PointSelected (Int_t id) override;  Virtual method of base class TPointSet3D. ;  ; void SetProjection (TEveProjectionManager *proj, TEveProjectable *model) override;  Set projection manager and projection model. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  Re-apply the projection. ;  ;  Public Member Functions inherited from TEvePointSet;  TEvePointSet (const char *name, Int_t n_points=0, ETreeVarType_e tv_type=kTVT_XYZ);  Constructor. ;  ;  TEvePointSet (const TEvePointSet &e);  Copy constructor. ;  ;  TEvePointSet (Int_t n_points=0, ETreeVarType_e tv_type=kTVT_XYZ);  Constructor. ;  ;  ~TEvePointSet () override;  Destructor. ;  ; TEvePointSet * CloneElement () const override;  Clone the element via copy constructor. ;  ; virtual void ClonePoints (const TEvePointSet &e);  Clone points and all point-related information from point-set 'e'. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; Int_t GetIntIdsPerPoint () const;  ; const TGPicture * GetListTreeIcon (Bool_t open=kFALSE) override;  Return pointset icon. ;  ; TObject * GetObject (const TEveException &) con",MatchSource.WIKI,doc/master/classTEvePointSetProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSetProjected.html
Security,hash,hash,", e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTEvePointSetProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSetProjected.html
Usability,feedback,feedback,"he number of times deny-destroy has been requested on the element. ;  ; Bool_t GetDestroyOnZeroRefCnt () const;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEvePointSetProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePointSetProjected.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEvePolygonSetProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePolygonSetProjected.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * Ge",MatchSource.WIKI,doc/master/classTEvePolygonSetProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePolygonSetProjected.html
Energy Efficiency,reduce,reduce,"ted from TEveProjectable; ProjList_t fProjectedList;  ;  Protected Attributes inherited from TAttBBox; Float_t * fBBox;  ;  Protected Attributes inherited from TEveProjected; Float_t fDepth;  ; TEveProjectionManager * fManager;  ; TEveProjectable * fProjectable;  . Private Member Functions;  TEvePolygonSetProjected (const TEvePolygonSetProjected &)=delete;  ; Float_t AddPolygon (std::list< Int_t, std::allocator< Int_t > > &pp, std::list< Polygon_t, std::allocator< Polygon_t > > &p);  Check if polygon has dimensions above TEveProjection::fgEps and add it to a list if it is not a duplicate. ;  ; Bool_t IsFirstIdxHead (Int_t s0, Int_t s1);  Compare the two segments and check if the first index of first segment is starting. ;  ; Float_t MakePolygonsFromBP (Int_t *idxMap);  Build polygons from list of buffer polygons. ;  ; Float_t MakePolygonsFromBS (Int_t *idxMap);  Build polygons from the set of buffer segments. ;  ; TEvePolygonSetProjected & operator= (const TEvePolygonSetProjected &)=delete;  ; Int_t * ProjectAndReducePoints ();  Project and reduce buffer points. ;  . Private Attributes; TBuffer3D * fBuff;  . Friends; class TEvePolygonSetProjectedEditor;  ; class TEvePolygonSetProjectedGL;  . Additional Inherited Members;  Public Types inherited from TEveShape; typedef std::vector< TEveVector2 >::iterator vVector2_i;  ; typedef std::vector< TEveVector2 > vVector2_t;  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::r",MatchSource.WIKI,doc/master/classTEvePolygonSetProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePolygonSetProjected.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEvePolygonSetProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePolygonSetProjected.html
Modifiability,inherit,inherited,"ons;  TEvePolygonSetProjected (const char *n=""TEvePolygonSetProjected"", const char *t="""");  Constructor. ;  ;  ~TEvePolygonSetProjected () override;  Destructor. ;  ; void ComputeBBox () override;  Override of virtual method from TAttBBox. ;  ; void DumpBuffer3D ();  Dump information about currently projected buffer. ;  ; virtual void DumpPolys () const;  Dump information about built polygons. ;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void ProjectBuffer3D ();  Project current buffer. ;  ; void SetProjection (TEveProjectionManager *mng, TEveProjectable *model) override;  This is virtual method from base-class TEveProjected. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  This is virtual method from base-class TEveProjected. ;  ;  Public Member Functions inherited from TEveShape;  TEveShape (const char *n=""TEveShape"", const char *t="""");  Constructor. ;  ;  ~TEveShape () override;  Destructor. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; virtual Bool_t GetDrawFrame () const;  ; virtual Color_t GetFillColor () const;  ; virtual Bool_t GetHighlightFrame () const;  ; virtual Color_t GetLineColor () const;  ; virtual Float_t GetLineWidth () const;  ; virtual Bool_t GetMiniFrame () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this object. Only direct rendering is supported. ;  ; virtual void SetDrawFrame (Bool_t f);  ; virtual void SetFillColor (Color_t c);  ; virtual void SetHighlightFrame (Bool_t f);  ; virtual void SetLineColor (Color_t c);  ; virtual void SetLineWidth (Float_t lw);  ; void SetMainColor (Color_t color) override;  Set main color. ;  ; virtual void SetMiniFrame (Bool_t r);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuff",MatchSource.WIKI,doc/master/classTEvePolygonSetProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePolygonSetProjected.html
Security,hash,hash,". ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEvePolygonSetProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePolygonSetProjected.html
Usability,feedback,feedback,"t;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEvePolygonSetProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEvePolygonSetProjected.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveProjectionAxes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveProjectionAxes.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveProjectionAxes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveProjectionAxes.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveProjectionAxes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveProjectionAxes.html
Modifiability,inherit,inherited,"; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveProjectionAxes Class ReferenceGraphics » 3D Graphics » Event Display. ; Axes for non-linear projections. ; Show scale of TEveProjectionManager children. With different step mode tick-marks can positioned equidistant or placed with value monotonically increasing from lower left corner of bounding box. ; Definition at line 24 of file TEveProjectionAxes.h. Public Types; enum  EAxesMode { kHorizontal; , kVertical; , kAll; };  ; enum  ELabMode { kPosition; , kValue; };  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TEveProjectionAxes (TEvePro",MatchSource.WIKI,doc/master/classTEveProjectionAxes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveProjectionAxes.html
Security,hash,hash,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveProjectionAxes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveProjectionAxes.html
Usability,feedback,feedback,"Virtual function for retrieving name of the element. ;  ; virtual const char * GetElementTitle () const;  Virtual function for retrieving title of the render-element. ;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; virtual TObject * GetObject (const TEveException &eh) const;  Get a TObject associated with this render-element. ;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveProjectionAxes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveProjectionAxes.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveProjectionManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveProjectionManager.html
Deployability,update,updates,". ROOT: TEveProjectionManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveProjectionManager Class ReferenceGraphics » 3D Graphics » Event Display. ; Manager class for steering of projections and managing projected objects. ; Recursively projects TEveElement's and draws axis in the projected scene. It enables to interactively set TEveProjection parameters and updates projected scene accordingly. ; Definition at line 20 of file TEveProjectionManager.h. Public Member Functions;  TEveProjectionManager (TEveProjection::EPType_e type=TEveProjection::kPT_Unknown);  Constructor. ;  ;  ~TEveProjectionManager () override;  Destructor. ;  ; void AddDependent (TEveElement *el);  Add el as dependent element. ;  ; void ComputeBBox () override;  Virtual from TAttBBox; fill bounding-box information. ;  ; TEveVector & GetCenter ();  ; Float_t GetCurrentDepth () const;  ; Bool_t GetImportEmpty () const;  ; TEveProjection * GetProjection ();  ; Bool_t HandleElementPaste (TEveElement *el) override;  React to element being pasted or dnd-ed. ;  ; virtual TEveElement * ImportElements (TEveElement *el, TEveElement *ext_list=nullptr);  Recursively import elements and apply projection to the newly imported objects. ;  ; virtual TEveElement * ImportElementsRecurse (TEveElement *el, TEveElement *parent);  If el is TEveProjectable add projected instance else add plain TEveElementList to parent. ;  ; TClass * IsA () const override;  ; virtual void ProjectChildren ();  Project all children recursively, update bounding-box and notify TEveManger about the scenes that have been changed. ;  ; virtual void ProjectChildrenRecurse (TEveElement *el);  Project el (via TEveProjected::UpdateProjection()) and recurse through el's children. ;  ; void RemoveDependent (T",MatchSource.WIKI,doc/master/classTEveProjectionManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveProjectionManager.html
Integrability,depend,dependent,". ROOT: TEveProjectionManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveProjectionManager Class ReferenceGraphics » 3D Graphics » Event Display. ; Manager class for steering of projections and managing projected objects. ; Recursively projects TEveElement's and draws axis in the projected scene. It enables to interactively set TEveProjection parameters and updates projected scene accordingly. ; Definition at line 20 of file TEveProjectionManager.h. Public Member Functions;  TEveProjectionManager (TEveProjection::EPType_e type=TEveProjection::kPT_Unknown);  Constructor. ;  ;  ~TEveProjectionManager () override;  Destructor. ;  ; void AddDependent (TEveElement *el);  Add el as dependent element. ;  ; void ComputeBBox () override;  Virtual from TAttBBox; fill bounding-box information. ;  ; TEveVector & GetCenter ();  ; Float_t GetCurrentDepth () const;  ; Bool_t GetImportEmpty () const;  ; TEveProjection * GetProjection ();  ; Bool_t HandleElementPaste (TEveElement *el) override;  React to element being pasted or dnd-ed. ;  ; virtual TEveElement * ImportElements (TEveElement *el, TEveElement *ext_list=nullptr);  Recursively import elements and apply projection to the newly imported objects. ;  ; virtual TEveElement * ImportElementsRecurse (TEveElement *el, TEveElement *parent);  If el is TEveProjectable add projected instance else add plain TEveElementList to parent. ;  ; TClass * IsA () const override;  ; virtual void ProjectChildren ();  Project all children recursively, update bounding-box and notify TEveManger about the scenes that have been changed. ;  ; virtual void ProjectChildrenRecurse (TEveElement *el);  Project el (via TEveProjected::UpdateProjection()) and recurse through el's children. ;  ; void RemoveDependent (T",MatchSource.WIKI,doc/master/classTEveProjectionManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveProjectionManager.html
Modifiability,inherit,inherited,". ;  ; void RemoveDependent (TEveElement *el);  Remove el as dependent element. ;  ; void SetCenter (Float_t x, Float_t y, Float_t z);  Set projection center and rebuild projected scene. ;  ; void SetCurrentDepth (Float_t d);  ; void SetImportEmpty (Bool_t ie);  ; void SetProjection (TEveProjection::EPType_e type);  Set projection type and distortion. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t SubImportChildren (TEveElement *el, TEveElement *proj_parent);  Recursively import children elements of el and apply projection to the newly imported objects. ;  ; virtual TEveElement * SubImportElements (TEveElement *el, TEveElement *proj_parent);  Recursively import elements and apply projection to the newly imported objects. ;  ; virtual void UpdateName ();  Updates name to have consistent information with projection. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void Set",MatchSource.WIKI,doc/master/classTEveProjectionManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveProjectionManager.html
Performance,optimiz,optimization,"ne 57 of file TEveProjectionManager.h. ◆ GetImportEmpty(). Bool_t TEveProjectionManager::GetImportEmpty ; (; ); const. inline . Definition at line 60 of file TEveProjectionManager.h. ◆ GetProjection(). TEveProjection * TEveProjectionManager::GetProjection ; (; ). inline . Definition at line 49 of file TEveProjectionManager.h. ◆ HandleElementPaste(). Bool_t TEveProjectionManager::HandleElementPaste ; (; TEveElement * ; el). overridevirtual . React to element being pasted or dnd-ed. ; Return true if redraw is needed (virtual method). ; Reimplemented from TEveElement.; Definition at line 172 of file TEveProjectionManager.cxx. ◆ ImportElements(). TEveElement * TEveProjectionManager::ImportElements ; (; TEveElement * ; el, . TEveElement * ; ext_list = nullptr . ). virtual . Recursively import elements and apply projection to the newly imported objects. ; If ext_list is not 0 the new element is also added to the list. This simplifies construction of complex views where projected elements are distributed into several scenes for optimization of updates and rendering.; Returns the projected replica of el. Can be 0, if el and none of its children are projectable. ; Definition at line 279 of file TEveProjectionManager.cxx. ◆ ImportElementsRecurse(). TEveElement * TEveProjectionManager::ImportElementsRecurse ; (; TEveElement * ; el, . TEveElement * ; parent . ). virtual . If el is TEveProjectable add projected instance else add plain TEveElementList to parent. ; Call the same function on el's children.; Returns the projected replica of el. Can be 0, if el and none of its children are projectable. ; Definition at line 225 of file TEveProjectionManager.cxx. ◆ IsA(). TClass * TEveProjectionManager::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveElementList.; Definition at line 77 of file TEveProjectionManager.h. ◆ operator=(). TEveProjectionManager & TEveProjectionManager::operator= ; (; const TEveProjectionManager & ; )",MatchSource.WIKI,doc/master/classTEveProjectionManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveProjectionManager.html
Security,hash,hash,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveProjectionManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveProjectionManager.html
Usability,feedback,feedback,"t;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void IncImpliedSelected ();  Increase element's implied-selection count. Stamp appropriately. ;  ; void In",MatchSource.WIKI,doc/master/classTEveProjectionManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveProjectionManager.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveQuadSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveQuadSet.html
Deployability,update,update,"t SetRnrState (Bool_t rnr);  Set render state of this element and of its children to the same value. ;  ; void SetSourceObject (TObject *o);  ; virtual void SetTransMatrix (const TGeoMatrix &mat);  Set transformation matrix from TGeo's matrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveQuadSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveQuadSet.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveQuadSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveQuadSet.html
Modifiability,variab,variables,". ROOT: TEveQuadSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveQuadSet Class ReferenceGraphics » 3D Graphics » Event Display. ; Supports various internal formats that result in rendering of a set of planar (lines, rectangles, hexagons with shared normal) objects. ; Names of internal structures and their variables use A, B and C as names for coordinate value-holders. Typical assignment is A->X, B->Y, C->Z but each render mode can override this convention and impose y or x as a fixed (third or C) coordinate. Alphabetic order is obeyed in this correspondence.; For quad modes the deltas are expected to be positive. For line modes negative deltas are ok. ; Definition at line 19 of file TEveQuadSet.h. Classes; struct  QFreeQuad_t;  ; struct  QHex_t;  ; struct  QLineFixC_t;  ; struct  QOrigin_t;  ; struct  QRect_t;  ; struct  QRectFixC_t;  ; struct  QRectFixDim_t;  ; struct  QRectFixDimC_t;  . Public Types; enum  EQuadType_e { ;   kQT_Undef; , kQT_FreeQuad; , kQT_RectangleXY; , kQT_RectangleXZ; , ;   kQT_RectangleYZ; , kQT_RectangleXYFixedDim; , kQT_RectangleXYFixedZ; , kQT_RectangleXZFixedY; , ;   kQT_RectangleYZFixedX; , kQT_RectangleXYFixedDimZ; , kQT_RectangleXZFixedDimY; , kQT_RectangleYZFixedDimX; , ;   kQT_Rectangle_End; , kQT_LineXYFixedZ; , kQT_LineXZFixedY; , kQT_Line_End; , ;   kQT_HexagonXY; , kQT_HexagonYX; , kQT_Hexagon_End. };  ;  Public Types inherited from TEveDigitSet; typedef void(* Callback_foo) (TEveDigitSet *, Int_t, TObject *);  ; enum  ERenderMode_e { kRM_AsIs; , kRM_Line; , kRM_Fill; };  ; typedef TString(* TooltipCB_foo) (TEveDigitSet *, Int_t);  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox =",MatchSource.WIKI,doc/master/classTEveQuadSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveQuadSet.html
Security,hash,hash,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveQuadSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveQuadSet.html
Usability,feedback,feedback,";  ; virtual const char * GetElementName () const;  Virtual function for retrieving name of the element. ;  ; virtual const char * GetElementTitle () const;  Virtual function for retrieving title of the render-element. ;  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveQuadSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveQuadSet.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEveRecCascade.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveRecCascade.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEveRecCascade.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveRecCascade.html
Modifiability,inherit,inherited,". ROOT: TEveRecCascade Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveRecCascade Class Reference. . Definition at line 228 of file TEveVSDStructs.h. Public Member Functions;  TEveRecCascade ();  ;  ~TEveRecCascade () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  D",MatchSource.WIKI,doc/master/classTEveRecCascade.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveRecCascade.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTEveRecCascade.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveRecCascade.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEveRecKink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveRecKink.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEveRecKink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveRecKink.html
Modifiability,inherit,inherited,". ROOT: TEveRecKink Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveRecKink Class Reference. . Definition at line 162 of file TEveVSDStructs.h. Public Member Functions;  TEveRecKink ();  ;  ~TEveRecKink () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class in",MatchSource.WIKI,doc/master/classTEveRecKink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveRecKink.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTEveRecKink.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveRecKink.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEveRecTrackT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveRecTrackT.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEveRecTrackT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveRecTrackT.html
Modifiability,inherit,inherited,". ROOT: TEveRecTrackT< TT > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveRecTrackT< TT > Class Template Reference. ; template<typename TT>; class TEveRecTrackT< TT >; Definition at line 129 of file TEveVSDStructs.h. Public Member Functions;  TEveRecTrackT ();  ;  ~TEveRecTrackT () override;  ; TClass * IsA () const override;  ; Float_t Pt ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option",MatchSource.WIKI,doc/master/classTEveRecTrackT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveRecTrackT.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTEveRecTrackT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveRecTrackT.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEveRecV0.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveRecV0.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEveRecV0.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveRecV0.html
Modifiability,inherit,inherited,". ROOT: TEveRecV0 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TEveRecV0 Class Reference. . Definition at line 197 of file TEveVSDStructs.h. Public Member Functions;  TEveRecV0 ();  ;  ~TEveRecV0 () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritanc",MatchSource.WIKI,doc/master/classTEveRecV0.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveRecV0.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTEveRecV0.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveRecV0.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEveRGBAPalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveRGBAPalette.html
Integrability,wrap,wrapping,". ROOT: TEveRGBAPalette Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveRGBAPalette Class ReferenceGraphics » 3D Graphics » Event Display. ; A generic, speed-optimised mapping from value to RGBA color supporting different wrapping and range truncation modes. ; Flag fFixColorRange: specifies how the palette is mapped to signal values:; true - LowLimit -> HighLimit; false - MinValue -> MaxValue . Definition at line 22 of file TEveRGBAPalette.h. Public Types; enum  ELimitAction_e { kLA_Cut; , kLA_Mark; , kLA_Clip; , kLA_Wrap; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TEveRGBAPalette ();  Constructor. ;  ;  TEveRGBAPalette (Int_t min, Int_t max, Bool_t interp=kTRUE, Bool_t showdef=kTRUE, Bool_t fixcolrng=kFALSE);  Constructor. ;  ;  ~TEveRGBAPalette () override;  Destructor. ;  ; void ClearColorArray ();  Clear internal color array. ;  ; const UChar_t * ColorFromValue (Int_t val) const;  ; Bool_t ColorFromValue (Int_t val, Int_t defVal, UChar_t *pix, Bool_t alpha=kTRUE) const;  ; void ColorFromValue (Int_t val, UChar_t *pix, Bool_t alpha=kTRUE) const;  ; Color_",MatchSource.WIKI,doc/master/classTEveRGBAPalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveRGBAPalette.html
Modifiability,inherit,inherited,". ROOT: TEveRGBAPalette Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveRGBAPalette Class ReferenceGraphics » 3D Graphics » Event Display. ; A generic, speed-optimised mapping from value to RGBA color supporting different wrapping and range truncation modes. ; Flag fFixColorRange: specifies how the palette is mapped to signal values:; true - LowLimit -> HighLimit; false - MinValue -> MaxValue . Definition at line 22 of file TEveRGBAPalette.h. Public Types; enum  ELimitAction_e { kLA_Cut; , kLA_Mark; , kLA_Clip; , kLA_Wrap; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TEveRGBAPalette ();  Constructor. ;  ;  TEveRGBAPalette (Int_t min, Int_t max, Bool_t interp=kTRUE, Bool_t showdef=kTRUE, Bool_t fixcolrng=kFALSE);  Constructor. ;  ;  ~TEveRGBAPalette () override;  Destructor. ;  ; void ClearColorArray ();  Clear internal color array. ;  ; const UChar_t * ColorFromValue (Int_t val) const;  ; Bool_t ColorFromValue (Int_t val, Int_t defVal, UChar_t *pix, Bool_t alpha=kTRUE) const;  ; void ColorFromValue (Int_t val, UChar_t *pix, Bool_t alpha=kTRUE) const;  ; Color_",MatchSource.WIKI,doc/master/classTEveRGBAPalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveRGBAPalette.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTEveRGBAPalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveRGBAPalette.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveScalableStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveScalableStraightLineSet.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecte",MatchSource.WIKI,doc/master/classTEveScalableStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveScalableStraightLineSet.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveScalableStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveScalableStraightLineSet.html
Modifiability,inherit,inherited," Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveScalableStraightLineSet Class ReferenceGraphics » 3D Graphics » Event Display. ; Straight-line-set with extra scaling, useful for projectables that need to be scaled in accordance with an external object. ; Definition at line 17 of file TEveScalableStraightLineSet.h. Public Member Functions;  TEveScalableStraightLineSet (const char *n=""ScalableStraightLineSet"", const char *t="""");  Constructor. ;  ;  ~TEveScalableStraightLineSet () override;  ; Double_t GetScale () const;  Return current scale. ;  ; TClass * IsA () const override;  ; void SetScale (Double_t scale);  Loop over line parameters and scale coordinates. ;  ; void SetScaleCenter (Float_t x, Float_t y, Float_t z);  Set scale center. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveStraightLineSet;  TEveStraightLineSet (const char *n=""StraightLineSet"", const char *t="""");  Constructor. ;  ;  ~TEveStraightLineSet () override;  ; Line_t * AddLine (const TEveVector &p1, const TEveVector &p2);  Add a line. ;  ; Line_t * AddLine (Float_t x1, Float_t y1, Float_t z1, Float_t x2, Float_t y2, Float_t z2);  Add a line. ;  ; Marker_t * AddMarker (const TEveVector &p, Int_t line_id=-1);  Add a marker with given position. ;  ; Marker_t * AddMarker (Float_t x, Float_t y, Float_t z, Int_t line_id=-1);  Add a marker with given position. ;  ; Marker_t * AddMarker (Int_t line_id, Float_t pos);  Add a marker for line with given index on relative position pos. ;  ; void ComputeBBox () override;  Compute bounding-box. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; virtual Bool_t GetDepthTest ();  ; TEveChunkManager & GetLinePlex ();  ; TEveChunkManager & GetMarkerPlex ();  ; virtual Bool_t GetRnrL",MatchSource.WIKI,doc/master/classTEveScalableStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveScalableStraightLineSet.html
Security,hash,hash,"virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveScalableStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveScalableStraightLineSet.html
Usability,feedback,feedback,"tual function for retrieving title of the render-element. ;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; virtual TObject * GetObject (const TEveException &eh) const;  Get a TObject associated with this render-element. ;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveScalableStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveScalableStraightLineSet.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveScene.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveScene.html
Deployability,update,update,"*n=""TEveScene"", const char *t="""");  Constructor. ;  ;  TEveScene (TGLScenePad *gl_scene, const char *n=""TEveScene"", const char *t="""");  Constructor. ;  ;  ~TEveScene () override;  Destructor. ;  ; void Changed ();  ; void CollectSceneParents (List_t &scenes) override;  Virtual from TEveElement; here we simply append this scene to the list. ;  ; void DestroyElementRenderers (TEveElement *element);  Remove element from the scene. ;  ; void DestroyElementRenderers (TObject *rnrObj);  Remove element represented by object rnrObj from the scene. ;  ; TGLScenePad * GetGLScene () const;  ; Bool_t GetHierarchical () const;  ; const TGPicture * GetListTreeIcon (Bool_t open=kFALSE) override;  Return icon for scene. ;  ; TClass * IsA () const override;  ; Bool_t IsChanged () const;  ; void Paint (Option_t *option="""") override;  Paint the scene. Iterate over children and calls PadPaint(). ;  ; void Repaint (Bool_t dropLogicals=kFALSE);  Repaint the scene. ;  ; void RetransHierarchically ();  Entry point for hierarchical transformation update. ;  ; void SetGLScene (TGLScenePad *s);  ; void SetHierarchical (Bool_t h);  ; void SetName (const char *n) override;  Set scene's name. ;  ; Bool_t SingleRnrState () const override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * Get",MatchSource.WIKI,doc/master/classTEveScene.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveScene.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveScene.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveScene.html
Modifiability,inherit,inherited,"stroyElementRenderers (TEveElement *element);  Remove element from the scene. ;  ; void DestroyElementRenderers (TObject *rnrObj);  Remove element represented by object rnrObj from the scene. ;  ; TGLScenePad * GetGLScene () const;  ; Bool_t GetHierarchical () const;  ; const TGPicture * GetListTreeIcon (Bool_t open=kFALSE) override;  Return icon for scene. ;  ; TClass * IsA () const override;  ; Bool_t IsChanged () const;  ; void Paint (Option_t *option="""") override;  Paint the scene. Iterate over children and calls PadPaint(). ;  ; void Repaint (Bool_t dropLogicals=kFALSE);  Repaint the scene. ;  ; void RetransHierarchically ();  Entry point for hierarchical transformation update. ;  ; void SetGLScene (TGLScenePad *s);  ; void SetHierarchical (Bool_t h);  ; void SetName (const char *n) override;  Set scene's name. ;  ; Bool_t SingleRnrState () const override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEv",MatchSource.WIKI,doc/master/classTEveScene.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveScene.html
Security,hash,hash,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (con",MatchSource.WIKI,doc/master/classTEveScene.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveScene.html
Usability,simpl,simply," Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveScene Class ReferenceGraphics » 3D Graphics » Event Display. ; Eve representation of TGLScene. ; The GLScene is owned by this class - it is created on construction time and deleted at destruction.; Normally all objects are positioned directly in global scene-space. By setting the fHierarchical flag, positions of children get calculated by multiplying the transformation matrices of all parents. ; Definition at line 26 of file TEveScene.h. Public Member Functions;  TEveScene (const char *n=""TEveScene"", const char *t="""");  Constructor. ;  ;  TEveScene (TGLScenePad *gl_scene, const char *n=""TEveScene"", const char *t="""");  Constructor. ;  ;  ~TEveScene () override;  Destructor. ;  ; void Changed ();  ; void CollectSceneParents (List_t &scenes) override;  Virtual from TEveElement; here we simply append this scene to the list. ;  ; void DestroyElementRenderers (TEveElement *element);  Remove element from the scene. ;  ; void DestroyElementRenderers (TObject *rnrObj);  Remove element represented by object rnrObj from the scene. ;  ; TGLScenePad * GetGLScene () const;  ; Bool_t GetHierarchical () const;  ; const TGPicture * GetListTreeIcon (Bool_t open=kFALSE) override;  Return icon for scene. ;  ; TClass * IsA () const override;  ; Bool_t IsChanged () const;  ; void Paint (Option_t *option="""") override;  Paint the scene. Iterate over children and calls PadPaint(). ;  ; void Repaint (Bool_t dropLogicals=kFALSE);  Repaint the scene. ;  ; void RetransHierarchically ();  Entry point for hierarchical transformation update. ;  ; void SetGLScene (TGLScenePad *s);  ; void SetHierarchical (Bool_t h);  ; void SetName (const char *n) override;  Set scene's name. ;  ; Bool_t SingleRnrState () const override;  ; void Streamer (TBuffer &) override;",MatchSource.WIKI,doc/master/classTEveScene.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveScene.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveSceneInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSceneInfo.html
Deployability,update,update,");  Set transformation matrix from TGeo's matrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveSceneInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSceneInfo.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveSceneInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSceneInfo.html
Modifiability,inherit,inherited,"ic Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveSceneInfo Class ReferenceGraphics » 3D Graphics » Event Display. ; TEveUtil representation of TGLSceneInfo. ; Definition at line 23 of file TEveSceneInfo.h. Public Member Functions;  TEveSceneInfo (TEveViewer *viewer, TEveScene *scene, TGLSceneInfo *sinfo);  Constructor. ;  ;  ~TEveSceneInfo () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Virtual from TEveElement. ;  ; void AddStamp (UChar_t bits) override;  Override from TEveElement. ;  ; TGLSceneBase * GetGLScene () const;  Return the TGLSceneBase represented by this SceneInfo object. ;  ; TGLSceneInfo * GetGLSceneInfo () const;  ; TEveScene * GetScene () const;  ; TEveViewer * GetViewer () const;  ; Bool_t HandleElementPaste (TEveElement *el) override;  Virtual from TEveElement. ;  ; TClass * IsA () const override;  ; Bool_t SingleRnrState () const override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElement;  TEveElement ();  Default constructor. ;  ;  TEveElement (Color_t &main_color);  Constructor. ;  ;  TEveElement (const TEveElement &e);  Copy constructor. ;  ; virtual ~TEveElement ();  Destructor. ;  ; virtual void AddElement (TEveElement *el);  Add el to the list of children. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TEveElement *parent);  Add this render element into ltree to all items belonging to parent. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Add this element into ltree to an already existing item parent_lti. ;  ; virtual TGListTreeItem * AddIntoListTrees (TEveElement *parent);  Add this render element into all list-trees and all items belonging to parent. ;  ; virtual void AddParent (TEveElement *re);  Add re into the list parents. ;  ; virtual void Annihilate ();  Optimized destruction without check",MatchSource.WIKI,doc/master/classTEveSceneInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSceneInfo.html
Security,hash,hash,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveSceneInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSceneInfo.html
Usability,feedback,feedback,"tual function for retrieving title of the render-element. ;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; virtual TObject * GetObject (const TEveException &eh) const;  Get a TObject associated with this render-element. ;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void IncImpliedSelected ();  Increase element's implied-selection count. Stamp appropriately. ;  ; void In",MatchSource.WIKI,doc/master/classTEveSceneInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSceneInfo.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveSceneList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSceneList.html
Deployability,update,update,". ROOT: TEveSceneList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; TEveSceneList Class ReferenceGraphics » 3D Graphics » Event Display. ; List of Scenes providing common operations on TEveScene collections. ; Definition at line 79 of file TEveScene.h. Public Member Functions;  TEveSceneList (const char *n=""TEveSceneList"", const char *t="""");  Constructor. ;  ;  ~TEveSceneList () override;  ; void DestroyElementRenderers (TEveElement *element);  Loop over all scenes and remove all instances of element from them. ;  ; void DestroyScenes ();  Destroy all scenes and their contents. ;  ; TClass * IsA () const override;  ; void ProcessSceneChanges (Bool_t dropLogicals, TExMap *stampMap);  Loop over all scenes and update them accordingly: ;  ; void RepaintAllScenes (Bool_t dropLogicals);  Repaint all scenes. ;  ; void RepaintChangedScenes (Bool_t dropLogicals);  Repaint scenes that are tagged as changed. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEv",MatchSource.WIKI,doc/master/classTEveSceneList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSceneList.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveSceneList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSceneList.html
Modifiability,inherit,inherited,"bers ; TEveSceneList Class ReferenceGraphics » 3D Graphics » Event Display. ; List of Scenes providing common operations on TEveScene collections. ; Definition at line 79 of file TEveScene.h. Public Member Functions;  TEveSceneList (const char *n=""TEveSceneList"", const char *t="""");  Constructor. ;  ;  ~TEveSceneList () override;  ; void DestroyElementRenderers (TEveElement *element);  Loop over all scenes and remove all instances of element from them. ;  ; void DestroyScenes ();  Destroy all scenes and their contents. ;  ; TClass * IsA () const override;  ; void ProcessSceneChanges (Bool_t dropLogicals, TExMap *stampMap);  Loop over all scenes and update them accordingly: ;  ; void RepaintAllScenes (Bool_t dropLogicals);  Repaint all scenes. ;  ; void RepaintChangedScenes (Bool_t dropLogicals);  Repaint scenes that are tagged as changed. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected cla",MatchSource.WIKI,doc/master/classTEveSceneList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSceneList.html
Security,hash,hash,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveSceneList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSceneList.html
Testability,log,logical,"f file TEveScene.h. ◆ DestroyElementRenderers(). void TEveSceneList::DestroyElementRenderers ; (; TEveElement * ; element). Loop over all scenes and remove all instances of element from them. ; Definition at line 287 of file TEveScene.cxx. ◆ DestroyScenes(). void TEveSceneList::DestroyScenes ; (; ). Destroy all scenes and their contents. ; Tho object with non-zero deny-destroy will still survive. ; Definition at line 247 of file TEveScene.cxx. ◆ IsA(). TClass * TEveSceneList::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveElementList.; Definition at line 100 of file TEveScene.h. ◆ operator=(). TEveSceneList & TEveSceneList::operator= ; (; const TEveSceneList & ; ). private . ◆ ProcessSceneChanges(). void TEveSceneList::ProcessSceneChanges ; (; Bool_t ; dropLogicals, . TExMap * ; stampMap . ). Loop over all scenes and update them accordingly: . if scene is marked as changed, it is repainted;; otherwise iteration is done over the set of stamped elements and their physical/logical shapes are updated accordingly. This allows much finer update granularity without resetting of complex GL-viewer and GL-scene state. ; Definition at line 307 of file TEveScene.cxx. ◆ RepaintAllScenes(). void TEveSceneList::RepaintAllScenes ; (; Bool_t ; dropLogicals). Repaint all scenes. ; Definition at line 276 of file TEveScene.cxx. ◆ RepaintChangedScenes(). void TEveSceneList::RepaintChangedScenes ; (; Bool_t ; dropLogicals). Repaint scenes that are tagged as changed. ; Definition at line 261 of file TEveScene.cxx. ◆ Streamer(). void TEveSceneList::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElementList. ◆ StreamerNVirtual(). void TEveSceneList::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 100 of file TEveScene.h. Libraries for TEveSceneList:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveScene.h; graf3",MatchSource.WIKI,doc/master/classTEveSceneList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSceneList.html
Usability,feedback,feedback,"t;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveSceneList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSceneList.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveSelection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSelection.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveSelection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSelection.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveSelection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSelection.html
Modifiability,inherit,inherited,"bers |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveSelection Class ReferenceGraphics » 3D Graphics » Event Display. ; Make sure there is a SINGLE running TEveSelection for each selection type (select/highlight). ; Definition at line 21 of file TEveSelection.h. Public Types; enum  EPickToSelect { ;   kPS_Ignore; , kPS_Element; , kPS_Projectable; , kPS_Compound; , ;   kPS_PableCompound; , kPS_Master. };  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; ",MatchSource.WIKI,doc/master/classTEveSelection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSelection.html
Security,hash,hash,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveSelection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSelection.html
Usability,feedback,feedback,"t;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveSelection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSelection.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSelectorToEventList.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSelectorToEventList.html
Modifiability,inherit,inherited,". ROOT: TEveSelectorToEventList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveSelectorToEventList Class ReferenceGraphics » 3D Graphics » Event Display. ; TSelector that stores entry numbers of matching TTree entries into an event-list. ; Definition at line 22 of file TEveTreeTools.h. Public Member Functions;  TEveSelectorToEventList (TEventList *evl, const char *sel);  Constructor. ;  ; TClass * IsA () const override;  ; Bool_t Process (Long64_t entry) override;  Process entry. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Version () const override;  ;  Public Member Functions inherited from TSelectorDraw;  TSelectorDraw ();  Default selector constructor. ;  ;  ~TSelectorDraw () override;  Selector destructor. ;  ; void Begin (TTree *tree) override;  Called every time a loop on the tree(s) starts. ;  ; virtual Int_t GetAction () const;  ; virtual bool GetCleanElist () const;  ; virtual Int_t GetDimension () const;  ; virtual Long64_t GetDrawFlag () const;  ; Int_t GetMultiplicity () const;  ; virtual Int_t GetNfill () const;  ; TObject * GetObject () const;  ; TH1 * GetOldHistogram () const;  ; TTreeFormula * GetSelect () const;  ; virtual Long64_t GetSelectedRows () const;  ; TTree * GetTree () const;  ; virtual Double_t * GetV1 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetV2 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetV3 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetV4 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetVal (Int_t i) const;  Return the last values corresponding to the i-th component of the formula being processed (where the component are ':' separated). ;  ; TT",MatchSource.WIKI,doc/master/classTEveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSelectorToEventList.html
Performance,load,loaded,";  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelectorDraw; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TSelector; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TSelector * GetSelector (const char *filename);  The code in filename is loaded (interpreted or compiled, see below), filename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag",MatchSource.WIKI,doc/master/classTEveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSelectorToEventList.html
Security,hash,hash," to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTEveSelectorToEventList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveSelectorToEventList.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveShape.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * Ge",MatchSource.WIKI,doc/master/classTEveShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveShape.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveShape.html
Modifiability,inherit,inherited,"s |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveShape Class ReferenceGraphics » 3D Graphics » Event Display. ; Abstract base-class for 2D/3D shapes. ; It provides:; fill color / transparency, accessible via Get/SetMainColor/Transparency;; frame line color / width;; flag if frame should be drawn;; flag specifying whether frame or whole shape should be emphasised for highlight. . Definition at line 23 of file TEveShape.h. Public Types; typedef std::vector< TEveVector2 >::iterator vVector2_i;  ; typedef std::vector< TEveVector2 > vVector2_t;  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typ",MatchSource.WIKI,doc/master/classTEveShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveShape.html
Security,access,accessible,". ROOT: TEveShape Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveShape Class ReferenceGraphics » 3D Graphics » Event Display. ; Abstract base-class for 2D/3D shapes. ; It provides:; fill color / transparency, accessible via Get/SetMainColor/Transparency;; frame line color / width;; flag if frame should be drawn;; flag specifying whether frame or whole shape should be emphasised for highlight. . Definition at line 23 of file TEveShape.h. Public Types; typedef std::vector< TEveVector2 >::iterator vVector2_i;  ; typedef std::vector< TEveVector2 > vVector2_t;  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL ",MatchSource.WIKI,doc/master/classTEveShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveShape.html
Usability,feedback,feedback,"t;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveShape.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveStraightLineSet.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecte",MatchSource.WIKI,doc/master/classTEveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveStraightLineSet.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveStraightLineSet.html
Modifiability,inherit,inherited,"ger & GetMarkerPlex ();  ; virtual Bool_t GetRnrLines ();  ; virtual Bool_t GetRnrMarkers ();  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint the line-set. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Return class of projected object. ;  ; virtual void SetDepthTest (Bool_t x);  ; void SetLine (int idx, const TEveVector &p1, const TEveVector &p2);  Set line vertices with given index. ;  ; void SetLine (int idx, Float_t x1, Float_t y1, Float_t z1, Float_t x2, Float_t y2, Float_t z2);  Set line vertices with given index. ;  ; void SetLineColor (Color_t col) override;  Set the line color. ;  ; virtual void SetRnrLines (Bool_t x);  ; virtual void SetRnrMarkers (Bool_t x);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteVizParams (std::ostream &out, const TString &var) override;  Write visualization parameters. ;  ;  Public Member Functions inherited from TEveElement;  TEveElement ();  Default constructor. ;  ;  TEveElement (Color_t &main_color);  Constructor. ;  ;  TEveElement (const TEveElement &e);  Copy constructor. ;  ; virtual ~TEveElement ();  Destructor. ;  ; virtual Bool_t AcceptElement (TEveElement *el);  Check if el can be added to this element. ;  ; virtual void AddElement (TEveElement *el);  Add el to the list of children. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TEveElement *parent);  Add this render element into ltree to all items belonging to parent. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Add this element into ltree to an already existing item parent_lti. ;  ; virtual TGListTreeItem * AddIntoListTrees (TEveElement *parent);  Add this render element into all list-trees and all items belonging to parent. ;  ; virtual void AddParent (TEveElement *re);  Add re into the list parents. ;  ; virtual void AddStamp (UChar_t bits);  Add (bitwise or) give",MatchSource.WIKI,doc/master/classTEveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveStraightLineSet.html
Security,hash,hash,"virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveStraightLineSet.html
Usability,feedback,feedback,"tual function for retrieving title of the render-element. ;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; virtual TObject * GetObject (const TEveException &eh) const;  Get a TObject associated with this render-element. ;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveStraightLineSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveStraightLineSet.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveStraightLineSetProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveStraightLineSetProjected.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecte",MatchSource.WIKI,doc/master/classTEveStraightLineSetProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveStraightLineSetProjected.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveStraightLineSetProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveStraightLineSetProjected.html
Modifiability,inherit,inherited,"members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; List of all members ; TEveStraightLineSetProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; Projected replica of a TEveStraightLineSet. ; Definition at line 126 of file TEveStraightLineSet.h. Public Member Functions;  TEveStraightLineSetProjected ();  Constructor. ;  ;  ~TEveStraightLineSetProjected () override;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void SetProjection (TEveProjectionManager *mng, TEveProjectable *model) override;  Set projection manager and model object. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  Callback that actually performs the projection. ;  ;  Public Member Functions inherited from TEveStraightLineSet;  TEveStraightLineSet (const char *n=""StraightLineSet"", const char *t="""");  Constructor. ;  ;  ~TEveStraightLineSet () override;  ; Line_t * AddLine (const TEveVector &p1, const TEveVector &p2);  Add a line. ;  ; Line_t * AddLine (Float_t x1, Float_t y1, Float_t z1, Float_t x2, Float_t y2, Float_t z2);  Add a line. ;  ; Marker_t * AddMarker (const TEveVector &p, Int_t line_id=-1);  Add a marker with given position. ;  ; Marker_t * AddMarker (Float_t x, Float_t y, Float_t z, Int_t line_id=-1);  Add a marker with given position. ;  ; Marker_t * AddMarker (Int_t line_id, Float_t pos);  Add a marker for line with given index on relative position pos. ;  ; void ComputeBBox () override;  Compute bounding-box. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; virtual Bool_t GetDepthTest ();  ; TEveChunkManager & GetLinePlex ();  ; TEveChunkManager & GetMarkerPlex ();  ; virtual Bool_t GetRnrLines ();  ; virtual Bool_t GetRnrMarkers ();  ; void",MatchSource.WIKI,doc/master/classTEveStraightLineSetProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveStraightLineSetProjected.html
Performance,perform,performs,". ROOT: TEveStraightLineSetProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; List of all members ; TEveStraightLineSetProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; Projected replica of a TEveStraightLineSet. ; Definition at line 126 of file TEveStraightLineSet.h. Public Member Functions;  TEveStraightLineSetProjected ();  Constructor. ;  ;  ~TEveStraightLineSetProjected () override;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void SetProjection (TEveProjectionManager *mng, TEveProjectable *model) override;  Set projection manager and model object. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  Callback that actually performs the projection. ;  ;  Public Member Functions inherited from TEveStraightLineSet;  TEveStraightLineSet (const char *n=""StraightLineSet"", const char *t="""");  Constructor. ;  ;  ~TEveStraightLineSet () override;  ; Line_t * AddLine (const TEveVector &p1, const TEveVector &p2);  Add a line. ;  ; Line_t * AddLine (Float_t x1, Float_t y1, Float_t z1, Float_t x2, Float_t y2, Float_t z2);  Add a line. ;  ; Marker_t * AddMarker (const TEveVector &p, Int_t line_id=-1);  Add a marker with given position. ;  ; Marker_t * AddMarker (Float_t x, Float_t y, Float_t z, Int_t line_id=-1);  Add a marker with given position. ;  ; Marker_t * AddMarker (Int_t line_id, Float_t pos);  Add a marker for line with given index on relative position pos. ;  ; void ComputeBBox () override;  Compute bounding-box. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; virtual Bool_t GetDepthTest ();  ; TEveCh",MatchSource.WIKI,doc/master/classTEveStraightLineSetProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveStraightLineSetProjected.html
Security,hash,hash,"virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveStraightLineSetProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveStraightLineSetProjected.html
Usability,feedback,feedback,"tual function for retrieving title of the render-element. ;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; virtual TObject * GetObject (const TEveException &eh) const;  Get a TObject associated with this render-element. ;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveStraightLineSetProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveStraightLineSetProjected.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveText.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveText.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveText.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveText.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveText.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveText.html
Modifiability,inherit,inherited,"const;  ; Int_t GetFontSize () const;  ; Bool_t GetLighting () const;  ; const TGPicture * GetListTreeIcon (Bool_t open=kFALSE) override;  Return TEveText icon. ;  ; Float_t GetPolygonOffset (Int_t i) const;  ; const char * GetText () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this object. Only direct rendering is supported. ;  ; void SetAutoLighting (Bool_t isOn);  ; void SetExtrude (Float_t x);  ; void SetFontFile (const char *name);  Set font file regarding to static TGLFontManager fgFontFileArray. ;  ; void SetFontFile (Int_t file);  ; void SetFontMode (Int_t mode);  Set FTFont class ID. ;  ; void SetFontSize (Int_t size, Bool_t validate=kTRUE);  Set valid font size. ;  ; void SetLighting (Bool_t isOn);  ; void SetPolygonOffset (Float_t factor, Float_t units);  Set the scale and units used to calculate depth values. ;  ; void SetText (const char *t);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElement;  TEveElement ();  Default constructor. ;  ;  TEveElement (Color_t &main_color);  Constructor. ;  ;  TEveElement (const TEveElement &e);  Copy constructor. ;  ; virtual ~TEveElement ();  Destructor. ;  ; virtual Bool_t AcceptElement (TEveElement *el);  Check if el can be added to this element. ;  ; virtual void AddElement (TEveElement *el);  Add el to the list of children. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TEveElement *parent);  Add this render element into ltree to all items belonging to parent. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TGListTreeItem *parent_lti);  Add this element into ltree to an already existing item parent_lti. ;  ; virtual TGListTreeItem * AddIntoListTrees (TEveElement *parent);  Add this render element into all list-trees and all items belonging to parent. ;  ; virtual void AddParent (TEveElement *re);  Add re into the list paren",MatchSource.WIKI,doc/master/classTEveText.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveText.html
Security,validat,validate,"of file TEveText.h. Public Member Functions;  TEveText (const char *txt="""");  Constructor. ;  ;  ~TEveText () override;  ; void ComputeBBox () override;  Fill bounding-box information. ;  ; Bool_t GetAutoLighting () const;  ; Float_t GetExtrude () const;  ; Int_t GetFontFile () const;  ; Int_t GetFontMode () const;  ; Int_t GetFontSize () const;  ; Bool_t GetLighting () const;  ; const TGPicture * GetListTreeIcon (Bool_t open=kFALSE) override;  Return TEveText icon. ;  ; Float_t GetPolygonOffset (Int_t i) const;  ; const char * GetText () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this object. Only direct rendering is supported. ;  ; void SetAutoLighting (Bool_t isOn);  ; void SetExtrude (Float_t x);  ; void SetFontFile (const char *name);  Set font file regarding to static TGLFontManager fgFontFileArray. ;  ; void SetFontFile (Int_t file);  ; void SetFontMode (Int_t mode);  Set FTFont class ID. ;  ; void SetFontSize (Int_t size, Bool_t validate=kTRUE);  Set valid font size. ;  ; void SetLighting (Bool_t isOn);  ; void SetPolygonOffset (Float_t factor, Float_t units);  Set the scale and units used to calculate depth values. ;  ; void SetText (const char *t);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveElement;  TEveElement ();  Default constructor. ;  ;  TEveElement (Color_t &main_color);  Constructor. ;  ;  TEveElement (const TEveElement &e);  Copy constructor. ;  ; virtual ~TEveElement ();  Destructor. ;  ; virtual Bool_t AcceptElement (TEveElement *el);  Check if el can be added to this element. ;  ; virtual void AddElement (TEveElement *el);  Add el to the list of children. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TEveElement *parent);  Add this render element into ltree to all items belonging to parent. ;  ; virtual TGListTreeItem * AddIntoListTree (TGListTree *ltree, TGListTreeIte",MatchSource.WIKI,doc/master/classTEveText.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveText.html
Usability,feedback,feedback,"Virtual function for retrieving name of the element. ;  ; virtual const char * GetElementTitle () const;  Virtual function for retrieving title of the render-element. ;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; virtual TObject * GetObject (const TEveException &eh) const;  Get a TObject associated with this render-element. ;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveText.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveText.html
Availability,error,error,"ault action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () cons",MatchSource.WIKI,doc/master/classTEveTrack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrack.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from TPointSet3D;  TPointSet3D ();  ;  TPointSet3D (const TPointSet3D &t);  Copy constructor. ;  ;  TPointSet3D (Int_t n, Double_t *p, Marker_t m=1, Option_t *opt="""");  ;  TPointSet3D (Int_t n, Float_t *p, Marker_t m=1, Option_t *opt="""");  ;  TPointSet3D (Int_t n, Marker_t m=1, Option_t *opt="""");  ;  ~TPointSet3D () override;  Destructor. ;  ; void ClearIds ();  Clears the id-array. If ids are owned the TObjects are deleted. ;  ; void ComputeBBox () override;  Compute the bounding box of this points set. ;  ; Bool_t GetOwnIds () const;  ; TObject * GetPointId (Int_t n) const;  ; TClass * IsA () const override;  ; TPointSet3D & operator= (const TPointSet3D &t);  Assignment operator. ",MatchSource.WIKI,doc/master/classTEveTrack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrack.html
Energy Efficiency,reduce,reduced,". ROOT: TEveTrack Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveTrack Class ReferenceGraphics » 3D Graphics » Event Display. ; Visual representation of a track. ; If member fDpDs is set, the momentum is reduced on all path-marks that do not fix the momentum according to the distance travelled from the previous pathmark. ; Definition at line 32 of file TEveTrack.h. Public Types; enum  EBreakProjectedTracks_e { kBPTDefault; , kBPTAlways; , kBPTNever; };  ; typedef vPathMark_t::const_iterator vPathMark_ci;  ; typedef vPathMark_t::iterator vPathMark_i;  ; typedef std::vector< TEvePathMarkD > vPathMark_t;  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsRe",MatchSource.WIKI,doc/master/classTEveTrack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrack.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveTrack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrack.html
Modifiability,inherit,inherited,"mber Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveTrack Class ReferenceGraphics » 3D Graphics » Event Display. ; Visual representation of a track. ; If member fDpDs is set, the momentum is reduced on all path-marks that do not fix the momentum according to the distance travelled from the previous pathmark. ; Definition at line 32 of file TEveTrack.h. Public Types; enum  EBreakProjectedTracks_e { kBPTDefault; , kBPTAlways; , kBPTNever; };  ; typedef vPathMark_t::const_iterator vPathMark_ci;  ; typedef vPathMark_t::iterator vPathMark_i;  ; typedef std::vector< TEvePathMarkD > vPathMark_t;  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13",MatchSource.WIKI,doc/master/classTEveTrack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrack.html
Performance,perform,performed," Int_t ; label, . TEveTrackPropagator * ; prop = nullptr . ). Constructor from TParticle. ; Definition at line 68 of file TEveTrack.cxx. ◆ TEveTrack() [3/6]. TEveTrack::TEveTrack ; (; TEveMCTrack * ; t, . TEveTrackPropagator * ; prop = nullptr . ). Definition at line 100 of file TEveTrack.cxx. ◆ TEveTrack() [4/6]. TEveTrack::TEveTrack ; (; TEveRecTrack * ; t, . TEveTrackPropagator * ; prop = nullptr . ). Constructor from TEveRecTrack<float> reconstructed track. ; It is recommended to use constructor with TEveRecTrack<double> since TEveTrackPropagator operates with double type. ; Definition at line 163 of file TEveTrack.cxx. ◆ TEveTrack() [5/6]. TEveTrack::TEveTrack ; (; TEveRecTrackD * ; t, . TEveTrackPropagator * ; prop = nullptr . ). Constructor from TEveRecTrack<double> reconstructed track. ; Definition at line 134 of file TEveTrack.cxx. ◆ TEveTrack() [6/6]. TEveTrack::TEveTrack ; (; const TEveTrack & ; t). Copy constructor. ; Track parameters are copied but the extrapolation is not performed so you should still call MakeTrack() to do that. If points of 't' are locked, they are cloned. ; Definition at line 193 of file TEveTrack.cxx. ◆ ~TEveTrack(). TEveTrack::~TEveTrack ; (; ). override . Destructor. ; Definition at line 222 of file TEveTrack.cxx. Member Function Documentation. ◆ AddPathMark() [1/2]. void TEveTrack::AddPathMark ; (; const TEvePathMark & ; pm). inline . Definition at line 108 of file TEveTrack.h. ◆ AddPathMark() [2/2]. void TEveTrack::AddPathMark ; (; const TEvePathMarkD & ; pm). inline . Definition at line 107 of file TEveTrack.h. ◆ Class(). static TClass * TEveTrack::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEveTrack::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveTrack::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 130 of file TEveTrack.h. ◆ ComputeBBox(). void TEveTrack::ComputeBBo",MatchSource.WIKI,doc/master/classTEveTrack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrack.html
Security,hash,hash,", e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTEveTrack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrack.html
Usability,feedback,feedback,"he number of times deny-destroy has been requested on the element. ;  ; Bool_t GetDestroyOnZeroRefCnt () const;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveTrack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrack.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackList.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * Ge",MatchSource.WIKI,doc/master/classTEveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackList.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackList.html
Modifiability,inherit,inherited,") override;  Set marker style for the list and the elements. ;  ; virtual void SetMarkerStyle (Style_t s, TEveElement *el);  Set marker style for children of el. ;  ; void SetPropagator (TEveTrackPropagator *prop);  Set default propagator for tracks. ;  ; void SetRecurse (Bool_t x);  ; void SetRnrLine (Bool_t rnr);  Set rendering of track as line for the list and the elements. ;  ; void SetRnrLine (Bool_t rnr, TEveElement *el);  Set rendering of track as line for children of el. ;  ; void SetRnrPoints (Bool_t r);  Set rendering of track as points for the list and the elements. ;  ; void SetRnrPoints (Bool_t r, TEveElement *el);  Set rendering of track as points for children of el. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteVizParams (std::ostream &out, const TString &var) override;  Write visualization parameters. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; void SetChildClass (TClass *c);  ; void SetElementName (const char *name) override;  Virtual function for setting of name of an element. ;  ; void SetElementNameTitle (const char *na",MatchSource.WIKI,doc/master/classTEveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackList.html
Safety,detect,detected," TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void FindMomentumLimits (TEveElement *el, Bool_t recurse=kTRUE);  Loop over track elements of argument el and find highest pT and p. ;  ; Double_t RoundMomentumLimit (Double_t x);  Round the momentum limit up to a nice value. ;  ; void SanitizeMinMaxCuts ();  Set Min/Max cuts so that they are within detected limits. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t fLimP;  ; Double_t fLimPt;  ; Double_t fMaxP;  ; Double_t fMaxPt;  ; Double_t fMinP;  ; Double_t fMinPt;  ; TEveTrackPropagator * fPropagator;  ; Bool_t fRecurse;  ; Bool_t fRnrLine;  ; Bool_t fRnrPoints;  ;  Protected Attributes inherited from TEveElementList; TClass * fChildClass;  ; Color_t fColor;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bo",MatchSource.WIKI,doc/master/classTEveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackList.html
Security,hash,hash,". ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackList.html
Usability,feedback,feedback,"t;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveTrackList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackList.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveTrackListProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackListProjected.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * Ge",MatchSource.WIKI,doc/master/classTEveTrackListProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackListProjected.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveTrackListProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackListProjected.html
Modifiability,inherit,inheriting,". ROOT: TEveTrackListProjected Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; List of all members ; TEveTrackListProjected Class ReferenceGraphics » 3D Graphics » Event Display. ; Specialization of TEveTrackList for holding TEveTrackProjected objects. ; Definition at line 60 of file TEveTrackProjected.h. Public Member Functions;  TEveTrackListProjected ();  Default constructor. ;  ;  ~TEveTrackListProjected () override;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void SetDepth (Float_t d) override;  Set depth of all children inheriting from TEveTrackProjected. ;  ; virtual void SetDepth (Float_t d, TEveElement *el);  Set depth of all children of el inheriting from TEveTrackProjected. ;  ; void SetProjection (TEveProjectionManager *proj, TEveProjectable *model) override;  This is virtual method from base-class TEveProjected. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  ;  Public Member Functions inherited from TEveTrackList;  TEveTrackList (const char *name, TEveTrackPropagator *prop=nullptr);  Constructor. ;  ;  TEveTrackList (TEveTrackPropagator *prop=nullptr);  Constructor. ;  ;  ~TEveTrackList () override;  Destructor. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; void FindMomentumLimits (Bool_t recurse=kTRUE);  Loop over children and find highest pT and p of contained TEveTracks. ;  ; TEveTrack * FindTrackByIndex (Int_t index);  Find track by index, select it and display it in the editor. ;  ; TEveTrack * FindTrackByLabel (Int_t label);  Find track by label, select it and display it in the editor. ;  ; Double_t",MatchSource.WIKI,doc/master/classTEveTrackListProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackListProjected.html
Safety,detect,detected,"g marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveProjected; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void SetDepthLocal (Float_t d) override;  This is not needed for functionality as SetDepth(Float_t d) is overriden – but SetDepthLocal() is abstract. ;  ;  Protected Member Functions inherited from TEveTrackList; void FindMomentumLimits (TEveElement *el, Bool_t recurse=kTRUE);  Loop over track elements of argument el and find highest pT and p. ;  ; Double_t RoundMomentumLimit (Double_t x);  Round the momentum limit up to a nice value. ;  ; void SanitizeMinMaxCuts ();  Set Min/Max cuts so that they are within detected limits. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TEveProjected; void SetDepthCommon (Float_t d, TEveElement *el, Float_t *bbox);  Utility function to update the z-values of the bounding-box. ;  . Private Member Functions;  TEveTrackListProjected (const TEveTrackListProjected &);  ; TEveTrackListProjected & operator= (const TEveTrackListProjected &);  . Additional Inherited Members;  Public Types inherited from TEveElemen",MatchSource.WIKI,doc/master/classTEveTrackListProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackListProjected.html
Security,hash,hash,". ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveTrackListProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackListProjected.html
Usability,feedback,feedback,"t;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveTrackListProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackListProjected.html
Availability,error,error,"ault action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () cons",MatchSource.WIKI,doc/master/classTEveTrackProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackProjected.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from TPointSet3D;  TPointSet3D ();  ;  TPointSet3D (const TPointSet3D &t);  Copy constructor. ;  ;  TPointSet3D (Int_t n, Double_t *p, Marker_t m=1, Option_t *opt="""");  ;  TPointSet3D (Int_t n, Float_t *p, Marker_t m=1, Option_t *opt="""");  ;  TPointSet3D (Int_t n, Marker_t m=1, Option_t *opt="""");  ;  ~TPointSet3D () override;  Destructor. ;  ; void ClearIds ();  Clears the id-array. If ids are owned the TObjects are deleted. ;  ; void ComputeBBox () override;  Compute the bounding box of this points set. ;  ; Bool_t GetOwnIds () const;  ; TObject * GetPointId (Int_t n) const;  ; TClass * IsA () const override;  ; TPointSet3D & operator= (const TPointSet3D &t);  Assignment operator. ",MatchSource.WIKI,doc/master/classTEveTrackProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackProjected.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveTrackProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackProjected.html
Modifiability,inherit,inherited,"3D Graphics » Event Display. ; Projected copy of a TEveTrack. ; Definition at line 19 of file TEveTrackProjected.h. Public Member Functions;  TEveTrackProjected ();  Default constructor. ;  ;  ~TEveTrackProjected () override;  ; TEveElement * GetProjectedAsElement () override;  Returns this projected dynamic-casted to TEveElement. ;  ; TClass * IsA () const override;  ; void MakeTrack (Bool_t recurse=kTRUE) override;  Calculate the points of the track for drawing. ;  ; void PrintLineSegments ();  Print line segments info. ;  ; void SecSelected (TEveTrack *) override;  Virtual method from from base-class TEveTrack. ;  ; void SetProjection (TEveProjectionManager *mng, TEveProjectable *model) override;  This is virtual method from base-class TEveProjected. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateProjection () override;  Virtual method from base-class TEveProjected. ;  ;  Public Member Functions inherited from TEveTrack;  TEveTrack ();  Default constructor. ;  ;  TEveTrack (const TEveTrack &t);  Copy constructor. ;  ;  TEveTrack (TEveMCTrack *t, TEveTrackPropagator *prop=nullptr);  ;  TEveTrack (TEveRecTrack *t, TEveTrackPropagator *prop=nullptr);  Constructor from TEveRecTrack<float> reconstructed track. ;  ;  TEveTrack (TEveRecTrackD *t, TEveTrackPropagator *prop=nullptr);  Constructor from TEveRecTrack<double> reconstructed track. ;  ;  TEveTrack (TParticle *t, Int_t label, TEveTrackPropagator *prop=nullptr);  Constructor from TParticle. ;  ;  ~TEveTrack () override;  Destructor. ;  ; void AddPathMark (const TEvePathMark &pm);  ; void AddPathMark (const TEvePathMarkD &pm);  ; void ComputeBBox () override;  Compute the bounding box of the track. ;  ; void CopyVizParams (const TEveElement *el) override;  Copy visualization parameters from element el. ;  ; Int_t GetCharge () const;  ; Double_t GetDpDs () const;  ; const TEveVectorD & GetEndMomentum () const;  ; Int_t GetIndex () const;  ; Int",MatchSource.WIKI,doc/master/classTEveTrackProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackProjected.html
Security,hash,hash,", e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTEveTrackProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackProjected.html
Usability,feedback,feedback,"he number of times deny-destroy has been requested on the element. ;  ; Bool_t GetDestroyOnZeroRefCnt () const;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveTrackProjected.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackProjected.html
Availability,error,error,");  TEveVectorF wrapper. ;  ; virtual Bool_t GoToVertex (TEveVectorD &v, TEveVectorD &p);  Propagate particle with momentum p to vertex v. ;  ; Bool_t GoToVertex (TEveVectorF &v, TEveVectorF &p);  TEveVectorF wrapper. ;  ; void InitTrack (const TEveVectorD &v, Int_t charge);  Initialize internal data-members for given particle parameters. ;  ; void InitTrack (const TEveVectorF &v, Int_t charge);  TEveVectorF wrapper. ;  ; Bool_t IntersectPlane (const TEveVectorD &p, const TEveVectorD &point, const TEveVectorD &normal, TEveVectorD &itsect);  Find intersection of currently propagated track with a plane. ;  ; TClass * IsA () const override;  ; void OnZeroRefCount () override;  Virtual from TEveRefBackPtr - track reference count has reached zero. ;  ; void PrintMagField (Double_t x, Double_t y, Double_t z) const;  ; TMarker & RefFVAtt ();  ; TMarker & RefPMAtt ();  ; TMarker & RefPTBAtt ();  ; void ResetTrack ();  Reset cache holding particle trajectory. ;  ; void SetDelta (Double_t x);  Set maximum error and rebuild tracks. ;  ; void SetEditPathMarks (Bool_t x);  ; void SetFitCluster2Ds (Bool_t x);  Set 2D-cluster fitting and rebuild tracks. ;  ; void SetFitDaughters (Bool_t x);  Set daughter creation point fitting and rebuild tracks. ;  ; void SetFitDecay (Bool_t x);  Set decay fitting and rebuild tracks. ;  ; void SetFitLineSegments (Bool_t x);  Set line segment fitting and rebuild tracks. ;  ; void SetFitReferences (Bool_t x);  Set track-reference fitting and rebuild tracks. ;  ; void SetMagField (Double_t b);  ; void SetMagField (Double_t bX, Double_t bY, Double_t bZ);  Set constant magnetic field and rebuild tracks. ;  ; void SetMagFieldObj (TEveMagField *field, Bool_t own_field=kTRUE);  Set constant magnetic field and rebuild tracks. ;  ; void SetMaxAng (Double_t x);  Set maximum step angle and rebuild tracks. ;  ; void SetMaxOrbs (Double_t x);  Set maximum number of orbits and rebuild tracks. ;  ; void SetMaxR (Double_t x);  Set maximum radius and rebuild tracks",MatchSource.WIKI,doc/master/classTEveTrackPropagator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackPropagator.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveTrackPropagator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackPropagator.html
Energy Efficiency,charge,charge," ; Bool_t GetRnrDecay () const;  ; Bool_t GetRnrFV () const;  ; Bool_t GetRnrPTBMarkers () const;  ; Bool_t GetRnrReferences () const;  ; EStepper_e GetStepper () const;  ; Double_t GetTrackLength (Int_t start_point=0, Int_t end_point=-1) const;  Calculate track length from start_point to end_point. ;  ; virtual void GoToBounds (TEveVectorD &p);  Propagate particle to bounds. ;  ; void GoToBounds (TEveVectorF &p);  TEveVectorF wrapper. ;  ; virtual Bool_t GoToLineSegment (const TEveVectorD &s, const TEveVectorD &r, TEveVectorD &p);  Propagate particle with momentum p to line with start point s and vector r to the second point. ;  ; Bool_t GoToLineSegment (const TEveVectorF &s, const TEveVectorF &r, TEveVectorF &p);  TEveVectorF wrapper. ;  ; virtual Bool_t GoToVertex (TEveVectorD &v, TEveVectorD &p);  Propagate particle with momentum p to vertex v. ;  ; Bool_t GoToVertex (TEveVectorF &v, TEveVectorF &p);  TEveVectorF wrapper. ;  ; void InitTrack (const TEveVectorD &v, Int_t charge);  Initialize internal data-members for given particle parameters. ;  ; void InitTrack (const TEveVectorF &v, Int_t charge);  TEveVectorF wrapper. ;  ; Bool_t IntersectPlane (const TEveVectorD &p, const TEveVectorD &point, const TEveVectorD &normal, TEveVectorD &itsect);  Find intersection of currently propagated track with a plane. ;  ; TClass * IsA () const override;  ; void OnZeroRefCount () override;  Virtual from TEveRefBackPtr - track reference count has reached zero. ;  ; void PrintMagField (Double_t x, Double_t y, Double_t z) const;  ; TMarker & RefFVAtt ();  ; TMarker & RefPMAtt ();  ; TMarker & RefPTBAtt ();  ; void ResetTrack ();  Reset cache holding particle trajectory. ;  ; void SetDelta (Double_t x);  Set maximum error and rebuild tracks. ;  ; void SetEditPathMarks (Bool_t x);  ; void SetFitCluster2Ds (Bool_t x);  Set 2D-cluster fitting and rebuild tracks. ;  ; void SetFitDaughters (Bool_t x);  Set daughter creation point fitting and rebuild tracks. ;  ; void SetFitDecay (Bool",MatchSource.WIKI,doc/master/classTEveTrackPropagator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackPropagator.html
Integrability,wrap,wrapper,"tFitDaughters () const;  ; Bool_t GetFitDecay () const;  ; Bool_t GetFitLineSegments () const;  ; Bool_t GetFitReferences () const;  ; const std::vector< TEveVector4D > & GetLastPoints () const;  ; TEveVectorD GetMagField (Double_t x, Double_t y, Double_t z);  ; Double_t GetMaxAng () const;  ; Double_t GetMaxOrbs () const;  ; Double_t GetMaxR () const;  ; Double_t GetMaxStep () const;  ; Double_t GetMaxZ () const;  ; Double_t GetMinAng () const;  Get maximum step angle. ;  ; UChar_t GetProjTrackBreaking () const;  ; Bool_t GetRnrCluster2Ds () const;  ; Bool_t GetRnrDaughters () const;  ; Bool_t GetRnrDecay () const;  ; Bool_t GetRnrFV () const;  ; Bool_t GetRnrPTBMarkers () const;  ; Bool_t GetRnrReferences () const;  ; EStepper_e GetStepper () const;  ; Double_t GetTrackLength (Int_t start_point=0, Int_t end_point=-1) const;  Calculate track length from start_point to end_point. ;  ; virtual void GoToBounds (TEveVectorD &p);  Propagate particle to bounds. ;  ; void GoToBounds (TEveVectorF &p);  TEveVectorF wrapper. ;  ; virtual Bool_t GoToLineSegment (const TEveVectorD &s, const TEveVectorD &r, TEveVectorD &p);  Propagate particle with momentum p to line with start point s and vector r to the second point. ;  ; Bool_t GoToLineSegment (const TEveVectorF &s, const TEveVectorF &r, TEveVectorF &p);  TEveVectorF wrapper. ;  ; virtual Bool_t GoToVertex (TEveVectorD &v, TEveVectorD &p);  Propagate particle with momentum p to vertex v. ;  ; Bool_t GoToVertex (TEveVectorF &v, TEveVectorF &p);  TEveVectorF wrapper. ;  ; void InitTrack (const TEveVectorD &v, Int_t charge);  Initialize internal data-members for given particle parameters. ;  ; void InitTrack (const TEveVectorF &v, Int_t charge);  TEveVectorF wrapper. ;  ; Bool_t IntersectPlane (const TEveVectorD &p, const TEveVectorD &point, const TEveVectorD &normal, TEveVectorD &itsect);  Find intersection of currently propagated track with a plane. ;  ; TClass * IsA () const override;  ; void OnZeroRefCount () override;  Virt",MatchSource.WIKI,doc/master/classTEveTrackPropagator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackPropagator.html
Modifiability,inherit,inherited,"e tracks can be recreated when the parameters change.; TEveTrackList has Get/Set methods for RnrStlye. TEveTrackEditor and TEveTrackListEditor provide editor access.; Enum EProjTrackBreaking_e and member fProjTrackBreaking specify whether 2D projected tracks get broken into several segments when the projected space consists of separate domains (like Rho-Z). The track-breaking is enabled by default. ; Definition at line 121 of file TEveTrackPropagator.h. Classes; struct  Helix_t;  . Public Types; enum  EProjTrackBreaking_e { kPTB_Break; , kPTB_UseFirstPointPos; , kPTB_UseLastPointPos; };  ; enum  EStepper_e { kHelix; , kRungeKutta; };  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i;  ; typedef sLTI_t::reverse_iterator sLTI_ri;  ; typedef std::set< TEveListTreeInfo > sLTI_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEv",MatchSource.WIKI,doc/master/classTEveTrackPropagator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackPropagator.html
Performance,cache,cache," << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TEveProjectable; typedef std::list< TEveProjected * >::iterator ProjList_i;  ; typedef std::list< TEveProjected * > ProjList_t;  . Public Member Functions;  TEveTrackPropagator (const char *n=""TEveTrackPropagator"", const char *t="""", TEveMagField *field=nullptr, Bool_t own_field=kTRUE);  Default constructor. ;  ;  ~TEveTrackPropagator () override;  Destructor. ;  ; void CheckReferenceCount (const TEveException &eh=""TEveElement::CheckReferenceCount "") override;  Check reference count - virtual from TEveElement. ;  ; void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE) override;  Element-change notification. ;  ; void FillPointSet (TEvePointSet *ps) const;  Reset ps and populate it with points in propagation cache. ;  ; Int_t GetCurrentPoint () const;  Get index of current point on track. ;  ; Double_t GetDelta () const;  ; Bool_t GetEditPathMarks () const;  ; Bool_t GetFitCluster2Ds () const;  ; Bool_t GetFitDaughters () const;  ; Bool_t GetFitDecay () const;  ; Bool_t GetFitLineSegments () const;  ; Bool_t GetFitReferences () const;  ; const std::vector< TEveVector4D > & GetLastPoints () const;  ; TEveVectorD GetMagField (Double_t x, Double_t y, Double_t z);  ; Double_t GetMaxAng () const;  ; Double_t GetMaxOrbs () const;  ; Double_t GetMaxR () const;  ; Double_t GetMaxStep () const;  ; Double_t GetMaxZ () const;  ; Double_t GetMinAng () const;  Get maximum step angle. ;  ; UChar_t GetProjTrackBreaking () const;  ; Bool_t GetRnrCluster2Ds () const;  ; Bool_t GetRnrDaughters () const;  ; Bool_t GetRnrDecay () const;  ; Bool_t GetRnrFV () const;  ; Bool_t GetRnrPTBMarkers () const;  ; Bool_t GetRnrReferences () const;  ; EStepper_e GetStepper",MatchSource.WIKI,doc/master/classTEveTrackPropagator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackPropagator.html
Security,access,access,". ROOT: TEveTrackPropagator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveTrackPropagator Class ReferenceGraphics » 3D Graphics » Event Display. ; Holding structure for a number of track rendering parameters. ; Calculates path taking into account the parameters.; NOTE: Magnetic field direction convention is inverted.; This is decoupled from TEveTrack/TEveTrackList to allow sharing of the Propagator among several instances. Back references are kept so the tracks can be recreated when the parameters change.; TEveTrackList has Get/Set methods for RnrStlye. TEveTrackEditor and TEveTrackListEditor provide editor access.; Enum EProjTrackBreaking_e and member fProjTrackBreaking specify whether 2D projected tracks get broken into several segments when the projected space consists of separate domains (like Rho-Z). The track-breaking is enabled by default. ; Definition at line 121 of file TEveTrackPropagator.h. Classes; struct  Helix_t;  . Public Types; enum  EProjTrackBreaking_e { kPTB_Break; , kPTB_UseFirstPointPos; , kPTB_UseLastPointPos; };  ; enum  EStepper_e { kHelix; , kRungeKutta; };  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0 )); , kCBTransBBox = (1ULL << ( 1 )); , kCBObjProps = (1ULL << ( 2 )); , kCBVisibility = (1ULL << ( 3 )); };  ; typedef void(TEveElement::* ImplySelect_foo) ();  ; typedef List_t::const_iterator List_ci;  ; typedef List_t::iterator List_i;  ; typedef std::list< TEveElement * > List_t;  ; typedef void(TEveElement::* Select_foo) (Bool_t);  ; typedef Set_t::const_iterator Set_ci;  ; typedef Set_t::iterator Set_i;  ; typedef std::set< TEveElement * > Set_t;  ; typedef sLTI_t::iterator sLTI_i; ",MatchSource.WIKI,doc/master/classTEveTrackPropagator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackPropagator.html
Usability,feedback,feedback,"t;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveTrackPropagator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrackPropagator.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrans.html
Deployability,continuous,continuous,". ROOT: TEveTrans Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TEveTrans Class ReferenceGraphics » 3D Graphics » Event Display. ; TEveTrans is a 4x4 transformation matrix for homogeneous coordinates stored internally in a column-major order to allow direct usage by GL. ; The element type is Double32_t as statically the floats would be precise enough but continuous operations on the matrix must retain precision of column vectors.; Cartan angles are stored in fA[1-3] (+z, -y, +x). They are recalculated on demand.; Direct element access (first two should be used with care):; operator[i] direct access to elements, i:0->15; CM(i,j) element 4*j + i; i,j:0->3 { CM ~ c-matrix }; operator(i,j) element 4*(j-1) + i - 1 i,j:1->4. Column-vector access: USet Get/SetBaseVec(), Get/SetPos() and Arr[XYZT]() methods.; For all methods taking the matrix indices: 1->X, 2->Y, 3->Z; 4->Position (if applicable). 0 reserved for time.; Shorthands in method-names: LF ~ LocalFrame; PF ~ ParentFrame; IP ~ InPlace ; Definition at line 26 of file TEveTrans.h. Public Member Functions;  TEveTrans ();  Default constructor. ;  ;  TEveTrans (const Double_t arr[16]);  Constructor. ;  ;  TEveTrans (const Float_t arr[16]);  Constructor. ;  ;  TEveTrans (const TEveTrans &t);  Constructor. ;  ;  ~TEveTrans () override;  ; Double_t * Array ();  ; const Double_t * Array () const;  ; Double_t * ArrT ();  ; const Double_t * ArrT () const;  ; Double_t * ArrX ();  ; const Double_t * ArrX () const;  ; Double_t * ArrY ();  ; const Double_t * ArrY () const;  ; Double_t * ArrZ ();  ; const Double_t * ArrZ () const;  ; Double_t & CM (Int_t i, Int_t j);  ; Double_t CM (Int_t i, Int_t j) const;  ; TVector3 GetBaseVec (Int_t b) const;  Get base-vector with index b. ;  ; void GetBaseVec (Int_t b, TVect",MatchSource.WIKI,doc/master/classTEveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrans.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrans.html
Modifiability,inherit,inherited,"d SetupFromToVec (const TEveVector &from, const TEveVector &to);  A function for creating a rotation matrix that rotates a vector called ""from"" into another vector called ""to"". ;  ; void SetupRotation (Int_t i, Int_t j, Double_t f);  Setup the matrix as an elementary rotation. ;  ; void SetUseTrans (Bool_t v);  ; void Streamer (TBuffer &) override;  Stream an object of class TEveTrans. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TransposeRotationPart ();  Transpose 3x3 rotation sub-matrix. ;  ; void UnitRot ();  Reset rotation part of the matrix to unity. ;  ; void UnitTrans ();  Reset matrix to unity. ;  ; Double_t Unscale ();  Remove scaling, make all base vectors of unit length. ;  ; void Unscale (Double_t &sx, Double_t &sy, Double_t &sz);  Remove scaling, make all base vectors of unit length. ;  ; void ZeroTrans (Double_t w=1.0);  Reset matrix to zero, only the perspective scaling is set to w (1 by default). ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classTEveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrans.html
Security,access,access,". ROOT: TEveTrans Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TEveTrans Class ReferenceGraphics » 3D Graphics » Event Display. ; TEveTrans is a 4x4 transformation matrix for homogeneous coordinates stored internally in a column-major order to allow direct usage by GL. ; The element type is Double32_t as statically the floats would be precise enough but continuous operations on the matrix must retain precision of column vectors.; Cartan angles are stored in fA[1-3] (+z, -y, +x). They are recalculated on demand.; Direct element access (first two should be used with care):; operator[i] direct access to elements, i:0->15; CM(i,j) element 4*j + i; i,j:0->3 { CM ~ c-matrix }; operator(i,j) element 4*(j-1) + i - 1 i,j:1->4. Column-vector access: USet Get/SetBaseVec(), Get/SetPos() and Arr[XYZT]() methods.; For all methods taking the matrix indices: 1->X, 2->Y, 3->Z; 4->Position (if applicable). 0 reserved for time.; Shorthands in method-names: LF ~ LocalFrame; PF ~ ParentFrame; IP ~ InPlace ; Definition at line 26 of file TEveTrans.h. Public Member Functions;  TEveTrans ();  Default constructor. ;  ;  TEveTrans (const Double_t arr[16]);  Constructor. ;  ;  TEveTrans (const Float_t arr[16]);  Constructor. ;  ;  TEveTrans (const TEveTrans &t);  Constructor. ;  ;  ~TEveTrans () override;  ; Double_t * Array ();  ; const Double_t * Array () const;  ; Double_t * ArrT ();  ; const Double_t * ArrT () const;  ; Double_t * ArrX ();  ; const Double_t * ArrX () const;  ; Double_t * ArrY ();  ; const Double_t * ArrY () const;  ; Double_t * ArrZ ();  ; const Double_t * ArrZ () const;  ; Double_t & CM (Int_t i, Int_t j);  ; Double_t CM (Int_t i, Int_t j) const;  ; TVector3 GetBaseVec (Int_t b) const;  Get base-vector with index b. ;  ; void GetBaseVec (Int_t b, TVect",MatchSource.WIKI,doc/master/classTEveTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTrans.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveTriangleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTriangleSet.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveTriangleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTriangleSet.html
Integrability,wrap,wrap,"; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TEveTriangleSet Class ReferenceGraphics » 3D Graphics » Event Display. ; Made from a list of vertices and a list of triangles (triplets of vertex indices). ; If input is composed from triangles with direct vertex coordinates one should consider finding all occurrences of the same vertex and specifying it only once. ; Definition at line 23 of file TEveTriangleSet.h. Public Member Functions;  TEveTriangleSet (Int_t nv, Int_t nt, Bool_t norms=kFALSE, Bool_t cols=kFALSE);  Constructor. ;  ;  ~TEveTriangleSet () override;  Destructor. ;  ; Bool_t CanEditMainTransparency () const override;  ; void ComputeBBox () override;  Compute bounding box. ;  ; void GenerateRandomColors ();  Assign random colors to all triangles. ;  ; void GenerateTriangleNormals ();  Generate triangle normals via cross product of triangle edges. ;  ; void GenerateZNormalColors (Float_t fac=20, Int_t min=-20, Int_t max=20, Bool_t interp=kFALSE, Bool_t wrap=kFALSE);  Generate triangle colors by the z-component of the normal. ;  ; Int_t GetNTrings () const;  ; Int_t GetNVerts () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this object. Only direct rendering is supported. ;  ; void SetTransparency (Char_t tr);  ; void SetTriangle (Int_t i, Int_t v0, Int_t v1, Int_t v2);  ; void SetTriangleColor (Int_t i, UChar_t r, UChar_t g, UChar_t b, UChar_t a=255);  ; void SetVertex (Int_t i, Float_t x, Float_t y, Float_t z);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t * Triangle (Int_t i);  ; UChar_t * TriangleColor (Int_t i);  ; Float_t * TriangleNormal (Int_t i);  ; Float_t * Vertex (Int_t i);  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (co",MatchSource.WIKI,doc/master/classTEveTriangleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTriangleSet.html
Modifiability,inherit,inherited,"_t CanEditMainTransparency () const override;  ; void ComputeBBox () override;  Compute bounding box. ;  ; void GenerateRandomColors ();  Assign random colors to all triangles. ;  ; void GenerateTriangleNormals ();  Generate triangle normals via cross product of triangle edges. ;  ; void GenerateZNormalColors (Float_t fac=20, Int_t min=-20, Int_t max=20, Bool_t interp=kFALSE, Bool_t wrap=kFALSE);  Generate triangle colors by the z-component of the normal. ;  ; Int_t GetNTrings () const;  ; Int_t GetNVerts () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this object. Only direct rendering is supported. ;  ; void SetTransparency (Char_t tr);  ; void SetTriangle (Int_t i, Int_t v0, Int_t v1, Int_t v2);  ; void SetTriangleColor (Int_t i, UChar_t r, UChar_t g, UChar_t b, UChar_t a=255);  ; void SetVertex (Int_t i, Float_t x, Float_t y, Float_t z);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t * Triangle (Int_t i);  ; UChar_t * TriangleColor (Int_t i);  ; Float_t * TriangleNormal (Int_t i);  ; Float_t * Vertex (Int_t i);  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const overr",MatchSource.WIKI,doc/master/classTEveTriangleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTriangleSet.html
Security,hash,hash,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveTriangleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTriangleSet.html
Usability,feedback,feedback,"t;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveTriangleSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveTriangleSet.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewer.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewer.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewer.html
Modifiability,inherit,inherited,"ride;  Virtual function called before a window is undocked. ;  ; void Redraw (Bool_t resetCameras=kFALSE);  Redraw viewer immediately. ;  ; void RemoveElementLocal (TEveElement *el) override;  Remove element 'el' from the list of children and also remove appropriate GLScene from GLViewer's list of scenes. ;  ; void RemoveElementsLocal () override;  Remove all children, forwarded to GLViewer. ;  ; void SetGLViewer (TGLViewer *viewer, TGFrame *frame);  Set TGLViewer that is represented by this object. ;  ; TGLEmbeddedViewer * SpawnGLEmbeddedViewer (TGedEditor *ged=nullptr, Int_t border=0);  Spawn new GLViewer and adopt it. ;  ; TGLSAViewer * SpawnGLViewer (TGedEditor *ged=nullptr, Bool_t stereo=kFALSE, Bool_t quad_buf=kTRUE);  Spawn new GLViewer and adopt it. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwitchStereo ();  Switch stereo mode. ;  ;  Public Member Functions inherited from TEveWindowFrame;  TEveWindowFrame (TGFrame *frame, const char *n=""TEveWindowFrame"", const char *t="""");  Constructor. ;  ;  ~TEveWindowFrame () override;  Destructor. ;  ; TGCompositeFrame * GetGUICompositeFrame ();  Returns the registered top-frame of this eve-window dynamic-casted to composite-frame. ;  ; TGFrame * GetGUIFrame () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveWindow;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; virtual Bool_t CanMakeNewSlots () const;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar ()",MatchSource.WIKI,doc/master/classTEveViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewer.html
Security,hash,hash,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewer.html
Usability,undo,undocked,"enu-hiding enabled by default. If you dislike this, add the following line to rootrc file (or set corresponding gEnv entry in application initialization): Eve.Viewer.HideMenus: off. Definition at line 30 of file TEveViewer.h. Public Member Functions;  TEveViewer (const char *n=""TEveViewer"", const char *t="""");  Constructor. ;  ;  ~TEveViewer () override;  Destructor. ;  ; virtual void AddScene (TEveScene *scene);  Add 'scene' to the list of scenes. ;  ; TObject * GetEditorObject (const TEveException &eh=""TEveViewer::GetEditorObject "") const override;  Object to be edited when this is selected, returns the TGLViewer. ;  ; TGLViewer * GetGLViewer () const;  ; const TGPicture * GetListTreeIcon (Bool_t open=kFALSE) override;  Return TEveViewer icon. ;  ; Bool_t HandleElementPaste (TEveElement *el) override;  Receive a pasted object. ;  ; TClass * IsA () const override;  ; void PostDock () override;  Virtual function called after a window is docked. ;  ; void PreUndock () override;  Virtual function called before a window is undocked. ;  ; void Redraw (Bool_t resetCameras=kFALSE);  Redraw viewer immediately. ;  ; void RemoveElementLocal (TEveElement *el) override;  Remove element 'el' from the list of children and also remove appropriate GLScene from GLViewer's list of scenes. ;  ; void RemoveElementsLocal () override;  Remove all children, forwarded to GLViewer. ;  ; void SetGLViewer (TGLViewer *viewer, TGFrame *frame);  Set TGLViewer that is represented by this object. ;  ; TGLEmbeddedViewer * SpawnGLEmbeddedViewer (TGedEditor *ged=nullptr, Int_t border=0);  Spawn new GLViewer and adopt it. ;  ; TGLSAViewer * SpawnGLViewer (TGedEditor *ged=nullptr, Bool_t stereo=kFALSE, Bool_t quad_buf=kTRUE);  Spawn new GLViewer and adopt it. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwitchStereo ();  Switch stereo mode. ;  ;  Public Member Functions inherited from TEveWindowFrame;  TEveWindowFrame (TGFrame *frame, ",MatchSource.WIKI,doc/master/classTEveViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewer.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
Modifiability,inherit,inherited," *obj, UInt_t state);  Slot for global TGLViewer::UnMouseOver(). ;  ; void RemoveElementLocal (TEveElement *el) override;  Decompoundofy el, call base-class version. ;  ; void RemoveElementsLocal () override;  Decompoundofy children, call base-class version. ;  ; void RepaintAllViewers (Bool_t resetCameras, Bool_t dropLogicals);  Repaint all viewers. ;  ; void RepaintChangedViewers (Bool_t resetCameras, Bool_t dropLogicals);  Repaint viewers that are tagged as changed. ;  ; void SceneDestructing (TEveScene *scene);  Callback done from a TEveScene destructor allowing proper removal of the scene from affected viewers. ;  ; void SetColorBrightness (Float_t b);  Set color brightness. ;  ; void SetShowTooltip (Bool_t x);  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwitchColorSet ();  Switch background color. ;  ; Bool_t UseLightColorSet () const;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TCla",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
Security,hash,hash,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
Usability,feedback,feedback,"t;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveViewerList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveViewerList.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
Modifiability,inherit,inherited,"s holding standard event data in experiment independent format. ; Definition at line 19 of file TEveVSD.h. Public Member Functions;  TEveVSD (const char *name=""TEveVSD"", const char *title="""");  Constructor. ;  ;  ~TEveVSD () override;  Destructor. ;  ; virtual void CreateBranches ();  Create internal VSD branches. ;  ; virtual void CreateTrees ();  Create internal trees. ;  ; virtual void DeleteTrees ();  Delete internal trees. ;  ; TClass * IsA () const override;  ; virtual void LoadTrees ();  Load internal trees from directory. ;  ; virtual void SetBranchAddresses ();  Set branche addresses of internal trees. ;  ; virtual void SetDirectory (TDirectory *dir);  Set directory in which the trees are (or will be) created. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void WriteTrees ();  Does nothing here ... reimplemented in sub-classes. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTEveVSD.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveVSD.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
Modifiability,inherit,inherited,"- intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void Set",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
Security,hash,hash,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
Usability,undo,undocked," virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; virtual TGFrame * GetGUIFrame ()=0;  ; Bool_t GetShowTitleBar () const;  ; TClass * IsA () const override;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () overri",MatchSource.WIKI,doc/master/classTEveWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindow.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
Modifiability,inherit,inherited,". ROOT: TEveWindowFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveWindowFrame Class ReferenceGraphics » 3D Graphics » Event Display. ; Encapsulates TGFrame into an eve-window. ; The frame is owned by the eve-window. ; Definition at line 335 of file TEveWindow.h. Public Member Functions;  TEveWindowFrame (TGFrame *frame, const char *n=""TEveWindowFrame"", const char *t="""");  Constructor. ;  ;  ~TEveWindowFrame () override;  Destructor. ;  ; TGCompositeFrame * GetGUICompositeFrame ();  Returns the registered top-frame of this eve-window dynamic-casted to composite-frame. ;  ; TGFrame * GetGUIFrame () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveWindow;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; virtual Bool_t CanMakeNewSlots () const;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial pop",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
Security,hash,hash,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
Usability,undo,undocked,"void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElemen",MatchSource.WIKI,doc/master/classTEveWindowFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html
Availability,down,down,"ctions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveWindowManager Class ReferenceGraphics » 3D Graphics » Event Display. ; Manager for EVE windows. ; Provides the concept of the current window and takes care for proper destruction of the windows.; It is also the EVE-parent of windows that are not attached into the hierarchy of EVE-windows.; Window-manager is created by the EVE-manager and can be retrieved via: gEve->GetWindowManager.; gEveR__EXTERN TEveManager * gEveDefinition TEveManager.h:243; TEveManager::GetWindowManagerTEveWindowManager * GetWindowManager() constDefinition TEveManager.h:142. Definition at line 21 of file TEveWindowManager.h. Public Member Functions;  TEveWindowManager (const char *n=""TEveWindowManager"", const char *t="""");  Constructor. ;  ;  ~TEveWindowManager () override;  Destructor. ;  ; void DeleteWindow (TEveWindow *w);  Called by a window before it gets deleted. ;  ; void DestroyWindows ();  Wait for all windows to shut-down. ;  ; TEveWindow * GetCurrentWindow () const;  ; TEveWindowSlot * GetCurrentWindowAsSlot () const;  Return current window dynamic-casted to TEveWindowSlot. ;  ; TEveWindow * GetDefaultContainer () const;  ; Bool_t HasDefaultContainer () const;  ; void HideAllEveDecorations ();  Hide all eve decorations (title-bar and mini-bar) on all frames. ;  ; TClass * IsA () const override;  ; Bool_t IsCurrentWindow (const TEveWindow *w) const;  ; void SelectWindow (TEveWindow *w);  Entry-point for communicating the fact that a window was acted upon in such a way that it should become the current window. ;  ; void SetDefaultContainer (TEveWindow *w);  ; void SetShowTitleBars (Bool_t state);  Set show title-bar state on all frames. ;  ; void ShowNormalEveDecorations ();  Show eve decorations (title-bar or mini-bar) as specified for the contained window on all frames. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
Modifiability,inherit,inherited,"d SelectWindow (TEveWindow *w);  Entry-point for communicating the fact that a window was acted upon in such a way that it should become the current window. ;  ; void SetDefaultContainer (TEveWindow *w);  ; void SetShowTitleBars (Bool_t state);  Set show title-bar state on all frames. ;  ; void ShowNormalEveDecorations ();  Show eve decorations (title-bar or mini-bar) as specified for the contained window on all frames. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WindowDeleted (TEveWindow *window);  Emit the ""WindowDeleted(TEveWindow*)"" signal. ;  ; void WindowDocked (TEveWindow *window);  Emit the ""WindowDocked(TEveWindow*)"" signal. ;  ; void WindowSelected (TEveWindow *window);  Emit the ""WindowSelected(TEveWindow*)"" signal. ;  ; void WindowUndocked (TEveWindow *window);  Emit the ""WindowUndocked(TEveWindow*)"" signal. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  Get a TObject associated with this render-element. ;  ; TClass * ProjectedClass (const TEveProjection *p) const override;  Virtual from TEveProjectable, returns TEveCompoundProjected class. ;  ; void SetChildClass (TClass *c);  ; void Set",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
Security,hash,hash,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
Usability,feedback,feedback,"t;  Returns state of flag determining if the element will be destroyed when reference count reaches zero. ;  ; virtual TObject * GetEditorObject (const TEveException &eh) const;  ; virtual TString GetHighlightTooltip ();  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,doc/master/classTEveWindowManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowManager.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
Modifiability,inherit,inherited,"nctions;  TEveWindowPack (TGPack *p, const char *n=""TEveWindowPack"", const char *t="""");  Constructor. ;  ;  ~TEveWindowPack () override;  Destructor. ;  ; Bool_t CanMakeNewSlots () const override;  ; void EqualizeFrames ();  Refit existing frames so that their lengths are equal. ;  ; void FlipOrientation ();  Flip orientation of the pack (vertical / horizontal). ;  ; TGFrame * GetGUIFrame () override;  Return top-frame of this eve-window - the pack. ;  ; TGPack * GetPack () const;  ; TClass * IsA () const override;  ; TEveWindowSlot * NewSlot () override;  Create a new frame-slot at the last position of the pack. ;  ; virtual TEveWindowSlot * NewSlotWithWeight (Float_t w);  Create a new weighted frame-slot at the last position of the pack. ;  ; void SetHorizontal ();  ; void SetVertical (Bool_t x=kTRUE);  Set orientation of the pack (vertical / horizontal). ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveWindow;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
Security,hash,hash,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
Usability,undo,undocked,"veWindow () override;  Destructor. ;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElemen",MatchSource.WIKI,doc/master/classTEveWindowPack.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowPack.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
Modifiability,inherit,inherited," ; Definition at line 301 of file TEveWindow.h. Public Member Functions;  TEveWindowSlot (const char *n=""TEveWindowSlot"", const char *t="""");  Constructor. ;  ;  ~TEveWindowSlot () override;  Destructor. ;  ; TGFrame * GetGUIFrame () override;  Return top-frame of this eve-window - the big button to make slot current. ;  ; TClass * IsA () const override;  ; TEveWindowFrame * MakeFrame (TGFrame *frame=nullptr);  An eve-window-frame is created and frame is passed into it. ;  ; TEveWindowPack * MakePack ();  A pack is created in place of this window-slot. ;  ; TEveWindowTab * MakeTab ();  A tab is created in place of this window-slot. ;  ; TGCompositeFrame * StartEmbedding ();  Start embedding a window that will replace the current slot. ;  ; TEveWindowFrame * StopEmbedding (const char *name=nullptr);  An embedded window is created in place of this window-slot. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveWindow;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; virtual Bool_t CanMakeNewSlots () const;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initia",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
Security,hash,hash,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
Usability,undo,undocked,"void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElemen",MatchSource.WIKI,doc/master/classTEveWindowSlot.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
Deployability,update,update,"atrix. ;  ; virtual void SetTransMatrix (Double_t *carr);  Set transformation matrix from column-major array. ;  ; void SetUserData (void *ud);  ; void SetVizModel (TEveElement *model);  Set visualization-parameter model element. ;  ; void SetVizTag (const TString &tag);  ; virtual Bool_t SingleRnrState () const;  ; void SpawnEditor ();  Show GUI editor for this object. ;  ; void StampColorSelection ();  ; void StampObjProps ();  ; void StampTransBBox ();  ; void StampVisibility ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestCSCBits (UChar_t f) const;  ; virtual void UnHighlighted ();  Virtual function called when both fHighlighted is false and fImpliedHighlighted is 0. ;  ; virtual void UnSelected ();  Virtual function called when both fSelected is false and fImpliedSelected is 0. ;  ; void VizDB_Apply (const char *tag);  Set visual parameters for this object for given tag. ;  ; void VizDB_Insert (const char *tag, Bool_t replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override; ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
Integrability,depend,dependant," Bool_t rnr_children=kFALSE);  Disable rendering of children and their list contents. ;  ; void DumpSourceObject () const;  Call Dump() on source object. ;  ; virtual void ElementChanged (Bool_t update_scenes=kTRUE, Bool_t redraw=kFALSE);  Call this after an element has been changed so that the state can be propagated around the framework. ;  ; void EnableListElements (Bool_t rnr_self=kTRUE, Bool_t rnr_children=kTRUE);  Enable rendering of children and their list contents. ;  ; List_i EndChildren ();  ; List_ci EndChildren () const;  ; List_i EndParents ();  ; List_ci EndParents () const;  ; virtual void ExpandIntoListTree (TGListTree *ltree, TGListTreeItem *parent);  Populates parent with elements. ;  ; void ExportSourceObjectToCINT (char *var_name) const;  Export source object to CINT with given name for the variable. ;  ; virtual void ExportToCINT (char *var_name);  Export render-element to CINT with variable name var_name. ;  ; virtual void FillImpliedSelectedSet (Set_t &impSelSet);  Populate set impSelSet with derived / dependant elements. ;  ; TEveElement * FindChild (const TString &name, const TClass *cls=nullptr);  Find the first child with given name. ;  ; TEveElement * FindChild (TPRegexp &regexp, const TClass *cls=nullptr);  Find the first child whose name matches regexp. ;  ; Int_t FindChildren (List_t &matches, const TString &name, const TClass *cls=nullptr);  Find all children with given name and append them to matches list. ;  ; Int_t FindChildren (List_t &matches, TPRegexp &regexp, const TClass *cls=nullptr);  Find all children whose name matches regexp and append them to matches list. ;  ; virtual sLTI_i FindItem (TGListTree *ltree);  Find any list-tree-item of this element in list-tree 'ltree'. ;  ; virtual sLTI_i FindItem (TGListTree *ltree, TGListTreeItem *parent_lti);  Find list-tree-item of this element with given parent list-tree-item. ;  ; virtual TGListTreeItem * FindListTreeItem (TGListTree *ltree);  Find any list-tree-item of this element ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
Modifiability,inherit,inherited,"OOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TEveWindowTab Class ReferenceGraphics » 3D Graphics » Event Display. ; Encapsulates TGTab into an eve-window. ; The tab is owned by the eve-window. ; Definition at line 395 of file TEveWindow.h. Public Member Functions;  TEveWindowTab (TGTab *tab, const char *n=""TEveWindowTab"", const char *t="""");  Constructor. ;  ;  ~TEveWindowTab () override;  Destructor. ;  ; Bool_t CanMakeNewSlots () const override;  ; TGFrame * GetGUIFrame () override;  Return top-frame of this eve-window - the tab. ;  ; TGTab * GetTab () const;  ; TClass * IsA () const override;  ; TEveWindowSlot * NewSlot () override;  Create new frame-slot - a new tab. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveWindow;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
Security,hash,hash,"tual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
Usability,undo,undocked,"veWindow () override;  Destructor. ;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElemen",MatchSource.WIKI,doc/master/classTEveWindowTab.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTEveWindowTab.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
Deployability,update,updated,". ROOT: TExec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TExec Class ReferenceCore ROOT classes » Base ROOT classes. ; TExec is a utility class that can be used to execute a C++ command when some event happens in a pad. ; The command in turn can invoke a C++ macro to paint graphics objects at positions depending on the histogram or graph contents. Case 1:; The TExec object is in the list of pad primitives (after exec.Draw()). When the pad is drawn, the TExec::Paint function is called. This function will execute the specified command. The following example uses the services of the class Aclock created in $ROOTSYS/test/Aclock.cxx. This examples uses a TTimer to redraw a pad at regular intervals (clock). When the clock is updated, a string with the current date&time is drawn. {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; gPad#define gPadDefinition TVirtualPad.h:308; TDatimeThis class stores the date and time with a precision of one second in an unsigned 32 bit word (950130...Definition TDatime.h:37; TExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad.Definition TExec.h:26; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; TTextBase class for several text objects.Definition TText.h:22; exDouble_t ex[n]Definition legend1.C:17. Case 2:; The TExec object may be added to the list of functions of a TH1 or TGraph object via hist->GetListOfFunctions()->Add(exec). When the histogram (or graph) is drawn, the ",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
Energy Efficiency,power,powerful,"de (interpreted or compiled) executed by the TExec referenced command, one can call the pad service functions such as TPad::GetEvent, TPad::GetEventX, TPad::GetEventY to find which type of event and the X,Y position of the mouse. By default, the list of TExecs is executed. This can be disabled via the canvas menu ""Option"". See $ROOTSYS/tutorials/hist/exec2.C for an example. Root > TFile f(""hsimple.root"");; Root > hpxpy.Draw();; Root > c1.AddExec(""ex2"","".x exec2.C"");; f#define f(i)Definition RSha256.hxx:104; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; c1return c1Definition legend1.C:41; When moving the mouse in the canvas, a second canvas shows the projection along X of the bin corresponding to the Y position of the mouse. The resulting histogram is fitted with a gaussian. A ""dynamic"" line shows the current bin position in Y. This more elaborated example can be used as a starting point to develop more powerful interactive applications exploiting CINT as a development engine.; The 3 options above can be combined. ; Definition at line 26 of file TExec.h. Public Member Functions;  TExec ();  Exec default constructor. ;  ;  TExec (const char *name, const char *command);  Exec normal constructor. ;  ;  TExec (const TExec &text);  Copy constructor. ;  ; virtual ~TExec ();  Exec default destructor. ;  ; virtual void Exec (const char *command="""");  Execute the command referenced by this object. ;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Execute the command referenced by this object. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetAction (const char *action);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TN",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
Integrability,depend,depending,". ROOT: TExec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TExec Class ReferenceCore ROOT classes » Base ROOT classes. ; TExec is a utility class that can be used to execute a C++ command when some event happens in a pad. ; The command in turn can invoke a C++ macro to paint graphics objects at positions depending on the histogram or graph contents. Case 1:; The TExec object is in the list of pad primitives (after exec.Draw()). When the pad is drawn, the TExec::Paint function is called. This function will execute the specified command. The following example uses the services of the class Aclock created in $ROOTSYS/test/Aclock.cxx. This examples uses a TTimer to redraw a pad at regular intervals (clock). When the clock is updated, a string with the current date&time is drawn. {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; gPad#define gPadDefinition TVirtualPad.h:308; TDatimeThis class stores the date and time with a precision of one second in an unsigned 32 bit word (950130...Definition TDatime.h:37; TExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad.Definition TExec.h:26; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; TTextBase class for several text objects.Definition TText.h:22; exDouble_t ex[n]Definition legend1.C:17. Case 2:; The TExec object may be added to the list of functions of a TH1 or TGraph object via hist->GetListOfFunctions()->Add(exec). When the histogram (or graph) is drawn, the ",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
Modifiability,inherit,inherited,"owerful interactive applications exploiting CINT as a development engine.; The 3 options above can be combined. ; Definition at line 26 of file TExec.h. Public Member Functions;  TExec ();  Exec default constructor. ;  ;  TExec (const char *name, const char *command);  Exec normal constructor. ;  ;  TExec (const TExec &text);  Copy constructor. ;  ; virtual ~TExec ();  Exec default destructor. ;  ; virtual void Exec (const char *command="""");  Execute the command referenced by this object. ;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Execute the command referenced by this object. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetAction (const char *action);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
Testability,test,test,". ROOT: TExec Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TExec Class ReferenceCore ROOT classes » Base ROOT classes. ; TExec is a utility class that can be used to execute a C++ command when some event happens in a pad. ; The command in turn can invoke a C++ macro to paint graphics objects at positions depending on the histogram or graph contents. Case 1:; The TExec object is in the list of pad primitives (after exec.Draw()). When the pad is drawn, the TExec::Paint function is called. This function will execute the specified command. The following example uses the services of the class Aclock created in $ROOTSYS/test/Aclock.cxx. This examples uses a TTimer to redraw a pad at regular intervals (clock). When the clock is updated, a string with the current date&time is drawn. {; gSystem->Load(""$ROOTSYS/test/Aclock"");; Aclock ck(400);; gPad->SetFillColor(5);; TDatime dt;; TText t(.5,.3,""t"");; t.SetTextAlign(22);; t.SetTextSize(.07);; t.SetTextColor(4);; t.Draw();; TExec ex(""ex"",""dt.Set();t.SetTitle(dt.AsString())"");; ex.Draw();; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; gPad#define gPadDefinition TVirtualPad.h:308; TDatimeThis class stores the date and time with a precision of one second in an unsigned 32 bit word (950130...Definition TDatime.h:37; TExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad.Definition TExec.h:26; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; TTextBase class for several text objects.Definition TText.h:22; exDouble_t ex[n]Definition legend1.C:17. Case 2:; The TExec object may be added to the list of functions of a TH1 or TGraph object via hist->GetListOfFunctions()->Add(exec). When the histogram (or graph) is drawn, the ",MatchSource.WIKI,doc/master/classTExec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExec.html
Availability,error,error,"const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
Integrability,message,message,"const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
Modifiability,inherit,inherited,"elete all entries stored in the TExMap. ;  ; void Expand (Int_t newsize);  Expand the TExMap. ;  ; Int_t GetSize () const;  ; Long64_t GetValue (Long64_t key);  ; Long64_t GetValue (ULong64_t hash, Long64_t key);  Return the value belonging to specified key and hash value. ;  ; Long64_t GetValue (ULong64_t hash, Long64_t key, UInt_t &slot);  Return the value belonging to specified key and hash value. ;  ; TClass * IsA () const override;  ; Long64_t & operator() (Long64_t key);  ; Long64_t & operator() (ULong64_t hash, Long64_t key);  Return a reference to the value belonging to the key with the specified hash value. ;  ; TExMap & operator= (const TExMap &);  Assignment operator. ;  ; void Remove (Long64_t key);  ; void Remove (ULong64_t hash, Long64_t key);  Remove entry with specified key from the TExMap. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
Security,hash,hash,". ROOT: TExMap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TExMap Class Reference. ; This class stores a (key,value) pair using an external hash. ; The (key,value) are Long64_t's and therefore can contain object pointers or any longs. The map uses an open addressing hashing method (linear probing). ; Definition at line 33 of file TExMap.h. Classes; struct  Assoc_t;  . Public Member Functions;  TExMap (const TExMap &map);  Copy constructor. ;  ;  TExMap (Int_t mapSize=100);  Create a TExMap. ;  ;  ~TExMap ();  Delete TExMap. ;  ; void Add (Long64_t key, Long64_t value);  ; void Add (ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. The key should be unique. ;  ; void AddAt (UInt_t slot, ULong64_t hash, Long64_t key, Long64_t value);  Add an (key,value) pair to the table. ;  ; Int_t Capacity () const;  ; void Delete (Option_t *opt="""") override;  Delete all entries stored in the TExMap. ;  ; void Expand (Int_t newsize);  Expand the TExMap. ;  ; Int_t GetSize () const;  ; Long64_t GetValue (Long64_t key);  ; Long64_t GetValue (ULong64_t hash, Long64_t key);  Return the value belonging to specified key and hash value. ;  ; Long64_t GetValue (ULong64_t hash, Long64_t key, UInt_t &slot);  Return the value belonging to specified key and hash value. ;  ; TClass * IsA () const override;  ; Long64_t & operator() (Long64_t key);  ; Long64_t & operator() (ULong64_t hash, Long64_t key);  Return a reference to the value belonging to the key with the specified hash value. ;  ; TExMap & operator= (const TExMap &);  Assignment operator. ;  ; void Remove (Long64_t key);  ; void Remove (ULong64_t hash, Long64_t key);  Remove entry with specified key from the TExMap. ;  ; void Streamer (TBuffer &) override;  Stream all objec",MatchSource.WIKI,doc/master/classTExMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTExMap.html
Availability,error,error,"TF1protectedvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoInitialize(EAddToList addToGlobList)TF1protected; Draw(Option_t *option="""") overrideTF1virtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawCopy(Option_t *option="""") constTF1virtual; DrawDerivative(Option_t *option=""al"")TF1virtual; DrawF1(Double_t xmin, Double_t xmax, Option_t *option="""")TF1virtual; DrawIntegral(Option_t *option=""al"")TF1virtual; Dump() constTObjectvirtual; EAddToList enum nameTF1; EDeprecatedStatusBits enum nameTObject; EFType enum nameTF1protected; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTF1; Eval(Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) constTF1virtual; EvalPar(const Double_t *x, const Double_t *params=nullptr)TF1virtual; EvalPar(const T *x, const Double_t *params=nullptr)TF1; EvalParTempl(const T *data, const Double_t *params=nullptr)TF1inlineprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTF1virtual; fAlphaTF1protected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBetaTF1protected; fBitsTObjectprivate; fChisquareTF1protected; fCompositionTF1protected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFormulaTF1protected; fFunctorTF1protected; fgAbsValueTF1protectedstatic; fgAddToGlobListTF1protectedstatic; fGammaTF1protected; fgCurrentTF1protectedstatic; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgRejectPointTF1protectedstatic; fHistogramTF1protected; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fIntegralTF1protected; FixParameter(Int_t ipar, Double_t value)TF1virtual; fLineColorTAttLi",MatchSource.WIKI,doc/master/classTF1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TF1 Member List. This is the complete list of members for TF1, including all inherited members. AbstractMethod(const char *method) constTObject; AbsValue(Bool_t reject=kTRUE)TF1static; AddParameter(const TString &name, Double_t value)TF1inlinevirtual; AddToGlobalList(Bool_t on=kTRUE)TF1virtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b) overrideTF1virtual; CalcGaussLegendreSamplingPoints(Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11)TF1static; CentralMoment(Double_t n, Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001)TF1virtual; CheckedHash()TObjectinline; Class()TF1static; Class_Name()TF1static; Class_Version()TF1inlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname=nullptr) const overrideTF1virtual; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeCdfTable(Option_t *opt)TF1protected; Copy(TObject &f1) const overrideTF1virtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; CreateHistogram()TF1inlinevirtual; DeclFileName()TF1inlinestatic; DefaultAddToGlobalList(Bool_t on=kTRUE)TF1static; DefineNSUMTerm(TObjArray *newFuncs, TObjArray *coeffNames, TString &fullFormula, TString &formula, int termStart, int termEnd, Double_t xmin, Double_t xmax)TF1private; Delete(Option_t *option="""")TObjectvirtual; Derivative(Double_t x, Double_t *params=nullptr, Double_t epsilon=0.001) constTF1virtual; Derivative2(Double_t x, Double_t *params=nullptr, Double_t epsilon=0.001) constTF1virtual; Derivative3(Double_t x, Double_t *params=nullptr, Double_t epsilon=0.001) constTF1virtual; DerivativeError()TF1static; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp",MatchSource.WIKI,doc/master/classTF1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1-members.html
Testability,log,logx," fXmaxTF1protected; fXminTF1protected; GetChisquare() constTF1inline; GetCurrent()TF1static; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetExpFormula(Option_t *option="""") constTF1inlinevirtual; GetFillColor() constTAttFillinlinevirtual; GetFillStyle() constTAttFillinlinevirtual; GetFormula()TF1inlinevirtual; GetFormula() constTF1inlinevirtual; GetHistogram() constTF1virtual; GetIconName() constTObjectvirtual; GetLinearPart(Int_t i) constTF1inlinevirtual; GetLineColor() constTAttLineinlinevirtual; GetLineStyle() constTAttLineinlinevirtual; GetLineWidth() constTAttLineinlinevirtual; GetMarkerColor() constTAttMarkerinlinevirtual; GetMarkerLineWidth(Style_t style)TAttMarkerstatic; GetMarkerSize() constTAttMarkerinlinevirtual; GetMarkerStyle() constTAttMarkerinlinevirtual; GetMarkerStyleBase(Style_t style)TAttMarkerstatic; GetMaximum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMaximumStored() constTF1inlinevirtual; GetMaximumX(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMethodCall() constTF1inline; GetMinimum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMinimumStored() constTF1inlinevirtual; GetMinimumX(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMinMaxNDim(Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) constTF1protectedvirtual; GetName() const overrideTNamedinlinevirtual; GetNDF() constTF1virtual; GetNdim() constTF1inlinevirtual; GetNpar() constTF1inlinevirtual; GetNpx() constTF1inlinevirtual; GetNumber() constTF1inlinevirtual; GetNumberFitPoints() constTF1inlinevirtual; GetNumberFreeParameters() constTF1virtual; GetObjectInfo(Int_t px, Int_t py) const overrideTF1virtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetP",MatchSource.WIKI,doc/master/classTF1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1-members.html
Availability,avail,available,"ointx, xvec, yvec);; auto f = new TF1(""f"",[&](double*x, double *p){ return p[0]*g->Eval(x[0]); }, xmin, xmax, 1);; g#define g(i)Definition RSha256.hxx:105; xminfloat xminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41. 6 - A member function with parameters of a general C++ class; A TF1 can be created in this case from any member function of a class which has the signature of (double * , double *) and returning a double.; Example:; class MyFunction {; public:; ...; double Evaluate() (double *x, double *p) {; // function implementation; }; };; {; ....; MyFunction *fptr = new MyFunction(....); // create the user function class; auto f = new TF1(""f"",fptr,&MyFunction::Evaluate,0,1,npar,""MyFunction"",""Evaluate""); // create TF1 class.; ; .....; }; See also the tutorial math/exampleFunctor.C for a running example. PyROOT; The TF1 class has several additions for its use from Python, which are also available in its subclasses TF2 and TF3.; First, TF1 instance can be initialized with user-defined Python functions. Given a generic Python callable, the following can performed:; def func(x: numpy.ndarray, pars: numpy.ndarray) -> float:; return pars[0] * x[0] * x[0] + x[1] * pars[0]; ; my_func = ROOT.TF1(""my_func"", func, -10, 10, npar=2, ndim=2); Second, after performing the initialisation with a Python functor, the TF1 instance can be evaluated using the Pythonized TF1::EvalPar function. The pythonization allows passing in 1D(single set of x variables) or 2D(a dataset) NumPy arrays.; The following example shows how we can create a TF1 instance with a Python function and evaluate it on a dataset:; import ROOT; import math; import numpy as np; ; def pyf_tf1_coulomb(x, p):; return p[1] * x[0] * x[1] / (p[0]**2) * math.exp(-p[2] / p[0]); ; rtf1_coulomb = ROOT.TF1(""my_func"", pyf_tf1_coulomb, -10, 10, ndims = 2, npars = 3); ; # x dataset: 5 pairs of particle charges; ",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
Deployability,integrat,integrated,"aximum size of array xp and size of array p ; [out]xparray filled with n quantiles evaluated at p. Memory has to be preallocated by caller. ; [in]parray of cumulative probabilities where quantiles should be evaluated. It is assumed to contain at least n values. . Returnsn, the number of quantiles computed (same as input argument n); Getting quantiles from two histograms and storing results in a TGraph, a so-called QQ-plot TGraph *gr = new TGraph(nprob);; f1->GetQuantiles(nprob,gr->GetX(),p);; f2->GetQuantiles(nprob,gr->GetY(),p);; gr->Draw(""alp"");; AuthorEddy Offermann ; WarningFunction leads to undefined behavior if xp or p are null or their size does not match with n ; Definition at line 1994 of file TF1.cxx. ◆ GetRandom() [1/2]. Double_t TF1::GetRandom ; (; Double_t ; xmin, . Double_t ; xmax, . TRandom * ; rng = nullptr, . Option_t * ; option = nullptr . ). virtual . Return a random number following this function shape in [xmin,xmax]. ; The distribution contained in the function fname (TF1) is integrated over the channel contents. It is normalized to 1. For each bin the integral is approximated by a parabola. The parabola coefficients are stored as non persistent data members Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Evaluate the parabolic curve in the selected bin to find the corresponding X value. The parabolic approximation is very good as soon as the number of bins is greater than 50.; Parameters. xminminimum value for generated random numbers ; xmaxmaximum value for generated random numbers ; rng(optional) random number generator pointer ; option(optional) : LOG or LIN to force the usage of a log or linear scale for computing the cumulative integral table. IMPORTANT NOTE; The integral of the function is computed at fNpx points. If the function has sharp peaks, you should increase the number of points (SetNpx) such that the peak is correctly tabulate",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
Energy Efficiency,power,power,"ression using standard C++ functions/operators; Example a:; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; This creates a function of variable x with 2 parameters. The parameters must be initialized via:; fa->SetParameter(0,value_first_parameter);; fa->SetParameter(1,value_second_parameter);; Parameters may be given a name:; fa->SetParName(0,""Constant"");; Example b:; auto fb = new TF1(""fb"",""gaus(0)*expo(3)"",0,10);; gaus(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2) and (0) means start numbering parameters at 0. expo(3) is a substitute for exp([3]+[4]*x).; Case 2: inline expression using TMath functions with parameters; {; auto fb2 = new TF1(""fa3"",""TMath::Landau(x,[0],[1],0)"",-5,10);; fb2->SetParameters(0.2,1.3);; fb2->Draw();; }. 3 - A lambda expression with variables and parameters; Since6.00/00: TF1 supports using lambda expressions in the formula. This allows, by using a full C++ syntax the full power of lambda functions and still maintain the capability of storing the function in a file which cannot be done with function pointer or lambda written not as expression, but as code (see items below).; Example on how using lambda to define a sum of two functions. Note that is necessary to provide the number of parameters; TF1 f1(""f1"",""sin(x)"",0,10);; TF1 f2(""f2"",""cos(x)"",0,10);; TF1 fsum(""f1"",""[&](double *x, double *p){ return p[0]*f1(x) + p[1]*f2(x); }"",0,10,2);; TF11-Dim function classDefinition TF1.h:233; f1TF1 * f1Definition legend1.C:11. 4 - A general C function with parameters; Consider the macro myfunc.C below:; // Macro myfunc.C; Double_t myfunction(Double_t *x, Double_t *par); {; Float_t xx =x[0];; Double_t f = TMath::Abs(par[0]*sin(par[1]*xx)/xx);; return f;; }; void myfunc(); {; auto f1 = new TF1(""myfunc"",myfunction,0,10,2);; f1->SetParameters(2,1);; f1->SetParNames(""constant"",""coefficient"");; f1->Draw();; }; void myfit(); {; auto h1 = new TH1F(""h1"",""test"",100,0,10);; h1->FillRandom(""myfunc"",20000);; TF1 *f1 = (TF1 *)gROOT->GetFunction(""myfunc"");",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
Integrability,message,message,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
Modifiability,variab,variable,". ROOT: TF1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TF1 Class ReferenceHistogram Library » Function classes. ; 1-Dim function class . TF1: 1-Dim function class; A TF1 object is a 1-Dim function defined between a lower and upper limit. The function may be a simple function based on a TFormula expression or a precompiled user function. The function may have associated parameters. TF1 graphics function is via the TH1 and TGraph drawing functions.; The following types of functions can be created:. Expression using variable x and no parameters; Expression using variable x with parameters; Lambda Expression with variable x and parameters; A general C function with parameters; A general C++ function object (functor) with parameters; A member function with parameters of a general C++ class. 1 - Expression using variable x and no parameters; Case 1: inline expression using standard C++ functions/operators; {; auto fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();; }; TF1::TF1TF1()TF1 default constructor.Definition TF1.cxx:489. Case 2: inline expression using a ROOT function (e.g. from TMath) without parameters; {; auto fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();; }. Case 3: inline expression using a user defined CLING function by name; Double_t myFunc(double x) { return x+sin(x); }; ....; auto fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();; myFuncDouble_t myFunc(Double_t x)Definition ROOTR.C:4; double; xDouble_t x[n]Definition legend1.C:17. 2 - Expression using variable x with parameters; Case 1: inline expression using standard C++ functions/operators; Example a:; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; This create",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
Performance,perform,performed," THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41. 6 - A member function with parameters of a general C++ class; A TF1 can be created in this case from any member function of a class which has the signature of (double * , double *) and returning a double.; Example:; class MyFunction {; public:; ...; double Evaluate() (double *x, double *p) {; // function implementation; }; };; {; ....; MyFunction *fptr = new MyFunction(....); // create the user function class; auto f = new TF1(""f"",fptr,&MyFunction::Evaluate,0,1,npar,""MyFunction"",""Evaluate""); // create TF1 class.; ; .....; }; See also the tutorial math/exampleFunctor.C for a running example. PyROOT; The TF1 class has several additions for its use from Python, which are also available in its subclasses TF2 and TF3.; First, TF1 instance can be initialized with user-defined Python functions. Given a generic Python callable, the following can performed:; def func(x: numpy.ndarray, pars: numpy.ndarray) -> float:; return pars[0] * x[0] * x[0] + x[1] * pars[0]; ; my_func = ROOT.TF1(""my_func"", func, -10, 10, npar=2, ndim=2); Second, after performing the initialisation with a Python functor, the TF1 instance can be evaluated using the Pythonized TF1::EvalPar function. The pythonization allows passing in 1D(single set of x variables) or 2D(a dataset) NumPy arrays.; The following example shows how we can create a TF1 instance with a Python function and evaluate it on a dataset:; import ROOT; import math; import numpy as np; ; def pyf_tf1_coulomb(x, p):; return p[1] * x[0] * x[1] / (p[0]**2) * math.exp(-p[2] / p[0]); ; rtf1_coulomb = ROOT.TF1(""my_func"", pyf_tf1_coulomb, -10, 10, ndims = 2, npars = 3); ; # x dataset: 5 pairs of particle charges; x = np.array([; [1.0, 10, 2.0],; [1.5, 10, 2.5],; [2.0, 10, 3.0],; [2.5, 10, 3.5],; [3.0, 10, 4.0]; ]); ; params = np.array([; [1.0], # Distance between charges r; [8.99e9], # Cou",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
Safety,avoid,avoid,"rn pars[0] * x[0] * x[0] + x[1] * pars[0]; ; my_func = ROOT.TF1(""my_func"", func, -10, 10, npar=2, ndim=2); Second, after performing the initialisation with a Python functor, the TF1 instance can be evaluated using the Pythonized TF1::EvalPar function. The pythonization allows passing in 1D(single set of x variables) or 2D(a dataset) NumPy arrays.; The following example shows how we can create a TF1 instance with a Python function and evaluate it on a dataset:; import ROOT; import math; import numpy as np; ; def pyf_tf1_coulomb(x, p):; return p[1] * x[0] * x[1] / (p[0]**2) * math.exp(-p[2] / p[0]); ; rtf1_coulomb = ROOT.TF1(""my_func"", pyf_tf1_coulomb, -10, 10, ndims = 2, npars = 3); ; # x dataset: 5 pairs of particle charges; x = np.array([; [1.0, 10, 2.0],; [1.5, 10, 2.5],; [2.0, 10, 3.0],; [2.5, 10, 3.5],; [3.0, 10, 4.0]; ]); ; params = np.array([; [1.0], # Distance between charges r; [8.99e9], # Coulomb constant k (in N·m²/C²); [0.1] # Additional factor for modulation; ]); ; # Slice to avoid the dummy column of 10's; res = rtf1_coulomb.EvalPar(x[:, ::2], params). Definition at line 233 of file TF1.h. Classes; struct  TF1FunctorPointer;  ; struct  TF1FunctorPointerImpl;  . Public Types; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
Security,hash,hash," ; virtual Double_t Variance (Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const cha",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
Testability,test,test,"ports using lambda expressions in the formula. This allows, by using a full C++ syntax the full power of lambda functions and still maintain the capability of storing the function in a file which cannot be done with function pointer or lambda written not as expression, but as code (see items below).; Example on how using lambda to define a sum of two functions. Note that is necessary to provide the number of parameters; TF1 f1(""f1"",""sin(x)"",0,10);; TF1 f2(""f2"",""cos(x)"",0,10);; TF1 fsum(""f1"",""[&](double *x, double *p){ return p[0]*f1(x) + p[1]*f2(x); }"",0,10,2);; TF11-Dim function classDefinition TF1.h:233; f1TF1 * f1Definition legend1.C:11. 4 - A general C function with parameters; Consider the macro myfunc.C below:; // Macro myfunc.C; Double_t myfunction(Double_t *x, Double_t *par); {; Float_t xx =x[0];; Double_t f = TMath::Abs(par[0]*sin(par[1]*xx)/xx);; return f;; }; void myfunc(); {; auto f1 = new TF1(""myfunc"",myfunction,0,10,2);; f1->SetParameters(2,1);; f1->SetParNames(""constant"",""coefficient"");; f1->Draw();; }; void myfit(); {; auto h1 = new TH1F(""h1"",""test"",100,0,10);; h1->FillRandom(""myfunc"",20000);; TF1 *f1 = (TF1 *)gROOT->GetFunction(""myfunc"");; f1->SetParameters(800,1);; h1->Fit(""myfunc"");; }; f#define f(i)Definition RSha256.hxx:104; Float_tfloat Float_tDefinition RtypesCore.h:57; gROOT#define gROOTDefinition TROOT.h:406; TF1::SetParNamesvirtual void SetParNames(const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""")Set up to 10 parameter names.Definition TF1.cxx:3463; TF1::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF1.cxx:1333; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fill",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
Usability,simpl,simple,". ROOT: TF1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TF1 Class ReferenceHistogram Library » Function classes. ; 1-Dim function class . TF1: 1-Dim function class; A TF1 object is a 1-Dim function defined between a lower and upper limit. The function may be a simple function based on a TFormula expression or a precompiled user function. The function may have associated parameters. TF1 graphics function is via the TH1 and TGraph drawing functions.; The following types of functions can be created:. Expression using variable x and no parameters; Expression using variable x with parameters; Lambda Expression with variable x and parameters; A general C function with parameters; A general C++ function object (functor) with parameters; A member function with parameters of a general C++ class. 1 - Expression using variable x and no parameters; Case 1: inline expression using standard C++ functions/operators; {; auto fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; fa1->Draw();; }; TF1::TF1TF1()TF1 default constructor.Definition TF1.cxx:489. Case 2: inline expression using a ROOT function (e.g. from TMath) without parameters; {; auto fa2 = new TF1(""fa2"",""TMath::DiLog(x)"",0,10);; fa2->Draw();; }. Case 3: inline expression using a user defined CLING function by name; Double_t myFunc(double x) { return x+sin(x); }; ....; auto fa3 = new TF1(""fa3"",""myFunc(x)"",-3,5);; fa3->Draw();; myFuncDouble_t myFunc(Double_t x)Definition ROOTR.C:4; double; xDouble_t x[n]Definition legend1.C:17. 2 - Expression using variable x with parameters; Case 1: inline expression using standard C++ functions/operators; Example a:; auto fa = new TF1(""fa"",""[0]*x*sin([1]*x)"",-3,3);; This create",MatchSource.WIKI,doc/master/classTF1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1.html
Availability,avail,available,"rent attributes. ;  ; Double_t Eval (Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) const override;  Evaluate this formula. ;  ; Double_t EvalPar (const Double_t *x, const Double_t *params=nullptr) override;  Evaluate this function at point x[0]. ;  ; virtual Double_t GetXY () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetXY (Double_t xy);  Set the value of the constant for the TF2. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TF1;  TF1 ();  TF1 default constructor. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin, Double_t xmax, Option_t *option);  Same constructor as above (for TFormula based function) but passing an option strings available options VEC - vectorize the formula expressions (not possible for lambda based expressions) NL - function is not stores in the global list of functions GL - function will be always stored in the global list of functions , independently of the global setting of TF1::DefaultAddToGlobalList. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, EAddToList addToGlobList=EAddToList::kDefault, bool vectorize=false);  TF1 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, const char *, const char *, EAddToList addToGlobList=EAddToList::kDefault);  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault);  ;  TF1 (const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault);  F",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
Deployability,update,updated,"ual . Evaluate this function at point x[0]. ; x[0] is the value along X if fCase =0, the value along Y if fCase=1 if params is non null, the array will be used instead of the internal TF2 parameters ; Reimplemented from TF1.; Definition at line 157 of file TF12.cxx. ◆ GetXY(). virtual Double_t TF12::GetXY ; (; ); const. inlinevirtual . Definition at line 47 of file TF12.h. ◆ IsA(). TClass * TF12::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TF1.; Definition at line 51 of file TF12.h. ◆ SavePrimitive(). void TF12::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TF1.; Definition at line 176 of file TF12.cxx. ◆ SetXY(). void TF12::SetXY ; (; Double_t ; xy). virtual . Set the value of the constant for the TF2. ; constant in X when projecting along Y constant in Y when projecting along X The function title is set to include the value of the constant The current pad is updated ; Definition at line 190 of file TF12.cxx. ◆ Streamer(). void TF12::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TF1. ◆ StreamerNVirtual(). void TF12::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 51 of file TF12.h. Member Data Documentation. ◆ fCase. Int_t TF12::fCase. protected . Projection along X(0), or Y(1) ; Definition at line 29 of file TF12.h. ◆ fF2. TF2* TF12::fF2. protected . Pointer to the mother TF2. ; Definition at line 30 of file TF12.h. ◆ fXY. Double_t TF12::fXY. protected . Value along Y (if projection X) or X (if projection Y) ; Definition at line 28 of file TF12.h. Libraries for TF12:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TF12.h; hist/hist/src/TF12.cxx. TF12. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:48 (GVA Time) using Doxygen 1.9",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
Integrability,message,message,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
Modifiability,inherit,inherited,"tion_t *option=""x"");  TF12 normal constructor. ;  ;  TF12 (const TF12 &f12);  Copy constructor. ;  ;  ~TF12 () override;  F2 default destructor. ;  ; void Copy (TObject &f12) const override;  Copy this F2 to a new F2. ;  ; TF1 * DrawCopy (Option_t *option="""") const override;  Draw a copy of this function with its current attributes. ;  ; Double_t Eval (Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) const override;  Evaluate this formula. ;  ; Double_t EvalPar (const Double_t *x, const Double_t *params=nullptr) override;  Evaluate this function at point x[0]. ;  ; virtual Double_t GetXY () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetXY (Double_t xy);  Set the value of the constant for the TF2. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TF1;  TF1 ();  TF1 default constructor. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin, Double_t xmax, Option_t *option);  Same constructor as above (for TFormula based function) but passing an option strings available options VEC - vectorize the formula expressions (not possible for lambda based expressions) NL - function is not stores in the global list of functions GL - function will be always stored in the global list of functions , independently of the global setting of TF1::DefaultAddToGlobalList. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, EAddToList addToGlobList=EAddToList::kDefault, bool vectorize=false);  TF1 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, const char *, const char *, EAddToList addToGlobList=EAddToList::kDefault);  ; template<class P",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
Safety,safe,safe,"+ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag i",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
Security,hash,hash," ; virtual Double_t Variance (Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const cha",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
Testability,log,logx,"ing Note that when using pre-defined functions (e.g gaus), one needs to use the fit option 'B' to have the fix of the paramter effective. ;  ; Double_t GetChisquare () const;  Return the Chisquare after fitting. See ROOT::Fit::FitResult::Chi2() ;  ; virtual TString GetExpFormula (Option_t *option="""") const;  ; virtual TFormula * GetFormula ();  ; virtual const TFormula * GetFormula () const;  ; virtual TH1 * GetHistogram () const;  Return a pointer to the histogram used to visualise the function Note that this histogram is managed by the function and in same case it is automatically deleted when some TF1 functions are called such as TF1::SetParameters, TF1::SetNpx, TF1::SetRange It is then reccomended either to clone the return object or calling again teh GetHistogram function whenever is needed. ;  ; virtual const TObject * GetLinearPart (Int_t i) const;  ; virtual Double_t GetMaximum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the maximum value of the function. ;  ; virtual Double_t GetMaximumStored () const;  ; virtual Double_t GetMaximumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the maximum value of the function. ;  ; TMethodCall * GetMethodCall () const;  ; virtual Double_t GetMinimum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Double_t GetMinimumStored () const;  ; virtual Double_t GetMinimumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Int_t GetNDF () const;  Return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ;  ",MatchSource.WIKI,doc/master/classTF12.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF12.html
Availability,error,error,"nst char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
Integrability,message,message,"nst char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
Modifiability,inherit,inherited,". ROOT: TF1AbsComposition Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TF1AbsComposition Class Referenceabstract. . Definition at line 16 of file TF1AbsComposition.h. Public Member Functions;  ~TF1AbsComposition () override;  ; void Copy (TObject &obj) const override=0;  Copy this to obj. ;  ; TClass * IsA () const override;  ; virtual double operator() (const Double_t *x, const Double_t *p)=0;  ; virtual void SetParameters (const Double_t *params)=0;  ; virtual void SetRange (Double_t a, Double_t b)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update ()=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, In",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTF1AbsComposition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1AbsComposition.html
Availability,avail,available,". ROOT: TF1Convolution Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TF1Convolution Class ReferenceHistogram Library » Function classes. ; Class wrapping convolution of two functions. ; Class wrapping convolution of two functions: evaluation of \(\int f(x)g(x-t)dx\); The convolution is performed by default using FFTW if it is available . One can pass optionally the range of the convolution (by default the first function range is used). Note that when using Discrete Fourier Transform (as FFTW), it is a circular transform, so the functions should be approximately zero at the end of the range. If they are significantly different than zero on one side (e.g. the left side) a spill over will occur on the other side (e.g right side). If no function range is given by default the function1 range + 10% is used One should use also a not too small number of points for the DFT (a minimum of 1000). By default 10000 points are used. ; Definition at line 20 of file TF1Convolution.h. Public Member Functions;  TF1Convolution ();  constructor without arguments. ;  ;  TF1Convolution (const TF1Convolution &conv);  Copy constructor (necessary to hold unique_ptr as member variable). ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Bool_t useFFT=true);  constructor from the two function pointer and a flag is using FFT. ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Double_t xmin, Double_t xmax, Bool_t useFFT=true);  Constructor from the two function pointer and the convolution range. ;  ;  TF1Convolution (TString formula, Double_t xmin=1., Double_t xmax=0., Bool_t useFFT=true);  Constructor from a formula expression as f1 * f2 where f1 and f2 are two functions known to ROOT. ;  ;  TF1Convolution (TString formula1, TString formula2, Double_t xmin=",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
Integrability,wrap,wrapping,". ROOT: TF1Convolution Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TF1Convolution Class ReferenceHistogram Library » Function classes. ; Class wrapping convolution of two functions. ; Class wrapping convolution of two functions: evaluation of \(\int f(x)g(x-t)dx\); The convolution is performed by default using FFTW if it is available . One can pass optionally the range of the convolution (by default the first function range is used). Note that when using Discrete Fourier Transform (as FFTW), it is a circular transform, so the functions should be approximately zero at the end of the range. If they are significantly different than zero on one side (e.g. the left side) a spill over will occur on the other side (e.g right side). If no function range is given by default the function1 range + 10% is used One should use also a not too small number of points for the DFT (a minimum of 1000). By default 10000 points are used. ; Definition at line 20 of file TF1Convolution.h. Public Member Functions;  TF1Convolution ();  constructor without arguments. ;  ;  TF1Convolution (const TF1Convolution &conv);  Copy constructor (necessary to hold unique_ptr as member variable). ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Bool_t useFFT=true);  constructor from the two function pointer and a flag is using FFT. ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Double_t xmin, Double_t xmax, Bool_t useFFT=true);  Constructor from the two function pointer and the convolution range. ;  ;  TF1Convolution (TString formula, Double_t xmin=1., Double_t xmax=0., Bool_t useFFT=true);  Constructor from a formula expression as f1 * f2 where f1 and f2 are two functions known to ROOT. ;  ;  TF1Convolution (TString formula1, TString formula2, Double_t xmin=",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
Modifiability,variab,variable," Function classes. ; Class wrapping convolution of two functions. ; Class wrapping convolution of two functions: evaluation of \(\int f(x)g(x-t)dx\); The convolution is performed by default using FFTW if it is available . One can pass optionally the range of the convolution (by default the first function range is used). Note that when using Discrete Fourier Transform (as FFTW), it is a circular transform, so the functions should be approximately zero at the end of the range. If they are significantly different than zero on one side (e.g. the left side) a spill over will occur on the other side (e.g right side). If no function range is given by default the function1 range + 10% is used One should use also a not too small number of points for the DFT (a minimum of 1000). By default 10000 points are used. ; Definition at line 20 of file TF1Convolution.h. Public Member Functions;  TF1Convolution ();  constructor without arguments. ;  ;  TF1Convolution (const TF1Convolution &conv);  Copy constructor (necessary to hold unique_ptr as member variable). ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Bool_t useFFT=true);  constructor from the two function pointer and a flag is using FFT. ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Double_t xmin, Double_t xmax, Bool_t useFFT=true);  Constructor from the two function pointer and the convolution range. ;  ;  TF1Convolution (TString formula, Double_t xmin=1., Double_t xmax=0., Bool_t useFFT=true);  Constructor from a formula expression as f1 * f2 where f1 and f2 are two functions known to ROOT. ;  ;  TF1Convolution (TString formula1, TString formula2, Double_t xmin=1., Double_t xmax=0., Bool_t useFFT=true);  Constructor from 2 function names where f1 and f2 are two functions known to ROOT. ;  ;  ~TF1Convolution () override;  ; void Copy (TObject &obj) const override;  Copy this to obj. ;  ; Int_t GetNpar () const;  ; const char * GetParName (Int_t ipar) const;  ; void GetRange (Double_t &a, Double_t &b) const;  G",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
Performance,perform,performed,". ROOT: TF1Convolution Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TF1Convolution Class ReferenceHistogram Library » Function classes. ; Class wrapping convolution of two functions. ; Class wrapping convolution of two functions: evaluation of \(\int f(x)g(x-t)dx\); The convolution is performed by default using FFTW if it is available . One can pass optionally the range of the convolution (by default the first function range is used). Note that when using Discrete Fourier Transform (as FFTW), it is a circular transform, so the functions should be approximately zero at the end of the range. If they are significantly different than zero on one side (e.g. the left side) a spill over will occur on the other side (e.g right side). If no function range is given by default the function1 range + 10% is used One should use also a not too small number of points for the DFT (a minimum of 1000). By default 10000 points are used. ; Definition at line 20 of file TF1Convolution.h. Public Member Functions;  TF1Convolution ();  constructor without arguments. ;  ;  TF1Convolution (const TF1Convolution &conv);  Copy constructor (necessary to hold unique_ptr as member variable). ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Bool_t useFFT=true);  constructor from the two function pointer and a flag is using FFT. ;  ;  TF1Convolution (TF1 *function1, TF1 *function2, Double_t xmin, Double_t xmax, Bool_t useFFT=true);  Constructor from the two function pointer and the convolution range. ;  ;  TF1Convolution (TString formula, Double_t xmin=1., Double_t xmax=0., Bool_t useFFT=true);  Constructor from a formula expression as f1 * f2 where f1 and f2 are two functions known to ROOT. ;  ;  TF1Convolution (TString formula1, TString formula2, Double_t xmin=",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
Safety,avoid,avoid,"e 259 of file TF1Convolution.cxx. ◆ operator()(). Double_t TF1Convolution::operator() ; (; const Double_t * ; x, . const Double_t * ; p . ). overridevirtual . Used in TF1 when doing the fit, will be evaluated at each point. ; Implements TF1AbsComposition.; Definition at line 367 of file TF1Convolution.cxx. ◆ operator=(). TF1Convolution & TF1Convolution::operator= ; (; const TF1Convolution & ; rhs). Operator =. ; Definition at line 249 of file TF1Convolution.cxx. ◆ SetDefaultExtraRange(). Double_t TF1Convolution::SetDefaultExtraRange ; (; Double_t ; fraction). static . Set the default extra range fraction used when doing a FFT convolution. ; By default the value is 0.1 (10%). The function return the previous default defined value. ; Definition at line 477 of file TF1Convolution.cxx. ◆ SetExtraRange(). void TF1Convolution::SetExtraRange ; (; Double_t ; percentage). Set the fraction of extra range used when doing an FFT convolution. ; The extra range is often needed to avoid mirroring effect of the resulting convolution function at the borders. By default an extra range of 0.1 is used. ; Definition at line 438 of file TF1Convolution.cxx. ◆ SetNofPointsFFT(). void TF1Convolution::SetNofPointsFFT ; (; Int_t ; n). Set the number of points used for the FFT convolution. ; Definition at line 382 of file TF1Convolution.cxx. ◆ SetNumConv(). void TF1Convolution::SetNumConv ; (; Bool_t ; flag = true). inline . Definition at line 64 of file TF1Convolution.h. ◆ SetParameters() [1/2]. void TF1Convolution::SetParameters ; (; const Double_t * ; params). overridevirtual . Set the vector of parameters p for the convolution function g(x,p) = f1 * f2. ; Implements TF1AbsComposition.; Definition at line 393 of file TF1Convolution.cxx. ◆ SetParameters() [2/2]. void TF1Convolution::SetParameters ; (; Double_t ; p0, . Double_t ; p1, . Double_t ; p2 = 0., . Double_t ; p3 = 0., . Double_t ; p4 = 0., . Double_t ; p5 = 0., . Double_t ; p6 = 0., . Double_t ; p7 = 0. . ). Set the parameter values ",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTF1Convolution.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Convolution.html
Availability,error,error,"nst char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
Integrability,message,message,"nst char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
Modifiability,variab,variable,". ROOT: TF1NormSum Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TF1NormSum Class ReferenceHistogram Library » Function classes. ; Class adding two functions: c1*f1+c2*f2. ; Definition at line 19 of file TF1NormSum.h. Public Member Functions;  TF1NormSum ();  ;  TF1NormSum (const std::vector< TF1 * > &functions, const std::vector< Double_t > &coeffs, Double_t scale=1.);  ;  TF1NormSum (const TF1NormSum &nsum);  Copy constructor (necessary to hold unique_ptr as member variable) ;  ;  TF1NormSum (const TString &formula, Double_t xmin, Double_t xmax);  TF1NormSum constructor taking any addition of formulas with coefficient or not. ;  ;  TF1NormSum (TF1 *function1, TF1 *function2, Double_t coeff1=1., Double_t coeff2=1., Double_t scale=1.);  TF1NormSum constructor taking 2 functions, and 2 coefficients (if not equal to 1) ;  ;  TF1NormSum (TF1 *function1, TF1 *function2, TF1 *function3, Double_t coeff1=1., Double_t coeff2=1., Double_t coeff3=1., Double_t scale=1.);  TF1NormSum constructor taking 3 functions, and 3 coefficients (if not equal to 1) ;  ;  ~TF1NormSum () override;  ; void Copy (TObject &obj) const override;  Copy this to obj. ;  ; Int_t GetNpar () const;  Return the number of (non constant) parameters including the coefficients: for 2 functions: c1,c2,p0,p1,p2,p3... ;  ; std::vector< double > GetParameters () const;  Return array of parameters. ;  ; const char * GetParName (Int_t ipar) const;  ; void GetRange (Double_t &a, Double_t &b) const;  ; Double_t GetScale () const;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; TClass * IsA () const override;  ; double operator() (const Double_t *x, const Double_t *p) override;  Overload the parenthesis to add the functions. ;  ; TF1NormSum & operator= (const TF1NormSum &rhs);  Operator =. ;  ;",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTF1NormSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1NormSum.html
Energy Efficiency,efficient,efficient,". ROOT: TF1Parameters Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TF1Parameters Class Reference. ; TF1 Parameters class. ; Definition at line 53 of file TF1.h. Public Member Functions;  TF1Parameters ();  ;  TF1Parameters (const TF1Parameters &rhs);  ;  TF1Parameters (Int_t npar);  ; virtual ~TF1Parameters ();  ; Double_t GetParameter (const char *name) const;  ; Double_t GetParameter (Int_t iparam) const;  ; const Double_t * GetParameters () const;  ; const char * GetParName (Int_t iparam) const;  ; Int_t GetParNumber (const char *name) const;  Returns the parameter number given a name not very efficient but list of parameters is typically small could use a map if needed. ;  ; virtual TClass * IsA () const;  ; TF1Parameters & operator= (const TF1Parameters &rhs);  ; const std::vector< double > & ParamsVec () const;  ; void SetParameter (const char *name, Double_t value);  ; void SetParameter (Int_t iparam, Double_t value);  ; void SetParameters (const Double_t *params);  ; template<typename... Args> ; void SetParameters (Double_t arg1, Args &&... args);  Set parameter values. ;  ; void SetParName (Int_t iparam, const char *name);  ; template<typename... Args> ; void SetParNames (Args &&... args);  Set parameter names. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; bool CheckIndex (Int_t i) const;  . Private Attributes; std::vector< Double_t > fParameters;  ; std::vector< std::string > fParNames;  . #include <TF1.h>; Constructor & Destructor Documentation. ◆ TF1Parameters() [1/3]. TF1Paramete",MatchSource.WIKI,doc/master/classTF1Parameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF1Parameters.html
Availability,error,error,"r(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoInitialize(EAddToList addToGlobList)TF1protected; Draw(Option_t *option="""") overrideTF2virtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawCopy(Option_t *option="""") const overrideTF2virtual; DrawDerivative(Option_t *=""al"") overrideTF2inlinevirtual; DrawF1(Double_t xmin, Double_t xmax, Option_t *option="""")TF1virtual; DrawIntegral(Option_t *=""al"") overrideTF2inlinevirtual; Dump() constTObjectvirtual; EAddToList enum nameTF1; EDeprecatedStatusBits enum nameTObject; EFType enum nameTF1protected; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTF1; Eval(Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) constTF1virtual; EvalPar(const Double_t *x, const Double_t *params=nullptr)TF1virtual; EvalPar(const T *x, const Double_t *params=nullptr)TF1; EvalParTempl(const T *data, const Double_t *params=nullptr)TF1inlineprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTF2virtual; fAlphaTF1protected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBetaTF1protected; fBitsTObjectprivate; fChisquareTF1protected; fCompositionTF1protected; fContourTF2protected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFormulaTF1protected; fFunctorTF1protected; fgAbsValueTF1protectedstatic; fgAddToGlobListTF1protectedstatic; fGammaTF1protected; fgCurrentTF1protectedstatic; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgRejectPointTF1protectedstatic; fHistogramTF1protected; FillBuffer(char *&buffer)TNamedvirtual; FindMinMax(Double_t *x, bool findmax) constTF2protectedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fInte",MatchSource.WIKI,doc/master/classTF2-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TF2 Member List. This is the complete list of members for TF2, including all inherited members. AbstractMethod(const char *method) constTObject; AbsValue(Bool_t reject=kTRUE)TF1static; AddParameter(const TString &name, Double_t value)TF1inlinevirtual; AddToGlobalList(Bool_t on=kTRUE)TF1virtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b) overrideTF1virtual; CalcGaussLegendreSamplingPoints(Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11)TF1static; CentralMoment(Double_t n, Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001)TF1virtual; CentralMoment2(Double_t nx, Double_t ax, Double_t bx, Double_t ny, Double_t ay, Double_t by, Double_t epsilon=0.000001)TF2virtual; CheckedHash()TObjectinline; Class()TF2static; Class_Name()TF2static; Class_Version()TF2inlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname=nullptr) const overrideTF1virtual; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeCdfTable(Option_t *opt)TF1protected; Copy(TObject &f2) const overrideTF2virtual; TF1::TAttLine::Copy(TAttLine &attline) constTAttLine; TF1::TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; Covariance2XY(Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001)TF2inlinevirtual; CreateHistogram() overrideTF2virtual; DeclFileName()TF2inlinestatic; DefaultAddToGlobalList(Bool_t on=kTRUE)TF1static; DefineNSUMTerm(TObjArray *newFuncs, TObjArray *coeffNames, TString &fullFormula, TString &formula, int termStart, int termEnd, Double_t xmin, Double_t xmax)TF1private; Delete(Option_t *option="""")TObjectvirtual; Derivative(Double_t x, Double_t *params=nullptr, Double_t epsilon=0.001) constTF1virtual; Derivative2(Double_t x, Double",MatchSource.WIKI,doc/master/classTF2-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2-members.html
Testability,log,logx,"nt_t level) constTF2virtual; GetCurrent()TF1static; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetExpFormula(Option_t *option="""") constTF1inlinevirtual; GetFillColor() constTAttFillinlinevirtual; GetFillStyle() constTAttFillinlinevirtual; GetFormula()TF1inlinevirtual; GetFormula() constTF1inlinevirtual; GetHistogram() constTF1virtual; GetIconName() constTObjectvirtual; GetLinearPart(Int_t i) constTF1inlinevirtual; GetLineColor() constTAttLineinlinevirtual; GetLineStyle() constTAttLineinlinevirtual; GetLineWidth() constTAttLineinlinevirtual; GetMarkerColor() constTAttMarkerinlinevirtual; GetMarkerLineWidth(Style_t style)TAttMarkerstatic; GetMarkerSize() constTAttMarkerinlinevirtual; GetMarkerStyle() constTAttMarkerinlinevirtual; GetMarkerStyleBase(Style_t style)TAttMarkerstatic; GetMaximum(Double_t *x) constTF2virtual; GetMaximum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF2virtual; GetMaximumStored() constTF1inlinevirtual; GetMaximumX(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMaximumXY(Double_t &x, Double_t &y) constTF2virtual; GetMethodCall() constTF1inline; GetMinimum(Double_t *x) constTF2virtual; GetMinimum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF2virtual; GetMinimumStored() constTF1inlinevirtual; GetMinimumX(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMinimumXY(Double_t &x, Double_t &y) constTF2virtual; GetMinMaxNDim(Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) constTF1protectedvirtual; GetName() const overrideTNamedinlinevirtual; GetNDF() constTF1virtual; GetNdim() constTF1inlinevirtual; GetNpar() constTF1inlinevirtual; GetNpx() constTF1inlinevirtual; GetNpy() constTF2inline; GetNumber() constTF1inlinevirtual; GetNumberFitPoints() constTF1inlinevirtual",MatchSource.WIKI,doc/master/classTF2-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2-members.html
Availability,avail,available,"r and lower bounds to draw the function. ;  ; void SetRange (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax) override;  Initialize the upper and lower bounds to draw the function-. ;  ; void SetRange (Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TF2. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Double_t Variance2X (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001);  ; virtual Double_t Variance2Y (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001);  ;  Public Member Functions inherited from TF1;  TF1 ();  TF1 default constructor. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin, Double_t xmax, Option_t *option);  Same constructor as above (for TFormula based function) but passing an option strings available options VEC - vectorize the formula expressions (not possible for lambda based expressions) NL - function is not stores in the global list of functions GL - function will be always stored in the global list of functions , independently of the global setting of TF1::DefaultAddToGlobalList. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, EAddToList addToGlobList=EAddToList::kDefault, bool vectorize=false);  TF1 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, const char *, const char *, EAddToList addToGlobList=EAddToList::kDefault);  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault);  ;  TF1 (const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault);  F",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
Deployability,integrat,integrated,"fo ; (; Int_t ; px, . Int_t ; py . ); const. overridevirtual . Redefines TObject::GetObjectInfo. ; Displays the function value corresponding to cursor position px,py ; Reimplemented from TF1.; Definition at line 486 of file TF2.cxx. ◆ GetRandom() [1/2]. Double_t TF2::GetRandom ; (; Double_t ; xmin, . Double_t ; xmax, . TRandom * ; rng = nullptr, . Option_t * ; opt = nullptr . ). overridevirtual . Return a random number following this function shape. ; Reimplemented from TF1.; Definition at line 522 of file TF2.cxx. ◆ GetRandom() [2/2]. Double_t TF2::GetRandom ; (; TRandom * ; rng = nullptr, . Option_t * ; opt = nullptr . ). overridevirtual . Return a random number following this function shape. ; Reimplemented from TF1.; Definition at line 512 of file TF2.cxx. ◆ GetRandom2(). void TF2::GetRandom2 ; (; Double_t & ; xrandom, . Double_t & ; yrandom, . TRandom * ; rng = nullptr . ). virtual . Return 2 random numbers following this function shape. ; The distribution contained in this TF2 function is integrated over the cell contents. It is normalized to 1. Getting the two random numbers implies:; Generating a random number between 0 and 1 (say r1); Look in which cell in the normalized integral r1 corresponds to; make a linear interpolation in the returned cell. IMPORTANT NOTE; The integral of the function is computed at fNpx * fNpy points. If the function has sharp peaks, you should increase the number of points (SetNpx, SetNpy) such that the peak is correctly tabulated at several points. ; Definition at line 547 of file TF2.cxx. ◆ GetRange() [1/6]. void TF1::GetRange ; (; Double_t & ; xmin, . Double_t & ; xmax . ); const. virtual . Return range of a 1-D function. ; Reimplemented from TF1.; Reimplemented in TF3, and TF3.; Definition at line 575 of file TF1.cxx. ◆ GetRange() [2/6]. void TF1::GetRange ; (; Double_t & ; xmin, . Double_t & ; ymin, . Double_t & ; xmax, . Double_t & ; ymax . ); const. virtual . Return range of a 2-D function. ; Reimplemented from TF1.; Reimple",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
Integrability,message,message,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
Modifiability,variab,variables,". ROOT: TF2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TF2 Class ReferenceHistogram Library » Function classes. ; A 2-Dim function with parameters. ; The following types of functions can be created:. Expression using variables x and y; Expression using a user defined function; Lambda Expression with x and y variables and parameters. Expression using variables x and y; {; auto f2 = new TF2(""f2"",""sin(x)*sin(y)/(x*y)"",0,5,0,5);; f2->Draw();; }; TF2::TF2TF2()TF2 default constructor.Definition TF2.cxx:83. Expression using a user defined function; Double_t func(Double_t *val, Double_t *par); {; Float_t x = val[0];; Float_t y = val[1];; Double_t f = x*x-y*y;; return f;; }; ; void fplot(); {; auto f = new TF2(""f"",func,-1,1,-1,1);; f->Draw(""surf1"");; }; f#define f(i)Definition RSha256.hxx:104; Float_tfloat Float_tDefinition RtypesCore.h:57; double; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17. Lambda Expression with x and y variables and parameters; root [0] TF2 f2(""f2"", [](double* x, double*p) { return x[0] + x[1] * p[0]; }, 0., 1., 0., 1., 1); (TF2 &) Name: f2 Title: f2; root [1] f2.SetParameter(0, 1.); root [2] f2.Eval(1., 2.); (double) 3.0000000; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; TF2A 2-Dim function with parameters.Definition TF2.h:29; See TF1 class for the list of functions formats ; Definition at line 29 of file TF2.h. Public Member Functions;  TF2 ();  TF2 default constructor. ;  ;  TF2 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, Double_t ymin=0, Double_t ymax=1, Option_t *opt=nullptr);  F2 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF2 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, D",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
Performance,perform,performed,"resulting graph will be drawn into the current pad. If this function is used via the context menu, it recommended to create a new canvas/pad before invoking this function. ; Reimplemented from TF1.; Reimplemented in TF3.; Definition at line 91 of file TF2.h. ◆ ExecuteEvent(). void TF2::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; This member function is called when a F2 is clicked with the locator ; Reimplemented from TF1.; Reimplemented in TF3.; Definition at line 316 of file TF2.cxx. ◆ FindMinMax(). Double_t TF2::FindMinMax ; (; Double_t * ; x, . bool ; findmax . ); const. protectedvirtual . Return minimum/maximum value of the function. ; To find the minimum on a range, first set this range via the SetRange function. If a vector x of coordinate is passed it will be used as starting point for the minimum. In addition on exit x will contain the coordinate values at the minimuma; If x is NULL or x is infinity or NaN, first, a grid search is performed to find the initial estimate of the minimum location. The range of the function is divided into fNpx and fNpy sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed by SetNpx and SetNpy functions; Then, a minimization is used with starting values found by the grid search The minimizer algorithm used (by default Minuit) can be changed by callinga ROOT::Math::Minimizer::SetDefaultMinimizerType("".."") Other option for the minimizer can be set using the static method of the MinimizerOptions class ; Reimplemented in TF3.; Definition at line 363 of file TF2.cxx. ◆ GetContour(). Int_t TF2::GetContour ; (; Double_t * ; levels = nullptr). virtual . Return contour values into array levels. ; The number of contour levels can be returned by getContourLevel ; Definition at line 326 of file TF2.cxx. ◆ GetContourLevel(). Double_t TF2::GetContourLevel ; (; Int_t ; level); const. virtual . Return the number of contour levels. ; Defini",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
Safety,safe,safe,"+ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag i",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
Security,hash,hash," ; virtual Double_t Variance (Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const cha",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
Testability,log,logx,"ompute distance from point px,py to a function. ;  ; void Draw (Option_t *option="""") override;  Draw this function with its current attributes. ;  ; TF1 * DrawCopy (Option_t *option="""") const override;  Draw a copy of this function with its current attributes-*. ;  ; TObject * DrawDerivative (Option_t *=""al"") override;  Draw derivative of this function. ;  ; TObject * DrawIntegral (Option_t *=""al"") override;  Draw integral of this function. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual Int_t GetContour (Double_t *levels=nullptr);  Return contour values into array levels. ;  ; virtual Double_t GetContourLevel (Int_t level) const;  Return the number of contour levels. ;  ; virtual Double_t GetMaximum (Double_t *x) const;  Return maximum value of the function See TF2::GetMinimum. ;  ; virtual Double_t GetMaximum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the maximum value of the function. ;  ; virtual Double_t GetMaximumXY (Double_t &x, Double_t &y) const;  Compute the X and Y values corresponding to the maximum value of the function. ;  ; virtual Double_t GetMinimum (Double_t *x) const;  Return minimum/maximum value of the function. ;  ; virtual Double_t GetMinimum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Double_t GetMinimumXY (Double_t &x, Double_t &y) const;  Compute the X and Y values corresponding to the minimum value of the function. ;  ; Int_t GetNpy () const;  ; char * GetObjectInfo (Int_t px, Int_t py) const override;  Redefines TObject::GetObjectInfo. ;  ; Double_t GetRandom (Double_t xmin, Double_t xmax, TRandom *rng=nullptr, Option_t *opt=nullptr) override;  Return a random number following this function shape. ;  ; Double_t GetRandom (TRandom *rng=nullptr, Option",MatchSource.WIKI,doc/master/classTF2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF2.html
Availability,avail,available,"],[ay,by]. ;  ; TF2 & operator= (const TF2 &rhs);  Operator =. ;  ; virtual void SetContour (Int_t nlevels=20, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetNpy (Int_t npy=100);  Set the number of points used to draw the function. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Double_t Variance2X (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001);  ; virtual Double_t Variance2Y (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001);  ;  Public Member Functions inherited from TF1;  TF1 ();  TF1 default constructor. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin, Double_t xmax, Option_t *option);  Same constructor as above (for TFormula based function) but passing an option strings available options VEC - vectorize the formula expressions (not possible for lambda based expressions) NL - function is not stores in the global list of functions GL - function will be always stored in the global list of functions , independently of the global setting of TF1::DefaultAddToGlobalList. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, EAddToList addToGlobList=EAddToList::kDefault, bool vectorize=false);  TF1 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, const char *, const char *, EAddToList addToGlobList=EAddToList::kDefault);  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault);  ;  TF1 (const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault);  F",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
Deployability,integrat,integrated,"g to the minimum value of the function on its range. ; Returns the function value at the minimum. To find the minimum on a subrange, use the SetRange() function first.; Method: First, a grid search is performed to find the initial estimate of the minimum location. The range of the function is divided into fNpx,fNpy and fNpz sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed by SetNpx(), SetNpy() and SetNpz() functions. Then, Minuit minimization is used with starting values found by the grid search; Note that this method will always do first a grid search in contrast to GetMinimum ; Definition at line 298 of file TF3.cxx. ◆ GetNpz(). Int_t TF3::GetNpz ; (; ); const. inline . Definition at line 91 of file TF3.h. ◆ GetRandom3(). void TF3::GetRandom3 ; (; Double_t & ; xrandom, . Double_t & ; yrandom, . Double_t & ; zrandom, . TRandom * ; rng = nullptr . ). virtual . Return 3 random numbers following this function shape. ; The distribution contained in this TF3 function is integrated over the cell contents. It is normalized to 1. Getting the three random numbers implies:; Generating a random number between 0 and 1 (say r1); Look in which cell in the normalized integral r1 corresponds to; make a linear interpolation in the returned cell. IMPORTANT NOTE; The integral of the function is computed at fNpx * fNpy * fNpz points. If the function has sharp peaks, you should increase the number of points (SetNpx, SetNpy, SetNpz) such that the peak is correctly tabulated at several points. ; Definition at line 342 of file TF3.cxx. ◆ GetRange() [1/7]. void TF1::GetRange ; (; Double_t & ; xmin, . Double_t & ; xmax . ); const. virtual . Return range of a 1-D function. ; Reimplemented from TF2.; Definition at line 575 of file TF1.cxx. ◆ GetRange() [2/7]. void TF3::GetRange ; (; Double_t & ; xmin, . Double_t & ; xmax . ); const. inlineoverridevirtual . Return range of a 1-D function. ; Reimplemented from TF2.; Definition at line 139 of file TF3.h. ◆ GetRange()",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
Integrability,message,message,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
Modifiability,inherit,inherited,"xmax) override;  Initialize the upper and lower bounds to draw the function. ;  ; void SetRange (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax) override;  Initialize the upper and lower bounds to draw the function-. ;  ; void SetRange (Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax) override;  Initialize the upper and lower bounds to draw the function. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TF3. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Double_t Variance3X (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t az, Double_t bz, Double_t epsilon=0.000001);  ; virtual Double_t Variance3Y (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t az, Double_t bz, Double_t epsilon=0.000001);  ; virtual Double_t Variance3Z (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t az, Double_t bz, Double_t epsilon=0.000001);  ;  Public Member Functions inherited from TF2;  TF2 ();  TF2 default constructor. ;  ;  TF2 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, Double_t ymin=0, Double_t ymax=1, Option_t *opt=nullptr);  F2 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF2 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Int_t npar, const char *, const char *);  Backward compatible ctor. ;  ; template<class PtrObj , typename MemFn > ;  TF2 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Int_t npar, Int_t ndim=2);  Template constructors from a pointer to any C++ class of type PtrObj with a specific member function of type MemFn. ;  ;  TF2 (const char *name, Double_t(*fcn)(const Double_t *, const Double_t *), Double_t xmin=0, Double_t xmax=1, Double_t ymin=0, Double_t ymax=1, Int_t npar=0, Int_t ndim=2);  F2 constructor using a pointer to a compiled function",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
Performance,perform,performed,"aph*)myfunc.DrawIntegral(option);; The resulting graph will be drawn into the current pad. If this function is used via the context menu, it recommended to create a new canvas/pad before invoking this function. ; Reimplemented from TF2.; Definition at line 87 of file TF3.h. ◆ ExecuteEvent(). void TF3::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; This member function is called when a F3 is clicked with the locator ; Reimplemented from TF2.; Definition at line 209 of file TF3.cxx. ◆ FindMinMax(). Double_t TF3::FindMinMax ; (; Double_t * ; x, . bool ; findmax . ); const. overrideprotectedvirtual . Return minimum/maximum value of the function. ; To find the minimum on a range, first set this range via the SetRange function If a vector x of coordinate is passed it will be used as starting point for the minimum. In addition on exit x will contain the coordinate values at the minimuma If x is NULL or x is inifinity or NaN, first, a grid search is performed to find the initial estimate of the minimum location. The range of the function is divided into fNpx and fNpy sub-ranges. If the function is ""good"" (or ""bad""), these values can be changed by SetNpx and SetNpy functions; Then, a minimization is used with starting values found by the grid search The minimizer algorithm used (by default Minuit) can be changed by callinga ROOT::Math::Minimizer::SetDefaultMinimizerType("".."") Other option for the minimizer can be set using the static method of the MinimizerOptions class ; Reimplemented from TF2.; Definition at line 230 of file TF3.cxx. ◆ GetClippingBox(). virtual const Double_t * TF3::GetClippingBox ; (; ); const. inlinevirtual . Definition at line 110 of file TF3.h. ◆ GetClippingBoxOn(). virtual Bool_t TF3::GetClippingBoxOn ; (; ); const. inlinevirtual . Definition at line 108 of file TF3.h. ◆ GetMaximumXYZ(). Double_t TF3::GetMaximumXYZ ; (; Double_t & ; x, . Double_t & ; y, . Double_t & ; z .",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
Safety,safe,safe,"tual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF2; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag i",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
Security,hash,hash," ; virtual Double_t Variance (Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const cha",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
Testability,log,logx,"le *) ;  ;  TF2 (const TF2 &f2);  Copy constructor. ;  ;  ~TF2 () override;  F2 default destructor. ;  ; virtual Double_t CentralMoment2 (Double_t nx, Double_t ax, Double_t bx, Double_t ny, Double_t ay, Double_t by, Double_t epsilon=0.000001);  Return x^nx * y^ny central moment of a 2d function in range [ax,bx],[ay,by]. ;  ; virtual Double_t Covariance2XY (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001);  ; TF1 * DrawCopy (Option_t *option="""") const override;  Draw a copy of this function with its current attributes-*. ;  ; virtual Int_t GetContour (Double_t *levels=nullptr);  Return contour values into array levels. ;  ; virtual Double_t GetContourLevel (Int_t level) const;  Return the number of contour levels. ;  ; virtual Double_t GetMaximum (Double_t *x) const;  Return maximum value of the function See TF2::GetMinimum. ;  ; virtual Double_t GetMaximum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the maximum value of the function. ;  ; virtual Double_t GetMaximumXY (Double_t &x, Double_t &y) const;  Compute the X and Y values corresponding to the maximum value of the function. ;  ; virtual Double_t GetMinimum (Double_t *x) const;  Return minimum/maximum value of the function. ;  ; virtual Double_t GetMinimum (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Double_t GetMinimumXY (Double_t &x, Double_t &y) const;  Compute the X and Y values corresponding to the minimum value of the function. ;  ; Int_t GetNpy () const;  ; char * GetObjectInfo (Int_t px, Int_t py) const override;  Redefines TObject::GetObjectInfo. ;  ; Double_t GetRandom (Double_t xmin, Double_t xmax, TRandom *rng=nullptr, Option_t *opt=nullptr) override;  Return a random number following this function shape. ;  ; Double_t GetRandom (TRandom *rng=nullptr, Option",MatchSource.WIKI,doc/master/classTF3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTF3.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
Integrability,interface,interface,". ROOT: TFeldmanCousins Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFeldmanCousins Class ReferenceMath » Legacy Physics Classes. ; Legacy Code TFeldmanCousins is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TFeldmanCousins might still be a valid solution. Consider switching to RooStats for non-trivial cases. ; Class to calculate the CL upper limit using the Feldman-Cousins method as described in PRD V57 #7, p3873-3889; The default confidence interval calculated using this method is 90% This is set either by having a default the constructor, or using the appropriate fraction when instantiating an object of this class (e.g. 0.9); The simple extension to a gaussian resolution function bounded at zero has not been addressed as yet -> ‘time is of the essence’ as they write on the wall of the maze in that classic game ...; VARIABLES THAT CAN BE ALTERED; => depending on your desired precision: The initial values of fMuMin, fMuMax, fMuStep and fNMax are those used in the PRD: fMuMin = 0.0; fMuMax = 50.0; fMuStep= 0.005; TFeldmanCousins::fMuMaxDouble_t fMuMaxDefinition TFeldmanCousins.h:55; TFeldmanCousins::fMuStepDouble_t fMuStepDefinition TFeldmanCousins.h:56; TFeldmanCousins::fMuMinDouble_t fMuMinDefinition TFeldmanCousins.h:54; but there is total flexibility in changing this should you desire.; see example of use in $ROOTSYS/tutorials/math/FeldmanCousins.C; see note about: ""Should I use TRolke, TFeldmanCousins, TLimit?"" in the TRolke class description.; Author: Adrian Bevan, Liverpool University; Copyright Liverpool University 2001 bevan.nosp@m.@sla.nosp@m.c.sta.nosp@m.nfor.nosp@m.d.edu ; Definition at line 47 of file TFeldman",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
Modifiability,inherit,inherited,";  given Nobserved and Nbackground, try different values of mu that give upper limits that are consistent with Nobserved. ;  ; Double_t GetCL (void) const;  ; Double_t GetLowerLimit (void) const;  ; Double_t GetMuMax (void) const;  ; Double_t GetMuMin (void) const;  ; Double_t GetMuStep (void) const;  ; Double_t GetNbackground (void) const;  ; Double_t GetNMax (void) const;  ; Double_t GetNobserved (void) const;  ; Double_t GetUpperLimit (void) const;  ; TClass * IsA () const override;  ; void SetCL (Double_t newCL);  ; void SetMuMax (Double_t newMax=50.0);  Set maximum value of signal to use in calculating the tables. ;  ; void SetMuMin (Double_t newMin=0.0);  ; void SetMuStep (Double_t newMuStep=0.005);  Set the step in signal to use when generating tables. ;  ; void SetNbackground (Double_t Nbg);  ; void SetNobserved (Double_t NObs);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
Usability,simpl,simple,"  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFeldmanCousins Class ReferenceMath » Legacy Physics Classes. ; Legacy Code TFeldmanCousins is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TFeldmanCousins might still be a valid solution. Consider switching to RooStats for non-trivial cases. ; Class to calculate the CL upper limit using the Feldman-Cousins method as described in PRD V57 #7, p3873-3889; The default confidence interval calculated using this method is 90% This is set either by having a default the constructor, or using the appropriate fraction when instantiating an object of this class (e.g. 0.9); The simple extension to a gaussian resolution function bounded at zero has not been addressed as yet -> ‘time is of the essence’ as they write on the wall of the maze in that classic game ...; VARIABLES THAT CAN BE ALTERED; => depending on your desired precision: The initial values of fMuMin, fMuMax, fMuStep and fNMax are those used in the PRD: fMuMin = 0.0; fMuMax = 50.0; fMuStep= 0.005; TFeldmanCousins::fMuMaxDouble_t fMuMaxDefinition TFeldmanCousins.h:55; TFeldmanCousins::fMuStepDouble_t fMuStepDefinition TFeldmanCousins.h:56; TFeldmanCousins::fMuMinDouble_t fMuMinDefinition TFeldmanCousins.h:54; but there is total flexibility in changing this should you desire.; see example of use in $ROOTSYS/tutorials/math/FeldmanCousins.C; see note about: ""Should I use TRolke, TFeldmanCousins, TLimit?"" in the TRolke class description.; Author: Adrian Bevan, Liverpool University; Copyright Liverpool University 2001 bevan.nosp@m.@sla.nosp@m.c.sta.nosp@m.nfor.nosp@m.d.edu ; Definition at line 47 of file TFeldmanCousins.h. Public Member Functions;  TFeldmanCousins (Double_t newCL=0.9, TStrin",MatchSource.WIKI,doc/master/classTFeldmanCousins.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFeldmanCousins.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
Energy Efficiency,allocate,allocate,". ROOT: TFFTComplex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplex Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented. Computes complex input/output discrete Fourier transforms (DFT) in one or more dimensions. For the detailed information on the computed transforms please refer to the FFTW manual, chapter ""What FFTW really computes"".; How to use it:. Create an instance of TFFTComplex - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointComplex() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags or sign, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size . Definition at line 20 of file TFFTComplex.h. Public Member Functions;  TFFTComplex ();  default ;  ;  TFFTComplex (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplex (Int_t ndim, Int_t *n, Bool_t inPlace=kFALSE);  For multidim. ;  ;  ~TFFTComplex () override;  Destroys the data arrays and the plan. ;  ; Int_t * GetN () const override;  ; Int_t GetNdim () const override;  ; void GetPointComplex (const Int_t *ipoint, Dou",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
Integrability,interface,interface,". ROOT: TFFTComplex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplex Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented. Computes complex input/output discrete Fourier transforms (DFT) in one or more dimensions. For the detailed information on the computed transforms please refer to the FFTW manual, chapter ""What FFTW really computes"".; How to use it:. Create an instance of TFFTComplex - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointComplex() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags or sign, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size . Definition at line 20 of file TFFTComplex.h. Public Member Functions;  TFFTComplex ();  default ;  ;  TFFTComplex (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplex (Int_t ndim, Int_t *n, Bool_t inPlace=kFALSE);  For multidim. ;  ;  ~TFFTComplex () override;  Destroys the data arrays and the plan. ;  ; Int_t * GetN () const override;  ; Int_t GetNdim () const override;  ; void GetPointComplex (const Int_t *ipoint, Dou",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
Modifiability,inherit,inherited,"t_t sign, const Int_t *) override;  Creates the fftw-plan. ;  ; TClass * IsA () const override;  ; Bool_t IsInplace () const override;  ; void SetPoint (const Int_t *ipoint, Double_t re, Double_t im=0) override;  For multidim. transforms. Sets real and imaginary parts of point # ipoint. ;  ; void SetPoint (Int_t ipoint, Double_t re, Double_t im=0) override;  sets real and imaginary parts of point # ipoint ;  ; void SetPointComplex (Int_t ipoint, TComplex &c) override;  ; void SetPoints (const Double_t *data) override;  set all points. ;  ; void SetPointsComplex (const Double_t *re, const Double_t *im) override;  set all points. the values are copied ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform () override;  Computes the transform, specified in Init() function. ;  ;  Public Member Functions inherited from TVirtualFFT;  TVirtualFFT ();  ; virtual ~TVirtualFFT ();  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual vo",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
Performance,perform,performance,"tual . Implements TVirtualFFT.; Definition at line 45 of file TFFTComplex.h. ◆ GetSize(). virtual Int_t TFFTComplex::GetSize ; (; ); const. inlinevirtual . Definition at line 43 of file TFFTComplex.h. ◆ GetTransformFlag(). Option_t * TFFTComplex::GetTransformFlag ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 46 of file TFFTComplex.h. ◆ GetType(). Option_t * TFFTComplex::GetType ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 44 of file TFFTComplex.h. ◆ Init(). void TFFTComplex::Init ; (; Option_t * ; flags, . Int_t ; sign, . const Int_t * ;  . ). overridevirtual . Creates the fftw-plan. ; NOTE: input and output arrays are overwritten during initialisation, so don't set any points, before running this function!!!!!; 2nd parameter: +1; Argument kind is dummy and doesn't need to be specified; Possible flag_options:; ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found This option should be chosen depending on how many transforms of the same size and type are going to be done. Planning is only done once, for the first transform of this size and type. . Implements TVirtualFFT.; Definition at line 140 of file TFFTComplex.cxx. ◆ IsA(). TClass * TFFTComplex::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 65 of file TFFTComplex.h. ◆ IsInplace(). Bool_t TFFTComplex::IsInplace ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 47 of file TFFTComplex.h. ◆ MapFlag(). UInt_t TFFTComplex::MapFlag ; (; Option_t * ; flag). protected . allowed options: . ""ES"" - FFTW_ESTIMATE; ""M"" - FFTW_MEASURE; ""P"" - FFTW_PATIENT; ""EX"" - FFTW",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTFFTComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplex.html
Availability,redundant,redundant,". ROOT: TFFTComplexReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplexReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes the inverse of the real-to-complex transforms (class TFFTRealComplex) taking complex input (storing the non-redundant half of a logically Hermitian array) to real output (see FFTW manual for more details); How to use it:; Create an instance of TFFTComplexReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointReal() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size; In Complex to Real transform the input array is destroyed. It cannot then be retrieved when using the Get's methods. . Definition at line 21 of file TFFTComplexReal.h. Public Member Functions;  TFFTComplexReal ();  default ;  ;  TFFTComplexReal (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplexReal (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
Energy Efficiency,allocate,allocate,". ROOT: TFFTComplexReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplexReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes the inverse of the real-to-complex transforms (class TFFTRealComplex) taking complex input (storing the non-redundant half of a logically Hermitian array) to real output (see FFTW manual for more details); How to use it:; Create an instance of TFFTComplexReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointReal() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size; In Complex to Real transform the input array is destroyed. It cannot then be retrieved when using the Get's methods. . Definition at line 21 of file TFFTComplexReal.h. Public Member Functions;  TFFTComplexReal ();  default ;  ;  TFFTComplexReal (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplexReal (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
Integrability,interface,interface,". ROOT: TFFTComplexReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplexReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes the inverse of the real-to-complex transforms (class TFFTRealComplex) taking complex input (storing the non-redundant half of a logically Hermitian array) to real output (see FFTW manual for more details); How to use it:; Create an instance of TFFTComplexReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointReal() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size; In Complex to Real transform the input array is destroyed. It cannot then be retrieved when using the Get's methods. . Definition at line 21 of file TFFTComplexReal.h. Public Member Functions;  TFFTComplexReal ();  default ;  ;  TFFTComplexReal (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplexReal (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
Modifiability,inherit,inherited,"  ; void SetPoint (const Int_t *ipoint, Double_t re, Double_t im=0) override;  Set the point #ipoint. ;  ; void SetPoint (Int_t ipoint, Double_t re, Double_t im=0) override;  since the input must be complex-Hermitian, if the ipoint > n/2, the according point before n/2 is set to (re, -im) ;  ; void SetPointComplex (Int_t ipoint, TComplex &c) override;  since the input must be complex-Hermitian, if the ipoint > n/2, the according point before n/2 is set to (re, -im) ;  ; void SetPoints (const Double_t *data) override;  set all points. ;  ; void SetPointsComplex (const Double_t *re, const Double_t *im) override;  Set all points. The values are copied. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform () override;  Computes the transform, specified in Init() function. ;  ;  Public Member Functions inherited from TVirtualFFT;  TVirtualFFT ();  ; virtual ~TVirtualFFT ();  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual vo",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
Performance,perform,performance,"l.h. ◆ GetSize(). virtual Int_t TFFTComplexReal::GetSize ; (; ); const. inlinevirtual . Definition at line 42 of file TFFTComplexReal.h. ◆ GetTransformFlag(). Option_t * TFFTComplexReal::GetTransformFlag ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 47 of file TFFTComplexReal.h. ◆ GetType(). Option_t * TFFTComplexReal::GetType ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 45 of file TFFTComplexReal.h. ◆ Init(). void TFFTComplexReal::Init ; (; Option_t * ; flags, . Int_t ; , . const Int_t * ;  . ). overridevirtual . Creates the fftw-plan. ; NOTE: input and output arrays are overwritten during initialisation, so don't set any points, before running this function!!!!!; Arguments sign and kind are dummy and not need to be specified Possible flag_options:. ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found. This option should be chosen depending on how many transforms of the same size and type are going to be done. Planning is only done once, for the first transform of this size and type. ; Implements TVirtualFFT.; Definition at line 148 of file TFFTComplexReal.cxx. ◆ IsA(). TClass * TFFTComplexReal::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 66 of file TFFTComplexReal.h. ◆ IsInplace(). Bool_t TFFTComplexReal::IsInplace ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 48 of file TFFTComplexReal.h. ◆ MapFlag(). UInt_t TFFTComplexReal::MapFlag ; (; Option_t * ; flag). protected . allowed options: ""ES"" - FFTW_ESTIMATE ""M"" - FFTW_MEASURE ""P"" - FFTW_PATIENT ""EX"" - FFTW_EXHAUSTIVE ; Definition at line 390 of f",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
Safety,redund,redundant,". ROOT: TFFTComplexReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplexReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes the inverse of the real-to-complex transforms (class TFFTRealComplex) taking complex input (storing the non-redundant half of a logically Hermitian array) to real output (see FFTW manual for more details); How to use it:; Create an instance of TFFTComplexReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointReal() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size; In Complex to Real transform the input array is destroyed. It cannot then be retrieved when using the Get's methods. . Definition at line 21 of file TFFTComplexReal.h. Public Member Functions;  TFFTComplexReal ();  default ;  ;  TFFTComplexReal (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplexReal (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
Testability,log,logically,". ROOT: TFFTComplexReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTComplexReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes the inverse of the real-to-complex transforms (class TFFTRealComplex) taking complex input (storing the non-redundant half of a logically Hermitian array) to real output (see FFTW manual for more details); How to use it:; Create an instance of TFFTComplexReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings; Set the data (via SetPoints(), SetPoint() or SetPointComplex() functions); Run the Transform() function; Get the output (via GetPoints(), GetPoint() or GetPointReal() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size; In Complex to Real transform the input array is destroyed. It cannot then be retrieved when using the Get's methods. . Definition at line 21 of file TFFTComplexReal.h. Public Member Functions;  TFFTComplexReal ();  default ;  ;  TFFTComplexReal (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTComplexReal (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in",MatchSource.WIKI,doc/master/classTFFTComplexReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTComplexReal.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
Energy Efficiency,allocate,allocate,"hes. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes transforms called r2r in FFTW manual:; transforms of real input and output in ""halfcomplex"" format i.e. real and imaginary parts for a transform of size n stored as (r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1); discrete Hartley transform; sine and cosine transforms (DCT-I,II,III,IV and DST-I,II,III,IV) For the detailed information on the computed transforms please refer to the FFTW manual, chapter ""What FFTW really computes"". How to use it:; Create an instance of TFFTReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings (see function comments for possible kind parameters); Set the data (via SetPoints()or SetPoint() functions); Run the Transform() function; Get the output (via GetPoints() or GetPoint() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but of different kind (or with different flags), rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function!; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled BY:; transform size (N) for R2HC, HC2R, DHT transforms; 2*(N-1) for DCT-I (REDFT00); 2*(N+1) for DST-I (RODFT00); 2*N for the remaining transforms. Transform inverses:; R2HC<-->HC2R; DHT<-->DHT; DCT-I<-->DCT-I; DCT-II<-->DCT-III; DCT-IV<-->DCT-IV; DST-I<-->DST-I; DST-II<-->DST-III; DST-IV<-->DST-IV . Definition at line 20 of file TFFTReal.h. Public Member Functions;  TFFTReal ();  default ;  ;  TFFTReal",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
Integrability,interface,interface,". ROOT: TFFTReal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes transforms called r2r in FFTW manual:; transforms of real input and output in ""halfcomplex"" format i.e. real and imaginary parts for a transform of size n stored as (r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1); discrete Hartley transform; sine and cosine transforms (DCT-I,II,III,IV and DST-I,II,III,IV) For the detailed information on the computed transforms please refer to the FFTW manual, chapter ""What FFTW really computes"". How to use it:; Create an instance of TFFTReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings (see function comments for possible kind parameters); Set the data (via SetPoints()or SetPoint() functions); Run the Transform() function; Get the output (via GetPoints() or GetPoint() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but of different kind (or with different flags), rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function!; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled BY:; transform size (N) for R2HC, HC2R, DHT transforms; 2*(N-1) for DCT-I (REDFT00); 2*(N+1) for DST-I (RODFT00); 2*N for the remaining transforms. Transform inverses:; R2HC<-->HC2R; DHT<-->DHT; DCT-I<-->DCT-I; DCT-II<-->DCT-III; DCT-IV<-->DCT-IV; DST-I<-->DST-I; DST-II<-->DST-III; DST-IV<-->DST-",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
Modifiability,inherit,inherited,"onst override;  Returns the type of the transform. ;  ; void Init (Option_t *flags, Int_t sign, const Int_t *kind) override;  Creates the fftw-plan. ;  ; TClass * IsA () const override;  ; Bool_t IsInplace () const override;  ; void SetPoint (const Int_t *ipoint, Double_t re, Double_t) override;  Since multidimensional R2HC and HC2R transforms are not supported, third parameter is dummy. ;  ; void SetPoint (Int_t ipoint, Double_t re, Double_t im=0) override;  ; void SetPointComplex (Int_t, TComplex &) override;  ; void SetPoints (const Double_t *data) override;  Sets all points. ;  ; void SetPointsComplex (const Double_t *, const Double_t *) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform () override;  Computes the transform, specified in Init() function. ;  ;  Public Member Functions inherited from TVirtualFFT;  TVirtualFFT ();  ; virtual ~TVirtualFFT ();  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual vo",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
Performance,perform,performance,".h. ◆ GetSize(). virtual Int_t TFFTReal::GetSize ; (; ); const. inlinevirtual . Definition at line 42 of file TFFTReal.h. ◆ GetTransformFlag(). Option_t * TFFTReal::GetTransformFlag ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 47 of file TFFTReal.h. ◆ GetType(). Option_t * TFFTReal::GetType ; (; ); const. overridevirtual . Returns the type of the transform. ; Implements TVirtualFFT.; Definition at line 210 of file TFFTReal.cxx. ◆ Init(). void TFFTReal::Init ; (; Option_t * ; flags, . Int_t ; sign, . const Int_t * ; kind . ). overridevirtual . Creates the fftw-plan. ; NOTE: input and output arrays are overwritten during initialisation, so don't set any points, before running this function!!!!!; 1st parameter:; Possible flag_options:. ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found; This option should be chosen depending on how many transforms of the same size and type are going to be done. Planning is only done once, for the first transform of this size and type. 2nd parameter:; is dummy and doesn't need to be specified; 3rd parameter:; transform kind for each dimension 4 different kinds of sine and cosine transforms are available; DCT-I - kind=0; DCT-II - kind=1; DCT-III - kind=2; DCT-IV - kind=3; DST-I - kind=4; DST-II - kind=5; DSTIII - kind=6; DSTIV - kind=7 . Implements TVirtualFFT.; Definition at line 176 of file TFFTReal.cxx. ◆ IsA(). TClass * TFFTReal::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 69 of file TFFTReal.h. ◆ IsInplace(). Bool_t TFFTReal::IsInplace ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 48 of file TFFTRea",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTFFTReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTReal.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
Energy Efficiency,allocate,allocate,". ROOT: TFFTRealComplex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTRealComplex Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes a real input/complex output discrete Fourier transform in 1 or more dimensions. However, only out-of-place transforms are now supported for transforms in more than 1 dimension. For detailed information about the computed transforms, please refer to the FFTW manual; How to use it:; Create an instance of TFFTRealComplex - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings (see function comments for possible kind parameters); Set the data (via SetPoints()or SetPoint() functions); Run the Transform() function; Get the output (via GetPoints() or GetPoint() functions); Repeat steps 3)-5) as needed For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5). NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size . Definition at line 20 of file TFFTRealComplex.h. Public Member Functions;  TFFTRealComplex ();  default ;  ;  TFFTRealComplex (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTRealComplex (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in each dimension. ;  ;  ~TFFTRealComplex ()",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
Integrability,interface,interface,". ROOT: TFFTRealComplex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTRealComplex Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes a real input/complex output discrete Fourier transform in 1 or more dimensions. However, only out-of-place transforms are now supported for transforms in more than 1 dimension. For detailed information about the computed transforms, please refer to the FFTW manual; How to use it:; Create an instance of TFFTRealComplex - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings (see function comments for possible kind parameters); Set the data (via SetPoints()or SetPoint() functions); Run the Transform() function; Get the output (via GetPoints() or GetPoint() functions); Repeat steps 3)-5) as needed For a transform of the same size, but with different flags, rerun the Init() function and continue with steps 3)-5). NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled by the transform size . Definition at line 20 of file TFFTRealComplex.h. Public Member Functions;  TFFTRealComplex ();  default ;  ;  TFFTRealComplex (Int_t n, Bool_t inPlace);  For 1d transforms Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. ;  ;  TFFTRealComplex (Int_t ndim, Int_t *n, Bool_t inPlace);  For ndim-dimensional transforms Second argument contains sizes of the transform in each dimension. ;  ;  ~TFFTRealComplex ()",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
Modifiability,inherit,inherited,"ates the fftw-plan. ;  ; TClass * IsA () const override;  ; Bool_t IsInplace () const override;  ; void SetPoint (const Int_t *ipoint, Double_t re, Double_t im=0) override;  For multidimensional transforms. Set the point #ipoint ;  ; void SetPoint (Int_t ipoint, Double_t re, Double_t im=0) override;  Set the point #ipoint ;  ; void SetPointComplex (Int_t ipoint, TComplex &c) override;  Sets the point #ipoint (only the real part of the argument is taken) ;  ; void SetPoints (const Double_t *data) override;  Set all input points. ;  ; void SetPointsComplex (const Double_t *re, const Double_t *im) override;  Set all points. Only the real array is used. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Transform () override;  Computes the transform, specified in Init() function. ;  ;  Public Member Functions inherited from TVirtualFFT;  TVirtualFFT ();  ; virtual ~TVirtualFFT ();  destructor ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual vo",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
Performance,perform,performance,"x.h. ◆ GetSize(). virtual Int_t TFFTRealComplex::GetSize ; (; ); const. inlinevirtual . Definition at line 40 of file TFFTRealComplex.h. ◆ GetTransformFlag(). Option_t * TFFTRealComplex::GetTransformFlag ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 45 of file TFFTRealComplex.h. ◆ GetType(). Option_t * TFFTRealComplex::GetType ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 43 of file TFFTRealComplex.h. ◆ Init(). void TFFTRealComplex::Init ; (; Option_t * ; flags, . Int_t ; , . const Int_t * ;  . ). overridevirtual . Creates the fftw-plan. ; NOTE: input and output arrays are overwritten during initialisation, so don't set any points, before running this function!!!!!; Arguments sign and kind are dummy and not need to be specified Possible flag_options:. ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found. This option should be chosen depending on how many transforms of the same size and type are going to be done. Planning is only done once, for the first transform of this size and type. ; Implements TVirtualFFT.; Definition at line 152 of file TFFTRealComplex.cxx. ◆ IsA(). TClass * TFFTRealComplex::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 64 of file TFFTRealComplex.h. ◆ IsInplace(). Bool_t TFFTRealComplex::IsInplace ; (; ); const. inlineoverridevirtual . Implements TVirtualFFT.; Definition at line 46 of file TFFTRealComplex.h. ◆ MapFlag(). UInt_t TFFTRealComplex::MapFlag ; (; Option_t * ; flag). protected . allowed options: ""ES"" ""M"" ""P"" ""EX"" ; Definition at line 489 of file TFFTRealComplex.cxx. ◆ SetPoint() [1/2]. void TFFTRealComple",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTFFTRealComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFFTRealComplex.html
Availability,error,error,"; DirReadKeys(TDirectory *)TFileinlineprotectedvirtual; DirWriteHeader(TDirectory *)TFileinlineprotectedvirtual; DirWriteKeys(TDirectory *)TFileinlineprotectedvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTFilevirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawMap(const char *keys=""*"", Option_t *option="""")TFilevirtual; Dump() constTObjectvirtual; EAsyncOpenStatus enum nameTFile; ECacheAction enum nameTFile; EDeprecatedStatusBits enum nameTObject; EFileType enum nameTFile; EOpenTimeOut enum nameTFile; ERelativeTo enum nameTFile; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTFile; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; fArchiveTFileprotected; fArchiveOffsetTFileprotected; fAsyncHandleTFileprotected; fAsyncOpenStatusTFileprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBEGINTFileprotected; fBitsTObjectprivate; fBufferSizeTDirectoryFileprotected; fBytesReadTFileprotected; fBytesReadExtraTFileprotected; fBytesWriteTFileprotected; fCacheReadTFileprotected; fCacheReadMapTFileprotected; fCacheWriteTFileprotected; fClassIndexTFileprotected; fCompressTFileprotected; fContextTDirectoryprotected; fContextPegTDirectoryprotected; fDTFileprotected; fDatimeCTDirectoryFileprotected; fDatimeMTDirectoryFileprotected; fENDTFileprotected; fFileTDirectoryFileprotected; fFreeTFileprotected; fgAddDirectoryTDirectoryprotectedstatic; fgAsyncOpenRequestsTFileprotectedstatic; fgBytesReadTFileprotectedstatic; fgBytesWriteTFileprotectedstatic; fgCacheFileDirTFileprotectedstatic; fgCacheFileDisconnectedTFileprotectedstatic; fgCacheFileFo",MatchSource.WIKI,doc/master/classTFile-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TFile Member List. This is the complete list of members for TFile, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TObject *obj, Bool_t replace=kFALSE) overrideTDirectoryFileinlinevirtual; AddDirectory(Bool_t add=kTRUE)TDirectorystatic; AddDirectoryStatus()TDirectorystatic; AddToTObjectTable(TObject *)TObjectprivatestatic; Append(TObject *obj, Bool_t replace=kFALSE) overrideTDirectoryFilevirtual; AppendKey(TKey *key) overrideTDirectoryFilevirtual; AppendPad(Option_t *option="""")TObjectvirtual; AsyncOpen(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)TFilestatic; Browse(TBrowser *b) overrideTDirectoryFilevirtual; Build(TFile *motherFile=nullptr, TDirectory *motherDir=nullptr) overrideTDirectoryFileinlinevirtual; BuildDirectory(TFile *motherFile, TDirectory *motherDir)TDirectoryprotected; BuildDirectoryFile(TFile *motherFile, TDirectory *motherDir)TDirectoryFileprotected; Cd(const char *path)TDirectorystatic; cd() overrideTDirectoryFilevirtual; cd(const char *path) overrideTDirectoryFilevirtual; Cd1(const char *path)TDirectoryprotectedstatic; cd1(const char *path)TDirectoryprotected; CheckedHash()TObjectinline; Class()TFilestatic; Class_Name()TFilestatic; Class_Version()TFileinlinestatic; ClassName() constTObjectvirtual; CleanTargets()TDirectoryFileprotected; Clear(Option_t *option="""") overrideTDirectoryvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; CloneObject(const TObject *obj, Bool_t autoadd=kTRUE) overrideTDirectoryFilevirtual; Close(Option_t *option="""") overrideTFilevirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &) const overrideTFileinlinevirtual; Cp(const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000)TFilevirtual; Cp(const char *src, const char *dst, Boo",MatchSource.WIKI,doc/master/classTFile-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile-members.html
Performance,cache,cacheDir,"ecursiveRemove(TObject *obj) overrideTDirectoryvirtual; RegisterContext(TContext *ctxt)TDirectoryprotected; RegisterGDirectory(SharedGDirectory_t &ptr)TDirectoryprotected; Remove(TObject *)TDirectoryvirtual; ReOpen(Option_t *mode)TFilevirtual; ResetAfterMerge(TFileMergeInfo *)TDirectoryFilevirtual; ResetBit(UInt_t f)TObjectinline; ResetErrno() constTFilevirtual; rmdir(const char *name) overrideTDirectoryFilevirtual; Save() overrideTDirectoryFilevirtual; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SaveObjectAs(const TObject *obj, const char *filename="""", Option_t *option="""") const overrideTDirectoryFilevirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SaveSelf(Bool_t force=kFALSE) overrideTDirectoryFilevirtual; Seek(Long64_t offset, ERelativeTo pos=kBeg)TFilevirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetBufferSize(Int_t bufsize) overrideTDirectoryFilevirtual; SetCacheFileDir(std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE)TFilestatic; SetCacheRead(TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect)TFilevirtual; SetCacheWrite(TFileCacheWrite *cache)TFilevirtual; SetCompressionAlgorithm(Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal)TFilevirtual; SetCompressionLevel(Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin)TFilevirtual; SetCompressionSettings(Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault)TFilevirtual; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetEND(Long64_t last)TFileinlinevirtual; SetFileBytesRead(Long64_t bytes=0)TFilestatic; SetFileBytesWritten(Long64_t bytes=0)TFilestatic; SetFileReadCalls(Int_t readcalls=0)TFilestatic; SetModified() overrideTDirectoryFileinlinevirtual; SetMother(TObject *mother)TDirectoryinlinevirtual; SetName(const char *newname) overrideTDirectoryvirtual; SetNameTitle(const char *name",MatchSource.WIKI,doc/master/classTFile-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile-members.html
Safety,timeout,timeout,"acheAction action=kDisconnect)TFilevirtual; SetCacheWrite(TFileCacheWrite *cache)TFilevirtual; SetCompressionAlgorithm(Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal)TFilevirtual; SetCompressionLevel(Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin)TFilevirtual; SetCompressionSettings(Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault)TFilevirtual; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetEND(Long64_t last)TFileinlinevirtual; SetFileBytesRead(Long64_t bytes=0)TFilestatic; SetFileBytesWritten(Long64_t bytes=0)TFilestatic; SetFileReadCalls(Int_t readcalls=0)TFilestatic; SetModified() overrideTDirectoryFileinlinevirtual; SetMother(TObject *mother)TDirectoryinlinevirtual; SetName(const char *newname) overrideTDirectoryvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetOffset(Long64_t offset, ERelativeTo pos=kBeg)TFilevirtual; SetOnlyStaged(Bool_t onlystaged)TFilestatic; SetOpenTimeout(UInt_t timeout)TFilestatic; SetOption(Option_t *option="">"")TFileinlinevirtual; SetReadaheadSize(Int_t bufsize=256000)TFilestatic; SetReadCalls(Int_t readcalls=0)TFileinlinevirtual; SetReadStreamerInfo(Bool_t readinfo=kTRUE)TFilestatic; SetSeekDir(Long64_t v) overrideTDirectoryFileinlinevirtual; SetTitle(const char *title="""")TNamedvirtual; SetTRefAction(TObject *ref, TObject *parent) overrideTDirectoryFilevirtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetWritable(Bool_t writable=kTRUE) overrideTDirectoryFilevirtual; SharedGDirectory_t typedefTDirectoryprotected; ShowStreamerInfo()TFilevirtual; ShrinkCacheFileDir(Long64_t shrinkSize, Long_t cleanupInteval=0)TFilestatic; Sizeof() const overrideTFilevirtual; Streamer(TBuffer &) overrideTFilevirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TFileinline; SumBuffer(Int_t bufsize)TFile; SysClose(Int_t fd)TFileprotectedvirtual; SysError(const char *method, const char *msgfmt,.",MatchSource.WIKI,doc/master/classTFile-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile-members.html
Availability,recover,recover,"(const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; void Print (Option_t *option="""") const override;  Print all objects in the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void ResetErrno () const;  Method resetting the errno. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
Deployability,update,update,"ementation. and one header per class that is not nested inside another class. The header file name is the fully qualified name of the class after all the special characters ""<>,:"" are replaced by underscored. For example for std::pair<edm::Vertex,int> the file name is pair_edm__Vertex_int_.h. In the generated classes, map, multimap when the first template parameter is a class are replaced by a vector of pair. set and multiset when the tempalte parameter is a class are replaced by a vector. This is required since we do not have the code needed to order and/or compare the object of the classes. This is a quick explanation of the options available: . Option Details . new (default) A new directory dirname is created. If dirname already exist, an error message is printed and the function returns. . recreate If dirname does not exist, it is created (like in ""new""). If dirname already exist, all existing files in dirname are deleted before creating the new files. . update New classes are added to the existing directory. Existing classes with the same name are replaced by the new definition. If the directory dirname doest not exist, same effect as ""new"". . genreflex Use genreflex rather than rootcint to generate the dictionary. . par Create a PAR file with the minimal set of code needed to read the content of the ROOT file. The name of the PAR file is basename(dirname), with extension '.par' enforced; the PAR file will be created at dirname(dirname). . If, in addition to one of the 3 above options, the option ""+"" is specified, the function will generate:; a script called MAKEP to build the shared lib; a dirnameLinkDef.h file; rootcint will be run to generate a dirnameProjectDict.cxx file; dirnameProjectDict.cxx will be compiled with the current options in compiledata.h; a shared lib dirname.so will be created. If the option ""++"" is specified, the generated shared lib is dynamically linked with the current executable module. If the option ""+"" and ""nocompile"" are specified, t",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
Integrability,message,message," *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer)",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
Modifiability,inherit,inherited,"essed object . 11->14 Datime Date and time when object was written to file . 15->16 KeyLen Length of the key structure (in bytes) . 17->18 Cycle Cycle of key . 19->22 [19->26] SeekKey Pointer to record itself (consistency check) . 23->26 [27->34] SeekPdir Pointer to directory header . 27->27 [35->35] lname Number of bytes in the class name . 28->.. [36->..] ClassName Object Class Name . ..->.. lname Number of bytes in the object name . ..->.. Name lName bytes with the name of the object . ..->.. lTitle Number of bytes in the object title . ..->.. Title Title of the object . --—> DATA Data bytes associated to the object . The structure of a directory is shown in TDirectoryFile::TDirectoryFile. PyROOT; In the same way as for TDirectory, it is possible to get the content of a TFile object with the familiar item-getting syntax. For more information, please refer to the TDirectory documentation.; In addition, TFile instances can be inspected via the Get method, a feature that is inherited from TDirectoryFile (please see the documentation of TDirectoryFile for examples on how to use it).; In order to write objects into a TFile, the WriteObject Python method can be used (more information in the documentation of TDirectoryFile).; PyROOT modifies the TFile constructor and the TFile::Open method to make them behave in a more pythonic way. In particular, they both throw an OSError if there was a problem accessing the file (e.g. non-existent or corrupted file).; This class can also be used as a context manager, with the goal of opening a file and doing some quick manipulations of the objects inside it. The TFile::Close method will be automatically called at the end of the context. For example: from ROOT import TFile; with TFile(""file1.root"", ""recreate"") as outfile:; hout = ROOT.TH1F(...); outfile.WriteObject(hout, ""myhisto""); TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; Since the file is close",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
Performance,cache,cache,"Int_t bufsize);  Creates key for object and converts data to buffer. ;  ; void Delete (const char *namecycle="""") override;  Delete object namecycle. ;  ; void Draw (Option_t *option="""") override;  Fill Graphics Structure and Paint. ;  ; virtual void DrawMap (const char *keys=""*"", Option_t *option="""");  Draw map of objects in this file. ;  ; void FillBuffer (char *&buffer) override;  Encode file output buffer. ;  ; virtual void Flush ();  Synchronize a file's in-memory and on-disk states. ;  ; TArchiveFile * GetArchive () const;  ; Long64_t GetArchiveOffset () const;  ; Int_t GetBestBuffer () const;  Return the best buffer size of objects on this file. ;  ; virtual Long64_t GetBytesRead () const;  ; virtual Long64_t GetBytesReadExtra () const;  ; virtual Int_t GetBytesToPrefetch () const;  Max number of bytes to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbyt",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
Safety,timeout,timeout,"lptr); ; # Use the histogram afterwards; print(hin.GetName()); NoteThe TFile::Close method automatically sets the current directory in the program to the gROOT object. If you want to restore the status of the current directory to some other file that was opened prior to the with statement, you can use the context manager functionality offered by TContext. Definition at line 53 of file TFile.h. Classes; struct  InfoListRet;  Simple struct of the return value of GetStreamerInfoListImpl. More...;  . Public Types; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ; ",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
Security,access,accessing,".. lname Number of bytes in the object name . ..->.. Name lName bytes with the name of the object . ..->.. lTitle Number of bytes in the object title . ..->.. Title Title of the object . --—> DATA Data bytes associated to the object . The structure of a directory is shown in TDirectoryFile::TDirectoryFile. PyROOT; In the same way as for TDirectory, it is possible to get the content of a TFile object with the familiar item-getting syntax. For more information, please refer to the TDirectory documentation.; In addition, TFile instances can be inspected via the Get method, a feature that is inherited from TDirectoryFile (please see the documentation of TDirectoryFile for examples on how to use it).; In order to write objects into a TFile, the WriteObject Python method can be used (more information in the documentation of TDirectoryFile).; PyROOT modifies the TFile constructor and the TFile::Open method to make them behave in a more pythonic way. In particular, they both throw an OSError if there was a problem accessing the file (e.g. non-existent or corrupted file).; This class can also be used as a context manager, with the goal of opening a file and doing some quick manipulations of the objects inside it. The TFile::Close method will be automatically called at the end of the context. For example: from ROOT import TFile; with TFile(""file1.root"", ""recreate"") as outfile:; hout = ROOT.TH1F(...); outfile.WriteObject(hout, ""myhisto""); TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; Since the file is closed at the end of the context, all objects created or read from the file inside the context are not accessible anymore in the application (but they will be stored in the file if they were written to it). ROOT objects like histograms can be detached from a file with the SetDirectory method. This will leave the object untouched so that it can be accessed after the end of the context: import ROO",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
Testability,log,logical,". ROOT: TFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; TFile Class ReferenceInput/Output Library. ; A ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-like logical structure, possibly including subdirectory hierarchies. ; See alsoInput/Output Library . ROOT files layout (or io/doc/TFile folder in your codebase). ROOT file data format specification. A ROOT file is composed of a header, followed by consecutive data records (TKey instances) with a well defined format.; The first data record starts at byte fBEGIN (currently set to kBEGIN). Bytes 1->kBEGIN contain the file description, when fVersion >= 1000000 it is a large file (> 2 GB) and the offsets will be 8 bytes long and fUnits will be set to 8:. Byte Range Record Name Description . 1->4 ""root"" Root file identifier . 5->8 fVersion File format version . 9->12 fBEGIN Pointer to first data record . 13->16 [13->20] fEND Pointer to first free word at the EOF . 17->20 [21->28] fSeekFree Pointer to FREE data record . 21->24 [29->32] fNbytesFree Number of bytes in FREE data record . 25->28 [33->36] nfree Number of free data records . 29->32 [37->40] fNbytesName Number of bytes in TNamed at creation time . 33->33 [41->41] fUnits Number of bytes for file pointers . 34->37 [42->45] fCompress Compression level and algorithm . 38->41 [46->53] fSeekInfo Pointer to TStreamerInfo record . 42->45 [54->57] fNbytesInfo Number of bytes in TStreamerInfo record . 46->63 [58->75] fUUID Universal Unique ID . For the purpose of magic bytes in the context of ROOT files' MIME definition, the following additional requirements are introduced:; The value ",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
Usability,clear,clear,"genreflex Use genreflex rather than rootcint to generate the dictionary. . par Create a PAR file with the minimal set of code needed to read the content of the ROOT file. The name of the PAR file is basename(dirname), with extension '.par' enforced; the PAR file will be created at dirname(dirname). . If, in addition to one of the 3 above options, the option ""+"" is specified, the function will generate:; a script called MAKEP to build the shared lib; a dirnameLinkDef.h file; rootcint will be run to generate a dirnameProjectDict.cxx file; dirnameProjectDict.cxx will be compiled with the current options in compiledata.h; a shared lib dirname.so will be created. If the option ""++"" is specified, the generated shared lib is dynamically linked with the current executable module. If the option ""+"" and ""nocompile"" are specified, the utility files are generated as in the option ""+"" but they are not executed. Example: file.MakeProject(""demo"",""*"",""recreate++"");; creates a new directory demo unless it already exist; clear the previous directory content; generate the xxx.h files for all classes xxx found in this file and not yet known to the CINT dictionary.; creates the build script MAKEP; creates a LinkDef.h file; runs rootcint generating demoProjectDict.cxx; compiles demoProjectDict.cxx into demoProjectDict.o; generates a shared lib demo.so; dynamically links the shared lib demo.so to the executable If only the option ""+"" had been specified, one can still link the shared lib to the current executable module with: gSystem->load(""demo/demo.so"");; The following feature is not yet enabled: One can restrict the list of classes to be generated by using expressions like: classes = ""Ali*"" generate code only for classes starting with Ali; classes = ""myClass"" generate code for class MyClass only.; . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2726 of file TFile.cxx. ◆ MakeProjectParMake(). Int_t TFile::MakeProjectParMake ; (; const char * ; pack, . const char * ; filema",MatchSource.WIKI,doc/master/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFile.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFileCacheRead.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileCacheRead.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFileCacheRead.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileCacheRead.html
Modifiability,inherit,inherited,"char *buf, Long64_t pos, Int_t len, Int_t &loc);  Base function for ReadBuffer. ;  ; virtual Int_t ReadBufferExtPrefetch (char *buf, Long64_t pos, Int_t len, Int_t &loc);  prefetch the first block ;  ; virtual void SecondPrefetch (Long64_t, Int_t);  ; virtual void SecondSort ();  Sort buffers to be prefetched in increasing order of positions. ;  ; virtual Int_t SetBufferSize (Long64_t buffersize);  Sets the buffer size. ;  ; virtual void SetEnablePrefetching (Bool_t setPrefetching=kFALSE);  Set the prefetching mode of this file. ;  ; virtual void SetFile (TFile *file, TFile::ECacheAction action=TFile::kDisconnect);  Set the file using this cache and reset the current blocks (if any). ;  ; virtual void SetSkipZip (Bool_t=kTRUE);  ; virtual void Sort ();  Sort buffers to be prefetched in increasing order of positions. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void WaitFinishPrefetch ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (co",MatchSource.WIKI,doc/master/classTFileCacheRead.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileCacheRead.html
Performance,cache,cache,". ROOT: TFileCacheRead Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFileCacheRead Class ReferenceInput/Output Library. ; A cache when reading files over the network. ; A caching system to speed up network I/O, i.e. when there is no operating system caching support (like the buffer cache for local disk I/O). The cache makes sure that every I/O is done with a (large) fixed length buffer thereby avoiding many small I/O's. Currently the read cache system is used by the classes TNetFile, TNetXNGFile and TWebFile (via TFile::ReadBuffers()). When processing TTree, TChain, a specialized class TTreeCache that derives from this class is automatically created. ; Definition at line 22 of file TFileCacheRead.h. Public Member Functions;  TFileCacheRead ();  Default Constructor. ;  ;  TFileCacheRead (TFile *file, Int_t buffersize, TObject *tree=nullptr);  Creates a TFileCacheRead data structure. ;  ;  ~TFileCacheRead () override;  Destructor. ;  ; virtual Int_t AddBranch (const char *, Bool_t=kFALSE);  ; virtual Int_t AddBranch (TBranch *, Bool_t=kFALSE);  ; virtual void AddNoCacheBytesRead (Long64_t len);  ; virtual void AddNoCacheReadCalls (Int_t reads);  ; virtual void Close (Option_t *option="""");  Close out any threads or asynchronous fetches used by the underlying implementation. ;  ; virtual Int_t GetBufferSize () const;  ; virtual Long64_t GetBytesRead () const;  ; virtual Long64_t GetBytesReadExtra () const;  ; TFile * GetFile () const;  ; virtual Long64_t GetNoCacheBytesRead () const;  ; virtual Int_t GetNoCacheReadCalls () const;  ; Int_t GetNseek () const;  ; Int_t GetNtot () const;  ; Long64_t GetPrefetchedBlocks () const;  ; virtual TFilePrefetch * GetPrefetchObj ();  ; virtual Int_t GetReadCalls () const;  ; virtual Int_t GetUnzip",MatchSource.WIKI,doc/master/classTFileCacheRead.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileCacheRead.html
Safety,avoid,avoiding,". ROOT: TFileCacheRead Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFileCacheRead Class ReferenceInput/Output Library. ; A cache when reading files over the network. ; A caching system to speed up network I/O, i.e. when there is no operating system caching support (like the buffer cache for local disk I/O). The cache makes sure that every I/O is done with a (large) fixed length buffer thereby avoiding many small I/O's. Currently the read cache system is used by the classes TNetFile, TNetXNGFile and TWebFile (via TFile::ReadBuffers()). When processing TTree, TChain, a specialized class TTreeCache that derives from this class is automatically created. ; Definition at line 22 of file TFileCacheRead.h. Public Member Functions;  TFileCacheRead ();  Default Constructor. ;  ;  TFileCacheRead (TFile *file, Int_t buffersize, TObject *tree=nullptr);  Creates a TFileCacheRead data structure. ;  ;  ~TFileCacheRead () override;  Destructor. ;  ; virtual Int_t AddBranch (const char *, Bool_t=kFALSE);  ; virtual Int_t AddBranch (TBranch *, Bool_t=kFALSE);  ; virtual void AddNoCacheBytesRead (Long64_t len);  ; virtual void AddNoCacheReadCalls (Int_t reads);  ; virtual void Close (Option_t *option="""");  Close out any threads or asynchronous fetches used by the underlying implementation. ;  ; virtual Int_t GetBufferSize () const;  ; virtual Long64_t GetBytesRead () const;  ; virtual Long64_t GetBytesReadExtra () const;  ; TFile * GetFile () const;  ; virtual Long64_t GetNoCacheBytesRead () const;  ; virtual Int_t GetNoCacheReadCalls () const;  ; Int_t GetNseek () const;  ; Int_t GetNtot () const;  ; Long64_t GetPrefetchedBlocks () const;  ; virtual TFilePrefetch * GetPrefetchObj ();  ; virtual Int_t GetReadCalls () const;  ; virtual Int_t GetUnzip",MatchSource.WIKI,doc/master/classTFileCacheRead.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileCacheRead.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTFileCacheRead.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileCacheRead.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFileCacheWrite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileCacheWrite.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFileCacheWrite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileCacheWrite.html
Modifiability,inherit,inherited,". Public Member Functions;  TFileCacheWrite ();  Default Constructor. ;  ;  TFileCacheWrite (TFile *file, Int_t buffersize);  Creates a TFileCacheWrite data structure. ;  ;  ~TFileCacheWrite () override;  Destructor. ;  ; virtual Bool_t Flush ();  Flush the current write buffer to the file. ;  ; virtual Int_t GetBytesInCache () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print class internal structure. ;  ; virtual Int_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Called by the read cache to check if the requested data is not in the write cache buffer. ;  ; virtual void SetFile (TFile *file);  Set the file using this cache. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t WriteBuffer (const char *buf, Long64_t pos, Int_t len);  Write buffer at position pos in the write buffer. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classTFileCacheWrite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileCacheWrite.html
Performance,cache,cache,". ROOT: TFileCacheWrite Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFileCacheWrite Class ReferenceInput/Output Library. ; A cache when writing files over the network. ; A caching system to speed up network I/O, i.e. when there is no operating system caching support (like the buffer cache for local disk I/O). The cache makes sure that every I/O is done with a (large) fixed length buffer thereby avoiding many small I/O's. Currently the write cache system is used by the classes TNetFile, TNetXNGFile and TWebFile (via TFile::WriteBuffers()).; The write cache is automatically created when writing a remote file (created in TFile::Open()). ; Definition at line 19 of file TFileCacheWrite.h. Public Member Functions;  TFileCacheWrite ();  Default Constructor. ;  ;  TFileCacheWrite (TFile *file, Int_t buffersize);  Creates a TFileCacheWrite data structure. ;  ;  ~TFileCacheWrite () override;  Destructor. ;  ; virtual Bool_t Flush ();  Flush the current write buffer to the file. ;  ; virtual Int_t GetBytesInCache () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print class internal structure. ;  ; virtual Int_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Called by the read cache to check if the requested data is not in the write cache buffer. ;  ; virtual void SetFile (TFile *file);  Set the file using this cache. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t WriteBuffer (const char *buf, Long64_t pos, Int_t len);  Write buffer at position pos in the write buffer. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy",MatchSource.WIKI,doc/master/classTFileCacheWrite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileCacheWrite.html
Safety,avoid,avoiding,". ROOT: TFileCacheWrite Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFileCacheWrite Class ReferenceInput/Output Library. ; A cache when writing files over the network. ; A caching system to speed up network I/O, i.e. when there is no operating system caching support (like the buffer cache for local disk I/O). The cache makes sure that every I/O is done with a (large) fixed length buffer thereby avoiding many small I/O's. Currently the write cache system is used by the classes TNetFile, TNetXNGFile and TWebFile (via TFile::WriteBuffers()).; The write cache is automatically created when writing a remote file (created in TFile::Open()). ; Definition at line 19 of file TFileCacheWrite.h. Public Member Functions;  TFileCacheWrite ();  Default Constructor. ;  ;  TFileCacheWrite (TFile *file, Int_t buffersize);  Creates a TFileCacheWrite data structure. ;  ;  ~TFileCacheWrite () override;  Destructor. ;  ; virtual Bool_t Flush ();  Flush the current write buffer to the file. ;  ; virtual Int_t GetBytesInCache () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print class internal structure. ;  ; virtual Int_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Called by the read cache to check if the requested data is not in the write cache buffer. ;  ; virtual void SetFile (TFile *file);  Set the file using this cache. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t WriteBuffer (const char *buf, Long64_t pos, Int_t len);  Write buffer at position pos in the write buffer. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy",MatchSource.WIKI,doc/master/classTFileCacheWrite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileCacheWrite.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTFileCacheWrite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileCacheWrite.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTFileCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileCollection.html
Deployability,update,updates,"ultTreeName ; (; const char * ; treeName). inline . Definition at line 95 of file TFileCollection.h. ◆ SetList(). void TFileCollection::SetList ; (; THashList * ; list). inline . Definition at line 71 of file TFileCollection.h. ◆ Sort(). void TFileCollection::Sort ; (; Bool_t ; useindex = kFALSE). Sort the collection. ; Definition at line 688 of file TFileCollection.cxx. ◆ Streamer(). void TFileCollection::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFileCollection::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 108 of file TFileCollection.h. ◆ Update(). Int_t TFileCollection::Update ; (; Long64_t ; avgsize = -1). Update accumulated information about the elements of the collection (e.g. ; fTotalSize). If 'avgsize' > 0, use an average file size of 'avgsize' bytes when the size info is not available. Also updates the meta data information by summarizing the meta data of the contained objects. Return -1 in case of any failure, 0 if the total size is exact, 1 if incomplete, 2 if complete but (at least partially) estimated. ; Definition at line 312 of file TFileCollection.cxx. Member Data Documentation. ◆ fDefaultTree. TString TFileCollection::fDefaultTree. private . Definition at line 45 of file TFileCollection.h. ◆ fList. THashList* TFileCollection::fList. private . Definition at line 42 of file TFileCollection.h. ◆ fMetaDataList. TList* TFileCollection::fMetaDataList. private . Definition at line 43 of file TFileCollection.h. ◆ fNCorruptFiles. Long64_t TFileCollection::fNCorruptFiles. private . Definition at line 50 of file TFileCollection.h. ◆ fNFiles. Long64_t TFileCollection::fNFiles. private . Definition at line 47 of file TFileCollection.h. ◆ fNStagedFiles. Long64_t TFileCollection::fNStagedFiles. private . Definition at line 49 of file TFileCollection.h. ◆ fTotalSize. Long64_t TFileCollection::fTotalSize. private . Defin",MatchSource.WIKI,doc/master/classTFileCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileCollection.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTFileCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileCollection.html
Modifiability,inherit,inherited,". ROOT: TFileCollection Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TFileCollection Class ReferenceCore ROOT classes » Base ROOT classes. ; Class that contains a list of TFileInfo's and accumulated meta data information about its entries. ; This class is used to describe file sets as stored by Grid file catalogs, by PROOF or any other collection of TFile names. ; Definition at line 39 of file TFileCollection.h. Public Types; enum  EStatusBits { kRemoteCollection = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFileCollection (const char *name=nullptr, const char *title=nullptr, const char *file=nullptr, Int_t nfiles=-1, Int_t firstfile=1);  TFileCollection constructor. ;  ; virtual ~TFileCollection ();  Cleanup. ;  ; Int_t Add (const char *path);  Add all files matching the specified pattern to the collection. ;  ; Int_t Add (TFileCollection *coll);  Add content of the TFileCollection to this collection. ;  ; Int_t Add (TFileInfo *info);  Add TFileInfo to the collection. ;  ; Int_t AddFromFile (const char *file, Int_t nfiles=-1, Int_t firstfile=1);  Add file names contained in the specified text file. ;  ; Bool_t Ad",MatchSource.WIKI,doc/master/classTFileCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileCollection.html
Security,hash,hash," Int_t Update (Long64_t avgsize=-1);  Update accumulated information about the elements of the collection (e.g. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTFileCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileCollection.html
Availability,error,error," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute",MatchSource.WIKI,doc/master/classTFileDrawMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileDrawMap.html
Integrability,message,message," (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute",MatchSource.WIKI,doc/master/classTFileDrawMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileDrawMap.html
Modifiability,inherit,inherited,"; virtual void AnimateTree (const char *branches="""");  Show sequence of baskets reads for the list of baskets involved in the list of branches (separated by "","") ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to this TreeFileMap. ;  ; virtual void DrawObject ();  Draw object at the mouse position. ;  ; virtual void DumpObject ();  Dump object at the mouse position. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; char * GetObjectInfo (Int_t px, Int_t py) const override;  Redefines TObject::GetObjectInfo. ;  ; virtual void InspectObject ();  Inspect object at the mouse position. ;  ; TClass * IsA () const override;  ; void Paint (Option_t *option) override;  Paint this TFileDrawMap. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTFileDrawMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileDrawMap.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTFileDrawMap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileDrawMap.html
Availability,mask,mask,"es. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFileHandler Class Reference. . Definition at line 65 of file TSysEvtHandler.h. Public Types; enum  { kRead = 1; , kWrite = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; Bool_t Notify () override;  Notify when event occurred on descriptor associated with this handler. ;  ; virtual Bool_t ReadNotify ();  Notify when something can be read from the descriptor associated with this handler. ;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mask);  Set interest mask to 'mask'. ;  ; virtual void SetReadReady ();  ; virtual void SetWriteReady ();  ; void Str",MatchSource.WIKI,doc/master/classTFileHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileHandler.html
Energy Efficiency,monitor,monitor,"onnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TSysEvtHandler.h>. Inheritance diagram for TFileHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkRead ; kWrite . Definition at line 75 of file TSysEvtHandler.h. Constructor & Destructor Documentation. ◆ TFileHandler() [1/2]. TFileHandler::TFileHandler ; (; ). inlineprotected . Definition at line 72 of file TSysEvtHandler.h. ◆ TFileHandler() [2/2]. TFileHandler::TFileHandler ; (; int ; fd, . int ; mask . ). Create a file descriptor event handler. ; If mask=kRead then we want to monitor the file for read readiness, if mask=kWrite then we monitor the file for write readiness, if mask=kRead|kWrite then we monitor both read and write readiness. ; Definition at line 59 of file TSysEvtHandler.cxx. ◆ ~TFileHandler(). virtual TFileHandler::~TFileHandler ; (; ). inlinevirtual . Definition at line 78 of file TSysEvtHandler.h. Member Function Documentation. ◆ Add(). void TFileHandler::Add ; (; ). overridevirtual . Add file event handler to system file handler list. ; Implements TSysEvtHandler.; Definition at line 126 of file TSysEvtHandler.cxx. ◆ Class(). static TClass * TFileHandler::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TFileHandler::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TFileHandler::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 95 of file TSysEvtHandler.h. ◆ DeclFileName(). static const char * TFileHandler::DeclFileName ; (; ). inlinestatic . ReturnsName of the",MatchSource.WIKI,doc/master/classTFileHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileHandler.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFileHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileHandler.html
Modifiability,inherit,inherited,". ROOT: TFileHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFileHandler Class Reference. . Definition at line 65 of file TSysEvtHandler.h. Public Types; enum  { kRead = 1; , kWrite = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; Bool_t Notify () override;  Notify when event occurred on descriptor associated with this handler. ;  ; virtual Bool_t ReadNotify ();  Notify when something can be read from the descriptor associated with this handler. ;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mas",MatchSource.WIKI,doc/master/classTFileHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileHandler.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTFileHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileHandler.html
Availability,error,error,"E);  Find an element from a URL. Returns 0 if not found. ;  ; TUrl * GetCurrentUrl () const;  Return the current url. ;  ; TUrl * GetFirstUrl () const;  ; Int_t GetIndex () const;  ; TMD5 * GetMD5 () const;  ; TFileInfoMeta * GetMetaData (const char *meta=nullptr) const;  Get meta data object with specified name. ;  ; TList * GetMetaDataList () const;  ; Int_t GetNUrls () const;  ; Long64_t GetSize () const;  ; TUrl * GetUrlAt (Int_t i) const;  ; TUUID * GetUUID () const;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; TUrl * NextUrl ();  Iterator function, start iteration by calling ResetUrl(). ;  ; void Print (Option_t *options="""") const override;  Print information about this object. ;  ; Bool_t RemoveMetaData (const char *meta=nullptr);  Remove the metadata object. ;  ; Bool_t RemoveUrl (const char *url);  Remove an URL. Returns kTRUE if successful, kFALSE otherwise. ;  ; Bool_t RemoveUrlAt (Int_t i);  Remove URL at given position. Returns kTRUE on success, kFALSE on error. ;  ; void ResetUrl ();  ; Bool_t SetCurrentUrl (const char *url);  Set 'url' as current URL, if in the list Return kFALSE if not in the list. ;  ; Bool_t SetCurrentUrl (TUrl *url);  Set 'url' as current URL, if in the list Return kFALSE if not in the list. ;  ; void SetIndex (Int_t idx);  ; void SetSize (Long64_t size);  ; void SetUUID (const char *uuid);  Set the UUID to the value associated to the string 'uuid'. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const overri",MatchSource.WIKI,doc/master/classTFileInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileInfo.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTFileInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileInfo.html
Modifiability,inherit,inherited,". ROOT: TFileInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TFileInfo Class ReferenceCore ROOT classes » Base ROOT classes. ; Class describing a generic file including meta information. ; Definition at line 39 of file TFileInfo.h. Public Types; enum  EStatusBits { kStaged = (1ULL << ( 15 )); , kCorrupted = (1ULL << ( 16 )); , kSortWithIndex = (1ULL << ( 17 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFileInfo (const char *url=nullptr, Long64_t size=-1, const char *uuid=nullptr, const char *md5=nullptr, TObject *meta=nullptr);  Constructor. ;  ;  TFileInfo (const TFileInfo &);  Copy constructor. ;  ; virtual ~TFileInfo ();  Destructor. ;  ; Bool_t AddMetaData (TObject *meta);  Add's a meta data object to the file info object. ;  ; Bool_t AddUrl (const char *url, Bool_t infront=kFALSE);  Add a new URL. ;  ; Int_t Compare (const TObject *obj) const override;  Compare TFileInfo object by their first urls. ;  ; TUrl * FindByUrl (const char *url, Bool_t withDeflt=kFALSE);  Find an element from a URL. Returns 0 if not found. ;  ; TUrl * GetCurrentUrl () const;  Return the current url. ;  ; TUrl * GetFirstUrl () const;  ; Int_t GetIn",MatchSource.WIKI,doc/master/classTFileInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileInfo.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTFileInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileInfo.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTFileInfoMeta.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileInfoMeta.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTFileInfoMeta.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileInfoMeta.html
Modifiability,inherit,inherited,". ROOT: TFileInfoMeta Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TFileInfoMeta Class Reference. . Definition at line 108 of file TFileInfo.h. Public Types; enum  EStatusBits { kExternal = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFileInfoMeta ();  ;  TFileInfoMeta (const char *objPath, const char *objClass=""TTree"", Long64_t entries=-1, Long64_t first=0, Long64_t last=-1, Long64_t totbytes=-1, Long64_t zipbytes=-1);  Create file meta data object. ;  ;  TFileInfoMeta (const char *objPath, const char *objDir, const char *objClass, Long64_t entries=-1, Long64_t first=0, Long64_t last=-1, Long64_t totbytes=-1, Long64_t zipbytes=-1);  Create file meta data object. ;  ;  TFileInfoMeta (const TFileInfoMeta &m);  Copy constructor. ;  ; virtual ~TFileInfoMeta ();  ; const char * GetClass () const;  ; const char * GetDirectory () const;  Get the object's directory in the ROOT file. ;  ; Long64_t GetEntries () const;  ; Long64_t GetFirst () const;  ; Long64_t GetLast () const;  ; const char * GetObject () const;  Get the object name, with path stripped off. ;  ; Long64_t GetTotBytes () const;  ; Long64_t GetZipBytes () co",MatchSource.WIKI,doc/master/classTFileInfoMeta.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileInfoMeta.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTFileInfoMeta.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileInfoMeta.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFileMerger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileMerger.html
Energy Efficiency,reduce,reduce,"ileMerger (const TFileMerger &)=delete;  ; TFileMerger & operator= (const TFileMerger &)=delete;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TFileMerger.h>. Inheritance diagram for TFileMerger:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ TIOFeatures. using TFileMerger::TIOFeatures = ROOT::TIOFeatures. private . Definition at line 32 of file TFileMerger.h. Member Enumeration Documentation. ◆ EPartialMergeType. enum TFileMerger::EPartialMergeType. Type of the partial merge. . EnumeratorkRegular Normal merge, overwriting the output file. . kIncremental Merge the input file with the content of the output file (if already existing). . kResetable Only the objects with a MergeAfterReset member function. . kNonResetable Only the objects without a MergeAfterReset member function. . kDelayWrite Delay the TFile write (to reduce the number of write when reusing the file) . kAll Merge all type of objects (default) . kAllIncremental Merge incrementally all type of objects. . kOnlyListed Only the objects specified in fObjectNames list. . kSkipListed Skip objects specified in fObjectNames list. . kKeepCompression Keep compression level unchanged for each input files. . Definition at line 69 of file TFileMerger.h. Constructor & Destructor Documentation. ◆ TFileMerger() [1/2]. TFileMerger::TFileMerger ; (; const TFileMerger & ; ). privatedelete . ◆ TFileMerger() [2/2]. TFileMerger::TFileMerger ; (; Bool_t ; isLocal = kTRUE, . Bool_t ; histoOneGo = kTRUE . ). Create file merger object. ; Definition at line 93 of file TFileMerger.cxx. ◆ ~TFileMerger(). TFileMerger::~TFileMerger ; (; ). override . Cleanup. ; Definition at line 107 of file TFileMerger.cxx. Member Function Documentation. ◆ AddAdoptFile(). Bool_t TFileMerger::AddAdoptFile ; (; TFile * ; source, . Bool_t ; cpProgress = kTRUE . ). virtual . Add the TFile t",MatchSource.WIKI,doc/master/classTFileMerger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileMerger.html
Integrability,interface,interface,". ROOT: TFileMerger Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; List of all members ; TFileMerger Class ReferenceInput/Output Library. ; This class provides file copy and merging services. ; It can be used to copy files (not only ROOT files), using TFile or any of its remote file access plugins. It is therefore useful in a Grid environment where the files might be accessible only remotely. The merging interface allows files containing histograms and trees to be merged, like the standalone hadd program. ; Definition at line 30 of file TFileMerger.h. Public Types; enum  EPartialMergeType { ;   kRegular = 0; , kIncremental = (1ULL << ( 1 )); , kResetable = (1ULL << ( 2 )); , kNonResetable = (1ULL << ( 3 )); , ;   kDelayWrite = (1ULL << ( 4 )); , kAll = (1ULL << ( 2 ))|(1ULL << ( 3 )); , kAllIncremental = kIncremental | kAll; , kOnlyListed = (1ULL << ( 5 )); , ;   kSkipListed = (1ULL << ( 6 )); , kKeepCompression = (1ULL << ( 7 )). };  Type of the partial merge. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFileMerger (Bool_t isLocal=kTRUE, Bool_t histoOneGo=kTRUE);  Create file merger object. ;  ;  ~TFi",MatchSource.WIKI,doc/master/classTFileMerger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileMerger.html
Modifiability,plugin,plugins,". ROOT: TFileMerger Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; List of all members ; TFileMerger Class ReferenceInput/Output Library. ; This class provides file copy and merging services. ; It can be used to copy files (not only ROOT files), using TFile or any of its remote file access plugins. It is therefore useful in a Grid environment where the files might be accessible only remotely. The merging interface allows files containing histograms and trees to be merged, like the standalone hadd program. ; Definition at line 30 of file TFileMerger.h. Public Types; enum  EPartialMergeType { ;   kRegular = 0; , kIncremental = (1ULL << ( 1 )); , kResetable = (1ULL << ( 2 )); , kNonResetable = (1ULL << ( 3 )); , ;   kDelayWrite = (1ULL << ( 4 )); , kAll = (1ULL << ( 2 ))|(1ULL << ( 3 )); , kAllIncremental = kIncremental | kAll; , kOnlyListed = (1ULL << ( 5 )); , ;   kSkipListed = (1ULL << ( 6 )); , kKeepCompression = (1ULL << ( 7 )). };  Type of the partial merge. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFileMerger (Bool_t isLocal=kTRUE, Bool_t histoOneGo=kTRUE);  Create file merger object. ;  ;  ~TFi",MatchSource.WIKI,doc/master/classTFileMerger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileMerger.html
Security,access,access,". ROOT: TFileMerger Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; List of all members ; TFileMerger Class ReferenceInput/Output Library. ; This class provides file copy and merging services. ; It can be used to copy files (not only ROOT files), using TFile or any of its remote file access plugins. It is therefore useful in a Grid environment where the files might be accessible only remotely. The merging interface allows files containing histograms and trees to be merged, like the standalone hadd program. ; Definition at line 30 of file TFileMerger.h. Public Types; enum  EPartialMergeType { ;   kRegular = 0; , kIncremental = (1ULL << ( 1 )); , kResetable = (1ULL << ( 2 )); , kNonResetable = (1ULL << ( 3 )); , ;   kDelayWrite = (1ULL << ( 4 )); , kAll = (1ULL << ( 2 ))|(1ULL << ( 3 )); , kAllIncremental = kIncremental | kAll; , kOnlyListed = (1ULL << ( 5 )); , ;   kSkipListed = (1ULL << ( 6 )); , kKeepCompression = (1ULL << ( 7 )). };  Type of the partial merge. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFileMerger (Bool_t isLocal=kTRUE, Bool_t histoOneGo=kTRUE);  Create file merger object. ;  ;  ~TFi",MatchSource.WIKI,doc/master/classTFileMerger.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileMerger.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTFileOpenHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileOpenHandle.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTFileOpenHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileOpenHandle.html
Modifiability,inherit,inherited,". ROOT: TFileOpenHandle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TFileOpenHandle Class ReferenceInput/Output Library. ; Class holding info about the file being opened. ; Definition at line 354 of file TFile.h. Public Member Functions;  ~TFileOpenHandle () override;  ; Int_t GetCompress () const;  ; Int_t GetNetOpt () const;  ; const char * GetOpt () const;  ; Bool_t Matches (const char *name);  Return kTRUE if this async request matches the open request specified by 'url'. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void S",MatchSource.WIKI,doc/master/classTFileOpenHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileOpenHandle.html
Security,hash,hash,"_t Matches (const char *name);  Return kTRUE if this async request matches the open request specified by 'url'. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTFileOpenHandle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileOpenHandle.html
Availability,avail,available,". ROOT: TFilePrefetch Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; TFilePrefetch Class ReferenceInput/Output Library. ; The prefetching mechanism uses two classes (TFilePrefetch and TFPBlock) to prefetch in advance a block of tree entries. ; There is a thread which takes care of actually transferring the blocks and making them available to the main requesting thread. Therefore, the time spent by the main thread waiting for the data before processing considerably decreases. Besides the prefetching mechanisms there is also a local caching option which can be enabled by the user. Both capabilities are disabled by default and must be explicitly enabled by the user. ; Definition at line 33 of file TFilePrefetch.h. Public Member Functions;  TFilePrefetch (TFile *);  Constructor. ;  ;  ~TFilePrefetch () override;  Destructor. ;  ; void AddPendingBlock (TFPBlock *);  Safe method to add a block to the pendingList. ;  ; void AddReadBlock (TFPBlock *);  Safe method to add a block to the readList. ;  ; Bool_t BinarySearchReadList (TFPBlock *, Long64_t, Int_t, Int_t *);  Search for a requested element in a block and return the index. ;  ; Bool_t CheckBlockInCache (char *&, TFPBlock *);  Test if the block is in cache. ;  ; TFPBlock * CreateBlockObj (Long64_t *, Int_t *, Int_t);  Create a new block or recycle an old one. ;  ; char * GetBlockFromCache (const char *, Int_t);  Return a buffer from cache. ;  ; std::condition_variable & GetCondNewBlock ();  ; TFPBlock * GetPendingBlock ();  Safe method to remove a block from the pendingList. ;  ; TThread * GetThread () const;  Return reference to the consumer thread. ;  ; Long64_t GetWaitTime ();  Return the time spent wating for buffer to be read in microseconds. ;  ; TClass * IsA () const override;  ; Bool_t IsPrefetchFini",MatchSource.WIKI,doc/master/classTFilePrefetch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFilePrefetch.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFilePrefetch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFilePrefetch.html
Modifiability,inherit,inherited,"&);  Read one block and insert it in prefetchBuffers list. ;  ; void ReadBlock (Long64_t *, Int_t *, Int_t);  Create a TFPBlock object or recycle one and add it to the prefetchBlocks list. ;  ; Bool_t ReadBuffer (char *, Long64_t, Int_t);  Return a prefetched element. ;  ; void ReadListOfBlocks ();  Get blocks specified in prefetchBlocks. ;  ; void SaveBlockInCache (TFPBlock *);  Save the block content in cache. ;  ; Bool_t SetCache (const char *);  Set the path of the cache directory. ;  ; void SetFile (TFile *file, TFile::ECacheAction action=TFile::kDisconnect);  Change the file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t SumHex (const char *);  Sum up individual hex values to obtain a decimal value. ;  ; Int_t ThreadStart ();  Used to start the consumer thread. ;  ; void WaitFinishPrefetch ();  Killing the async prefetching thread. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classTFilePrefetch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFilePrefetch.html
Performance,cache,cache,"d TFPBlock) to prefetch in advance a block of tree entries. ; There is a thread which takes care of actually transferring the blocks and making them available to the main requesting thread. Therefore, the time spent by the main thread waiting for the data before processing considerably decreases. Besides the prefetching mechanisms there is also a local caching option which can be enabled by the user. Both capabilities are disabled by default and must be explicitly enabled by the user. ; Definition at line 33 of file TFilePrefetch.h. Public Member Functions;  TFilePrefetch (TFile *);  Constructor. ;  ;  ~TFilePrefetch () override;  Destructor. ;  ; void AddPendingBlock (TFPBlock *);  Safe method to add a block to the pendingList. ;  ; void AddReadBlock (TFPBlock *);  Safe method to add a block to the readList. ;  ; Bool_t BinarySearchReadList (TFPBlock *, Long64_t, Int_t, Int_t *);  Search for a requested element in a block and return the index. ;  ; Bool_t CheckBlockInCache (char *&, TFPBlock *);  Test if the block is in cache. ;  ; TFPBlock * CreateBlockObj (Long64_t *, Int_t *, Int_t);  Create a new block or recycle an old one. ;  ; char * GetBlockFromCache (const char *, Int_t);  Return a buffer from cache. ;  ; std::condition_variable & GetCondNewBlock ();  ; TFPBlock * GetPendingBlock ();  Safe method to remove a block from the pendingList. ;  ; TThread * GetThread () const;  Return reference to the consumer thread. ;  ; Long64_t GetWaitTime ();  Return the time spent wating for buffer to be read in microseconds. ;  ; TClass * IsA () const override;  ; Bool_t IsPrefetchFinished () const;  ; void ReadAsync (TFPBlock *, Bool_t &);  Read one block and insert it in prefetchBuffers list. ;  ; void ReadBlock (Long64_t *, Int_t *, Int_t);  Create a TFPBlock object or recycle one and add it to the prefetchBlocks list. ;  ; Bool_t ReadBuffer (char *, Long64_t, Int_t);  Return a prefetched element. ;  ; void ReadListOfBlocks ();  Get blocks specified in prefetchBlocks. ; ",MatchSource.WIKI,doc/master/classTFilePrefetch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFilePrefetch.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTFilePrefetch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFilePrefetch.html
Usability,clear,clear,"ycle one and add it to the prefetchBlocks list. ; Definition at line 214 of file TFilePrefetch.cxx. ◆ ReadBuffer(). Bool_t TFilePrefetch::ReadBuffer ; (; char * ; buf, . Long64_t ; offset, . Int_t ; len . ). Return a prefetched element. ; Definition at line 178 of file TFilePrefetch.cxx. ◆ ReadListOfBlocks(). void TFilePrefetch::ReadListOfBlocks ; (; ). Get blocks specified in prefetchBlocks. ; Definition at line 128 of file TFilePrefetch.cxx. ◆ SaveBlockInCache(). void TFilePrefetch::SaveBlockInCache ; (; TFPBlock * ; block). Save the block content in cache. ; Definition at line 474 of file TFilePrefetch.cxx. ◆ SetCache(). Bool_t TFilePrefetch::SetCache ; (; const char * ; path). Set the path of the cache directory. ; Definition at line 526 of file TFilePrefetch.cxx. ◆ SetFile(). void TFilePrefetch::SetFile ; (; TFile * ; file, . TFile::ECacheAction ; action = TFile::kDisconnect . ). Change the file. ; When prefetching is enabled we also need to:; make sure the async thread is not doing any work; clear all blocks from prefetching and read list; reset the file pointer . Definition at line 317 of file TFilePrefetch.cxx. ◆ Streamer(). void TFilePrefetch::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFilePrefetch::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 84 of file TFilePrefetch.h. ◆ SumHex(). Int_t TFilePrefetch::SumHex ; (; const char * ; hex). Sum up individual hex values to obtain a decimal value. ; Definition at line 381 of file TFilePrefetch.cxx. ◆ ThreadProc(). TThread::VoidRtnFunc_t TFilePrefetch::ThreadProc ; (; void * ; arg). staticprivate . Execution loop of the consumer thread. ; Definition at line 365 of file TFilePrefetch.cxx. ◆ ThreadStart(). Int_t TFilePrefetch::ThreadStart ; (; ). Used to start the consumer thread. ; Definition at line 349 of file TFilePrefetch.cxx. ◆ WaitFinishPrefetch(). void TFilePrefet",MatchSource.WIKI,doc/master/classTFilePrefetch.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFilePrefetch.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTFileStager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileStager.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTFileStager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileStager.html
Modifiability,inherit,inherited,"TFileStager.h. Public Member Functions;  TFileStager (const char *stager);  ; virtual ~TFileStager ();  ; virtual TList * GetStaged (TCollection *pathlist);  Retrieves the staging (online) status for a list of path names. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsStaged (const char *);  Just check if the file exists locally. ;  ; virtual Bool_t IsValid () const;  ; virtual Int_t Locate (const char *u, TString &f);  Just check if the file exists locally. ;  ; virtual Int_t LocateCollection (TFileCollection *fc, Bool_t addDummyUrl=kFALSE);  Massive location of files. ;  ; virtual Bool_t Matches (const char *s);  ; virtual Bool_t Stage (const char *, Option_t *=nullptr);  ; virtual Bool_t Stage (TCollection *pathlist, Option_t *opt=nullptr);  Issue a stage request for a list of files. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTFileStager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileStager.html
Performance,load,loaded,"INE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TString GetPathName (TObject *o);  Return the path name contained in object 'o' allowing for TUrl, TObjString or TFileInfo. ;  ; static TFileStager * Open (const char *stager);  Open a stager, after having loaded the relevant plug-in. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffff",MatchSource.WIKI,doc/master/classTFileStager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileStager.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTFileStager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFileStager.html
Availability,error,error,"graph to pop up the context menu and then select the menu entry 'Fit Panel'.; ""General"" Tab; The first set of GUI elements is related to the function choice and settings. The status bar on the bottom provides information about the current minimization settings using the following abbreviations: LIB - shows the current choice between Minuit/Minuit2/Fumili MIGRAD or FUMILI points to the current minimization method in use. Itr: - shows the maximum number of iterations nnnn set for the fit. Prn: - can be DEF/VER/QT and shows the current print option in use.; ""Predefined"" combo box - contains a list of predefined functions in ROOT. The default one is Gaussian.; ""Operation"" radio button group defines selected operational mode between functions: NOP - no operation (default); ADD - addition CONV - convolution (will be implemented in the future).; Users can enter the function expression in a text entry field. The entered string is checked after Enter key was pressed. An error message shows up if the string is not accepted. The current prototype is limited and users have no freedom to enter file/user function names in this field.; ""Set Parameters"" button opens a dialog for parameters settings.; ""Fit Settings"" provides user interface elements related to the fitter. Currently there are two method choices: Chi-square and Binned Likelihood.; ""Linear Fit"" check button sets the use of Linear fitter is it is selected. Otherwise the option 'F' is applied if polN is selected. ""Robust"" number entry sets the robust value when fitting graphs. ""No Chi-square"" check button sets ON/OFF option 'C' - do not calculate Chi-square (for Linear fitter).; Fit options: ""Integral"" check button switch ON/OFF option 'I' - use integral of function instead of value in bin center. ""Best Errors"" sets ON/OFF option 'E' - better errors estimation using Minos technique. ""All weights = 1"" sets ON/OFF option 'W' - all weights set to 1, excluding empty bins and ignoring error bars. ""Empty bins, weights=1"" sets ON",MatchSource.WIKI,doc/master/classTFitEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitEditor.html
Deployability,update,updates,"adioButton * fOptVerbose;  set printing mode to 'Verbose' ;  ; TVirtualPad * fParentPad;  pad containing the object ;  ; std::multimap< TObject *, TF1 * > fPrevFit;  ; TGTextButton * fResetButton;  resets fit parameters ;  ; TGNumberEntry * fRobustValue;  contains robust value for linear fit ;  ; TGLabel * fSelLabel;  contains selected fit function ;  ; TGTextButton * fSetParam;  open set parameters dialog ;  ; TGDoubleHSlider * fSliderX;  slider to set fit range along x-axis ;  ; TGNumberEntry * fSliderXMax;  entry to set the maximum in the range ;  ; TGNumberEntry * fSliderXMin;  entry to set the minumum in the range ;  ; TGHorizontalFrame * fSliderXParent;  parent of fSliderX ;  ; TGDoubleHSlider * fSliderY;  slider to set fit range along y-axis ;  ; TGNumberEntry * fSliderYMax;  entry to set the maximum in the range ;  ; TGNumberEntry * fSliderYMin;  entry to set the minumum in the range ;  ; TGHorizontalFrame * fSliderYParent;  parent of fSliderY ;  ; TGDoubleHSlider * fSliderZ;  slider to set fit range along z-axis ;  ; TGHorizontalFrame * fSliderZParent;  parent of fSliderZ ;  ; TGStatusBar * fStatusBar;  ; TF1NormSum * fSumFunc;  ! TF1NormSum object ;  ; std::vector< TF1 * > fSystemFuncs;  ; TGTab * fTab;  tab widget holding the editor ;  ; TGCompositeFrame * fTabContainer;  main tab container ;  ; TGNumberEntryField * fTolerance;  ; EObjectType fType;  object type info ;  ; TGComboBox * fTypeFit;  contains the types of functions to be selected ;  ; TGTextButton * fUpdateButton;  updates data from gROOT and gDirectory ;  ; TGCheckButton * fUseGradient;  switch on/off option 'use gradient' ;  ; TGCheckButton * fUseRange;  switch on/off option 'use function range' ;  ; TGTextButton * fUserButton;  opens a dialog for user-defined fit method ;  ; TAxis * fXaxis;  x-axis ;  ; TAxis * fYaxis;  y-axis ;  ; TAxis * fZaxis;  z-axis ;  ;  Protected Attributes inherited from TGMainFrame; TList * fBindList;  list with key bindings ;  ; TString fClassName;  WM class name.",MatchSource.WIKI,doc/master/classTFitEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitEditor.html
Integrability,interface,interface,". ROOT: TFitEditor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TFitEditor Class ReferenceGUI » ROOT Fit Panel. ; Allows to perform, explore and compare various fits. ; To display the new Fit panel interface right click on a histogram or a graph to pop up the context menu and then select the menu entry 'Fit Panel'.; ""General"" Tab; The first set of GUI elements is related to the function choice and settings. The status bar on the bottom provides information about the current minimization settings using the following abbreviations: LIB - shows the current choice between Minuit/Minuit2/Fumili MIGRAD or FUMILI points to the current minimization method in use. Itr: - shows the maximum number of iterations nnnn set for the fit. Prn: - can be DEF/VER/QT and shows the current print option in use.; ""Predefined"" combo box - contains a list of predefined functions in ROOT. The default one is Gaussian.; ""Operation"" radio button group defines selected operational mode between functions: NOP - no operation (default); ADD - addition CONV - convolution (will be implemented in the future).; Users can enter the function expression in a text entry field. The entered string is checked after Enter key was pressed. An error message shows up if the string is not accepted. The current prototype is limited and users have no freedom to enter file/user function names in this field.; ""Set Parameters"" button opens a dialog for parameters settings.; ""Fit Settings"" provides user interface elements related to the fitter. Currently there are two method choices: Chi-square and Binned Likelihood.; ""Linear Fit"" check button sets the use of Linear fitter is it is selected. Otherwise the option 'F' i",MatchSource.WIKI,doc/master/classTFitEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitEditor.html
Modifiability,inherit,inherited,"e for Minuit and Minuit2 ""FUMILI"" method is available for Fumili and Minuit2 ""SIMPLEX"" method is disabled (will come with the new fitter design); ""Minimization Settings' group allows users to set values for:; ""Error definition"" - between 0.0 and 100.0 (default is 1.0).; ""Maximum tolerance"" - the fit relative precision in use.; ""Maximum number of iterations"" - default is 5000. Print options:; ""Default"" - between Verbose and Quiet.; ""Verbose"" - prints results after each iteration.; ""Quiet"" - no fit information is printed.; Fit button - performs a fit. Reset - resets all GUI elements and related fit settings to the default ones. Close - closes this window. ; Definition at line 54 of file TFitEditor.h. Classes; struct  FuncParamData_t;  . Public Types; typedef std::vector< FuncParamData_t > FuncParams_t;  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFitEditor (TVi",MatchSource.WIKI,doc/master/classTFitEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitEditor.html
Performance,perform,perform,". ROOT: TFitEditor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TFitEditor Class ReferenceGUI » ROOT Fit Panel. ; Allows to perform, explore and compare various fits. ; To display the new Fit panel interface right click on a histogram or a graph to pop up the context menu and then select the menu entry 'Fit Panel'.; ""General"" Tab; The first set of GUI elements is related to the function choice and settings. The status bar on the bottom provides information about the current minimization settings using the following abbreviations: LIB - shows the current choice between Minuit/Minuit2/Fumili MIGRAD or FUMILI points to the current minimization method in use. Itr: - shows the maximum number of iterations nnnn set for the fit. Prn: - can be DEF/VER/QT and shows the current print option in use.; ""Predefined"" combo box - contains a list of predefined functions in ROOT. The default one is Gaussian.; ""Operation"" radio button group defines selected operational mode between functions: NOP - no operation (default); ADD - addition CONV - convolution (will be implemented in the future).; Users can enter the function expression in a text entry field. The entered string is checked after Enter key was pressed. An error message shows up if the string is not accepted. The current prototype is limited and users have no freedom to enter file/user function names in this field.; ""Set Parameters"" button opens a dialog for parameters settings.; ""Fit Settings"" provides user interface elements related to the fitter. Currently there are two method choices: Chi-square and Binned Likelihood.; ""Linear Fit"" check button sets the use of Linear fitter is it is selected. Otherwise the option 'F' i",MatchSource.WIKI,doc/master/classTFitEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitEditor.html
Security,hash,hash,"TGIdleHandler *);  ; Bool_t HandleTimer (TTimer *) override;  Execute action in response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; TClass * IsA () const override;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTFitEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitEditor.html
Usability,clear,clear,"  ; virtual void DoSetParameters ();  Open set parameters dialog. ;  ; virtual void DoSliderXMoved ();  Slot connected to range settings on x-axis. ;  ; virtual void DoSliderYMoved ();  Slot connected to range settings on y-axis. ;  ; virtual void DoSliderZMoved ();  Slot connected to range settings on z-axis. ;  ; virtual void DoUpdate ();  Easy here! ;  ; virtual void DoUseFuncRange ();  ; virtual void DoUserDialog ();  Open a dialog for getting a user defined method. ;  ; void FillFunctionList (Int_t selected=-1);  Fills the list of functions depending on the type of fit selected. ;  ; void FillMinMethodList (Int_t selected=-1);  Fills the list of methods depending on the minimization library selected. ;  ; Option_t * GetDrawOption () const override;  Get draw options of the selected object. ;  ; TList * GetListOfFittingFunctions (TObject *obj=nullptr);  ; virtual void Hide ();  Hide the fit panel and set it to non-active state. ;  ; void RecursiveRemove (TObject *obj) override;  When obj is deleted, clear fFitObject if fFitObject = obj. ;  ; virtual void SetFitObject (TVirtualPad *pad, TObject *obj, Int_t event);  Slot called when the user clicks on an object inside a canvas. ;  ; virtual void SetFunction (const char *function);  Set the function to be used in performed fit. ;  ; Bool_t SetObjectType (TObject *obj);  Check whether the object suitable for fitting and set its type, dimension and method combo box accordingly. ;  ; virtual void Show (TVirtualPad *pad, TObject *obj);  Show the fit panel (possible only via context menu). ;  ; void ShowObjectName (TObject *obj);  Show object name on the top. ;  ; virtual void Terminate ();  Called to delete the fit panel. ;  ; void UpdateGUI ();  Set the fit panel GUI according to the selected object. ;  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TG",MatchSource.WIKI,doc/master/classTFitEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitEditor.html
Availability,error,error,"Copy(TObject &named) const overrideTNamedvirtual; Correlation(unsigned int i, unsigned int j) constROOT::Fit::FitResultinline; CovMatrix(unsigned int i, unsigned int j) constROOT::Fit::FitResultinline; CovMatrixStatus() constROOT::Fit::FitResultinline; DeclFileName()TFitResultinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Edm() constROOT::Fit::FitResultinline; Error(unsigned int i) constTFitResultinline; Error(const char *method, const char *msgfmt,...) constTFitResultvirtual; Errors() constROOT::Fit::FitResultinline; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fBoundParamsROOT::Fit::FitResultprotected; fChi2ROOT::Fit::FitResultprotected; fCovMatrixROOT::Fit::FitResultprotected; fCovStatusROOT::Fit::FitResultprotected; fEdmROOT::Fit::FitResultprotected; fErrorsROOT::Fit::FitResultprotected; fFitDataROOT::Fit::FitResultprotected; fFitFuncROOT::Fit::FitResultprotected; fFixedParamsROOT::Fit::FitResultprotected; fgDtorOnlyTObjectprivatestatic; fGlobalCCROOT::Fit::FitResultprotected; fgObjectStatTObjectprivatestatic; FillBuffer(char *&buffer)TNamedvirtual; FillResult(const std::shared_ptr< ROOT::Math::Minimizer > &min, const FitConfig &fconfig, const std::shared_ptr< IModelFunction > &f, bool isValid, unsigned int sizeOfData=0, int fitType=1, const ROOT::Math::IMultiGenFunction *chi2func=nullptr, unsigned int ncalls=0)R",MatchSource.WIKI,doc/master/classTFitResult-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitResult-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TFitResult Member List. This is the complete list of members for TFitResult, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Chi2() constROOT::Fit::FitResultinline; Class()TFitResultstatic; Class_Name()TFitResultstatic; Class_Version()TFitResultinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Contour(unsigned int ipar, unsigned int jpar, TGraph *gr, double confLevel=0.683)TFitResult; ROOT::Fit::FitResult::Contour(unsigned int ipar, unsigned int jpar, unsigned int &npoints, double *pntsx, double *pntsy, double confLevel=0.683)ROOT::Fit::FitResult; Copy(TObject &named) const overrideTNamedvirtual; Correlation(unsigned int i, unsigned int j) constROOT::Fit::FitResultinline; CovMatrix(unsigned int i, unsigned int j) constROOT::Fit::FitResultinline; CovMatrixStatus() constROOT::Fit::FitResultinline; DeclFileName()TFitResultinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Edm() constROOT::Fit::FitResultinline; Error(unsigned int i) constTFitResultinline; Error(const char *method, const char *msgfmt,...) constTFitResultvirtual; Errors() constROOT::Fit::FitResultinline; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObject",MatchSource.WIKI,doc/master/classTFitResult-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitResult-members.html
Availability,error,error," of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TFitResult Class ReferenceHistogram Library. ; Extends the ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O. ; Definition at line 34 of file TFitResult.h. Public Member Functions;  TFitResult (const char *name, const char *title);  ;  TFitResult (const ROOT::Fit::FitResult &f);  Constructor from a ROOT::Fit::FitResult copy the contained TF1 pointer function if it is. ;  ;  TFitResult (int status=0);  ;  ~TFitResult () override;  ; bool Contour (unsigned int ipar, unsigned int jpar, TGraph *gr, double confLevel=0.683);  Create a 2D contour around the minimum for the parameter ipar and jpar if a minimum does not exist or is invalid it will return false on exit a TGraph is filled with the contour points the number of contour points is determined by the size of the TGraph. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; double Error (unsigned int i) const;  ; TMatrixDSym GetCorrelationMatrix () const;  Return the correlation matrix from fit. ;  ; TMatrixDSym GetCovarianceMatrix () const;  Return the covariance matrix from fit. ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print result of the fit, by default chi2, parameter values and errors. ;  ; bool Scan (unsigned int ipar, TGraph *gr, double xmin=0, double xmax=0);  Scan parameter ipar between value of xmin and xmax A graph must be given which will be on return filled with the scan resul If the graph size is zero, a default size n = 40 will be used. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &na",MatchSource.WIKI,doc/master/classTFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitResult.html
Deployability,configurat,configuration,"gative log-likelihood ratio using the definition of Baker-Cousins. ;  ; bool Contour (unsigned int ipar, unsigned int jpar, unsigned int &npoints, double *pntsx, double *pntsy, double confLevel=0.683);  create contour of two parameters around the minimum pass as option confidence level: default is a value of 0.683 ;  ; double Correlation (unsigned int i, unsigned int j) const;  retrieve correlation elements ;  ; double CovMatrix (unsigned int i, unsigned int j) const;  retrieve covariance matrix element ;  ; int CovMatrixStatus () const;  covariance matrix status code using Minuit convention : =0 not calculated, =1 approximated, =2 made pos def , =3 accurate ;  ; double Edm () const;  Expected distance from minimum. ;  ; double Error (unsigned int i) const;  parameter error by index ;  ; const std::vector< double > & Errors () const;  parameter errors (return st::vector) ;  ; void FillResult (const std::shared_ptr< ROOT::Math::Minimizer > &min, const FitConfig &fconfig, const std::shared_ptr< IModelFunction > &f, bool isValid, unsigned int sizeOfData=0, int fitType=1, const ROOT::Math::IMultiGenFunction *chi2func=nullptr, unsigned int ncalls=0);  Fill the fit result from a Minimizer instance after fitting Run also Minos if requested from the configuration. ;  ; const BinData * FittedBinData () const;  return BinData used in the fit (return a nullptr in case a different fit is done or the data are not available Pointer is managed internally, it must not be deleted ;  ; const IModelFunction * FittedFunction () const;  fitting quantities ;  ; void GetConfidenceIntervals (const BinData &data, double *ci, double cl=0.95, bool norm=false) const;  evaluate confidence interval for the point specified in the passed data sets the confidence interval are returned in the array ci cl is the desired confidence interval value. ;  ; std::vector< double > GetConfidenceIntervals (double cl=0.95, bool norm=false) const;  evaluate confidence interval for the data set used in the last fi",MatchSource.WIKI,doc/master/classTFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitResult.html
Energy Efficiency,allocate,allocates,"; std::vector< double > GetConfidenceIntervals (double cl=0.95, bool norm=false) const;  evaluate confidence interval for the data set used in the last fit the confidence interval are returned as a vector of data points ;  ; void GetConfidenceIntervals (unsigned int n, unsigned int stride1, unsigned int stride2, const double *x, double *ci, double cl=0.95, bool norm=false) const;  get confidence intervals for an array of n points x. ;  ; template<class Matrix > ; void GetCorrelationMatrix (Matrix &mat) const;  fill a correlation matrix elements using a generic symmetric matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ;  ; template<class Matrix > ; void GetCovarianceMatrix (Matrix &mat) const;  fill covariance matrix elements using a generic matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ;  ; const double * GetErrors () const;  parameter errors (return const pointer) ;  ; std::string GetParameterName (unsigned int ipar) const;  get name of parameter (deprecated) ;  ; const double * GetParams () const;  parameter values (return const pointer) ;  ; double GlobalCC (unsigned int i) const;  parameter global correlation coefficient ;  ; bool HasMinosError (unsigned int i) const;  query if parameter i has the Minos error ;  ; int Index (const std::string &name) const;  get index for parameter name (return -1 if not found) ;  ; bool IsEmpty () const;  True if a fit result does not exist (even invalid) with parameter values. ;  ; bool IsParameterBound (unsigned int ipar) const;  query if a parameter is bound ;  ; bool IsParameterFixed (unsigned int ipar) const;  query if a parameter is fixed ;  ; bool IsValid () const;  True if fit successful, otherwise false. ;  ; double LowerError (unsigned int i) const;  lower Minos error. If Minos has not run for parameter i return the parabolic error ;  ; double MinFcnValue () const;  Return value of the objective",MatchSource.WIKI,doc/master/classTFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitResult.html
Integrability,message,message," of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TFitResult Class ReferenceHistogram Library. ; Extends the ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O. ; Definition at line 34 of file TFitResult.h. Public Member Functions;  TFitResult (const char *name, const char *title);  ;  TFitResult (const ROOT::Fit::FitResult &f);  Constructor from a ROOT::Fit::FitResult copy the contained TF1 pointer function if it is. ;  ;  TFitResult (int status=0);  ;  ~TFitResult () override;  ; bool Contour (unsigned int ipar, unsigned int jpar, TGraph *gr, double confLevel=0.683);  Create a 2D contour around the minimum for the parameter ipar and jpar if a minimum does not exist or is invalid it will return false on exit a TGraph is filled with the contour points the number of contour points is determined by the size of the TGraph. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; double Error (unsigned int i) const;  ; TMatrixDSym GetCorrelationMatrix () const;  Return the correlation matrix from fit. ;  ; TMatrixDSym GetCovarianceMatrix () const;  Return the covariance matrix from fit. ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print result of the fit, by default chi2, parameter values and errors. ;  ; bool Scan (unsigned int ipar, TGraph *gr, double xmin=0, double xmax=0);  Scan parameter ipar between value of xmin and xmax A graph must be given which will be on return filled with the scan resul If the graph size is zero, a default size n = 40 will be used. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &na",MatchSource.WIKI,doc/master/classTFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitResult.html
Modifiability,inherit,inheritance,". ROOT: TFitResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TFitResult Class ReferenceHistogram Library. ; Extends the ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O. ; Definition at line 34 of file TFitResult.h. Public Member Functions;  TFitResult (const char *name, const char *title);  ;  TFitResult (const ROOT::Fit::FitResult &f);  Constructor from a ROOT::Fit::FitResult copy the contained TF1 pointer function if it is. ;  ;  TFitResult (int status=0);  ;  ~TFitResult () override;  ; bool Contour (unsigned int ipar, unsigned int jpar, TGraph *gr, double confLevel=0.683);  Create a 2D contour around the minimum for the parameter ipar and jpar if a minimum does not exist or is invalid it will return false on exit a TGraph is filled with the contour points the number of contour points is determined by the size of the TGraph. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; double Error (unsigned int i) const;  ; TMatrixDSym GetCorrelationMatrix () const;  Return the correlation matrix from fit. ;  ; TMatrixDSym GetCovarianceMatrix () const;  Return the covariance matrix from fit. ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print result of the fit, by default chi2, parameter values and errors. ;  ; bool Scan (unsigned int ipar, TGraph *gr, double xmin=0, double xmax=0);  Scan parameter ipar between value of xmin and xmax A graph must be given which will be on return filled with the scan resul If the graph size is zero, a default size n = 40 will be used. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (co",MatchSource.WIKI,doc/master/classTFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitResult.html
Performance,perform,performed,"eter ;  ; void Print (std::ostream &os, bool covmat=false) const;  print the result and optionally covariance matrix and correlations ;  ; void PrintCovMatrix (std::ostream &os) const;  print error matrix and correlations ;  ; double Prob () const;  p value of the fit (chi2 probability) ;  ; bool Scan (unsigned int ipar, unsigned int &npoints, double *pntsx, double *pntsy, double xmin=0, double xmax=0);  scan likelihood value of parameter and fill the given graph. ;  ; void SetChi2AndNdf (double chi2, unsigned int npoints);  Set the chi2 and the ndf This function should be called when using an external FCN for fitting and one provides the chi2 and the number of fitting data points) to store and have them printed in the FitResult class. ;  ; void SetMinosError (unsigned int i, double elow, double eup);  set the Minos errors for parameter i (called by the Fitter class when running Minos) ;  ; int Status () const;  minimizer status code ;  ; bool Update (const std::shared_ptr< ROOT::Math::Minimizer > &min, const ROOT::Fit::FitConfig &fconfig, bool isValid, unsigned int ncalls=0);  Update the fit result with a new minimization status To be run only if same fit is performed with same configuration Note that in this case MINOS is not re-run. ;  ; double UpperError (unsigned int i) const;  upper Minos error. If Minos has not run for parameter i return the parabolic error ;  ; double Value (unsigned int i) const;  parameter value by index ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Ver",MatchSource.WIKI,doc/master/classTFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitResult.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitResult.html
Testability,log,log-likelihood,"Bits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from ROOT::Fit::FitResult;  FitResult ();  Default constructor for an empty (non valid) fit result. ;  ;  FitResult (const FitConfig &fconfig);  Constructor from a fit-config for a dummy fit (e.g. ;  ; virtual ~FitResult ();  Destructor. ;  ; double Chi2 () const;  Return the Chi2 value after fitting In case of unbinned fits (or not defined one, see the documentation of Fitter::FitFCN) return -1 In case of binned likelihood fits (Poisson Likelihood) return the 2 * negative log-likelihood ratio using the definition of Baker-Cousins. ;  ; bool Contour (unsigned int ipar, unsigned int jpar, unsigned int &npoints, double *pntsx, double *pntsy, double confLevel=0.683);  create contour of two parameters around the minimum pass as option confidence level: default is a value of 0.683 ;  ; double Correlation (unsigned int i, unsigned int j) const;  retrieve correlation elements ;  ; double CovMatrix (unsigned int i, unsigned int j) const;  retrieve covariance matrix element ;  ; int CovMatrixStatus () const;  covariance matrix status code using Minuit convention : =0 not calculated, =1 approximated, =2 made pos def , =3 accurate ;  ; double Edm () const;  Expected distance from minimum. ;  ; double Error (unsigned int i) const;  parameter error by index ;  ; const std::vector< double > & Errors () const;  parameter errors (return st::vector) ;  ; void FillResult (const std:",MatchSource.WIKI,doc/master/classTFitResult.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitResult.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TFitResultPtr Member List. This is the complete list of members for TFitResultPtr, including all inherited members. Class()TFitResultPtrstatic; Class_Name()TFitResultPtrstatic; Class_Version()TFitResultPtrinlinestatic; DeclFileName()TFitResultPtrinlinestatic; fPointerTFitResultPtrprivate; fStatusTFitResultPtrprivate; Get() constTFitResultPtr; IsA() constTFitResultPtrinlinevirtual; operator int() constTFitResultPtrinline; operator*() constTFitResultPtr; operator->() constTFitResultPtr; operator=(const TFitResultPtr &rhs)TFitResultPtr; Streamer(TBuffer &)TFitResultPtrvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TFitResultPtrinline; TFitResultPtr(int status=-1)TFitResultPtrinline; TFitResultPtr(const std::shared_ptr< TFitResult > &p)TFitResultPtr; TFitResultPtr(TFitResult *p)TFitResultPtr; TFitResultPtr(const TFitResultPtr &rhs)TFitResultPtr; ~TFitResultPtr()TFitResultPtrvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTFitResultPtr-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitResultPtr-members.html
Testability,assert,assert,"s |; Static Public Member Functions |; Private Attributes |; List of all members ; TFitResultPtr Class Reference. ; Provides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointer, i.e. ; it is like a smart pointer to a TFitResult. In addition it provides an automatic conversion to an integer. In this way it can be returned from the TH1::Fit method and the change in TH1::Fit be backward compatible. ; Definition at line 32 of file TFitResultPtr.h. Public Member Functions;  TFitResultPtr (const std::shared_ptr< TFitResult > &p);  Constructor from a TFitResult pointer. ;  ;  TFitResultPtr (const TFitResultPtr &rhs);  ;  TFitResultPtr (int status=-1);  ;  TFitResultPtr (TFitResult *p);  Constructor from a TFitResult pointer. ;  ; virtual ~TFitResultPtr ();  Destructor. ;  ; TFitResult * Get () const;  Return contained pointer. ;  ; virtual TClass * IsA () const;  ;  operator int () const;  ; TFitResult & operator* () const;  Implement the de-reference operator to make the class acts as a pointer to a TFitResult assert in case the class does not contain a pointer to TFitResult. ;  ; TFitResult * operator-> () const;  Implement the -> operator to make the class acts as a pointer to a TFitResult. ;  ; TFitResultPtr & operator= (const TFitResultPtr &rhs);  Assignment operator. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; std::shared_ptr< TFitResult > fPointer;  ! Smart Pointer to TFitResult class ;  ; int fStatus;  fit status code ;  . #include <TFitResultPtr.h>; Constructor & Destructor Documentation. ◆ TFitResultPtr() [1/4]. TFitResultPtr::TFitResultPtr ; (; int ; status = -1). inline . Definition at line 35 of file TFitResultPtr.h. ◆ TFitResultPtr() [2/4]. TFitResultPt",MatchSource.WIKI,doc/master/classTFitResultPtr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitResultPtr.html
Availability,error,error,"d graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTFITSHDU.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFITSHDU.html
Integrability,interface,interface,". ROOT: TFITSHDU Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFITSHDU Class ReferenceGraphics » 2D Graphics » FITS file. ; FITS file interface class. ; TFITSHDU is a class that allows extracting images and data from FITS files and contains several methods to manage them. ; Definition at line 35 of file TFITS.h. Classes; union  Cell;  ; struct  Column;  ; struct  HDURecord;  . Public Types; enum  EColumnTypes { kString; , kRealNumber; , kRealArray; , kRealVector; };  ; enum  EHDUTypes { kImageHDU; , kTableHDU; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFITSHDU (const char *filepath, const char *extension_name);  TFITSHDU constructor from filepath and extension name. ;  ;  TFITSHDU (const char *filepath, Int_t extension_number);  TFITSHDU constructor from filepath and extension number. ;  ;  TFITSHDU (const char *filepath_with_filter);  TFITSHDU constructor from file path with HDU selection filter. ;  ;  ~TFITSHDU () override;  TFITSHDU destructor. ;  ; Bool_t Change (const char *filter);  Change to another HDU given by ""filter"". ;  ; Bool_t Change (Int",MatchSource.WIKI,doc/master/classTFITSHDU.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFITSHDU.html
Modifiability,inherit,inherited,". ROOT: TFITSHDU Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFITSHDU Class ReferenceGraphics » 2D Graphics » FITS file. ; FITS file interface class. ; TFITSHDU is a class that allows extracting images and data from FITS files and contains several methods to manage them. ; Definition at line 35 of file TFITS.h. Classes; union  Cell;  ; struct  Column;  ; struct  HDURecord;  . Public Types; enum  EColumnTypes { kString; , kRealNumber; , kRealArray; , kRealVector; };  ; enum  EHDUTypes { kImageHDU; , kTableHDU; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFITSHDU (const char *filepath, const char *extension_name);  TFITSHDU constructor from filepath and extension name. ;  ;  TFITSHDU (const char *filepath, Int_t extension_number);  TFITSHDU constructor from filepath and extension number. ;  ;  TFITSHDU (const char *filepath_with_filter);  TFITSHDU constructor from file path with HDU selection filter. ;  ;  ~TFITSHDU () override;  TFITSHDU destructor. ;  ; Bool_t Change (const char *filter);  Change to another HDU given by ""filter"". ;  ; Bool_t Change (Int",MatchSource.WIKI,doc/master/classTFITSHDU.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFITSHDU.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTFITSHDU.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFITSHDU.html
Availability,error,errors,"oint confidence intervals for the fitted function. ;  ; void GetConfidenceIntervals (TObject *obj, Double_t cl=0.95) override;  Computes confidence intervals at level cl. ;  ; Double_t * GetCovarianceMatrix () const override;  return a pointer to the covariance matrix ;  ; Double_t GetCovarianceMatrixElement (Int_t i, Int_t j) const override;  return element i,j from the covariance matrix ;  ; Int_t GetErrors (Int_t ipar, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &globcc) const override;  return current errors for a parameter ipar : parameter number eplus : upper error eminus : lower error eparab : parabolic error globcc : global correlation coefficient ;  ; TMinuit * GetMinuit () const;  ; Int_t GetNumberFreeParameters () const override;  return the number of free parameters ;  ; Int_t GetNumberTotalParameters () const override;  return the total number of parameters (free + fixed) ;  ; Double_t GetParameter (Int_t ipar) const override;  return current value of parameter ipar ;  ; Int_t GetParameter (Int_t ipar, char *name, Double_t &value, Double_t &verr, Double_t &vlow, Double_t &vhigh) const override;  return current values for a parameter ;  ; Double_t GetParError (Int_t ipar) const override;  return error of parameter ipar ;  ; const char * GetParName (Int_t ipar) const override;  return name of parameter ipar ;  ; Int_t GetStats (Double_t &amin, Double_t &edm, Double_t &errdef, Int_t &nvpar, Int_t &nparx) const override;  return global fit parameters ;  ; Double_t GetSumLog (Int_t i) override;  return Sum(log(i) i=0,n used by log likelihood fits ;  ; TClass * IsA () const override;  ; Bool_t IsFixed (Int_t ipar) const override;  return kTRUE if parameter ipar is fixed, kFALSE otherwise) ;  ; void PrintResults (Int_t level, Double_t amin) const override;  Print fit results. ;  ; void ReleaseParameter (Int_t ipar) override;  Release parameter ipar. ;  ; void SetFCN (void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t)) override;  ",MatchSource.WIKI,doc/master/classTFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitter.html
Integrability,interface,interface,". ROOT: TFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TFitter Class Reference. ; Legacy Code TFitter is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TFitter might still be a valid solution. Consider switching to ROOT::Fit::Fitter. ; The ROOT standard fitter based on TMinuit ; Definition at line 19 of file TFitter.h. Public Member Functions;  TFitter (Int_t maxpar=25);  Default constructor. ;  ;  ~TFitter () override;  Default destructor. ;  ; Double_t Chisquare (Int_t npar, Double_t *params) const override;  ; void Clear (Option_t *option="""") override;  reset the fitter environment ;  ; Int_t ExecuteCommand (const char *command, Double_t *args, Int_t nargs) override;  Execute a fitter command; command : command string args : list of nargs command arguments. ;  ; void FixParameter (Int_t ipar) override;  Fix parameter ipar. ;  ; void GetConfidenceIntervals (Int_t n, Int_t ndim, const Double_t *x, Double_t *ci, Double_t cl=0.95) override;  Computes point-by-point confidence intervals for the fitted function. ;  ; void GetConfidenceIntervals (TObject *obj, Double_t cl=0.95) override;  Computes confidence intervals at level cl. ;  ; Double_t * GetCovarianceMatrix () const override;  return a pointer to the covariance matrix ;  ; Double_t GetCovarianceMatrixElement (Int_t i, Int_t j) const override;  return element i,j from the covariance matrix ;  ; Int_t GetErrors (Int_t ipar, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &globcc) const override;  return current errors for a parameter ipar : parameter number eplus : upper error eminus : lower error eparab : parabolic error globcc : global correlation coeffic",MatchSource.WIKI,doc/master/classTFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitter.html
Modifiability,inherit,inherited,";  return global fit parameters ;  ; Double_t GetSumLog (Int_t i) override;  return Sum(log(i) i=0,n used by log likelihood fits ;  ; TClass * IsA () const override;  ; Bool_t IsFixed (Int_t ipar) const override;  return kTRUE if parameter ipar is fixed, kFALSE otherwise) ;  ; void PrintResults (Int_t level, Double_t amin) const override;  Print fit results. ;  ; void ReleaseParameter (Int_t ipar) override;  Release parameter ipar. ;  ; void SetFCN (void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t)) override;  Specify the address of the fitting algorithm. ;  ; void SetFitMethod (const char *name) override;  ret fit method (chisquare or log-likelihood) ;  ; Int_t SetParameter (Int_t ipar, const char *parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh) override;  set initial values for a parameter ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualFitter;  TVirtualFitter ();  Default constructor. ;  ;  ~TVirtualFitter () override;  Cleanup virtual fitter. ;  ; virtual FCNFunc_t GetFCN ();  ; virtual Foption_t GetFitOption () const;  ; TMethodCall * GetMethodCall () const;  ; virtual TObject * GetObjectFit () const;  ; virtual TObject * GetUserFunc () const;  ; virtual Int_t GetXfirst () const;  ; virtual Int_t GetXlast () const;  ; virtual Int_t GetYfirst () const;  ; virtual Int_t GetYlast () const;  ; virtual Int_t GetZfirst () const;  ; virtual Int_t GetZlast () const;  ; TClass * IsA () const override;  ; virtual Double_t * SetCache (Int_t npoints, Int_t psize);  Initialize the cache array npoints is the number of points to be stored (or already stored) in the cache psize is the number of elements per point. ;  ; virtual void SetFitOption (Foption_t option);  ; virtual void SetObjectFit (TObject *obj);  ; virtual void SetUserFunc (TObject *userfunc);  ; virtual void SetXfirst (Int_t first);",MatchSource.WIKI,doc/master/classTFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitter.html
Performance,cache,cache,"e_t *, Double_t &f, Double_t *, Int_t)) override;  Specify the address of the fitting algorithm. ;  ; void SetFitMethod (const char *name) override;  ret fit method (chisquare or log-likelihood) ;  ; Int_t SetParameter (Int_t ipar, const char *parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh) override;  set initial values for a parameter ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualFitter;  TVirtualFitter ();  Default constructor. ;  ;  ~TVirtualFitter () override;  Cleanup virtual fitter. ;  ; virtual FCNFunc_t GetFCN ();  ; virtual Foption_t GetFitOption () const;  ; TMethodCall * GetMethodCall () const;  ; virtual TObject * GetObjectFit () const;  ; virtual TObject * GetUserFunc () const;  ; virtual Int_t GetXfirst () const;  ; virtual Int_t GetXlast () const;  ; virtual Int_t GetYfirst () const;  ; virtual Int_t GetYlast () const;  ; virtual Int_t GetZfirst () const;  ; virtual Int_t GetZlast () const;  ; TClass * IsA () const override;  ; virtual Double_t * SetCache (Int_t npoints, Int_t psize);  Initialize the cache array npoints is the number of points to be stored (or already stored) in the cache psize is the number of elements per point. ;  ; virtual void SetFitOption (Foption_t option);  ; virtual void SetObjectFit (TObject *obj);  ; virtual void SetUserFunc (TObject *userfunc);  ; virtual void SetXfirst (Int_t first);  ; virtual void SetXlast (Int_t last);  ; virtual void SetYfirst (Int_t first);  ; virtual void SetYlast (Int_t last);  ; virtual void SetZfirst (Int_t first);  ; virtual void SetZlast (Int_t last);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed",MatchSource.WIKI,doc/master/classTFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitter.html
Security,hash,hash,"etZfirst (Int_t first);  ; virtual void SetZlast (Int_t last);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitter.html
Testability,log,log,"oint confidence intervals for the fitted function. ;  ; void GetConfidenceIntervals (TObject *obj, Double_t cl=0.95) override;  Computes confidence intervals at level cl. ;  ; Double_t * GetCovarianceMatrix () const override;  return a pointer to the covariance matrix ;  ; Double_t GetCovarianceMatrixElement (Int_t i, Int_t j) const override;  return element i,j from the covariance matrix ;  ; Int_t GetErrors (Int_t ipar, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &globcc) const override;  return current errors for a parameter ipar : parameter number eplus : upper error eminus : lower error eparab : parabolic error globcc : global correlation coefficient ;  ; TMinuit * GetMinuit () const;  ; Int_t GetNumberFreeParameters () const override;  return the number of free parameters ;  ; Int_t GetNumberTotalParameters () const override;  return the total number of parameters (free + fixed) ;  ; Double_t GetParameter (Int_t ipar) const override;  return current value of parameter ipar ;  ; Int_t GetParameter (Int_t ipar, char *name, Double_t &value, Double_t &verr, Double_t &vlow, Double_t &vhigh) const override;  return current values for a parameter ;  ; Double_t GetParError (Int_t ipar) const override;  return error of parameter ipar ;  ; const char * GetParName (Int_t ipar) const override;  return name of parameter ipar ;  ; Int_t GetStats (Double_t &amin, Double_t &edm, Double_t &errdef, Int_t &nvpar, Int_t &nparx) const override;  return global fit parameters ;  ; Double_t GetSumLog (Int_t i) override;  return Sum(log(i) i=0,n used by log likelihood fits ;  ; TClass * IsA () const override;  ; Bool_t IsFixed (Int_t ipar) const override;  return kTRUE if parameter ipar is fixed, kFALSE otherwise) ;  ; void PrintResults (Int_t level, Double_t amin) const override;  Print fit results. ;  ; void ReleaseParameter (Int_t ipar) override;  Release parameter ipar. ;  ; void SetFCN (void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t)) override;  ",MatchSource.WIKI,doc/master/classTFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFitter.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoam.html
Deployability,integrat,integrator,". ROOT: TFoam Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFoam Class Reference. ; TFoam is the main class of the multi-dimensional general purpose Monte Carlo event generator (integrator) FOAM. . FOAM Version 1.02M; AuthorsS. Jadach and P.Sawicki Institute of Nuclear Physics, Cracow, Poland Stanislaw. Jadac.nosp@m.h@if.nosp@m.j.edu.nosp@m..pl, Pawel.nosp@m..Saw.nosp@m.icki@.nosp@m.ifj..nosp@m.edu.p.nosp@m.l. What is FOAM for?. Suppose you want to generate randomly points (vectors) according to an arbitrary probability distribution in n dimensions, for which you supply your own method. FOAM can do it for you! Even if your distributions has quite strong peaks and is discontinuous!; FOAM generates random points with weight one or with variable weight.; FOAM is capable to integrate using efficient ""adaptive"" MC method. (The distribution does not need to be normalized to one.). How does it work?; FOAM is the simplified version of the multi-dimensional general purpose Monte Carlo event generator (integrator) FOAM. It creates hyper-rectangular ""foam of cells"", which is more dense around its peaks. See the following 2-dim. example of the map of 1000 cells for doubly peaked distribution:. FOAM is now fully integrated with the ROOT package. The important bonus of the ROOT use is persistency of the FOAM objects!; For more sophisticated problems full version of FOAM may be more appropriate: See full version of FOAM. Simple example of the use of FOAM:; ; #include ""Riostream.h""; #include ""TFoam.h""; #include ""TCanvas.h""; #include ""TH2.h""; #include ""TMath.h""; #include ""TFoamIntegrand.h""; #include ""TRandom3.h""; ; //_____________________________________________________________________________; Double_t sqr(Double_t x){; return x*x;; }; //______________________________________",MatchSource.WIKI,doc/master/classTFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoam.html
Energy Efficiency,efficient,efficient,"T: TFoam Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFoam Class Reference. ; TFoam is the main class of the multi-dimensional general purpose Monte Carlo event generator (integrator) FOAM. . FOAM Version 1.02M; AuthorsS. Jadach and P.Sawicki Institute of Nuclear Physics, Cracow, Poland Stanislaw. Jadac.nosp@m.h@if.nosp@m.j.edu.nosp@m..pl, Pawel.nosp@m..Saw.nosp@m.icki@.nosp@m.ifj..nosp@m.edu.p.nosp@m.l. What is FOAM for?. Suppose you want to generate randomly points (vectors) according to an arbitrary probability distribution in n dimensions, for which you supply your own method. FOAM can do it for you! Even if your distributions has quite strong peaks and is discontinuous!; FOAM generates random points with weight one or with variable weight.; FOAM is capable to integrate using efficient ""adaptive"" MC method. (The distribution does not need to be normalized to one.). How does it work?; FOAM is the simplified version of the multi-dimensional general purpose Monte Carlo event generator (integrator) FOAM. It creates hyper-rectangular ""foam of cells"", which is more dense around its peaks. See the following 2-dim. example of the map of 1000 cells for doubly peaked distribution:. FOAM is now fully integrated with the ROOT package. The important bonus of the ROOT use is persistency of the FOAM objects!; For more sophisticated problems full version of FOAM may be more appropriate: See full version of FOAM. Simple example of the use of FOAM:; ; #include ""Riostream.h""; #include ""TFoam.h""; #include ""TCanvas.h""; #include ""TH2.h""; #include ""TMath.h""; #include ""TFoamIntegrand.h""; #include ""TRandom3.h""; ; //_____________________________________________________________________________; Double_t sqr(Double_t x){; return x*x;; }; //__________________________________________",MatchSource.WIKI,doc/master/classTFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoam.html
Integrability,integrat,integrator,". ROOT: TFoam Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFoam Class Reference. ; TFoam is the main class of the multi-dimensional general purpose Monte Carlo event generator (integrator) FOAM. . FOAM Version 1.02M; AuthorsS. Jadach and P.Sawicki Institute of Nuclear Physics, Cracow, Poland Stanislaw. Jadac.nosp@m.h@if.nosp@m.j.edu.nosp@m..pl, Pawel.nosp@m..Saw.nosp@m.icki@.nosp@m.ifj..nosp@m.edu.p.nosp@m.l. What is FOAM for?. Suppose you want to generate randomly points (vectors) according to an arbitrary probability distribution in n dimensions, for which you supply your own method. FOAM can do it for you! Even if your distributions has quite strong peaks and is discontinuous!; FOAM generates random points with weight one or with variable weight.; FOAM is capable to integrate using efficient ""adaptive"" MC method. (The distribution does not need to be normalized to one.). How does it work?; FOAM is the simplified version of the multi-dimensional general purpose Monte Carlo event generator (integrator) FOAM. It creates hyper-rectangular ""foam of cells"", which is more dense around its peaks. See the following 2-dim. example of the map of 1000 cells for doubly peaked distribution:. FOAM is now fully integrated with the ROOT package. The important bonus of the ROOT use is persistency of the FOAM objects!; For more sophisticated problems full version of FOAM may be more appropriate: See full version of FOAM. Simple example of the use of FOAM:; ; #include ""Riostream.h""; #include ""TFoam.h""; #include ""TCanvas.h""; #include ""TH2.h""; #include ""TMath.h""; #include ""TFoamIntegrand.h""; #include ""TRandom3.h""; ; //_____________________________________________________________________________; Double_t sqr(Double_t x){; return x*x;; }; //______________________________________",MatchSource.WIKI,doc/master/classTFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoam.html
Modifiability,variab,variable,". ROOT: TFoam Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFoam Class Reference. ; TFoam is the main class of the multi-dimensional general purpose Monte Carlo event generator (integrator) FOAM. . FOAM Version 1.02M; AuthorsS. Jadach and P.Sawicki Institute of Nuclear Physics, Cracow, Poland Stanislaw. Jadac.nosp@m.h@if.nosp@m.j.edu.nosp@m..pl, Pawel.nosp@m..Saw.nosp@m.icki@.nosp@m.ifj..nosp@m.edu.p.nosp@m.l. What is FOAM for?. Suppose you want to generate randomly points (vectors) according to an arbitrary probability distribution in n dimensions, for which you supply your own method. FOAM can do it for you! Even if your distributions has quite strong peaks and is discontinuous!; FOAM generates random points with weight one or with variable weight.; FOAM is capable to integrate using efficient ""adaptive"" MC method. (The distribution does not need to be normalized to one.). How does it work?; FOAM is the simplified version of the multi-dimensional general purpose Monte Carlo event generator (integrator) FOAM. It creates hyper-rectangular ""foam of cells"", which is more dense around its peaks. See the following 2-dim. example of the map of 1000 cells for doubly peaked distribution:. FOAM is now fully integrated with the ROOT package. The important bonus of the ROOT use is persistency of the FOAM objects!; For more sophisticated problems full version of FOAM may be more appropriate: See full version of FOAM. Simple example of the use of FOAM:; ; #include ""Riostream.h""; #include ""TFoam.h""; #include ""TCanvas.h""; #include ""TH2.h""; #include ""TMath.h""; #include ""TFoamIntegrand.h""; #include ""TRandom3.h""; ; //_____________________________________________________________________________; Double_t sqr(Double_t x){; return x*x;; }; //______________________________________",MatchSource.WIKI,doc/master/classTFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoam.html
Performance,optimiz,optimization,"axWtRej;  Maximum weight in rejection for getting wt=1 events. ;  ; Double_t fMCerror;  and its error ;  ; TFoamMaxwt * fMCMonit;  Monitor of the MC weight for measuring MC efficiency. ;  ; Double_t fMCresult;  True Integral R from MC series. ;  ; Double_t * fMCvect;  [fDim] Generated MC vector for the outside user ;  ; Double_t fMCwt;  MC weight. ;  ; TMethodCall * fMethodCall;  ! ROOT's pointer to user-defined global distribution function ;  ; TString fName;  Name of a given instance of the FOAM class. ;  ; Int_t fNBin;  No. of bins in the edge histogram for cell MC exploration. ;  ; Long_t fNCalls;  Total number of the function calls. ;  ; Int_t fNCells;  Maximum number of cells. ;  ; Long_t fNEffev;  Total number of effective events (wt=1) in the foam buildup. ;  ; Double_t fNevGen;  Total number of the generated MC events. ;  ; Int_t fNoAct;  Number of active cells. ;  ; Int_t fNSampl;  No. of MC events, when dividing (exploring) cell. ;  ; Int_t fOptDrive;  Optimization switch =1,2 for variance or maximum weight optimization. ;  ; Int_t fOptPRD;  Option switch for predefined division, for quick check. ;  ; Int_t fOptRej;  Switch =0 for weighted events; =1 for unweighted events in MC. ;  ; Double_t * fPrimAcu;  [fNoAct] Array of cumulative probability of all active cells ;  ; Double_t fPrime;  Primary integral R' (R=R'<wt>) ;  ; TRandom * fPseRan;  Pointer to user-defined generator of pseudorandom numbers. ;  ; TFoamIntegrand * fRho;  ! Pointer to the user-defined integrand function/distribution ;  ; Int_t fRNmax;  Maximum No. of the rand. numb. requested at once. ;  ; Double_t * fRvec;  [fRNmax] random number vector from r.n. generator fDim+1 maximum elements ;  ; Double_t fSumOve;  Total Sum of overweighted events. ;  ; Double_t fSumWt;  ; Double_t fSumWt2;  Total sum of wt and wt^2. ;  ; TString fVersion;  Actual version of the FOAM like (1.01m) ;  ; Double_t fWtMax;  ; Double_t fWtMin;  Maximum/Minimum MC weight. ;  ; TFoamVect ** fXdivPRD;  ! Lists of divis",MatchSource.WIKI,doc/master/classTFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoam.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoam.html
Usability,simpl,simplified,"c Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFoam Class Reference. ; TFoam is the main class of the multi-dimensional general purpose Monte Carlo event generator (integrator) FOAM. . FOAM Version 1.02M; AuthorsS. Jadach and P.Sawicki Institute of Nuclear Physics, Cracow, Poland Stanislaw. Jadac.nosp@m.h@if.nosp@m.j.edu.nosp@m..pl, Pawel.nosp@m..Saw.nosp@m.icki@.nosp@m.ifj..nosp@m.edu.p.nosp@m.l. What is FOAM for?. Suppose you want to generate randomly points (vectors) according to an arbitrary probability distribution in n dimensions, for which you supply your own method. FOAM can do it for you! Even if your distributions has quite strong peaks and is discontinuous!; FOAM generates random points with weight one or with variable weight.; FOAM is capable to integrate using efficient ""adaptive"" MC method. (The distribution does not need to be normalized to one.). How does it work?; FOAM is the simplified version of the multi-dimensional general purpose Monte Carlo event generator (integrator) FOAM. It creates hyper-rectangular ""foam of cells"", which is more dense around its peaks. See the following 2-dim. example of the map of 1000 cells for doubly peaked distribution:. FOAM is now fully integrated with the ROOT package. The important bonus of the ROOT use is persistency of the FOAM objects!; For more sophisticated problems full version of FOAM may be more appropriate: See full version of FOAM. Simple example of the use of FOAM:; ; #include ""Riostream.h""; #include ""TFoam.h""; #include ""TCanvas.h""; #include ""TH2.h""; #include ""TMath.h""; #include ""TFoamIntegrand.h""; #include ""TRandom3.h""; ; //_____________________________________________________________________________; Double_t sqr(Double_t x){; return x*x;; }; //_____________________________________________________________________________; Double_t Camel2(Int_t nDim, Double_t *Xarg){; // 2-dimensional distribution for Foam, normalized to one (within 1e-5); Double",MatchSource.WIKI,doc/master/classTFoam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoam.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFoamCell.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoamCell.html
Energy Efficiency,allocate,allocated,". ROOT: TFoamCell Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TFoamCell Class Reference. ; Used by TFoam. ; Objects of this class are hyper-rectangular cells organized in the binary tree. Special algorithm for encoding relative positioning of the cells allow to save total memory allocation needed for the system of cells. ; Definition at line 12 of file TFoamCell.h. Public Member Functions;  TFoamCell ();  Default constructor for streamer. ;  ;  TFoamCell (Int_t);  User constructor allocating single empty Cell. ;  ;  TFoamCell (TFoamCell &&)=delete;  ;  TFoamCell (TFoamCell const &)=delete;  ;  ~TFoamCell () override;  Destructor. ;  ; void CalcVolume ();  Calculates volume of the cell using size params which are calculated. ;  ; void Fill (Int_t, TFoamCell *, TFoamCell *, TFoamCell *);  Fills in certain data into newly allocated cell. ;  ; Int_t GetBest () const;  ; TFoamCell ** GetCells () const;  ; TFoamCell * GetDau0 () const;  ; TFoamCell * GetDau1 () const;  ; Double_t GetDriv () const;  ; void GetHcub (TFoamVect &, TFoamVect &) const;  Provides size and position of the cell These parameter are calculated by analyzing information in all parents cells up to the root cell. ;  ; void GetHSize (TFoamVect &) const;  Provides size of the cell Size parameters are calculated by analyzing information in all parents cells up to the root cell. ;  ; Double_t GetIntg () const;  ; TFoamCell * GetPare () const;  ; Double_t GetPrim () const;  ; Int_t GetSerial () const;  ; Int_t GetStat () const;  ; Double_t GetVolume () const;  ; Double_t GetXdiv () const;  ; TClass * IsA () const override;  ; TFoamCell & operator= (const TFoamCell &)=delete;  ; TFoamCell & operator= (TFoamCell &&)=delete;  ; void Print (Option_t *option) const override;  Printout of the cell geometry parameters for the debug purpo",MatchSource.WIKI,doc/master/classTFoamCell.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoamCell.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFoamCell.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoamCell.html
Modifiability,inherit,inherited,"rmation in all parents cells up to the root cell. ;  ; Double_t GetIntg () const;  ; TFoamCell * GetPare () const;  ; Double_t GetPrim () const;  ; Int_t GetSerial () const;  ; Int_t GetStat () const;  ; Double_t GetVolume () const;  ; Double_t GetXdiv () const;  ; TClass * IsA () const override;  ; TFoamCell & operator= (const TFoamCell &)=delete;  ; TFoamCell & operator= (TFoamCell &&)=delete;  ; void Print (Option_t *option) const override;  Printout of the cell geometry parameters for the debug purpose. ;  ; void SetBest (Int_t Best);  ; void SetCells (TFoamCell **cells);  ; void SetDau0 (TFoamCell *Daug);  ; void SetDau1 (TFoamCell *Daug);  ; void SetDriv (Double_t Driv);  ; void SetIntg (Double_t Intg);  ; void SetPrim (Double_t Prim);  ; void SetSerial (Int_t Serial);  ; void SetStat (Int_t Stat);  ; void SetXdiv (Double_t Xdiv);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTFoamCell.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoamCell.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTFoamCell.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoamCell.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFoamIntegrand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoamIntegrand.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFoamIntegrand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoamIntegrand.html
Modifiability,inherit,inherited,". ROOT: TFoamIntegrand Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TFoamIntegrand Class Referenceabstract. ; Abstract class representing n-dimensional real positive integrand function. ; Definition at line 9 of file TFoamIntegrand.h. Public Member Functions;  TFoamIntegrand ();  ;  ~TFoamIntegrand () override;  ; virtual Double_t Density (Int_t ndim, Double_t *)=0;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; ",MatchSource.WIKI,doc/master/classTFoamIntegrand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoamIntegrand.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTFoamIntegrand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoamIntegrand.html
Availability,toler,tolerance,"eference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Attributes |; List of all members ; TFoamMaxwt Class Reference. ; Small auxiliary class for controlling MC weight. ; It provides certain measure of the ""maximum weight"" depending on small user-parameter ""epsilon"". It creates and uses 2 histograms of the TH1D class. User defines no. of bins nBin, nBin=1000 is recommended wmax defines weight range (1,wmax), it is adjusted ""manually"" ; Definition at line 12 of file TFoamMaxwt.h. Public Member Functions;  TFoamMaxwt ();  Constructor for streamer. ;  ;  TFoamMaxwt (Double_t, Int_t);  Principal user constructor. ;  ;  TFoamMaxwt (TFoamMaxwt &From);  Explicit COPY CONSTRUCTOR (unused, so far) ;  ;  ~TFoamMaxwt () override;  Destructor. ;  ; void Fill (Double_t);  Filling analyzed weight. ;  ; void GetMCeff (Double_t, Double_t &, Double_t &);  Calculates Efficiency= aveWt/wtLim for a given tolerance level epsilon<<1 using information stored in two histograms. ;  ; TClass * IsA () const override;  ; void Make (Double_t, Double_t &);  Calculates Efficiency= aveWt/wtLim for a given tolerance level epsilon<<1 To be called at the end of the MC run. ;  ; TFoamMaxwt & operator= (const TFoamMaxwt &);  substitution = ;  ; void Reset ();  Resetting weight analysis. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrows",MatchSource.WIKI,doc/master/classTFoamMaxwt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoamMaxwt.html
Integrability,depend,depending,". ROOT: TFoamMaxwt Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Attributes |; List of all members ; TFoamMaxwt Class Reference. ; Small auxiliary class for controlling MC weight. ; It provides certain measure of the ""maximum weight"" depending on small user-parameter ""epsilon"". It creates and uses 2 histograms of the TH1D class. User defines no. of bins nBin, nBin=1000 is recommended wmax defines weight range (1,wmax), it is adjusted ""manually"" ; Definition at line 12 of file TFoamMaxwt.h. Public Member Functions;  TFoamMaxwt ();  Constructor for streamer. ;  ;  TFoamMaxwt (Double_t, Int_t);  Principal user constructor. ;  ;  TFoamMaxwt (TFoamMaxwt &From);  Explicit COPY CONSTRUCTOR (unused, so far) ;  ;  ~TFoamMaxwt () override;  Destructor. ;  ; void Fill (Double_t);  Filling analyzed weight. ;  ; void GetMCeff (Double_t, Double_t &, Double_t &);  Calculates Efficiency= aveWt/wtLim for a given tolerance level epsilon<<1 using information stored in two histograms. ;  ; TClass * IsA () const override;  ; void Make (Double_t, Double_t &);  Calculates Efficiency= aveWt/wtLim for a given tolerance level epsilon<<1 To be called at the end of the MC run. ;  ; TFoamMaxwt & operator= (const TFoamMaxwt &);  substitution = ;  ; void Reset ();  Resetting weight analysis. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics",MatchSource.WIKI,doc/master/classTFoamMaxwt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoamMaxwt.html
Modifiability,inherit,inherited,"ed ""manually"" ; Definition at line 12 of file TFoamMaxwt.h. Public Member Functions;  TFoamMaxwt ();  Constructor for streamer. ;  ;  TFoamMaxwt (Double_t, Int_t);  Principal user constructor. ;  ;  TFoamMaxwt (TFoamMaxwt &From);  Explicit COPY CONSTRUCTOR (unused, so far) ;  ;  ~TFoamMaxwt () override;  Destructor. ;  ; void Fill (Double_t);  Filling analyzed weight. ;  ; void GetMCeff (Double_t, Double_t &, Double_t &);  Calculates Efficiency= aveWt/wtLim for a given tolerance level epsilon<<1 using information stored in two histograms. ;  ; TClass * IsA () const override;  ; void Make (Double_t, Double_t &);  Calculates Efficiency= aveWt/wtLim for a given tolerance level epsilon<<1 To be called at the end of the MC run. ;  ; TFoamMaxwt & operator= (const TFoamMaxwt &);  substitution = ;  ; void Reset ();  Resetting weight analysis. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTFoamMaxwt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoamMaxwt.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTFoamMaxwt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoamMaxwt.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFoamVect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoamVect.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFoamVect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoamVect.html
Modifiability,inherit,inherited,"ator- (const TFoamVect &);  subtraction operator -; difference of 2 vectors; c=a-b, a=a-b, NEVER USE IT, VERY SLOW!!! ;  ; TFoamVect & operator-= (const TFoamVect &);  unary subtraction operator -= ;  ; TFoamVect & operator= (const TFoamVect &);  substitution operator ;  ; TFoamVect & operator= (Double_t);  Loading in double prec. number, sometimes can be useful. ;  ; TFoamVect & operator= (Double_t[]);  Loading in ordinary double prec. vector, sometimes can be useful. ;  ; Double_t & operator[] (Int_t);  [] is for access to elements as in ordinary matrix like a[j]=b[j] (Perhaps against some strict rules but rather practical.) Range protection is built in, consequently for substitution one should use rather use a=b than explicit loop! ;  ; void Print (Option_t *option) const override;  Printout of all vector components on ""std::cout"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTFoamVect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoamVect.html
Security,access,access,"verride;  Destructor. ;  ; Double_t GetCoord (Int_t i) const;  ; Int_t GetDim () const;  ; TClass * IsA () const override;  ; TFoamVect & operator*= (const Double_t &);  unary multiplication operator *= ;  ; TFoamVect operator+ (const TFoamVect &);  addition operator +; sum of 2 vectors: c=a+b, a=a+b, NEVER USE IT, VERY SLOW!!! ;  ; TFoamVect & operator+= (const TFoamVect &);  unary addition operator +=; adding vector c*=x, ;  ; TFoamVect operator- (const TFoamVect &);  subtraction operator -; difference of 2 vectors; c=a-b, a=a-b, NEVER USE IT, VERY SLOW!!! ;  ; TFoamVect & operator-= (const TFoamVect &);  unary subtraction operator -= ;  ; TFoamVect & operator= (const TFoamVect &);  substitution operator ;  ; TFoamVect & operator= (Double_t);  Loading in double prec. number, sometimes can be useful. ;  ; TFoamVect & operator= (Double_t[]);  Loading in ordinary double prec. vector, sometimes can be useful. ;  ; Double_t & operator[] (Int_t);  [] is for access to elements as in ordinary matrix like a[j]=b[j] (Perhaps against some strict rules but rather practical.) Range protection is built in, consequently for substitution one should use rather use a=b than explicit loop! ;  ; void Print (Option_t *option) const override;  Printout of all vector components on ""std::cout"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash (",MatchSource.WIKI,doc/master/classTFoamVect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFoamVect.html
Availability,error,error,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; ",MatchSource.WIKI,doc/master/classTFolder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFolder.html
Energy Efficiency,efficient,efficient,"t of all members ; TFolder Class ReferenceCore ROOT classes » Base ROOT classes. ; Legacy Code TFolder is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TFolder might still be a valid solution. ; A TFolder object is a collection of objects and folders. Folders have a name and a title and are identified in the folder hierarchy by a ""Unix-like"" naming mechanism. The root of all folders is //root. New folders can be dynamically added or removed to/from a folder. The folder hierarchy can be visualized via the TBrowser. The Root folders hierarchy can be seen as a whiteboard where objects are posted. Other classes/tasks can access these objects by specifying only a string pathname. This whiteboard facility greatly improves the modularity of an application, minimizing the class relationship problem that penalizes large applications.; Pointers are efficient to communicate between classes. However, one has interest to minimize direct coupling between classes in the form of direct pointers. One better uses the naming and search service provided by the Root folders hierarchy. This makes the classes loosely coupled and also greatly facilitates I/O operations. In a client/server environment, this mechanism facilitates the access to any kind of object in //root stores running on different processes.; A TFolder is created by invoking the TFolder constructor. It is placed inside an existing folder via the TFolder::AddFolder method. One can search for a folder or an object in a folder using the FindObject method. FindObject analyses the string passed as its argument and searches in the hierarchy until it finds an object or folder matching the name.; When a folder is deleted, its reference from the parent folder and possible other folders is deleted.; If a folder has been declared the owner of its objects/folders via TFolder::SetOwner, then the contai",MatchSource.WIKI,doc/master/classTFolder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFolder.html
Integrability,interface,interface,". ROOT: TFolder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFolder Class ReferenceCore ROOT classes » Base ROOT classes. ; Legacy Code TFolder is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TFolder might still be a valid solution. ; A TFolder object is a collection of objects and folders. Folders have a name and a title and are identified in the folder hierarchy by a ""Unix-like"" naming mechanism. The root of all folders is //root. New folders can be dynamically added or removed to/from a folder. The folder hierarchy can be visualized via the TBrowser. The Root folders hierarchy can be seen as a whiteboard where objects are posted. Other classes/tasks can access these objects by specifying only a string pathname. This whiteboard facility greatly improves the modularity of an application, minimizing the class relationship problem that penalizes large applications.; Pointers are efficient to communicate between classes. However, one has interest to minimize direct coupling between classes in the form of direct pointers. One better uses the naming and search service provided by the Root folders hierarchy. This makes the classes loosely coupled and also greatly facilitates I/O operations. In a client/server environment, this mechanism facilitates the access to any kind of object in //root stores running on different processes.; A TFolder is created by invoking the TFolder constructor. It is placed inside an existing folder via the TFolder::AddFolder method. One can search for a folder or an object in a folder using the FindObject method. FindObject analyses the string passed as its argument and searches in the hierarchy until i",MatchSource.WIKI,doc/master/classTFolder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFolder.html
Modifiability,coupling,coupling,". ; Legacy Code TFolder is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TFolder might still be a valid solution. ; A TFolder object is a collection of objects and folders. Folders have a name and a title and are identified in the folder hierarchy by a ""Unix-like"" naming mechanism. The root of all folders is //root. New folders can be dynamically added or removed to/from a folder. The folder hierarchy can be visualized via the TBrowser. The Root folders hierarchy can be seen as a whiteboard where objects are posted. Other classes/tasks can access these objects by specifying only a string pathname. This whiteboard facility greatly improves the modularity of an application, minimizing the class relationship problem that penalizes large applications.; Pointers are efficient to communicate between classes. However, one has interest to minimize direct coupling between classes in the form of direct pointers. One better uses the naming and search service provided by the Root folders hierarchy. This makes the classes loosely coupled and also greatly facilitates I/O operations. In a client/server environment, this mechanism facilitates the access to any kind of object in //root stores running on different processes.; A TFolder is created by invoking the TFolder constructor. It is placed inside an existing folder via the TFolder::AddFolder method. One can search for a folder or an object in a folder using the FindObject method. FindObject analyses the string passed as its argument and searches in the hierarchy until it finds an object or folder matching the name.; When a folder is deleted, its reference from the parent folder and possible other folders is deleted.; If a folder has been declared the owner of its objects/folders via TFolder::SetOwner, then the contained objects are deleted when the folder is deleted. By default, a folder does n",MatchSource.WIKI,doc/master/classTFolder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFolder.html
Security,access,access,"e. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFolder Class ReferenceCore ROOT classes » Base ROOT classes. ; Legacy Code TFolder is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TFolder might still be a valid solution. ; A TFolder object is a collection of objects and folders. Folders have a name and a title and are identified in the folder hierarchy by a ""Unix-like"" naming mechanism. The root of all folders is //root. New folders can be dynamically added or removed to/from a folder. The folder hierarchy can be visualized via the TBrowser. The Root folders hierarchy can be seen as a whiteboard where objects are posted. Other classes/tasks can access these objects by specifying only a string pathname. This whiteboard facility greatly improves the modularity of an application, minimizing the class relationship problem that penalizes large applications.; Pointers are efficient to communicate between classes. However, one has interest to minimize direct coupling between classes in the form of direct pointers. One better uses the naming and search service provided by the Root folders hierarchy. This makes the classes loosely coupled and also greatly facilitates I/O operations. In a client/server environment, this mechanism facilitates the access to any kind of object in //root stores running on different processes.; A TFolder is created by invoking the TFolder constructor. It is placed inside an existing folder via the TFolder::AddFolder method. One can search for a folder or an object in a folder using the FindObject method. FindObject analyses the string passed as its argument and searches in the hierarchy until it finds an object or folder ma",MatchSource.WIKI,doc/master/classTFolder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFolder.html
Availability,avail,available,". ROOT: TFormLeafInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Public Attributes |; Protected Attributes |; List of all members ; TFormLeafInfo Class Reference. ; This class is a small helper class to implement reading a data member on an object stored in a TTree. ; TTreeFormula now relies on a variety of TFormLeafInfo classes to handle the reading of the information. Here is the list of theses classes:; TFormLeafInfo; TFormLeafInfoDirect; TFormLeafInfoNumerical; TFormLeafInfoClones; TFormLeafInfoCollection; TFormLeafInfoPointer; TFormLeafInfoMethod; TFormLeafInfoMultiVarDim; TFormLeafInfoMultiVarDimDirect; TFormLeafInfoCast. The following method are available from the TFormLeafInfo interface:. AddOffset(Int_t offset, TStreamerElement* element); GetCounterValue(TLeaf* leaf) : return the size of the array pointed to.; GetObjectAddress(TLeafElement* leaf) : Returns the location of the object pointed to.; GetMultiplicity() : Returns info on the variability of the number of elements; GetNdata(TLeaf* leaf) : Returns the number of elements; GetNdata() : Used by GetNdata(TLeaf* leaf); GetValue(TLeaf *leaf, Int_t instance = 0) : Return the value; GetValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value; GetLocalValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value of 'this' LeafInfo; IsString(); ReadValue(char *where, Int_t instance = 0) : Internal function to interpret the location 'where'; Update() : react to the possible loading of a shared library. . Definition at line 47 of file TFormLeafInfo.h. Classes; struct  GetValueHelper;  ; struct  GetValueHelper< Long64_t >;  ; struct  GetValueHelper< LongDouble_t >;  ; struct  GetValueHelper< ULong64_t >;  ; struct  ReadValueHelper;  ; struct  ReadValueHelper< Long64_t >;  ; struct  ReadValueHelper< LongDouble_t >;  ; struct  ReadValueHelper< ULong64_t >;  . ",MatchSource.WIKI,doc/master/classTFormLeafInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFormLeafInfo.html
Integrability,interface,interface,". ROOT: TFormLeafInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Public Attributes |; Protected Attributes |; List of all members ; TFormLeafInfo Class Reference. ; This class is a small helper class to implement reading a data member on an object stored in a TTree. ; TTreeFormula now relies on a variety of TFormLeafInfo classes to handle the reading of the information. Here is the list of theses classes:; TFormLeafInfo; TFormLeafInfoDirect; TFormLeafInfoNumerical; TFormLeafInfoClones; TFormLeafInfoCollection; TFormLeafInfoPointer; TFormLeafInfoMethod; TFormLeafInfoMultiVarDim; TFormLeafInfoMultiVarDimDirect; TFormLeafInfoCast. The following method are available from the TFormLeafInfo interface:. AddOffset(Int_t offset, TStreamerElement* element); GetCounterValue(TLeaf* leaf) : return the size of the array pointed to.; GetObjectAddress(TLeafElement* leaf) : Returns the location of the object pointed to.; GetMultiplicity() : Returns info on the variability of the number of elements; GetNdata(TLeaf* leaf) : Returns the number of elements; GetNdata() : Used by GetNdata(TLeaf* leaf); GetValue(TLeaf *leaf, Int_t instance = 0) : Return the value; GetValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value; GetLocalValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value of 'this' LeafInfo; IsString(); ReadValue(char *where, Int_t instance = 0) : Internal function to interpret the location 'where'; Update() : react to the possible loading of a shared library. . Definition at line 47 of file TFormLeafInfo.h. Classes; struct  GetValueHelper;  ; struct  GetValueHelper< Long64_t >;  ; struct  GetValueHelper< LongDouble_t >;  ; struct  GetValueHelper< ULong64_t >;  ; struct  ReadValueHelper;  ; struct  ReadValueHelper< Long64_t >;  ; struct  ReadValueHelper< LongDouble_t >;  ; struct  ReadValueHelper< ULong64_t >;  . ",MatchSource.WIKI,doc/master/classTFormLeafInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFormLeafInfo.html
Modifiability,variab,variability," a data member on an object stored in a TTree. ; TTreeFormula now relies on a variety of TFormLeafInfo classes to handle the reading of the information. Here is the list of theses classes:; TFormLeafInfo; TFormLeafInfoDirect; TFormLeafInfoNumerical; TFormLeafInfoClones; TFormLeafInfoCollection; TFormLeafInfoPointer; TFormLeafInfoMethod; TFormLeafInfoMultiVarDim; TFormLeafInfoMultiVarDimDirect; TFormLeafInfoCast. The following method are available from the TFormLeafInfo interface:. AddOffset(Int_t offset, TStreamerElement* element); GetCounterValue(TLeaf* leaf) : return the size of the array pointed to.; GetObjectAddress(TLeafElement* leaf) : Returns the location of the object pointed to.; GetMultiplicity() : Returns info on the variability of the number of elements; GetNdata(TLeaf* leaf) : Returns the number of elements; GetNdata() : Used by GetNdata(TLeaf* leaf); GetValue(TLeaf *leaf, Int_t instance = 0) : Return the value; GetValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value; GetLocalValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value of 'this' LeafInfo; IsString(); ReadValue(char *where, Int_t instance = 0) : Internal function to interpret the location 'where'; Update() : react to the possible loading of a shared library. . Definition at line 47 of file TFormLeafInfo.h. Classes; struct  GetValueHelper;  ; struct  GetValueHelper< Long64_t >;  ; struct  GetValueHelper< LongDouble_t >;  ; struct  GetValueHelper< ULong64_t >;  ; struct  ReadValueHelper;  ; struct  ReadValueHelper< Long64_t >;  ; struct  ReadValueHelper< LongDouble_t >;  ; struct  ReadValueHelper< ULong64_t >;  . Public Member Functions;  TFormLeafInfo (const TFormLeafInfo &orig);  Constructor. ;  ;  TFormLeafInfo (TClass *classptr=nullptr, Longptr_t offset=0, TStreamerElement *element=nullptr);  Constructor. ;  ;  ~TFormLeafInfo () override;  Delete this object and all its content. ;  ; virtual void AddOffset (Int_t offset, TStreamerElement ",MatchSource.WIKI,doc/master/classTFormLeafInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFormLeafInfo.html
Performance,load,loading," a data member on an object stored in a TTree. ; TTreeFormula now relies on a variety of TFormLeafInfo classes to handle the reading of the information. Here is the list of theses classes:; TFormLeafInfo; TFormLeafInfoDirect; TFormLeafInfoNumerical; TFormLeafInfoClones; TFormLeafInfoCollection; TFormLeafInfoPointer; TFormLeafInfoMethod; TFormLeafInfoMultiVarDim; TFormLeafInfoMultiVarDimDirect; TFormLeafInfoCast. The following method are available from the TFormLeafInfo interface:. AddOffset(Int_t offset, TStreamerElement* element); GetCounterValue(TLeaf* leaf) : return the size of the array pointed to.; GetObjectAddress(TLeafElement* leaf) : Returns the location of the object pointed to.; GetMultiplicity() : Returns info on the variability of the number of elements; GetNdata(TLeaf* leaf) : Returns the number of elements; GetNdata() : Used by GetNdata(TLeaf* leaf); GetValue(TLeaf *leaf, Int_t instance = 0) : Return the value; GetValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value; GetLocalValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value of 'this' LeafInfo; IsString(); ReadValue(char *where, Int_t instance = 0) : Internal function to interpret the location 'where'; Update() : react to the possible loading of a shared library. . Definition at line 47 of file TFormLeafInfo.h. Classes; struct  GetValueHelper;  ; struct  GetValueHelper< Long64_t >;  ; struct  GetValueHelper< LongDouble_t >;  ; struct  GetValueHelper< ULong64_t >;  ; struct  ReadValueHelper;  ; struct  ReadValueHelper< Long64_t >;  ; struct  ReadValueHelper< LongDouble_t >;  ; struct  ReadValueHelper< ULong64_t >;  . Public Member Functions;  TFormLeafInfo (const TFormLeafInfo &orig);  Constructor. ;  ;  TFormLeafInfo (TClass *classptr=nullptr, Longptr_t offset=0, TStreamerElement *element=nullptr);  Constructor. ;  ;  ~TFormLeafInfo () override;  Delete this object and all its content. ;  ; virtual void AddOffset (Int_t offset, TStreamerElement ",MatchSource.WIKI,doc/master/classTFormLeafInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFormLeafInfo.html
Safety,safe,safe,"ance=0);  returns the address of the value pointed to by the TFormLeafInfo. ;  ; virtual void * GetValuePointer (TLeaf *leaf, Int_t instance=0);  returns the address of the value pointed to by the serie of TFormLeafInfo. ;  ; virtual Int_t GetVarDim ();  Return the index of the dimension which varies for each elements of an enclosing array (typically a TClonesArray) ;  ; virtual Int_t GetVirtVarDim ();  Return the virtual index (for this expression) of the dimension which varies for each elements of an enclosing array (typically a TClonesArray) ;  ; virtual bool HasCounter () const;  Return true if any of underlying data has a array size counter. ;  ; virtual bool IsInteger () const;  Return true if the underlying data is an integral value. ;  ; virtual bool IsReference () const;  ; virtual bool IsString () const;  Return true if the underlying data is a string. ;  ; virtual void LoadSizes (TBranch *branch);  Load the current array sizes. ;  ; TFormLeafInfo & operator= (const TFormLeafInfo &orig);  Exception safe assignment operator. ;  ; virtual Int_t ReadCounterValue (char *where);  Return the size of the underlying array for the current entry in the TTree. ;  ; template<typename T > ; T ReadTypedValue (char *where, Int_t instance=0);  ; virtual Double_t ReadValue (char *where, Int_t instance=0);  ; template<typename T > ; T ReadValueImpl (char *where, Int_t instance=0);  Read the value at the given memory location. ;  ; virtual Long64_t ReadValueLong64 (char *where, Int_t instance=0);  ; virtual LongDouble_t ReadValueLongDouble (char *where, Int_t instance=0);  ; virtual void SetBranch (TBranch *br);  ; virtual void SetPrimaryIndex (Int_t index);  Set the primary index value. ;  ; virtual void SetSecondaryIndex (Int_t index);  Set the primary index value. ;  ; virtual void SetSize (Int_t index, Int_t val);  Set the current size of the arrays. ;  ; void Swap (TFormLeafInfo &other);  ; virtual bool Update ();  We reloading all cached information in case the underlyi",MatchSource.WIKI,doc/master/classTFormLeafInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFormLeafInfo.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other obje",MatchSource.WIKI,doc/master/classTFormLeafInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFormLeafInfo.html
Availability,error,error,"te(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoAddParameter(const TString &name, Double_t value, bool processFormula)TFormulaprotected; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoEval(const Double_t *x, const Double_t *p=nullptr) constTFormulaprotected; DoSetParameters(const Double_t *p, Int_t size)TFormulaprotected; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTFormula; Eval(Args... args) constTFormula; EvalPar(const Double_t *x, const Double_t *params=nullptr) constTFormula; EvalPar(const T *x, const Double_t *params=nullptr) constTFormulainline; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; ExtractFunctors(TString &formula)TFormulaprotected; fAllParametersSettedTFormulaprivate; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fClingInitializedTFormulaprivate; fClingInputTFormulaprivate; fClingNameTFormulaprivate; fClingParametersTFormulaprivate; fClingVariablesTFormulaprivate; fConstsTFormulaprotected; fFormulaTFormulaprotected; fFuncPtrTFormulaprivate; fFuncsTFormulaprotected; fFunctionsShortcutsTFormulaprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fGradFuncPtrTFormulaprivate; fGradGenerationInputTFormulaprivate; fHessFuncPtrTFormulaprivate; fHessGenerationInputTFormulaprivate; FillBuffer(char *&buffer)TNamedvirtual; FillDefaults()TFormulaprivate; FillParametrizedFunctions(std::map< std::pair< TString, Int_t >, std::pair< TString, TString > > &functions)TFormulaprivate; ",MatchSource.WIKI,doc/master/classTFormula-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFormula-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TFormula Member List. This is the complete list of members for TFormula, including all inherited members. AbstractMethod(const char *method) constTObject; AddParameter(const TString &name, Double_t value=0)TFormulainline; AddToTObjectTable(TObject *)TObjectprivatestatic; AddVariable(const TString &name, Double_t value=0)TFormula; AddVariables(const TString *vars, const Int_t size)TFormula; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CallFuncSignature typedefTFormulaprivate; CheckedHash()TObjectinline; CladStorage typedefTFormula; Class()TFormulastatic; Class_Name()TFormulastatic; Class_Version()TFormulainlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTFormulavirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Compile(const char *expression="""")TFormula; Copy(TObject &f1) const overrideTFormulavirtual; DeclFileName()TFormulainlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoAddParameter(const TString &name, Double_t value, bool processFormula)TFormulaprotected; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoEval(const Double_t *x, const Double_t *p=nullptr) constTFormulaprotected; DoSetParameters(const Double_t *p, Int_t size)TFormulaprotected; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTFormula; Eval(Args... args) constTFormula; EvalPar(const Double_t *x, const Double_t *params=nullptr) constTFormula; EvalPar(const T *x, const Double_t *params=nullptr) constTFormulainline; ",MatchSource.WIKI,doc/master/classTFormula-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFormula-members.html
Availability,avail,available,". ROOT: TFormula Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TFormula Class ReferenceHistogram Library. ; The Formula class. ; This is a new version of the TFormula class based on Cling. This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as ROOT::v5::TFormula. Some of the TFormula member functions available in version 5, such as Analyze and AnalyzeFunction are not available in the new TFormula. On the other hand formula expressions which were valid in version 5 are still valid in TFormula version 6; This class has been implemented during Google Summer of Code 2013 by Maciej Zimnoch. Example of valid expressions:. sin(x)/x; [0]*sin(x) + [1]*exp(-[2]*x); x + y**2; x^2 + y^2; [0]*pow([1],4); 2*pi*sqrt(x/y); gaus(0)*expo(3) + ypol3(5)*x; gausn(0)*expo(3) + ypol3(5)*x; gaus(x, [0..2]) + expo(y, [3..4]). In the last examples above:. gaus(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2) and (0) means start numbering parameters at 0; gausn(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2)/(sqrt(2*pi)*[2])) and (0) means start numbering parameters at 0; expo(3) is a substitute for exp([3]+[4]*x); pol3(5) is a substitute for par[5]+par[6]*x+par[7]*x**2+par[8]*x**3 (PolN stands for Polynomial of degree N); gaus(x, [0..2]) is a more explicit way of writing gaus(0); expo(y, [3..4]) is a substitute for exp([3]+[4]*y). See below the full list of predefined functions which can be used as shortcuts in TFormula.; TMath functions can be part of the expression, eg:. TMath::Landau(x)*sin(x); TMath::Erf(x). Formula may contain constants",MatchSource.WIKI,doc/master/classTFormula.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFormula.html
Integrability,rout,routine," AddParameter (const TString &name, Double_t value=0);  ; void AddVariable (const TString &name, Double_t value=0);  Adds variable to known variables, and reprocess formula. ;  ; void AddVariables (const TString *vars, const Int_t size);  Adds multiple variables. ;  ; void Clear (Option_t *option="""") override;  Clear the formula setting expression to empty and reset the variables and parameters containers. ;  ; Int_t Compile (const char *expression="""");  Compile the given expression with Cling backward compatibility method to be used in combination with the empty constructor if no expression is given , the current stored formula (retrieved with GetExpFormula()) or the title is used. ;  ; void Copy (TObject &f1) const override;  Copy this to obj. ;  ; template<typename... Args> ; Double_t Eval (Args... args) const;  Set first 1, 2, 3 or 4 variables (e.g. ;  ; Double_t EvalPar (const Double_t *x, const Double_t *params=nullptr) const;  ; template<class T > ; T EvalPar (const T *x, const Double_t *params=nullptr) const;  ; bool GenerateGradientPar ();  Generate gradient computation routine with respect to the parameters. ;  ; bool GenerateHessianPar ();  Generate hessian computation routine with respect to the parameters. ;  ; TString GetExpFormula (Option_t *option="""") const;  Return the expression formula. ;  ; TString GetGradientFormula () const;  ; TString GetHessianFormula () const;  ; const TObject * GetLinearPart (Int_t i) const;  Return linear part. ;  ; Int_t GetNdim () const;  ; Int_t GetNpar () const;  ; Int_t GetNumber () const;  ; Double_t GetParameter (const char *name) const;  Returns parameter value given by string. ;  ; Double_t GetParameter (Int_t param) const;  Return parameter value given by integer. ;  ; Double_t * GetParameters () const;  ; void GetParameters (Double_t *params) const;  ; const char * GetParName (Int_t ipar) const;  Return parameter name given by integer. ;  ; Int_t GetParNumber (const char *name) const;  Return parameter index giv",MatchSource.WIKI,doc/master/classTFormula.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFormula.html
Modifiability,variab,variable,"e:. gaus(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2) and (0) means start numbering parameters at 0; gausn(0) is a substitute for [0]*exp(-0.5*((x-[1])/[2])**2)/(sqrt(2*pi)*[2])) and (0) means start numbering parameters at 0; expo(3) is a substitute for exp([3]+[4]*x); pol3(5) is a substitute for par[5]+par[6]*x+par[7]*x**2+par[8]*x**3 (PolN stands for Polynomial of degree N); gaus(x, [0..2]) is a more explicit way of writing gaus(0); expo(y, [3..4]) is a substitute for exp([3]+[4]*y). See below the full list of predefined functions which can be used as shortcuts in TFormula.; TMath functions can be part of the expression, eg:. TMath::Landau(x)*sin(x); TMath::Erf(x). Formula may contain constants, eg:. sqrt2; e; pi; ln10; infinity. and more.; Formulas may also contain other user-defined ROOT functions defined with a TFormula, eg, where f1 is defined on one x-dimension and 2 parameters:. f1(x, [omega], [phi]); f1([0..1]); f1([1], [0]); f1(y). To replace only parameter names, the dimension variable can be dropped. Alternatively, to change only the dimension variable, the parameters can be dropped. Note that if a parameter is dropped or keeps its old name, its old value will be copied to the new function. The syntax used in the examples above also applies to the predefined parametrized functions like gaus and expo.; Comparisons operators are also supported (&amp;&amp;, ||, ==, &lt;=, &gt;=, !); Examples:; sin(x*(x&lt;0.5 || x&gt;1)); If the result of a comparison is TRUE, the result is 1, otherwise 0.; Already predefined names can be given. For example, if the formula; TFormula old(""old"",sin(x*(x&lt;0.5 || x&gt;1))); one can assign a name to the formula. By default the name of the object = title = formula itself.; TFormula new(""new"",""x*old""); is equivalent to:; TFormula new(""new"",""x*sin(x*(x&lt;0.5 || x&gt;1))""); The class supports unlimited number of variables and parameters. By default the names which can be used for the variables are x,y,z,t or x[0],x[1],x[",MatchSource.WIKI,doc/master/classTFormula.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFormula.html
Performance,perform,performs,";  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void DoAddParameter (const TString &name, Double_t value, bool processFormula);  Adds parameter to known parameters. ;  ; Double_t DoEval (const Double_t *x, const Double_t *p=nullptr) const;  Evaluate formula. ;  ; void DoSetParameters (const Double_t *p, Int_t size);  ; void ExtractFunctors (TString &formula);  Extracts functors from formula, and put them in fFuncs. ;  ; Bool_t PrepareFormula (TString &formula);  prepare the formula to be executed normally is called with fFormula ;  ; void PreProcessFormula (TString &formula);  Preprocessing of formula Replace all ** by ^, and removes spaces. ;  ; void ProcessFormula (TString &formula);  Iterates through functors in fFuncs and performs the appropriate action. ;  ; void ReplaceParamName (TString &formula, const TString &oldname, const TString &name);  Replace in Formula expression the parameter name. ;  ; void SetPredefinedParamNames ();  Set parameter names only in case of pre-defined functions. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static Bool_t IsAParameterName (const TString &formula, int ipos);  ; static Bool_t IsBracket (const char c);  ; static Bool_t IsFunctionNameChar (const char c);  ; static Bool_t IsHexadecimal (const TString &formula, int ipos);  ; static Bool_t IsOperator (const char c);  ; static Bool_t IsScientificNotation (const TString &formula, int ipos);  . Protected Attributes; std::map< TString, Double_t > fConsts;  ! ;  ; TString fFormula;  String rep",MatchSource.WIKI,doc/master/classTFormula.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFormula.html
Security,access,accessed,"d. Note that if a parameter is dropped or keeps its old name, its old value will be copied to the new function. The syntax used in the examples above also applies to the predefined parametrized functions like gaus and expo.; Comparisons operators are also supported (&amp;&amp;, ||, ==, &lt;=, &gt;=, !); Examples:; sin(x*(x&lt;0.5 || x&gt;1)); If the result of a comparison is TRUE, the result is 1, otherwise 0.; Already predefined names can be given. For example, if the formula; TFormula old(""old"",sin(x*(x&lt;0.5 || x&gt;1))); one can assign a name to the formula. By default the name of the object = title = formula itself.; TFormula new(""new"",""x*old""); is equivalent to:; TFormula new(""new"",""x*sin(x*(x&lt;0.5 || x&gt;1))""); The class supports unlimited number of variables and parameters. By default the names which can be used for the variables are x,y,z,t or x[0],x[1],x[2],x[3],....x[N] for N-dimensional formulas.; This class is not anymore the base class for the function classes TF1, but it has now a data member of TF1 which can be accessed via TF1::GetFormula.; TFormula supports gradient and hessian calculations through clad. To calculate the gradient one needs to first declare a CladStorage of the same size as the number of parameters and then pass the variables and the created CladStorage:; TFormula f(""f"", ""x*[0] - y*[1]"");; Double_t p[] = {40, 30};; Double_t x[] = {1, 2};; f.SetParameters(p);; TFormula::CladStorage grad(2);; f.GradientPar(x, grad);; f#define f(i)Definition RSha256.hxx:104; Double_tdouble Double_tDefinition RtypesCore.h:59; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; TFormulaThe Formula class.Definition TFormula.h:89; TFormula::CladStoragestd::vector< Double_t > CladStorageDefinition TFormula.h:184; double; xDouble_t x[n]Definition legend1.C:17; The process is similar for hessians, except that the size of the created CladStorage should be the square of the number of parameters because HessianPar returns a f",MatchSource.WIKI,doc/master/classTFormula.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFormula.html
Usability,simpl,simple,"ow(((y-[MeanY])/[SigmaY]),2)), a 2d Gaussian without correlation.; bigaus is a substitute for [Constant]*ROOT::Math::bigaussian_pdf (x,y,[SigmaX],[SigmaY],[Rho],[MeanX],[MeanY]), a 2d gaussian including a correlation parameter. Three Dimensional functions:; xyzgaus is for a 3d Gaussians without correlations: [Constant]*exp(-0.5*pow(((x-[MeanX])/[SigmaX]),2 )- 0.5*pow(((y-[MeanY])/[SigmaY]),2 )- 0.5*pow(((z-[MeanZ])/[SigmaZ]),2)). An expanded note on variables and parameters; In a TFormula, a variable is a defined by a name x, y, z or t or an index like x[0], x[1], x[2]; that is x[N] where N is an integer.; TFormula("""", ""x[0] * x[1] + 10""); TFormula::TFormulaTFormula()Definition TFormula.cxx:438; Parameters are similar and can take any name. It is specified using brackets e.g. [expected_mass] or [0].; TFormula("""", ""exp([expected_mass])-1""); Variables and parameters can be combined in the same TFormula. Here we consider a very simple case where we have an exponential decay after some time t and a number of events with timestamps for which we want to evaluate this function.; TFormula tf ("""", ""[0]*exp(-[1]*t)"");; tf.SetParameter(0, 1);; tf.SetParameter(1, 0.5);; ; for (auto & event : events) {; tf.Eval(event.t);; }; The distinction between variables and parameters arose from the TFormula's application in fitting. There parameters are fitted to the data provided through variables. In other applications this distinction can go away.; Parameter values can be provided dynamically using TFormula::EvalPar instead of TFormula::Eval. In this way parameters can be used identically to variables. See below for an example that uses only parameters to model a function.; Int_t params[2] = {1, 2}; // {vel_x, vel_y}; TFormula tf ("""", ""[vel_x]/sqrt(([vel_x + vel_y])**2)"");; ; tf.EvalPar(nullptr, params);; int. A note on operators; All operators of C/C++ are allowed in a TFormula with a few caveats.; The operators |, &, % can be used but will raise an error if used in conjunction with a v",MatchSource.WIKI,doc/master/classTFormula.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFormula.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFPBlock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFPBlock.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFPBlock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFPBlock.html
Modifiability,inherit,inherited,"64_t GetCapacity () const;  Return capacity of the block. ;  ; Long64_t GetDataSize () const;  Return size of the data in the block. ;  ; Int_t * GetLen () const;  Get pointer to the array of lengths. ;  ; Int_t GetLen (Int_t) const;  Get length of the element at index i. ;  ; Int_t GetNoElem () const;  Return number of elements in the block. ;  ; Long64_t * GetPos () const;  Get pointer to the array of postions. ;  ; Long64_t GetPos (Int_t) const;  Get position of the element at index i. ;  ; char * GetPtrToPiece (Int_t index) const;  Get block buffer. ;  ; TClass * IsA () const override;  ; void ReallocBlock (Long64_t *, Int_t *, Int_t);  Reallocate the block's buffer based on the length of the elements it will contain. ;  ; void SetBuffer (char *);  Set block buffer. ;  ; void SetPos (Int_t, Long64_t);  Set pos value for index idx. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTFPBlock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFPBlock.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTFPBlock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFPBlock.html
Availability,error,errors,"ssible to exclude individual bins from the fit through fit->ExcludeBin(bin #);; where the given bin number is assumed to follow the TH1::GetBin() numbering. Any bins excluded in this way can be included again using the corresponding fit->IncludeBin(bin #);; ; Weights histograms; Weights histograms (for a motivation see the above publication) can be specified for the individual MC sources through fit->SetWeight(parameter #, pointer to weights histogram);; and unset by specifying a null pointer. Obtaining fit results; The fit is carried out through Int_t status = fit->Fit();; where status is the code returned from the ""MINIMIZE"" command. For fits that converged, parameter values and errors can be obtained through fit->GetResult(parameter #, value, error);; and the histogram corresponding to the total Monte Carlo prediction (which is not the same as a simple weighted sum of the input Monte Carlo distributions) can be obtained by TH1* result = fit->GetPlot();; ; Using different histograms; It is possible to change the histogram being fitted through fit->SetData(TH1* data);; and to change the template histogram for a given parameter number through fit->SetMC(parameter #, TH1* MC);; This can speed up code in case of multiple data or template histograms; however, it should be done with care as any settings are taken over from the previous fit. In addition, neither the dimensionality nor the numbers of bins of the histograms should change (in that case it is better to instantiate a new TFractionFitter object). Errors; Any serious inconsistency results in an error. ; Definition at line 27 of file TFractionFitter.h. Public Member Functions;  TFractionFitter ();  TFractionFitter default constructor. ;  ;  TFractionFitter (TH1 *data, TObjArray *MCs, Option_t *option="""");  TFractionFitter constructor. ;  ;  ~TFractionFitter () override;  TFractionFitter default destructor. ;  ; void Constrain (Int_t parm, Double_t low, Double_t high);  Constrain the values of parameter number <pa",MatchSource.WIKI,doc/master/classTFractionFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFractionFitter.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFractionFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFractionFitter.html
Modifiability,inherit,inherited,"stogram to be used in the fit. ;  ; void SetData (TH1 *data);  Change the histogram to be fitted to. ;  ; void SetMC (Int_t parm, TH1 *MC);  Change the histogram for template number <parm>. ;  ; void SetRangeX (Int_t low, Int_t high);  Set the X range of the histogram to be used in the fit. ;  ; void SetRangeY (Int_t low, Int_t high);  Set the Y range of the histogram to be used in the fit (2D or 3D histograms only). ;  ; void SetRangeZ (Int_t low, Int_t high);  Set the Z range of the histogram to be used in the fit (3D histograms only). ;  ; void SetWeight (Int_t parm, TH1 *weight);  Set bin by bin weights for template number <parm> (the parameter numbering follows that of the input template vector). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UnConstrain (Int_t parm);  Remove the constraints on the possible values of parameter <parm>. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classTFractionFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFractionFitter.html
Performance,perform,perform," done analytically rather than introducing them as formal fit parameters. Some special care needs to be taken in the case of bins with zero content. For more details please see the original publication cited above.; An example application of this fit is given below. For a TH1* histogram (""data"") fitted as the sum of three Monte Carlo sources (""mc""):; {; TH1F *data; //data histogram; TH1F *mc0; // first MC histogram; TH1F *mc1; // second MC histogram; TH1F *mc2; // third MC histogram; .... // retrieve histograms; TObjArray *mc = new TObjArray(3); // MC histograms are put in this array; mc->Add(mc0);; mc->Add(mc1);; mc->Add(mc2);; TFractionFitter* fit = new TFractionFitter(data, mc); // initialise; fit->Constrain(1,0.0,1.0); // constrain fraction 1 to be between 0 and 1; fit->SetRangeX(1,15); // use only the first 15 bins in the fit; Int_t status = fit->Fit(); // perform the fit; std::cout << ""fit status: "" << status << std::endl;; if (status == 0) { // check on fit status; TH1F* result = (TH1F*) fit->GetPlot();; data->Draw(""Ep"");; result->Draw(""same"");; }; }; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; TFractionFitterFits MC fractions to data histogram.Definition TFractionFitter.h:27; TFractionFitter::TFractionFitterTFractionFitter()TFractionFitter default constructor.Definition TFractionFitter.cxx:163; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::Addvoid Add(TObject *obj) overrideDefinitio",MatchSource.WIKI,doc/master/classTFractionFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFractionFitter.html
Safety,predict,predictions,". ROOT: TFractionFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TFractionFitter Class Reference. ; Fits MC fractions to data histogram. ; A la HMCMLL, see R. Barlow and C. Beeston, Comp. Phys. Comm. 77 (1993) 219-228, and http://www.hep.man.ac.uk/~roger/hfrac.f; The virtue of this fit is that it takes into account both data and Monte Carlo statistical uncertainties. The way in which this is done is through a standard likelihood fit using Poisson statistics; however, the template (MC) predictions are also varied within statistics, leading to additional contributions to the overall likelihood. This leads to many more fit parameters (one per bin per template), but the minimisation with respect to these additional parameters is done analytically rather than introducing them as formal fit parameters. Some special care needs to be taken in the case of bins with zero content. For more details please see the original publication cited above.; An example application of this fit is given below. For a TH1* histogram (""data"") fitted as the sum of three Monte Carlo sources (""mc""):; {; TH1F *data; //data histogram; TH1F *mc0; // first MC histogram; TH1F *mc1; // second MC histogram; TH1F *mc2; // third MC histogram; .... // retrieve histograms; TObjArray *mc = new TObjArray(3); // MC histograms are put in this array; mc->Add(mc0);; mc->Add(mc1);; mc->Add(mc2);; TFractionFitter* fit = new TFractionFitter(data, mc); // initialise; fit->Constrain(1,0.0,1.0); // constrain fraction 1 to be between 0 and 1; fit->SetRangeX(1,15); // use only the first 15 bins in the fit; Int_t status = fit->Fit(); // perform the fit; std::cout << ""fit status: "" << status << std::endl;; if (status == 0) { // check on fit status; TH1F* result = (TH1F*) fit->GetPlot();; data->Draw(""Ep"");; result",MatchSource.WIKI,doc/master/classTFractionFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFractionFitter.html
Security,access,access,"nts in each bin is much smaller than the total number of events in each template (so that multinomial uncertainties can be replaced with Poisson uncertainties).; Biased fit uncertainties may result if these conditions are not fulfilled (see e.g. arXiv:0803.2711). Instantiation; A fit object is instantiated through TFractionFitter* fit = new TFractionFitter(data, mc); A number of basic checks (intended to ensure that the template histograms represent the same ""kind"" of distribution as the data one) are carried out. The TVirtualFitter object is then addressed and all fit parameters (the template fractions) declared (initially unbounded). Applying constraints; Fit parameters can be constrained through; fit->Constrain(parameter #, lower bound, upper bound);; Setting lower bound = upper bound = 0 removes the constraint (a la Minuit); however, a function fit->Unconstrain(parameter #); is also provided to simplify this. Setting parameter values; The function ROOT::Fit::Fitter* fitter = fit->GetFitter();; is provided for direct access to the ROOT::Fit::Fitter object. This allows to set and fix parameter values, limits and set step sizes directly via fitter->Config().ParSettings(parameter #).Set(const std::string &name, double value, double step, double lower, double upper);; ; Restricting the fit range; The fit range can be restricted through fit->SetRangeX(first bin #, last bin #);; and freed using fit->ReleaseRangeX();; For 2D histograms the Y range can be similarly restricted using fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();; It is also possible to exclude individual bins from the fit through fit->ExcludeBin(bin #);; where the given bin number is assumed to follow the TH1::GetBin() numbering. Any bins excluded in this way can be included again using the corresponding fit->IncludeBin(bin #);; ; Weights histograms; Weights histograms (for a motivation see the abov",MatchSource.WIKI,doc/master/classTFractionFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFractionFitter.html
Usability,simpl,simplify,"tions; A few assumptions need to be made for the fit procedure to be carried out: 1 The total number of events in each template is not too small (so that its Poisson uncertainty can be neglected). 2 The number of events in each bin is much smaller than the total number of events in each template (so that multinomial uncertainties can be replaced with Poisson uncertainties).; Biased fit uncertainties may result if these conditions are not fulfilled (see e.g. arXiv:0803.2711). Instantiation; A fit object is instantiated through TFractionFitter* fit = new TFractionFitter(data, mc); A number of basic checks (intended to ensure that the template histograms represent the same ""kind"" of distribution as the data one) are carried out. The TVirtualFitter object is then addressed and all fit parameters (the template fractions) declared (initially unbounded). Applying constraints; Fit parameters can be constrained through; fit->Constrain(parameter #, lower bound, upper bound);; Setting lower bound = upper bound = 0 removes the constraint (a la Minuit); however, a function fit->Unconstrain(parameter #); is also provided to simplify this. Setting parameter values; The function ROOT::Fit::Fitter* fitter = fit->GetFitter();; is provided for direct access to the ROOT::Fit::Fitter object. This allows to set and fix parameter values, limits and set step sizes directly via fitter->Config().ParSettings(parameter #).Set(const std::string &name, double value, double step, double lower, double upper);; ; Restricting the fit range; The fit range can be restricted through fit->SetRangeX(first bin #, last bin #);; and freed using fit->ReleaseRangeX();; For 2D histograms the Y range can be similarly restricted using fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();; It is also possible to exclude individual bins from the fit through fit->ExcludeBin(bin #);; where the given bin number is ass",MatchSource.WIKI,doc/master/classTFractionFitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFractionFitter.html
Availability,error,error,"y(TAttFill &attfill) constTAttFill; DeclFileName()TFrameinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTBoxvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTFramevirtual; DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TBoxvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawWbox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color=33, Short_t bordersize=5, Short_t bordermode=-1)TWboxvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTFramevirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fBorderModeTWboxprotected; fBorderSizeTWboxprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fLineColorTAttLineprotected; fLineStyleTAttLineprotected; fLineWidthTAttLineprotected; fResizingTBoxprotected; fTipTBoxprivate; fUniqueIDTObjectprivate; fX1TBoxprotected; fX2TBoxprotected; fY1TBoxprotected; fY2TBoxprotected; GetBBox() overrideTBoxvirtual; GetBBoxCenter() overrideTBoxvirtual; GetBorderMode() constTWboxinline; GetBorderSize() constTWboxinline; GetDarkColor() constTWboxinline; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetFillColor() constTAttFillinlinevirtual; GetFi",MatchSource.WIKI,doc/master/classTFrame-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFrame-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TFrame Member List. This is the complete list of members for TFrame, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Class()TFramestatic; Class_Name()TFramestatic; Class_Version()TFrameinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Copy(TObject &frame) const overrideTFramevirtual; TWbox::TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; DeclFileName()TFrameinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTBoxvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTFramevirtual; DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TBoxvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawWbox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color=33, Short_t bordersize=5, Short_t bordermode=-1)TWboxvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTFramevirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; ",MatchSource.WIKI,doc/master/classTFrame-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFrame-members.html
Availability,error,error,"ault action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about th",MatchSource.WIKI,doc/master/classTFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFrame.html
Integrability,depend,depending,"ual void SetBorderMode (Short_t bordermode);  ; virtual void SetBorderSize (Short_t bordersize);  ; void Streamer (TBuffer &) override;  Stream an object of class TBox. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TBox;  TBox ();  Box default constructor. ;  ;  TBox (const TBox &box);  Box copy constructor. ;  ;  TBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Box standard constructor. ;  ;  ~TBox () override;  Box destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a box. ;  ; virtual TBox * DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Draw this box with new coordinates. ;  ; Rectangle_t GetBBox () override;  Return the ""bounding Box"" of the Box. ;  ; TPoint GetBBoxCenter () override;  Return the center of the Box as TPoint in pixels. ;  ; Double_t GetX1 () const;  ; Double_t GetX2 () const;  ; Double_t GetY1 () const;  ; Double_t GetY2 () const;  ; virtual void HideToolTip (Int_t event);  Hide tool tip depending on the event type. ;  ; Bool_t IsBeingResized () const;  ; virtual Int_t IsInside (Double_t x, Double_t y) const;  Function which returns 1 if point x,y lies inside the box, 0 otherwise. ;  ; void ls (Option_t *option="""") const override;  List this box with its attributes. ;  ; TBox & operator= (const TBox &);  Assignment operator. ;  ; virtual void PaintBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Option_t *option="""");  Draw this box with new coordinates. ;  ; void Print (Option_t *option="""") const override;  Dump this box with its attributes. ;  ; void SetBBoxCenter (const TPoint &p) override;  Set center of the Box. ;  ; void SetBBoxCenterX (const Int_t x) override;  Set X coordinate of the center of the Box. ;  ; void SetBBoxCenterY (const Int_t y) override;  Set Y coordinate of the center of the Box. ;  ; void SetBBoxX1 (const Int_t x) override;  Set left hand side of BoundingBox to a val",MatchSource.WIKI,doc/master/classTFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFrame.html
Modifiability,inherit,inherited,"l constructor. ;  ;  ~TFrame () override;  Frame default destructor. ;  ; void Copy (TObject &frame) const override;  Copy this frame to frame. ;  ; void Draw (Option_t *option="""") override;  Draw this frame with its current attributes. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this wbox with its current attributes. ;  ; void Pop () override;  Do not pop frame's, if allowed they would cover the picture they frame. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TBox. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseCurrentStyle () override;  Replace current frame attributes by current style. ;  ;  Public Member Functions inherited from TWbox;  TWbox ();  ;  TWbox (const TWbox &wbox);  wbox copy constructor. ;  ;  TWbox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color=18, Short_t bordersize=5, Short_t bordermode=1);  wbox normal constructor. ;  ;  ~TWbox () override=default;  ; void Copy (TObject &wbox) const override;  Copy this wbox to wbox. ;  ; void Draw (Option_t *option="""") override;  Draw this wbox with its current attributes. ;  ; virtual TWbox * DrawWbox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color=33, Short_t bordersize=5, Short_t bordermode=-1);  Draw this wbox with new coordinates. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; Short_t GetBorderMode () const;  ; Short_t GetBorderSize () const;  ; Int_t GetDarkColor () const;  ; Int_t GetLightColor () const;  ; TClass * IsA () const override;  ; TWbox & operator= (const TWbox &src);  assignment operator ;  ; void Paint (Option_t *option="""") override;  Paint this ",MatchSource.WIKI,doc/master/classTFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFrame.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFrame.html
Availability,error,error,"al; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Class()TFreestatic; Class_Name()TFreestatic; Class_Version()TFreeinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Copy(TObject &object) constTObjectvirtual; DeclFileName()TFreeinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fFirstTFreeprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FillBuffer(char *&buffer)TFreevirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fLastTFreeprotected; fUniqueIDTObjectprivate; GetBestFree(TList *lfree, Int_t nbytes)TFree; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetFirst() constTFreeinline; GetIconName() constTObjectvirtual; GetLast() constTFreeinline; GetName() constTObjectvirtual; GetObjectInfo(Int_t px, Int_t py) constTObjectvirtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetTitle() constTObjectvirtual; GetUniqueID() constTObjectvirtual; HandleTimer(TTimer *timer)TObjectvirtual; Hash() constTObjectvirtual; HasInconsistentHash()",MatchSource.WIKI,doc/master/classTFree-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFree-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TFree Member List. This is the complete list of members for TFree, including all inherited members. AbstractMethod(const char *method) constTObject; AddFree(TList *lfree, Long64_t first, Long64_t last)TFree; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Class()TFreestatic; Class_Name()TFreestatic; Class_Version()TFreeinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Copy(TObject &object) constTObjectvirtual; DeclFileName()TFreeinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fFirstTFreeprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FillBuffer(char *&buffer)TFreevirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fLastTFreeprotected; fUniqueIDTObjectprivate; GetBestFree(TList *lfree, Int_t nbytes)TFree; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetF",MatchSource.WIKI,doc/master/classTFree-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFree-members.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFree.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFree.html
Modifiability,inherit,inherited,"ong64_t first, Long64_t last);  Constructor for a free segment. ;  ;  ~TFree () override;  Destructor. ;  ; TFree * AddFree (TList *lfree, Long64_t first, Long64_t last);  Add a new free segment to the list of free segments. ;  ; virtual void FillBuffer (char *&buffer);  Encode fre structure into output buffer. ;  ; TFree * GetBestFree (TList *lfree, Int_t nbytes);  Return the best free segment where to store nbytes. ;  ; Long64_t GetFirst () const;  ; Long64_t GetLast () const;  ; TClass * IsA () const override;  ; void ls (Option_t *="""") const override;  List free segment contents. ;  ; virtual void ReadBuffer (char *&buffer);  Decode one free structure from input buffer. ;  ; void SetFirst (Long64_t first);  ; void SetLast (Long64_t last);  ; Int_t Sizeof () const;  return number of bytes occupied by this TFree on permanent storage ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTFree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFree.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTFree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFree.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTFriendElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFriendElement.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTFriendElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFriendElement.html
Modifiability,variab,variable,". ROOT: TFriendElement Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TFriendElement Class ReferenceTree Library. ; A TFriendElement TF describes a TTree object TF in a file. ; When a TFriendElement TF is added to the list of friends of an existing TTree T, any variable from TF can be referenced in a query to T.; To add a TFriendElement to an existing TTree T, do: T.AddFriend(""friendTreename"",""friendTreeFile"");; See TTree::AddFriend for more information. ; Definition at line 33 of file TFriendElement.h. Public Types; enum  EStatusBits { kFromChain = (1ULL << ( 9 )); , kUpdated = (1ULL << ( 10 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFriendElement ();  Default constructor for a friend element. ;  ;  TFriendElement (TTree *tree, const char *treename, const char *filename);  Create a friend element. ;  ;  TFriendElement (TTree *tree, const char *treename, TFile *file);  Create a friend element. ;  ;  TFriendElement (TTree *tree, TTree *friendtree, const char *alias);  Create a friend element. ;  ;  ~TFriendElement () override;  Destructor. Disconnect from the owning tree if needed. ;  ; virtual TTree * Connect (); ",MatchSource.WIKI,doc/master/classTFriendElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFriendElement.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTFriendElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFriendElement.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTFTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFTP.html
Energy Efficiency,power,power,"irectory (Option_t *cmd="""") const;  List remote directory. ;  ; void ls (Option_t *cmd="""") const override;  The ls function lists the contents of a class on stdout. ;  ; Int_t MakeDirectory (const char *dir, Bool_t print=kFALSE) const;  Make a remote directory. ;  ; void mkdir (const char *dir) const;  ; void mv (const char *file1, const char *file2) const;  ; Bool_t OpenDirectory (const char *name, Bool_t print=kFALSE);  Open a directory via rootd. ;  ; void Print (Option_t *opt="""") const override;  Print some info about the FTP connection. ;  ; Int_t PrintDirectory () const;  Print path of remote working directory. ;  ; void put (const char *file, const char *remoteName=nullptr);  ; Long64_t PutFile (const char *file, const char *remoteName=nullptr);  Transfer file to remote host. ;  ; void pwd () const;  ; Int_t RenameFile (const char *file1, const char *file2) const;  Rename a remote file. ;  ; void rm (const char *file) const;  ; void rmdir (const char *dir) const;  ; void SetBlockSize (Int_t blockSize);  Make sure the block size is a power of two, with a minimum of 32768. ;  ; void SetRestartAt (Long64_t at);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const ",MatchSource.WIKI,doc/master/classTFTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFTP.html
Integrability,message,message,"TP.h. Public Types; enum  { kDfltBlockSize = 0x80000; , kDfltWindowSize = 65535; , kBinary = 0; , kAscii = 1; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFTP (const char *url, Int_t parallel=1, Int_t wsize=kDfltWindowSize, TSocket *sock=nullptr);  Open connection to host specified by the url using par parallel sockets. ;  ; virtual ~TFTP ();  TFTP dtor. Send close message and close socket. ;  ; Bool_t AccessPathName (const char *path, EAccessMode mode=kFileExists, Bool_t print=kFALSE);  Returns kFALSE if one can access a file using the specified access mode. ;  ; void Ascii ();  ; void ascii ();  ; void bin ();  ; void Binary ();  ; void bye ();  ; void cd (const char *dir) const;  ; Int_t ChangeDirectory (const char *dir) const;  Change the remote directory. ;  ; Int_t ChangePermission (const char *file, Int_t mode) const;  Change permissions of a remote file. ;  ; void chmod (const char *file, Int_t mode) const;  ; Int_t Close ();  Close ftp connection. ;  ; Int_t DeleteDirectory (const char *dir) const;  Delete a remote directory. ;  ; Int_t DeleteFile (const char *file) const;  Delete a remote file. ;  ; void FreeDirectory (Bool_t print=kFALSE);  Free a remotely open directory via rootd. ;  ; void get (const char *file, const char *localName=nullptr);  ; Int_t GetBlockSize () const;  ; const char * GetDirEntry (Bool_t print=kFALSE);  Get directory ",MatchSource.WIKI,doc/master/classTFTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFTP.html
Modifiability,inherit,inherited,". ROOT: TFTP Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TFTP Class Reference. . Definition at line 34 of file TFTP.h. Public Types; enum  { kDfltBlockSize = 0x80000; , kDfltWindowSize = 65535; , kBinary = 0; , kAscii = 1; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFTP (const char *url, Int_t parallel=1, Int_t wsize=kDfltWindowSize, TSocket *sock=nullptr);  Open connection to host specified by the url using par parallel sockets. ;  ; virtual ~TFTP ();  TFTP dtor. Send close message and close socket. ;  ; Bool_t AccessPathName (const char *path, EAccessMode mode=kFileExists, Bool_t print=kFALSE);  Returns kFALSE if one can access a file using the specified access mode. ;  ; void Ascii ();  ; void ascii ();  ; void bin ();  ; void Binary ();  ; void bye ();  ; void cd (const char *dir) const;  ; Int_t ChangeDirectory (const char *dir) const;  Change the remote directory. ;  ; Int_t ChangePermission (const char *file, Int_t mode) const;  Change permissions of a remote file. ;  ; void chmod (const char *file, Int_t mode) const;  ; Int_t Close ();  Close ftp connection. ;  ; Int_t DeleteDirectory (const ch",MatchSource.WIKI,doc/master/classTFTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFTP.html
Security,access,access,"= 1; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFTP (const char *url, Int_t parallel=1, Int_t wsize=kDfltWindowSize, TSocket *sock=nullptr);  Open connection to host specified by the url using par parallel sockets. ;  ; virtual ~TFTP ();  TFTP dtor. Send close message and close socket. ;  ; Bool_t AccessPathName (const char *path, EAccessMode mode=kFileExists, Bool_t print=kFALSE);  Returns kFALSE if one can access a file using the specified access mode. ;  ; void Ascii ();  ; void ascii ();  ; void bin ();  ; void Binary ();  ; void bye ();  ; void cd (const char *dir) const;  ; Int_t ChangeDirectory (const char *dir) const;  Change the remote directory. ;  ; Int_t ChangePermission (const char *file, Int_t mode) const;  Change permissions of a remote file. ;  ; void chmod (const char *file, Int_t mode) const;  ; Int_t Close ();  Close ftp connection. ;  ; Int_t DeleteDirectory (const char *dir) const;  Delete a remote directory. ;  ; Int_t DeleteFile (const char *file) const;  Delete a remote file. ;  ; void FreeDirectory (Bool_t print=kFALSE);  Free a remotely open directory via rootd. ;  ; void get (const char *file, const char *localName=nullptr);  ; Int_t GetBlockSize () const;  ; const char * GetDirEntry (Bool_t print=kFALSE);  Get directory entry via rootd. ;  ; Long64_t GetFile (const char *file, const char *localName=nullptr);  Transfer file",MatchSource.WIKI,doc/master/classTFTP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFTP.html
Availability,error,error,"amedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TFumiliinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DeleteArrays()TFumili; Derivatives(Double_t *, Double_t *)TFumili; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Eval(Int_t &npar, Double_t *grad, Double_t &fval, Double_t *par, Int_t flag)TFumili; EvalTFN(Double_t *, Double_t *)TFumili; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteCommand(const char *command, Double_t *args, Int_t nargs) overrideTFumilivirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; ExecuteSetCommand(Int_t)TFumili; fATFumiliprivate; fAKAPPATFumiliprivate; fAMNTFumiliprivate; fAMXTFumiliprivate; fANamesTFumiliprivate; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fCacheTVirtualFitterprotected; fCacheSizeTVirtualFitterprotected; fCmParTFumiliprivate; FCNFunc_t typedefTVirtualFitter; fCwordTFumiliprivate; fDATFumiliprivate; fDEBUGTFumiliprivate; fDFTFumiliprivate; fENDFLGTFumiliprivate; fEPSTFumiliprivate; fEXDATFumiliprivate; fFCNTVirtualFitterprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fGrTFumiliprivate; fGRADTFumiliprivate; fGTTFumiliprivate; FillBuffer(char *&buffer)TNamedvirtual; fINDFLGTFumiliprivate; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; FitChisquare(Int_t &npar, Doub",MatchSource.WIKI,doc/master/classTFumili-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFumili-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TFumili Member List. This is the complete list of members for TFumili, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; BuildArrays()TFumili; CheckedHash()TObjectinline; Chisquare(Int_t npar, Double_t *params) const overrideTFumilivirtual; Class()TFumilistatic; Class_Name()TFumilistatic; Class_Version()TFumiliinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *opt="""") overrideTFumilivirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TFumiliinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DeleteArrays()TFumili; Derivatives(Double_t *, Double_t *)TFumili; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Eval(Int_t &npar, Double_t *grad, Double_t &fval, Double_t *par, Int_t flag)TFumili; EvalTFN(Double_t *, Double_t *)TFumili; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteCommand(const char *command, Double_t *args, Int_t nargs) overrideTFumilivirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; ExecuteSetCommand(Int_t)TFumili; fATFumiliprivate; fAKAPPATFumiliprivate; fAMNTFumiliprivate; fAMXTFumiliprivate; fANamesTFumil",MatchSource.WIKI,doc/master/classTFumili-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFumili-members.html
Availability,error,errors,". ROOT: TFumili Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TFumili Class Reference. . FUMILI minimization package; FUMILI is based on ideas, proposed by I.N. Silin [See NIM A440, 2000 (p431)]. It was converted from FORTRAN to C by Sergey Yaschenko s.yas.nosp@m.chen.nosp@m.ko@fz.nosp@m.-jue.nosp@m.lich..nosp@m.de; FUMILI is used to minimize Chi-square function or to search maximum of likelihood function.; Experimentally measured values \(F_i\) are fitted with theoretical functions \(f_i({\vec x}_i,\vec\theta\,\,)\), where \({\vec x}_i\) are coordinates, and \(\vec\theta\) – vector of parameters.; For better convergence Chi-square function has to be the following form. \[; {\chi^2\over2}={1\over2}\sum^n_{i=1}\left(f_i(\vec; x_i,\vec\theta\,\,)-F_i\over\sigma_i\right)^2 \tag{1}; \]. where \(\sigma_i\) are errors of measured function.; The minimum condition is. \[; {\partial\chi^2\over\partial\theta_i}=\sum^n_{j=1}{1\over\sigma^2_j}\cdot; {\partial f_j\over\partial\theta_i}\left[f_j(\vec; x_j,\vec\theta\,\,)-F_j\right]=0,\qquad i=1\ldots m\tag{2}; \]. where m is the quantity of parameters.; Expanding left part of (2) over parameter increments and retaining only linear terms one gets. \[; \left(\partial\chi^2\over\theta_i\right)_{\vec\theta={\vec\theta}^0}; +\sum_k\left(\partial^2\chi^2\over\partial\theta_i\partial\theta_k\right)_{; \vec\theta={\vec\theta}^0}\cdot(\theta_k-\theta_k^0); = 0\tag{3}; \]. Here \({\vec\theta}_0\) is some initial value of parameters. In general case:. \[; {\partial^2\chi^2\over\partial\theta_i\partial\theta_k}=; \sum^n_{j=1}{1\over\sigma^2_j}{\partial f_j\over\theta_i}; {\partial f_j\over\theta_k} +; \sum^n_{j=1}{(f_j - F_j)\over\sigma^2_j}\cdot; {\partial^2f_j\over\partial\theta_i\partial\theta_k}\tag{4}; \]. In FUMILI algorithm for second derivatives of Chi-squar",MatchSource.WIKI,doc/master/classTFumili.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFumili.html
Deployability,release,released,"r 0; exdata[1] = ExpSigma_0 - error of value number 0; exdata[2] = X_0[0]; exdata[3] = X_0[1]; exdata[vecsize-1] = X_0[vecsize-3]; exdata[vecsize] = ExpValue_1; exdata[vecsize+1] = ExpSigma_1; exdata[vecsize+2] = X_1[0]; exdata[vecsize*(numpoints-1)] = ExpValue_(numpoints-1); exdata[vecsize*numpoints-1] = X_(numpoints-1)[vecsize-3] . Definition at line 1616 of file TFumili.cxx. ◆ SetFitMethod(). void TFumili::SetFitMethod ; (; const char * ; name). overridevirtual . ret fit method (chisquare or log-likelihood) ; Implements TVirtualFitter.; Definition at line 1628 of file TFumili.cxx. ◆ SetParameter(). Int_t TFumili::SetParameter ; (; Int_t ; ipar, . const char * ; parname, . Double_t ; value, . Double_t ; verr, . Double_t ; vlow, . Double_t ; vhigh . ). overridevirtual . Sets for parameter number ipar initial parameter value, name parname, initial error verr and limits vlow and vhigh. . If vlow = vhigh but not equal to zero, parameter will be fixed.; If vlow = vhigh = 0, parameter is released and its limits are discarded . Implements TVirtualFitter.; Definition at line 1641 of file TFumili.cxx. ◆ SetParNumber(). void TFumili::SetParNumber ; (; Int_t ; ParNum). Definition at line 168 of file TFumili.cxx. ◆ SGZ(). Int_t TFumili::SGZ ; (; ). Evaluates objective function ( chi-square ), gradients and Z-matrix using data provided by user via TFumili::SetData. ; Definition at line 1670 of file TFumili.cxx. ◆ Streamer(). void TFumili::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFumili::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 114 of file TFumili.h. Member Data Documentation. ◆ fA. Double_t* TFumili::fA. private . [fMaxParam] Fit parameter array ; Definition at line 44 of file TFumili.h. ◆ fAKAPPA. Double_t TFumili::fAKAPPA. private . Definition at line 60 of file TFumili.h. ◆ fAMN. Double_t* TFumili::fAMN. private . [fMaxPara",MatchSource.WIKI,doc/master/classTFumili.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFumili.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTFumili.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFumili.html
Modifiability,inherit,inherited,"herwise) ;  ; Int_t Minimize ();  Main minimization procedure. ;  ; void PrintResults (Int_t k, Double_t p) const override;  Prints fit results. ;  ; void ReleaseParameter (Int_t ipar) override;  Releases parameter number ipar. ;  ; void SetData (Double_t *, Int_t, Int_t);  Sets pointer to data array provided by user. ;  ; void SetFitMethod (const char *name) override;  ret fit method (chisquare or log-likelihood) ;  ; Int_t SetParameter (Int_t ipar, const char *parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh) override;  Sets for parameter number ipar initial parameter value, name parname, initial error verr and limits vlow and vhigh. ;  ; void SetParNumber (Int_t ParNum);  ; Int_t SGZ ();  Evaluates objective function ( chi-square ), gradients and Z-matrix using data provided by user via TFumili::SetData. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualFitter;  TVirtualFitter ();  Default constructor. ;  ;  ~TVirtualFitter () override;  Cleanup virtual fitter. ;  ; virtual void GetConfidenceIntervals (Int_t n, Int_t ndim, const Double_t *x, Double_t *ci, Double_t cl=0.95);  return confidence intervals in array x of dimension ndim implemented in TFitter and TLinearFitter ;  ; virtual void GetConfidenceIntervals (TObject *obj, Double_t cl=0.95);  return confidence intervals in TObject obj implemented in TFitter and TLinearFitter ;  ; virtual FCNFunc_t GetFCN ();  ; virtual Foption_t GetFitOption () const;  ; TMethodCall * GetMethodCall () const;  ; virtual TObject * GetObjectFit () const;  ; virtual TObject * GetUserFunc () const;  ; virtual Int_t GetXfirst () const;  ; virtual Int_t GetXlast () const;  ; virtual Int_t GetYfirst () const;  ; virtual Int_t GetYlast () const;  ; virtual Int_t GetZfirst () const;  ; virtual Int_t GetZlast () const;  ; TClass * IsA () const override;  ; virtual Double_t *",MatchSource.WIKI,doc/master/classTFumili.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFumili.html
Performance,cache,cache,"d by user via TFumili::SetData. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualFitter;  TVirtualFitter ();  Default constructor. ;  ;  ~TVirtualFitter () override;  Cleanup virtual fitter. ;  ; virtual void GetConfidenceIntervals (Int_t n, Int_t ndim, const Double_t *x, Double_t *ci, Double_t cl=0.95);  return confidence intervals in array x of dimension ndim implemented in TFitter and TLinearFitter ;  ; virtual void GetConfidenceIntervals (TObject *obj, Double_t cl=0.95);  return confidence intervals in TObject obj implemented in TFitter and TLinearFitter ;  ; virtual FCNFunc_t GetFCN ();  ; virtual Foption_t GetFitOption () const;  ; TMethodCall * GetMethodCall () const;  ; virtual TObject * GetObjectFit () const;  ; virtual TObject * GetUserFunc () const;  ; virtual Int_t GetXfirst () const;  ; virtual Int_t GetXlast () const;  ; virtual Int_t GetYfirst () const;  ; virtual Int_t GetYlast () const;  ; virtual Int_t GetZfirst () const;  ; virtual Int_t GetZlast () const;  ; TClass * IsA () const override;  ; virtual Double_t * SetCache (Int_t npoints, Int_t psize);  Initialize the cache array npoints is the number of points to be stored (or already stored) in the cache psize is the number of elements per point. ;  ; virtual void SetFCN (void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t));  To set the address of the minimization objective function called by the native compiler (see function below when called by CINT) ;  ; virtual void SetFitOption (Foption_t option);  ; virtual void SetObjectFit (TObject *obj);  ; virtual void SetUserFunc (TObject *userfunc);  ; virtual void SetXfirst (Int_t first);  ; virtual void SetXlast (Int_t last);  ; virtual void SetYfirst (Int_t first);  ; virtual void SetYlast (Int_t last);  ; virtual void SetZfirst (Int_t first);  ; virtual void SetZlast (Int_t last);  ; void Strea",MatchSource.WIKI,doc/master/classTFumili.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFumili.html
Safety,predict,predict,"method (function evaluated at center of bin) for each point the cache contains the following info; 1D : bc,e,xc (bin content, error, x of center of bin); 2D : bc,e,xc,yc; 3D : bc,e,xc,yc,zc . Definition at line 1738 of file TFumili.cxx. ◆ FitChisquareI(). void TFumili::FitChisquareI ; (; Int_t & ; npar, . Double_t * ; gin, . Double_t & ; f, . Double_t * ; u, . Int_t ; flag . ). virtual . Minimization function for H1s using a Chisquare method. ; The ""I""ntegral method is used for each point the cache contains the following info; 1D : bc,e,xc,xw (bin content, error, x of center of bin, x bin width of bin); 2D : bc,e,xc,xw,yc,yw; 3D : bc,e,xc,xw,yc,yw,zc,zw . Definition at line 1809 of file TFumili.cxx. ◆ FitLikelihood(). void TFumili::FitLikelihood ; (; Int_t & ; npar, . Double_t * ; gin, . Double_t & ; f, . Double_t * ; u, . Int_t ; flag . ). virtual . Minimization function for H1s using a Likelihood method. ; Basically, it forms the likelihood by determining the Poisson probability that given a number of entries in a particular bin, the fit would predict it's value. This is then done for each bin, and the sum of the logs is taken as the likelihood.; Default method (function evaluated at center of bin) for each point the cache contains the following info; 1D : bc,e,xc (bin content, error, x of center of bin); 2D : bc,e,xc,yc; 3D : bc,e,xc,yc,zc . Definition at line 1884 of file TFumili.cxx. ◆ FitLikelihoodI(). void TFumili::FitLikelihoodI ; (; Int_t & ; npar, . Double_t * ; gin, . Double_t & ; f, . Double_t * ; u, . Int_t ; flag . ). virtual . Minimization function for H1s using a Likelihood method. ; Basically, it forms the likelihood by determining the Poisson probability that given a number of entries in a particular bin, the fit would predict it's value. This is then done for each bin, and the sum of the logs is taken as the likelihood.; The ""I""ntegral method is used for each point the cache contains the following info; 1D : bc,e,xc,xw (bin content, error, x of ce",MatchSource.WIKI,doc/master/classTFumili.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFumili.html
Security,hash,hash,"etZfirst (Int_t first);  ; virtual void SetZlast (Int_t last);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTFumili.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFumili.html
Testability,log,logarithm,"1\over\sigma^2_j}{\partial f_j\over\theta_i}; {\partial f_j\over\theta_k}\tag{5}; \]. Then the equations for parameter increments are ; \[\left(\partial\chi^2\over\partial\theta_i\right)_{\vec\theta={\vec\theta}^0}; +\sum_k Z_{ik}\cdot(\theta_k-\theta^0_k) = 0,; \qquad i=1\ldots m\tag{6}; \]. Remarkable feature of algorithm is the technique for step restriction. For an initial value of parameter \({\vec\theta}^0\) a parallelepiped \(P_0\) is built with the center at \({\vec\theta}^0\) and axes parallel to coordinate axes \(\theta_i\). The lengths of parallelepiped sides along i-th axis is \(2b_i\), where \(b_i\) is such a value that the functions \(f_j(\vec\theta)\) are quasi-linear all over the parallelepiped.; FUMILI takes into account simple linear inequalities in the form: ; \[; \theta_i^{\rm min}\le\theta_i\le\theta^{\rm max}_i\tag{7}; \]. They form parallelepiped \(P\) ( \(P_0\) may be deformed by \(P\)). Very similar step formulae are used in FUMILI for negative logarithm of the likelihood function with the same idea - linearization of function argument. ; Definition at line 11 of file TFumili.h. Public Member Functions;  TFumili (Int_t maxpar=25);  ;  ~TFumili () override;  TFumili destructor. ;  ; void BuildArrays ();  Allocates memory for internal arrays. ;  ; Double_t Chisquare (Int_t npar, Double_t *params) const override;  return a chisquare equivalent ;  ; void Clear (Option_t *opt="""") override;  Resets all parameter names, values and errors to zero. ;  ; void DeleteArrays ();  Deallocates memory. Called from destructor TFumili::~TFumili. ;  ; void Derivatives (Double_t *, Double_t *);  Calculates partial derivatives of theoretical function. ;  ; Int_t Eval (Int_t &npar, Double_t *grad, Double_t &fval, Double_t *par, Int_t flag);  Evaluate the minimisation function. ;  ; Double_t EvalTFN (Double_t *, Double_t *);  Evaluate theoretical function. ;  ; Int_t ExecuteCommand (const char *command, Double_t *args, Int_t nargs) override;  Execute MINUIT command",MatchSource.WIKI,doc/master/classTFumili.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFumili.html
Usability,simpl,simple,"FUMILI will fail if one tries minimize \(\chi^2 = g^2(\vec\theta)\) where g is arbitrary function.; Approximate value is: ; \[{\partial^2\chi^2\over\partial\theta_i\partial\theta_k}\approx; Z_{ik}=; \sum^n_{j=1}{1\over\sigma^2_j}{\partial f_j\over\theta_i}; {\partial f_j\over\theta_k}\tag{5}; \]. Then the equations for parameter increments are ; \[\left(\partial\chi^2\over\partial\theta_i\right)_{\vec\theta={\vec\theta}^0}; +\sum_k Z_{ik}\cdot(\theta_k-\theta^0_k) = 0,; \qquad i=1\ldots m\tag{6}; \]. Remarkable feature of algorithm is the technique for step restriction. For an initial value of parameter \({\vec\theta}^0\) a parallelepiped \(P_0\) is built with the center at \({\vec\theta}^0\) and axes parallel to coordinate axes \(\theta_i\). The lengths of parallelepiped sides along i-th axis is \(2b_i\), where \(b_i\) is such a value that the functions \(f_j(\vec\theta)\) are quasi-linear all over the parallelepiped.; FUMILI takes into account simple linear inequalities in the form: ; \[; \theta_i^{\rm min}\le\theta_i\le\theta^{\rm max}_i\tag{7}; \]. They form parallelepiped \(P\) ( \(P_0\) may be deformed by \(P\)). Very similar step formulae are used in FUMILI for negative logarithm of the likelihood function with the same idea - linearization of function argument. ; Definition at line 11 of file TFumili.h. Public Member Functions;  TFumili (Int_t maxpar=25);  ;  ~TFumili () override;  TFumili destructor. ;  ; void BuildArrays ();  Allocates memory for internal arrays. ;  ; Double_t Chisquare (Int_t npar, Double_t *params) const override;  return a chisquare equivalent ;  ; void Clear (Option_t *opt="""") override;  Resets all parameter names, values and errors to zero. ;  ; void DeleteArrays ();  Deallocates memory. Called from destructor TFumili::~TFumili. ;  ; void Derivatives (Double_t *, Double_t *);  Calculates partial derivatives of theoretical function. ;  ; Int_t Eval (Int_t &npar, Double_t *grad, Double_t &fval, Double_t *par, Int_t flag);  Evaluate the ",MatchSource.WIKI,doc/master/classTFumili.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFumili.html
Availability,error,errors,"ing...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TFumiliMinimizer Class Reference. ; TFumiliMinimizer class: minimizer implementation based on TFumili. ; Definition at line 43 of file TFumiliMinimizer.h. Public Member Functions;  TFumiliMinimizer (int dummy=0);  Default constructor (an argument is needed by plug-in manager) ;  ;  ~TFumiliMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; virtual TClass * IsA () const;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) overr",MatchSource.WIKI,doc/master/classTFumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFumiliMinimizer.html
Deployability,configurat,configuration,"inear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ReleaseVariable (unsigned int ivar);  release an existing variable ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ",MatchSource.WIKI,doc/master/classTFumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFumiliMinimizer.html
Modifiability,plug-in,plug-in,"ing...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TFumiliMinimizer Class Reference. ; TFumiliMinimizer class: minimizer implementation based on TFumili. ; Definition at line 43 of file TFumiliMinimizer.h. Public Member Functions;  TFumiliMinimizer (int dummy=0);  Default constructor (an argument is needed by plug-in manager) ;  ;  ~TFumiliMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; virtual TClass * IsA () const;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) overr",MatchSource.WIKI,doc/master/classTFumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFumiliMinimizer.html
Performance,perform,perform,"ing...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TFumiliMinimizer Class Reference. ; TFumiliMinimizer class: minimizer implementation based on TFumili. ; Definition at line 43 of file TFumiliMinimizer.h. Public Member Functions;  TFumiliMinimizer (int dummy=0);  Default constructor (an argument is needed by plug-in manager) ;  ;  ~TFumiliMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; virtual TClass * IsA () const;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) overr",MatchSource.WIKI,doc/master/classTFumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFumiliMinimizer.html
Security,validat,validation," &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Fu",MatchSource.WIKI,doc/master/classTFumiliMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFumiliMinimizer.html
Availability,error,error,"ons |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TFunction Class Reference. ; Global functions class (global functions are obtained from CINT). ; This class describes one single global function. The TROOT class contains a list of all currently defined global functions (accessible via TROOT::GetListOfGlobalFunctions()). ; Definition at line 30 of file TFunction.h. Public Member Functions;  TFunction (const TFunction &orig);  Copy operator. ;  ;  TFunction (MethodInfo_t *info=nullptr);  Default TFunction ctor. ;  ; virtual ~TFunction ();  TFunction dtor deletes adopted CINT MethodInfo. ;  ; TObject * Clone (const char *newname="""") const override;  Clone method. ;  ; Long_t ExtraProperty () const;  Get property description word. For meaning of bits see EProperty. ;  ; DeclId_t GetDeclId () const;  ; TList * GetListOfMethodArgs ();  Return list containing the TMethodArgs of a TFunction. ;  ; virtual const char * GetMangledName () const;  Returns the mangled name as defined by CINT, or 0 in case of error. ;  ; Int_t GetNargs () const;  Number of function arguments. ;  ; Int_t GetNargsOpt () const;  Number of function optional (default) arguments. ;  ; virtual const char * GetPrototype () const;  Returns the prototype of a function as defined by CINT, or 0 in case of error. ;  ; const char * GetReturnTypeName () const;  Get full type description of function return type, e,g.: ""class TDirectory*"". ;  ; std::string GetReturnTypeNormalizedName () const;  Get the normalized name of the return type. ;  ; const char * GetSignature ();  Return signature of function. ;  ; void * InterfaceMethod () const;  Return pointer to the interface method. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsValid ();  Return true if this function object is pointing to a currently loaded function. ;  ; void ls (Option_t *option="""") const override;  List TFunction name and title. ;  ; TFunction & operator= (const TFunction &rhs);  Assignment op",MatchSource.WIKI,doc/master/classTFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFunction.html
Deployability,update,updated," from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual void CreateSignature ();  Using the CINT method arg information to create a complete signature string. ;  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; MethodInfo_t * fInfo;  ; TString fMangledName;  ; TList * fMethodArgs;  ; TString fSignature;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Friends; class TCling;  ; class TMethodCall;  . Additional Inherited Members;  Public Types inherited from TDictionary; typedef const void * DeclId_t;  ; enum class  EMemberSelection { kNoUsingDecls; , kOnlyUsingDecls; , kAlsoUsingDecls; };  Kinds of members to include in lists. More...;  ; enum  ESTLType { ;   kNone = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultimap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiset = ROOT::kSTLmultiset; , kUnordere",MatchSource.WIKI,doc/master/classTFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFunction.html
Integrability,interface,interface," char *newname="""") const override;  Clone method. ;  ; Long_t ExtraProperty () const;  Get property description word. For meaning of bits see EProperty. ;  ; DeclId_t GetDeclId () const;  ; TList * GetListOfMethodArgs ();  Return list containing the TMethodArgs of a TFunction. ;  ; virtual const char * GetMangledName () const;  Returns the mangled name as defined by CINT, or 0 in case of error. ;  ; Int_t GetNargs () const;  Number of function arguments. ;  ; Int_t GetNargsOpt () const;  Number of function optional (default) arguments. ;  ; virtual const char * GetPrototype () const;  Returns the prototype of a function as defined by CINT, or 0 in case of error. ;  ; const char * GetReturnTypeName () const;  Get full type description of function return type, e,g.: ""class TDirectory*"". ;  ; std::string GetReturnTypeNormalizedName () const;  Get the normalized name of the return type. ;  ; const char * GetSignature ();  Return signature of function. ;  ; void * InterfaceMethod () const;  Return pointer to the interface method. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsValid ();  Return true if this function object is pointing to a currently loaded function. ;  ; void ls (Option_t *option="""") const override;  List TFunction name and title. ;  ; TFunction & operator= (const TFunction &rhs);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TFunction name and title. ;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool Update (MethodInfo_t *info);  Update the TFunction to reflect the new info. ;  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttri",MatchSource.WIKI,doc/master/classTFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFunction.html
Modifiability,inherit,inherited,"lass * IsA () const override;  ; virtual Bool_t IsValid ();  Return true if this function object is pointing to a currently loaded function. ;  ; void ls (Option_t *option="""") const override;  List TFunction name and title. ;  ; TFunction & operator= (const TFunction &rhs);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TFunction name and title. ;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool Update (MethodInfo_t *info);  Update the TFunction to reflect the new info. ;  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Re",MatchSource.WIKI,doc/master/classTFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFunction.html
Performance,load,loaded,"rd. For meaning of bits see EProperty. ;  ; DeclId_t GetDeclId () const;  ; TList * GetListOfMethodArgs ();  Return list containing the TMethodArgs of a TFunction. ;  ; virtual const char * GetMangledName () const;  Returns the mangled name as defined by CINT, or 0 in case of error. ;  ; Int_t GetNargs () const;  Number of function arguments. ;  ; Int_t GetNargsOpt () const;  Number of function optional (default) arguments. ;  ; virtual const char * GetPrototype () const;  Returns the prototype of a function as defined by CINT, or 0 in case of error. ;  ; const char * GetReturnTypeName () const;  Get full type description of function return type, e,g.: ""class TDirectory*"". ;  ; std::string GetReturnTypeNormalizedName () const;  Get the normalized name of the return type. ;  ; const char * GetSignature ();  Return signature of function. ;  ; void * InterfaceMethod () const;  Return pointer to the interface method. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsValid ();  Return true if this function object is pointing to a currently loaded function. ;  ; void ls (Option_t *option="""") const override;  List TFunction name and title. ;  ; TFunction & operator= (const TFunction &rhs);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TFunction name and title. ;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool Update (MethodInfo_t *info);  Update the TFunction to reflect the new info. ;  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const TDictionary &other);  ; void StreamerNVirtu",MatchSource.WIKI,doc/master/classTFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFunction.html
Security,access,accessible,". ROOT: TFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TFunction Class Reference. ; Global functions class (global functions are obtained from CINT). ; This class describes one single global function. The TROOT class contains a list of all currently defined global functions (accessible via TROOT::GetListOfGlobalFunctions()). ; Definition at line 30 of file TFunction.h. Public Member Functions;  TFunction (const TFunction &orig);  Copy operator. ;  ;  TFunction (MethodInfo_t *info=nullptr);  Default TFunction ctor. ;  ; virtual ~TFunction ();  TFunction dtor deletes adopted CINT MethodInfo. ;  ; TObject * Clone (const char *newname="""") const override;  Clone method. ;  ; Long_t ExtraProperty () const;  Get property description word. For meaning of bits see EProperty. ;  ; DeclId_t GetDeclId () const;  ; TList * GetListOfMethodArgs ();  Return list containing the TMethodArgs of a TFunction. ;  ; virtual const char * GetMangledName () const;  Returns the mangled name as defined by CINT, or 0 in case of error. ;  ; Int_t GetNargs () const;  Number of function arguments. ;  ; Int_t GetNargsOpt () const;  Number of function optional (default) arguments. ;  ; virtual const char * GetPrototype () const;  Returns the prototype of a function as defined by CINT, or 0 in case of error. ;  ; const char * GetReturnTypeName () const;  Get full type description of function return type, e,g.: ""class TDirectory*"". ;  ; std::string GetReturnTypeNormalizedName () const;  Get the normalized name of the return type. ;  ; const char * GetSignature ();  Return signature of function. ;  ; void * InterfaceMethod () const;  Return pointer to the interface method. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsValid ();  Return true if this function object ",MatchSource.WIKI,doc/master/classTFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFunction.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTFunctionTemplate.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFunctionTemplate.html
Deployability,update,updated,"deredmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TFunctionTemplate.h>. Inheritance diagram for TFunctionTemplate:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TFunctionTemplate() [1/2]. TFunctionTemplate::TFunctionTemplate ; (; FuncTempInfo_t * ; info, . TClass * ; cl . ). Default TFunctionTemplate ctor. ; Definition at line 26 of file TFunctionTemplate.cxx. ◆ TFunctionTemplate() [2/2]. TFunctionTemplate::TFunctionTemplate ; (; const TFunctionTemplate & ; orig). Copy operator. ; Definition at line 38 of file TFunctionTemplate.cxx. ◆ ~TFunctionTemplate(). TFunctionTemplate::~TFunctionTemplate ; (; ). virtual . TFunctionTemplate dtor deletes adopted CINT FuncTempInfo. ; Definition at line ",MatchSource.WIKI,doc/master/classTFunctionTemplate.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFunctionTemplate.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTFunctionTemplate.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFunctionTemplate.html
Modifiability,inherit,inherited," const;  Number of function optional (default) arguments. ;  ; UInt_t GetTemplateNargs () const;  Number of function arguments. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsValid ();  Return true if this function template object is pointing to a currently loaded function. ;  ; TFunctionTemplate & operator= (const TFunctionTemplate &rhs);  Assignment operator. ;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool Update (FuncTempInfo_t *info);  Update the TFunctionTemplate to reflect the new info. ;  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Re",MatchSource.WIKI,doc/master/classTFunctionTemplate.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFunctionTemplate.html
Performance,load,loaded,"lic Member Functions |; Protected Attributes |; List of all members ; TFunctionTemplate Class Reference. ; Dictionary for function template This class describes one single function template. ; Definition at line 26 of file TFunctionTemplate.h. Public Member Functions;  TFunctionTemplate (const TFunctionTemplate &orig);  Copy operator. ;  ;  TFunctionTemplate (FuncTempInfo_t *info, TClass *cl);  Default TFunctionTemplate ctor. ;  ; virtual ~TFunctionTemplate ();  TFunctionTemplate dtor deletes adopted CINT FuncTempInfo. ;  ; TObject * Clone (const char *newname="""") const override;  Clone method. ;  ; Long_t ExtraProperty () const;  Get the properties not already defined in Property.See TDictionary's EFunctionProperty. ;  ; DeclId_t GetDeclId () const;  ; UInt_t GetTemplateMinReqArgs () const;  Number of function optional (default) arguments. ;  ; UInt_t GetTemplateNargs () const;  Number of function arguments. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsValid ();  Return true if this function template object is pointing to a currently loaded function. ;  ; TFunctionTemplate & operator= (const TFunctionTemplate &rhs);  Assignment operator. ;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool Update (FuncTempInfo_t *info);  Update the TFunctionTemplate to reflect the new info. ;  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, cons",MatchSource.WIKI,doc/master/classTFunctionTemplate.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFunctionTemplate.html
Security,hash,hash,"ctionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTFunctionTemplate.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTFunctionTemplate.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTG16ColorSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTG16ColorSelector.html
Integrability,message,messages,". ROOT: TG16ColorSelector Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TG16ColorSelector Class ReferenceGUI » Low level GUI widgets. ; A composite frame with 16 TGColorFrames. ; Definition at line 50 of file TGColorSelect.h. Public Member Functions;  TG16ColorSelector (const TGWindow *p=nullptr);  TG16ColorSelector constructor. ;  ;  ~TG16ColorSelector () override;  TG16ColorSelector destructor. ;  ; Int_t GetActive ();  ; TClass * IsA () const override;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages for TG16ColorSelector. ;  ; void SetActive (Int_t newat);  Set active color frame. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects contained in this composite frame. ;  ; virtual TGFrameElement * FindFrameElement (TGFrame *f) const;  Find frame-element holding frame f. ;  ; UI",MatchSource.WIKI,doc/master/classTG16ColorSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTG16ColorSelector.html
Modifiability,inherit,inherited,"ide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TG16ColorSelector Class ReferenceGUI » Low level GUI widgets. ; A composite frame with 16 TGColorFrames. ; Definition at line 50 of file TGColorSelect.h. Public Member Functions;  TG16ColorSelector (const TGWindow *p=nullptr);  TG16ColorSelector constructor. ;  ;  ~TG16ColorSelector () override;  TG16ColorSelector destructor. ;  ; Int_t GetActive ();  ; TClass * IsA () const override;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages for TG16ColorSelector. ;  ; void SetActive (Int_t newat);  Set active color frame. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects contained in this composite frame. ;  ; virtual TGFrameElement * FindFrameElement (TGFrame *f) const;  Find frame-element holding frame f. ;  ; UInt_t GetDefaultHeight () const override;  ; TGDimension GetDefaultSize () ",MatchSource.WIKI,doc/master/classTG16ColorSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTG16ColorSelector.html
Security,hash,hash,"n response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; TClass * IsA () const override;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTG16ColorSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTG16ColorSelector.html
Availability,avail,available,"icationImp ();  ; TApplication * GetAppRemote () const;  ; const char * GetIdleCommand () const;  ; TString GetSetup ();  It gets the ROOT installation setup as TString. ;  ; TSignalHandler * GetSignalHandler () const;  ; virtual void HandleException (Int_t sig);  Handle exceptions (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingException) trapped in TSystem. ;  ; virtual void HandleIdleTimer ();  Handle idle timeout. ;  ; virtual Bool_t HandleTermInput ();  ; virtual void Hide ();  ; virtual void Iconify ();  ; virtual void Init ();  ; void InitializeGraphics (Bool_t only_web=kFALSE);  Initialize the graphics environment. ;  ; TObjArray * InputFiles () const;  ; virtual Bool_t IsCmdThread ();  ; Bool_t IsRunning () const;  ; virtual void KeyPressed (Int_t key);  Emit signal when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefilled ROOT version. ;  ; void OpenGitHubIssue (const TString &type);  It opens a GitHub issue in a web browser with prefilled ROOT version. ;  ; void OpenInBrowser (const TString &url);  The function generates and executes a command that loads the Doxygen URL in a browser. ;  ; void OpenReferenceGuideFor (const TString &strippedClass);  It opens the online reference guide, generated with Doxygen, for the chosen scope (class/namespace/struct) or member (method/function/ data member/enumeration/enumerator. ;  ; virtual Longptr_t ProcessFile (const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE);  Process a file containing a C++ macro. ;  ; virtual Longptr_t ProcessLine (const char *line, Bool_t sync=kFALSE, Int_t *error=nullptr);  Process a single comm",MatchSource.WIKI,doc/master/classTGApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGApplication.html
Deployability,install,installation,"ion dtor. ;  ; void GetOptions (Int_t *argc, char **argv) override;  Handle command line arguments. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TApplication;  TApplication (const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0);  Create an application environment. ;  ; virtual ~TApplication ();  TApplication dtor. ;  ; virtual const char * ApplicationName () const;  ; Int_t Argc () const;  ; char ** Argv () const;  ; char * Argv (Int_t index) const;  Return specified argument. ;  ; void ClearInputFiles ();  Clear list containing macro files passed as program arguments. ;  ; EExitOnException ExitOnException (EExitOnException opt=kExit);  Set the exit on exception option. ;  ; virtual TApplicationImp * GetApplicationImp ();  ; TApplication * GetAppRemote () const;  ; const char * GetIdleCommand () const;  ; TString GetSetup ();  It gets the ROOT installation setup as TString. ;  ; TSignalHandler * GetSignalHandler () const;  ; virtual void HandleException (Int_t sig);  Handle exceptions (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingException) trapped in TSystem. ;  ; virtual void HandleIdleTimer ();  Handle idle timeout. ;  ; virtual Bool_t HandleTermInput ();  ; virtual void Hide ();  ; virtual void Iconify ();  ; virtual void Init ();  ; void InitializeGraphics (Bool_t only_web=kFALSE);  Initialize the graphics environment. ;  ; TObjArray * InputFiles () const;  ; virtual Bool_t IsCmdThread ();  ; Bool_t IsRunning () const;  ; virtual void KeyPressed (Int_t key);  Emit signal when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t ",MatchSource.WIKI,doc/master/classTGApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGApplication.html
Integrability,depend,dependent,"d executes a command that loads the Doxygen URL in a browser. ;  ; void OpenReferenceGuideFor (const TString &strippedClass);  It opens the online reference guide, generated with Doxygen, for the chosen scope (class/namespace/struct) or member (method/function/ data member/enumeration/enumerator. ;  ; virtual Longptr_t ProcessFile (const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE);  Process a file containing a C++ macro. ;  ; virtual Longptr_t ProcessLine (const char *line, Bool_t sync=kFALSE, Int_t *error=nullptr);  Process a single command line, either a C++ statement or an interpreter command starting with a ""."". ;  ; Bool_t QuitOpt () const;  ; virtual void Raise ();  ; virtual void RemoveIdleTimer ();  Remove idle timer. Normally called via TROOT::Idle(0). ;  ; Bool_t ReturnFromRun () const;  ; virtual void ReturnPressed (char *text);  Emit signal when return key was pressed. ;  ; virtual void Run (Bool_t retrn=kFALSE);  Main application eventloop. Calls system dependent eventloop via gSystem. ;  ; virtual void SetEchoMode (Bool_t mode);  Set console echo mode: ;  ; virtual void SetIdleTimer (UInt_t idleTimeInSec, const char *command);  Set the command to be executed after the system has been idle for idleTimeInSec seconds. ;  ; void SetReturnFromRun (Bool_t ret);  ; virtual void Show ();  ; virtual void StartIdleing ();  Called when system starts idleing. ;  ; virtual void StopIdleing ();  Called when system stops idleing. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t TabCompletionHook (char *buf, int *pLoc, std::ostream &out);  What to do when tab is pressed. ;  ; virtual void Terminate (Int_t status=0);  Terminate the application by call TSystem::Exit() unless application has been told to return from Run(), by a call to SetReturnFromRun(). ;  ; const char * WorkingDirectory () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TO",MatchSource.WIKI,doc/master/classTGApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGApplication.html
Modifiability,inherit,inherited,"ide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TGApplication Class ReferenceGUI » Low level GUI widgets. ; This class initialize the ROOT GUI toolkit. ; This class must be instantiated exactly once in any given application. ; Definition at line 21 of file TGApplication.h. Public Member Functions;  TGApplication (const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0);  Create a GUI application environment. ;  ;  ~TGApplication () override;  TGApplication dtor. ;  ; void GetOptions (Int_t *argc, char **argv) override;  Handle command line arguments. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TApplication;  TApplication (const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0);  Create an application environment. ;  ; virtual ~TApplication ();  TApplication dtor. ;  ; virtual const char * ApplicationName () const;  ; Int_t Argc () const;  ; char ** Argv () const;  ; char * Argv (Int_t index) const;  Return specified argument. ;  ; void ClearInputFiles ();  Clear list containing macro files passed as program arguments. ;  ; EExitOnException ExitOnException (EExitOnException opt=kExit);  Set the exit on exception option. ;  ; virtual TApplicationImp * GetApplicationImp ();  ; TApplication * GetAppRemote () const;  ; const char * GetIdleCommand () const;  ; TString GetSetup ();  It gets the ROOT installation setup as TString. ;  ; TSignalHandler * GetSignalHandler () const;  ; virtual void HandleException (Int_t sig);  Handle exceptions (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingException) trapped in TSystem. ;  ; virtual void Hand",MatchSource.WIKI,doc/master/classTGApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGApplication.html
Performance,load,loads,"timeout. ;  ; virtual Bool_t HandleTermInput ();  ; virtual void Hide ();  ; virtual void Iconify ();  ; virtual void Init ();  ; void InitializeGraphics (Bool_t only_web=kFALSE);  Initialize the graphics environment. ;  ; TObjArray * InputFiles () const;  ; virtual Bool_t IsCmdThread ();  ; Bool_t IsRunning () const;  ; virtual void KeyPressed (Int_t key);  Emit signal when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefilled ROOT version. ;  ; void OpenGitHubIssue (const TString &type);  It opens a GitHub issue in a web browser with prefilled ROOT version. ;  ; void OpenInBrowser (const TString &url);  The function generates and executes a command that loads the Doxygen URL in a browser. ;  ; void OpenReferenceGuideFor (const TString &strippedClass);  It opens the online reference guide, generated with Doxygen, for the chosen scope (class/namespace/struct) or member (method/function/ data member/enumeration/enumerator. ;  ; virtual Longptr_t ProcessFile (const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE);  Process a file containing a C++ macro. ;  ; virtual Longptr_t ProcessLine (const char *line, Bool_t sync=kFALSE, Int_t *error=nullptr);  Process a single command line, either a C++ statement or an interpreter command starting with a ""."". ;  ; Bool_t QuitOpt () const;  ; virtual void Raise ();  ; virtual void RemoveIdleTimer ();  Remove idle timer. Normally called via TROOT::Idle(0). ;  ; Bool_t ReturnFromRun () const;  ; virtual void ReturnPressed (char *text);  Emit signal when return key was pressed. ;  ; virtual void Run (Bool_t retrn=kFALSE);  Main application eventloop. Calls system dep",MatchSource.WIKI,doc/master/classTGApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGApplication.html
Safety,timeout,timeout,"st char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0);  Create an application environment. ;  ; virtual ~TApplication ();  TApplication dtor. ;  ; virtual const char * ApplicationName () const;  ; Int_t Argc () const;  ; char ** Argv () const;  ; char * Argv (Int_t index) const;  Return specified argument. ;  ; void ClearInputFiles ();  Clear list containing macro files passed as program arguments. ;  ; EExitOnException ExitOnException (EExitOnException opt=kExit);  Set the exit on exception option. ;  ; virtual TApplicationImp * GetApplicationImp ();  ; TApplication * GetAppRemote () const;  ; const char * GetIdleCommand () const;  ; TString GetSetup ();  It gets the ROOT installation setup as TString. ;  ; TSignalHandler * GetSignalHandler () const;  ; virtual void HandleException (Int_t sig);  Handle exceptions (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingException) trapped in TSystem. ;  ; virtual void HandleIdleTimer ();  Handle idle timeout. ;  ; virtual Bool_t HandleTermInput ();  ; virtual void Hide ();  ; virtual void Iconify ();  ; virtual void Init ();  ; void InitializeGraphics (Bool_t only_web=kFALSE);  Initialize the graphics environment. ;  ; TObjArray * InputFiles () const;  ; virtual Bool_t IsCmdThread ();  ; Bool_t IsRunning () const;  ; virtual void KeyPressed (Int_t key);  Emit signal when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefilled ROOT version. ;  ; void OpenGitHubIssue (const TString &type);  It opens a GitHub issue in a web browser with prefilled ROOT version. ;  ; void OpenInBrowser (const TString &url)",MatchSource.WIKI,doc/master/classTGApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGApplication.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGApplication.html
Usability,guid,guide,"ialize the graphics environment. ;  ; TObjArray * InputFiles () const;  ; virtual Bool_t IsCmdThread ();  ; Bool_t IsRunning () const;  ; virtual void KeyPressed (Int_t key);  Emit signal when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefilled ROOT version. ;  ; void OpenGitHubIssue (const TString &type);  It opens a GitHub issue in a web browser with prefilled ROOT version. ;  ; void OpenInBrowser (const TString &url);  The function generates and executes a command that loads the Doxygen URL in a browser. ;  ; void OpenReferenceGuideFor (const TString &strippedClass);  It opens the online reference guide, generated with Doxygen, for the chosen scope (class/namespace/struct) or member (method/function/ data member/enumeration/enumerator. ;  ; virtual Longptr_t ProcessFile (const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE);  Process a file containing a C++ macro. ;  ; virtual Longptr_t ProcessLine (const char *line, Bool_t sync=kFALSE, Int_t *error=nullptr);  Process a single command line, either a C++ statement or an interpreter command starting with a ""."". ;  ; Bool_t QuitOpt () const;  ; virtual void Raise ();  ; virtual void RemoveIdleTimer ();  Remove idle timer. Normally called via TROOT::Idle(0). ;  ; Bool_t ReturnFromRun () const;  ; virtual void ReturnPressed (char *text);  Emit signal when return key was pressed. ;  ; virtual void Run (Bool_t retrn=kFALSE);  Main application eventloop. Calls system dependent eventloop via gSystem. ;  ; virtual void SetEchoMode (Bool_t mode);  Set console echo mode: ;  ; virtual void SetIdleTimer (UInt_t idleTimeInSec, const char *command);  Set the c",MatchSource.WIKI,doc/master/classTGApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGApplication.html
Availability,error,error,"rtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTLinevirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawAxis(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax, Double_t wmin, Double_t wmax, Int_t ndiv=510, Option_t *chopt="""", Double_t gridlength=0)TGaxisvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TLinevirtual; DrawLineNDC(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TLinevirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTLinevirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fAxisTGaxisprotected; fBitsTObjectprivate; fChoptTGaxisprotected; fFunctionTGaxisprotected; fFunctionNameTGaxisprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fGridLengthTGaxisprotected; FindModLab(Int_t indx, Int_t numlabels=0, Double_t v=0., Double_t eps=-1.) constTGaxisprotected; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fLabelColorTGaxisprotected; fLabelFontTGaxisprotected; fLabelOffsetTGaxisprotected; fLabelSizeTGaxisprotected; fLineColorTAttLineprotected; fLineStyleTAttLineprotected; fLineWidthTAttLineprotected; fModLabsTGaxisprotected; fNameTGaxisprotected; fNdivTGaxisprotected; fNModLabsTGaxisprotected; fTextAlignTAttTextprotected; fTextAngleTAttTextprotected; fTextColorTAttTextprotected; fTextFontTAttT",MatchSource.WIKI,doc/master/classTGaxis-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGaxis-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TGaxis Member List. This is the complete list of members for TGaxis, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AdjustBinSize(Double_t A1, Double_t A2, Int_t nold, Double_t &BinLow, Double_t &BinHigh, Int_t &nbins, Double_t &BinWidth)TGaxisvirtual; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CenterLabels(Bool_t center=kTRUE)TGaxisvirtual; CenterTitle(Bool_t center=kTRUE)TGaxisvirtual; ChangeLabel(Int_t labNum=0, Double_t labAngle=-1., Double_t labSize=-1., Int_t labAlign=-1, Int_t labColor=-1, Int_t labFont=-1, const TString &labText="""")TGaxis; ChangeLabelAttributes(Int_t i, Int_t nlabels, TLatex *t, char *c, Double_t value=0., Double_t eps=-1.)TGaxis; ChangeLabelByValue(Double_t labValue, Double_t labAngle=-1., Double_t labSize=-1., Int_t labAlign=-1, Int_t labColor=-1, Int_t labFont=-1, const TString &labText="""")TGaxis; CheckedHash()TObjectinline; Class()TGaxisstatic; Class_Name()TGaxisstatic; Class_Version()TGaxisinlinestatic; ClassName() constTObjectvirtual; CleanupModLabs()TGaxisprotected; Clear(Option_t *="""")TObjectinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; TLine::Copy(TObject &line) const overrideTLinevirtual; TLine::TAttLine::Copy(TAttLine &attline) constTAttLine; TAttText::Copy(TAttText &atttext) constTAttText; DeclFileName()TGaxisinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTLinevirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawAxis(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax, Double_t wmi",MatchSource.WIKI,doc/master/classTGaxis-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGaxis-members.html
Availability,error,error," consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () cons",MatchSource.WIKI,doc/master/classTGaxis.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGaxis.html
Energy Efficiency,energy,energy,".; A TGaxis is defined the following way: TGaxis::TGaxis(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax,; const char *func, Int_t ndiv, Option_t *chopt,; Double_t gridlength); Where:. xmin : X origin coordinate in user's coordinates space.; xmax : X end axis coordinate in user's coordinates space.; ymin : Y origin coordinate in user's coordinates space.; ymax : Y end axis coordinate in user's coordinates space.; func : function defining axis labels and tick marks.; ndiv : Number of divisions.; ndiv=N1 + 100*N2 + 10000*N3; N1=number of 1st divisions.; N2=number of 2nd divisions.; N3=number of 3rd divisions. e.g.:; ndiv=0 --> no tick marks.; ndiv=2 --> 2 divisions, one tick mark in the middle of the axis. chopt : Drawing options (see below).; gridlength: grid length on main tick marks. It should be noted that func is not defined in the user's coordinate space, but in the new TGaxis space. If x is the original axis, w the new axis, and w = f(x) (for example, f is a calibration function converting ADC channels x to energy w), then func must be supplied as f^{-1}(w).; Examples:; {; TCanvas *c2 = new TCanvas(""c2"",""c2"",10,10,700,500);; ; gPad->DrawFrame(0.,-2.,10.,2);; ; TF1 *f1=new TF1(""f1"",""-x"",-10,10);; TGaxis *A1 = new TGaxis(0,2,10,2,""f1"",510,""-"");; A1->SetTitle(""axis with decreasing values"");; A1->Draw();; ; TF1 *f2=new TF1(""f2"",""exp(x)"",0,2);; TGaxis *A2 = new TGaxis(1,1,9,1,""f2"");; A2->SetTitle(""exponential axis"");; A2->SetLabelSize(0.03);; A2->SetTitleSize(0.03);; A2->SetTitleOffset(1.2);; A2->Draw();; ; TF1 *f3=new TF1(""f3"",""log10(x)"",1,1000);; TGaxis *A3 = new TGaxis(2,-2,2,0,""f3"",505,"""");; A3->SetTitle(""logarithmic axis"");; A3->SetLabelSize(0.02);; A3->SetTitleSize(0.03);; A3->SetTitleOffset(0.); // Axis title automatically placed; A3->Draw();; }; gPad#define gPadDefinition TVirtualPad.h:308; TF11-Dim function classDefinition TF1.h:233; TGaxisThe axis painter class.Definition TGaxis.h:24; TGaxis::SetTitleOffsetvoid SetTitleOffset(Float_t titleoffset=",MatchSource.WIKI,doc/master/classTGaxis.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGaxis.html
Integrability,message,message," consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () cons",MatchSource.WIKI,doc/master/classTGaxis.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGaxis.html
Modifiability,inherit,inherited," axis. ;  ; virtual void SetNdivisions (Int_t ndiv);  ; virtual void SetNoExponent (Bool_t noExponent=kTRUE);  Set the NoExponent flag. ;  ; void SetOption (Option_t *option="""");  To set axis options. ;  ; void SetTickLength (Float_t ticklength);  ; void SetTickSize (Float_t ticksize);  ; void SetTimeFormat (const char *tformat);  Change the format used for time plotting. ;  ; void SetTimeOffset (Double_t toffset, Option_t *option=""local"");  Change the time offset. If option = ""gmt"", set display mode to GMT. ;  ; virtual void SetTitle (const char *title="""");  Change the title of the axis. ;  ; void SetTitleColor (Int_t titlecolor);  ; void SetTitleFont (Int_t titlefont);  ; void SetTitleOffset (Float_t titleoffset=1);  ; void SetTitleSize (Float_t titlesize);  ; void SetWmax (Double_t wmax);  ; void SetWmin (Double_t wmin);  ; void Streamer (TBuffer &) override;  Stream an object of class TGaxis. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TLine;  TLine ();  ;  TLine (const TLine &line);  Line copy constructor. ;  ;  TLine (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Line normal constructor. ;  ;  ~TLine () override=default;  ; void Copy (TObject &line) const override;  Copy this line to line. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual TLine * DrawLine (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Draw this line with new coordinates. ;  ; virtual TLine * DrawLineNDC (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Draw this line with new coordinates in NDC. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; Rectangle_t GetBBox () override;  Return the bounding Box of the Line. ;  ; TPoint GetBBoxCenter () override;  Return the center of the BoundingBox as TPoint in pixels. ;  ; Double_t GetX1 () const;  ; Double_t GetX2 () const;  ; Doub",MatchSource.WIKI,doc/master/classTGaxis.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGaxis.html
Performance,optimiz,optimization,"gram axis.Definition TAxis.h:31; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37. Number of divisions optimisation; By default the number of divisions on axis is optimised to show a coherent labelling of the main tick marks. The number of division (ndiv) is a composite integer given by:; ndiv = N1 + 100*N2 + 10000*N3. N1 = number of 1st divisions.; N2 = number of 2nd divisions.; N3 = number of 3rd divisions. by default the value of N1, N2 and N3 are maximum values. After optimisation the real number of divisions will be smaller or equal to these value. If one wants to bypass the optimisation, the option ""N"" should be given when the TGaxis is created. The option ""I"" also act on the number of division as it will force an integer labelling of the axis.; On an histogram pointer h the number of divisions can be set in different ways:. Directly on the histogram. The following will set the number of division to 510 on the X axis of h. To avoid optimization the number of divisions should be negative (ie: -510); h->SetNdivisions(510, ""X"");. On the axis itself: h->GetXaxis()->SetNdivisions(510, kTRUE);; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93. The first parameter is the number of division. If it is negative of if the second parameter is kFALSE then the number of divisions is not optimised. And other signature is also allowed: h->GetXaxis()->SetNdivisions(10, 5, 0, kTRUE);; . Maximum Number of Digits for the axis labels; The static method TGaxis::SetMaxDigits sets the maximum number of digits permitted for the axis labels above which the notation with 10^N is used. For example, to accept 6 digits number like 900000 on an axis call TGaxis::SetMaxDigits(6). The default value is 5. fgMaxDigits must be greater than 0. Warning: even when called on a particular TGaxis* instance, this static function changes globally the number of digits for all axes (X, Y, ...) in the canvas. If you want to change the maximum number of digits N only of the current TGaxis*, and no",MatchSource.WIKI,doc/master/classTGaxis.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGaxis.html
Safety,avoid,avoid,"enerates various kind of axis.; ; void gaxis(){; auto c1 = new TCanvas(""c1"",""Examples of TGaxis"",10,10,700,500);; c1->Range(-10,-1,10,1);; ; auto axis1 = new TGaxis(-4.5,-0.2,5.5,-0.2,-6,8,510,"""");; axis1->Draw();; ; auto axis2 = new TGaxis(-4.5,0.2,5.5,0.2,0.001,10000,510,""G"");; axis2->Draw();; ; auto axis3 = new TGaxis(-9,-0.8,-9,0.8,-8,8,50510,"""");; axis3->SetTitle(""axis3"");; axis3->SetTitleOffset(0.5);; axis3->Draw();; ; auto axis4 = new TGaxis(-7,-0.8,-7,0.8,1,10000,50510,""G"");; axis4->SetTitle(""axis4"");; axis4->Draw();; ; auto axis5 = new TGaxis(-4.5,-0.6,5.5,-0.6,1.2,1.32,80506,""-+"");; axis5->SetLabelSize(0.03);; axis5->SetTextFont(72);; axis5->Draw();; ; auto axis6 = new TGaxis(-4.5,0.5,5.5,0.5,100,900,50510,""-"");; axis6->Draw();; ; auto axis7 = new TGaxis(-5.5,0.85,5.5,0.85,0,4.3e-6,510,"""");; axis7->Draw();; ; auto axis8 = new TGaxis(8,-0.8,8,0.8,0,9000,50510,""+L"");; axis8->Draw();; ; // One can make a vertical axis going top->bottom. However the two x values should be; // slightly different to avoid labels overlapping.; auto axis9 = new TGaxis(6.5,0.8,6.499,-0.8,0,90,50510,""-"");; axis9->Draw();; }; TCanvasThe Canvas class.Definition TCanvas.h:23; c1return c1Definition legend1.C:41; . Definition with a function; Instead of the wmin,wmax arguments of the normal definition, the name of a TF1 function can be specified. This function will be used to map the user coordinates to the axis values and ticks.; A TGaxis is defined the following way: TGaxis::TGaxis(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax,; const char *func, Int_t ndiv, Option_t *chopt,; Double_t gridlength); Where:. xmin : X origin coordinate in user's coordinates space.; xmax : X end axis coordinate in user's coordinates space.; ymin : Y origin coordinate in user's coordinates space.; ymax : Y end axis coordinate in user's coordinates space.; func : function defining axis labels and tick marks.; ndiv : Number of divisions.; ndiv=N1 + 100*N2 + 10000*N3; N1=number of 1st divisions.; N2",MatchSource.WIKI,doc/master/classTGaxis.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGaxis.html
Security,access,accessor,"extColor(kBlue+2);; ; TLatex tex2;; tex2.SetNDC();; tex2.SetTextFont(102);; tex2.SetTextSize(0.07*f);; tex2.SetTextColor(kOrange+3);; ; time_t offset[] = {0, 0, 1325376000, 1341100800};; time_t t[] = {1331150400, 1336417200, 0, 36000};; ; c->SetTopMargin(0); c->SetBottomMargin(0);; c->SetLeftMargin(0); c->SetRightMargin(0);; c->Divide(2, 4, -1, -1);; TLine l;; l.DrawLine(0.5, 0, 0.5, 1.);; ; for(int i = 0; i < 4; ++i){; for(int gmt = 0; gmt < 2; ++gmt){; const char* opt = (gmt ? ""gmt"" : ""local"");; TVirtualPad* p = c->cd(2*i + gmt + 1);; p->SetTopMargin(0); p->SetBottomMargin(0);; p->SetLeftMargin(0); p->SetRightMargin(0);; p->SetFillStyle(4000);; ; TGaxis* ga = new TGaxis (.4, .25, 5., .25, t[i], t[i] + 1, 1, ""t"");; ga->SetTimeFormat(""TGaxis label: #color[2]{%Y-%m-%d %H:%M:%S}"");; ga->SetLabelFont(102);; ga->SetLabelColor(kBlue+2);; ; ga->SetTimeOffset(offset[i], opt);; ga->SetLabelOffset(0.04*f);; ga->SetLabelSize(0.07*f);; ga->SetLineColor(0);; ga->Draw();; ; // Get offset string of axis time format: there is not accessor; // to time format in TGaxis.; // Assumes TAxis use the same format.; TAxis a(10, 0, 1600000000);; a.SetTimeOffset(offset[i], opt);; const char* offsettimeformat = a.GetTimeFormat();; ; char buf[256];; if (offset[i] < t[i]) {; snprintf(buf, 256, ""#splitline{%s, %s}{offset: %ld, option %s}"",; stime(t+i).Data(), stime(t+i, true).Data(), offset[i], opt);; } else {; int h = t[i] / 3600;; int m = (t[i] - 3600 * h) / 60 ;; int s = (t[i] - h * 3600 - m * 60);; snprintf(buf, 256, ""#splitline{%d h %d m %d s}{offset: %s, option %s}"",; h, m, s, stime(offset + i, gmt).Data(), opt);; }; tex1.DrawLatex(.01, .75, buf);; tex2.DrawLatex(.01, .50, offsettimeformat);; time_t t_ = t[i] + offset[i];; snprintf(buf, 256, ""Expecting: #color[2]{%s}"", stime(&t_, gmt, false).Data());; tex3.DrawLatex(.01, .24, buf);; if(i > 0) l.DrawLine(0, 0.95, 1, 0.95);; }; }; }; kOrange@ kOrangeDefinition Rtypes.h:67; TAxis.h; TCanvas.h; pwinID h TVirtualViewer3D TVirtualGLPainter pDefi",MatchSource.WIKI,doc/master/classTGaxis.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGaxis.html
Testability,log,logarithmic,"r of 3rd divisions. e.g.:; ndiv=0 --> no tick marks.; ndiv=2 --> 2 divisions, one tick mark in the middle of the axis. chopt : Drawing options (see below).; gridlength: grid length on main tick marks. It should be noted that func is not defined in the user's coordinate space, but in the new TGaxis space. If x is the original axis, w the new axis, and w = f(x) (for example, f is a calibration function converting ADC channels x to energy w), then func must be supplied as f^{-1}(w).; Examples:; {; TCanvas *c2 = new TCanvas(""c2"",""c2"",10,10,700,500);; ; gPad->DrawFrame(0.,-2.,10.,2);; ; TF1 *f1=new TF1(""f1"",""-x"",-10,10);; TGaxis *A1 = new TGaxis(0,2,10,2,""f1"",510,""-"");; A1->SetTitle(""axis with decreasing values"");; A1->Draw();; ; TF1 *f2=new TF1(""f2"",""exp(x)"",0,2);; TGaxis *A2 = new TGaxis(1,1,9,1,""f2"");; A2->SetTitle(""exponential axis"");; A2->SetLabelSize(0.03);; A2->SetTitleSize(0.03);; A2->SetTitleOffset(1.2);; A2->Draw();; ; TF1 *f3=new TF1(""f3"",""log10(x)"",1,1000);; TGaxis *A3 = new TGaxis(2,-2,2,0,""f3"",505,"""");; A3->SetTitle(""logarithmic axis"");; A3->SetLabelSize(0.02);; A3->SetTitleSize(0.03);; A3->SetTitleOffset(0.); // Axis title automatically placed; A3->Draw();; }; gPad#define gPadDefinition TVirtualPad.h:308; TF11-Dim function classDefinition TF1.h:233; TGaxisThe axis painter class.Definition TGaxis.h:24; TGaxis::SetTitleOffsetvoid SetTitleOffset(Float_t titleoffset=1)Definition TGaxis.h:128; TGaxis::SetTitleSizevoid SetTitleSize(Float_t titlesize)Definition TGaxis.h:129; TGaxis::SetTitlevirtual void SetTitle(const char *title="""")Change the title of the axis.Definition TGaxis.cxx:2942; TGaxis::SetLabelSizevoid SetLabelSize(Float_t labelsize)Definition TGaxis.h:107; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; f1TF1 * f1Definition legend1.C:11; c2return c2Definition legend2.C:14. Note that this functionality has some limitations and does not follow all the TGaxis setting. In particular the nu",MatchSource.WIKI,doc/master/classTGaxis.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGaxis.html
Usability,simpl,simple,"t_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h offsetDefinition TGWin32VirtualXProxy.cxx:245; TGaxis.h; TLatex.h; TLine.h; TString.h; snprintf#define snprintfDefinition civetweb.c:1540; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TGaxis::SetLabelFontvoid SetLabelFont(Int_t labelfont)Definition TGaxis.h:105; TGaxis::SetLabelColorvoid SetLabelColor(Int_t labelcolor)Definition TGaxis.h:104; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLatex::DrawLatexTLatex * DrawLatex(Double_t x, Double_t y, const char *text)Make a copy of this object with the new parameters And copy object attributes.Definition TLatex.cxx:1943; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TLine::DrawLinevirtual TLine * DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)Draw this line with new coordinates.Definition TLine.cxx:103; TStringBasic string class.Definition TString.h:139; TText::SetNDCvirtual void SetNDC(Bool_t isNDC=kTRUE)Set NDC mode on if isNDC = kTRUE, off otherwise.Definition TText.cxx:823; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4; ttauto * ttDefinition textangle.C:16; . The following macro illustrates the use, with histograms axis, of the time mode on the axis with different time intervals and time formats.; ; #include <time.h>; ; void timeonaxis(); {; ; time_t script_time;; script_time = time(0);; script_time = 3600*(int)(script_time/3600);; ; // The time offset is the one that will be used by all graphs.; // If one changes it, it will be changed even on th",MatchSource.WIKI,doc/master/classTGaxis.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGaxis.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGButton.html
Integrability,message,message,"this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual UInt_t GetDefaultHeight () const;  ; virtual TGDimension GetDefaultSize () const;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; virtual UInt_t GetDefaultWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; virtual TGFrame * GetFrameFromPoint (Int_t x, Int_t y);  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; virtual Bool_t HandleDoubleClick (Event_t *);  ; virtual Bool_t HandleDragDrop (TGFrame *, Int_t, Int_t, TGLayoutHints *);  ; virtual Bool_t HandleDragEnter (TGFrame *);  ; virtual Bool_t HandleDragLeave (TGFrame *);  ; virtual Bool_t HandleDragMotion (TGFrame *);  ; Bool_t HandleEvent (Event_t *event) override;  Handle all frame events.",MatchSource.WIKI,doc/master/classTGButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGButton.html
Modifiability,inherit,inherited,"t stream out. ;  ; virtual void SetDown (Bool_t on=kTRUE, Bool_t emit=kFALSE);  ; virtual void SetEnabled (Bool_t e=kTRUE);  Set enabled or disabled state of button. ;  ; virtual void SetGroup (TGButtonGroup *gr);  Sets new button-group for this button. ;  ; virtual void SetOn (Bool_t on=kTRUE, Bool_t emit=kFALSE);  ; virtual void SetState (EButtonState state, Bool_t emit=kFALSE);  Set button state. ;  ; virtual void SetStyle (const char *style);  Set the button style (modern or classic). ;  ; virtual void SetStyle (UInt_t newstyle);  Set the button style (modern or classic). ;  ; virtual void SetToolTipText (const char *text, Long_t delayms=400);  Set tool tip text associated with this button. ;  ; virtual void SetUserData (void *userData);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Toggle (Bool_t emit=kFALSE);  ; virtual void Toggled (Bool_t on);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (UInt_t options);  Change frame options. Options is an OR of the EFrameTypes. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; virtual void DeleteWindow ();  Delete window. ;  ; virtual void DrawBorder ();  Draw frame border. ;  ; void DrawClass () const override;  Draw class inheritance tree of ",MatchSource.WIKI,doc/master/classTGButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGButton.html
Security,hash,hash,"pped on screen, kFALSE otherwise. ;  ; virtual Bool_t IsMapSubwindows () const;  ; virtual void LowerWindow ();  lower window ;  ; virtual Int_t MustCleanup () const;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetEditDisabled (UInt_t on=kEditDisable);  ; virtual void SetMapSubwindows (Bool_t);  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGButton.html
Availability,down,down,"ructor. A TGButtonGroup can display a frame and a title because it inherits from TGGroupFrame.; Example:; // vertical frame without border and title; TGVButtonGroup *bg = new TGVButtonGroup(main_frame);; ; // create text button with id=1; TGTextButton *button1 = new TGTextButton(bg,""some text"");; ; // create another text button with id=2; TGTextButton *button2 = new TGTextButton(bg,""another text"");; ; // map all buttons; bg->Show();; TGButtonGroup::Showvirtual void Show()Show group of buttons.Definition TGButtonGroup.cxx:549; TGTextButtonYield an action as soon as it is clicked.Definition TGButton.h:142; TGVButtonGroupOrganizes TGButton widgets in a group with one vertical column.Definition TGButtonGroup.h:94; NOTE: there is no need to call AddFrame() since the buttons are automatically added with a default layout hint to their parent, i.e. the buttongroup. To override the default layout hints use the SetLayoutHints() method.; ButtonGroup Signals:. Pressed(Int_t id) --> is emitted when a button in the group is pressed down. The id argument is the button's identifier.; Released(Int_t id) --> is emitted when a button in the group is released. The id argument is the button's identifier.; Clicked(Int_t id) --> is emitted when a button in the group is clicked. The id argument is the button's identifier. . Definition at line 21 of file TGButtonGroup.h. Public Member Functions;  TGButtonGroup (const TGWindow *parent, UInt_t r, UInt_t c, Int_t s=0, Int_t h=0, const TString &title="""", GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), Pixel_t back=GetDefaultFrameBackground());  Constructor. ;  ;  TGButtonGroup (const TGWindow *parent=nullptr, const TString &title="""", UInt_t options=kChildFrame|kVerticalFrame, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), Pixel_t back=GetDefaultFrameBackground());  Constructor. Layout 1 row or 1 column. ;  ;  ~TGButtonGroup () override;  Destructor, we do not delete the buttons. ;  ; virtu",MatchSource.WIKI,doc/master/classTGButtonGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGButtonGroup.html
Deployability,toggle,toggle,". ROOT: TGButtonGroup Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TGButtonGroup Class ReferenceGUI » Low level GUI widgets. ; Organizes TGButton widgets in a group. ; A button group widget makes it easier to deal with groups of buttons. A button in a button group is associated with a unique identifier. The button group emits a Clicked() signal with this identifier when the button is clicked. Thus, a button group is an ideal solution when you have several similar buttons and want to connect all their Clicked() signals, for example, to one slot.; An exclusive button group switches off all toggle buttons except the one that was clicked. A button group is by default non-exclusive. All radio buttons that are inserted, will be mutually exclusive even if the button group is non-exclusive.; There are two ways of using a button group:; The button group is a parent widget of a number of buttons, i.e. the button group is the parent argument in the button constructor. The buttons are assigned identifiers 1, 2, 3 etc. in the order they are created or you can specify button id in the button constructor. A TGButtonGroup can display a frame and a title because it inherits from TGGroupFrame.; Example:; // vertical frame without border and title; TGVButtonGroup *bg = new TGVButtonGroup(main_frame);; ; // create text button with id=1; TGTextButton *button1 = new TGTextButton(bg,""some text"");; ; // create another text button with id=2; TGTextButton *button2 = new TGTextButton(bg,""another text"");; ; // map all buttons; bg->Show();; TGButtonGroup::Showvirtual void Show()Show group of buttons.Definition TGButtonGroup.cxx:549; TGTextButtonYield an action as soon as it is clicked.Definition TGButton.h:142; TGVButtonGroupOrganizes TGButton widg",MatchSource.WIKI,doc/master/classTGButtonGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGButtonGroup.html
Integrability,message,message,"oid DeleteWindow ();  Delete window. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; Bool_t HandleEvent (Event_t *event) override;  Handle all frame events. ;  ; virtual Bool_t HandleSelectionClear (Event_t *);  ; virtual Bool_t HandleSelectionRequest (Event_t *);  ; void Inspect () const override;  Dump contents of this object in a graphics canvas. ;  ; virtual Bool_t IsActive () const;  ; Bool_t IsDNDSource () const;  ; Bool_t IsDNDTarget () const;",MatchSource.WIKI,doc/master/classTGButtonGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGButtonGroup.html
Modifiability,inherit,inherits,"ets in a group. ; A button group widget makes it easier to deal with groups of buttons. A button in a button group is associated with a unique identifier. The button group emits a Clicked() signal with this identifier when the button is clicked. Thus, a button group is an ideal solution when you have several similar buttons and want to connect all their Clicked() signals, for example, to one slot.; An exclusive button group switches off all toggle buttons except the one that was clicked. A button group is by default non-exclusive. All radio buttons that are inserted, will be mutually exclusive even if the button group is non-exclusive.; There are two ways of using a button group:; The button group is a parent widget of a number of buttons, i.e. the button group is the parent argument in the button constructor. The buttons are assigned identifiers 1, 2, 3 etc. in the order they are created or you can specify button id in the button constructor. A TGButtonGroup can display a frame and a title because it inherits from TGGroupFrame.; Example:; // vertical frame without border and title; TGVButtonGroup *bg = new TGVButtonGroup(main_frame);; ; // create text button with id=1; TGTextButton *button1 = new TGTextButton(bg,""some text"");; ; // create another text button with id=2; TGTextButton *button2 = new TGTextButton(bg,""another text"");; ; // map all buttons; bg->Show();; TGButtonGroup::Showvirtual void Show()Show group of buttons.Definition TGButtonGroup.cxx:549; TGTextButtonYield an action as soon as it is clicked.Definition TGButton.h:142; TGVButtonGroupOrganizes TGButton widgets in a group with one vertical column.Definition TGButtonGroup.h:94; NOTE: there is no need to call AddFrame() since the buttons are automatically added with a default layout hint to their parent, i.e. the buttongroup. To override the default layout hints use the SetLayoutHints() method.; ButtonGroup Signals:. Pressed(Int_t id) --> is emitted when a button in the group is pressed down. The id argu",MatchSource.WIKI,doc/master/classTGButtonGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGButtonGroup.html
Security,hash,hash,"n response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; TClass * IsA () const override;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGButtonGroup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGButtonGroup.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCanvas.html
Integrability,message,message,"GCanvas () override;  Delete canvas. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Adding a frame to a canvas is actually adding the frame to the viewport container. ;  ; virtual void ClearViewPort ();  Clear view port and redraw content. ;  ; void DrawBorder () override;  Draw canvas border. ;  ; TGFrame * GetContainer () const;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; virtual Int_t GetHsbPosition () const;  Get position of horizontal scrollbar. ;  ; TGHScrollBar * GetHScrollbar () const;  ; Int_t GetScrolling () const;  ; TGViewPort * GetViewPort () const;  ; virtual Int_t GetVsbPosition () const;  Get position of vertical scrollbar. ;  ; TGVScrollBar * GetVScrollbar () const;  ; TClass * IsA () const override;  ; void Layout () override;  Create layout for canvas. ;  ; void MapSubwindows () override;  Map all canvas sub windows. ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Handle message generated by the canvas scrollbars. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a canvas widget as a C++ statement(s) on output stream out. ;  ; virtual void SetContainer (TGFrame *f);  ; virtual void SetHsbPosition (Int_t newPos);  Set position of horizontal scrollbar. ;  ; void SetScrolling (Int_t scrolling);  Set scrolling policy. ;  ; virtual void SetVsbPosition (Int_t newPos);  Set position of vertical scrollbar. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ",MatchSource.WIKI,doc/master/classTGCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCanvas.html
Modifiability,inherit,inherited,". ROOT: TGCanvas Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGCanvas Class ReferenceGUI » Low level GUI widgets. ; A frame containing two scrollbars (a horizontal and a vertical) and a viewport. ; The viewport acts as the window through which we look at the contents of the container frame. ; Definition at line 192 of file TGCanvas.h. Public Types; enum  { kCanvasNoScroll = 0; , kCanvasScrollHorizontal = (1ULL << ( 0 )); , kCanvasScrollVertical = (1ULL << ( 1 )); , kCanvasScrollBoth = (kCanvasScrollHorizontal | kCanvasScrollVertical); };  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGCanvas (const TGWindow *p=nullptr, UInt_t w=1, UInt_t",MatchSource.WIKI,doc/master/classTGCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCanvas.html
Security,hash,hash,"pped on screen, kFALSE otherwise. ;  ; virtual Bool_t IsMapSubwindows () const;  ; virtual void LowerWindow ();  lower window ;  ; virtual Int_t MustCleanup () const;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetEditDisabled (UInt_t on=kEditDisable);  ; virtual void SetMapSubwindows (Bool_t);  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCanvas.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGCheckButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCheckButton.html
Integrability,message,message,". ROOT: TGCheckButton Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGCheckButton Class ReferenceGUI » Low level GUI widgets. ; Selects different options. ; Like text buttons, they have text or hot string as a label.; Selecting a check button will generate the event:; kC_COMMAND, kCM_CHECKBUTTON, button id, user data. If a command string has been specified (via SetCommand()) then this command string will be executed via the interpreter whenever a button is selected. A command string can contain the macros:. $MSG – kC_COMMAND, kCMCHECKBUTTON packed message (use GET_MSG() and GET_SUBMSG() to unpack); $PARM1 – button id; $PARM2 – user data pointer. Before executing these macros are expanded into the respective Long_t's ; Definition at line 264 of file TGButton.h. Public Member Functions;  TGCheckButton (const TGWindow *p, const char *s, const char *cmd, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a check button widget. ;  ;  TGCheckButton (const TGWindow *p, TGHotString *s, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a check button widget. ;  ;  TGCheckButton (const TGWindow *p=nullptr, const char *s=nullptr, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a check button widget. ;  ;  ~TGCheckButton () override;  Delete a check button. ;  ; TGDimension GetDefaultSize () const override;  default size ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event. ;  ; Bool_t HandleCrossing (Event_t *event) override;  Handle mouse crossing event. ;  ; Bool_t HandleKey (Event_t *event) ",MatchSource.WIKI,doc/master/classTGCheckButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCheckButton.html
Modifiability,inherit,inherited,"t_t *event) override;  Handle mouse crossing event. ;  ; Bool_t HandleKey (Event_t *event) override;  Handle key event. This function will be called when the hotkey is hit. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsDisabledAndSelected () const;  ; Bool_t IsDown () const override;  ; Bool_t IsOn () const override;  ; Bool_t IsToggleButton () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a check button widget as a C++ statement(s) on output stream out. ;  ; virtual void SetDisabledAndSelected (Bool_t);  Set the state of a check button to disabled and either on or off. ;  ; void SetState (EButtonState state, Bool_t emit=kFALSE) override;  Set check button state. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTextButton;  TGTextButton (const TGWindow *p, const char *s, const char *cmd, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=kRaisedFrame|kDoubleBorder);  Create a text button widget and set cmd string at same time. ;  ;  TGTextButton (const TGWindow *p, TGHotString *s, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=kRaisedFrame|kDoubleBorder);  Create a text button widget. ;  ;  TGTextButton (const TGWindow *p=nullptr, const char *s=nullptr, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=kRaisedFrame|kDoubleBorder);  Create a text button widget. ;  ;  ~TGTextButton () override;  Delete a text button widget. ;  ; void ChangeText (const char *title);  ; Int_t GetBottomMargin () const;  ; TGDimension GetDefaultSize () const override;  returns default size ;  ; FontStruct_t GetFontStruct () const;  ; Int_t GetLeftMargin () const;  ; Int_t GetRightMargin () const;  ; TString GetString () const;  ; cons",MatchSource.WIKI,doc/master/classTGCheckButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCheckButton.html
Security,hash,hash,"pped on screen, kFALSE otherwise. ;  ; virtual Bool_t IsMapSubwindows () const;  ; virtual void LowerWindow ();  lower window ;  ; virtual Int_t MustCleanup () const;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetEditDisabled (UInt_t on=kEditDisable);  ; virtual void SetMapSubwindows (Bool_t);  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGCheckButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCheckButton.html
Availability,down,down,". ROOT: TGClient Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TGClient Class ReferenceGUI » Low level GUI widgets. ; Window client. ; In client server windowing systems, like X11 this class is used to make the initial connection to the window server. ; Definition at line 37 of file TGClient.h. Public Member Functions;  TGClient (const char *dpyName=nullptr);  Create a connection with the display sever on host dpyName and setup the complete GUI system, i.e., graphics contexts, fonts, etc. ;  ;  ~TGClient () override;  Closing down client: cleanup and close X connection. ;  ; void AddIdleHandler (TGIdleHandler *h);  Add handler for idle events. ;  ; void AddUnknownWindowHandler (TGUnknownWindowHandler *h);  Add handler for unknown (i.e. unregistered) windows. ;  ; void CancelRedraw (TGWindow *w);  ; void ForceRedraw ();  ; void FreeColor (Pixel_t color) const;  Free color. ;  ; void FreeFont (const TGFont *font);  Free a font. ;  ; void FreeGC (const TGGC *gc);  Free a graphics context. ;  ; void FreeGC (GContext_t gc);  Free a graphics context. ;  ; void FreePicture (const TGPicture *pic);  Free picture resource. ;  ; Bool_t GetColorByName (const char *name, Pixel_t &pixel) const;  Get a color by name. ;  ; Colormap_t GetDefaultColormap () const;  ; const TGWindow * GetDefaultRoot () const;  Returns the root (i.e. ;  ; UInt_t GetDisplayHeight () const;  Get display height. ;  ; UInt_t GetDisplayWidth () const;  Get display width. ;  ; TGFont * GetFont (const char *font, Bool_t fixedDefault=kTRUE);  Get a font from the font pool. ;  ; TGFont * GetFont (const TGFont *font);  Get again specified font. Will increase its usage count. ;  ; FontStruct_t GetFontByName (const char *name, Bool_t fixedDefault=kTRUE) const;  Get a font by name. ;  ; TGFontPool",MatchSource.WIKI,doc/master/classTGClient.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGClient.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGClient.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGClient.html
Modifiability,inherit,inherited," ; void RemoveUnknownWindowHandler (TGUnknownWindowHandler *h);  Remove handler for unknown (i.e. unregistered) windows. ;  ; void ResetWaitFor (TGWindow *w);  reset waiting ;  ; void SetEditDisabled (Bool_t on=kTRUE);  If on is kTRUE editting/guibuilding is forbidden. ;  ; void SetRoot (TGWindow *root=nullptr);  Sets the current root (i.e. ;  ; void SetStyle (const char *style);  Set the button style (modern or classic). ;  ; void SetStyle (UInt_t newstyle);  ; void SetWaitForWindow (Window_t wid);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UnregisterPopup (TGWindow *w);  Remove a popup menu from the list of popups. ;  ; void UnregisterWindow (TGWindow *w);  Remove a TGWindow from the list of windows. ;  ; void WaitFor (TGWindow *w);  Wait for window to be destroyed. ;  ; void WaitForUnmap (TGWindow *w);  Wait for window to be unmapped. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classTGClient.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGClient.html
Performance,queue,queue,"owHandler * ; h). Add handler for unknown (i.e. unregistered) windows. ; Definition at line 552 of file TGClient.cxx. ◆ CancelRedraw(). void TGClient::CancelRedraw ; (; TGWindow * ; w). Definition at line 386 of file TGClient.cxx. ◆ Class(). static TClass * TGClient::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGClient::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGClient::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 153 of file TGClient.h. ◆ DeclFileName(). static const char * TGClient::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 153 of file TGClient.h. ◆ DoRedraw(). Bool_t TGClient::DoRedraw ; (; ). protected . Redraw all windows that need redrawing. ; Returns kFALSE if no redraw was needed, kTRUE otherwise. Only redraw the application's windows when the event queue does not contain expose event anymore. ; Definition at line 795 of file TGClient.cxx. ◆ ForceRedraw(). void TGClient::ForceRedraw ; (; ). inline . Definition at line 98 of file TGClient.h. ◆ FreeColor(). void TGClient::FreeColor ; (; Pixel_t ; color); const. Free color. ; Definition at line 504 of file TGClient.cxx. ◆ FreeFont(). void TGClient::FreeFont ; (; const TGFont * ; font). Free a font. ; Definition at line 364 of file TGClient.cxx. ◆ FreeGC() [1/2]. void TGClient::FreeGC ; (; const TGGC * ; gc). Free a graphics context. ; Definition at line 328 of file TGClient.cxx. ◆ FreeGC() [2/2]. void TGClient::FreeGC ; (; GContext_t ; gc). Free a graphics context. ; Definition at line 336 of file TGClient.cxx. ◆ FreePicture(). void TGClient::FreePicture ; (; const TGPicture * ; pic). Free picture resource. ; Definition at line 308 of file TGClient.cxx. ◆ GetColorByName(). Bool_t TGClient::GetColorByName ; (; const char * ; name, . Pixel_t & ; pixel . ); const. Get a color by na",MatchSource.WIKI,doc/master/classTGClient.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGClient.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGClient.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGClient.html
Availability,mask,mask,"e TGCocoa.h. Public Member Functions;  TGCocoa ();  ;  TGCocoa (const char *name, const char *title);  ;  ~TGCocoa () override;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) override;  Registers a pixmap created by TGLManager as a ROOT pixmap. ;  ; Int_t AddWindow (ULong_t qwid, UInt_t w, UInt_t h) override;  Registers a window created by Qt as a ROOT window. ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Allocates a read-only colormap entry corresponding to the closest RGB value supported by the hardware. ;  ; void Bell (Int_t percent) override;  Sets the sound bell. Percent is loudness from -100% to 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the specified dynamic parameters if the pointer is actively grabbed by the client and if the specified time is no earlier than the last-pointer-grab time and no later than the current X server time. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Changes the components specified by the mask in gval for the specified GC. ;  ; void ChangeProperties (Window_t wid, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeProperty (Window_t wid, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAttributes (Window_t wid, SetWindowAttributes_t *attr) override;  Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ;  ; Bool_t CheckEvent (Window_t wid, EGEventType type, Event_t &ev) override;  Check if there is for window ""id"" an event of type ""type"". ;  ; void ClearArea (Window_t wid, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Paints a rectangular area in the specified window ""id"" a",MatchSource.WIKI,doc/master/classTGCocoa.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCocoa.html
Deployability,update,updated,"wID) override;  Makes context ctx current OpenGL context. ;  ; void MapRaised (Window_t wid) override;  Maps the window ""id"" and all of its subwindows that have had map requests on the screen and put this window on the top of of the stack of all windows. ;  ; void MapSubwindows (Window_t wid) override;  Maps all subwindows for the specified window ""id"" in top-to-bottom stacking order. ;  ; void MapWindow (Window_t wid) override;  Maps the window ""id"" and all of its subwindows that have had map requests. ;  ; void MoveResizeWindow (Window_t wid, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Changes the size and location of the specified window ""id"" without raising it. ;  ; void MoveWindow (Int_t wid, Int_t x, Int_t y) override;  Moves the window ""wid"" to the specified x and y coordinates. ;  ; void MoveWindow (Window_t wid, Int_t x, Int_t y) override;  Moves the specified window to the specified x and y coordinates. ;  ; Bool_t NeedRedraw (ULong_t tgwindow, Bool_t force) override;  Notify the low level GUI layer ROOT requires ""tgwindow"" to be updated. ;  ; void NextEvent (Event_t &event) override;  The ""event"" is set to default event. ;  ; Int_t OpenDisplay (const char *displayName) override;  Opens connection to display server (if such a thing exist on the current platform). ;  ; Int_t OpenPixmap (UInt_t w, UInt_t h) override;  Creates a pixmap of the width ""w"" and height ""h"" you specified. ;  ; Bool_t ParseColor (Colormap_t cmap, const char *cname, ColorStruct_t &color) override;  Looks up the string name of a color ""cname"" with respect to the screen associated with the specified colormap. ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns kTRUE if the point [x, y] is contained in the region reg. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Returns a region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t wid, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, In",MatchSource.WIKI,doc/master/classTGCocoa.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCocoa.html
Energy Efficiency,allocate,allocated,"t TGCocoa & ; rhs). private . Member Function Documentation. ◆ AddPixmap(). Int_t TGCocoa::AddPixmap ; (; ULong_t ; pixid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Registers a pixmap created by TGLManager as a ROOT pixmap. ; Parameters. [in]pixidpixmap identifier ; [in]w,hthe width and height, which define the pixmap size . Reimplemented from TVirtualX.; Definition at line 2549 of file TGCocoa.mm. ◆ AddWindow(). Int_t TGCocoa::AddWindow ; (; ULong_t ; qwid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Registers a window created by Qt as a ROOT window. ; Parameters. [in]qwidwindow identifier ; [in]w,hthe width and height, which define the window size . Reimplemented from TVirtualX.; Definition at line 846 of file TGCocoa.mm. ◆ AllocColor(). Bool_t TGCocoa::AllocColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Allocates a read-only colormap entry corresponding to the closest RGB value supported by the hardware. ; If no cell could be allocated it returns kFALSE, otherwise kTRUE.; The pixel value is set to default. Let system think we could allocate color.; Parameters. [in]cmapthe colormap ; [in]colorspecifies and returns the values actually used in the cmap . Reimplemented from TVirtualX.; Definition at line 2917 of file TGCocoa.mm. ◆ Bell(). void TGCocoa::Bell ; (; Int_t ; percent). overridevirtual . Sets the sound bell. Percent is loudness from -100% to 100%. ; Reimplemented from TVirtualX.; Definition at line 4264 of file TGCocoa.mm. ◆ ChangeActivePointerGrab(). void TGCocoa::ChangeActivePointerGrab ; (; Window_t ; , . UInt_t ; , . Cursor_t ;  . ). overridevirtual . Changes the specified dynamic parameters if the pointer is actively grabbed by the client and if the specified time is no earlier than the last-pointer-grab time and no later than the current X server time. ; Reimplemented from TVirtualX.; Definition at line 2699 of file TGCocoa.mm. ◆ ChangeGC(). void TGCocoa::ChangeGC ; (; GContext_t ; gc, . GCValues_t * ; gva",MatchSource.WIKI,doc/master/classTGCocoa.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCocoa.html
Integrability,interface,interface,". ROOT: TGCocoa Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TGCocoa Class ReferenceGraphics » Graphics' Backends » Cocoa backend. ; This class implements TVirtualX interface for MacOS X, using Cocoa and Quartz 2D. ; TVirtualX is a typical fat interface, it's a ""C++ wrapper"" for X11 library. It's a union of several orthogonal interfaces like: color management, window management, pixmap management, cursors, events, images, drag and drop, font management, gui-rendering, non-gui graphics, etc. etc. ; Definition at line 58 of file TGCocoa.h. Public Member Functions;  TGCocoa ();  ;  TGCocoa (const char *name, const char *title);  ;  ~TGCocoa () override;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) override;  Registers a pixmap created by TGLManager as a ROOT pixmap. ;  ; Int_t AddWindow (ULong_t qwid, UInt_t w, UInt_t h) override;  Registers a window created by Qt as a ROOT window. ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Allocates a read-only colormap entry corresponding to the closest RGB value supported by the hardware. ;  ; void Bell (Int_t percent) override;  Sets the sound bell. Percent is loudness from -100% to 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the specified dynamic parameters if the pointer is actively grabbed by the client and if the specified time is no earlier than the last-pointer-grab time and no later than the current X server time. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Changes the components specified by the mask in gval for the specified GC. ;  ; void ChangeProperties (Window_t wid, Atom_t property, Atom_t type, Int_t format, UChar",MatchSource.WIKI,doc/master/classTGCocoa.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCocoa.html
Modifiability,inherit,inherited,"on_t result) override;  Computes the union of two regions. ;  ; void UnmapWindow (Window_t wid) override;  Unmaps the specified window ""id"". ;  ; void Update (Int_t mode) override;  Flushes (mode = 0, default) or synchronizes (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Updates or synchronises client and server once (not permanent). ;  ; void Warp (Int_t ix, Int_t iy, Window_t wid) override;  Sets the pointer position. ;  ; void WMDeleteNotify (Window_t wid) override;  Tells WM to send message when window is closed via WM. ;  ; Int_t WriteGIF (char *name) override;  Writes the current window into GIF file. ;  ; void WritePixmap (Int_t wid, UInt_t w, UInt_t h, char *pxname) override;  Writes the pixmap ""wid"" in the bitmap file ""pxname"". ;  ; void XorRegion (Region_t rega, Region_t regb, Region_t result) override;  Calculates the difference between the union and intersection of two regions. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void DispatchClientMessage (UInt_t messageID);  Force processing of event, sent by SendEvent before. ;  ; virtual void DrawBox (Int_t x1, Int_t y1, Int_t x2, Int_t y2, EBoxMode mode);  Draws a box between [x1,y1] and [x2,y2] according to the ""mode"". ;  ; virtual void DrawCellArray (Int_t x1, Int_t y1, Int_t x2, Int_t y2, Int_t nx, Int_t ny, Int_t *ic);  Draws a cell array. ;  ; virtual void DrawFillArea (Int_t n, TPoint *xy);  Fills area described by the polygon. ;  ; virtual void DrawLine (Int_t x1, Int_t y1, Int_t x2, Int_t y2);  Draws a line. ;  ; virtual void DrawPolyLine (Int_t n, TPoint *xy);  Draws a line through all points in the list. ;  ; virtual void DrawPolyMarker (Int_t n, TPoint *xy);  Draws ""n"" markers with the current attributes at position [x,y]. ;  ; virtual vo",MatchSource.WIKI,doc/master/classTGCocoa.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCocoa.html
Performance,queue,queue," ; void DrawRectangleAux (Drawable_t wid, const GCValues_t &gcVals, Int_t x, Int_t y, UInt_t w, UInt_t h);  ; void DrawSegments (Drawable_t wid, GContext_t gc, Segment_t *segments, Int_t nSegments) override;  Draws multiple line segments. ;  ; void DrawSegmentsAux (Drawable_t wid, const GCValues_t &gcVals, const Segment_t *segments, Int_t nSegments);  ; void DrawString (Drawable_t wid, GContext_t gc, Int_t x, Int_t y, const char *s, Int_t len) override;  Each character image, as defined by the font in the GC, is treated as an additional mask for a fill operation on the drawable. ;  ; void DrawStringAux (Drawable_t wid, const GCValues_t &gc, Int_t x, Int_t y, const char *s, Int_t len);  ; Bool_t EmptyRegion (Region_t reg) override;  Returns kTRUE if the region reg is empty. ;  ; Bool_t EqualRegion (Region_t rega, Region_t regb) override;  Returns kTRUE if the two regions have the same offset, size, and shape. ;  ; Int_t EventsPending () override;  Returns the number of events that have been received from the X server but have not been removed from the event queue. ;  ; UInt_t ExecCommand (TGWin32Command *code) override;  Executes the command ""code"" coming from the other threads (Win32) ;  ; void FillPolygon (Window_t wid, GContext_t gc, Point_t *polygon, Int_t nPoints) override;  Fills the region closed by the specified path. ;  ; void FillPolygonAux (Window_t wid, const GCValues_t &gcVals, const Point_t *polygon, Int_t nPoints);  ; void FillRectangle (Drawable_t wid, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Fills the specified rectangle defined by [x,y] [x+w,y] [x+w,y+h] [x,y+h]. ;  ; void FillRectangleAux (Drawable_t wid, const GCValues_t &gcVals, Int_t x, Int_t y, UInt_t w, UInt_t h);  ; Window_t FindRWindow (Window_t win, Window_t dragwin, Window_t input, int x, int y, int maxd) override;  Recursively search in the children of Window for a Window which is at location x, y and is DND aware, with a maximum depth of maxd. ;  ; void FlushOpenGL",MatchSource.WIKI,doc/master/classTGCocoa.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCocoa.html
Security,access,accessing," InitWindow (ULong_t window) override;  Creates a new window and return window number. ;  ; Atom_t InternAtom (const char *atom_name, Bool_t only_if_exist) override;  Returns the atom identifier associated with the specified ""atom_name"" string. ;  ; void IntersectRegion (Region_t rega, Region_t regb, Region_t result) override;  Computes the intersection of two regions. ;  ; TClass * IsA () const override;  ; Bool_t IsCmdThread () const override;  ; Bool_t IsCocoaDraw () const;  ; Bool_t IsDNDAware (Window_t win, Atom_t *typelist) override;  Checks if the Window is DND aware, and knows any of the DND formats passed in argument. ;  ; Int_t KeysymToKeycode (UInt_t keysym) override;  Converts the ""keysym"" to the appropriate keycode. ;  ; char ** ListFonts (const char *fontname, Int_t max, Int_t &count) override;  Returns list of font names matching fontname regexp, like ""-*-times-*"". ;  ; FontStruct_t LoadQueryFont (const char *font_name) override;  Provides the most common way for accessing a font: opens (loads) the specified font and returns a pointer to the appropriate FontStruct_t structure. ;  ; void LookupString (Event_t *event, char *buf, Int_t buflen, UInt_t &keysym) override;  Converts the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ;  ; void LowerWindow (Window_t wid) override;  Lowers the specified window ""id"" to the bottom of the stack so that it does not obscure any sibling windows. ;  ; Bool_t MakeOpenGLContextCurrent (Handle_t ctx, Window_t windowID) override;  Makes context ctx current OpenGL context. ;  ; void MapRaised (Window_t wid) override;  Maps the window ""id"" and all of its subwindows that have had map requests on the screen and put this window on the top of of the stack of all windows. ;  ; void MapSubwindows (Window_t wid) override;  Maps all subwindows for the specified window ""id"" in top-to-bottom stacking order. ;  ; void MapWindow (Window_t ",MatchSource.WIKI,doc/master/classTGCocoa.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCocoa.html
Testability,log,logically,"d colormap. ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns kTRUE if the point [x, y] is contained in the region reg. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Returns a region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t wid, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Combines an image with a rectangle of the specified drawable. ;  ; void PutPixel (Drawable_t wid, Int_t x, Int_t y, ULong_t pixel) override;  Overwrites the pixel in the image with the specified pixel value. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Returns the current RGB value for the pixel in the ""color"" structure. ;  ; void QueryPointer (Int_t &x, Int_t &y) override;  Returns the pointer position. ;  ; void QueryPointer (Window_t wid, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask) override;  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; void RaiseWindow (Window_t wid) override;  Raises the specified window to the top of the stack so that no sibling window obscures it. ;  ; Pixmap_t ReadGIF (Int_t x0, Int_t y0, const char *file, Window_t wid) override;  If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ;  ; Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data) override;  Reads picture data from file ""filename"" and store it in ""ret_data"". ;  ; void ReconfigureDisplay ();  ; void RemoveWindow (ULong_t qwid) override;  Removes the created by Qt window ""qwid"". ;  ; void ReparentChild (Window_t wid, Window_t pid, Int_t x, Int_t y);  ; void ReparentTopLevel (Window_t wid, Window_t pid, Int_t x, Int_t y);  ; void ReparentWindow (Window_t wid, Window_t pid, Int_t x, Int_t y) override;  If the specified window is mapped, ReparentWin",MatchSource.WIKI,doc/master/classTGCocoa.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCocoa.html
Usability,simpl,simply,"ies the mask and the values to be set. (see also the GCValues_t structure) ; Reimplemented from TVirtualX.; Definition at line 3012 of file TGCocoa.mm. ◆ ChangeProperties(). void TGCocoa::ChangeProperties ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . Int_t ; format, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Reimplemented from TVirtualX.; Definition at line 3859 of file TGCocoa.mm. ◆ ChangeProperty(). void TGCocoa::ChangeProperty ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Parameters. [in]idthe window whose property you want to change ; [in]propertyspecifies the property name ; [in]typethe type of the property; the X server does not interpret the type but simply passes it back to an application that might ask about the window properties ; [in]datathe property data ; [in]lenthe length of the specified data format . Reimplemented from TVirtualX.; Definition at line 3816 of file TGCocoa.mm. ◆ ChangeWindowAttributes(). void TGCocoa::ChangeWindowAttributes ; (; Window_t ; id, . SetWindowAttributes_t * ; attr . ). overridevirtual . Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ; The mask data member of ""attr"" specifies which window attributes are defined in the attributes argument. This mask is the bitwise inclusive OR of the valid attribute mask bits; if it is zero, the attributes are ignored. ; Reimplemented from TVirtualX.; Definition at line 1006 of file TGCocoa.mm. ◆ CheckEvent(). Bool_t TGCocoa::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; If there is it fills in the event str",MatchSource.WIKI,doc/master/classTGCocoa.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCocoa.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,doc/master/classTGColorDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorDialog.html
Integrability,message,messages,"const;  Bind key to a window. ;  ; void DontCallClose ();  Typically call this method in the slot connected to the CloseWindow() signal to prevent the calling of the default or any derived CloseWindow() methods to prevent premature or double deletion of this window. ;  ; TList * GetBindList () const;  ; void GetClassHints (const char *&className, const char *&resourceName) const;  ; const char * GetIconName () const override;  Returns mime type name of object. ;  ; const char * GetIconPixmap () const;  ; void GetMWMHints (UInt_t &value, UInt_t &funcs, UInt_t &input) const;  ; const char * GetWindowName () const;  ; void GetWMPosition (Int_t &x, Int_t &y) const;  ; void GetWMSize (UInt_t &w, UInt_t &h) const;  ; void GetWMSizeHints (UInt_t &wmin, UInt_t &hmin, UInt_t &wmax, UInt_t &hmax, UInt_t &winc, UInt_t &hinc) const;  ; EInitialState GetWMState () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button events. ;  ; Bool_t HandleClientMessage (Event_t *event) override;  Handle client messages sent to this frame. ;  ; Bool_t HandleKey (Event_t *event) override;  Handle keyboard events. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion events. ;  ; Bool_t HandleSelection (Event_t *event) override;  Handle primary selection event. ;  ; Bool_t HandleSelectionRequest (Event_t *event) override;  Handle selection request event. ;  ; virtual void RemoveBind (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Remove key binding. ;  ; virtual Bool_t SaveFrameAsCodeOrImage ();  Opens dialog window allowing user to save the frame contents as a ROOT macro or as an image. ;  ; virtual Bool_t SaveFrameAsCodeOrImage (const TString &fileName);  Saves the frame contents as a ROOT macro or as an image, depending on the extension of the fileName argument. ;  ; virtual void SendCloseMessage ();  Send close message to self. ;  ; void SetClassHints (const char *className, const char *resourceName);  Set the windows class and resource n",MatchSource.WIKI,doc/master/classTGColorDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorDialog.html
Modifiability,inherit,inherited,"onst TGWindow *p=nullptr, const TGWindow *m=nullptr, Int_t *retc=nullptr, Pixel_t *color=nullptr, Bool_t wait=kTRUE);  Color selection dialog constructor. ;  ;  ~TGColorDialog () override;  TGColorDialog destructor. ;  ; virtual void AlphaColorSelected (ULongptr_t);  Emit signal about selected alpha and color. ;  ; virtual void ColorSelected (Pixel_t);  Emit signal about selected color. ;  ; void DoPreview ();  Slot method called when Preview button is clicked. ;  ; TGColorPalette * GetCustomPalette () const;  ; TGColorPalette * GetPalette () const;  ; TClass * IsA () const override;  ; void SetColorInfo (Int_t event, Int_t px, Int_t py, TObject *selected);  Set the color info in RGB and HLS parts. ;  ; virtual void SetCurrentColor (Pixel_t col);  Change current color. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ statement(s) on output stream out. ;  ; void SaveSource (const char *filename=""Rootdlog.C"", Option_t *option="""") override;  Save the GUI transient frame widget in a C++ macro file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMain",MatchSource.WIKI,doc/master/classTGColorDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorDialog.html
Security,hash,hash,"TGIdleHandler *);  ; Bool_t HandleTimer (TTimer *) override;  Execute action in response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; TClass * IsA () const override;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGColorDialog.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorDialog.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGColorFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorFrame.html
Integrability,message,message,"this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual UInt_t GetDefaultHeight () const;  ; virtual TGDimension GetDefaultSize () const;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; virtual UInt_t GetDefaultWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; virtual TGFrame * GetFrameFromPoint (Int_t x, Int_t y);  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleCrossing (Event_t *);  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; virtual Bool_t HandleDoubleClick (Event_t *);  ; virtual Bool_t HandleDragDrop (TGFrame *, Int_t, Int_t, TGLayoutHints *);  ; virtual Bool_t HandleDragEnter (TGFrame *);  ; virtual Bool_t HandleDragLeave (TGFrame *);  ; virtual Bool_t HandleDragMotion (TGFrame *);  ; Bool_t HandleEvent (Event",MatchSource.WIKI,doc/master/classTGColorFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorFrame.html
Modifiability,inherit,inherited,"  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGColorFrame Class ReferenceGUI » Low level GUI widgets. ; A small frame with border showing a specific color. ; Definition at line 22 of file TGColorSelect.h. Public Member Functions;  TGColorFrame (const TGWindow *p=nullptr, Pixel_t c=0, Int_t n=1);  TGColorFrame constructor. ;  ;  ~TGColorFrame () override;  ; void DrawBorder () override;  Draw TGColorFrame border. ;  ; Pixel_t GetColor () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle button events in TGColorFrame. ;  ; TClass * IsA () const override;  ; void SetActive (Bool_t in);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (UInt_t options);  Change frame options. Options is an OR of the EFrameTypes. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; virtual void DeleteWindow ();  Delete window. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const overrid",MatchSource.WIKI,doc/master/classTGColorFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorFrame.html
Security,hash,hash,"pped on screen, kFALSE otherwise. ;  ; virtual Bool_t IsMapSubwindows () const;  ; virtual void LowerWindow ();  lower window ;  ; virtual Int_t MustCleanup () const;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetEditDisabled (UInt_t on=kEditDisable);  ; virtual void SetMapSubwindows (Bool_t);  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGColorFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorFrame.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGColorPalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorPalette.html
Integrability,message,message,"o which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual UInt_t GetDefaultHeight () const;  ; virtual UInt_t GetDefaultWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; virtual TGFrame * GetFrameFromPoint (Int_t x, Int_t y);  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleCrossing (Event_t *);  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; virtual Bool_t HandleDoubleClick (Event_t *);  ; virtual Bool_t HandleDragDrop (TGFrame *, Int_t, Int_t, TGLayoutHints *);  ; virtual Bool_t HandleDragEnter (TGFrame *);  ; virtual Bool_t HandleDragLeave (TGFrame *);  ; virtual Bool_t HandleDragMotion (TGFrame *);  ; Bool_t HandleEvent (Event",MatchSource.WIKI,doc/master/classTGColorPalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorPalette.html
Modifiability,inherit,inherited,"etCurrentColor () const;  Return currently selected color value. ;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; Bool_t HandleButton (Event_t *event) override;  Handle button events in color palette. ;  ; Bool_t HandleKey (Event_t *event) override;  Handle keyboard events in color palette. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion events in color palette. ;  ; TClass * IsA () const override;  ; void SetCellSize (Int_t w=20, Int_t h=17);  Set color cell size. ;  ; void SetColor (Int_t ix, Pixel_t color);  Set color at index ix of color entries. ;  ; void SetColors (Pixel_t colors[]);  Set color entries in color samples. ;  ; void SetCurrentCellColor (Pixel_t color);  Set current cell color. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (UInt_t options);  Change frame options. Options is an OR of the EFrameTypes. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; virtual void DeleteWindow ();  Delete window. ;  ; virtual void DrawBorder ();  Draw frame border. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;",MatchSource.WIKI,doc/master/classTGColorPalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorPalette.html
Security,hash,hash,"pped on screen, kFALSE otherwise. ;  ; virtual Bool_t IsMapSubwindows () const;  ; virtual void LowerWindow ();  lower window ;  ; virtual Int_t MustCleanup () const;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetEditDisabled (UInt_t on=kEditDisable);  ; virtual void SetMapSubwindows (Bool_t);  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGColorPalette.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorPalette.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGColorPick.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorPick.html
Energy Efficiency,allocate,allocate,"gnal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Static Public Member Functions inherited from TGWidget; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void AllocColors ();  Try to allocate first a palette of 64 colors. ;  ; void CreateDitheredImage (Pixmap_t image, Int_t which);  Create a dithered version of the color map and lightness images for display modes with reduced number of colors. ;  ; void CreateImages ();  Create colormap and color slider images. ;  ; void DoRedraw () override;  Redraw the color pick widget. ;  ; void DrawHScursor (Int_t onoff);  Draw hue / saturation cursor. ;  ; void DrawLcursor (Int_t onoff);  Draw lightness slider cursor. ;  ; void FreeColors ();  Free allocated colors. ;  ; void InitImages ();  Initialize color palette and slider images. ;  ; void SetHScursor (Int_t x, Int_t y);  Set hue / saturation cursor position. ;  ; void SetLcursor (Int_t z);  Set lightness slider cursor position. ;  ; void SetSliderColor ();  Set slider colors. ;  ; void UpdateCurrentColor ();  Assign the current cursor position as currently selected color. ;  ;  Protected Member Functions inherited from TGFrame; void DoRedraw () override;  Redr",MatchSource.WIKI,doc/master/classTGColorPick.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorPick.html
Integrability,message,message,"this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual UInt_t GetDefaultHeight () const;  ; virtual TGDimension GetDefaultSize () const;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; virtual UInt_t GetDefaultWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; virtual TGFrame * GetFrameFromPoint (Int_t x, Int_t y);  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleCrossing (Event_t *);  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; virtual Bool_t HandleDoubleClick (Event_t *);  ; virtual Bool_t HandleDragDrop (TGFrame *, Int_t, Int_t, TGLayoutHints *);  ; virtual Bool_t HandleDragEnter (TGFrame *);  ; virtual Bool_t HandleDragLeave (TGFrame *);  ; virtual Bool_t HandleDragMotion (TGFrame *);  ; Bool_t HandleEvent (Event",MatchSource.WIKI,doc/master/classTGColorPick.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorPick.html
Modifiability,inherit,inherited,"ting a color in these two widgets will generate the event:; kC_COLORSEL, kCOL_CLICK, widget id, 0. and the signal:; ColorSelected(Pixel_t color) . Definition at line 83 of file TGColorDialog.h. Public Member Functions;  TGColorPick (const TGWindow *p=nullptr, Int_t w=1, Int_t h=1, Int_t id=-1);  TGColorPick constructor. ;  ;  ~TGColorPick () override;  TGColorPick destructor. ;  ; virtual void ColorSelected (Pixel_t col=0);  ; Pixel_t GetCurrentColor () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button events in color pick widget. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion events in color pick widget. ;  ; TClass * IsA () const override;  ; void SetColor (Pixel_t color);  Position the slider cursor on right color position. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (UInt_t options);  Change frame options. Options is an OR of the EFrameTypes. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; virtual void DeleteWindow ();  Delete window. ;  ; virtual void DrawBorder ();  Draw frame border. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;",MatchSource.WIKI,doc/master/classTGColorPick.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorPick.html
Security,hash,hash,"pped on screen, kFALSE otherwise. ;  ; virtual Bool_t IsMapSubwindows () const;  ; virtual void LowerWindow ();  lower window ;  ; virtual Int_t MustCleanup () const;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetEditDisabled (UInt_t on=kEditDisable);  ; virtual void SetMapSubwindows (Bool_t);  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGColorPick.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorPick.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGColorPopup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorPopup.html
Integrability,message,messages,"cted Attributes |; Private Member Functions |; List of all members ; TGColorPopup Class ReferenceGUI » Low level GUI widgets. ; A popup containing a TG16ColorSelector and a ""More..."" button which popups up a TGColorDialog allowing custom color selection. ; Definition at line 75 of file TGColorSelect.h. Public Member Functions;  TGColorPopup (const TGWindow *p=nullptr, const TGWindow *m=nullptr, Pixel_t color=0);  TGColorPopup constructor. ;  ;  ~TGColorPopup () override;  TGColorPopup destructor. ;  ; void EndPopup ();  Ungrab pointer and unmap window. ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button events for TGColorPopup. ;  ; TClass * IsA () const override;  ; void PlacePopup (Int_t x, Int_t y, UInt_t w, UInt_t h);  Popup TGColorPopup at x,y position. ;  ; void PreviewAlphaColor (ULongptr_t color);  Emit a signal to see preview. ;  ; void PreviewColor (Pixel_t color);  Emit a signal to see preview. ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages for TGColorPopup. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;",MatchSource.WIKI,doc/master/classTGColorPopup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorPopup.html
Modifiability,inherit,inherited,"file TGColorSelect.h. Public Member Functions;  TGColorPopup (const TGWindow *p=nullptr, const TGWindow *m=nullptr, Pixel_t color=0);  TGColorPopup constructor. ;  ;  ~TGColorPopup () override;  TGColorPopup destructor. ;  ; void EndPopup ();  Ungrab pointer and unmap window. ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button events for TGColorPopup. ;  ; TClass * IsA () const override;  ; void PlacePopup (Int_t x, Int_t y, UInt_t w, UInt_t h);  Popup TGColorPopup at x,y position. ;  ; void PreviewAlphaColor (ULongptr_t color);  Emit a signal to see preview. ;  ; void PreviewColor (Pixel_t color);  Emit a signal to see preview. ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages for TGColorPopup. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects contained in this composite frame. ;  ; virtual TGFrameElement * FindFrameElement (TGFrame *f) const;  Find frame-element holding frame f. ;  ; UInt_t GetDefaultHeight () const override;  ; TGDimension GetDefaultSize () ",MatchSource.WIKI,doc/master/classTGColorPopup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorPopup.html
Security,hash,hash,"n response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; TClass * IsA () const override;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGColorPopup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorPopup.html
Availability,down,down,". ROOT: TGColorSelect Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGColorSelect Class ReferenceGUI » Low level GUI widgets. ; Like a checkbutton but instead of the check mark there is color area with a little down arrow. ; When clicked on the arrow the TGColorPopup pops up.; Selecting a color in this widget will generate the event:; kC_COLORSEL, kCOL_SELCHANGED, widget id, pixel. and the signal:. ColorSelected(Pixel_t color) . Definition at line 104 of file TGColorSelect.h. Public Member Functions;  TGColorSelect (const TGWindow *p=nullptr, Pixel_t color=0, Int_t id=-1);  TGColorSelect constructor. ;  ;  ~TGColorSelect () override;  TGColorSelect destructor. ;  ; virtual void AlphaColorSelected (ULong_t colptr=0);  ; virtual void ColorSelected (Pixel_t color=0);  ; void Disable ();  Set state of widget as disabled. ;  ; void Enable (Bool_t on=kTRUE);  Set state of widget as enabled. ;  ; Pixel_t GetColor () const;  ; TGDimension GetDefaultSize () const override;  default size ;  ; Bool_t HandleButton (Event_t *event) override;  Handle button events for TGColorSelect. ;  ; TClass * IsA () const override;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages for TGColorSelect. ;  ; void Rename (const char *title);  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save a color select widget as a C++ statement(s) on output stream out. ;  ; void SetAlphaColor (ULong_t color, Bool_t emit=kTRUE);  Set color. ;  ; void SetColor (Pixel_t color, Bool_t emit=kTRUE);  Set color. ;  ; void SetDown (Bool_t on=kTRUE, Bool_t emit=kFALSE) override;  ; void SetEnabled (Bool_t e=kTRUE) override;  Set enabled or disabled state of button. ;  ; void Streamer (TBuffer &) override;  Stre",MatchSource.WIKI,doc/master/classTGColorSelect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorSelect.html
Integrability,message,messages,"e check mark there is color area with a little down arrow. ; When clicked on the arrow the TGColorPopup pops up.; Selecting a color in this widget will generate the event:; kC_COLORSEL, kCOL_SELCHANGED, widget id, pixel. and the signal:. ColorSelected(Pixel_t color) . Definition at line 104 of file TGColorSelect.h. Public Member Functions;  TGColorSelect (const TGWindow *p=nullptr, Pixel_t color=0, Int_t id=-1);  TGColorSelect constructor. ;  ;  ~TGColorSelect () override;  TGColorSelect destructor. ;  ; virtual void AlphaColorSelected (ULong_t colptr=0);  ; virtual void ColorSelected (Pixel_t color=0);  ; void Disable ();  Set state of widget as disabled. ;  ; void Enable (Bool_t on=kTRUE);  Set state of widget as enabled. ;  ; Pixel_t GetColor () const;  ; TGDimension GetDefaultSize () const override;  default size ;  ; Bool_t HandleButton (Event_t *event) override;  Handle button events for TGColorSelect. ;  ; TClass * IsA () const override;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages for TGColorSelect. ;  ; void Rename (const char *title);  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save a color select widget as a C++ statement(s) on output stream out. ;  ; void SetAlphaColor (ULong_t color, Bool_t emit=kTRUE);  Set color. ;  ; void SetColor (Pixel_t color, Bool_t emit=kTRUE);  Set color. ;  ; void SetDown (Bool_t on=kTRUE, Bool_t emit=kFALSE) override;  ; void SetEnabled (Bool_t e=kTRUE) override;  Set enabled or disabled state of button. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCheckButton;  TGCheckButton (const TGWindow *p, const char *s, const char *cmd, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a check button widget. ;  ;  TGCheckButton (const TGWindow *p, TGH",MatchSource.WIKI,doc/master/classTGColorSelect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorSelect.html
Modifiability,inherit,inherited,"ize () const override;  default size ;  ; Bool_t HandleButton (Event_t *event) override;  Handle button events for TGColorSelect. ;  ; TClass * IsA () const override;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages for TGColorSelect. ;  ; void Rename (const char *title);  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save a color select widget as a C++ statement(s) on output stream out. ;  ; void SetAlphaColor (ULong_t color, Bool_t emit=kTRUE);  Set color. ;  ; void SetColor (Pixel_t color, Bool_t emit=kTRUE);  Set color. ;  ; void SetDown (Bool_t on=kTRUE, Bool_t emit=kFALSE) override;  ; void SetEnabled (Bool_t e=kTRUE) override;  Set enabled or disabled state of button. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCheckButton;  TGCheckButton (const TGWindow *p, const char *s, const char *cmd, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a check button widget. ;  ;  TGCheckButton (const TGWindow *p, TGHotString *s, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a check button widget. ;  ;  TGCheckButton (const TGWindow *p=nullptr, const char *s=nullptr, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a check button widget. ;  ;  ~TGCheckButton () override;  Delete a check button. ;  ; Bool_t HandleCrossing (Event_t *event) override;  Handle mouse crossing event. ;  ; Bool_t HandleKey (Event_t *event) override;  Handle key event. This function will be called when the hotkey is hit. ;  ; virtual Bool_t IsDisabledAndSelected () const;  ; Bool_t IsDown () const override;  ; Bool_t IsOn () const override;  ; Bool_t IsToggleButton () const override;  ;",MatchSource.WIKI,doc/master/classTGColorSelect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorSelect.html
Security,hash,hash,"pped on screen, kFALSE otherwise. ;  ; virtual Bool_t IsMapSubwindows () const;  ; virtual void LowerWindow ();  lower window ;  ; virtual Int_t MustCleanup () const;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetEditDisabled (UInt_t on=kEditDisable);  ; virtual void SetMapSubwindows (Bool_t);  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGColorSelect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColorSelect.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGColumnLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColumnLayout.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGColumnLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColumnLayout.html
Modifiability,inherit,inherited,"ference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TGColumnLayout Class ReferenceGUI » Low level GUI widgets. ; The following layout manager do not make use of TGLayoutHints. ; Definition at line 229 of file TGLayout.h. Public Member Functions;  TGColumnLayout (TGCompositeFrame *main, Int_t s=0);  ; TGDimension GetDefaultSize () const override;  Return default dimension of the column layout. ;  ; TClass * IsA () const override;  ; void Layout () override;  Make a column layout of all frames in the list. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save column layout manager as a C++ statement(s) on output stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGRowLayout;  TGRowLayout (TGCompositeFrame *main, Int_t s=0);  ; TGDimension GetDefaultSize () const override;  Return default dimension of the row layout. ;  ; TClass * IsA () const override;  ; void Layout () override;  Make a row layout of all frames in the list. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save row layout manager as a C++ statement(s) on output stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGVerticalLayout;  TGVerticalLayout (TGCompositeFrame *main);  Create vertical layout manager. ;  ; TGDimension GetDefaultSize () const override;  Return default dimension of the vertical layout. ;  ; TClass * IsA () const override;  ; void Layout () override;  Make a vertical layout of all frames in the list. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save vertical layout manager as a C++ statement(s) o",MatchSource.WIKI,doc/master/classTGColumnLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColumnLayout.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGColumnLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGColumnLayout.html
Availability,down,down,". ROOT: TGComboBox Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGComboBox Class ReferenceGUI » Low level GUI widgets. ; A combobox (also known as a drop down listbox) allows the selection of one item out of a list of items. ; The selected item is visible in a little window. To view the list of possible items one has to click on a button on the right of the little window. This will drop down a listbox. After selecting an item from the listbox the box will disappear and the newly selected item will be shown in the little window.; The TGComboBox is user callable. ; Definition at line 47 of file TGComboBox.h. Public Member Functions;  TGComboBox (const TGWindow *p, const char *text, Int_t id=-1, UInt_t options=kHorizontalFrame|kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Create an editable combo box widget. ;  ;  TGComboBox (const TGWindow *p=nullptr, Int_t id=-1, UInt_t options=kHorizontalFrame|kSunkenFrame|kDoubleBorder, Pixel_t back=GetWhitePixel());  Create a combo box widget. ;  ;  ~TGComboBox () override;  Delete a combo box widget. ;  ; virtual void AddEntry (const char *s, Int_t id);  ; virtual void AddEntry (TGLBEntry *lbe, TGLayoutHints *lhints);  ; virtual void AddEntry (TGString *s, Int_t id);  ; virtual void Changed ();  ; void DrawBorder () override;  Draw border of combo box widget. ;  ; virtual void EnableTextInput (Bool_t on);  Switch text input or readonly mode of combobox (not perfect yet). ;  ; virtual TGLBEntry * FindEntry (const char *s) const;  Find entry by name. ;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; virtual TGListBox * GetListBox () const;  ; virtual Int_t GetNumberOfEntries () const;  ; virtual Int_t GetSelected () const;  ",MatchSource.WIKI,doc/master/classTGComboBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGComboBox.html
Deployability,update,update," ; virtual void RemoveEntries (Int_t from_ID, Int_t to_ID);  ; virtual void RemoveEntry (Int_t id=-1);  Remove entry. If id == -1, the currently selected entry is removed. ;  ; virtual void ReturnPressed ();  Add new entry to combo box when return key pressed inside text entry ReturnPressed signal is emitted. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a combo box widget as a C++ statement(s) on output stream out. ;  ; virtual void Select (Int_t id, Bool_t emit=kTRUE);  Make the selected item visible in the combo box window and emit signals according to the second parameter. ;  ; virtual void Selected (const char *txt);  ; virtual void Selected (Int_t id);  ; virtual void Selected (Int_t widgetId, Int_t id);  Emit signal, done only when selected entry changed. ;  ; virtual void SetEnabled (Bool_t on=kTRUE);  Set state of combo box. If kTRUE=enabled, kFALSE=disabled. ;  ; virtual void SetTopEntry (TGLBEntry *e, TGLayoutHints *lh);  Set a new combo box value (normally update of text string in fSelEntry is done via fSelEntry::Update()). ;  ; virtual void SortByName (Bool_t ascend=kTRUE);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (P",MatchSource.WIKI,doc/master/classTGComboBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGComboBox.html
Integrability,message,messages,"TGListBox * GetListBox () const;  ; virtual Int_t GetNumberOfEntries () const;  ; virtual Int_t GetSelected () const;  ; virtual TGLBEntry * GetSelectedEntry () const;  ; virtual TGTextEntry * GetTextEntry () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button events in the combo box. ;  ; Bool_t HandleDoubleClick (Event_t *event) override;  Handle double click in text entry. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle pointer motion in text entry. ;  ; Bool_t HandleSelection (Event_t *event) override;  Handle selection in text entry. ;  ; Bool_t HandleSelectionRequest (Event_t *event) override;  Handle selection request in text entry. ;  ; virtual void InsertEntry (const char *s, Int_t id, Int_t afterID);  ; virtual void InsertEntry (TGLBEntry *lbe, TGLayoutHints *lhints, Int_t afterID);  ; virtual void InsertEntry (TGString *s, Int_t id, Int_t afterID);  ; TClass * IsA () const override;  ; virtual Bool_t IsEnabled () const;  ; virtual Bool_t IsTextInputEnabled () const;  ; void Layout () override;  layout combobox ;  ; virtual void NewEntry (const char *s=""Entry"");  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages generated by the listbox and forward messages to the combobox message handling window. ;  ; void RemoveAll () override;  Remove all entries from combo box. ;  ; virtual void RemoveEntries (Int_t from_ID, Int_t to_ID);  ; virtual void RemoveEntry (Int_t id=-1);  Remove entry. If id == -1, the currently selected entry is removed. ;  ; virtual void ReturnPressed ();  Add new entry to combo box when return key pressed inside text entry ReturnPressed signal is emitted. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a combo box widget as a C++ statement(s) on output stream out. ;  ; virtual void Select (Int_t id, Bool_t emit=kTRUE);  Make the selected item visible in the combo box window and emit signals according to the second param",MatchSource.WIKI,doc/master/classTGComboBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGComboBox.html
Modifiability,inherit,inherited,"ption_t *option="""") override;  Save a combo box widget as a C++ statement(s) on output stream out. ;  ; virtual void Select (Int_t id, Bool_t emit=kTRUE);  Make the selected item visible in the combo box window and emit signals according to the second parameter. ;  ; virtual void Selected (const char *txt);  ; virtual void Selected (Int_t id);  ; virtual void Selected (Int_t widgetId, Int_t id);  Emit signal, done only when selected entry changed. ;  ; virtual void SetEnabled (Bool_t on=kTRUE);  Set state of combo box. If kTRUE=enabled, kFALSE=disabled. ;  ; virtual void SetTopEntry (TGLBEntry *e, TGLayoutHints *lh);  Set a new combo box value (normally update of text string in fSelEntry is done via fSelEntry::Update()). ;  ; virtual void SortByName (Bool_t ascend=kTRUE);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects contained in this composite frame. ;  ; virtual TGFrameElement * FindFrameElement (TGFrame *f) const;  Find frame-element holding frame f. ;  ; UInt_t GetDefaultHeight () const override;  ; TGDimension GetDefaultSize () ",MatchSource.WIKI,doc/master/classTGComboBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGComboBox.html
Security,hash,hash,"n response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; TClass * IsA () const override;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGComboBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGComboBox.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGComboBoxPopup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGComboBoxPopup.html
Integrability,message,message,"d DrawBorder ();  Draw frame border. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; Bool_t HandleEvent (Event_t *event) override;  Handle all frame events. ;  ; virtual Bool_t HandleSelectionClear (Event_t *);  ; virtual Bool_t HandleSelectionRequest (Event_t *);  ; void Inspect () const override;  Dump contents of this object in a graphics canvas. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsActive () const;  ; Bool_t IsDNDSource () con",MatchSource.WIKI,doc/master/classTGComboBoxPopup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGComboBoxPopup.html
Modifiability,inherit,inherited,"obox. ; Selecting an item in the combobox will generate the event:; kC_COMMAND, kCM_COMBOBOX, combobox id, item id. . Definition at line 21 of file TGComboBox.h. Public Member Functions;  TGComboBoxPopup (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame, Pixel_t back=GetWhitePixel());  Create a combo box popup frame. ;  ; void EndPopup ();  Ungrab pointer and unmap popup window. ;  ; Bool_t HandleButton (Event_t *) override;  Handle mouse button event in combo box popup. ;  ; TClass * IsA () const override;  ; void KeyPressed (TGFrame *, UInt_t, UInt_t);  Slot handling the key press events. ;  ; void PlacePopup (Int_t x, Int_t y, UInt_t w, UInt_t h);  Popup combo box popup window at the specified place. ;  ; void SetListBox (TGListBox *lb);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects contained in this composite frame. ;  ; virtual TGFrameElement * FindFrameElement (TGFrame *f) const;  Find frame-element holding frame f. ;  ; UInt_t GetDefaultHeight () const override;  ; TGDimension GetDefaultSize () ",MatchSource.WIKI,doc/master/classTGComboBoxPopup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGComboBoxPopup.html
Security,hash,hash,"n response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; TClass * IsA () const override;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGComboBoxPopup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGComboBoxPopup.html
Availability,down,down,". ROOT: TGCommandPlugin Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGCommandPlugin Class ReferenceGUI » Low level GUI widgets. ; Class used to redirect the command line input/output. ; Definition at line 25 of file TGCommandPlugin.h. Public Member Functions;  TGCommandPlugin (const TGWindow *p, UInt_t w, UInt_t h);  TGCommandPlugin Constructor. ;  ;  ~TGCommandPlugin () override;  Destructor. ;  ; void CheckRemote (const char *);  Check if actual ROOT session is a remote one or a local one. ;  ; Bool_t GetHistAdd ();  ; void HandleArrows (Int_t keysym);  Handle the 'up' and 'down' arrow key events. ;  ; void HandleCommand ();  Handle command line from the ""command"" combo box. ;  ; void HandleTab ();  Handle the 'TAB' key events. ;  ; void HandleTextChanged (const char *);  Handle the text changed events. ;  ; Bool_t HandleTimer (TTimer *t) override;  Handle timer event. ;  ; TClass * IsA () const override;  ; void SetHistAdd (Bool_t add=kTRUE);  The function SetHistAdd() is needed for a standalone TApplication to log the TGCommandPlugin commands into a ROOT history file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void ToggleTimer (Bool_t on);  Let user stop the internal timer when there is no need to check for remote. ;  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destructor. ;  ; virtual Bool_t BindKey (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Bind key to a window. ;  ; virtual void CloseWindow ();  Close and delete main frame. ;  ; void DontCallClose ();  Typically call this method i",MatchSource.WIKI,doc/master/classTGCommandPlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCommandPlugin.html
Deployability,update,update,"llows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Attributes; TGComboBox * fComboCmd;  commands combobox ;  ; TGTextEntry * fCommand;  command text entry widget ;  ; TGTextBuffer * fCommandBuf;  command text buffer ;  ; TGHorizontalFrame * fHf;  horizontal frame ;  ; Bool_t fHistAdd;  flag to add commands to history ;  ; TGLabel * fLabel;  ""command :"" label ;  ; Int_t fPid;  current process id ;  ; Int_t fPos;  current history position ;  ; TGTextView * fStatus;  output capture view ;  ; TString fTempString;  temporary command string ;  ; TTimer * fTimer;  for local/remote update ;  ;  Protected Attributes inherited from TGMainFrame; TList * fBindList;  list with key bindings ;  ; TString fClassName;  WM class name. ;  ; Atom_t * fDNDTypeList;  handles DND types ;  ; TString fIconName;  icon name ;  ; TString fIconPixmap;  icon pixmap name ;  ; UInt_t fMWMFuncs;  MWM functions. ;  ; UInt_t fMWMInput;  MWM input modes. ;  ; UInt_t fMWMValue;  MWM decoration hints. ;  ; TString fResourceName;  WM resource name. ;  ; TString fWindowName;  window name ;  ; UInt_t fWMHeight;  WM height. ;  ; UInt_t fWMHeightInc;  WM height increments. ;  ; EInitialState fWMInitState;  WM initial state. ;  ; UInt_t fWMMaxHeight;  WM max height. ;  ; UInt_t fWMMaxWidth;  WM max width. ;  ; UInt_t fWMMinHeight;  WM min height. ;  ; UInt_t fWMMinWidth;  WM min width. ;  ; UInt_t fWMWid",MatchSource.WIKI,doc/master/classTGCommandPlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCommandPlugin.html
Integrability,message,messages," Close and delete main frame. ;  ; void DontCallClose ();  Typically call this method in the slot connected to the CloseWindow() signal to prevent the calling of the default or any derived CloseWindow() methods to prevent premature or double deletion of this window. ;  ; TList * GetBindList () const;  ; void GetClassHints (const char *&className, const char *&resourceName) const;  ; const char * GetIconName () const override;  Returns mime type name of object. ;  ; const char * GetIconPixmap () const;  ; void GetMWMHints (UInt_t &value, UInt_t &funcs, UInt_t &input) const;  ; const char * GetWindowName () const;  ; void GetWMPosition (Int_t &x, Int_t &y) const;  ; void GetWMSize (UInt_t &w, UInt_t &h) const;  ; void GetWMSizeHints (UInt_t &wmin, UInt_t &hmin, UInt_t &wmax, UInt_t &hmax, UInt_t &winc, UInt_t &hinc) const;  ; EInitialState GetWMState () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button events. ;  ; Bool_t HandleClientMessage (Event_t *event) override;  Handle client messages sent to this frame. ;  ; Bool_t HandleKey (Event_t *event) override;  Handle keyboard events. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion events. ;  ; Bool_t HandleSelection (Event_t *event) override;  Handle primary selection event. ;  ; Bool_t HandleSelectionRequest (Event_t *event) override;  Handle selection request event. ;  ; TClass * IsA () const override;  ; virtual void RemoveBind (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Remove key binding. ;  ; virtual Bool_t SaveFrameAsCodeOrImage ();  Opens dialog window allowing user to save the frame contents as a ROOT macro or as an image. ;  ; virtual Bool_t SaveFrameAsCodeOrImage (const TString &fileName);  Saves the frame contents as a ROOT macro or as an image, depending on the extension of the fileName argument. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a main frame widget as a C++ statement(s) on output stream out. ",MatchSource.WIKI,doc/master/classTGCommandPlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCommandPlugin.html
Modifiability,inherit,inherited," Check if actual ROOT session is a remote one or a local one. ;  ; Bool_t GetHistAdd ();  ; void HandleArrows (Int_t keysym);  Handle the 'up' and 'down' arrow key events. ;  ; void HandleCommand ();  Handle command line from the ""command"" combo box. ;  ; void HandleTab ();  Handle the 'TAB' key events. ;  ; void HandleTextChanged (const char *);  Handle the text changed events. ;  ; Bool_t HandleTimer (TTimer *t) override;  Handle timer event. ;  ; TClass * IsA () const override;  ; void SetHistAdd (Bool_t add=kTRUE);  The function SetHistAdd() is needed for a standalone TApplication to log the TGCommandPlugin commands into a ROOT history file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void ToggleTimer (Bool_t on);  Let user stop the internal timer when there is no need to check for remote. ;  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destructor. ;  ; virtual Bool_t BindKey (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Bind key to a window. ;  ; virtual void CloseWindow ();  Close and delete main frame. ;  ; void DontCallClose ();  Typically call this method in the slot connected to the CloseWindow() signal to prevent the calling of the default or any derived CloseWindow() methods to prevent premature or double deletion of this window. ;  ; TList * GetBindList () const;  ; void GetClassHints (const char *&className, const char *&resourceName) const;  ; const char * GetIconName () const override;  Returns mime type name of object. ;  ; const char * GetIconPixmap () const;  ; void GetMWMHints (UInt_t &value, UInt_t &funcs, UInt_t &input) const;  ; const char * GetWindowName () const;  ; void GetWMPosition (Int_t &x, Int_t &y) const;  ; void GetWMSize (UInt_t &w, UInt_t",MatchSource.WIKI,doc/master/classTGCommandPlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCommandPlugin.html
Security,hash,hash,"TGIdleHandler *);  ; Bool_t HandleTimer (TTimer *) override;  Execute action in response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; TClass * IsA () const override;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGCommandPlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCommandPlugin.html
Testability,log,log,"|; Static Public Member Functions |; Protected Attributes |; List of all members ; TGCommandPlugin Class ReferenceGUI » Low level GUI widgets. ; Class used to redirect the command line input/output. ; Definition at line 25 of file TGCommandPlugin.h. Public Member Functions;  TGCommandPlugin (const TGWindow *p, UInt_t w, UInt_t h);  TGCommandPlugin Constructor. ;  ;  ~TGCommandPlugin () override;  Destructor. ;  ; void CheckRemote (const char *);  Check if actual ROOT session is a remote one or a local one. ;  ; Bool_t GetHistAdd ();  ; void HandleArrows (Int_t keysym);  Handle the 'up' and 'down' arrow key events. ;  ; void HandleCommand ();  Handle command line from the ""command"" combo box. ;  ; void HandleTab ();  Handle the 'TAB' key events. ;  ; void HandleTextChanged (const char *);  Handle the text changed events. ;  ; Bool_t HandleTimer (TTimer *t) override;  Handle timer event. ;  ; TClass * IsA () const override;  ; void SetHistAdd (Bool_t add=kTRUE);  The function SetHistAdd() is needed for a standalone TApplication to log the TGCommandPlugin commands into a ROOT history file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void ToggleTimer (Bool_t on);  Let user stop the internal timer when there is no need to check for remote. ;  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destructor. ;  ; virtual Bool_t BindKey (const TGWindow *w, Int_t keycode, Int_t modifier) const;  Bind key to a window. ;  ; virtual void CloseWindow ();  Close and delete main frame. ;  ; void DontCallClose ();  Typically call this method in the slot connected to the CloseWindow() signal to prevent the calling of the default or any derived CloseWindow() methods to prevent premature or double deletion of th",MatchSource.WIKI,doc/master/classTGCommandPlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCommandPlugin.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGCompositeFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCompositeFrame.html
Integrability,message,message,"d DrawBorder ();  Draw frame border. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; Bool_t HandleEvent (Event_t *event) override;  Handle all frame events. ;  ; virtual Bool_t HandleSelectionClear (Event_t *);  ; virtual Bool_t HandleSelectionRequest (Event_t *);  ; void Inspect () const override;  Dump contents of this object in a graphics canvas. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsActive () const;  ; Bool_t IsDNDSource () con",MatchSource.WIKI,doc/master/classTGCompositeFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCompositeFrame.html
Modifiability,inherit,inherited," save subframes. ;  ; void SetCleanup (Int_t mode=kLocalCleanup) override;  Turn on automatic cleanup of child frames in dtor. ;  ; void SetEditable (Bool_t on=kTRUE) override;  Switch ON/OFF edit mode. ;  ; void SetEditDisabled (UInt_t on=1) override;  Set edit disable flag for this frame and subframes. ;  ; void SetLayoutBroken (Bool_t on=kTRUE) override;  Set broken layout. No Layout method is called. ;  ; virtual void SetLayoutManager (TGLayoutManager *l);  Set the layout manager for the composite frame. ;  ; void SetMapSubwindows (Bool_t on) override;  ; virtual void ShowFrame (TGFrame *f);  Show sub frame. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Bool_t TranslateCoordinates (TGFrame *child, Int_t x, Int_t y, Int_t &fx, Int_t &fy);  Translate coordinates to child frame. ;  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; virtual void DeleteWindow ();  Delete window. ;  ; virtual void DrawBorder ();  Draw frame border. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c",MatchSource.WIKI,doc/master/classTGCompositeFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCompositeFrame.html
Performance,load,load,"leanup in this composite frame and all child composite frames (hierarchical); Attention! Hierarchical cleaning is dangerous and must be used with caution. There are many GUI components (in ROOT and in user code) which do not use Clean method in destructor (""custom deallocation""). Adding such component to GUI container which is using hierarchical cleaning will produce seg. violation when container is deleted. The reason is double deletion: first when Clean method is invoked, then at ""custom deallocation"". We are going to correct all ROOT code to make it to be consistent with hierarchical cleaning scheme. ; Reimplemented from TGFrame.; Definition at line 1072 of file TGFrame.cxx. ◆ SetEditable(). void TGCompositeFrame::SetEditable ; (; Bool_t ; on = kTRUE). overridevirtual . Switch ON/OFF edit mode. ; If edit mode is ON it is possible:. embed other ROOT GUI application (a la ActiveX). For example: TGMainFrame *m = new TGMainFrame(gClient->GetRoot(), 500, 500); m->SetEditable(); gSystem->Load(""$ROOTSYS/test/Aclock""); // load Aclock demo Aclock a; gROOT->Macro(""$ROOTSYS/tutorials/gui/guitest.C""); m->SetEditable(0); m->MapWindow(); ; Reimplemented from TGWindow.; Reimplemented in TRootContainer, and TRootEmbeddedContainer.; Definition at line 948 of file TGFrame.cxx. ◆ SetEditDisabled(). void TGCompositeFrame::SetEditDisabled ; (; UInt_t ; on = 1). overridevirtual . Set edit disable flag for this frame and subframes. . if (on & kEditDisable) - disable edit for this frame and all subframes. . Reimplemented from TGWindow.; Definition at line 1022 of file TGFrame.cxx. ◆ SetLayoutBroken(). void TGCompositeFrame::SetLayoutBroken ; (; Bool_t ; on = kTRUE). overridevirtual . Set broken layout. No Layout method is called. ; Reimplemented from TGFrame.; Definition at line 1012 of file TGFrame.cxx. ◆ SetLayoutManager(). void TGCompositeFrame::SetLayoutManager ; (; TGLayoutManager * ; l). virtual . Set the layout manager for the composite frame. ; The layout manager is adopted by t",MatchSource.WIKI,doc/master/classTGCompositeFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCompositeFrame.html
Security,hash,hash,"n response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; TClass * IsA () const override;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGCompositeFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCompositeFrame.html
Testability,test,test,"leanup in this composite frame and all child composite frames (hierarchical); Attention! Hierarchical cleaning is dangerous and must be used with caution. There are many GUI components (in ROOT and in user code) which do not use Clean method in destructor (""custom deallocation""). Adding such component to GUI container which is using hierarchical cleaning will produce seg. violation when container is deleted. The reason is double deletion: first when Clean method is invoked, then at ""custom deallocation"". We are going to correct all ROOT code to make it to be consistent with hierarchical cleaning scheme. ; Reimplemented from TGFrame.; Definition at line 1072 of file TGFrame.cxx. ◆ SetEditable(). void TGCompositeFrame::SetEditable ; (; Bool_t ; on = kTRUE). overridevirtual . Switch ON/OFF edit mode. ; If edit mode is ON it is possible:. embed other ROOT GUI application (a la ActiveX). For example: TGMainFrame *m = new TGMainFrame(gClient->GetRoot(), 500, 500); m->SetEditable(); gSystem->Load(""$ROOTSYS/test/Aclock""); // load Aclock demo Aclock a; gROOT->Macro(""$ROOTSYS/tutorials/gui/guitest.C""); m->SetEditable(0); m->MapWindow(); ; Reimplemented from TGWindow.; Reimplemented in TRootContainer, and TRootEmbeddedContainer.; Definition at line 948 of file TGFrame.cxx. ◆ SetEditDisabled(). void TGCompositeFrame::SetEditDisabled ; (; UInt_t ; on = 1). overridevirtual . Set edit disable flag for this frame and subframes. . if (on & kEditDisable) - disable edit for this frame and all subframes. . Reimplemented from TGWindow.; Definition at line 1022 of file TGFrame.cxx. ◆ SetLayoutBroken(). void TGCompositeFrame::SetLayoutBroken ; (; Bool_t ; on = kTRUE). overridevirtual . Set broken layout. No Layout method is called. ; Reimplemented from TGFrame.; Definition at line 1012 of file TGFrame.cxx. ◆ SetLayoutManager(). void TGCompositeFrame::SetLayoutManager ; (; TGLayoutManager * ; l). virtual . Set the layout manager for the composite frame. ; The layout manager is adopted by t",MatchSource.WIKI,doc/master/classTGCompositeFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGCompositeFrame.html
Availability,mask,mask,"t;  Returns page dimension. ;  ; virtual TGPosition GetPagePosition () const;  Returns page position. ;  ; virtual TGVScrollBar * GetVScrollbar () const;  returns pointer to vert. scroll bar ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event in container. ;  ; Bool_t HandleDNDFinished () override;  ; Bool_t HandleDoubleClick (Event_t *event) override;  Handle double click mouse event. ;  ; Bool_t HandleExpose (Event_t *event) override;  Handle expose events. Do not use double buffer. ;  ; Bool_t HandleKey (Event_t *event) override;  The key press event handler converts a key press to some line editor action. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion events. ;  ; virtual void Home (Bool_t select=kFALSE);  Move to upper-left corner of container. ;  ; virtual void InvertSelection ();  Invert the selection, all selected items become unselected and vice versa. ;  ; TClass * IsA () const override;  ; virtual void KeyPressed (TGFrame *, UInt_t keysym, UInt_t mask);  Signal emitted when keyboard key pressed. ;  ; void Layout () override;  Layout container entries. ;  ; virtual void LineDown (Bool_t select=kFALSE);  Move one line down. ;  ; virtual void LineLeft (Bool_t select=kFALSE);  Move current position one column left. ;  ; virtual void LineRight (Bool_t select=kFALSE);  Move current position one column right. ;  ; virtual void LineUp (Bool_t select=kFALSE);  Make current position first line in window by scrolling up. ;  ; virtual Int_t NumItems () const;  ; virtual Int_t NumSelected () const;  ; virtual void OnMouseOver (TGFrame *);  Signal emitted when pointer is over entry. ;  ; virtual void PageDown (Bool_t select=kFALSE);  Move position one page down. ;  ; virtual void PageUp (Bool_t select=kFALSE);  Move position one page up. ;  ; void RemoveAll () override;  Remove all items from the container. ;  ; virtual void RemoveItem (TGFrame *item);  Remove item from container. ;  ; virtual void ReturnPressed (TGF",MatchSource.WIKI,doc/master/classTGContainer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGContainer.html
Integrability,message,message,"d DrawBorder ();  Draw frame border. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; Bool_t HandleEvent (Event_t *event) override;  Handle all frame events. ;  ; virtual Bool_t HandleSelectionClear (Event_t *);  ; virtual Bool_t HandleSelectionRequest (Event_t *);  ; void Inspect () const override;  Dump contents of this object in a graphics canvas. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsActive () const;  ; Bool_t IsDNDSource () const;  ; Bool_t IsDNDTarget () const;  ; B",MatchSource.WIKI,doc/master/classTGContainer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGContainer.html
Modifiability,inherit,inherited,"ll items in the container. ;  ; virtual void SetDragPixmap (const TGPicture *pic);  Set drag window pixmaps and hotpoint. ;  ; virtual void SetHsbPosition (Int_t newPos);  set new hor. position ;  ; virtual void SetPageDimension (const TGDimension &dim);  Set page dimension. ;  ; virtual void SetPageDimension (UInt_t w, UInt_t h);  Set page dimension. ;  ; virtual void SetPagePosition (const TGPosition &pos);  Set page position. ;  ; virtual void SetPagePosition (Int_t x, Int_t y);  Set page position. ;  ; virtual void SetVsbPosition (Int_t newPos);  Set position of vertical scrollbar. ;  ; virtual void SpacePressed (TGFrame *);  Signal emitted when space key pressed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UnSelectAll ();  Unselect all items in the container. ;  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects contained in this composite frame. ;  ; virtual TGFrameElement * FindFrameElement (TGFrame *f) const;  Find frame-element holding frame f. ;  ; UInt_t GetDefaultHeight () const override;  ; TGDimension GetDefaultSize () const override;  std::cout << fWi",MatchSource.WIKI,doc/master/classTGContainer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGContainer.html
Security,expose,expose,"t TString &name, Bool_t direction=kTRUE, Bool_t caseSensitive=kTRUE, Bool_t subString=kFALSE);  ; TGCanvas * GetCanvas () const;  ; virtual TGHScrollBar * GetHScrollbar () const;  returns pointer to hor. scroll bar ;  ; virtual TGFrame * GetLastActive () const;  ; const TGWindow * GetMessageWindow () const;  ; virtual const TGFrame * GetNextSelected (void **current);  Return the next selected item. ;  ; const TGPicture * GetObjPicture (TGFrame *f);  Retrieve icons associated with class ""name"". ;  ; virtual TGDimension GetPageDimension () const;  Returns page dimension. ;  ; virtual TGPosition GetPagePosition () const;  Returns page position. ;  ; virtual TGVScrollBar * GetVScrollbar () const;  returns pointer to vert. scroll bar ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event in container. ;  ; Bool_t HandleDNDFinished () override;  ; Bool_t HandleDoubleClick (Event_t *event) override;  Handle double click mouse event. ;  ; Bool_t HandleExpose (Event_t *event) override;  Handle expose events. Do not use double buffer. ;  ; Bool_t HandleKey (Event_t *event) override;  The key press event handler converts a key press to some line editor action. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion events. ;  ; virtual void Home (Bool_t select=kFALSE);  Move to upper-left corner of container. ;  ; virtual void InvertSelection ();  Invert the selection, all selected items become unselected and vice versa. ;  ; TClass * IsA () const override;  ; virtual void KeyPressed (TGFrame *, UInt_t keysym, UInt_t mask);  Signal emitted when keyboard key pressed. ;  ; void Layout () override;  Layout container entries. ;  ; virtual void LineDown (Bool_t select=kFALSE);  Move one line down. ;  ; virtual void LineLeft (Bool_t select=kFALSE);  Move current position one column left. ;  ; virtual void LineRight (Bool_t select=kFALSE);  Move current position one column right. ;  ; virtual void LineUp (Bool_t select=kFALSE);  Make current po",MatchSource.WIKI,doc/master/classTGContainer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGContainer.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGContainerKeyboardTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGContainerKeyboardTimer.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGContainerKeyboardTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGContainerKeyboardTimer.html
Modifiability,inherit,inherited,". ROOT: TGContainerKeyboardTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TGContainerKeyboardTimer Class Reference. . Definition at line 93 of file TGCanvas.cxx. Public Member Functions;  TGContainerKeyboardTimer (TGContainer *t);  ; Bool_t Notify () override;  single shot timer ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, ",MatchSource.WIKI,doc/master/classTGContainerKeyboardTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGContainerKeyboardTimer.html
Safety,timeout,timeout,"r * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Timeout ();  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (co",MatchSource.WIKI,doc/master/classTGContainerKeyboardTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGContainerKeyboardTimer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGContainerKeyboardTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGContainerKeyboardTimer.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGContainerScrollTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGContainerScrollTimer.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGContainerScrollTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGContainerScrollTimer.html
Modifiability,inherit,inherited,". ROOT: TGContainerScrollTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TGContainerScrollTimer Class Reference. . Definition at line 114 of file TGCanvas.cxx. Public Member Functions;  TGContainerScrollTimer (TGContainer *t);  ; Bool_t Notify () override;  on-timeout ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singl",MatchSource.WIKI,doc/master/classTGContainerScrollTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGContainerScrollTimer.html
Safety,timeout,timeout,". ROOT: TGContainerScrollTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TGContainerScrollTimer Class Reference. . Definition at line 114 of file TGCanvas.cxx. Public Member Functions;  TGContainerScrollTimer (TGContainer *t);  ; Bool_t Notify () override;  on-timeout ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singl",MatchSource.WIKI,doc/master/classTGContainerScrollTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGContainerScrollTimer.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGContainerScrollTimer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGContainerScrollTimer.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGDMLMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDMLMatrix.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGDMLMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDMLMatrix.html
Modifiability,inherit,inherited," and writing the GDML ""matrix"" tag. ; It represents a matrix with arbitrary number of rows and columns, storing elements in double precision. ; Definition at line 33 of file TGDMLMatrix.h. Public Member Functions;  TGDMLMatrix ();  ;  TGDMLMatrix (const char *name, size_t rows, size_t cols);  ;  TGDMLMatrix (const TGDMLMatrix &rhs);  ;  ~TGDMLMatrix () override;  ; Double_t Get (size_t r, size_t c) const;  ; size_t GetCols () const;  ; const char * GetMatrixAsString () const;  ; size_t GetRows () const;  ; TClass * IsA () const override;  ; TGDMLMatrix & operator= (const TGDMLMatrix &rhs);  ; void Print (Option_t *option="""") const override;  This method must be overridden when a class wants to print itself. ;  ; void Set (size_t r, size_t c, Double_t a);  ; void SetMatrixAsString (const char *mat);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTGDMLMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDMLMatrix.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGDMLMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDMLMatrix.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGDMLParse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDMLParse.html
Integrability,depend,dependent,". ROOT: TGDMLParse Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TGDMLParse Class ReferenceThe Geometry Package » GDML tools. ; This class contains the implementation of the GDML parser associated to all the supported GDML elements. ; User should never need to explicitly instaciate this class. It is internally used by the TGeoManager.; Each element process has a 'Binding' to ROOT. The 'binding' is specific mapping of GDML elements (materials, solids, etc) to specific objects which should be instanciated by the converted. In the present case (ROOT) the binding is implemented at the near the end of each process function. Most bindings follow similar format, dependent on what is being added to the geometry.; This file also contains the implementation of the TGDMLRefl class. This is just a small helper class used internally by the 'reflection' method (for reflected solids).; The presently supported list of TGeo classes is the following:; Materials:. TGeoElement; TGeoMaterial; TGeoMixture. Solids:. TGeoBBox; TGeoArb8; TGeoTubeSeg; TGeoConeSeg; TGeoCtub; TGeoPcon; TGeoTrap; TGeoGtra; TGeoTrd2; TGeoSphere; TGeoPara; TGeoTorus; TGeoHype; TGeoPgon; TGeoXtru; TGeoEltu; TGeoParaboloid; TGeoCompositeShape (subtraction, union, intersection). Approximated Solids:. Ellipsoid (approximated to a TGeoBBox); Elliptical cone (approximated to a TGeoCone). Geometry:. TGeoVolume; TGeoVolumeAssembly; divisions; reflection. When most solids or volumes are added to the geometry they; Whenever a new element is added to GDML schema, this class needs to be extended. The appropriate method (process) needs to be implemented, as well as the new element process then needs to be linked thru the function TGDMLParse; For any question or remarks concerning this ",MatchSource.WIKI,doc/master/classTGDMLParse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDMLParse.html
Modifiability,extend,extended," be instanciated by the converted. In the present case (ROOT) the binding is implemented at the near the end of each process function. Most bindings follow similar format, dependent on what is being added to the geometry.; This file also contains the implementation of the TGDMLRefl class. This is just a small helper class used internally by the 'reflection' method (for reflected solids).; The presently supported list of TGeo classes is the following:; Materials:. TGeoElement; TGeoMaterial; TGeoMixture. Solids:. TGeoBBox; TGeoArb8; TGeoTubeSeg; TGeoConeSeg; TGeoCtub; TGeoPcon; TGeoTrap; TGeoGtra; TGeoTrd2; TGeoSphere; TGeoPara; TGeoTorus; TGeoHype; TGeoPgon; TGeoXtru; TGeoEltu; TGeoParaboloid; TGeoCompositeShape (subtraction, union, intersection). Approximated Solids:. Ellipsoid (approximated to a TGeoBBox); Elliptical cone (approximated to a TGeoCone). Geometry:. TGeoVolume; TGeoVolumeAssembly; divisions; reflection. When most solids or volumes are added to the geometry they; Whenever a new element is added to GDML schema, this class needs to be extended. The appropriate method (process) needs to be implemented, as well as the new element process then needs to be linked thru the function TGDMLParse; For any question or remarks concerning this code, please send an email to ben.l.nosp@m.loyd.nosp@m.@cern.nosp@m..ch ; Definition at line 95 of file TGDMLParse.h. Public Member Functions;  TGDMLParse ();  Constructor. ;  ;  ~TGDMLParse () override;  ; TGeoVolume * GDMLReadFile (const char *filename=""test.gdml"");  Creates the new instance of the XMLEngine called 'gdml', using the filename >> then parses the file and creates the DOM tree. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TOb",MatchSource.WIKI,doc/master/classTGDMLParse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDMLParse.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGDMLParse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDMLParse.html
Testability,test,test,"; TGeoMaterial; TGeoMixture. Solids:. TGeoBBox; TGeoArb8; TGeoTubeSeg; TGeoConeSeg; TGeoCtub; TGeoPcon; TGeoTrap; TGeoGtra; TGeoTrd2; TGeoSphere; TGeoPara; TGeoTorus; TGeoHype; TGeoPgon; TGeoXtru; TGeoEltu; TGeoParaboloid; TGeoCompositeShape (subtraction, union, intersection). Approximated Solids:. Ellipsoid (approximated to a TGeoBBox); Elliptical cone (approximated to a TGeoCone). Geometry:. TGeoVolume; TGeoVolumeAssembly; divisions; reflection. When most solids or volumes are added to the geometry they; Whenever a new element is added to GDML schema, this class needs to be extended. The appropriate method (process) needs to be implemented, as well as the new element process then needs to be linked thru the function TGDMLParse; For any question or remarks concerning this code, please send an email to ben.l.nosp@m.loyd.nosp@m.@cern.nosp@m..ch ; Definition at line 95 of file TGDMLParse.h. Public Member Functions;  TGDMLParse ();  Constructor. ;  ;  ~TGDMLParse () override;  ; TGeoVolume * GDMLReadFile (const char *filename=""test.gdml"");  Creates the new instance of the XMLEngine called 'gdml', using the filename >> then parses the file and creates the DOM tree. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove se",MatchSource.WIKI,doc/master/classTGDMLParse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDMLParse.html
Usability,simpl,simple,"d. ; when the cutTube keyword is found, this function is called, and the dimensions required are taken and stored, these are then bound and converted to type TGeoCtub and stored in fsolmap map using the name as its key. ; Definition at line 3037 of file TGDMLParse.cxx. ◆ DeclFileName(). static const char * TGDMLParse::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 226 of file TGDMLParse.h. ◆ DefineConstants(). void TGDMLParse::DefineConstants ; (; ). private . Define constant expressions used. ; Definition at line 494 of file TGDMLParse.cxx. ◆ ElCone(). XMLNodePointer_t TGDMLParse::ElCone ; (; TXMLEngine * ; gdml, . XMLNodePointer_t ; node, . XMLAttrPointer_t ; attr . ). private . In the solids section of the GDML file, an elliptical cone may be declared. ; Unfortunately, the elliptical cone is not supported under ROOT so, when the elcone keyword is found, this function is called to convert it to a simple box with similar dimensions, and the dimensions required are taken and stored, these are then bound and converted to type TGeoBBox and stored in fsolmap map using the name as its key. ; Definition at line 2707 of file TGDMLParse.cxx. ◆ EleProcess(). XMLNodePointer_t TGDMLParse::EleProcess ; (; TXMLEngine * ; gdml, . XMLNodePointer_t ; node, . XMLNodePointer_t ; parentn, . Bool_t ; hasIsotopes, . Bool_t ; hasIsotopesExtended . ). private . When the element keyword is found, this function is called, and the name and values of the element are converted into type TGeoElement and stored in felemap map using the name as its key. ; Definition at line 1086 of file TGDMLParse.cxx. ◆ Ellipsoid(). XMLNodePointer_t TGDMLParse::Ellipsoid ; (; TXMLEngine * ; gdml, . XMLNodePointer_t ; node, . XMLAttrPointer_t ; attr . ). private . In the solids section of the GDML file, an ellipsoid may be declared. ; Unfortunately, the ellipsoid is not supported under ROOT so, when the ellipsoid keyword is found, this function is",MatchSource.WIKI,doc/master/classTGDMLParse.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDMLParse.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGDMLRefl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDMLRefl.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGDMLRefl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDMLRefl.html
Modifiability,inherit,inherited,"List of all members ; TGDMLRefl Class ReferenceThe Geometry Package » GDML tools. ; This class is a helper class for TGDMLParse. ; It assists in the reflection process. This process takes a previously defined solid and can reflect the matrix of it. This class stores the name of the reflected solid, along with the name of the solid that is being reflected, and finally the reflected solid's matrix. This is then recalled when the volume is used in the structure part of the gdml file. ; Definition at line 30 of file TGDMLParse.h. Public Member Functions;  TGDMLRefl ();  ;  TGDMLRefl (const char *name, const char *solid, TGeoMatrix *matrix);  This constructor method stores the values brought in as params. ;  ;  ~TGDMLRefl () override;  ; TGeoMatrix * GetMatrix ();  This accessor method returns the matrix. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTGDMLRefl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDMLRefl.html
Security,access,accessor,". ROOT: TGDMLRefl Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TGDMLRefl Class ReferenceThe Geometry Package » GDML tools. ; This class is a helper class for TGDMLParse. ; It assists in the reflection process. This process takes a previously defined solid and can reflect the matrix of it. This class stores the name of the reflected solid, along with the name of the solid that is being reflected, and finally the reflected solid's matrix. This is then recalled when the volume is used in the structure part of the gdml file. ; Definition at line 30 of file TGDMLParse.h. Public Member Functions;  TGDMLRefl ();  ;  TGDMLRefl (const char *name, const char *solid, TGeoMatrix *matrix);  This constructor method stores the values brought in as params. ;  ;  ~TGDMLRefl () override;  ; TGeoMatrix * GetMatrix ();  This accessor method returns the matrix. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the ",MatchSource.WIKI,doc/master/classTGDMLRefl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDMLRefl.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGDMLWrite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDMLWrite.html
Deployability,update,updated," |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TGDMLWrite Class ReferenceThe Geometry Package » GDML tools. ; This class contains implementation of converting ROOT's gGeoManager geometry to GDML file. ; gGeoManager is the instance of TGeoManager class containing tree of geometries creating resulting geometry. GDML is xml based format of file mirroring the tree of geometries according to GDML schema rules. For more information about GDML see http://gdml.web.cern.ch. Each object in ROOT is represented by xml tag (=xml node/element) in GDML.; This class is not needed to be instanciated. It should always be called by gGeoManager->Export(""xyz.gdml"") method. Export is driven by extenstion that is why "".gdml"" is important in resulting name.; Whenever a new ROOT geometry object is implemented or there is a change in GDML schema this class is needed to be updated to ensure proper mapping between ROOT objects and GDML elements.; Current status of mapping ROOT -> GDML is implemented in method called TGDMLWrite::ChooseObject and it contains following ""map"":; Solids:; TGeoBBox -> <box ... >; TGeoParaboloid -> <paraboloid ...>; TGeoSphere -> <sphere ...>; TGeoArb8 -> <arb8 ...>; TGeoConeSeg -> <cone ...>; TGeoCone -> <cone ...>; TGeoPara -> <para ...>; TGeoTrap -> <trap ...> or; - -> <arb8 ...>; TGeoGtra -> <twistedtrap ...> or; - -> <trap ...> or; - -> <arb8 ...>; TGeoTrd1 -> <trd ...>; TGeoTrd2 -> <trd ...>; TGeoTubeSeg -> <tube ...>; TGeoCtub -> <cutTube ...>; TGeoTube -> <tube ...>; TGeoPcon -> <polycone ...>; TGeoTorus -> <torus ...>; TGeoPgon -> <polyhedra ...>; TGeoEltu -> <eltube ...>; TGeoHype -> <hype ...>; TGeoXtru -> <xtru ...>; TGeoTessellated -> <tessellated ...>; TGeoCompositeShape -> <union ...> or; - -> <subtraction ...> or; - -> <intersection ...>; ; Special cases of solids:; TGeoScaledShape -> <elcone",MatchSource.WIKI,doc/master/classTGDMLWrite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDMLWrite.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGDMLWrite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDMLWrite.html
Modifiability,inherit,inherited,"__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; nconst Int_t nDefinition legend1.C:16; USAGE:; gGeoManager->Export(""output.gdml"");; gGeoManager->Export(""output.gdml"","""",""vg""); //the same as previous just; //options are set explicitly; gGeoManager->Export(""output.gdml"","""",""vgf"");; gGeoManager->Export(""output.gdml"","""",""gn"");; gGeoManager->Export(""output.gdml"","""",""f"");; ...; TGeoManager::Exportvirtual Int_t Export(const char *filename, const char *name="""", Option_t *option=""vg"")Export this geometry to a file.Definition TGeoManager.cxx:3975; Note:; Options discussed above are used only for TGDMLWrite class. There are other options in the TGeoManager::Export(...) method that can be used. See that function for details. ; Definition at line 56 of file TGDMLWrite.h. Classes; struct  NameLst;  ; struct  StructLst;  ; struct  Xyz;  . Public Types; enum  ENamingType { kelegantButSlow = 0; , kwithoutSufixNotUniq = 1; , kfastButUglySufix = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGDMLWrite ();  Default constructor. ;  ;  ~TGDMLWrite () override;  Destructor. ;  ; void SetG4Compatibility (Bool_t G4Compatible);  ; void SetIgnoreDummyMaterial (bool value);  Ignore dummy material instance, which causes trouble reading GDML in Geant4. ;  ; void SetNamingSpeed (ENamingType naming);  Set convention of naming solids and volumes. ;  ; void WriteGDMLfil",MatchSource.WIKI,doc/master/classTGDMLWrite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDMLWrite.html
Security,secur,secured,"ts.Definition TGeoMaterial.h:159; Structure; TGeoVolume -> <volume ...> or; - -> <assembly ...>; TGeoNode -> <physvol ...>; TGeoPatternFinder -> <divisionvol ...>; TGeoNodeA node represent a volume positioned inside another.They store links to both volumes and to the TGeoM...Definition TGeoNode.h:39; TGeoPatternFinderBase finder class for patterns.Definition TGeoPatternFinder.h:31; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; There are options that can be set to change resulting document; Options:; g - is set by default in gGeoManager, this option ensures compatibility; - with Geant4. It means:; - -> atomic number of material will be changed if <1 to 1; - -> if polycone is set badly it will try to export it correctly; - -> if widht * ndiv + offset is more then width of object being divided; - (in divisions) then it will be rounded so it will not exceed or; - if kPhi divsion then it will keep range of offset in -360 -> 0; f - if this option is set then names of volumes and solids will have; - pointer as a suffix to ensure uniqness of names; n - if this option is set then names will not have suffix, but uniqness is; - of names is not secured; - - if none of this two options (f,n) is set then default behaviour is so; - that incremental suffix is added to the names.; - (eg. TGeoBBox_0x1, TGeoBBox_0x2 ...); f#define f(i)Definition RSha256.hxx:104; g#define g(i)Definition RSha256.hxx:105; a#define a(i)Definition RSha256.hxx:99; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid",MatchSource.WIKI,doc/master/classTGDMLWrite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDMLWrite.html
Testability,test,test,"IsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGDMLWrite ();  Default constructor. ;  ;  ~TGDMLWrite () override;  Destructor. ;  ; void SetG4Compatibility (Bool_t G4Compatible);  ; void SetIgnoreDummyMaterial (bool value);  Ignore dummy material instance, which causes trouble reading GDML in Geant4. ;  ; void SetNamingSpeed (ENamingType naming);  Set convention of naming solids and volumes. ;  ; void WriteGDMLfile (TGeoManager *geomanager, const char *filename=""test.gdml"", TString option="""");  ; void WriteGDMLfile (TGeoManager *geomanager, TGeoNode *top_node, const char *filename=""test.gdml"", TString option="""");  ; void WriteGDMLfile (TGeoManager *geomanager, TGeoVolume *top_vol, const char *filename=""test.gdml"", TString option="""");  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value ",MatchSource.WIKI,doc/master/classTGDMLWrite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDMLWrite.html
Availability,mask,mask,"on at line 83 of file TGDNDManager.h. Public Member Functions;  TGDNDManager (TGFrame *toplevel, Atom_t *typelist);  TGDNDManager constructor. ;  ;  ~TGDNDManager () override;  TGDNDManager destructor. ;  ; Bool_t Drag (Int_t x_root, Int_t y_root, Atom_t action, Time_t timestamp);  Process drag event. ;  ; Bool_t Drop ();  Drop. ;  ; Bool_t EndDrag ();  End dragging. ;  ; TGFrame * GetMainFrame () const;  ; Window_t GetSource () const;  ; Window_t GetTarget () const;  ; Atom_t * GetTypeList () const;  ; Bool_t HandleClientMessage (Event_t *event);  Handle DND related client messages. ;  ; Bool_t HandleSelection (Event_t *event);  Handle selection event. ;  ; Bool_t HandleSelectionRequest (Event_t *event);  Handle selection request event. ;  ; Bool_t HandleTimer (TTimer *t) override;  Handle Drop timeout. ;  ; TClass * IsA () const override;  ; Bool_t IsDragging () const;  ; Bool_t RemoveRootProxy ();  Remove root window proxy. ;  ; void SetDragPixmap (Pixmap_t pic, Pixmap_t mask, Int_t hot_x, Int_t hot_y);  Set drag window pixmaps and hotpoint. ;  ; void SetMainFrame (TGFrame *main);  ; Bool_t SetRootProxy ();  Set root window proxy. ;  ; Bool_t StartDrag (TGFrame *src, Int_t x_root, Int_t y_root, Window_t grabWin=kNone);  Start dragging. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this c",MatchSource.WIKI,doc/master/classTGDNDManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDNDManager.html
Integrability,message,messages,". ROOT: TGDNDManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGDNDManager Class Reference. . Definition at line 83 of file TGDNDManager.h. Public Member Functions;  TGDNDManager (TGFrame *toplevel, Atom_t *typelist);  TGDNDManager constructor. ;  ;  ~TGDNDManager () override;  TGDNDManager destructor. ;  ; Bool_t Drag (Int_t x_root, Int_t y_root, Atom_t action, Time_t timestamp);  Process drag event. ;  ; Bool_t Drop ();  Drop. ;  ; Bool_t EndDrag ();  End dragging. ;  ; TGFrame * GetMainFrame () const;  ; Window_t GetSource () const;  ; Window_t GetTarget () const;  ; Atom_t * GetTypeList () const;  ; Bool_t HandleClientMessage (Event_t *event);  Handle DND related client messages. ;  ; Bool_t HandleSelection (Event_t *event);  Handle selection event. ;  ; Bool_t HandleSelectionRequest (Event_t *event);  Handle selection request event. ;  ; Bool_t HandleTimer (TTimer *t) override;  Handle Drop timeout. ;  ; TClass * IsA () const override;  ; Bool_t IsDragging () const;  ; Bool_t RemoveRootProxy ();  Remove root window proxy. ;  ; void SetDragPixmap (Pixmap_t pic, Pixmap_t mask, Int_t hot_x, Int_t hot_y);  Set drag window pixmaps and hotpoint. ;  ; void SetMainFrame (TGFrame *main);  ; Bool_t SetRootProxy ();  Set root window proxy. ;  ; Bool_t StartDrag (TGFrame *src, Int_t x_root, Int_t y_root, Window_t grabWin=kNone);  Start dragging. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (c",MatchSource.WIKI,doc/master/classTGDNDManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDNDManager.html
Modifiability,inherit,inherited,"indow_t GetSource () const;  ; Window_t GetTarget () const;  ; Atom_t * GetTypeList () const;  ; Bool_t HandleClientMessage (Event_t *event);  Handle DND related client messages. ;  ; Bool_t HandleSelection (Event_t *event);  Handle selection event. ;  ; Bool_t HandleSelectionRequest (Event_t *event);  Handle selection request event. ;  ; Bool_t HandleTimer (TTimer *t) override;  Handle Drop timeout. ;  ; TClass * IsA () const override;  ; Bool_t IsDragging () const;  ; Bool_t RemoveRootProxy ();  Remove root window proxy. ;  ; void SetDragPixmap (Pixmap_t pic, Pixmap_t mask, Int_t hot_x, Int_t hot_y);  Set drag window pixmaps and hotpoint. ;  ; void SetMainFrame (TGFrame *main);  ; Bool_t SetRootProxy ();  Set root window proxy. ;  ; Bool_t StartDrag (TGFrame *src, Int_t x_root, Int_t y_root, Window_t grabWin=kNone);  Start dragging. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTGDNDManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDNDManager.html
Safety,timeout,timeout,"ctions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TGDNDManager Class Reference. . Definition at line 83 of file TGDNDManager.h. Public Member Functions;  TGDNDManager (TGFrame *toplevel, Atom_t *typelist);  TGDNDManager constructor. ;  ;  ~TGDNDManager () override;  TGDNDManager destructor. ;  ; Bool_t Drag (Int_t x_root, Int_t y_root, Atom_t action, Time_t timestamp);  Process drag event. ;  ; Bool_t Drop ();  Drop. ;  ; Bool_t EndDrag ();  End dragging. ;  ; TGFrame * GetMainFrame () const;  ; Window_t GetSource () const;  ; Window_t GetTarget () const;  ; Atom_t * GetTypeList () const;  ; Bool_t HandleClientMessage (Event_t *event);  Handle DND related client messages. ;  ; Bool_t HandleSelection (Event_t *event);  Handle selection event. ;  ; Bool_t HandleSelectionRequest (Event_t *event);  Handle selection request event. ;  ; Bool_t HandleTimer (TTimer *t) override;  Handle Drop timeout. ;  ; TClass * IsA () const override;  ; Bool_t IsDragging () const;  ; Bool_t RemoveRootProxy ();  Remove root window proxy. ;  ; void SetDragPixmap (Pixmap_t pic, Pixmap_t mask, Int_t hot_x, Int_t hot_y);  Set drag window pixmaps and hotpoint. ;  ; void SetMainFrame (TGFrame *main);  ; Bool_t SetRootProxy ();  Set root window proxy. ;  ; Bool_t StartDrag (TGFrame *src, Int_t x_root, Int_t y_root, Window_t grabWin=kNone);  Start dragging. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option",MatchSource.WIKI,doc/master/classTGDNDManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDNDManager.html
Security,hash,hash," event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGDNDManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDNDManager.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGDockableFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDockableFrame.html
Integrability,message,messages,"nt frame that on closure will put the frame back in the dock. ; Definition at line 82 of file TGDockableFrame.h. Public Member Functions;  TGDockableFrame (const TGWindow *p=nullptr, Int_t id=-1, UInt_t options=kHorizontalFrame);  Create a dockable frame widget. ;  ;  ~TGDockableFrame () override;  Cleanup dockable frame. ;  ; void AddFrame (TGFrame *f, TGLayoutHints *hints) override;  Add frame to dockable frame container. Frame and hints are NOT adopted. ;  ; void DockContainer (Int_t del=kTRUE);  Dock container back to TGDockableFrame. ;  ; virtual void Docked ();  ; Bool_t EnableHide () const;  ; void EnableHide (Bool_t onoff);  Enable hiding. ;  ; Bool_t EnableUndock () const;  ; void EnableUndock (Bool_t onoff);  Enable undocking. ;  ; TGCompositeFrame * GetContainer () const;  ; TGUndockedFrame * GetUndocked () const;  ; void HideContainer ();  Hide dock container. ;  ; TClass * IsA () const override;  ; Bool_t IsFixedSize () const;  ; Bool_t IsHidden () const;  ; Bool_t IsUndocked () const;  ; Bool_t ProcessMessage (Longptr_t, Longptr_t, Longptr_t) override;  Process dockable frame messages. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a dockable frame widget as a C++ statement(s) on output stream out. ;  ; void SetFixedSize (Bool_t fixed);  ; void SetWindowName (const char *name) override;  Set window name so it appear as title of the undock window. ;  ; void ShowContainer ();  Show dock container. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UndockContainer ();  Undock container. ;  ; virtual void Undocked ();  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a",MatchSource.WIKI,doc/master/classTGDockableFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDockableFrame.html
Modifiability,inherit,inherited,"r () const;  ; TGUndockedFrame * GetUndocked () const;  ; void HideContainer ();  Hide dock container. ;  ; TClass * IsA () const override;  ; Bool_t IsFixedSize () const;  ; Bool_t IsHidden () const;  ; Bool_t IsUndocked () const;  ; Bool_t ProcessMessage (Longptr_t, Longptr_t, Longptr_t) override;  Process dockable frame messages. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a dockable frame widget as a C++ statement(s) on output stream out. ;  ; void SetFixedSize (Bool_t fixed);  ; void SetWindowName (const char *name) override;  Set window name so it appear as title of the undock window. ;  ; void ShowContainer ();  Show dock container. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UndockContainer ();  Undock container. ;  ; virtual void Undocked ();  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects contained in this composite frame. ;  ; virtual TGFrameElement * FindFrameElement (TGFrame *f) const;  Find frame-element holding frame f. ;  ; UInt_t GetDefaultHeight () const override;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; UInt_t GetDefaultWidth () const override;  ; TGFrame * GetFrameFromPoint (Int_t",MatchSource.WIKI,doc/master/classTGDockableFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDockableFrame.html
Security,hash,hash,"TGIdleHandler *);  ; Bool_t HandleTimer (TTimer *) override;  Execute action in response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; TClass * IsA () const override;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGDockableFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDockableFrame.html
Usability,undo,undocked,". ROOT: TGDockableFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TGDockableFrame Class ReferenceGUI » Low level GUI widgets. ; A frame with handles that allow it to be undocked (i.e. ; put in a transient frame of its own) and to be docked again or hidden and shown again. It uses the TGDockButton, which is a button with two vertical bars (||) and TGDockHideButton, which is a button with a small triangle. The TGUndockedFrame is a transient frame that on closure will put the frame back in the dock. ; Definition at line 82 of file TGDockableFrame.h. Public Member Functions;  TGDockableFrame (const TGWindow *p=nullptr, Int_t id=-1, UInt_t options=kHorizontalFrame);  Create a dockable frame widget. ;  ;  ~TGDockableFrame () override;  Cleanup dockable frame. ;  ; void AddFrame (TGFrame *f, TGLayoutHints *hints) override;  Add frame to dockable frame container. Frame and hints are NOT adopted. ;  ; void DockContainer (Int_t del=kTRUE);  Dock container back to TGDockableFrame. ;  ; virtual void Docked ();  ; Bool_t EnableHide () const;  ; void EnableHide (Bool_t onoff);  Enable hiding. ;  ; Bool_t EnableUndock () const;  ; void EnableUndock (Bool_t onoff);  Enable undocking. ;  ; TGCompositeFrame * GetContainer () const;  ; TGUndockedFrame * GetUndocked () const;  ; void HideContainer ();  Hide dock container. ;  ; TClass * IsA () const override;  ; Bool_t IsFixedSize () const;  ; Bool_t IsHidden () const;  ; Bool_t IsUndocked () const;  ; Bool_t ProcessMessage (Longptr_t, Longptr_t, Longptr_t) override;  Process dockable frame messages. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a dockable frame widget as a C++ statement(s) on output stream out. ;  ; void SetFixedSize (Bool_t fixed);  ; void SetWindowName (const ch",MatchSource.WIKI,doc/master/classTGDockableFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDockableFrame.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGDockButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDockButton.html
Integrability,message,message,"this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual UInt_t GetDefaultHeight () const;  ; virtual TGDimension GetDefaultSize () const;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; virtual UInt_t GetDefaultWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; virtual TGFrame * GetFrameFromPoint (Int_t x, Int_t y);  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; virtual Bool_t HandleDoubleClick (Event_t *);  ; virtual Bool_t HandleDragDrop (TGFrame *, Int_t, Int_t, TGLayoutHints *);  ; virtual Bool_t HandleDragEnter (TGFrame *);  ; virtual Bool_t HandleDragLeave (TGFrame *);  ; virtual Bool_t HandleDragMotion (TGFrame *);  ; Bool_t HandleEvent (Event_t *event) override;  Handle all frame events.",MatchSource.WIKI,doc/master/classTGDockButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDockButton.html
Modifiability,inherit,inherited,". ROOT: TGDockButton Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGDockButton Class Reference. . Definition at line 28 of file TGDockableFrame.h. Public Member Functions;  TGDockButton (const TGCompositeFrame *p=nullptr, Int_t id=1);  Create a dock button (i.e. button with two vertical bars). ;  ;  ~TGDockButton () override;  Delete dock button. ;  ; Bool_t HandleCrossing (Event_t *event) override;  Handle dock button crossing events. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGButton;  TGButton (const TGWindow *p=nullptr, Int_t id=-1, GContext_t norm=GetDefaultGC()(), UInt_t option=kRaisedFrame|kDoubleBorder);  Create button base class part. ;  ;  ~TGButton () override;  Delete button. ;  ; virtual void AllowStayDown (Bool_t a);  ; virtual void Clicked ();  ; TGButtonGroup * GetGroup () const;  ; GContext_t GetNormGC () const;  ; virtual EButtonState GetState () const;  ; virtual UInt_t GetStyle () const;  ; virtual TGToolTip * GetToolTip () const;  ; virtual void * GetUserData () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event. ;  ; virtual Bool_t IsDown () const;  ; virtual Bool_t IsExclusiveToggle () const;  ; virtual Bool_t IsOn () const;  ; virtual Bool_t IsToggleButton () const;  ; virtual void Pressed ();  ; virtual void Released ();  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a button widget as a C++ statement(s) on output stream out. ;  ; virtual void SetDown (Bool_t on=kTRUE, Bool_t emit=kFALSE);  ; virtual void SetEnabled (Bool_t e=kTRUE);  Set enabled or disabled state of button. ;  ; virtual void ",MatchSource.WIKI,doc/master/classTGDockButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDockButton.html
Security,hash,hash,"pped on screen, kFALSE otherwise. ;  ; virtual Bool_t IsMapSubwindows () const;  ; virtual void LowerWindow ();  lower window ;  ; virtual Int_t MustCleanup () const;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetEditDisabled (UInt_t on=kEditDisable);  ; virtual void SetMapSubwindows (Bool_t);  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGDockButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDockButton.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGDockHideButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDockHideButton.html
Integrability,message,message,"this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual UInt_t GetDefaultHeight () const;  ; virtual TGDimension GetDefaultSize () const;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; virtual UInt_t GetDefaultWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; virtual TGFrame * GetFrameFromPoint (Int_t x, Int_t y);  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; virtual Bool_t HandleDoubleClick (Event_t *);  ; virtual Bool_t HandleDragDrop (TGFrame *, Int_t, Int_t, TGLayoutHints *);  ; virtual Bool_t HandleDragEnter (TGFrame *);  ; virtual Bool_t HandleDragLeave (TGFrame *);  ; virtual Bool_t HandleDragMotion (TGFrame *);  ; Bool_t HandleEvent (Event_t *event) override;  Handle all frame events.",MatchSource.WIKI,doc/master/classTGDockHideButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDockHideButton.html
Modifiability,inherit,inherited,". ROOT: TGDockHideButton Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGDockHideButton Class Reference. . Definition at line 47 of file TGDockableFrame.h. Public Member Functions;  TGDockHideButton (const TGCompositeFrame *p=nullptr);  Create a dock hide button (i.e. button with small triangle). ;  ; TClass * IsA () const override;  ; void SetAspectRatio (Int_t a);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGDockButton;  TGDockButton (const TGCompositeFrame *p=nullptr, Int_t id=1);  Create a dock button (i.e. button with two vertical bars). ;  ;  ~TGDockButton () override;  Delete dock button. ;  ; Bool_t HandleCrossing (Event_t *event) override;  Handle dock button crossing events. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGButton;  TGButton (const TGWindow *p=nullptr, Int_t id=-1, GContext_t norm=GetDefaultGC()(), UInt_t option=kRaisedFrame|kDoubleBorder);  Create button base class part. ;  ;  ~TGButton () override;  Delete button. ;  ; virtual void AllowStayDown (Bool_t a);  ; virtual void Clicked ();  ; TGButtonGroup * GetGroup () const;  ; GContext_t GetNormGC () const;  ; virtual EButtonState GetState () const;  ; virtual UInt_t GetStyle () const;  ; virtual TGToolTip * GetToolTip () const;  ; virtual void * GetUserData () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event. ;  ; virtual Bool_t IsDown () const;  ; virtual Bool_t IsExclusiveToggle () const;  ; virtual Bool_t IsOn () const;  ; virtual Bool_t IsToggleButton () const;  ; virtual void Pressed ();  ; virtual void Released ();  ; void SavePrimitive (std",MatchSource.WIKI,doc/master/classTGDockHideButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDockHideButton.html
Security,hash,hash,"pped on screen, kFALSE otherwise. ;  ; virtual Bool_t IsMapSubwindows () const;  ; virtual void LowerWindow ();  lower window ;  ; virtual Int_t MustCleanup () const;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetEditDisabled (UInt_t on=kEditDisable);  ; virtual void SetMapSubwindows (Bool_t);  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGDockHideButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDockHideButton.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGDoubleHSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDoubleHSlider.html
Integrability,message,message,"o which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual UInt_t GetDefaultHeight () const;  ; virtual UInt_t GetDefaultWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; virtual TGFrame * GetFrameFromPoint (Int_t x, Int_t y);  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleCrossing (Event_t *);  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; virtual Bool_t HandleDoubleClick (Event_t *);  ; virtual Bool_t HandleDragDrop (TGFrame *, Int_t, Int_t, TGLayoutHints *);  ; virtual Bool_t HandleDragEnter (TGFrame *);  ; virtual Bool_t HandleDragLeave (TGFrame *);  ; virtual Bool_t HandleDragMotion (TGFrame *);  ; Bool_t HandleEvent (Event",MatchSource.WIKI,doc/master/classTGDoubleHSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDoubleHSlider.html
Modifiability,inherit,inherited,"nt_t id=-1, UInt_t options=kHorizontalFrame, Pixel_t back=GetDefaultFrameBackground(), Bool_t reversed=kFALSE, Bool_t mark_ends=kFALSE);  Create horizontal slider widget. ;  ;  ~TGDoubleHSlider () override;  Delete a horizontal slider widget. ;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event in horizontal slider widget. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion event in horizontal slide widget. ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save an horizontal slider as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGDoubleSlider;  TGDoubleSlider (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t type=1, Int_t id=-1, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground(), Bool_t reversed=kFALSE, Bool_t mark_ends=kFALSE);  Slider constructor. ;  ;  ~TGDoubleSlider () override;  ; virtual Float_t GetMaxPosition () const;  ; virtual Double_t GetMaxPositionD () const;  ; virtual Long64_t GetMaxPositionL () const;  ; virtual Float_t GetMinPosition () const;  ; virtual Double_t GetMinPositionD () const;  ; virtual Long64_t GetMinPositionL () const;  ; virtual void GetPosition (Double_t &min, Double_t &max) const;  ; virtual void GetPosition (Double_t *min, Double_t *max) const;  ; virtual void GetPosition (Float_t &min, Float_t &max) const;  ; virtual void GetPosition (Float_t *min, Float_t *max) const;  ; virtual void GetPosition (Long64_t &min, Long64_t &max) const;  ; virtual void GetPosition (Long64_t *min, Long64_t *max) const;  ; TClass * IsA () const override;  ; void MapSubwindows () override;  map sub windows ;  ; virtual void PositionChange",MatchSource.WIKI,doc/master/classTGDoubleHSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDoubleHSlider.html
Security,hash,hash,"pped on screen, kFALSE otherwise. ;  ; virtual Bool_t IsMapSubwindows () const;  ; virtual void LowerWindow ();  lower window ;  ; virtual Int_t MustCleanup () const;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetEditDisabled (UInt_t on=kEditDisable);  ; virtual void SetMapSubwindows (Bool_t);  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGDoubleHSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDoubleHSlider.html
Testability,log,logical,"ace to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TGWidget;  TGWidget (const TGWidget &tgw);  ; Int_t ClearFlags (Int_t flags);  ; TGWidget & operator= (const TGWidget &tgw);  ; Int_t SetFlags (Int_t flags);  . Protected Attributes; Int_t fXp;  horizontal slider x position in pixel coordinates ;  ;  Protected Attributes inherited from TGDoubleSlider; Bool_t fMarkEnds;  lines marking where stretch zones begin ;  ; Int_t fMove;  1: move min value 2: move max value 3: move min and max value 0: don't move any value ;  ; Double_t fPos;  logical position between fVmin and fVmax ;  ; Int_t fPressPoint;  mouse position at button press event ;  ; Double_t fPressSmax;  logical max position at button press event ;  ; Double_t fPressSmin;  logical min position at button press event ;  ; Int_t fRelPos;  slider position in pixel coordinates ;  ; Bool_t fReversedScale;  reverse which end is min and max ;  ; Int_t fScale;  tick mark scale ;  ; Int_t fScaleType;  tick mark scale type (no, downright, both) ;  ; const TGPicture * fSliderPic;  picture to draw slider ends ;  ; Double_t fSmax;  logical position of max value of Slider ;  ; Double_t fSmin;  logical position of min value of Slider ;  ; Double_t fVmax;  logical upper limit of slider ;  ; Double_t fVmin;  logical lower limit of slider ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t",MatchSource.WIKI,doc/master/classTGDoubleHSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDoubleHSlider.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGDoubleSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDoubleSlider.html
Integrability,message,message,"this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual UInt_t GetDefaultHeight () const;  ; virtual TGDimension GetDefaultSize () const;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; virtual UInt_t GetDefaultWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; virtual TGFrame * GetFrameFromPoint (Int_t x, Int_t y);  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleCrossing (Event_t *);  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; virtual Bool_t HandleDoubleClick (Event_t *);  ; virtual Bool_t HandleDragDrop (TGFrame *, Int_t, Int_t, TGLayoutHints *);  ; virtual Bool_t HandleDragEnter (TGFrame *);  ; virtual Bool_t HandleDragLeave (TGFrame *);  ; virtual Bool_t HandleDragMotion (TGFrame *);  ; Bool_t HandleEvent (Event",MatchSource.WIKI,doc/master/classTGDoubleSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDoubleSlider.html
Modifiability,inherit,inherited,"_t *min, Long64_t *max) const;  ; Bool_t HandleButton (Event_t *event) override=0;  ; Bool_t HandleMotion (Event_t *event) override=0;  ; TClass * IsA () const override;  ; void MapSubwindows () override;  map sub windows ;  ; virtual void PositionChanged ();  ; virtual void Pressed ();  ; virtual void Released ();  ; virtual void SetPosition (Double_t min, Double_t max);  ; virtual void SetPosition (Float_t min, Float_t max);  ; virtual void SetPosition (Int_t min, Int_t max);  ; virtual void SetPosition (Long64_t min, Long64_t max);  ; virtual void SetRange (Double_t min, Double_t max);  ; virtual void SetRange (Float_t min, Float_t max);  ; virtual void SetRange (Int_t min, Int_t max);  ; virtual void SetRange (Long64_t min, Long64_t max);  ; virtual void SetScale (Int_t scale);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (UInt_t options);  Change frame options. Options is an OR of the EFrameTypes. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; virtual void DeleteWindow ();  Delete window. ;  ; virtual void DrawBorder ();  Draw frame border. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;",MatchSource.WIKI,doc/master/classTGDoubleSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDoubleSlider.html
Security,hash,hash,"pped on screen, kFALSE otherwise. ;  ; virtual Bool_t IsMapSubwindows () const;  ; virtual void LowerWindow ();  lower window ;  ; virtual Int_t MustCleanup () const;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetEditDisabled (UInt_t on=kEditDisable);  ; virtual void SetMapSubwindows (Bool_t);  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGDoubleSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDoubleSlider.html
Testability,log,logical,"gnature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  . Protected Attributes; Bool_t fMarkEnds;  lines marking where stretch zones begin ;  ; Int_t fMove;  1: move min value 2: move max value 3: move min and max value 0: don't move any value ;  ; Double_t fPos;  logical position between fVmin and fVmax ;  ; Int_t fPressPoint;  mouse position at button press event ;  ; Double_t fPressSmax;  logical max position at button press event ;  ; Double_t fPressSmin;  logical min position at button press event ;  ; Int_t fRelPos;  slider position in pixel coordinates ;  ; Bool_t fReversedScale;  reverse which end is min and max ;  ; Int_t fScale;  tick mark scale ;  ; Int_t fScaleType;  tick mark scale type (no, downright, both) ;  ; const TGPicture * fSliderPic;  picture to draw slider ends ;  ; Double_t fSmax;  logical position of max value of Slider ;  ; Double_t fSmin;  logical position of min value of Slider ;  ; Double_t fVmax;  logical upper limit of slider ;  ; Double_t fVmin;  logical lower limit of slider ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; ",MatchSource.WIKI,doc/master/classTGDoubleSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDoubleSlider.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGDoubleVSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDoubleVSlider.html
Integrability,message,message,"o which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual UInt_t GetDefaultHeight () const;  ; virtual UInt_t GetDefaultWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; virtual TGFrame * GetFrameFromPoint (Int_t x, Int_t y);  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleCrossing (Event_t *);  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; virtual Bool_t HandleDoubleClick (Event_t *);  ; virtual Bool_t HandleDragDrop (TGFrame *, Int_t, Int_t, TGLayoutHints *);  ; virtual Bool_t HandleDragEnter (TGFrame *);  ; virtual Bool_t HandleDragLeave (TGFrame *);  ; virtual Bool_t HandleDragMotion (TGFrame *);  ; Bool_t HandleEvent (Event",MatchSource.WIKI,doc/master/classTGDoubleVSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDoubleVSlider.html
Modifiability,inherit,inherited,"t h=1, UInt_t type=1, Int_t id=-1, UInt_t options=kVerticalFrame, Pixel_t back=GetDefaultFrameBackground(), Bool_t reversed=kFALSE, Bool_t mark_ends=kFALSE);  Create a vertical slider widget. ;  ;  ~TGDoubleVSlider () override;  Delete vertical slider widget. ;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event in vertical slider. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion event in vertical slider. ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save an horizontal slider as a C++ statement(s) on output stream out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGDoubleSlider;  TGDoubleSlider (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t type=1, Int_t id=-1, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground(), Bool_t reversed=kFALSE, Bool_t mark_ends=kFALSE);  Slider constructor. ;  ;  ~TGDoubleSlider () override;  ; virtual Float_t GetMaxPosition () const;  ; virtual Double_t GetMaxPositionD () const;  ; virtual Long64_t GetMaxPositionL () const;  ; virtual Float_t GetMinPosition () const;  ; virtual Double_t GetMinPositionD () const;  ; virtual Long64_t GetMinPositionL () const;  ; virtual void GetPosition (Double_t &min, Double_t &max) const;  ; virtual void GetPosition (Double_t *min, Double_t *max) const;  ; virtual void GetPosition (Float_t &min, Float_t &max) const;  ; virtual void GetPosition (Float_t *min, Float_t *max) const;  ; virtual void GetPosition (Long64_t &min, Long64_t &max) const;  ; virtual void GetPosition (Long64_t *min, Long64_t *max) const;  ; void MapSubwindows () override;  map sub windows ;  ; virtual void PositionChanged ();  ; virtual void Pressed ();  ",MatchSource.WIKI,doc/master/classTGDoubleVSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDoubleVSlider.html
Security,hash,hash,"pped on screen, kFALSE otherwise. ;  ; virtual Bool_t IsMapSubwindows () const;  ; virtual void LowerWindow ();  lower window ;  ; virtual Int_t MustCleanup () const;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetEditDisabled (UInt_t on=kEditDisable);  ; virtual void SetMapSubwindows (Bool_t);  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGDoubleVSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDoubleVSlider.html
Testability,log,logical,"face to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TGWidget;  TGWidget (const TGWidget &tgw);  ; Int_t ClearFlags (Int_t flags);  ; TGWidget & operator= (const TGWidget &tgw);  ; Int_t SetFlags (Int_t flags);  . Protected Attributes; Int_t fYp;  vertical slider y position in pixel coordinates ;  ;  Protected Attributes inherited from TGDoubleSlider; Bool_t fMarkEnds;  lines marking where stretch zones begin ;  ; Int_t fMove;  1: move min value 2: move max value 3: move min and max value 0: don't move any value ;  ; Double_t fPos;  logical position between fVmin and fVmax ;  ; Int_t fPressPoint;  mouse position at button press event ;  ; Double_t fPressSmax;  logical max position at button press event ;  ; Double_t fPressSmin;  logical min position at button press event ;  ; Int_t fRelPos;  slider position in pixel coordinates ;  ; Bool_t fReversedScale;  reverse which end is min and max ;  ; Int_t fScale;  tick mark scale ;  ; Int_t fScaleType;  tick mark scale type (no, downright, both) ;  ; const TGPicture * fSliderPic;  picture to draw slider ends ;  ; Double_t fSmax;  logical position of max value of Slider ;  ; Double_t fSmin;  logical position of min value of Slider ;  ; Double_t fVmax;  logical upper limit of slider ;  ; Double_t fVmin;  logical lower limit of slider ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t ",MatchSource.WIKI,doc/master/classTGDoubleVSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDoubleVSlider.html
Availability,mask,mask,". ROOT: TGDragWindow Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TGDragWindow Class ReferenceGUI » Low level GUI widgets. ; Window used as drag icon during drag and drop operations. ; Definition at line 22 of file TGDNDManager.h. Public Member Functions;  TGDragWindow (const TGWindow *p, Pixmap_t pic, Pixmap_t mask, UInt_t options=kChildFrame, Pixel_t back=GetWhitePixel());  TGDragWindow constructor. ;  ;  ~TGDragWindow () override;  TGDragWindow destructor. ;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; Window_t GetInputId () const;  ; Bool_t HasWindow (Window_t w) const;  ; TClass * IsA () const override;  ; void Layout () override;  Layout TGDragWindow. ;  ; void LowerWindow () override;  Lower TGDragWindow. ;  ; void MapRaised () override;  Map and Raise TGDragWindow. ;  ; void MapWindow () override;  Map TGDragWindow. ;  ; void RaiseWindow () override;  Raise TGDragWindow. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UnmapWindow () override;  Unmap TGDragWindow. ;  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Cha",MatchSource.WIKI,doc/master/classTGDragWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDragWindow.html
Integrability,message,message,"longs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual UInt_t GetDefaultHeight () const;  ; virtual UInt_t GetDefaultWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; virtual TGFrame * GetFrameFromPoint (Int_t x, Int_t y);  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleButton (Event_t *);  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleCrossing (Event_t *);  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; virtual Bool_t HandleDoubleClick (Event_t *);  ; virtual Bool_t HandleDragDrop (TGFrame *, Int_t, Int_t, TGLayoutHints *);  ; virtual Bool_t HandleDragEnter (TGFrame *);  ; virtual Bool_t HandleDragLeave (TGFrame *);  ; virtual Bool_t HandleDragMotion (TGFrame *);  ; Boo",MatchSource.WIKI,doc/master/classTGDragWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDragWindow.html
Modifiability,inherit,inherited,"ns;  TGDragWindow (const TGWindow *p, Pixmap_t pic, Pixmap_t mask, UInt_t options=kChildFrame, Pixel_t back=GetWhitePixel());  TGDragWindow constructor. ;  ;  ~TGDragWindow () override;  TGDragWindow destructor. ;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; Window_t GetInputId () const;  ; Bool_t HasWindow (Window_t w) const;  ; TClass * IsA () const override;  ; void Layout () override;  Layout TGDragWindow. ;  ; void LowerWindow () override;  Lower TGDragWindow. ;  ; void MapRaised () override;  Map and Raise TGDragWindow. ;  ; void MapWindow () override;  Map TGDragWindow. ;  ; void RaiseWindow () override;  Raise TGDragWindow. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UnmapWindow () override;  Unmap TGDragWindow. ;  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (UInt_t options);  Change frame options. Options is an OR of the EFrameTypes. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; virtual void DeleteWindow ();  Delete window. ;  ; virtual void DrawBorder ();  Draw frame border. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_",MatchSource.WIKI,doc/master/classTGDragWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDragWindow.html
Security,hash,hash," ; TClass * IsA () const override;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual Bool_t IsMapSubwindows () const;  ; virtual Int_t MustCleanup () const;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetEditDisabled (UInt_t on=kEditDisable);  ; virtual void SetMapSubwindows (Bool_t);  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGDragWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGDragWindow.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,doc/master/classTGedEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedEditor.html
Integrability,depend,dependent,", TObject *, Int_t);  Set canvas to global editor. ;  ; void Hide () override;  Hide editor. The editor is put into non-active state. ;  ; void InsertGedFrame (TGedFrame *f);  Insert GedFrame in fGedFrames list according to priorities. ;  ; TClass * IsA () const override;  ; Bool_t IsGlobal () const override;  ; void PrintFrameStat ();  Print contents of fFrameMap. ;  ; void RecursiveRemove (TObject *obj) override;  Remove references to fModel in case the fModel is being deleted. ;  ; void ReinitWorkspace ();  Clears windows in editor tab. ;  ; virtual void SetCanvas (TCanvas *c);  Change connection to another canvas. ;  ; void SetGlobal (Bool_t global) override;  Set editor global. ;  ; virtual void SetModel (TVirtualPad *pad, TObject *obj, Int_t event, Bool_t force=kFALSE);  Activate object editors according to the selected object. ;  ; void Show () override;  Show editor. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update (TGedFrame *frame=nullptr);  Virtual method that is called on any change in the dependent frames. ;  ;  Public Member Functions inherited from TVirtualPadEditor;  TVirtualPadEditor ();  Virtual editor ctor. ;  ; virtual ~TVirtualPadEditor ();  Virtual editor dtor. ;  ; virtual void Build ();  ; virtual void DeleteEditors ();  ; virtual void DrawLine (Double_t, Double_t, Double_t, Double_t);  ; virtual void DrawLineNDC (Double_t, Double_t, Double_t, Double_t);  ; virtual void DrawText (Double_t, Double_t, const char *);  ; virtual void DrawTextNDC (Double_t, Double_t, const char *);  ; virtual void FillAttributes (Int_t, Int_t);  ; virtual void LineAttributes (Int_t, Int_t, Int_t);  ; virtual void MarkerAttributes (Int_t, Int_t, Float_t);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TextAttributes (Int_t, Float_t, Int_t, Int_t, Float_t);  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UI",MatchSource.WIKI,doc/master/classTGedEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedEditor.html
Modifiability,inherit,inherited,"e *f);  Insert GedFrame in fGedFrames list according to priorities. ;  ; TClass * IsA () const override;  ; Bool_t IsGlobal () const override;  ; void PrintFrameStat ();  Print contents of fFrameMap. ;  ; void RecursiveRemove (TObject *obj) override;  Remove references to fModel in case the fModel is being deleted. ;  ; void ReinitWorkspace ();  Clears windows in editor tab. ;  ; virtual void SetCanvas (TCanvas *c);  Change connection to another canvas. ;  ; void SetGlobal (Bool_t global) override;  Set editor global. ;  ; virtual void SetModel (TVirtualPad *pad, TObject *obj, Int_t event, Bool_t force=kFALSE);  Activate object editors according to the selected object. ;  ; void Show () override;  Show editor. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update (TGedFrame *frame=nullptr);  Virtual method that is called on any change in the dependent frames. ;  ;  Public Member Functions inherited from TVirtualPadEditor;  TVirtualPadEditor ();  Virtual editor ctor. ;  ; virtual ~TVirtualPadEditor ();  Virtual editor dtor. ;  ; virtual void Build ();  ; virtual void DeleteEditors ();  ; virtual void DrawLine (Double_t, Double_t, Double_t, Double_t);  ; virtual void DrawLineNDC (Double_t, Double_t, Double_t, Double_t);  ; virtual void DrawText (Double_t, Double_t, const char *);  ; virtual void DrawTextNDC (Double_t, Double_t, const char *);  ; virtual void FillAttributes (Int_t, Int_t);  ; virtual void LineAttributes (Int_t, Int_t, Int_t);  ; virtual void MarkerAttributes (Int_t, Int_t, Float_t);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TextAttributes (Int_t, Float_t, Int_t, Int_t, Float_t);  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a top level main frame. ;  ;  ~TGMainFrame () override;  TGMainFrame destructor. ;  ; virtual Bool_t BindK",MatchSource.WIKI,doc/master/classTGedEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedEditor.html
Performance,load,load,"Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TGedEditor * GetFrameCreator ();  Returns TGedEditor that currently creates TGedFrames. ;  ; static void SetFrameCreator (TGedEditor *e);  Set the TGedEditor that currently creates TGedFrames. ;  ;  Static Public Member Functions inherited from TVirtualPadEditor; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static const char * GetEditorName ();  Returns the type of the default pad editor. Static method. ;  ; static TVirtualPadEditor * GetPadEditor (Bool_t load=kTRUE);  Returns the pad editor dialog. Static method. ;  ; static void HideEditor ();  Hide the pad editor. Static method. ;  ; static TVirtualPadEditor * LoadEditor ();  Static function returning a pointer to a new pad editor. ;  ; static void SetPadEditorName (const char *name);  Set type of default pad editor. Static method. ;  ; static void ShowEditor ();  Show the global pad editor. Static method. ;  ; static void Terminate ();  Close the global pad editor. Static method. ;  ; static void UpdateFillAttributes (Int_t col, Int_t sty);  Update fill attributes via the pad editor. ;  ; static void UpdateLineAttributes (Int_t col, Int_t sty, Int_t width);  Update line attributes via the pad editor. ;  ; static void UpdateMarkerAttributes (Int_t col, Int_t sty, Float_t msiz);  Update marker attributes via the pad editor. ;  ; static void UpdateTextAttributes (Int_t align, Float_t angle, Int_t col, Int_t font, Float_t tsize);  Update text attributes via the pad editor. ;  ;  St",MatchSource.WIKI,doc/master/classTGedEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedEditor.html
Security,hash,hash,"TGIdleHandler *);  ; Bool_t HandleTimer (TTimer *) override;  Execute action in response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; TClass * IsA () const override;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGedEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedEditor.html
Usability,simpl,simply,"t editor global. ; Reimplemented from TVirtualPadEditor.; Definition at line 267 of file TGedEditor.cxx. ◆ SetModel(). void TGedEditor::SetModel ; (; TVirtualPad * ; pad, . TObject * ; obj, . Int_t ; event, . Bool_t ; force = kFALSE . ). virtual . Activate object editors according to the selected object. ; Reimplemented in TEveGedEditor.; Definition at line 345 of file TGedEditor.cxx. ◆ Show(). void TGedEditor::Show ; (; ). overridevirtual . Show editor. ; Reimplemented from TVirtualPadEditor.; Definition at line 420 of file TGedEditor.cxx. ◆ Streamer(). void TGedEditor::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TVirtualPadEditor. ◆ StreamerNVirtual(). void TGedEditor::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 98 of file TGedEditor.h. ◆ Update(). void TGedEditor::Update ; (; TGedFrame * ; frame = nullptr). virtual . Virtual method that is called on any change in the dependent frames. ; This implementation simply calls fPad Modified()/Update(). ; Reimplemented in TEveGedEditor.; Definition at line 173 of file TGedEditor.cxx. Member Data Documentation. ◆ fCan. TGCanvas* TGedEditor::fCan. protected . provides scroll bars ; Definition at line 41 of file TGedEditor.h. ◆ fCanvas. TCanvas* TGedEditor::fCanvas. protected . canvas related to the editor ; Definition at line 50 of file TGedEditor.h. ◆ fClass. TClass* TGedEditor::fClass. protected . class of the selected object ; Definition at line 51 of file TGedEditor.h. ◆ fCreatedTabs. TList TGedEditor::fCreatedTabs. protected . list of created tabs ; Definition at line 44 of file TGedEditor.h. ◆ fExclMap. TMap TGedEditor::fExclMap. protected . map of excluded editors for selected model ; Definition at line 38 of file TGedEditor.h. ◆ fFrameMap. TMap TGedEditor::fFrameMap. protected . global map of available frames ; Definition at line 37 of file TGedEditor.h. ◆ fGedFrames. TList TGedEditor::fGedFrames. protected . list visible of frames ; Definition at ",MatchSource.WIKI,doc/master/classTGedEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedEditor.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetO",MatchSource.WIKI,doc/master/classTGedFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedFrame.html
Integrability,message,message,"d DrawBorder ();  Draw frame border. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *="""") const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void DrawCopy (Handle_t, Int_t, Int_t);  ; void Dump () const override;  Dump contents of object on stdout. ;  ; virtual Pixel_t GetBackground () const;  ; Int_t GetBorderWidth () const;  ; virtual TDNDData * GetDNDData (Atom_t);  ; virtual Int_t GetDragType () const;  Returns drag source type. ;  ; virtual Int_t GetDropType () const;  Returns drop target type. ;  ; UInt_t GetEventMask () const;  ; virtual Pixel_t GetForeground () const;  Return frame foreground color. ;  ; TGFrameElement * GetFrameElement () const;  ; UInt_t GetHeight () const;  ; UInt_t GetMaxHeight () const;  ; UInt_t GetMaxWidth () const;  ; UInt_t GetMinHeight () const;  ; UInt_t GetMinWidth () const;  ; virtual UInt_t GetOptions () const;  ; TGDimension GetSize () const;  ; UInt_t GetWidth () const;  ; Int_t GetX () const;  ; Int_t GetY () const;  ; virtual Bool_t HandleClientMessage (Event_t *event);  Handle a client message. ;  ; virtual Bool_t HandleColormapChange (Event_t *);  ; virtual Bool_t HandleConfigureNotify (Event_t *event);  This event is generated when the frame is resized. ;  ; virtual Bool_t HandleDNDDrop (TDNDData *);  ; virtual Atom_t HandleDNDEnter (Atom_t *);  ; virtual Bool_t HandleDNDFinished ();  ; virtual Bool_t HandleDNDLeave ();  ; virtual Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t, Int_t, Int_t);  ; Bool_t HandleEvent (Event_t *event) override;  Handle all frame events. ;  ; virtual Bool_t HandleSelectionClear (Event_t *);  ; virtual Bool_t HandleSelectionRequest (Event_t *);  ; void Inspect () const override;  Dump contents of this object in a graphics canvas. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsActive () const;  ; Bool_t IsDNDSource () con",MatchSource.WIKI,doc/master/classTGedFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedFrame.html
Modifiability,inherit,inherited,"-classes. ;  ; virtual void AddExtraTab (TGedSubFrame *sf);  Adds tab container to list of extra tabs. ;  ;  ClassDefOverride (TGedFrame, 0);  ; virtual TGVerticalFrame * CreateEditorTabSubFrame (const char *name);  Create a vertical frame to be used by 'owner' in extra tab 'name'. ;  ; Option_t * GetDrawOption () const override;  Get draw options of the selected object. ;  ; TList * GetExtraTabs ();  ; TGedEditor * GetGedEditor ();  ; TClass * GetModelClass ();  ; Int_t GetPriority ();  ; virtual void Refresh (TObject *model);  Refresh the GUI info about the object attributes. ;  ; void SetDrawOption (Option_t *option="""") override;  Set drawing option for object. ;  ; virtual void SetGedEditor (TGedEditor *ed);  ; virtual void SetModel (TObject *obj)=0;  ; void SetModelClass (TClass *mcl);  ; virtual void Update ();  Update the current pad when an attribute is changed via GUI. ;  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects contained in this composite frame. ;  ; virtual TGFrameElement * FindFrameElement (TGFrame *f) const;  Find frame-element holding frame f. ;  ; UInt_t GetDefaultHeight () const override;  ; TGDimension GetDefaultSize () const override;  std::cout << fWi",MatchSource.WIKI,doc/master/classTGedFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedFrame.html
Security,hash,hash,"n response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; TClass * IsA () const override;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGedFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedFrame.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGedFrame_1_1TGedSubFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedFrame_1_1TGedSubFrame.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGedFrame_1_1TGedSubFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedFrame_1_1TGedSubFrame.html
Modifiability,inherit,inherited,". ROOT: TGedFrame::TGedSubFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TGedFrame::TGedSubFrame Class Reference. . Definition at line 31 of file TGedFrame.h. Public Member Functions;  TGedSubFrame (TString n, TGCompositeFrame *f);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current ",MatchSource.WIKI,doc/master/classTGedFrame_1_1TGedSubFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedFrame_1_1TGedSubFrame.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other obje",MatchSource.WIKI,doc/master/classTGedFrame_1_1TGedSubFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedFrame_1_1TGedSubFrame.html
Availability,down,down,". ROOT: TGedMarkerSelect Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGedMarkerSelect Class ReferenceGUI » ROOT Graphics Editor. ; The TGedMarkerSelect widget is a button showing selected marker and a little down arrow. ; When clicked on the arrow the TGedMarkerPopup pops up.; Selecting a marker in this widget will generate the event: kC_MARKERSEL, kMAR_SELCHANGED, widget id, style.; and the signal: MarkerSelected(Style_t marker) ; Definition at line 37 of file TGedMarkerSelect.h. Public Member Functions;  TGedMarkerSelect (const TGWindow *p, Style_t markerStyle, Int_t id);  Create and show marker popup window. ;  ;  ~TGedMarkerSelect () override;  ; TGDimension GetDefaultSize () const override;  default size ;  ; Style_t GetMarkerStyle () const;  ; virtual void MarkerSelected (Style_t marker=0);  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages according to the user input. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save the pattern select widget as a C++ statement(s) on output stream out. ;  ; void SetMarkerStyle (Style_t pattern);  Set marker. ;  ;  Public Member Functions inherited from TGedSelect;  TGedSelect (const TGWindow *p, Int_t id);  Create pattern select button. ;  ;  ~TGedSelect () override;  Destructor of pattern select button. ;  ; virtual void Disable ();  Clear widget state flag. ;  ; virtual void Enable ();  Set widget state flag (kTRUE=enabled, kFALSE=disabled). ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button events in pattern select button. ;  ; virtual void SetPopup (TGedPopup *p);  ;  Public Member Functions inherited from TGCheckButton;  TGCheckButton (const TGWindow *p, const char *s, const char *cmd, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t fon",MatchSource.WIKI,doc/master/classTGedMarkerSelect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedMarkerSelect.html
Integrability,message,messages,". ROOT: TGedMarkerSelect Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGedMarkerSelect Class ReferenceGUI » ROOT Graphics Editor. ; The TGedMarkerSelect widget is a button showing selected marker and a little down arrow. ; When clicked on the arrow the TGedMarkerPopup pops up.; Selecting a marker in this widget will generate the event: kC_MARKERSEL, kMAR_SELCHANGED, widget id, style.; and the signal: MarkerSelected(Style_t marker) ; Definition at line 37 of file TGedMarkerSelect.h. Public Member Functions;  TGedMarkerSelect (const TGWindow *p, Style_t markerStyle, Int_t id);  Create and show marker popup window. ;  ;  ~TGedMarkerSelect () override;  ; TGDimension GetDefaultSize () const override;  default size ;  ; Style_t GetMarkerStyle () const;  ; virtual void MarkerSelected (Style_t marker=0);  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages according to the user input. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save the pattern select widget as a C++ statement(s) on output stream out. ;  ; void SetMarkerStyle (Style_t pattern);  Set marker. ;  ;  Public Member Functions inherited from TGedSelect;  TGedSelect (const TGWindow *p, Int_t id);  Create pattern select button. ;  ;  ~TGedSelect () override;  Destructor of pattern select button. ;  ; virtual void Disable ();  Clear widget state flag. ;  ; virtual void Enable ();  Set widget state flag (kTRUE=enabled, kFALSE=disabled). ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button events in pattern select button. ;  ; virtual void SetPopup (TGedPopup *p);  ;  Public Member Functions inherited from TGCheckButton;  TGCheckButton (const TGWindow *p, const char *s, const char *cmd, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t fon",MatchSource.WIKI,doc/master/classTGedMarkerSelect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedMarkerSelect.html
Modifiability,inherit,inherited,"e down arrow. ; When clicked on the arrow the TGedMarkerPopup pops up.; Selecting a marker in this widget will generate the event: kC_MARKERSEL, kMAR_SELCHANGED, widget id, style.; and the signal: MarkerSelected(Style_t marker) ; Definition at line 37 of file TGedMarkerSelect.h. Public Member Functions;  TGedMarkerSelect (const TGWindow *p, Style_t markerStyle, Int_t id);  Create and show marker popup window. ;  ;  ~TGedMarkerSelect () override;  ; TGDimension GetDefaultSize () const override;  default size ;  ; Style_t GetMarkerStyle () const;  ; virtual void MarkerSelected (Style_t marker=0);  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages according to the user input. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save the pattern select widget as a C++ statement(s) on output stream out. ;  ; void SetMarkerStyle (Style_t pattern);  Set marker. ;  ;  Public Member Functions inherited from TGedSelect;  TGedSelect (const TGWindow *p, Int_t id);  Create pattern select button. ;  ;  ~TGedSelect () override;  Destructor of pattern select button. ;  ; virtual void Disable ();  Clear widget state flag. ;  ; virtual void Enable ();  Set widget state flag (kTRUE=enabled, kFALSE=disabled). ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button events in pattern select button. ;  ; virtual void SetPopup (TGedPopup *p);  ;  Public Member Functions inherited from TGCheckButton;  TGCheckButton (const TGWindow *p, const char *s, const char *cmd, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a check button widget. ;  ;  TGCheckButton (const TGWindow *p, TGHotString *s, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a check button widget. ;  ;  TGCheckButton (const TGWindow *p=nullptr, const char *s=nullptr, Int_t id=-1, GContext_t norm=GetDefaultGC()(),",MatchSource.WIKI,doc/master/classTGedMarkerSelect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedMarkerSelect.html
Security,hash,hash,"pped on screen, kFALSE otherwise. ;  ; virtual Bool_t IsMapSubwindows () const;  ; virtual void LowerWindow ();  lower window ;  ; virtual Int_t MustCleanup () const;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetEditDisabled (UInt_t on=kEditDisable);  ; virtual void SetMapSubwindows (Bool_t);  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGedMarkerSelect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedMarkerSelect.html
Availability,down,down,". ROOT: TGedPatternSelect Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGedPatternSelect Class ReferenceGUI » ROOT Graphics Editor. ; is a button with pattern area with a little down arrow. ; When clicked on the arrow the TGedPatternPopup pops up.; Selecting a pattern in this widget will generate the event: kC_PATTERNSEL, kPAT_SELCHANGED, widget id, style.; and the signal: PatternSelected(Style_t pattern) ; Definition at line 120 of file TGedPatternSelect.h. Public Member Functions;  TGedPatternSelect (const TGWindow *p, Style_t pattern, Int_t id);  Create and pop up pattern select window. ;  ;  ~TGedPatternSelect () override;  ; TGDimension GetDefaultSize () const override;  default size ;  ; Style_t GetPattern () const;  ; virtual void PatternSelected (Style_t pattern=0);  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process message according to the user input. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save the pattern select widget as a C++ statement(s) on output stream out. ;  ; void SetPattern (Style_t pattern, Bool_t emit=kTRUE);  Set pattern. ;  ;  Public Member Functions inherited from TGedSelect;  TGedSelect (const TGWindow *p, Int_t id);  Create pattern select button. ;  ;  ~TGedSelect () override;  Destructor of pattern select button. ;  ; virtual void Disable ();  Clear widget state flag. ;  ; virtual void Enable ();  Set widget state flag (kTRUE=enabled, kFALSE=disabled). ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button events in pattern select button. ;  ; virtual void SetPopup (TGedPopup *p);  ;  Public Member Functions inherited from TGCheckButton;  TGCheckButton (const TGWindow *p, const char *s, const char *cmd, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefa",MatchSource.WIKI,doc/master/classTGedPatternSelect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedPatternSelect.html
Integrability,message,message,". ROOT: TGedPatternSelect Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGedPatternSelect Class ReferenceGUI » ROOT Graphics Editor. ; is a button with pattern area with a little down arrow. ; When clicked on the arrow the TGedPatternPopup pops up.; Selecting a pattern in this widget will generate the event: kC_PATTERNSEL, kPAT_SELCHANGED, widget id, style.; and the signal: PatternSelected(Style_t pattern) ; Definition at line 120 of file TGedPatternSelect.h. Public Member Functions;  TGedPatternSelect (const TGWindow *p, Style_t pattern, Int_t id);  Create and pop up pattern select window. ;  ;  ~TGedPatternSelect () override;  ; TGDimension GetDefaultSize () const override;  default size ;  ; Style_t GetPattern () const;  ; virtual void PatternSelected (Style_t pattern=0);  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process message according to the user input. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save the pattern select widget as a C++ statement(s) on output stream out. ;  ; void SetPattern (Style_t pattern, Bool_t emit=kTRUE);  Set pattern. ;  ;  Public Member Functions inherited from TGedSelect;  TGedSelect (const TGWindow *p, Int_t id);  Create pattern select button. ;  ;  ~TGedSelect () override;  Destructor of pattern select button. ;  ; virtual void Disable ();  Clear widget state flag. ;  ; virtual void Enable ();  Set widget state flag (kTRUE=enabled, kFALSE=disabled). ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button events in pattern select button. ;  ; virtual void SetPopup (TGedPopup *p);  ;  Public Member Functions inherited from TGCheckButton;  TGCheckButton (const TGWindow *p, const char *s, const char *cmd, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefa",MatchSource.WIKI,doc/master/classTGedPatternSelect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedPatternSelect.html
Modifiability,inherit,inherited,"licked on the arrow the TGedPatternPopup pops up.; Selecting a pattern in this widget will generate the event: kC_PATTERNSEL, kPAT_SELCHANGED, widget id, style.; and the signal: PatternSelected(Style_t pattern) ; Definition at line 120 of file TGedPatternSelect.h. Public Member Functions;  TGedPatternSelect (const TGWindow *p, Style_t pattern, Int_t id);  Create and pop up pattern select window. ;  ;  ~TGedPatternSelect () override;  ; TGDimension GetDefaultSize () const override;  default size ;  ; Style_t GetPattern () const;  ; virtual void PatternSelected (Style_t pattern=0);  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process message according to the user input. ;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save the pattern select widget as a C++ statement(s) on output stream out. ;  ; void SetPattern (Style_t pattern, Bool_t emit=kTRUE);  Set pattern. ;  ;  Public Member Functions inherited from TGedSelect;  TGedSelect (const TGWindow *p, Int_t id);  Create pattern select button. ;  ;  ~TGedSelect () override;  Destructor of pattern select button. ;  ; virtual void Disable ();  Clear widget state flag. ;  ; virtual void Enable ();  Set widget state flag (kTRUE=enabled, kFALSE=disabled). ;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button events in pattern select button. ;  ; virtual void SetPopup (TGedPopup *p);  ;  Public Member Functions inherited from TGCheckButton;  TGCheckButton (const TGWindow *p, const char *s, const char *cmd, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a check button widget. ;  ;  TGCheckButton (const TGWindow *p, TGHotString *s, Int_t id=-1, GContext_t norm=GetDefaultGC()(), FontStruct_t font=GetDefaultFontStruct(), UInt_t option=0);  Create a check button widget. ;  ;  TGCheckButton (const TGWindow *p=nullptr, const char *s=nullptr, Int_t id=-1, GContext_t norm=GetDefaultGC()(),",MatchSource.WIKI,doc/master/classTGedPatternSelect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedPatternSelect.html
Security,hash,hash,"pped on screen, kFALSE otherwise. ;  ; virtual Bool_t IsMapSubwindows () const;  ; virtual void LowerWindow ();  lower window ;  ; virtual Int_t MustCleanup () const;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetEditDisabled (UInt_t on=kEditDisable);  ; virtual void SetMapSubwindows (Bool_t);  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGedPatternSelect.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedPatternSelect.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGedTabInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedTabInfo.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGedTabInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedTabInfo.html
Modifiability,inherit,inherited,". ROOT: TGedTabInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TGedTabInfo Class Reference. . Definition at line 63 of file TGedEditor.cxx. Public Member Functions;  TGedTabInfo (TGTabElement *el, TGCompositeFrame *f);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1",MatchSource.WIKI,doc/master/classTGedTabInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedTabInfo.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other obje",MatchSource.WIKI,doc/master/classTGedTabInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGedTabInfo.html
Energy Efficiency,allocate,allocated,");  Copy the iterator source into dest. ;  ; typedef void(* CreateIterators_t) (void *collection, void **begin_arena, void **end_arena, TVirtualCollectionProxy *proxy);  *begin_arena and *end_arena should contain the location of a memory arena of size fgIteratorArenaSize. ;  ; typedef void(* DeleteIterator_t) (void *iter);  If the size of the iterator is greater than fgIteratorArenaSize, call delete on the addresses; otherwise, just call the iterator's destructor. ;  ; typedef void(* DeleteTwoIterators_t) (void *begin, void *end);  ; enum  EProperty { kIsAssociative = (1ULL << ( 2 )); , kIsEmulated = (1ULL << ( 3 )); , kNeedDelete = (1ULL << ( 4 )); , kCustomAlloc = (1ULL << ( 5 )); };  ; typedef void *(* Next_t) (void *iter, const void *end);  iter and end should be pointers to an iterator to be incremented and an iterator that points to the end of the collection, respectively. ;  ;  Static Public Attributes inherited from TVirtualCollectionProxy; static const Int_t fgIteratorArenaSize = 16;  The size of a small buffer that can be allocated on the stack to store iterator-specific information. ;  ;  Protected Types inherited from TGenCollectionProxy; typedef void *(* ArrIterfunc_t) (void *from, size_t size);  ; typedef void *(* Collectfunc_t) (void *from, void *to);  ; typedef ROOT::Detail::TCollectionProxyInfo::Environ< char[64]> Env_t;  ; typedef ROOT::Detail::TCollectionProxyInfo::EnvironBase EnvironBase_t;  ; typedef void *(* Feedfunc_t) (void *from, void *to, size_t size);  ; typedef std::vector< EnvironBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  ;  Protected Member Functions inherited from TGenCollectionProxy; void CheckFunctions () const;  Check existence of function pointers. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  ; virtual TGenCollectionProxy * InitializeEx (Bool_t",MatchSource.WIKI,doc/master/classTGenBitsetProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenBitsetProxy.html
Modifiability,inherit,inherited,". ROOT: TGenBitsetProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TGenBitsetProxy Class Reference. . Definition at line 135 of file TGenCollectionProxy.cxx. Public Member Functions;  TGenBitsetProxy (const TGenCollectionProxy &c);  ;  ~TGenBitsetProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index idx ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; TClass * GetCollectionClass () const override;  Return a pointer to the TClass representing the container. ;  ; Int_t GetCollectionType () const override;  Return the type of collection see TClassEdit::ESTLType. ;  ; TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions (TClass *oldClass, Int_t version) override;  Return the set of action necessary to stream in this collection member-wise coming from the old value class layout refered to by 'version'. ;  ; CopyI",MatchSource.WIKI,doc/master/classTGenBitsetProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenBitsetProxy.html
Performance,cache,cache," information. ;  ;  Protected Types inherited from TGenCollectionProxy; typedef void *(* ArrIterfunc_t) (void *from, size_t size);  ; typedef void *(* Collectfunc_t) (void *from, void *to);  ; typedef ROOT::Detail::TCollectionProxyInfo::Environ< char[64]> Env_t;  ; typedef ROOT::Detail::TCollectionProxyInfo::EnvironBase EnvironBase_t;  ; typedef void *(* Feedfunc_t) (void *from, void *to, size_t size);  ; typedef std::vector< EnvironBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  ;  Protected Member Functions inherited from TGenCollectionProxy; void CheckFunctions () const;  Check existence of function pointers. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  ; virtual TGenCollectionProxy * InitializeEx (Bool_t silent);  Proxy initializer. ;  ;  Protected Attributes inherited from TGenCollectionProxy; Method fClear;  Method cache for container accessors: clear container. ;  ; Collectfunc_t fCollect;  Method to collect objects from container. ;  ; ArrIterfunc_t fConstruct;  Container accessors: block construct. ;  ; std::map< std::string, TObjArray * > * fConversionReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) derived from another class. ;  ; Method0 fCreateEnv;  Method to allocate an Environment holder. ;  ; Sizing_t fDestruct;  Container accessors: block destruct. ;  ; EnvironBase_t * fEnv;  Address of the currently proxied object. ;  ; Feedfunc_t fFeed;  Container accessors: block feed. ;  ; Method fFirst;  Container accessors: generic iteration: first. ;  ; CopyIterator_t fFunctionCopyIterator;  ; CreateIterators_t fFunctionCreateIterators;  ; DeleteIterator_t fFunctionDeleteIterator;  ; DeleteTwoIterators_t fFunctionDeleteTwoIterators;  ; Next_t fFunctionNextIterator;  ; Value * fKey;  Descriptor of the key_type. ;  ; std::string fName;  Name of the ",MatchSource.WIKI,doc/master/classTGenBitsetProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenBitsetProxy.html
Security,access,accessors," information. ;  ;  Protected Types inherited from TGenCollectionProxy; typedef void *(* ArrIterfunc_t) (void *from, size_t size);  ; typedef void *(* Collectfunc_t) (void *from, void *to);  ; typedef ROOT::Detail::TCollectionProxyInfo::Environ< char[64]> Env_t;  ; typedef ROOT::Detail::TCollectionProxyInfo::EnvironBase EnvironBase_t;  ; typedef void *(* Feedfunc_t) (void *from, void *to, size_t size);  ; typedef std::vector< EnvironBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  ;  Protected Member Functions inherited from TGenCollectionProxy; void CheckFunctions () const;  Check existence of function pointers. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  ; virtual TGenCollectionProxy * InitializeEx (Bool_t silent);  Proxy initializer. ;  ;  Protected Attributes inherited from TGenCollectionProxy; Method fClear;  Method cache for container accessors: clear container. ;  ; Collectfunc_t fCollect;  Method to collect objects from container. ;  ; ArrIterfunc_t fConstruct;  Container accessors: block construct. ;  ; std::map< std::string, TObjArray * > * fConversionReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) derived from another class. ;  ; Method0 fCreateEnv;  Method to allocate an Environment holder. ;  ; Sizing_t fDestruct;  Container accessors: block destruct. ;  ; EnvironBase_t * fEnv;  Address of the currently proxied object. ;  ; Feedfunc_t fFeed;  Container accessors: block feed. ;  ; Method fFirst;  Container accessors: generic iteration: first. ;  ; CopyIterator_t fFunctionCopyIterator;  ; CreateIterators_t fFunctionCreateIterators;  ; DeleteIterator_t fFunctionDeleteIterator;  ; DeleteTwoIterators_t fFunctionDeleteTwoIterators;  ; Next_t fFunctionNextIterator;  ; Value * fKey;  Descriptor of the key_type. ;  ; std::string fName;  Name of the ",MatchSource.WIKI,doc/master/classTGenBitsetProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenBitsetProxy.html
Usability,simpl,simple,"eTwoIterators_t)(void *begin, void *end); If the sizeof iterator is greater than fgIteratorArenaSize, call delete on the addresses, Otherwise just call the iterator's destructor. ;  ; Next_t GetFunctionNext (Bool_t read=kTRUE) override;  See typedef void* (*Next_t)(void *iter, void *end); iter and end should be pointer to respectively an iterator to be incremented and the result of colleciton.end() 'Next' will increment the iterator 'iter' and return 0 if the iterator reached the end. ;  ; ULong_t GetIncrement () const override;  Return the offset between two consecutive value_types (memory layout). ;  ; virtual TClass * GetOnFileClass () const;  ; TStreamerInfoActions::TActionSequence * GetReadMemberWiseActions (Int_t version) override;  Return the set of action necessary to stream in this collection member-wise coming from the old value class layout refered to by 'version'. ;  ; EDataType GetType () const override;  If the content is a simple numerical value, return its type (see TDataType) ;  ; TClass * GetValueClass () const override;  Return a pointer to the TClass representing the content. ;  ; TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions () override;  Return the set of action necessary to stream out this collection member-wise. ;  ; Bool_t HasPointers () const override;  Return true if the content is of type 'pointer to'. ;  ; void Insert (const void *data, void *container, size_t size) override;  Insert data into the container where data is a C-style array of the actual type contained in the collection of the given size. ;  ; virtual void operator() (TBuffer &refBuffer, void *pObject);  TClassStreamer IO overload. ;  ; void PopProxy () override;  Remove the last object. ;  ; void PushProxy (void *objstart) override;  Add an object. ;  ; virtual void ReadBuffer (TBuffer &b, void *obj);  ; virtual void ReadBuffer (TBuffer &b, void *obj, const TClass *onfileClass);  ; Bool_t Reset () override;  Reset the info gathered from StreamerInfos and",MatchSource.WIKI,doc/master/classTGenBitsetProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenBitsetProxy.html
Energy Efficiency,allocate,allocated,"lements container objects at the address given by arena ;  ; virtual TClass::ObjectPtr NewObject () const;  Construct a new container object and return its address. ;  ; virtual TClass::ObjectPtr NewObject (void *arena) const;  Construct a new container object at the address given by arena ;  ; virtual TClass::ObjectPtr NewObjectArray (Int_t nElements) const;  Construct an array of nElements container objects and return the base address of the array. ;  ; virtual TClass::ObjectPtr NewObjectArray (Int_t nElements, void *arena) const;  Construct an array of nElements container objects at the address given by arena ;  ; char * operator[] (UInt_t idx) const;  Return the address of the value at index idx ;  . Protected Types; typedef void *(* ArrIterfunc_t) (void *from, size_t size);  ; typedef void *(* Collectfunc_t) (void *from, void *to);  ; typedef ROOT::Detail::TCollectionProxyInfo::Environ< char[64]> Env_t;  ; typedef ROOT::Detail::TCollectionProxyInfo::EnvironBase EnvironBase_t;  ; typedef void *(* Feedfunc_t) (void *from, void *to, size_t size);  ; typedef std::vector< EnvironBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  . Protected Member Functions; void CheckFunctions () const;  Check existence of function pointers. ;  ; virtual void DeleteItem (Bool_t force, void *ptr) const;  Call to delete/destruct individual item. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  ; virtual TGenCollectionProxy * InitializeEx (Bool_t silent);  Proxy initializer. ;  . Protected Attributes; Method fClear;  Method cache for container accessors: clear container. ;  ; Collectfunc_t fCollect;  Method to collect objects from container. ;  ; ArrIterfunc_t fConstruct;  Container accessors: block construct. ;  ; std::map< std::string, TObjArray * > * fConversionReadMemberWise;  Array of bundle of TStreamer",MatchSource.WIKI,doc/master/classTGenCollectionProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy.html
Modifiability,inherit,inherited,"/proxy implementation and only expose the creation functions.; In particular this is used to implement splitting and abstract element access of any container. Access to compiled code is necessary to implement the abstract iteration sequence and functionality like size(), clear(), resize(). resize() may be a void operation. ; Definition at line 29 of file TGenCollectionProxy.h. Classes; class  Method;  Small helper to execute (compiler) generated function for the access to STL or other containers. More...;  ; class  Method0;  ; class  StreamHelper;  Helper class to facilitate I/O. More...;  ; class  TStaging;  Small helper to stage the content of an associative container when reading and before inserting it in the actual collection. More...;  ; class  Value;  Small helper to describe the Value_type or the key_type of an STL container. More...;  . Public Types; enum  { kBIT_ISSTRING = 0x20000000; , kBIT_ISTSTRING = 0x40000000; };  ; typedef const std::type_info & Info_t;  ;  Public Types inherited from TVirtualCollectionProxy; typedef void *(* CopyIterator_t) (void *dest, const void *source);  Copy the iterator source into dest. ;  ; typedef void(* CreateIterators_t) (void *collection, void **begin_arena, void **end_arena, TVirtualCollectionProxy *proxy);  *begin_arena and *end_arena should contain the location of a memory arena of size fgIteratorArenaSize. ;  ; typedef void(* DeleteIterator_t) (void *iter);  If the size of the iterator is greater than fgIteratorArenaSize, call delete on the addresses; otherwise, just call the iterator's destructor. ;  ; typedef void(* DeleteTwoIterators_t) (void *begin, void *end);  ; enum  EProperty { kIsAssociative = (1ULL << ( 2 )); , kIsEmulated = (1ULL << ( 3 )); , kNeedDelete = (1ULL << ( 4 )); , kCustomAlloc = (1ULL << ( 5 )); };  ; typedef void *(* Next_t) (void *iter, const void *end);  iter and end should be pointers to an iterator to be incremented and an iterator that points to the end of the collection, respectively. ;  .",MatchSource.WIKI,doc/master/classTGenCollectionProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy.html
Performance,cache,cache," . Protected Types; typedef void *(* ArrIterfunc_t) (void *from, size_t size);  ; typedef void *(* Collectfunc_t) (void *from, void *to);  ; typedef ROOT::Detail::TCollectionProxyInfo::Environ< char[64]> Env_t;  ; typedef ROOT::Detail::TCollectionProxyInfo::EnvironBase EnvironBase_t;  ; typedef void *(* Feedfunc_t) (void *from, void *to, size_t size);  ; typedef std::vector< EnvironBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  . Protected Member Functions; void CheckFunctions () const;  Check existence of function pointers. ;  ; virtual void DeleteItem (Bool_t force, void *ptr) const;  Call to delete/destruct individual item. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  ; virtual TGenCollectionProxy * InitializeEx (Bool_t silent);  Proxy initializer. ;  . Protected Attributes; Method fClear;  Method cache for container accessors: clear container. ;  ; Collectfunc_t fCollect;  Method to collect objects from container. ;  ; ArrIterfunc_t fConstruct;  Container accessors: block construct. ;  ; std::map< std::string, TObjArray * > * fConversionReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) derived from another class. ;  ; Method0 fCreateEnv;  Method to allocate an Environment holder. ;  ; Sizing_t fDestruct;  Container accessors: block destruct. ;  ; EnvironBase_t * fEnv;  Address of the currently proxied object. ;  ; Feedfunc_t fFeed;  Container accessors: block feed. ;  ; Method fFirst;  Container accessors: generic iteration: first. ;  ; CopyIterator_t fFunctionCopyIterator;  ; CreateIterators_t fFunctionCreateIterators;  ; DeleteIterator_t fFunctionDeleteIterator;  ; DeleteTwoIterators_t fFunctionDeleteTwoIterators;  ; Next_t fFunctionNextIterator;  ; Value * fKey;  Descriptor of the key_type. ;  ; std::string fName;  Name of the class being proxied. ",MatchSource.WIKI,doc/master/classTGenCollectionProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy.html
Security,expose,expose,". ROOT: TGenCollectionProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TGenCollectionProxy Class ReferenceInput/Output Library. ; Proxy around an arbitrary container, which implements basic functionality and iteration. ; The purpose of this implementation is to shield any generated dictionary implementation from the underlying streamer/proxy implementation and only expose the creation functions.; In particular this is used to implement splitting and abstract element access of any container. Access to compiled code is necessary to implement the abstract iteration sequence and functionality like size(), clear(), resize(). resize() may be a void operation. ; Definition at line 29 of file TGenCollectionProxy.h. Classes; class  Method;  Small helper to execute (compiler) generated function for the access to STL or other containers. More...;  ; class  Method0;  ; class  StreamHelper;  Helper class to facilitate I/O. More...;  ; class  TStaging;  Small helper to stage the content of an associative container when reading and before inserting it in the actual collection. More...;  ; class  Value;  Small helper to describe the Value_type or the key_type of an STL container. More...;  . Public Types; enum  { kBIT_ISSTRING = 0x20000000; , kBIT_ISTSTRING = 0x40000000; };  ; typedef const std::type_info & Info_t;  ;  Public Types inherited from TVirtualCollectionProxy; typedef void *(* CopyIterator_t) (void *dest, const void *source);  Copy the iterator source into dest. ;  ; typedef void(* CreateIterators_t) (void *collection, void **begin_arena, void **end_arena, TVirtualCollectionProxy *proxy);  *begin_arena and *end_arena should contain the location of a memory arena of size fgIteratorArenaSize. ;  ; typedef void(* ",MatchSource.WIKI,doc/master/classTGenCollectionProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy.html
Usability,clear,clear,". ROOT: TGenCollectionProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TGenCollectionProxy Class ReferenceInput/Output Library. ; Proxy around an arbitrary container, which implements basic functionality and iteration. ; The purpose of this implementation is to shield any generated dictionary implementation from the underlying streamer/proxy implementation and only expose the creation functions.; In particular this is used to implement splitting and abstract element access of any container. Access to compiled code is necessary to implement the abstract iteration sequence and functionality like size(), clear(), resize(). resize() may be a void operation. ; Definition at line 29 of file TGenCollectionProxy.h. Classes; class  Method;  Small helper to execute (compiler) generated function for the access to STL or other containers. More...;  ; class  Method0;  ; class  StreamHelper;  Helper class to facilitate I/O. More...;  ; class  TStaging;  Small helper to stage the content of an associative container when reading and before inserting it in the actual collection. More...;  ; class  Value;  Small helper to describe the Value_type or the key_type of an STL container. More...;  . Public Types; enum  { kBIT_ISSTRING = 0x20000000; , kBIT_ISTSTRING = 0x40000000; };  ; typedef const std::type_info & Info_t;  ;  Public Types inherited from TVirtualCollectionProxy; typedef void *(* CopyIterator_t) (void *dest, const void *source);  Copy the iterator source into dest. ;  ; typedef void(* CreateIterators_t) (void *collection, void **begin_arena, void **end_arena, TVirtualCollectionProxy *proxy);  *begin_arena and *end_arena should contain the location of a memory arena of size fgIteratorArenaSize. ;  ; typedef void(* ",MatchSource.WIKI,doc/master/classTGenCollectionProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy.html
Security,access,access,. ROOT: TGenCollectionProxy::Method Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; List of all members ; TGenCollectionProxy::Method Class Reference. ; Small helper to execute (compiler) generated function for the access to STL or other containers. ; AuthorM.Frank ; Version1.0 ; Date10/10/2004 ; Definition at line 193 of file TGenCollectionProxy.h. Public Types; typedef void *(* Call_t) (void *);  . Public Member Functions;  Method ();  ;  Method (Call_t c);  ;  Method (const Method &m);  ; void * invoke (void *obj) const;  ; Method & operator= (const Method &m);  . Public Attributes; Call_t call;  . #include <TGenCollectionProxy.h>; Member Typedef Documentation. ◆ Call_t. typedef void *(* TGenCollectionProxy::Method::Call_t) (void *). Definition at line 195 of file TGenCollectionProxy.h. Constructor & Destructor Documentation. ◆ Method() [1/3]. TGenCollectionProxy::Method::Method ; (; ). inline . Definition at line 197 of file TGenCollectionProxy.h. ◆ Method() [2/3]. TGenCollectionProxy::Method::Method ; (; Call_t ; c). inline . Definition at line 198 of file TGenCollectionProxy.h. ◆ Method() [3/3]. TGenCollectionProxy::Method::Method ; (; const Method & ; m). inline . Definition at line 199 of file TGenCollectionProxy.h. Member Function Documentation. ◆ invoke(). void * TGenCollectionProxy::Method::invoke ; (; void * ; obj); const. inline . Definition at line 201 of file TGenCollectionProxy.h. ◆ operator=(). Method & TGenCollectionProxy::Method::operator= ; (; const Method & ; m). inline . Definition at line 200 of file TGenCollectionProxy.h. Member Data Documentation. ◆ call. Call_t TGenCollectionProxy::Method::call. Definition at line 196 of file TGenCollectionProxy.h. Libraries for TGenCollectionProxy::Method:. [legend]; The documentation for this class was generated from the following file:; io/io/inc/TGenCollectionProxy.h. T,MatchSource.WIKI,doc/master/classTGenCollectionProxy_1_1Method.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy_1_1Method.html
Energy Efficiency,allocate,allocated,"ctPtr NewObject () const;  Construct a new container object and return its address. ;  ; virtual TClass::ObjectPtr NewObject (void *arena) const;  Construct a new container object at the address given by arena ;  ; virtual TClass::ObjectPtr NewObjectArray (Int_t nElements) const;  Construct an array of nElements container objects and return the base address of the array. ;  ; virtual TClass::ObjectPtr NewObjectArray (Int_t nElements, void *arena) const;  Construct an array of nElements container objects at the address given by arena ;  ; char * operator[] (UInt_t idx) const;  Return the address of the value at index idx ;  . Protected Types; typedef void(TGenCollectionStreamer::* ReadBuffer_t) (TBuffer &b, void *obj, const TClass *onFileClass);  ;  Protected Types inherited from TGenCollectionProxy; typedef void *(* ArrIterfunc_t) (void *from, size_t size);  ; typedef void *(* Collectfunc_t) (void *from, void *to);  ; typedef ROOT::Detail::TCollectionProxyInfo::Environ< char[64]> Env_t;  ; typedef ROOT::Detail::TCollectionProxyInfo::EnvironBase EnvironBase_t;  ; typedef void *(* Feedfunc_t) (void *from, void *to, size_t size);  ; typedef std::vector< EnvironBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  . Protected Member Functions; template<typename From , typename To > ; void ConvertBufferVectorPrimitives (TBuffer &b, void *obj, Int_t nElements);  ; template<typename To > ; void ConvertBufferVectorPrimitivesDouble32 (TBuffer &b, void *obj, Int_t nElements);  ; template<typename To > ; void ConvertBufferVectorPrimitivesFloat16 (TBuffer &b, void *obj, Int_t nElements);  ; template<typename To > ; void DispatchConvertBufferVectorPrimitives (TBuffer &b, void *obj, Int_t nElements, const TVirtualCollectionProxy *onfileProxy);  ; void ReadBufferDefault (TBuffer &b, void *obj, const TClass *onFileClass);  ; void ReadBufferGe",MatchSource.WIKI,doc/master/classTGenCollectionStreamer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenCollectionStreamer.html
Modifiability,inherit,inherited,"ected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGenCollectionStreamer Class Reference. . Definition at line 17 of file TGenCollectionStreamer.h. Public Member Functions;  TGenCollectionStreamer (const ROOT::TCollectionProxyInfo &info, TClass *cl);  ;  TGenCollectionStreamer (const TGenCollectionStreamer &copy);  ;  TGenCollectionStreamer (Info_t typ, size_t iter_size);  ;  ~TGenCollectionStreamer () override;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; void ReadBuffer (TBuffer &b, void *obj) override;  ; void ReadBuffer (TBuffer &b, void *obj, const TClass *onfileClass) override;  ; void Streamer (TBuffer &buff, void *pObj, int siz) override;  Streamer I/O overload. ;  ; void Streamer (TBuffer &refBuffer) override;  Streamer Function. ;  ; virtual void StreamerAsMap (TBuffer &refBuffer);  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TClass * GetCollectionClass () const override;  Return a pointer to the TClass representing the container. ;  ; Int_t GetCollectionType () const override;  Return the type of collection see TClassEdit::ESTLType. ;  ; TStreamerInfoActions::",MatchSource.WIKI,doc/master/classTGenCollectionStreamer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenCollectionStreamer.html
Performance,cache,cache," ReadMap (int nElements, TBuffer &b, const TClass *onfileClass);  ; void ReadMapHelper (StreamHelper *i, Value *v, Bool_t vsn3, TBuffer &b);  ; void ReadObjects (int nElements, TBuffer &b, const TClass *onfileClass);  ; void ReadPairFromMap (int nElements, TBuffer &b);  ; void ReadPrimitives (int nElements, TBuffer &b, const TClass *onfileClass);  ; void WriteMap (int nElements, TBuffer &b);  ; void WriteObjects (int nElements, TBuffer &b);  ; void WritePrimitives (int nElements, TBuffer &b);  ;  Protected Member Functions inherited from TGenCollectionProxy; void CheckFunctions () const;  Check existence of function pointers. ;  ; virtual void DeleteItem (Bool_t force, void *ptr) const;  Call to delete/destruct individual item. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  ; virtual TGenCollectionProxy * InitializeEx (Bool_t silent);  Proxy initializer. ;  . Protected Attributes; ReadBuffer_t fReadBufferFunc;  ;  Protected Attributes inherited from TGenCollectionProxy; Method fClear;  Method cache for container accessors: clear container. ;  ; Collectfunc_t fCollect;  Method to collect objects from container. ;  ; ArrIterfunc_t fConstruct;  Container accessors: block construct. ;  ; std::map< std::string, TObjArray * > * fConversionReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) derived from another class. ;  ; Method0 fCreateEnv;  Method to allocate an Environment holder. ;  ; Sizing_t fDestruct;  Container accessors: block destruct. ;  ; EnvironBase_t * fEnv;  Address of the currently proxied object. ;  ; Feedfunc_t fFeed;  Container accessors: block feed. ;  ; Method fFirst;  Container accessors: generic iteration: first. ;  ; CopyIterator_t fFunctionCopyIterator;  ; CreateIterators_t fFunctionCreateIterators;  ; DeleteIterator_t fFunctionDeleteIterator;  ; DeleteTwoIterators_t fFunctionDeleteTwoIterators;  ; Next_t fFunctionNextIterator;  ; Value * fKey;  Descriptor of the key_type. ;  ; std::st",MatchSource.WIKI,doc/master/classTGenCollectionStreamer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenCollectionStreamer.html
Security,access,accessors," ReadMap (int nElements, TBuffer &b, const TClass *onfileClass);  ; void ReadMapHelper (StreamHelper *i, Value *v, Bool_t vsn3, TBuffer &b);  ; void ReadObjects (int nElements, TBuffer &b, const TClass *onfileClass);  ; void ReadPairFromMap (int nElements, TBuffer &b);  ; void ReadPrimitives (int nElements, TBuffer &b, const TClass *onfileClass);  ; void WriteMap (int nElements, TBuffer &b);  ; void WriteObjects (int nElements, TBuffer &b);  ; void WritePrimitives (int nElements, TBuffer &b);  ;  Protected Member Functions inherited from TGenCollectionProxy; void CheckFunctions () const;  Check existence of function pointers. ;  ; virtual void DeleteItem (Bool_t force, void *ptr) const;  Call to delete/destruct individual item. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  ; virtual TGenCollectionProxy * InitializeEx (Bool_t silent);  Proxy initializer. ;  . Protected Attributes; ReadBuffer_t fReadBufferFunc;  ;  Protected Attributes inherited from TGenCollectionProxy; Method fClear;  Method cache for container accessors: clear container. ;  ; Collectfunc_t fCollect;  Method to collect objects from container. ;  ; ArrIterfunc_t fConstruct;  Container accessors: block construct. ;  ; std::map< std::string, TObjArray * > * fConversionReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) derived from another class. ;  ; Method0 fCreateEnv;  Method to allocate an Environment holder. ;  ; Sizing_t fDestruct;  Container accessors: block destruct. ;  ; EnvironBase_t * fEnv;  Address of the currently proxied object. ;  ; Feedfunc_t fFeed;  Container accessors: block feed. ;  ; Method fFirst;  Container accessors: generic iteration: first. ;  ; CopyIterator_t fFunctionCopyIterator;  ; CreateIterators_t fFunctionCreateIterators;  ; DeleteIterator_t fFunctionDeleteIterator;  ; DeleteTwoIterators_t fFunctionDeleteTwoIterators;  ; Next_t fFunctionNextIterator;  ; Value * fKey;  Descriptor of the key_type. ;  ; std::st",MatchSource.WIKI,doc/master/classTGenCollectionStreamer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenCollectionStreamer.html
Usability,simpl,simple,"eTwoIterators_t)(void *begin, void *end); If the sizeof iterator is greater than fgIteratorArenaSize, call delete on the addresses, Otherwise just call the iterator's destructor. ;  ; Next_t GetFunctionNext (Bool_t read=kTRUE) override;  See typedef void* (*Next_t)(void *iter, void *end); iter and end should be pointer to respectively an iterator to be incremented and the result of colleciton.end() 'Next' will increment the iterator 'iter' and return 0 if the iterator reached the end. ;  ; ULong_t GetIncrement () const override;  Return the offset between two consecutive value_types (memory layout). ;  ; virtual TClass * GetOnFileClass () const;  ; TStreamerInfoActions::TActionSequence * GetReadMemberWiseActions (Int_t version) override;  Return the set of action necessary to stream in this collection member-wise coming from the old value class layout refered to by 'version'. ;  ; EDataType GetType () const override;  If the content is a simple numerical value, return its type (see TDataType) ;  ; TClass * GetValueClass () const override;  Return a pointer to the TClass representing the content. ;  ; TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions () override;  Return the set of action necessary to stream out this collection member-wise. ;  ; Bool_t HasPointers () const override;  Return true if the content is of type 'pointer to'. ;  ; void Insert (const void *data, void *container, size_t size) override;  Insert data into the container where data is a C-style array of the actual type contained in the collection of the given size. ;  ; virtual void operator() (TBuffer &refBuffer, void *pObject);  TClassStreamer IO overload. ;  ; void PopProxy () override;  Remove the last object. ;  ; void PushProxy (void *objstart) override;  Add an object. ;  ; Bool_t Reset () override;  Reset the info gathered from StreamerInfos and value's TClass. ;  ; virtual void Resize (UInt_t n, Bool_t force_delete);  Resize the container. ;  ; virtual void SetOnFileClass ",MatchSource.WIKI,doc/master/classTGenCollectionStreamer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenCollectionStreamer.html
Availability,error,error,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenerator.html
Integrability,interface,interface,". ROOT: TGenerator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGenerator Class ReferenceMonte Carlo » EG. ; The interface to various event generators. ; Is an base class, that defines the interface of ROOT to various ; event generators. Every event generator should inherit from ; TGenerator or its subclasses. . Derived class can overload the member function GenerateEvent ; to do the actual event generation (e.g., call PYEVNT or similar). . The derived class should overload the member function ; ImportParticles (both types) to read the internal storage of the ; generated event into either the internal TObjArray or the passed ; TClonesArray of TParticles. . If the generator code stores event data in the /HEPEVT/ common block Then the default implementation of ImportParticles should suffice. ; The common block /HEPEVT/ is structed like . // C ; typedef struct { ; Int_t nevhep; // Event number ; Int_t nhep; // # of particles ; Int_t isthep[4000]; // Status flag of i'th particle ; Int_t idhep[4000]; // PDG # of particle ; Int_t jmohep[4000][2]; // 1st & 2nd mother particle # ; Int_t jdahep[4000][2]; // 1st & 2nd daughter particle # ; Double_t phep[4000][5]; // 4-momentum and 1 word ; Double_t vhep[4000][4]; // 4-position of production ; } HEPEVT_DEF; ; ; ; C Fortran ; COMMON/HEPEVT/NEVHEP,NHEP,ISTHEP(4000),IDHEP(4000), ; + JMOHEP(2,4000),JDAHEP(2,4000),PHEP(5,4000),VHEP(4,4000) ; INTEGER NEVHEP,NHEP,ISTHEP,IDHEP,JMOHEP,JDAHEP ; DOUBLE PRECISION PHEP,VHEP ; The generic member functions SetParameter and GetParameter can be overloaded to set and get parameters of the event generator.; Note, if the derived class interfaces a (set of) Fortran common blocks (like TPythia, TVenus does), one better make the derived class a singleton. That is, something like; class MyGe",MatchSource.WIKI,doc/master/classTGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenerator.html
Modifiability,inherit,inherit,". ROOT: TGenerator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGenerator Class ReferenceMonte Carlo » EG. ; The interface to various event generators. ; Is an base class, that defines the interface of ROOT to various ; event generators. Every event generator should inherit from ; TGenerator or its subclasses. . Derived class can overload the member function GenerateEvent ; to do the actual event generation (e.g., call PYEVNT or similar). . The derived class should overload the member function ; ImportParticles (both types) to read the internal storage of the ; generated event into either the internal TObjArray or the passed ; TClonesArray of TParticles. . If the generator code stores event data in the /HEPEVT/ common block Then the default implementation of ImportParticles should suffice. ; The common block /HEPEVT/ is structed like . // C ; typedef struct { ; Int_t nevhep; // Event number ; Int_t nhep; // # of particles ; Int_t isthep[4000]; // Status flag of i'th particle ; Int_t idhep[4000]; // PDG # of particle ; Int_t jmohep[4000][2]; // 1st & 2nd mother particle # ; Int_t jdahep[4000][2]; // 1st & 2nd daughter particle # ; Double_t phep[4000][5]; // 4-momentum and 1 word ; Double_t vhep[4000][4]; // 4-position of production ; } HEPEVT_DEF; ; ; ; C Fortran ; COMMON/HEPEVT/NEVHEP,NHEP,ISTHEP(4000),IDHEP(4000), ; + JMOHEP(2,4000),JDAHEP(2,4000),PHEP(5,4000),VHEP(4,4000) ; INTEGER NEVHEP,NHEP,ISTHEP,IDHEP,JMOHEP,JDAHEP ; DOUBLE PRECISION PHEP,VHEP ; The generic member functions SetParameter and GetParameter can be overloaded to set and get parameters of the event generator.; Note, if the derived class interfaces a (set of) Fortran common blocks (like TPythia, TVenus does), one better make the derived class a singleton. That is, something like; class MyGe",MatchSource.WIKI,doc/master/classTGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenerator.html
Performance,load,loaded,"and get parameters of the event generator.; Note, if the derived class interfaces a (set of) Fortran common blocks (like TPythia, TVenus does), one better make the derived class a singleton. That is, something like; class MyGenerator : public TGenerator ; { ; public: ; static MyGenerator* Instance() ; { ; if (!fgInstance) fgInstance = new MyGenerator; ; return fgInstance; ; } ; void GenerateEvent() { ... } ; void ImportParticles(TClonesArray* a, Option_t opt="""") {...} ; Int_t ImportParticles(Option_t opt="""") { ... } ; Int_t SetParameter(const char* name, Double_t val) { ... } ; Double_t GetParameter(const char* name) { ... } ; virtual ~MyGenerator() { ... } ; protected: ; MyGenerator() { ... } ; MyGenerator(const MyGenerator& o) { ... } ; MyGenerator& operator=(const MyGenerator& o) { ... } ; static MyGenerator* fgInstance; ; ClassDefOverride(MyGenerator,0); ; }; ; Having multiple objects accessing the same common blocks is not ; safe. . Concrete TGenerator classes can be loaded in scripts and subseqent- ; ly used in compiled code: . // MyRun.h ; class MyRun : public TObject ; { ; public: ; static MyRun* Instance() { ... } ; void SetGenerator(TGenerator* g) { fGenerator = g; } ; void Run(Int_t n, Option_t* option="""") ; { ; TFile* file = TFile::Open(""file.root"",""RECREATE""); ; TTree* tree = new TTree(""T"",""T""); ; TClonesArray* p = new TClonesArray(""TParticles""); ; tree->Branch(""particles"", &p); ; for (Int_t event = 0; event < n; event++) { ; fGenerator->GenerateEvent(); ; fGenerator->ImportParticles(p,option); ; tree->Fill(); ; } ; file->Write(); ; file->Close(); ; } ; ... ; protected: ; TGenerator* fGenerator; ; ClassDefOverride(MyRun,0); ; }; ; ; // Config.C ; void Config() ; { ; MyRun* run = MyRun::Instance(); ; run->SetGenerator(MyGenerator::Instance()); ; } ; ; // main.cxx ; int ; main(int argc, char** argv) ; { ; TApplication app("""", 0, 0); ; gSystem->ProcessLine("".x Config.C""); ; MyRun::Instance()->Run(10); ; return 0; ; } ; This is especially useful for example",MatchSource.WIKI,doc/master/classTGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenerator.html
Safety,safe,safe,"HEP,JDAHEP ; DOUBLE PRECISION PHEP,VHEP ; The generic member functions SetParameter and GetParameter can be overloaded to set and get parameters of the event generator.; Note, if the derived class interfaces a (set of) Fortran common blocks (like TPythia, TVenus does), one better make the derived class a singleton. That is, something like; class MyGenerator : public TGenerator ; { ; public: ; static MyGenerator* Instance() ; { ; if (!fgInstance) fgInstance = new MyGenerator; ; return fgInstance; ; } ; void GenerateEvent() { ... } ; void ImportParticles(TClonesArray* a, Option_t opt="""") {...} ; Int_t ImportParticles(Option_t opt="""") { ... } ; Int_t SetParameter(const char* name, Double_t val) { ... } ; Double_t GetParameter(const char* name) { ... } ; virtual ~MyGenerator() { ... } ; protected: ; MyGenerator() { ... } ; MyGenerator(const MyGenerator& o) { ... } ; MyGenerator& operator=(const MyGenerator& o) { ... } ; static MyGenerator* fgInstance; ; ClassDefOverride(MyGenerator,0); ; }; ; Having multiple objects accessing the same common blocks is not ; safe. . Concrete TGenerator classes can be loaded in scripts and subseqent- ; ly used in compiled code: . // MyRun.h ; class MyRun : public TObject ; { ; public: ; static MyRun* Instance() { ... } ; void SetGenerator(TGenerator* g) { fGenerator = g; } ; void Run(Int_t n, Option_t* option="""") ; { ; TFile* file = TFile::Open(""file.root"",""RECREATE""); ; TTree* tree = new TTree(""T"",""T""); ; TClonesArray* p = new TClonesArray(""TParticles""); ; tree->Branch(""particles"", &p); ; for (Int_t event = 0; event < n; event++) { ; fGenerator->GenerateEvent(); ; fGenerator->ImportParticles(p,option); ; tree->Fill(); ; } ; file->Write(); ; file->Close(); ; } ; ... ; protected: ; TGenerator* fGenerator; ; ClassDefOverride(MyRun,0); ; }; ; ; // Config.C ; void Config() ; { ; MyRun* run = MyRun::Instance(); ; run->SetGenerator(MyGenerator::Instance()); ; } ; ; // main.cxx ; int ; main(int argc, char** argv) ; { ; TApplication app("""", 0, 0)",MatchSource.WIKI,doc/master/classTGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenerator.html
Security,access,accessing,"HEP,JDAHEP ; DOUBLE PRECISION PHEP,VHEP ; The generic member functions SetParameter and GetParameter can be overloaded to set and get parameters of the event generator.; Note, if the derived class interfaces a (set of) Fortran common blocks (like TPythia, TVenus does), one better make the derived class a singleton. That is, something like; class MyGenerator : public TGenerator ; { ; public: ; static MyGenerator* Instance() ; { ; if (!fgInstance) fgInstance = new MyGenerator; ; return fgInstance; ; } ; void GenerateEvent() { ... } ; void ImportParticles(TClonesArray* a, Option_t opt="""") {...} ; Int_t ImportParticles(Option_t opt="""") { ... } ; Int_t SetParameter(const char* name, Double_t val) { ... } ; Double_t GetParameter(const char* name) { ... } ; virtual ~MyGenerator() { ... } ; protected: ; MyGenerator() { ... } ; MyGenerator(const MyGenerator& o) { ... } ; MyGenerator& operator=(const MyGenerator& o) { ... } ; static MyGenerator* fgInstance; ; ClassDefOverride(MyGenerator,0); ; }; ; Having multiple objects accessing the same common blocks is not ; safe. . Concrete TGenerator classes can be loaded in scripts and subseqent- ; ly used in compiled code: . // MyRun.h ; class MyRun : public TObject ; { ; public: ; static MyRun* Instance() { ... } ; void SetGenerator(TGenerator* g) { fGenerator = g; } ; void Run(Int_t n, Option_t* option="""") ; { ; TFile* file = TFile::Open(""file.root"",""RECREATE""); ; TTree* tree = new TTree(""T"",""T""); ; TClonesArray* p = new TClonesArray(""TParticles""); ; tree->Branch(""particles"", &p); ; for (Int_t event = 0; event < n; event++) { ; fGenerator->GenerateEvent(); ; fGenerator->ImportParticles(p,option); ; tree->Fill(); ; } ; file->Write(); ; file->Close(); ; } ; ... ; protected: ; TGenerator* fGenerator; ; ClassDefOverride(MyRun,0); ; }; ; ; // Config.C ; void Config() ; { ; MyRun* run = MyRun::Instance(); ; run->SetGenerator(MyGenerator::Instance()); ; } ; ; // main.cxx ; int ; main(int argc, char** argv) ; { ; TApplication app("""", 0, 0)",MatchSource.WIKI,doc/master/classTGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenerator.html
Energy Efficiency,allocate,allocated,");  Copy the iterator source into dest. ;  ; typedef void(* CreateIterators_t) (void *collection, void **begin_arena, void **end_arena, TVirtualCollectionProxy *proxy);  *begin_arena and *end_arena should contain the location of a memory arena of size fgIteratorArenaSize. ;  ; typedef void(* DeleteIterator_t) (void *iter);  If the size of the iterator is greater than fgIteratorArenaSize, call delete on the addresses; otherwise, just call the iterator's destructor. ;  ; typedef void(* DeleteTwoIterators_t) (void *begin, void *end);  ; enum  EProperty { kIsAssociative = (1ULL << ( 2 )); , kIsEmulated = (1ULL << ( 3 )); , kNeedDelete = (1ULL << ( 4 )); , kCustomAlloc = (1ULL << ( 5 )); };  ; typedef void *(* Next_t) (void *iter, const void *end);  iter and end should be pointers to an iterator to be incremented and an iterator that points to the end of the collection, respectively. ;  ;  Static Public Attributes inherited from TVirtualCollectionProxy; static const Int_t fgIteratorArenaSize = 16;  The size of a small buffer that can be allocated on the stack to store iterator-specific information. ;  ;  Protected Types inherited from TGenCollectionProxy; typedef void *(* ArrIterfunc_t) (void *from, size_t size);  ; typedef void *(* Collectfunc_t) (void *from, void *to);  ; typedef ROOT::Detail::TCollectionProxyInfo::Environ< char[64]> Env_t;  ; typedef ROOT::Detail::TCollectionProxyInfo::EnvironBase EnvironBase_t;  ; typedef void *(* Feedfunc_t) (void *from, void *to, size_t size);  ; typedef std::vector< EnvironBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  ;  Protected Member Functions inherited from TGenCollectionProxy; void CheckFunctions () const;  Check existence of function pointers. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  ; virtual TGenCollectionProxy * InitializeEx (Bool_t",MatchSource.WIKI,doc/master/classTGenListProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenListProxy.html
Modifiability,inherit,inherited,". ROOT: TGenListProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TGenListProxy Class Reference. . Definition at line 190 of file TGenCollectionProxy.cxx. Public Member Functions;  TGenListProxy (const TGenCollectionProxy &c);  ;  ~TGenListProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ;  Public Member Functions inherited from TGenVectorProxy;  TGenVectorProxy (const TGenCollectionProxy &c);  ;  ~TGenVectorProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; TClass * GetCollectionClass () const override;  Return a pointer to the TClass representing the container. ;  ; Int_t GetCollectionType () const override;  Return the type of collection see TClassEdit::ESTLType. ;  ; TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions (TClass *oldClass, Int_t version) override;  Return the s",MatchSource.WIKI,doc/master/classTGenListProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenListProxy.html
Performance,cache,cache," information. ;  ;  Protected Types inherited from TGenCollectionProxy; typedef void *(* ArrIterfunc_t) (void *from, size_t size);  ; typedef void *(* Collectfunc_t) (void *from, void *to);  ; typedef ROOT::Detail::TCollectionProxyInfo::Environ< char[64]> Env_t;  ; typedef ROOT::Detail::TCollectionProxyInfo::EnvironBase EnvironBase_t;  ; typedef void *(* Feedfunc_t) (void *from, void *to, size_t size);  ; typedef std::vector< EnvironBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  ;  Protected Member Functions inherited from TGenCollectionProxy; void CheckFunctions () const;  Check existence of function pointers. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  ; virtual TGenCollectionProxy * InitializeEx (Bool_t silent);  Proxy initializer. ;  ;  Protected Attributes inherited from TGenCollectionProxy; Method fClear;  Method cache for container accessors: clear container. ;  ; Collectfunc_t fCollect;  Method to collect objects from container. ;  ; ArrIterfunc_t fConstruct;  Container accessors: block construct. ;  ; std::map< std::string, TObjArray * > * fConversionReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) derived from another class. ;  ; Method0 fCreateEnv;  Method to allocate an Environment holder. ;  ; Sizing_t fDestruct;  Container accessors: block destruct. ;  ; EnvironBase_t * fEnv;  Address of the currently proxied object. ;  ; Feedfunc_t fFeed;  Container accessors: block feed. ;  ; Method fFirst;  Container accessors: generic iteration: first. ;  ; CopyIterator_t fFunctionCopyIterator;  ; CreateIterators_t fFunctionCreateIterators;  ; DeleteIterator_t fFunctionDeleteIterator;  ; DeleteTwoIterators_t fFunctionDeleteTwoIterators;  ; Next_t fFunctionNextIterator;  ; Value * fKey;  Descriptor of the key_type. ;  ; std::string fName;  Name of the ",MatchSource.WIKI,doc/master/classTGenListProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenListProxy.html
Security,access,accessors," information. ;  ;  Protected Types inherited from TGenCollectionProxy; typedef void *(* ArrIterfunc_t) (void *from, size_t size);  ; typedef void *(* Collectfunc_t) (void *from, void *to);  ; typedef ROOT::Detail::TCollectionProxyInfo::Environ< char[64]> Env_t;  ; typedef ROOT::Detail::TCollectionProxyInfo::EnvironBase EnvironBase_t;  ; typedef void *(* Feedfunc_t) (void *from, void *to, size_t size);  ; typedef std::vector< EnvironBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  ;  Protected Member Functions inherited from TGenCollectionProxy; void CheckFunctions () const;  Check existence of function pointers. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  ; virtual TGenCollectionProxy * InitializeEx (Bool_t silent);  Proxy initializer. ;  ;  Protected Attributes inherited from TGenCollectionProxy; Method fClear;  Method cache for container accessors: clear container. ;  ; Collectfunc_t fCollect;  Method to collect objects from container. ;  ; ArrIterfunc_t fConstruct;  Container accessors: block construct. ;  ; std::map< std::string, TObjArray * > * fConversionReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) derived from another class. ;  ; Method0 fCreateEnv;  Method to allocate an Environment holder. ;  ; Sizing_t fDestruct;  Container accessors: block destruct. ;  ; EnvironBase_t * fEnv;  Address of the currently proxied object. ;  ; Feedfunc_t fFeed;  Container accessors: block feed. ;  ; Method fFirst;  Container accessors: generic iteration: first. ;  ; CopyIterator_t fFunctionCopyIterator;  ; CreateIterators_t fFunctionCreateIterators;  ; DeleteIterator_t fFunctionDeleteIterator;  ; DeleteTwoIterators_t fFunctionDeleteTwoIterators;  ; Next_t fFunctionNextIterator;  ; Value * fKey;  Descriptor of the key_type. ;  ; std::string fName;  Name of the ",MatchSource.WIKI,doc/master/classTGenListProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenListProxy.html
Usability,simpl,simple,"eTwoIterators_t)(void *begin, void *end); If the sizeof iterator is greater than fgIteratorArenaSize, call delete on the addresses, Otherwise just call the iterator's destructor. ;  ; Next_t GetFunctionNext (Bool_t read=kTRUE) override;  See typedef void* (*Next_t)(void *iter, void *end); iter and end should be pointer to respectively an iterator to be incremented and the result of colleciton.end() 'Next' will increment the iterator 'iter' and return 0 if the iterator reached the end. ;  ; ULong_t GetIncrement () const override;  Return the offset between two consecutive value_types (memory layout). ;  ; virtual TClass * GetOnFileClass () const;  ; TStreamerInfoActions::TActionSequence * GetReadMemberWiseActions (Int_t version) override;  Return the set of action necessary to stream in this collection member-wise coming from the old value class layout refered to by 'version'. ;  ; EDataType GetType () const override;  If the content is a simple numerical value, return its type (see TDataType) ;  ; TClass * GetValueClass () const override;  Return a pointer to the TClass representing the content. ;  ; TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions () override;  Return the set of action necessary to stream out this collection member-wise. ;  ; Bool_t HasPointers () const override;  Return true if the content is of type 'pointer to'. ;  ; void Insert (const void *data, void *container, size_t size) override;  Insert data into the container where data is a C-style array of the actual type contained in the collection of the given size. ;  ; virtual void operator() (TBuffer &refBuffer, void *pObject);  TClassStreamer IO overload. ;  ; void PopProxy () override;  Remove the last object. ;  ; void PushProxy (void *objstart) override;  Add an object. ;  ; virtual void ReadBuffer (TBuffer &b, void *obj);  ; virtual void ReadBuffer (TBuffer &b, void *obj, const TClass *onfileClass);  ; Bool_t Reset () override;  Reset the info gathered from StreamerInfos and",MatchSource.WIKI,doc/master/classTGenListProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenListProxy.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TGenMapProxy Member List. This is the complete list of members for TGenMapProxy, including all inherited members. Allocate(UInt_t n, Bool_t forceDelete) overrideTGenCollectionProxyvirtual; ArrIterfunc_t typedefTGenCollectionProxyprotected; At(UInt_t idx) overrideTGenSetProxyinlinevirtual; CheckFunctions() constTGenCollectionProxyprotected; Clear(const char *opt="""") overrideTGenCollectionProxyvirtual; Collectfunc_t typedefTGenCollectionProxyprotected; Commit(void *env) overrideTGenCollectionProxyvirtual; CopyIterator_t typedefTVirtualCollectionProxy; CreateIterators_t typedefTVirtualCollectionProxy; DeleteArray(void *p, Bool_t dtorOnly=kFALSE) constTVirtualCollectionProxyinlinevirtual; DeleteItem(Bool_t force, void *ptr) const overrideTGenMapProxyinlinevirtual; DeleteIterator_t typedefTVirtualCollectionProxy; DeleteTwoIterators_t typedefTVirtualCollectionProxy; Destructor(void *p, Bool_t dtorOnly=kFALSE) constTVirtualCollectionProxyinlinevirtual; Env_t typedefTGenCollectionProxyprotected; EnvironBase_t typedefTGenCollectionProxyprotected; EProperty enum nameTVirtualCollectionProxy; fClassTVirtualCollectionProxyprotected; fClearTGenCollectionProxyprotected; fCollectTGenCollectionProxyprotected; fConstructTGenCollectionProxyprotected; fConversionReadMemberWiseTGenCollectionProxymutableprotected; fCreateEnvTGenCollectionProxyprotected; fDestructTGenCollectionProxyprotected; Feedfunc_t typedefTGenCollectionProxyprotected; fEnvTGenCollectionProxyprotected; fFeedTGenCollectionProxyprotected; fFirstTGenCollectionProxyprotected; fFunctionCopyIteratorTGenCollectionProxyprotected; fFunctionCreateIteratorsTGenCollectionProxyprotected; fFunctionDeleteIteratorTGenCollectionProxyprotected; fFunctionDeleteTwoIteratorsTGenCollectionProxyprotected; fFunctionNextIteratorTGenCollectionProxyprotected; fgIteratorArenaSizeTVirtualCollectionProxystatic; fKeyTGenCollectionProxyprotected; fNa",MatchSource.WIKI,doc/master/classTGenMapProxy-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenMapProxy-members.html
Energy Efficiency,allocate,allocated,");  Copy the iterator source into dest. ;  ; typedef void(* CreateIterators_t) (void *collection, void **begin_arena, void **end_arena, TVirtualCollectionProxy *proxy);  *begin_arena and *end_arena should contain the location of a memory arena of size fgIteratorArenaSize. ;  ; typedef void(* DeleteIterator_t) (void *iter);  If the size of the iterator is greater than fgIteratorArenaSize, call delete on the addresses; otherwise, just call the iterator's destructor. ;  ; typedef void(* DeleteTwoIterators_t) (void *begin, void *end);  ; enum  EProperty { kIsAssociative = (1ULL << ( 2 )); , kIsEmulated = (1ULL << ( 3 )); , kNeedDelete = (1ULL << ( 4 )); , kCustomAlloc = (1ULL << ( 5 )); };  ; typedef void *(* Next_t) (void *iter, const void *end);  iter and end should be pointers to an iterator to be incremented and an iterator that points to the end of the collection, respectively. ;  ;  Static Public Attributes inherited from TVirtualCollectionProxy; static const Int_t fgIteratorArenaSize = 16;  The size of a small buffer that can be allocated on the stack to store iterator-specific information. ;  ;  Protected Types inherited from TGenCollectionProxy; typedef void *(* ArrIterfunc_t) (void *from, size_t size);  ; typedef void *(* Collectfunc_t) (void *from, void *to);  ; typedef ROOT::Detail::TCollectionProxyInfo::Environ< char[64]> Env_t;  ; typedef ROOT::Detail::TCollectionProxyInfo::EnvironBase EnvironBase_t;  ; typedef void *(* Feedfunc_t) (void *from, void *to, size_t size);  ; typedef std::vector< EnvironBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  ;  Protected Member Functions inherited from TGenCollectionProxy; void CheckFunctions () const;  Check existence of function pointers. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  ; virtual TGenCollectionProxy * InitializeEx (Bool_t",MatchSource.WIKI,doc/master/classTGenMapProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenMapProxy.html
Modifiability,inherit,inherited,". ROOT: TGenMapProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TGenMapProxy Class ReferenceInput/Output Library. ; Localoptimization class. ; Collection proxies get copied. On copy we switch the type of the proxy to the concrete STL type. The concrete types are optimized for element access. ; Definition at line 277 of file TGenCollectionProxy.cxx. Public Member Functions;  TGenMapProxy (const TGenCollectionProxy &c);  ;  ~TGenMapProxy () override;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenSetProxy;  TGenSetProxy (const TGenCollectionProxy &c);  ;  ~TGenSetProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ;  Public Member Functions inherited from TGenVectorProxy;  TGenVectorProxy (const TGenCollectionProxy &c);  ;  ~TGenVectorProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; T",MatchSource.WIKI,doc/master/classTGenMapProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenMapProxy.html
Performance,optimiz,optimized,". ROOT: TGenMapProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TGenMapProxy Class ReferenceInput/Output Library. ; Localoptimization class. ; Collection proxies get copied. On copy we switch the type of the proxy to the concrete STL type. The concrete types are optimized for element access. ; Definition at line 277 of file TGenCollectionProxy.cxx. Public Member Functions;  TGenMapProxy (const TGenCollectionProxy &c);  ;  ~TGenMapProxy () override;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenSetProxy;  TGenSetProxy (const TGenCollectionProxy &c);  ;  ~TGenSetProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ;  Public Member Functions inherited from TGenVectorProxy;  TGenVectorProxy (const TGenCollectionProxy &c);  ;  ~TGenVectorProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; T",MatchSource.WIKI,doc/master/classTGenMapProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenMapProxy.html
Security,access,access,". ROOT: TGenMapProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TGenMapProxy Class ReferenceInput/Output Library. ; Localoptimization class. ; Collection proxies get copied. On copy we switch the type of the proxy to the concrete STL type. The concrete types are optimized for element access. ; Definition at line 277 of file TGenCollectionProxy.cxx. Public Member Functions;  TGenMapProxy (const TGenCollectionProxy &c);  ;  ~TGenMapProxy () override;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenSetProxy;  TGenSetProxy (const TGenCollectionProxy &c);  ;  ~TGenSetProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ;  Public Member Functions inherited from TGenVectorProxy;  TGenVectorProxy (const TGenCollectionProxy &c);  ;  ~TGenVectorProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; T",MatchSource.WIKI,doc/master/classTGenMapProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenMapProxy.html
Usability,simpl,simple,"eTwoIterators_t)(void *begin, void *end); If the sizeof iterator is greater than fgIteratorArenaSize, call delete on the addresses, Otherwise just call the iterator's destructor. ;  ; Next_t GetFunctionNext (Bool_t read=kTRUE) override;  See typedef void* (*Next_t)(void *iter, void *end); iter and end should be pointer to respectively an iterator to be incremented and the result of colleciton.end() 'Next' will increment the iterator 'iter' and return 0 if the iterator reached the end. ;  ; ULong_t GetIncrement () const override;  Return the offset between two consecutive value_types (memory layout). ;  ; virtual TClass * GetOnFileClass () const;  ; TStreamerInfoActions::TActionSequence * GetReadMemberWiseActions (Int_t version) override;  Return the set of action necessary to stream in this collection member-wise coming from the old value class layout refered to by 'version'. ;  ; EDataType GetType () const override;  If the content is a simple numerical value, return its type (see TDataType) ;  ; TClass * GetValueClass () const override;  Return a pointer to the TClass representing the content. ;  ; TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions () override;  Return the set of action necessary to stream out this collection member-wise. ;  ; Bool_t HasPointers () const override;  Return true if the content is of type 'pointer to'. ;  ; void Insert (const void *data, void *container, size_t size) override;  Insert data into the container where data is a C-style array of the actual type contained in the collection of the given size. ;  ; virtual void operator() (TBuffer &refBuffer, void *pObject);  TClassStreamer IO overload. ;  ; void PopProxy () override;  Remove the last object. ;  ; void PushProxy (void *objstart) override;  Add an object. ;  ; virtual void ReadBuffer (TBuffer &b, void *obj);  ; virtual void ReadBuffer (TBuffer &b, void *obj, const TClass *onfileClass);  ; Bool_t Reset () override;  Reset the info gathered from StreamerInfos and",MatchSource.WIKI,doc/master/classTGenMapProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenMapProxy.html
Availability,avail,available,". ROOT: TGenPhaseSpace Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGenPhaseSpace Class ReferenceMath » Legacy Physics Classes. ; Legacy Code TGenPhaseSpace is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TGenPhaseSpace might still be a valid solution. No alternative classes are currently available. ; Utility class to generate n-body event, with constant cross-section (default) or with Fermi energy dependence (opt=""Fermi""). The event is generated in the center-of-mass frame, but the decay products are finally boosted using the betas of the original particle.; The code is based on the GENBOD function (W515 from CERNLIB) using the Raubold and Lynch method F. James, Monte Carlo Phase Space, CERN 68-15 (1968); see example of use in PhaseSpace.C; Note that Momentum, Energy units are Gev/C, GeV ; Definition at line 15 of file TGenPhaseSpace.h. Public Member Functions;  TGenPhaseSpace ();  ;  TGenPhaseSpace (const TGenPhaseSpace &gen);  Copy constructor. ;  ;  ~TGenPhaseSpace () override;  ; Double_t Generate ();  Generate a random final state. ;  ; TLorentzVector * GetDecay (Int_t n);  Return Lorentz vector corresponding to decay n. ;  ; Int_t GetNt () const;  ; Double_t GetWtMax () const;  ; TClass * IsA () const override;  ; TGenPhaseSpace & operator= (const TGenPhaseSpace &gen);  Assignment operator. ;  ; Bool_t SetDecay (TLorentzVector &P, Int_t nt, const Double_t *mass, Option_t *opt="""");  Input: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;",MatchSource.WIKI,doc/master/classTGenPhaseSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenPhaseSpace.html
Energy Efficiency,energy,energy,". ROOT: TGenPhaseSpace Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGenPhaseSpace Class ReferenceMath » Legacy Physics Classes. ; Legacy Code TGenPhaseSpace is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TGenPhaseSpace might still be a valid solution. No alternative classes are currently available. ; Utility class to generate n-body event, with constant cross-section (default) or with Fermi energy dependence (opt=""Fermi""). The event is generated in the center-of-mass frame, but the decay products are finally boosted using the betas of the original particle.; The code is based on the GENBOD function (W515 from CERNLIB) using the Raubold and Lynch method F. James, Monte Carlo Phase Space, CERN 68-15 (1968); see example of use in PhaseSpace.C; Note that Momentum, Energy units are Gev/C, GeV ; Definition at line 15 of file TGenPhaseSpace.h. Public Member Functions;  TGenPhaseSpace ();  ;  TGenPhaseSpace (const TGenPhaseSpace &gen);  Copy constructor. ;  ;  ~TGenPhaseSpace () override;  ; Double_t Generate ();  Generate a random final state. ;  ; TLorentzVector * GetDecay (Int_t n);  Return Lorentz vector corresponding to decay n. ;  ; Int_t GetNt () const;  ; Double_t GetWtMax () const;  ; TClass * IsA () const override;  ; TGenPhaseSpace & operator= (const TGenPhaseSpace &gen);  Assignment operator. ;  ; Bool_t SetDecay (TLorentzVector &P, Int_t nt, const Double_t *mass, Option_t *opt="""");  Input: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;",MatchSource.WIKI,doc/master/classTGenPhaseSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenPhaseSpace.html
Integrability,interface,interface,". ROOT: TGenPhaseSpace Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGenPhaseSpace Class ReferenceMath » Legacy Physics Classes. ; Legacy Code TGenPhaseSpace is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TGenPhaseSpace might still be a valid solution. No alternative classes are currently available. ; Utility class to generate n-body event, with constant cross-section (default) or with Fermi energy dependence (opt=""Fermi""). The event is generated in the center-of-mass frame, but the decay products are finally boosted using the betas of the original particle.; The code is based on the GENBOD function (W515 from CERNLIB) using the Raubold and Lynch method F. James, Monte Carlo Phase Space, CERN 68-15 (1968); see example of use in PhaseSpace.C; Note that Momentum, Energy units are Gev/C, GeV ; Definition at line 15 of file TGenPhaseSpace.h. Public Member Functions;  TGenPhaseSpace ();  ;  TGenPhaseSpace (const TGenPhaseSpace &gen);  Copy constructor. ;  ;  ~TGenPhaseSpace () override;  ; Double_t Generate ();  Generate a random final state. ;  ; TLorentzVector * GetDecay (Int_t n);  Return Lorentz vector corresponding to decay n. ;  ; Int_t GetNt () const;  ; Double_t GetWtMax () const;  ; TClass * IsA () const override;  ; TGenPhaseSpace & operator= (const TGenPhaseSpace &gen);  Assignment operator. ;  ; Bool_t SetDecay (TLorentzVector &P, Int_t nt, const Double_t *mass, Option_t *opt="""");  Input: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;",MatchSource.WIKI,doc/master/classTGenPhaseSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenPhaseSpace.html
Modifiability,inherit,inherited,"de is based on the GENBOD function (W515 from CERNLIB) using the Raubold and Lynch method F. James, Monte Carlo Phase Space, CERN 68-15 (1968); see example of use in PhaseSpace.C; Note that Momentum, Energy units are Gev/C, GeV ; Definition at line 15 of file TGenPhaseSpace.h. Public Member Functions;  TGenPhaseSpace ();  ;  TGenPhaseSpace (const TGenPhaseSpace &gen);  Copy constructor. ;  ;  ~TGenPhaseSpace () override;  ; Double_t Generate ();  Generate a random final state. ;  ; TLorentzVector * GetDecay (Int_t n);  Return Lorentz vector corresponding to decay n. ;  ; Int_t GetNt () const;  ; Double_t GetWtMax () const;  ; TClass * IsA () const override;  ; TGenPhaseSpace & operator= (const TGenPhaseSpace &gen);  Assignment operator. ;  ; Bool_t SetDecay (TLorentzVector &P, Int_t nt, const Double_t *mass, Option_t *opt="""");  Input: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTGenPhaseSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenPhaseSpace.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGenPhaseSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenPhaseSpace.html
Energy Efficiency,allocate,allocated,");  Copy the iterator source into dest. ;  ; typedef void(* CreateIterators_t) (void *collection, void **begin_arena, void **end_arena, TVirtualCollectionProxy *proxy);  *begin_arena and *end_arena should contain the location of a memory arena of size fgIteratorArenaSize. ;  ; typedef void(* DeleteIterator_t) (void *iter);  If the size of the iterator is greater than fgIteratorArenaSize, call delete on the addresses; otherwise, just call the iterator's destructor. ;  ; typedef void(* DeleteTwoIterators_t) (void *begin, void *end);  ; enum  EProperty { kIsAssociative = (1ULL << ( 2 )); , kIsEmulated = (1ULL << ( 3 )); , kNeedDelete = (1ULL << ( 4 )); , kCustomAlloc = (1ULL << ( 5 )); };  ; typedef void *(* Next_t) (void *iter, const void *end);  iter and end should be pointers to an iterator to be incremented and an iterator that points to the end of the collection, respectively. ;  ;  Static Public Attributes inherited from TVirtualCollectionProxy; static const Int_t fgIteratorArenaSize = 16;  The size of a small buffer that can be allocated on the stack to store iterator-specific information. ;  ;  Protected Types inherited from TGenCollectionProxy; typedef void *(* ArrIterfunc_t) (void *from, size_t size);  ; typedef void *(* Collectfunc_t) (void *from, void *to);  ; typedef ROOT::Detail::TCollectionProxyInfo::Environ< char[64]> Env_t;  ; typedef ROOT::Detail::TCollectionProxyInfo::EnvironBase EnvironBase_t;  ; typedef void *(* Feedfunc_t) (void *from, void *to, size_t size);  ; typedef std::vector< EnvironBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  ;  Protected Member Functions inherited from TGenCollectionProxy; void CheckFunctions () const;  Check existence of function pointers. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  ; virtual TGenCollectionProxy * InitializeEx (Bool_t",MatchSource.WIKI,doc/master/classTGenSetProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenSetProxy.html
Modifiability,inherit,inherited,". ROOT: TGenSetProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TGenSetProxy Class ReferenceInput/Output Library. ; Localoptimization class. ; Collection proxies get copied. On copy we switch the type of the proxy to the concrete STL type. The concrete types are optimized for element access. ; Definition at line 232 of file TGenCollectionProxy.cxx. Public Member Functions;  TGenSetProxy (const TGenCollectionProxy &c);  ;  ~TGenSetProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ;  Public Member Functions inherited from TGenVectorProxy;  TGenVectorProxy (const TGenCollectionProxy &c);  ;  ~TGenVectorProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; TClass * GetCollectionClass () const override;  Return a pointer to the TClass representing the container. ;  ; Int_t GetCollectionType () const override;",MatchSource.WIKI,doc/master/classTGenSetProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenSetProxy.html
Performance,optimiz,optimized,". ROOT: TGenSetProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TGenSetProxy Class ReferenceInput/Output Library. ; Localoptimization class. ; Collection proxies get copied. On copy we switch the type of the proxy to the concrete STL type. The concrete types are optimized for element access. ; Definition at line 232 of file TGenCollectionProxy.cxx. Public Member Functions;  TGenSetProxy (const TGenCollectionProxy &c);  ;  ~TGenSetProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ;  Public Member Functions inherited from TGenVectorProxy;  TGenVectorProxy (const TGenCollectionProxy &c);  ;  ~TGenVectorProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; TClass * GetCollectionClass () const override;  Return a pointer to the TClass representing the container. ;  ; Int_t GetCollectionType () const override;",MatchSource.WIKI,doc/master/classTGenSetProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenSetProxy.html
Security,access,access,". ROOT: TGenSetProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TGenSetProxy Class ReferenceInput/Output Library. ; Localoptimization class. ; Collection proxies get copied. On copy we switch the type of the proxy to the concrete STL type. The concrete types are optimized for element access. ; Definition at line 232 of file TGenCollectionProxy.cxx. Public Member Functions;  TGenSetProxy (const TGenCollectionProxy &c);  ;  ~TGenSetProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ;  Public Member Functions inherited from TGenVectorProxy;  TGenVectorProxy (const TGenCollectionProxy &c);  ;  ~TGenVectorProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; TClass * GetCollectionClass () const override;  Return a pointer to the TClass representing the container. ;  ; Int_t GetCollectionType () const override;",MatchSource.WIKI,doc/master/classTGenSetProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenSetProxy.html
Usability,simpl,simple,"eTwoIterators_t)(void *begin, void *end); If the sizeof iterator is greater than fgIteratorArenaSize, call delete on the addresses, Otherwise just call the iterator's destructor. ;  ; Next_t GetFunctionNext (Bool_t read=kTRUE) override;  See typedef void* (*Next_t)(void *iter, void *end); iter and end should be pointer to respectively an iterator to be incremented and the result of colleciton.end() 'Next' will increment the iterator 'iter' and return 0 if the iterator reached the end. ;  ; ULong_t GetIncrement () const override;  Return the offset between two consecutive value_types (memory layout). ;  ; virtual TClass * GetOnFileClass () const;  ; TStreamerInfoActions::TActionSequence * GetReadMemberWiseActions (Int_t version) override;  Return the set of action necessary to stream in this collection member-wise coming from the old value class layout refered to by 'version'. ;  ; EDataType GetType () const override;  If the content is a simple numerical value, return its type (see TDataType) ;  ; TClass * GetValueClass () const override;  Return a pointer to the TClass representing the content. ;  ; TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions () override;  Return the set of action necessary to stream out this collection member-wise. ;  ; Bool_t HasPointers () const override;  Return true if the content is of type 'pointer to'. ;  ; void Insert (const void *data, void *container, size_t size) override;  Insert data into the container where data is a C-style array of the actual type contained in the collection of the given size. ;  ; virtual void operator() (TBuffer &refBuffer, void *pObject);  TClassStreamer IO overload. ;  ; void PopProxy () override;  Remove the last object. ;  ; void PushProxy (void *objstart) override;  Add an object. ;  ; virtual void ReadBuffer (TBuffer &b, void *obj);  ; virtual void ReadBuffer (TBuffer &b, void *obj, const TClass *onfileClass);  ; Bool_t Reset () override;  Reset the info gathered from StreamerInfos and",MatchSource.WIKI,doc/master/classTGenSetProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenSetProxy.html
Energy Efficiency,allocate,allocated,");  Copy the iterator source into dest. ;  ; typedef void(* CreateIterators_t) (void *collection, void **begin_arena, void **end_arena, TVirtualCollectionProxy *proxy);  *begin_arena and *end_arena should contain the location of a memory arena of size fgIteratorArenaSize. ;  ; typedef void(* DeleteIterator_t) (void *iter);  If the size of the iterator is greater than fgIteratorArenaSize, call delete on the addresses; otherwise, just call the iterator's destructor. ;  ; typedef void(* DeleteTwoIterators_t) (void *begin, void *end);  ; enum  EProperty { kIsAssociative = (1ULL << ( 2 )); , kIsEmulated = (1ULL << ( 3 )); , kNeedDelete = (1ULL << ( 4 )); , kCustomAlloc = (1ULL << ( 5 )); };  ; typedef void *(* Next_t) (void *iter, const void *end);  iter and end should be pointers to an iterator to be incremented and an iterator that points to the end of the collection, respectively. ;  ;  Static Public Attributes inherited from TVirtualCollectionProxy; static const Int_t fgIteratorArenaSize = 16;  The size of a small buffer that can be allocated on the stack to store iterator-specific information. ;  ;  Protected Types inherited from TGenCollectionProxy; typedef void *(* ArrIterfunc_t) (void *from, size_t size);  ; typedef void *(* Collectfunc_t) (void *from, void *to);  ; typedef ROOT::Detail::TCollectionProxyInfo::Environ< char[64]> Env_t;  ; typedef ROOT::Detail::TCollectionProxyInfo::EnvironBase EnvironBase_t;  ; typedef void *(* Feedfunc_t) (void *from, void *to, size_t size);  ; typedef std::vector< EnvironBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  ;  Protected Member Functions inherited from TGenCollectionProxy; void CheckFunctions () const;  Check existence of function pointers. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  ; virtual TGenCollectionProxy * InitializeEx (Bool_t",MatchSource.WIKI,doc/master/classTGenVectorBoolProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenVectorBoolProxy.html
Modifiability,inherit,inherited,". ROOT: TGenVectorBoolProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TGenVectorBoolProxy Class ReferenceInput/Output Library. ; Local optimization class. ; Collection proxies get copied. On copy we switch the type of the proxy to the concrete STL type. The concrete types are optimized for element access. ; Definition at line 88 of file TGenCollectionProxy.cxx. Public Member Functions;  TGenVectorBoolProxy (const TGenCollectionProxy &c);  ;  ~TGenVectorBoolProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; TClass * GetCollectionClass () const override;  Return a pointer to the TClass representing the container. ;  ; Int_t GetCollectionType () const override;  Return the type of collection see TClassEdit::ESTLType. ;  ; TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions (TClass *oldClass, Int_t version) override",MatchSource.WIKI,doc/master/classTGenVectorBoolProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenVectorBoolProxy.html
Performance,optimiz,optimization,". ROOT: TGenVectorBoolProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TGenVectorBoolProxy Class ReferenceInput/Output Library. ; Local optimization class. ; Collection proxies get copied. On copy we switch the type of the proxy to the concrete STL type. The concrete types are optimized for element access. ; Definition at line 88 of file TGenCollectionProxy.cxx. Public Member Functions;  TGenVectorBoolProxy (const TGenCollectionProxy &c);  ;  ~TGenVectorBoolProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; TClass * GetCollectionClass () const override;  Return a pointer to the TClass representing the container. ;  ; Int_t GetCollectionType () const override;  Return the type of collection see TClassEdit::ESTLType. ;  ; TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions (TClass *oldClass, Int_t version) override",MatchSource.WIKI,doc/master/classTGenVectorBoolProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenVectorBoolProxy.html
Security,access,access,". ROOT: TGenVectorBoolProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TGenVectorBoolProxy Class ReferenceInput/Output Library. ; Local optimization class. ; Collection proxies get copied. On copy we switch the type of the proxy to the concrete STL type. The concrete types are optimized for element access. ; Definition at line 88 of file TGenCollectionProxy.cxx. Public Member Functions;  TGenVectorBoolProxy (const TGenCollectionProxy &c);  ;  ~TGenVectorBoolProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; TClass * GetCollectionClass () const override;  Return a pointer to the TClass representing the container. ;  ; Int_t GetCollectionType () const override;  Return the type of collection see TClassEdit::ESTLType. ;  ; TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions (TClass *oldClass, Int_t version) override",MatchSource.WIKI,doc/master/classTGenVectorBoolProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenVectorBoolProxy.html
Usability,simpl,simple,"eTwoIterators_t)(void *begin, void *end); If the sizeof iterator is greater than fgIteratorArenaSize, call delete on the addresses, Otherwise just call the iterator's destructor. ;  ; Next_t GetFunctionNext (Bool_t read=kTRUE) override;  See typedef void* (*Next_t)(void *iter, void *end); iter and end should be pointer to respectively an iterator to be incremented and the result of colleciton.end() 'Next' will increment the iterator 'iter' and return 0 if the iterator reached the end. ;  ; ULong_t GetIncrement () const override;  Return the offset between two consecutive value_types (memory layout). ;  ; virtual TClass * GetOnFileClass () const;  ; TStreamerInfoActions::TActionSequence * GetReadMemberWiseActions (Int_t version) override;  Return the set of action necessary to stream in this collection member-wise coming from the old value class layout refered to by 'version'. ;  ; EDataType GetType () const override;  If the content is a simple numerical value, return its type (see TDataType) ;  ; TClass * GetValueClass () const override;  Return a pointer to the TClass representing the content. ;  ; TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions () override;  Return the set of action necessary to stream out this collection member-wise. ;  ; Bool_t HasPointers () const override;  Return true if the content is of type 'pointer to'. ;  ; void Insert (const void *data, void *container, size_t size) override;  Insert data into the container where data is a C-style array of the actual type contained in the collection of the given size. ;  ; virtual void operator() (TBuffer &refBuffer, void *pObject);  TClassStreamer IO overload. ;  ; void PopProxy () override;  Remove the last object. ;  ; void PushProxy (void *objstart) override;  Add an object. ;  ; virtual void ReadBuffer (TBuffer &b, void *obj);  ; virtual void ReadBuffer (TBuffer &b, void *obj, const TClass *onfileClass);  ; Bool_t Reset () override;  Reset the info gathered from StreamerInfos and",MatchSource.WIKI,doc/master/classTGenVectorBoolProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenVectorBoolProxy.html
Energy Efficiency,allocate,allocated,");  Copy the iterator source into dest. ;  ; typedef void(* CreateIterators_t) (void *collection, void **begin_arena, void **end_arena, TVirtualCollectionProxy *proxy);  *begin_arena and *end_arena should contain the location of a memory arena of size fgIteratorArenaSize. ;  ; typedef void(* DeleteIterator_t) (void *iter);  If the size of the iterator is greater than fgIteratorArenaSize, call delete on the addresses; otherwise, just call the iterator's destructor. ;  ; typedef void(* DeleteTwoIterators_t) (void *begin, void *end);  ; enum  EProperty { kIsAssociative = (1ULL << ( 2 )); , kIsEmulated = (1ULL << ( 3 )); , kNeedDelete = (1ULL << ( 4 )); , kCustomAlloc = (1ULL << ( 5 )); };  ; typedef void *(* Next_t) (void *iter, const void *end);  iter and end should be pointers to an iterator to be incremented and an iterator that points to the end of the collection, respectively. ;  ;  Static Public Attributes inherited from TVirtualCollectionProxy; static const Int_t fgIteratorArenaSize = 16;  The size of a small buffer that can be allocated on the stack to store iterator-specific information. ;  ;  Protected Types inherited from TGenCollectionProxy; typedef void *(* ArrIterfunc_t) (void *from, size_t size);  ; typedef void *(* Collectfunc_t) (void *from, void *to);  ; typedef ROOT::Detail::TCollectionProxyInfo::Environ< char[64]> Env_t;  ; typedef ROOT::Detail::TCollectionProxyInfo::EnvironBase EnvironBase_t;  ; typedef void *(* Feedfunc_t) (void *from, void *to, size_t size);  ; typedef std::vector< EnvironBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  ;  Protected Member Functions inherited from TGenCollectionProxy; void CheckFunctions () const;  Check existence of function pointers. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  ; virtual TGenCollectionProxy * InitializeEx (Bool_t",MatchSource.WIKI,doc/master/classTGenVectorProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenVectorProxy.html
Modifiability,inherit,inherited,". ROOT: TGenVectorProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TGenVectorProxy Class ReferenceInput/Output Library. ; Local optimization class. ; Collection proxies get copied. On copy we switch the type of the proxy to the concrete STL type. The concrete types are optimized for element access. ; Definition at line 39 of file TGenCollectionProxy.cxx. Public Member Functions;  TGenVectorProxy (const TGenCollectionProxy &c);  ;  ~TGenVectorProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; TClass * GetCollectionClass () const override;  Return a pointer to the TClass representing the container. ;  ; Int_t GetCollectionType () const override;  Return the type of collection see TClassEdit::ESTLType. ;  ; TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions (TClass *oldClass, Int_t version) override;  Return the set of action necessary ",MatchSource.WIKI,doc/master/classTGenVectorProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenVectorProxy.html
Performance,optimiz,optimization,". ROOT: TGenVectorProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TGenVectorProxy Class ReferenceInput/Output Library. ; Local optimization class. ; Collection proxies get copied. On copy we switch the type of the proxy to the concrete STL type. The concrete types are optimized for element access. ; Definition at line 39 of file TGenCollectionProxy.cxx. Public Member Functions;  TGenVectorProxy (const TGenCollectionProxy &c);  ;  ~TGenVectorProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; TClass * GetCollectionClass () const override;  Return a pointer to the TClass representing the container. ;  ; Int_t GetCollectionType () const override;  Return the type of collection see TClassEdit::ESTLType. ;  ; TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions (TClass *oldClass, Int_t version) override;  Return the set of action necessary ",MatchSource.WIKI,doc/master/classTGenVectorProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenVectorProxy.html
Security,access,access,". ROOT: TGenVectorProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TGenVectorProxy Class ReferenceInput/Output Library. ; Local optimization class. ; Collection proxies get copied. On copy we switch the type of the proxy to the concrete STL type. The concrete types are optimized for element access. ; Definition at line 39 of file TGenCollectionProxy.cxx. Public Member Functions;  TGenVectorProxy (const TGenCollectionProxy &c);  ;  ~TGenVectorProxy () override;  ; void * At (UInt_t idx) override;  Return the address of the value at index 'idx'. ;  ; void DeleteItem (Bool_t force, void *ptr) const override;  Call to delete/destruct individual item. ;  ;  Public Member Functions inherited from TGenCollectionProxy;  TGenCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &info, TClass *cl);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  TGenCollectionProxy (const TGenCollectionProxy &copy);  Build a proxy for an emulated container. ;  ;  TGenCollectionProxy (Info_t typ, size_t iter_size);  Build a proxy for a collection whose type is described by 'collectionClass'. ;  ;  ~TGenCollectionProxy () override;  Standard destructor. ;  ; void * Allocate (UInt_t n, Bool_t forceDelete) override;  Allocate the needed space. ;  ; void Clear (const char *opt="""") override;  Clear the emulated collection. ;  ; void Commit (void *env) override;  Commit the change. ;  ; TVirtualCollectionProxy * Generate () const override;  Virtual copy constructor. ;  ; TClass * GetCollectionClass () const override;  Return a pointer to the TClass representing the container. ;  ; Int_t GetCollectionType () const override;  Return the type of collection see TClassEdit::ESTLType. ;  ; TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions (TClass *oldClass, Int_t version) override;  Return the set of action necessary ",MatchSource.WIKI,doc/master/classTGenVectorProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenVectorProxy.html
Usability,simpl,simple,"eTwoIterators_t)(void *begin, void *end); If the sizeof iterator is greater than fgIteratorArenaSize, call delete on the addresses, Otherwise just call the iterator's destructor. ;  ; Next_t GetFunctionNext (Bool_t read=kTRUE) override;  See typedef void* (*Next_t)(void *iter, void *end); iter and end should be pointer to respectively an iterator to be incremented and the result of colleciton.end() 'Next' will increment the iterator 'iter' and return 0 if the iterator reached the end. ;  ; ULong_t GetIncrement () const override;  Return the offset between two consecutive value_types (memory layout). ;  ; virtual TClass * GetOnFileClass () const;  ; TStreamerInfoActions::TActionSequence * GetReadMemberWiseActions (Int_t version) override;  Return the set of action necessary to stream in this collection member-wise coming from the old value class layout refered to by 'version'. ;  ; EDataType GetType () const override;  If the content is a simple numerical value, return its type (see TDataType) ;  ; TClass * GetValueClass () const override;  Return a pointer to the TClass representing the content. ;  ; TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions () override;  Return the set of action necessary to stream out this collection member-wise. ;  ; Bool_t HasPointers () const override;  Return true if the content is of type 'pointer to'. ;  ; void Insert (const void *data, void *container, size_t size) override;  Insert data into the container where data is a C-style array of the actual type contained in the collection of the given size. ;  ; virtual void operator() (TBuffer &refBuffer, void *pObject);  TClassStreamer IO overload. ;  ; void PopProxy () override;  Remove the last object. ;  ; void PushProxy (void *objstart) override;  Add an object. ;  ; virtual void ReadBuffer (TBuffer &b, void *obj);  ; virtual void ReadBuffer (TBuffer &b, void *obj, const TClass *onfileClass);  ; Bool_t Reset () override;  Reset the info gathered from StreamerInfos and",MatchSource.WIKI,doc/master/classTGenVectorProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGenVectorProxy.html
Availability,error,error,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoArb8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoArb8.html
Integrability,message,message,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoArb8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoArb8.html
Modifiability,inherit,inherited,"override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetDimensions (Double_t *param) override;  ; void SetDz (Double_t dz);  ; void SetPlaneVertices (Double_t zpl, Double_t *vertices) const;  ; void SetPoints (Double_t *points) const override;  ; void SetPoints (Float_t *points) const override;  ; virtual void SetVertex (Int_t vnum, Double_t x, Double_t y);  ; void Sizeof3D () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoBBox;  TGeoBBox ();  ;  TGeoBBox (const char *name, Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ;  TGeoBBox (Double_t *param);  ;  TGeoBBox (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ;  ~TGeoBBox () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Bool_t CouldBeCrossed (const Double_t *point, const Double_t *dir) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *po",MatchSource.WIKI,doc/master/classTGeoArb8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoArb8.html
Safety,safe,safe," Public Member Functions;  TGeoArb8 ();  ;  TGeoArb8 (const char *name, Double_t dz, Double_t *vertices=nullptr);  ;  TGeoArb8 (Double_t dz, Double_t *vertices=nullptr);  ;  ~TGeoArb8 () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; void ComputeTwist ();  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistToPlane (const Double_t *point, const Double_t *dir, Int_t ipl, Bool_t in) const;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; Int_t GetByteCount",MatchSource.WIKI,doc/master/classTGeoArb8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoArb8.html
Security,hash,hash," &ClassDef_StreamerNVirtual_b);  ; Bool_t TestShapeBit (UInt_t f) const;  ; Int_t TestShapeBits (UInt_t f) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoArb8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoArb8.html
Testability,test,testNo," Bool_t *inside, Double_t *safe, Int_t vecsize) const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void SetDimensions (Double_t *param) override;  ; void SetPoints (Double_t *points) const override;  ; void SetPoints (Float_t *points) const override;  ; void SetSegsAndPols (TBuffer3D &buffer) const override;  ; void Sizeof3D () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; TClass * IsA () const override;  ; virtual Bool_t IsAssembly () const;  ; virtual Bool_t IsComposite () const;  ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; vo",MatchSource.WIKI,doc/master/classTGeoArb8.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoArb8.html
Performance,optimiz,optimization,"1ULL << ( 20 )); };  ; enum  EGeoVisibilityAtt { ;   kVisOverride = (1ULL << ( 0 )); , kVisNone = (1ULL << ( 1 )); , kVisThis = (1ULL << ( 2 )); , kVisDaughters = (1ULL << ( 3 )); , ;   kVisOneLevel = (1ULL << ( 4 )); , kVisStreamed = (1ULL << ( 5 )); , kVisTouched = (1ULL << ( 6 )); , kVisOnScreen = (1ULL << ( 7 )); , ;   kVisContainers = (1ULL << ( 12 )); , kVisOnly = (1ULL << ( 13 )); , kVisBranch = (1ULL << ( 14 )); , kVisRaytrace = (1ULL << ( 15 )). };  . Public Member Functions;  TGeoAtt ();  Default constructor. ;  ;  TGeoAtt (Option_t *vis_opt, Option_t *activity_opt="""", Option_t *optimization_opt="""");  Constructor. ;  ; virtual ~TGeoAtt ();  Destructor. ;  ; virtual TClass * IsA () const;  ; Bool_t IsActive () const;  ; Bool_t IsActiveDaughters () const;  ; Bool_t IsVisBranch () const;  ; Bool_t IsVisContainers () const;  ; Bool_t IsVisDaughters () const;  ; Bool_t IsVisible () const;  ; Bool_t IsVisLeaves () const;  ; Bool_t IsVisOnly () const;  ; Bool_t IsVisRaytrace () const;  ; Bool_t IsVisStreamed () const;  ; Bool_t IsVisTouched () const;  ; void ResetAttBit (UInt_t f);  ; void SetActiveDaughters (Bool_t flag=kTRUE);  ; void SetActivity (Bool_t flag=kTRUE);  ; void SetAttBit (UInt_t f);  ; void SetAttBit (UInt_t f, Bool_t set);  ; void SetOptimization (Option_t *option);  Set optimization flags. ;  ; void SetVisBranch ();  Set branch type visibility. ;  ; virtual void SetVisContainers (Bool_t flag=kTRUE);  Set branch type visibility. ;  ; void SetVisDaughters (Bool_t vis=kTRUE);  Set visibility for the daughters. ;  ; virtual void SetVisibility (Bool_t vis=kTRUE);  Set visibility for this object. ;  ; virtual void SetVisLeaves (Bool_t flag=kTRUE);  Set branch type visibility. ;  ; virtual void SetVisOnly (Bool_t flag=kTRUE);  Set branch type visibility. ;  ; void SetVisRaytrace (Bool_t flag=kTRUE);  ; void SetVisStreamed (Bool_t vis=kTRUE);  Mark attributes as ""streamed to file"". ;  ; void SetVisTouched (Bool_t vis=kTRUE);  Mark visualization attribute",MatchSource.WIKI,doc/master/classTGeoAtt.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoAtt.html
Availability,error,error,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoBatemanSol.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBatemanSol.html
Integrability,message,message,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoBatemanSol.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBatemanSol.html
Modifiability,inherit,inherited,"TObjArray *array);  Find the solution for the Bateman equations corresponding to the decay chain described by an array ending with element X. ;  ; void GetCoeff (Int_t i, Double_t &cn, Double_t &lambda) const;  ; TGeoElementRN * GetElement () const;  ; Int_t GetNcoeff () const;  ; void GetRange (Double_t &tmin, Double_t &tmax) const;  ; TGeoElementRN * GetTopElement () const;  ; TClass * IsA () const override;  ; void Normalize (Double_t factor);  Normalize all coefficients with a given factor. ;  ; TGeoBatemanSol & operator+= (const TGeoBatemanSol &other);  Addition of other solution. ;  ; TGeoBatemanSol & operator= (const TGeoBatemanSol &other);  Assignment. ;  ; void Print (Option_t *option="""") const override;  Print concentration evolution. ;  ; void SetFactor (Double_t factor);  ; void SetRange (Double_t tmin=0., Double_t tmax=0.);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTGeoBatemanSol.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBatemanSol.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoBatemanSol.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBatemanSol.html
Availability,error,error,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoBBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBBox.html
Integrability,message,message,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoBBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBBox.html
Modifiability,inherit,inherited,"rride;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; TBuffer3D * MakeBuffer3D () const override;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const override;  ; void Safety_v (const Double_t *points, const Bool_t *inside, Double_t *safe, Int_t vecsize) const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void SetDimensions (Double_t *param) override;  ; void SetPoints (Double_t *points) const override;  ; void SetPoints (Float_t *points) const override;  ; void SetSegsAndPols (TBuffer3D &buffer) const override;  ; void Sizeof3D () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; TClass * IsA () const override;  ; virtual Bool_t IsAssembly () const;  ; virtual Bool_t IsComposite () const;  ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsVal",MatchSource.WIKI,doc/master/classTGeoBBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBBox.html
Safety,safe,safe,"void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Bool_t CouldBeCrossed (const Double_t *point, const Double_t *dir) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; const char * GetAxisName (Int_t iaxis) const override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; Int_t GetByteCount () const override;  ; virtual Double_t GetDX () const;  ; virtual Double_t GetDY () const;  ; virtual Double_t GetDZ () const;  ; virtual Double_t GetFacetArea (Int_t index=0) const;  ; Int_t GetFittingBox (const TGeoBBox *parambox, TGeoMatrix *mat, Double_t &dx, Double_t &dy, Double_t &dz) const override;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *mother, TGeoMatrix *mat) const override;  ; void GetMeshNumbers (Int_t &nvert,",MatchSource.WIKI,doc/master/classTGeoBBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBBox.html
Security,hash,hash," &ClassDef_StreamerNVirtual_b);  ; Bool_t TestShapeBit (UInt_t f) const;  ; Int_t TestShapeBits (UInt_t f) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoBBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBBox.html
Testability,test,testNo," Bool_t *inside, Double_t *safe, Int_t vecsize) const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void SetDimensions (Double_t *param) override;  ; void SetPoints (Double_t *points) const override;  ; void SetPoints (Float_t *points) const override;  ; void SetSegsAndPols (TBuffer3D &buffer) const override;  ; void Sizeof3D () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; TClass * IsA () const override;  ; virtual Bool_t IsAssembly () const;  ; virtual Bool_t IsComposite () const;  ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; vo",MatchSource.WIKI,doc/master/classTGeoBBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBBox.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoBoolNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBoolNode.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoBoolNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBoolNode.html
Modifiability,inherit,inherited,"n 'left' and 'right' shapes positioned with respect to an ARBITRARY reference frame. The boolean node is referenced by a mother composite shape and its shape components may be primitive but also composite shapes. The later situation leads to a binary tree hierarchy. When the parent composite shape is used to create a volume, the reference frame of the volume is chosen to match the frame in which node shape components were defined.; The positioned shape components may or may not be disjoint. The specific implementations for Boolean nodes are:. TGeoUnion - representing the Boolean union of two positioned shapes; TGeoSubtraction - representing the Boolean subtraction of two positioned shapes; TGeoIntersection - representing the Boolean intersection of two positioned shapes . Definition at line 25 of file TGeoBoolNode.h. Classes; struct  ThreadData_t;  . Public Types; enum  EGeoBoolType { kGeoUnion; , kGeoIntersection; , kGeoSubtraction; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoBoolNode ();  Default constructor. ;  ;  TGeoBoolNode (const char *expr1, const char *expr2);  Constructor called by TGeoCompositeShape providing 2 subexpressions for the 2 branches. ;  ;  TGeoBoolNode (TGeoShape *left, TGeoShape *right, TGeoMatrix *lmat=nullptr, TGeoMatrix *rmat=nullptr);  Constructor providing left and right shapes and matrices (in the Boolean operation). ;",MatchSource.WIKI,doc/master/classTGeoBoolNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBoolNode.html
Safety,safe,safe,"eoShape *left, TGeoShape *right, TGeoMatrix *lmat=nullptr, TGeoMatrix *rmat=nullptr);  Constructor providing left and right shapes and matrices (in the Boolean operation). ;  ;  ~TGeoBoolNode () override;  Destructor. ;  ; void ClearThreadData () const;  ; virtual void ComputeBBox (Double_t &dx, Double_t &dy, Double_t &dz, Double_t *origin)=0;  ; virtual void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm)=0;  ; virtual Bool_t Contains (const Double_t *point) const =0;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t DistanceToPrimitive (Int_t px, Int_t py)=0;  ; virtual Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=0, Double_t *safe=nullptr) const =0;  ; virtual Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=0, Double_t *safe=nullptr) const =0;  ; virtual EGeoBoolType GetBooleanOperator () const =0;  ; TGeoMatrix * GetLeftMatrix () const;  ; TGeoShape * GetLeftShape () const;  ; virtual Int_t GetNpoints ()=0;  ; TGeoMatrix * GetRightMatrix () const;  ; TGeoShape * GetRightShape () const;  ; ThreadData_t & GetThreadData () const;  ; TClass * IsA () const override;  ; virtual TGeoBoolNode * MakeClone () const =0;  ; void Paint (Option_t *option) override;  Special schema for feeding the 3D buffers to the painter client. ;  ; void RegisterMatrices ();  Register all matrices of the boolean node and descendents. ;  ; Bool_t ReplaceMatrix (TGeoMatrix *mat, TGeoMatrix *newmat);  Replace one of the matrices. ;  ; virtual Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const =0;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; virtual void SetPoints (Double_t *points) const;  Fill buffer with shape vertices. ;  ; virtual void SetPoints (Float_t *points) const;  Fill buffer with shape vertices. ;  ",MatchSource.WIKI,doc/master/classTGeoBoolNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBoolNode.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoBoolNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBoolNode.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoBorderSurface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBorderSurface.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoBorderSurface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBorderSurface.html
Modifiability,inherit,inherited,"ce. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TGeoBorderSurface Class Reference. . Definition at line 206 of file TGeoOpticalSurface.h. Public Member Functions;  TGeoBorderSurface ();  ;  TGeoBorderSurface (const char *name, const char *ref, TGeoOpticalSurface const *surf, TGeoNode const *node1, TGeoNode const *node2);  ;  ~TGeoBorderSurface () override;  ; TGeoNode const * GetNode1 () const;  ; TGeoNode const * GetNode2 () const;  ; TGeoOpticalSurface const * GetSurface () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  This method must be overridden when a class wants to print itself. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTGeoBorderSurface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBorderSurface.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoBorderSurface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBorderSurface.html
Availability,error,error,"  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoBranchArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBranchArray.html
Deployability,update,updated,"T: TGeoBranchArray Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGeoBranchArray Class ReferenceThe Geometry Package » Geometry classes. ; An array of daughter indices making a geometry path. ; Can be used to backup/restore a state. Allocated contiguously in memory.; To setup an object of this type, one should use:; TGeoBranchArray *array = new TGeoBranchArray(level);; array->InitFromNavigator(nav); // To initialize from current navigator state; TGeoBranchArrayAn array of daughter indices making a geometry path.Definition TGeoBranchArray.h:22; TGeoBranchArray::InitFromNavigatorvoid InitFromNavigator(TGeoNavigator *nav)Init the branch array from current navigator state.Definition TGeoBranchArray.cxx:343; The navigator can be updated to reflect this path array: array->UpdateNavigator(); ; Definition at line 22 of file TGeoBranchArray.h. Public Types; enum  EGeoBATypes { kBASelfAlloc = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoBranchArray (TRootIOCtor *);  ;  ~TGeoBranchArray () override;  ; void AddLevel (Int_t dindex);  Add and extra daughter to the current path array. No validity check performed ! ;  ; void",MatchSource.WIKI,doc/master/classTGeoBranchArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBranchArray.html
Energy Efficiency,allocate,allocates," current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static Long64_t BinarySearch (Long64_t n, const TGeoBranchArray **array, TGeoBranchArray *value);  Binary search in an array of n pointers to branch arrays, to locate value. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TGeoBranchArray * MakeCopy (const TGeoBranchArray &other);  Make a copy of a branch array at the location (if indicated) ;  ; static TGeoBranchArray * MakeCopyAt (const TGeoBranchArray &other, void *addr);  Make a copy of a branch array at the location (if indicated) ;  ; static TGeoBranchArray * MakeInstance (size_t maxlevel);  Make an instance of the class which allocates the node array. ;  ; static TGeoBranchArray * MakeInstanceAt (size_t maxlevel, void *addr);  Make an instance of the class which allocates the node array. ;  ; static void ReleaseInstance (TGeoBranchArray *obj);  Releases the space allocated for the object. ;  ; static size_t SizeOf (size_t maxlevel);  ; static size_t SizeOfInstance (size_t maxlevel);  ; static void Sort (Int_t n, TGeoBranchArray **array, Int_t *index, Bool_t down=kTRUE);  Sorting of an array of branch array pointers. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ",MatchSource.WIKI,doc/master/classTGeoBranchArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBranchArray.html
Integrability,message,message,"  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoBranchArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBranchArray.html
Modifiability,inherit,inherited,"er Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGeoBranchArray Class ReferenceThe Geometry Package » Geometry classes. ; An array of daughter indices making a geometry path. ; Can be used to backup/restore a state. Allocated contiguously in memory.; To setup an object of this type, one should use:; TGeoBranchArray *array = new TGeoBranchArray(level);; array->InitFromNavigator(nav); // To initialize from current navigator state; TGeoBranchArrayAn array of daughter indices making a geometry path.Definition TGeoBranchArray.h:22; TGeoBranchArray::InitFromNavigatorvoid InitFromNavigator(TGeoNavigator *nav)Init the branch array from current navigator state.Definition TGeoBranchArray.cxx:343; The navigator can be updated to reflect this path array: array->UpdateNavigator(); ; Definition at line 22 of file TGeoBranchArray.h. Public Types; enum  EGeoBATypes { kBASelfAlloc = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoBranchArray (TRootIOCtor *);  ;  ~TGeoBranchArray () override;  ; void AddLevel (Int_t dindex);  Add and extra daughter to the current path array. No validity check performed ! ;  ; void CleanMatrix ();  Garbage collect the stored matrix. ;  ; Int_t Compare (const TObject *obj) const override;  Compare with other object of same type. ;  ; void CopyTo (TGeoBranchArray *dest);  Raw memc",MatchSource.WIKI,doc/master/classTGeoBranchArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBranchArray.html
Performance,perform,performed,"ateNavigator(); ; Definition at line 22 of file TGeoBranchArray.h. Public Types; enum  EGeoBATypes { kBASelfAlloc = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoBranchArray (TRootIOCtor *);  ;  ~TGeoBranchArray () override;  ; void AddLevel (Int_t dindex);  Add and extra daughter to the current path array. No validity check performed ! ;  ; void CleanMatrix ();  Garbage collect the stored matrix. ;  ; Int_t Compare (const TObject *obj) const override;  Compare with other object of same type. ;  ; void CopyTo (TGeoBranchArray *dest);  Raw memcpy of the branch array content to an existing destination. ;  ; size_t DataSize () const;  ; void * DataStart () const;  ; TGeoNode ** GetArray () const;  ; TGeoNode * GetCurrentNode () const;  ; size_t GetLevel () const;  ; const TGeoHMatrix * GetMatrix () const;  ; size_t GetMaxLevel () const;  ; TGeoNode * GetNode (Int_t level) const;  ; void GetPath (TString &path) const;  Fill path pointed by the array. ;  ; void Init (TGeoNode **branch, TGeoMatrix *global, Int_t level);  Init the branch array from an array of nodes, the global matrix for the path and the level. ;  ; void InitFromNavigator (TGeoNavigator *nav);  Init the branch array from current navigator state. ;  ; TClass * IsA () const override;  ; Bool_t IsOutside () const;  ; Bool_t IsSortable () const override;  ; Bool_t operator!= ",MatchSource.WIKI,doc/master/classTGeoBranchArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBranchArray.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoBranchArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBranchArray.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBuilder.html
Deployability,continuous,continuous,"ber; theta1 polar angle for axis X; phi1 azimuthal angle for axis X; theta2 polar angle for axis Y; phi2 azimuthal angle for axis Y; theta3 polar angle for axis Z; phi3 azimuthal angle for axis Z . Definition at line 497 of file TGeoBuilder.cxx. ◆ Medium(). TGeoMedium * TGeoBuilder::Medium ; (; const char * ; name, . Int_t ; numed, . Int_t ; nmat, . Int_t ; isvol, . Int_t ; ifield, . Double_t ; fieldm, . Double_t ; tmaxfd, . Double_t ; stemax, . Double_t ; deemax, . Double_t ; epsil, . Double_t ; stmin . ). Create tracking medium. . numed tracking medium number assigned; name tracking medium name; nmat material number; isvol sensitive volume flag; ifield magnetic field; fieldm max. field value (kilogauss); tmaxfd max. angle due to field (deg/step); stemax max. step allowed; deemax max. fraction of energy lost in a step; epsil tracking precision (cm); stmin min. step due to continuous processes (cm); ifield = 0 if no magnetic field; ifield = -1 if user decision in guswim;; ifield = 1 if tracking performed with g3rkuta; ifield = 2 if tracking performed with g3helix; ifield = 3 if tracking performed with g3helx3. . Definition at line 568 of file TGeoBuilder.cxx. ◆ Mixture() [1/2]. TGeoMaterial * TGeoBuilder::Mixture ; (; const char * ; name, . Double_t * ; a, . Double_t * ; z, . Double_t ; dens, . Int_t ; nelem, . Double_t * ; wmat, . Int_t ; uid . ). Create mixture OR COMPOUND IMAT as composed by THE BASIC nelem materials defined by arrays A,Z and WMAT, having an unique id. ; Definition at line 537 of file TGeoBuilder.cxx. ◆ Mixture() [2/2]. TGeoMaterial * TGeoBuilder::Mixture ; (; const char * ; name, . Float_t * ; a, . Float_t * ; z, . Double_t ; dens, . Int_t ; nelem, . Float_t * ; wmat, . Int_t ; uid . ). Create mixture OR COMPOUND IMAT as composed by THE BASIC nelem materials defined by arrays A,Z and WMAT, having an unique id. ; Definition at line 521 of file TGeoBuilder.cxx. ◆ Node() [1/2]. void TGeoBuilder::Node ; (; const char * ; name, . Int_t ; nr, . const ",MatchSource.WIKI,doc/master/classTGeoBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBuilder.html
Energy Efficiency,energy,energy,"e_t ; phi1, . Double_t ; theta2, . Double_t ; phi2, . Double_t ; theta3, . Double_t ; phi3 . ). Create rotation matrix named 'mat<index>'. . index rotation matrix number; theta1 polar angle for axis X; phi1 azimuthal angle for axis X; theta2 polar angle for axis Y; phi2 azimuthal angle for axis Y; theta3 polar angle for axis Z; phi3 azimuthal angle for axis Z . Definition at line 497 of file TGeoBuilder.cxx. ◆ Medium(). TGeoMedium * TGeoBuilder::Medium ; (; const char * ; name, . Int_t ; numed, . Int_t ; nmat, . Int_t ; isvol, . Int_t ; ifield, . Double_t ; fieldm, . Double_t ; tmaxfd, . Double_t ; stemax, . Double_t ; deemax, . Double_t ; epsil, . Double_t ; stmin . ). Create tracking medium. . numed tracking medium number assigned; name tracking medium name; nmat material number; isvol sensitive volume flag; ifield magnetic field; fieldm max. field value (kilogauss); tmaxfd max. angle due to field (deg/step); stemax max. step allowed; deemax max. fraction of energy lost in a step; epsil tracking precision (cm); stmin min. step due to continuous processes (cm); ifield = 0 if no magnetic field; ifield = -1 if user decision in guswim;; ifield = 1 if tracking performed with g3rkuta; ifield = 2 if tracking performed with g3helix; ifield = 3 if tracking performed with g3helx3. . Definition at line 568 of file TGeoBuilder.cxx. ◆ Mixture() [1/2]. TGeoMaterial * TGeoBuilder::Mixture ; (; const char * ; name, . Double_t * ; a, . Double_t * ; z, . Double_t ; dens, . Int_t ; nelem, . Double_t * ; wmat, . Int_t ; uid . ). Create mixture OR COMPOUND IMAT as composed by THE BASIC nelem materials defined by arrays A,Z and WMAT, having an unique id. ; Definition at line 537 of file TGeoBuilder.cxx. ◆ Mixture() [2/2]. TGeoMaterial * TGeoBuilder::Mixture ; (; const char * ; name, . Float_t * ; a, . Float_t * ; z, . Double_t ; dens, . Int_t ; nelem, . Float_t * ; wmat, . Int_t ; uid . ). Create mixture OR COMPOUND IMAT as composed by THE BASIC nelem materials defined by arrays A,Z and",MatchSource.WIKI,doc/master/classTGeoBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBuilder.html
Integrability,rout,rout,"1, Double_t phi2);  Make in one step a volume pointing to a cone segment shape with given medium. ;  ; TGeoVolume * MakeCtub (const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx, Double_t ly, Double_t lz, Double_t tx, Double_t ty, Double_t tz);  Make in one step a volume pointing to a tube segment shape with given medium. ;  ; TGeoVolume * MakeEltu (const char *name, TGeoMedium *medium, Double_t a, Double_t b, Double_t dz);  Make in one step a volume pointing to a tube shape with given medium. ;  ; TGeoVolume * MakeGtra (const char *name, TGeoMedium *medium, Double_t dz, Double_t theta, Double_t phi, Double_t twist, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2);  Make in one step a volume pointing to a twisted trapezoid shape with given medium. ;  ; TGeoVolume * MakeHype (const char *name, TGeoMedium *medium, Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz);  Make in one step a volume pointing to a tube shape with given medium. ;  ; TGeoVolume * MakePara (const char *name, TGeoMedium *medium, Double_t dx, Double_t dy, Double_t dz, Double_t alpha, Double_t theta, Double_t phi);  Make in one step a volume pointing to a parallelepiped shape with given medium. ;  ; TGeoVolume * MakeParaboloid (const char *name, TGeoMedium *medium, Double_t rlo, Double_t rhi, Double_t dz);  Make in one step a volume pointing to a tube shape with given medium. ;  ; TGeoVolume * MakePcon (const char *name, TGeoMedium *medium, Double_t phi, Double_t dphi, Int_t nz);  Make in one step a volume pointing to a polycone shape with given medium. ;  ; TGeoVolume * MakePgon (const char *name, TGeoMedium *medium, Double_t phi, Double_t dphi, Int_t nedges, Int_t nz);  Make in one step a volume pointing to a polygone shape with given medium. ;  ; TGeoVolume * MakeSphere (const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Do",MatchSource.WIKI,doc/master/classTGeoBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBuilder.html
Modifiability,inherit,inherited,", Bool_t isOnly, Double_t *upar, Int_t npar=0);  Create a node called <name_nr> pointing to the volume called <name> as daughter of the volume called <mother> (gspos). ;  ; void Node (const char *name, Int_t nr, const char *mother, Double_t x, Double_t y, Double_t z, Int_t irot, Bool_t isOnly, Float_t *upar, Int_t npar=0);  Create a node called <name_nr> pointing to the volume called <name> as daughter of the volume called <mother> (gspos). ;  ; void RegisterMatrix (TGeoMatrix *matrix);  Register a matrix to the list of matrices. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; TGeoVolume * Volume (const char *name, const char *shape, Int_t nmed, Double_t *upar, Int_t npar=0);  Create a volume in GEANT3 style. ;  ; TGeoVolume * Volume (const char *name, const char *shape, Int_t nmed, Float_t *upar, Int_t npar=0);  Create a volume in GEANT3 style. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classTGeoBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBuilder.html
Performance,perform,performed,"ber; theta1 polar angle for axis X; phi1 azimuthal angle for axis X; theta2 polar angle for axis Y; phi2 azimuthal angle for axis Y; theta3 polar angle for axis Z; phi3 azimuthal angle for axis Z . Definition at line 497 of file TGeoBuilder.cxx. ◆ Medium(). TGeoMedium * TGeoBuilder::Medium ; (; const char * ; name, . Int_t ; numed, . Int_t ; nmat, . Int_t ; isvol, . Int_t ; ifield, . Double_t ; fieldm, . Double_t ; tmaxfd, . Double_t ; stemax, . Double_t ; deemax, . Double_t ; epsil, . Double_t ; stmin . ). Create tracking medium. . numed tracking medium number assigned; name tracking medium name; nmat material number; isvol sensitive volume flag; ifield magnetic field; fieldm max. field value (kilogauss); tmaxfd max. angle due to field (deg/step); stemax max. step allowed; deemax max. fraction of energy lost in a step; epsil tracking precision (cm); stmin min. step due to continuous processes (cm); ifield = 0 if no magnetic field; ifield = -1 if user decision in guswim;; ifield = 1 if tracking performed with g3rkuta; ifield = 2 if tracking performed with g3helix; ifield = 3 if tracking performed with g3helx3. . Definition at line 568 of file TGeoBuilder.cxx. ◆ Mixture() [1/2]. TGeoMaterial * TGeoBuilder::Mixture ; (; const char * ; name, . Double_t * ; a, . Double_t * ; z, . Double_t ; dens, . Int_t ; nelem, . Double_t * ; wmat, . Int_t ; uid . ). Create mixture OR COMPOUND IMAT as composed by THE BASIC nelem materials defined by arrays A,Z and WMAT, having an unique id. ; Definition at line 537 of file TGeoBuilder.cxx. ◆ Mixture() [2/2]. TGeoMaterial * TGeoBuilder::Mixture ; (; const char * ; name, . Float_t * ; a, . Float_t * ; z, . Double_t ; dens, . Int_t ; nelem, . Float_t * ; wmat, . Int_t ; uid . ). Create mixture OR COMPOUND IMAT as composed by THE BASIC nelem materials defined by arrays A,Z and WMAT, having an unique id. ; Definition at line 521 of file TGeoBuilder.cxx. ◆ Node() [1/2]. void TGeoBuilder::Node ; (; const char * ; name, . Int_t ; nr, . const ",MatchSource.WIKI,doc/master/classTGeoBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBuilder.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoBuilder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoBuilder.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoCacheState.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCacheState.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoCacheState.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCacheState.html
Modifiability,inherit,inherited,"lass Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoCacheState Class ReferenceThe Geometry Package » Geometry classes. ; Class storing the state of the cache at a given moment. ; Definition at line 28 of file TGeoCache.h. Public Member Functions;  TGeoCacheState ();  Default ctor. ;  ;  TGeoCacheState (Int_t capacity);  Ctor. ;  ;  ~TGeoCacheState () override;  Dtor. ;  ; Bool_t GetState (Int_t &level, Int_t &nmany, Double_t *point) const;  Restore a modeler state. ;  ; TClass * IsA () const override;  ; void SetState (Int_t level, Int_t startlevel, Int_t nmany, Bool_t ovlp, Double_t *point=nullptr);  Fill current modeller state. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTGeoCacheState.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCacheState.html
Performance,cache,cache,". ROOT: TGeoCacheState Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoCacheState Class ReferenceThe Geometry Package » Geometry classes. ; Class storing the state of the cache at a given moment. ; Definition at line 28 of file TGeoCache.h. Public Member Functions;  TGeoCacheState ();  Default ctor. ;  ;  TGeoCacheState (Int_t capacity);  Ctor. ;  ;  ~TGeoCacheState () override;  Dtor. ;  ; Bool_t GetState (Int_t &level, Int_t &nmany, Double_t *point) const;  Restore a modeler state. ;  ; TClass * IsA () const override;  ; void SetState (Int_t level, Int_t startlevel, Int_t nmany, Bool_t ovlp, Double_t *point=nullptr);  Fill current modeller state. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare",MatchSource.WIKI,doc/master/classTGeoCacheState.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCacheState.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoCacheState.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCacheState.html
Availability,error,errors,"est(). Computes the time for the modeller to find out ""Where am I?"" for a given number of random points.; TGeoChecker::LegoPlot(ntheta, themin, themax, nphi, phimin, phimax,...); Implementation of TGeoVolume::LegoPlot(). Draws a spherical radiation length lego plot for a given volume, in a given theta/phi range.; TGeoChecker::Weight(Double_t precision); Implementation of TGeoVolume::Weight(). Estimates the total weight of a given volume by material sampling. Accepts as input the desired precision. ; Definition at line 37 of file TGeoChecker.h. Public Member Functions;  TGeoChecker ();  Default constructor. ;  ;  TGeoChecker (TGeoManager *geom);  Constructor for a given geometry. ;  ;  ~TGeoChecker () override;  Destructor. ;  ; virtual void CheckBoundaryErrors (Int_t ntracks=1000000, Double_t radius=-1.);  Check pushes and pulls needed to cross the next boundary with respect to the position given by FindNextBoundary. ;  ; virtual void CheckBoundaryReference (Int_t icheck=-1);  Check the boundary errors reference file created by CheckBoundaryErrors method. ;  ; void CheckGeometry (Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const;  Shoot nrays with random directions from starting point (startx, starty, startz) in the reference frame of this volume. ;  ; void CheckGeometryFull (Bool_t checkoverlaps=kTRUE, Bool_t checkcrossings=kTRUE, Int_t nrays=10000, const Double_t *vertex=nullptr);  Geometry checking. ;  ; void CheckOverlaps (const TGeoVolume *vol, Double_t ovlp=0.1, Option_t *option="""");  Check illegal overlaps for volume VOL within a limit OVLP. ;  ; void CheckOverlapsBySampling (TGeoVolume *vol, Double_t ovlp=0.1, Int_t npoints=1000000) const;  Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints inside the volume shape. ;  ; void CheckPoint (Double_t x=0, Double_t y=0, Double_t z=0, Option_t *option="""", Double_t safety=0.);  Draw point (x,y,z) over the picture of the daughters of the volume containing this point. ;  ;",MatchSource.WIKI,doc/master/classTGeoChecker.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoChecker.html
Deployability,update,updated,"om boundary to boundary until exiting geometry. ; Fill array of hits. ; Definition at line 678 of file TGeoChecker.cxx. ◆ RandomPoints(). void TGeoChecker::RandomPoints ; (; TGeoVolume * ; vol, . Int_t ; npoints, . Option_t * ; option . ). Draw random points in the bounding box of a volume. ; Definition at line 2260 of file TGeoChecker.cxx. ◆ RandomRays(). void TGeoChecker::RandomRays ; (; Int_t ; nrays, . Double_t ; startx, . Double_t ; starty, . Double_t ; startz, . const char * ; target_vol = nullptr, . Bool_t ; check_norm = kFALSE . ). Randomly shoot nrays from point (startx,starty,startz) and plot intersections with surfaces for current top node. ; Definition at line 2341 of file TGeoChecker.cxx. ◆ SamplePoints(). TGeoNode * TGeoChecker::SamplePoints ; (; Int_t ; npoints, . Double_t & ; dist, . Double_t ; epsil, . const char * ; g3path . ). shoot npoints randomly in a box of 1E-5 around current point. ; return minimum distance to points outside make sure that path to current node is updated get the response of tgeo ; Definition at line 2492 of file TGeoChecker.cxx. ◆ Score(). void TGeoChecker::Score ; (; TGeoVolume * ; vol, . Int_t ; ifield, . Double_t ; value . ). private . Score a hit for VOL. ; Definition at line 716 of file TGeoChecker.cxx. ◆ SetNmeshPoints(). void TGeoChecker::SetNmeshPoints ; (; Int_t ; npoints = 1000). Set number of points to be generated on the shape outline when checking for overlaps. ; Definition at line 728 of file TGeoChecker.cxx. ◆ SetSelectedNode(). void TGeoChecker::SetSelectedNode ; (; TGeoNode * ; node). inline . Definition at line 93 of file TGeoChecker.h. ◆ ShapeDistances(). void TGeoChecker::ShapeDistances ; (; TGeoShape * ; shape, . Int_t ; nsamples, . Option_t * ; option . ). Test TGeoShape::DistFromInside/Outside. ; Sample points inside the shape. Generate directions randomly in cos(theta). Compute d1 = DistFromInside and move the point on the boundary. Compute DistFromOutside and propagate with d2 making sure that the sha",MatchSource.WIKI,doc/master/classTGeoChecker.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoChecker.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoChecker.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoChecker.html
Modifiability,inherit,inherited,"d ShapeSafety (TGeoShape *shape, Int_t nsamples, Option_t *option);  Check of validity of safe distance for a given shape. ;  ; Double_t * ShootRay (Double_t *start, Double_t dirx, Double_t diry, Double_t dirz, Double_t *array, Int_t &nelem, Int_t &dim, Double_t *enpoint=nullptr) const;  Shoot one ray from start point with direction (dirx,diry,dirz). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Test (Int_t npoints, Option_t *option);  Check time of finding ""Where am I"" for n points. ;  ; void TestOverlaps (const char *path);  Geometry overlap checker based on sampling. ;  ; Bool_t TestVoxels (TGeoVolume *vol, Int_t npoints=1000000);  Returns optimal voxelization type for volume vol. ;  ; Double_t Weight (Double_t precision=0.01, Option_t *option=""v"");  Estimate weight of top level volume with a precision SIGMA(W)/W better than PRECISION. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classTGeoChecker.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoChecker.html
Performance,perform,performed,". ROOT: TGeoChecker Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoChecker Class ReferenceThe Geometry Package » Geometry painter. ; Geometry checking package. ; TGeoChecker class provides several geometry checking methods. There are two types of tests that can be performed. One is based on random sampling or ray-tracing and provides a visual check on how navigation methods work for a given geometry. The second actually checks the validity of the geometry definition in terms of overlapping/extruding objects. Both types of checks can be done for a given branch (starting with a given volume) as well as for the geometry as a whole.; TGeoChecker::CheckPoint(Double_t x, Double_t y, Double_t z); This method can be called directly from the TGeoManager class and print a report on how a given point is classified by the modeller: which is the full path to the deepest node containing it, and the (under)estimation of the distance to the closest boundary (safety).; TGeoChecker::RandomPoints(Int_t npoints); Can be called from TGeoVolume class. It first draws the volume and its content with the current visualization settings. Then randomly samples points in its bounding box, plotting in the geometry display only the points classified as belonging to visible volumes.; TGeoChecker::RandomRays(Int_t nrays, Double_t startx, starty, startz); Can be called and acts in the same way as the previous, but instead of points, rays having random isotropic directions are generated from the given point. A raytracing algorithm propagates all rays until they exit geometry, plotting all segments crossing visible nodes in the same color as these.; TGeoChecker::Test(Int_t npoints); Implementation of TGeoManager::Test(). Computes the time for the modeller to find out ""Where am I?"" for a given nu",MatchSource.WIKI,doc/master/classTGeoChecker.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoChecker.html
Safety,safe,safety,"oChecker Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoChecker Class ReferenceThe Geometry Package » Geometry painter. ; Geometry checking package. ; TGeoChecker class provides several geometry checking methods. There are two types of tests that can be performed. One is based on random sampling or ray-tracing and provides a visual check on how navigation methods work for a given geometry. The second actually checks the validity of the geometry definition in terms of overlapping/extruding objects. Both types of checks can be done for a given branch (starting with a given volume) as well as for the geometry as a whole.; TGeoChecker::CheckPoint(Double_t x, Double_t y, Double_t z); This method can be called directly from the TGeoManager class and print a report on how a given point is classified by the modeller: which is the full path to the deepest node containing it, and the (under)estimation of the distance to the closest boundary (safety).; TGeoChecker::RandomPoints(Int_t npoints); Can be called from TGeoVolume class. It first draws the volume and its content with the current visualization settings. Then randomly samples points in its bounding box, plotting in the geometry display only the points classified as belonging to visible volumes.; TGeoChecker::RandomRays(Int_t nrays, Double_t startx, starty, startz); Can be called and acts in the same way as the previous, but instead of points, rays having random isotropic directions are generated from the given point. A raytracing algorithm propagates all rays until they exit geometry, plotting all segments crossing visible nodes in the same color as these.; TGeoChecker::Test(Int_t npoints); Implementation of TGeoManager::Test(). Computes the time for the modeller to find out ""Where am I?"" for a given number of ran",MatchSource.WIKI,doc/master/classTGeoChecker.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoChecker.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoChecker.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoChecker.html
Testability,test,tests,". ROOT: TGeoChecker Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoChecker Class ReferenceThe Geometry Package » Geometry painter. ; Geometry checking package. ; TGeoChecker class provides several geometry checking methods. There are two types of tests that can be performed. One is based on random sampling or ray-tracing and provides a visual check on how navigation methods work for a given geometry. The second actually checks the validity of the geometry definition in terms of overlapping/extruding objects. Both types of checks can be done for a given branch (starting with a given volume) as well as for the geometry as a whole.; TGeoChecker::CheckPoint(Double_t x, Double_t y, Double_t z); This method can be called directly from the TGeoManager class and print a report on how a given point is classified by the modeller: which is the full path to the deepest node containing it, and the (under)estimation of the distance to the closest boundary (safety).; TGeoChecker::RandomPoints(Int_t npoints); Can be called from TGeoVolume class. It first draws the volume and its content with the current visualization settings. Then randomly samples points in its bounding box, plotting in the geometry display only the points classified as belonging to visible volumes.; TGeoChecker::RandomRays(Int_t nrays, Double_t startx, starty, startz); Can be called and acts in the same way as the previous, but instead of points, rays having random isotropic directions are generated from the given point. A raytracing algorithm propagates all rays until they exit geometry, plotting all segments crossing visible nodes in the same color as these.; TGeoChecker::Test(Int_t npoints); Implementation of TGeoManager::Test(). Computes the time for the modeller to find out ""Where am I?"" for a given nu",MatchSource.WIKI,doc/master/classTGeoChecker.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoChecker.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoCombiTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCombiTrans.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoCombiTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCombiTrans.html
Modifiability,inherit,inherited," ; void RotateZ (Double_t angle) override;  Rotate about Z axis with angle expressed in degrees. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetDx (Double_t dx) override;  ; void SetDy (Double_t dy) override;  ; void SetDz (Double_t dz) override;  ; void SetRotation (const TGeoRotation &other);  Copy the rotation from another one. ;  ; void SetRotation (const TGeoRotation *rot);  Assign a foreign rotation to the combi. The rotation is NOT owned by this. ;  ; void SetTranslation (const TGeoTranslation &tr);  copy the translation component ;  ; void SetTranslation (Double_t *vect);  set the translation component ;  ; void SetTranslation (Double_t dx, Double_t dy, Double_t dz);  set the translation component ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoMatrix;  TGeoMatrix ();  dummy constructor ;  ;  TGeoMatrix (const char *name);  Constructor. ;  ;  ~TGeoMatrix () override;  Destructor. ;  ; virtual Int_t GetByteCount () const;  Get total size in bytes of this. ;  ; void GetHomogenousMatrix (Double_t *hmat) const;  The homogenous matrix associated with the transformation is used for piling up's and visualization. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; TClass * IsA () const override;  ; Bool_t IsCombi () const;  ; Bool_t IsGeneral () const;  ; Bool_t IsIdentity () const;  ; Bool_t IsOwned () const;  ; Bool_t IsReflection () const;  ; Bool_t IsRegistered () const;  ; Bool_t IsRotAboutZ () const;  Returns true if no rotation or the rotation is about Z axis. ;  ; Bool_t IsRotation () const;  ; Bool_t IsScale () const;  ; Bool_t IsShared () const;  ; Bool_t IsTranslation () const;  ; virtual void LocalToMaster (const Double_t *local, Double_t *master) const;  convert a point by ",MatchSource.WIKI,doc/master/classTGeoCombiTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCombiTrans.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoCombiTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCombiTrans.html
Availability,down,down,"ference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TGeoCompositeShape Class ReferenceThe Geometry Package » Shapes. ; Composite shapes are Boolean combinations of two or more shape components. ; The supported Boolean operations are union (+), intersection (*) and subtraction(-). Composite shapes derive from the base TGeoShape** class, therefore providing all shape features: computation of bounding box, finding if a given point is inside or outside the combination, as well as computing the distance to entering/exiting. They can be directly used for creating volumes or used in the definition of other composite shapes.; Composite shapes are provided in order to complement and extend the set of basic shape primitives. They have a binary tree internal structure, therefore all shape-related geometry queries are signals propagated from top level down to the final leaves, while the provided answers are assembled and interpreted back at top. This CSG (composite solid geometry) hierarchy is effective for small number of components, while performance drops dramatically for large structures. Building a complete geometry in this style is virtually possible but highly not recommended.; The Structure of Composite Shapes; A composite shape can always be looked as the result of a Boolean operation between only two shape components. All information identifying these two components as well as their positions with respect to the frame of the composite is represented by an object called Boolean node. A composite shape has a pointer to such a Boolean node. Since the shape components may also be composites, they will also contain binary Boolean nodes branching out other two shapes in the hierarchy. Any such branch ends-up when the final leaves are no longer composite shapes, but basic primitives. The figure shows the composite",MatchSource.WIKI,doc/master/classTGeoCompositeShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCompositeShape.html
Integrability,interface,interface,"tructures. Building a complete geometry in this style is virtually possible but highly not recommended.; The Structure of Composite Shapes; A composite shape can always be looked as the result of a Boolean operation between only two shape components. All information identifying these two components as well as their positions with respect to the frame of the composite is represented by an object called Boolean node. A composite shape has a pointer to such a Boolean node. Since the shape components may also be composites, they will also contain binary Boolean nodes branching out other two shapes in the hierarchy. Any such branch ends-up when the final leaves are no longer composite shapes, but basic primitives. The figure shows the composite shapes structure. The composite shapes structure; Suppose that A, B, C and D represent basic shapes, we will illustrate how the internal representation of few combinations look like. We do this only for understanding how to create them in a proper way, since the user interface for this purpose is in fact very simple. We will ignore for the time being the positioning of components. The definition of a composite shape takes an expression where the identifiers are shape names. The expression is parsed and decomposed in 2 sub-expressions and the top-level Boolean operator. Union: A+B+C. Just to illustrate the Boolean expression parsing and the composite shape structure, let's take a simple example. We will describe the union of A, B and C. Both union operators are at the same level. Since:; A+B+C = (A+B)+C = A+(B+C); The first(+) is taken as separator, hence the expression split in: A and (B+C). A Boolean node of type **TGeoUnion**(""A"",""B+C"") is created. This tries to replace the 2 expressions by actual pointers to corresponding shapes. The first expression (A) contains no operators therefore is interpreted as representing a shape. The shape named ""A"" is searched into the list of shapes handled by the manager class and stored as the """,MatchSource.WIKI,doc/master/classTGeoCompositeShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCompositeShape.html
Modifiability,extend,extend,". ROOT: TGeoCompositeShape Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TGeoCompositeShape Class ReferenceThe Geometry Package » Shapes. ; Composite shapes are Boolean combinations of two or more shape components. ; The supported Boolean operations are union (+), intersection (*) and subtraction(-). Composite shapes derive from the base TGeoShape** class, therefore providing all shape features: computation of bounding box, finding if a given point is inside or outside the combination, as well as computing the distance to entering/exiting. They can be directly used for creating volumes or used in the definition of other composite shapes.; Composite shapes are provided in order to complement and extend the set of basic shape primitives. They have a binary tree internal structure, therefore all shape-related geometry queries are signals propagated from top level down to the final leaves, while the provided answers are assembled and interpreted back at top. This CSG (composite solid geometry) hierarchy is effective for small number of components, while performance drops dramatically for large structures. Building a complete geometry in this style is virtually possible but highly not recommended.; The Structure of Composite Shapes; A composite shape can always be looked as the result of a Boolean operation between only two shape components. All information identifying these two components as well as their positions with respect to the frame of the composite is represented by an object called Boolean node. A composite shape has a pointer to such a Boolean node. Since the shape components may also be composites, they will also contain binary Boolean nodes branching out other two shapes in the hierarchy. Any such branch ends-up when the final leaves are no longer comp",MatchSource.WIKI,doc/master/classTGeoCompositeShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCompositeShape.html
Performance,perform,performance,"utes |; List of all members ; TGeoCompositeShape Class ReferenceThe Geometry Package » Shapes. ; Composite shapes are Boolean combinations of two or more shape components. ; The supported Boolean operations are union (+), intersection (*) and subtraction(-). Composite shapes derive from the base TGeoShape** class, therefore providing all shape features: computation of bounding box, finding if a given point is inside or outside the combination, as well as computing the distance to entering/exiting. They can be directly used for creating volumes or used in the definition of other composite shapes.; Composite shapes are provided in order to complement and extend the set of basic shape primitives. They have a binary tree internal structure, therefore all shape-related geometry queries are signals propagated from top level down to the final leaves, while the provided answers are assembled and interpreted back at top. This CSG (composite solid geometry) hierarchy is effective for small number of components, while performance drops dramatically for large structures. Building a complete geometry in this style is virtually possible but highly not recommended.; The Structure of Composite Shapes; A composite shape can always be looked as the result of a Boolean operation between only two shape components. All information identifying these two components as well as their positions with respect to the frame of the composite is represented by an object called Boolean node. A composite shape has a pointer to such a Boolean node. Since the shape components may also be composites, they will also contain binary Boolean nodes branching out other two shapes in the hierarchy. Any such branch ends-up when the final leaves are no longer composite shapes, but basic primitives. The figure shows the composite shapes structure. The composite shapes structure; Suppose that A, B, C and D represent basic shapes, we will illustrate how the internal representation of few combinations look like. We",MatchSource.WIKI,doc/master/classTGeoCompositeShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCompositeShape.html
Safety,safe,safe,"omputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  Computes normal vector in POINT to the composite shape. ;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  Compute the normal for an array o points so that norm.dot.dir is positive Input: Arrays of point coordinates and directions + vector size Output: Array of normal directions. ;  ; Bool_t Contains (const Double_t *point) const override;  Tests if point is inside the shape. ;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  Check the inside status for each of the points in the array. ;  ; void CreateThreadData (Int_t nthreads) override;  Needed just for cleanup. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute closest distance from point px,py to each corner. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  Compute distance from inside point to outside of this composite shape. ;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  Compute distance from array of input points having directions specified by dirs. Store output in dists. ;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  Compute distance from outside point to this composite shape. ;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  Compute distance from array of input points having directions specified by dirs. Store output in dists. ;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  Divide all range of iaxis in range/step",MatchSource.WIKI,doc/master/classTGeoCompositeShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCompositeShape.html
Security,hash,hash," &ClassDef_StreamerNVirtual_b);  ; Bool_t TestShapeBit (UInt_t f) const;  ; Int_t TestShapeBits (UInt_t f) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoCompositeShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCompositeShape.html
Testability,stub,stub,"ful since we were using un-positioned shapes. When supplying just shape names as identifiers, the created Boolean nodes will assume that the shapes are positioned with an identity transformation with respect to the frame of the created composite. In order to provide some positioning of the combination components, we have to attach after each shape identifier the name of an existing transformation, separated by a colon. Obviously all transformations created for this purpose have to be objects with unique names in order to be properly substituted during parsing.; Composite Shape Example; One should have in mind that the same shape or matrix identifiers can be used many times in the same expression, as in the following example:; {; TCanvas *c = new TCanvas(""c"", ""c"",0,0,600,600);; const Double_t sq2 = TMath::Sqrt(2.);; TGeoManager *mgr =; new TGeoManager(""Geom"",""composite shape example"");; TGeoMedium *medium = 0;; TGeoVolume *top = mgr->MakeBox(""TOP"",medium,100,250,250);; mgr->SetTopVolume(top);; ; // make shape components; TGeoBBox *sbox = new TGeoBBox(""B"",100,125*sq2,125*sq2);; TGeoTube *stub = new TGeoTube(""T"",0,100,250);; TGeoPgon *spgon = new TGeoPgon(""P"",0.,360.,6,2);; spgon->DefineSection(0,-250,0,80);; spgon->DefineSection(1,250,0,80);; ; // define some rotations; TGeoRotation *r1 = new TGeoRotation(""r1"",90,0,0,180,90,90);; r1->RegisterYourself();; TGeoRotation *r2 = new TGeoRotation(""r2"",90,0,45,90,45,270);; r2->RegisterYourself();; // create a composite; TGeoCompositeShape *cs = new TGeoCompositeShape(""cs"", ""((T+T:r1)-(P+P:r1))*B:r2"");; TGeoVolume *comp = new TGeoVolume(""COMP"",cs);; comp->SetLineColor(kRed);; ; // put it in the top volume; top->AddNode(comp,1);; mgr->CloseGeometry();; // visualize it with ray tracing; top->Raytrace();; }; c#define c(i)Definition RSha256.hxx:101; kRed@ kRedDefinition Rtypes.h:66; TCanvasThe Canvas class.Definition TCanvas.h:23; TGeoBBoxDefinition TGeoBBox.h:17; TGeoBBox::TGeoBBoxTGeoBBox(); TGeoManagerThe manager class for any ",MatchSource.WIKI,doc/master/classTGeoCompositeShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCompositeShape.html
Usability,simpl,simple,"tructures. Building a complete geometry in this style is virtually possible but highly not recommended.; The Structure of Composite Shapes; A composite shape can always be looked as the result of a Boolean operation between only two shape components. All information identifying these two components as well as their positions with respect to the frame of the composite is represented by an object called Boolean node. A composite shape has a pointer to such a Boolean node. Since the shape components may also be composites, they will also contain binary Boolean nodes branching out other two shapes in the hierarchy. Any such branch ends-up when the final leaves are no longer composite shapes, but basic primitives. The figure shows the composite shapes structure. The composite shapes structure; Suppose that A, B, C and D represent basic shapes, we will illustrate how the internal representation of few combinations look like. We do this only for understanding how to create them in a proper way, since the user interface for this purpose is in fact very simple. We will ignore for the time being the positioning of components. The definition of a composite shape takes an expression where the identifiers are shape names. The expression is parsed and decomposed in 2 sub-expressions and the top-level Boolean operator. Union: A+B+C. Just to illustrate the Boolean expression parsing and the composite shape structure, let's take a simple example. We will describe the union of A, B and C. Both union operators are at the same level. Since:; A+B+C = (A+B)+C = A+(B+C); The first(+) is taken as separator, hence the expression split in: A and (B+C). A Boolean node of type **TGeoUnion**(""A"",""B+C"") is created. This tries to replace the 2 expressions by actual pointers to corresponding shapes. The first expression (A) contains no operators therefore is interpreted as representing a shape. The shape named ""A"" is searched into the list of shapes handled by the manager class and stored as the """,MatchSource.WIKI,doc/master/classTGeoCompositeShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCompositeShape.html
Availability,error,error,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoCone.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCone.html
Integrability,message,message,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoCone.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCone.html
Modifiability,inherit,inherited,"Double_t rmax1, Double_t rmin2, Double_t rmax2);  ; void SetDimensions (Double_t *param) override;  ; void SetPoints (Double_t *points) const override;  ; void SetPoints (Float_t *points) const override;  ; void SetSegsAndPols (TBuffer3D &buffer) const override;  ; void Sizeof3D () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoBBox;  TGeoBBox ();  ;  TGeoBBox (const char *name, Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ;  TGeoBBox (Double_t *param);  ;  TGeoBBox (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ;  ~TGeoBBox () override;  ; Bool_t CouldBeCrossed (const Double_t *point, const Double_t *dir) const override;  ; virtual Double_t GetDX () const;  ; virtual Double_t GetDY () const;  ; virtual Double_t GetDZ () const;  ; virtual Double_t GetFacetArea (Int_t index=0) const;  ; Int_t GetFittingBox (const TGeoBBox *parambox, TGeoMatrix *mat, Double_t &dx, Double_t &dy, Double_t &dz) const override;  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") ",MatchSource.WIKI,doc/master/classTGeoCone.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCone.html
Safety,safe,safe,"mputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; const char * GetAxisName (Int_t iaxis) const override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; Int_t GetByteCount () const override;  ; virtual Double_t GetDz () const;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *mother, TGeoMatrix *mat) const override;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  ; Int_t GetNmeshVertices () const override;  ; Bool_t GetPointsOnSegments (Int_t npoints, Double_t *array) const override;  ; virtual Double_t GetRmax1 () const;  ; virtual Double_t GetRmax2 () const;  ; vir",MatchSource.WIKI,doc/master/classTGeoCone.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCone.html
Security,hash,hash," &ClassDef_StreamerNVirtual_b);  ; Bool_t TestShapeBit (UInt_t f) const;  ; Int_t TestShapeBits (UInt_t f) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoCone.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCone.html
Testability,test,testNo,"le_t *dir) const override;  ; virtual Double_t GetDX () const;  ; virtual Double_t GetDY () const;  ; virtual Double_t GetDZ () const;  ; virtual Double_t GetFacetArea (Int_t index=0) const;  ; Int_t GetFittingBox (const TGeoBBox *parambox, TGeoMatrix *mat, Double_t &dx, Double_t &dy, Double_t &dz) const override;  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; TClass * IsA () const override;  ; virtual Bool_t IsAssembly () const;  ; virtual Bool_t IsComposite () const;  ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; vo",MatchSource.WIKI,doc/master/classTGeoCone.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCone.html
Availability,error,error,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoConeSeg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoConeSeg.html
Integrability,message,message,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoConeSeg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoConeSeg.html
Modifiability,inherit,inherited,,MatchSource.WIKI,doc/master/classTGeoConeSeg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoConeSeg.html
Safety,safe,safe,"eBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; Int_t GetByteCount () const override;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *mother, TGeoMatrix *mat) const override;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  ; Int_t GetNmeshVertices () const override;  ; Double_t GetPhi1 () const;  ; Double_t GetPhi2 () const;  ; Bool_t GetPointsOnSegments (Int_t npoints, Double_t *array) const override;  ; void InspectShape () const override;  ; TClass * IsA () const override;  ; TBuffer3D *",MatchSource.WIKI,doc/master/classTGeoConeSeg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoConeSeg.html
Security,hash,hash," &ClassDef_StreamerNVirtual_b);  ; Bool_t TestShapeBit (UInt_t f) const;  ; Int_t TestShapeBits (UInt_t f) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoConeSeg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoConeSeg.html
Testability,test,testNo,"point, const Double_t *dir) const override;  ; virtual Double_t GetDX () const;  ; virtual Double_t GetDY () const;  ; virtual Double_t GetDZ () const;  ; virtual Double_t GetFacetArea (Int_t index=0) const;  ; Int_t GetFittingBox (const TGeoBBox *parambox, TGeoMatrix *mat, Double_t &dx, Double_t &dy, Double_t &dz) const override;  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; TClass * IsA () const override;  ; virtual Bool_t IsAssembly () const;  ; virtual Bool_t IsComposite () const;  ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; void SetShapeBit (U",MatchSource.WIKI,doc/master/classTGeoConeSeg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoConeSeg.html
Availability,error,error,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoCtub.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCtub.html
Integrability,message,message,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoCtub.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCtub.html
Modifiability,inherit,inherited,"ut, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetCtubDimensions (Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx, Double_t ly, Double_t lz, Double_t tx, Double_t ty, Double_t tz);  ; void SetDimensions (Double_t *param) override;  ; void SetPoints (Double_t *points) const override;  ; void SetPoints (Float_t *points) const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoTubeSeg;  TGeoTubeSeg ();  ;  TGeoTubeSeg (const char *name, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2);  ;  TGeoTubeSeg (Double_t *params);  ;  TGeoTubeSeg (Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2);  ;  ~TGeoTubeSeg () override;  ; void AfterStreamer () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, co",MatchSource.WIKI,doc/master/classTGeoCtub.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCtub.html
Safety,safe,safe,"members ; TGeoCtub Class Reference. . Definition at line 173 of file TGeoTube.h. Public Member Functions;  TGeoCtub ();  ;  TGeoCtub (const char *name, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx, Double_t ly, Double_t lz, Double_t tx, Double_t ty, Double_t tz);  ;  TGeoCtub (Double_t *params);  ;  TGeoCtub (Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx, Double_t ly, Double_t lz, Double_t tx, Double_t ty, Double_t tz);  ;  ~TGeoCtub () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; Int_t GetByteCount () const override;  ; TGeoShape * GetMakeRuntimeShape (",MatchSource.WIKI,doc/master/classTGeoCtub.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCtub.html
Security,hash,hash," &ClassDef_StreamerNVirtual_b);  ; Bool_t TestShapeBit (UInt_t f) const;  ; Int_t TestShapeBits (UInt_t f) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoCtub.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCtub.html
Testability,test,testNo,"point, const Double_t *dir) const override;  ; virtual Double_t GetDX () const;  ; virtual Double_t GetDY () const;  ; virtual Double_t GetDZ () const;  ; virtual Double_t GetFacetArea (Int_t index=0) const;  ; Int_t GetFittingBox (const TGeoBBox *parambox, TGeoMatrix *mat, Double_t &dx, Double_t &dy, Double_t &dz) const override;  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; virtual Bool_t IsAssembly () const;  ; virtual Bool_t IsComposite () const;  ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; void SetShapeBit (UInt_t f, Bool_t set);  Equivalent o",MatchSource.WIKI,doc/master/classTGeoCtub.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoCtub.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoDecayChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoDecayChannel.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoDecayChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoDecayChannel.html
Modifiability,inherit,inherited," ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TGeoDecayChannel Class ReferenceThe Geometry Package » Geometry classes. ; A decay channel for a radionuclide. ; Definition at line 207 of file TGeoElement.h. Public Types; enum  ENuclearDecayMode { ;   kBitMask32 = 0xffffffff; , k2BetaMinus = (1ULL << ( 0 )); , kBetaMinus = (1ULL << ( 1 )); , kNeutronEm = (1ULL << ( 2 )); , ;   kProtonEm = (1ULL << ( 3 )); , kAlpha = (1ULL << ( 4 )); , kECF = (1ULL << ( 5 )); , kElecCapt = (1ULL << ( 6 )); , ;   kIsoTrans = (1ULL << ( 7 )); , kI = (1ULL << ( 8 )); , kSpontFiss = (1ULL << ( 9 )); , k2P = (1ULL << ( 10 )); , ;   k2N = (1ULL << ( 11 )); , k2A = (1ULL << ( 12 )); , kCarbon12 = (1ULL << ( 13 )); , kCarbon14 = (1ULL << ( 14 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoDecayChannel ();  ;  TGeoDecayChannel (const TGeoDecayChannel &dc);  ;  TGeoDecayChannel (Int_t decay, Int_t diso, Double_t branchingRatio, Double_t qValue);  ;  ~TGeoDecayChannel () override;  ; Double_t BranchingRatio () const;  ; TGeoElementRN * Daughter () const;  ; UInt_t Decay () const;  ; virtual void DecayShift (Int_t &dA, Int_t &dZ, Int_t &dI) const;  Returns variation in A, Z and Iso after decay. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTGeoDecayChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoDecayChannel.html
Security,hash,hash,"xecute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoDecayChannel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoDecayChannel.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoElement.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoElement.html
Modifiability,inherit,inherited,"umber. ;  ; virtual Int_t ENDFCode () const;  ; Double_t GetfCoulomb () const;  ; Double_t GetfRadTsai () const;  ; TGeoIsotope * GetIsotope (Int_t i) const;  Return i-th isotope in the element. ;  ; Int_t GetNisotopes () const;  ; Double_t GetRelativeAbundance (Int_t i) const;  Return relative abundance of i-th isotope in this element. ;  ; virtual Double_t GetSpecificActivity () const;  ; Bool_t HasIsotopes () const;  ; TClass * IsA () const override;  ; Bool_t IsDefined () const;  ; virtual Bool_t IsRadioNuclide () const;  ; Bool_t IsUsed () const;  ; Int_t N () const;  ; Double_t Neff () const;  Returns effective number of nucleons. ;  ; void Print (Option_t *option="""") const override;  Print this isotope. ;  ; void SetDefined (Bool_t flag=kTRUE);  ; void SetUsed (Bool_t flag=kTRUE);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Z () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") cons",MatchSource.WIKI,doc/master/classTGeoElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoElement.html
Security,hash,hash," object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Z () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoElement.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoElement.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoElementRN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoElementRN.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoElementRN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoElementRN.html
Modifiability,inherit,inherited,"t;  Get number of decay channels of this element. ;  ; Double_t GetSpecificActivity () const override;  Get the activity in Bq of a gram of material made from this element. ;  ; Double_t HalfLife () const;  ; TClass * IsA () const override;  ; Int_t IsoNo () const;  ; Bool_t IsRadioNuclide () const override;  ; Double_t Level () const;  ; Double_t MassEx () const;  ; Int_t MassNo () const;  ; Double_t NatAbun () const;  ; const char * PJ () const;  ; void Print (Option_t *option="""") const override;  Print info about the element;. ;  ; TGeoBatemanSol * Ratio () const;  ; void ResetRatio ();  Clears the existing ratio. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive for RN elements. ;  ; Bool_t Stable () const;  ; Double_t Status () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Double_t TG_F () const;  ; Double_t TG_S () const;  ; Double_t TH_F () const;  ; Double_t TH_S () const;  ;  Public Member Functions inherited from TGeoElement;  TGeoElement ();  Default constructor. ;  ;  TGeoElement (const char *name, const char *title, Int_t nisotopes);  Element having isotopes. ;  ;  TGeoElement (const char *name, const char *title, Int_t z, Double_t a);  Obsolete constructor. ;  ;  TGeoElement (const char *name, const char *title, Int_t z, Int_t n, Double_t a);  Constructor. ;  ;  ~TGeoElement () override;  destructor ;  ; Double_t A () const;  ; void AddIsotope (TGeoIsotope *isotope, Double_t relativeAbundance);  Add an isotope for this element. All isotopes have to be isotopes of the same element. ;  ; void ComputeDerivedQuantities ();  Calculate properties for an atomic number. ;  ; Double_t GetfCoulomb () const;  ; Double_t GetfRadTsai () const;  ; TGeoIsotope * GetIsotope (Int_t i) const;  Return i-th isotope in the element. ;  ; Int_t GetNisotopes () const;  ; Double_t GetRelativeAbundance (Int_t i) const;  Return relati",MatchSource.WIKI,doc/master/classTGeoElementRN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoElementRN.html
Security,hash,hash,"etUsed (Bool_t flag=kTRUE);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Z () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoElementRN.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoElementRN.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoElementTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoElementTable.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoElementTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoElementTable.html
Modifiability,inherit,inherited,". ROOT: TGeoElementTable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Types |; Private Attributes |; List of all members ; TGeoElementTable Class ReferenceThe Geometry Package » Geometry classes. ; Table of elements. ; Definition at line 398 of file TGeoElement.h. Public Types; enum  EGeoETStatus { kETDefaultElements = (1ULL << ( 14 )); , kETRNElements = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoElementTable ();  default constructor ;  ;  TGeoElementTable (Int_t nelements);  constructor ;  ;  ~TGeoElementTable () override;  destructor ;  ; void AddElement (const char *name, const char *title, Int_t z, Double_t a);  Add an element to the table. Obsolete. ;  ; void AddElement (const char *name, const char *title, Int_t z, Int_t n, Double_t a);  Add an element to the table. ;  ; void AddElement (TGeoElement *elem);  Add a custom element to the table. ;  ; void AddElementRN (TGeoElementRN *elem);  Add a radionuclide to the table and map it. ;  ; void AddIsotope (TGeoIsotope *isotope);  Add isotope to the table. ;  ; void BuildDefaultElements ();  Creates the default element table. ;  ; Bool_t CheckTable () const;  Checks status of element table. ",MatchSource.WIKI,doc/master/classTGeoElementTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoElementTable.html
Performance,optimiz,optimized,"ents);  constructor ;  ;  ~TGeoElementTable () override;  destructor ;  ; void AddElement (const char *name, const char *title, Int_t z, Double_t a);  Add an element to the table. Obsolete. ;  ; void AddElement (const char *name, const char *title, Int_t z, Int_t n, Double_t a);  Add an element to the table. ;  ; void AddElement (TGeoElement *elem);  Add a custom element to the table. ;  ; void AddElementRN (TGeoElementRN *elem);  Add a radionuclide to the table and map it. ;  ; void AddIsotope (TGeoIsotope *isotope);  Add isotope to the table. ;  ; void BuildDefaultElements ();  Creates the default element table. ;  ; Bool_t CheckTable () const;  Checks status of element table. ;  ; void ExportElementsRN (const char *filename="""");  Export radionuclides in a file. ;  ; TGeoElement * FindElement (const char *name) const;  Search an element by symbol or full name Exact matching. ;  ; TGeoIsotope * FindIsotope (const char *name) const;  Find existing isotope by name. Not optimized for a big number of isotopes. ;  ; TGeoElement * GetElement (Int_t z);  ; TGeoElementRN * GetElementRN (Int_t a, Int_t z, Int_t iso=0) const;  Retrieve a radionuclide by a, z, and isomeric state. ;  ; TGeoElementRN * GetElementRN (Int_t ENDFcode) const;  Retrieve a radionuclide by ENDF code. ;  ; TObjArray * GetElementsRN () const;  ; Int_t GetNelements () const;  ; Int_t GetNelementsRN () const;  ; Bool_t HasDefaultElements () const;  ; Bool_t HasRNElements () const;  ; void ImportElementsRN ();  Creates the list of radionuclides. ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print table of elements. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void Abstrac",MatchSource.WIKI,doc/master/classTGeoElementTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoElementTable.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoElementTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoElementTable.html
Availability,error,error,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoEltu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoEltu.html
Integrability,message,message,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoEltu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoEltu.html
Modifiability,inherit,inherited,"RUE) const override;  ; void Safety_v (const Double_t *points, const Bool_t *inside, Double_t *safe, Int_t vecsize) const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetDimensions (Double_t *param) override;  ; void SetEltuDimensions (Double_t a, Double_t b, Double_t dz);  ; void SetPoints (Double_t *points) const override;  ; void SetPoints (Float_t *points) const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoTube;  TGeoTube ();  ;  TGeoTube (const char *name, Double_t rmin, Double_t rmax, Double_t dz);  ;  TGeoTube (Double_t *params);  ;  TGeoTube (Double_t rmin, Double_t rmax, Double_t dz);  ;  ~TGeoTube () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Doub",MatchSource.WIKI,doc/master/classTGeoEltu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoEltu.html
Safety,safe,safe,"d ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; virtual Double_t GetA () const;  ; virtual Double_t GetB () const;  ; void GetBoundingCylinder (Double_t *param) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *mother, TGeoMatrix *mat) const override;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  ; Int_t GetNmeshVertices () const override;  ; Bool_t GetPointsOnSegments (Int_t, Double_t *) const override;  ; void InspectShape () const override;  ; TClass * IsA () const override;  ; Bool_t IsCylType () const override;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const override;  ; void Safety_v (con",MatchSource.WIKI,doc/master/classTGeoEltu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoEltu.html
Security,hash,hash," &ClassDef_StreamerNVirtual_b);  ; Bool_t TestShapeBit (UInt_t f) const;  ; Int_t TestShapeBits (UInt_t f) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoEltu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoEltu.html
Testability,test,testNo,"le_t *dir) const override;  ; virtual Double_t GetDX () const;  ; virtual Double_t GetDY () const;  ; virtual Double_t GetDZ () const;  ; virtual Double_t GetFacetArea (Int_t index=0) const;  ; Int_t GetFittingBox (const TGeoBBox *parambox, TGeoMatrix *mat, Double_t &dx, Double_t &dy, Double_t &dz) const override;  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; virtual Bool_t IsAssembly () const;  ; virtual Bool_t IsComposite () const;  ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; void SetShapeBit (UInt_t f, Bool_t se",MatchSource.WIKI,doc/master/classTGeoEltu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoEltu.html
Availability,avail,available,". ROOT: TGeoExtension Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TGeoExtension Class ReferenceabstractThe Geometry Package » Geometry classes. ; ABC for user objects attached to TGeoVolume or TGeoNode. ; Provides interface for getting a reference (grab) and releasing the extension object (release), allowing for derived classes to implement reference counted sharing. The user who should attach extensions to logical volumes or nodes BEFORE applying misalignment information so that these will be available to all copies. ; Definition at line 17 of file TGeoExtension.h. Public Member Functions; virtual TGeoExtension * Grab ()=0;  ; TClass * IsA () const override;  ; virtual void Release () const =0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ;",MatchSource.WIKI,doc/master/classTGeoExtension.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoExtension.html
Deployability,release,release,". ROOT: TGeoExtension Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TGeoExtension Class ReferenceabstractThe Geometry Package » Geometry classes. ; ABC for user objects attached to TGeoVolume or TGeoNode. ; Provides interface for getting a reference (grab) and releasing the extension object (release), allowing for derived classes to implement reference counted sharing. The user who should attach extensions to logical volumes or nodes BEFORE applying misalignment information so that these will be available to all copies. ; Definition at line 17 of file TGeoExtension.h. Public Member Functions; virtual TGeoExtension * Grab ()=0;  ; TClass * IsA () const override;  ; virtual void Release () const =0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ;",MatchSource.WIKI,doc/master/classTGeoExtension.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoExtension.html
Integrability,interface,interface,". ROOT: TGeoExtension Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TGeoExtension Class ReferenceabstractThe Geometry Package » Geometry classes. ; ABC for user objects attached to TGeoVolume or TGeoNode. ; Provides interface for getting a reference (grab) and releasing the extension object (release), allowing for derived classes to implement reference counted sharing. The user who should attach extensions to logical volumes or nodes BEFORE applying misalignment information so that these will be available to all copies. ; Definition at line 17 of file TGeoExtension.h. Public Member Functions; virtual TGeoExtension * Grab ()=0;  ; TClass * IsA () const override;  ; virtual void Release () const =0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ;",MatchSource.WIKI,doc/master/classTGeoExtension.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoExtension.html
Modifiability,inherit,inherited," ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TGeoExtension Class ReferenceabstractThe Geometry Package » Geometry classes. ; ABC for user objects attached to TGeoVolume or TGeoNode. ; Provides interface for getting a reference (grab) and releasing the extension object (release), allowing for derived classes to implement reference counted sharing. The user who should attach extensions to logical volumes or nodes BEFORE applying misalignment information so that these will be available to all copies. ; Definition at line 17 of file TGeoExtension.h. Public Member Functions; virtual TGeoExtension * Grab ()=0;  ; TClass * IsA () const override;  ; virtual void Release () const =0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTGeoExtension.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoExtension.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoExtension.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoExtension.html
Testability,log,logical,". ROOT: TGeoExtension Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TGeoExtension Class ReferenceabstractThe Geometry Package » Geometry classes. ; ABC for user objects attached to TGeoVolume or TGeoNode. ; Provides interface for getting a reference (grab) and releasing the extension object (release), allowing for derived classes to implement reference counted sharing. The user who should attach extensions to logical volumes or nodes BEFORE applying misalignment information so that these will be available to all copies. ; Definition at line 17 of file TGeoExtension.h. Public Member Functions; virtual TGeoExtension * Grab ()=0;  ; TClass * IsA () const override;  ; virtual void Release () const =0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ;",MatchSource.WIKI,doc/master/classTGeoExtension.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoExtension.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoGenTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoGenTrans.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoGenTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoGenTrans.html
Modifiability,inherit,inherited,"ouble_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation *rot);  constructor ;  ;  TGeoGenTrans (Double_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation *rot);  constructor ;  ;  ~TGeoGenTrans () override;  destructor ;  ; void Clear (Option_t *option="""") override;  clear the fields of this transformation ;  ; const Double_t * GetScale () const override;  ; TGeoHMatrix Inverse () const override;  Return a temporary inverse of this. ;  ; TClass * IsA () const override;  ; TGeoMatrix * MakeClone () const override;  Make a clone of this matrix. ;  ; Bool_t Normalize ();  A scale transformation should be normalized by sx*sy*sz factor. ;  ; void SetScale (Double_t *scale);  ; void SetScale (Double_t sx, Double_t sy, Double_t sz);  set the scale ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoCombiTrans;  TGeoCombiTrans ();  dummy ctor ;  ;  TGeoCombiTrans (const char *name);  Named ctor. ;  ;  TGeoCombiTrans (const char *name, Double_t dx, Double_t dy, Double_t dz, TGeoRotation *rot);  Named ctor. ;  ;  TGeoCombiTrans (const TGeoCombiTrans &other);  ;  TGeoCombiTrans (const TGeoMatrix &other);  Copy ctor from generic matrix. ;  ;  TGeoCombiTrans (const TGeoTranslation &tr, const TGeoRotation &rot);  Constructor from a translation and a rotation. ;  ;  TGeoCombiTrans (Double_t dx, Double_t dy, Double_t dz, TGeoRotation *rot);  Constructor from a translation specified by X,Y,Z and a pointer to a rotation. ;  ;  ~TGeoCombiTrans () override;  destructor ;  ; TGeoRotation * GetRotation () const;  ; const Double_t * GetRotationMatrix () const override;  get the rotation array ;  ; const Double_t * GetTranslation () const override;  ; void Multiply (const TGeoMatrix *right);  multiply to the right with an other transformation if right is identity matrix, just return ;  ;",MatchSource.WIKI,doc/master/classTGeoGenTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoGenTrans.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoGenTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoGenTrans.html
Usability,clear,clear,". ROOT: TGeoGenTrans Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoGenTrans Class ReferenceThe Geometry Package » Geometry classes. ; Most general transformation, holding a translation, a rotation and a scale. ; Definition at line 375 of file TGeoMatrix.h. Public Member Functions;  TGeoGenTrans ();  dummy ctor ;  ;  TGeoGenTrans (const char *name);  constructor ;  ;  TGeoGenTrans (const char *name, Double_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation *rot);  constructor ;  ;  TGeoGenTrans (Double_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation *rot);  constructor ;  ;  ~TGeoGenTrans () override;  destructor ;  ; void Clear (Option_t *option="""") override;  clear the fields of this transformation ;  ; const Double_t * GetScale () const override;  ; TGeoHMatrix Inverse () const override;  Return a temporary inverse of this. ;  ; TClass * IsA () const override;  ; TGeoMatrix * MakeClone () const override;  Make a clone of this matrix. ;  ; Bool_t Normalize ();  A scale transformation should be normalized by sx*sy*sz factor. ;  ; void SetScale (Double_t *scale);  ; void SetScale (Double_t sx, Double_t sy, Double_t sz);  set the scale ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoCombiTrans;  TGeoCombiTrans ();  dummy ctor ;  ;  TGeoCombiTrans (const char *name);  Named ctor. ;  ;  TGeoCombiTrans (const char *name, Double_t dx, Double_t dy, Double_t dz, TGeoRotation *rot);  Named ctor. ;  ;  TGeoCombiTrans (const TGeoCombiTrans &other);  ;  TGeoCombiTrans (const TGeoMatrix &other);  Copy ctor from generic matrix. ;  ;  TGeoCombiTrans (const TGeoTranslation &tr, const TGeoRota",MatchSource.WIKI,doc/master/classTGeoGenTrans.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoGenTrans.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoGlobalMagField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoGlobalMagField.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoGlobalMagField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoGlobalMagField.html
Modifiability,inherit,inherited,"eoGlobalMagField.h:34; One can directly call the Field() method of a field via the global field manager:; TGeoGlobalMagField::Instance()->Field(x,B); TGeoGlobalMagField::Fieldvoid Field(const Double_t *x, Double_t *B)Definition TGeoGlobalMagField.h:44; xDouble_t x[n]Definition legend1.C:17. Definition at line 18 of file TGeoGlobalMagField.h. Public Member Functions;  TGeoGlobalMagField ();  Global field default constructor. ;  ;  ~TGeoGlobalMagField () override;  Global field destructor. ;  ; void Field (const Double_t *x, Double_t *B);  ; TVirtualMagField * GetField () const;  ; TClass * IsA () const override;  ; Bool_t IsLocked ();  ; void Lock ();  Locks the global magnetic field if this is set. Cannot be unlocked. ;  ; void SetField (TVirtualMagField *field);  Field setter. Deletes previous field if any. Acts only if fLock=kFALSE. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTGeoGlobalMagField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoGlobalMagField.html
Security,access,access,". ROOT: TGeoGlobalMagField Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TGeoGlobalMagField Class ReferenceThe Geometry Package » Geometry classes. ; Global magnetic field manager. ; Provides access to and owns the actual magnetic field set via SetField(). The field is deleted upon destruction of the field manager at the end of ROOT session or by calling:; TGeoGlobalMagField::Instance()->SetField(0).; TGeoGlobalMagField::SetFieldvoid SetField(TVirtualMagField *field)Field setter. Deletes previous field if any. Acts only if fLock=kFALSE.Definition TGeoGlobalMagField.cxx:86; TGeoGlobalMagField::Instancestatic TGeoGlobalMagField * Instance()Returns always a valid static pointer to the field manager.Definition TGeoGlobalMagField.cxx:118; The previous global field is deleted upon replacement with notification.; The global field manager provides access to the global field via:; TGeoGlobalMagField::Instance()->GetField(); TGeoGlobalMagField::GetFieldTVirtualMagField * GetField() constDefinition TGeoGlobalMagField.h:34; One can directly call the Field() method of a field via the global field manager:; TGeoGlobalMagField::Instance()->Field(x,B); TGeoGlobalMagField::Fieldvoid Field(const Double_t *x, Double_t *B)Definition TGeoGlobalMagField.h:44; xDouble_t x[n]Definition legend1.C:17. Definition at line 18 of file TGeoGlobalMagField.h. Public Member Functions;  TGeoGlobalMagField ();  Global field default constructor. ;  ;  ~TGeoGlobalMagField () override;  Global field destructor. ;  ; void Field (const Double_t *x, Double_t *B);  ; TVirtualMagField * GetField () const;  ; TClass * IsA () const override;  ; Bool_t IsLocked ();  ; void Lock ();  Locks the global magnetic field if this is set. Cannot be unlocked. ;  ; void SetField (TVirtualM",MatchSource.WIKI,doc/master/classTGeoGlobalMagField.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoGlobalMagField.html
Availability,error,error,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoGtra.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoGtra.html
Integrability,message,message,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoGtra.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoGtra.html
Modifiability,inherit,inherited, ;  ; void StreamerNVi,MatchSource.WIKI,doc/master/classTGeoGtra.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoGtra.html
Safety,safe,safe,"g...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoGtra Class Reference. . Definition at line 149 of file TGeoArb8.h. Public Member Functions;  TGeoGtra ();  ;  TGeoGtra (const char *name, Double_t dz, Double_t theta, Double_t phi, Double_t twist, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2);  ;  TGeoGtra (Double_t dz, Double_t theta, Double_t phi, Double_t twist, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2);  ;  ~TGeoGtra () override;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *mother, TGeoMatrix *mat) const override;  ; Double_t GetTwistAngle () const;  ; TClass * IsA () const override;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const override;  ; void Safety_v (const Double_t *points, const Bool_t *inside, Double_t *safe, Int_t vecsize) const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetDimensions (Double_t *param) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited",MatchSource.WIKI,doc/master/classTGeoGtra.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoGtra.html
Security,hash,hash," &ClassDef_StreamerNVirtual_b);  ; Bool_t TestShapeBit (UInt_t f) const;  ; Int_t TestShapeBits (UInt_t f) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoGtra.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoGtra.html
Testability,test,testNo,"; virtual const Double_t * GetOrigin () const;  ; Bool_t GetPointsOnSegments (Int_t npoints, Double_t *array) const override;  ; void InspectShape () const override;  ; Bool_t IsCylType () const override;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; TBuffer3D * MakeBuffer3D () const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void SetPoints (Double_t *points) const override;  ; void SetPoints (Float_t *points) const override;  ; void SetSegsAndPols (TBuffer3D &buffer) const override;  ; void Sizeof3D () const override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; virtual Bool_t IsAssembly () const;  ; virtual Bool_t IsComposite () const;  ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; void SetShapeBit (UInt_t f, Bool_t se",MatchSource.WIKI,doc/master/classTGeoGtra.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoGtra.html
Availability,error,error,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoHalfSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHalfSpace.html
Integrability,message,message,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoHalfSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHalfSpace.html
Modifiability,inherit,inherited," void Safety_v (const Double_t *points, const Bool_t *inside, Double_t *safe, Int_t vecsize) const override;  Compute safe distance from each of the points in the input array. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetDimensions (Double_t *param) override;  Set half-space parameters as stored in an array. ;  ; void SetPoints (Double_t *) const override;  ; void SetPoints (Float_t *) const override;  ; void Sizeof3D () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoBBox;  TGeoBBox ();  ;  TGeoBBox (const char *name, Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ;  TGeoBBox (Double_t *param);  ;  TGeoBBox (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ;  ~TGeoBBox () override;  ; Bool_t CouldBeCrossed (const Double_t *point, const Double_t *dir) const override;  ; const char * GetAxisName (Int_t iaxis) const override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; Int_t GetByteCount () const override;  ; virtual Double_t GetDX () const;  ; virtual Double_t GetDY () const;  ; virtual Double_t GetDZ () const;  ; virtual Double_t GetFacetArea (Int_t index=0) const;  ; Int_t GetFittingBox (const TGeoBBox *parambox, TGeoMatrix *mat, Double_t &dx, Double_t &dy, Double_t &dz) const override;  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; Bool_t GetPointsOnSegments (Int_t npoints, Double_t *array) const override;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const overri",MatchSource.WIKI,doc/master/classTGeoHalfSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHalfSpace.html
Safety,safe,safe," ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  Compute normal to closest surface from POINT. ;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  Compute the normal for an array o points so that norm.dot.dir is positive Input: Arrays of point coordinates and directions + vector size Output: Array of normal directions. ;  ; Bool_t Contains (const Double_t *point) const override;  test if point is inside the half-space ;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  Check the inside status for each of the points in the array. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  A half-space does not have a mesh primitive. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  compute distance from inside point to the plane ;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  Compute distance from array of input points having directions specified by dirs. Store output in dists. ;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  compute distance from inside point to the plane ;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  Compute distance from array of input points having directions specified by dirs. Store output in dists. ;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  Divide the shape along one axis. ;  ; void GetBoundingCylinder (Double_t *) const override;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *, TGeoMatrix *) const override;  ; ",MatchSource.WIKI,doc/master/classTGeoHalfSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHalfSpace.html
Security,hash,hash," &ClassDef_StreamerNVirtual_b);  ; Bool_t TestShapeBit (UInt_t f) const;  ; Int_t TestShapeBits (UInt_t f) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoHalfSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHalfSpace.html
Testability,test,test," at line 17 of file TGeoHalfSpace.h. Public Member Functions;  TGeoHalfSpace ();  Dummy constructor. ;  ;  TGeoHalfSpace (const char *name, Double_t *p, Double_t *n);  Constructor with name, point on the plane and normal. ;  ;  TGeoHalfSpace (Double_t *params);  Default constructor specifying minimum and maximum radius. ;  ;  ~TGeoHalfSpace () override;  destructor ;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  Compute normal to closest surface from POINT. ;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  Compute the normal for an array o points so that norm.dot.dir is positive Input: Arrays of point coordinates and directions + vector size Output: Array of normal directions. ;  ; Bool_t Contains (const Double_t *point) const override;  test if point is inside the half-space ;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  Check the inside status for each of the points in the array. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  A half-space does not have a mesh primitive. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  compute distance from inside point to the plane ;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  Compute distance from array of input points having directions specified by dirs. Store output in dists. ;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  compute distance from inside point to the plane ;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vec",MatchSource.WIKI,doc/master/classTGeoHalfSpace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHalfSpace.html
Availability,error,error,")); , kHelixStraight = (1ULL << ( 17 )); , kHelixCircle = (1ULL << ( 18 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoHelix ();  Dummy constructor. ;  ;  TGeoHelix (Double_t curvature, Double_t step, Int_t charge=1);  Normal constructor. ;  ;  ~TGeoHelix () override;  Destructor. ;  ; Double_t ComputeSafeStep (Double_t epsil=1E-6) const;  Compute safe linear step that can be made such that the error between linear-helix extrapolation is less than EPSIL. ;  ; const Double_t * GetCurrentDirection () const;  ; const Double_t * GetCurrentPoint () const;  ; Double_t GetStep () const;  ; Double_t GetTotalCurvature () const;  Compute helix total curvature. ;  ; Double_t GetXYcurvature () const;  ; void InitDirection (Double_t *dir, Bool_t is_normalized=kTRUE);  Initialize particle direction (tangent on the helix in initial point) ;  ; void InitDirection (Double_t dirx, Double_t diry, Double_t dirz, Bool_t is_normalized=kTRUE);  Initialize particle direction (tangent on the helix in initial point) ;  ; void InitPoint (Double_t *point);  Set initial point on the helix. ;  ; void InitPoint (Double_t x0, Double_t y0, Double_t z0);  Initialize coordinates of a point on the helix. ;  ; TClass * IsA () const override;  ; Bool_t IsRightHanded () const;  ; void ResetStep ();  Reset current point/direction to initial values. ;  ; void SetCharge (Int_t charge);  Po",MatchSource.WIKI,doc/master/classTGeoHelix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHelix.html
Deployability,update,update," means left-handed helix. ; Definition at line 195 of file TGeoHelix.cxx. ◆ SetField(). void TGeoHelix::SetField ; (; Double_t ; bx, . Double_t ; by, . Double_t ; bz, . Bool_t ; is_normalized = kTRUE . ). Initialize particle direction (tangent on the helix in initial point) ; Definition at line 211 of file TGeoHelix.cxx. ◆ SetHelixStep(). void TGeoHelix::SetHelixStep ; (; Double_t ; hstep). Set Z step of the helix on a complete turn. Positive or null. ; Definition at line 227 of file TGeoHelix.cxx. ◆ SetXYcurvature(). void TGeoHelix::SetXYcurvature ; (; Double_t ; curvature). Set XY curvature: c = 1/Rxy. ; Definition at line 178 of file TGeoHelix.cxx. ◆ Step(). void TGeoHelix::Step ; (; Double_t ; step). Make a step from current point along the helix and compute new point, direction and angle To reach a plane/ shape boundary, one has to: . Compute the safety to the plane/boundary; Define / update a helix according local field and particle state (position, direction, charge); Compute the magnetic safety (maximum distance for which the field can be considered constant); Call TGeoHelix::Step() having as argument the minimum between 1. and 3.; Repeat from 1. until the step to be made is small enough.; Add to the total step the distance along a straight line from the last point to the plane/shape boundary . Definition at line 260 of file TGeoHelix.cxx. ◆ StepToPlane(). Double_t TGeoHelix::StepToPlane ; (; Double_t * ; point, . Double_t * ; norm . ). Propagate initial point up to a given Z position in MARS. ; Definition at line 293 of file TGeoHelix.cxx. ◆ Streamer(). void TGeoHelix::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGeoHelix::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 73 of file TGeoHelix.h. ◆ UpdateHelix(). void TGeoHelix::UpdateHelix ; (; ). Update the local helix matrix. ; Definition at line 352 of file TGeoHeli",MatchSource.WIKI,doc/master/classTGeoHelix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHelix.html
Energy Efficiency,charge,charged,". ROOT: TGeoHelix Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoHelix Class ReferenceThe Geometry Package » Shapes. ; Class representing a helix curve. ; A helix is a curve defined by the following equations:; x = (1/c) * COS(q*phi); y = (1/c) * SIN(q*phi); z = s * alfa; c#define c(i)Definition RSha256.hxx:101; qfloat * qDefinition THbookFile.cxx:89; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; where:; c = 1/Rxy - curvature in XY plane; phi - phi angle; S = 2*PI*s - vertical separation between helix loops; q = +/- 1 - (+)=left-handed, (-)=right-handed; PI#define PIDefinition SpecFuncMathCore.cxx:23; angleOption_t Option_t TPoint TPoint angleDefinition TGWin32VirtualXProxy.cxx:68; In particular, a helix describes the trajectory of a charged particle in magnetic field. In such case, the helix is right-handed for negative particle charge. To define a helix, one must define:; the curvature - positive defined; the Z step made after one full turn of the helix; the particle charge sign; the initial particle position and direction (force normalization to unit); the magnetic field direction. A helix provides:; propagation to a given Z position (in global frame) Double_t *point = TGeoHelix::PropagateToZ(Double_t z);; propagation to an arbitrary plane, returning also the new point; propagation in a geometry until the next crossed surface; computation of the total track length along a helix . Definition at line 19 of file TGeoHelix.h. Public Types; enum  EGeoHelixTypes { kHelixNeedUpdate = (1ULL << ( 16 )); , kHelixStraight = (1ULL << ( 17 )); , kHelixCircle = (1ULL << ( 18 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent",MatchSource.WIKI,doc/master/classTGeoHelix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHelix.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoHelix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHelix.html
Modifiability,inherit,inherited,"tion_t Option_t TPoint TPoint angleDefinition TGWin32VirtualXProxy.cxx:68; In particular, a helix describes the trajectory of a charged particle in magnetic field. In such case, the helix is right-handed for negative particle charge. To define a helix, one must define:; the curvature - positive defined; the Z step made after one full turn of the helix; the particle charge sign; the initial particle position and direction (force normalization to unit); the magnetic field direction. A helix provides:; propagation to a given Z position (in global frame) Double_t *point = TGeoHelix::PropagateToZ(Double_t z);; propagation to an arbitrary plane, returning also the new point; propagation in a geometry until the next crossed surface; computation of the total track length along a helix . Definition at line 19 of file TGeoHelix.h. Public Types; enum  EGeoHelixTypes { kHelixNeedUpdate = (1ULL << ( 16 )); , kHelixStraight = (1ULL << ( 17 )); , kHelixCircle = (1ULL << ( 18 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoHelix ();  Dummy constructor. ;  ;  TGeoHelix (Double_t curvature, Double_t step, Int_t charge=1);  Normal constructor. ;  ;  ~TGeoHelix () override;  Destructor. ;  ; Double_t ComputeSafeStep (Double_t epsil=1E-6) const;  Compute safe linear step that can be made such that the error between linear-helix extrapolation is less than EPSIL. ;  ; con",MatchSource.WIKI,doc/master/classTGeoHelix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHelix.html
Safety,safe,safe,")); , kHelixStraight = (1ULL << ( 17 )); , kHelixCircle = (1ULL << ( 18 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoHelix ();  Dummy constructor. ;  ;  TGeoHelix (Double_t curvature, Double_t step, Int_t charge=1);  Normal constructor. ;  ;  ~TGeoHelix () override;  Destructor. ;  ; Double_t ComputeSafeStep (Double_t epsil=1E-6) const;  Compute safe linear step that can be made such that the error between linear-helix extrapolation is less than EPSIL. ;  ; const Double_t * GetCurrentDirection () const;  ; const Double_t * GetCurrentPoint () const;  ; Double_t GetStep () const;  ; Double_t GetTotalCurvature () const;  Compute helix total curvature. ;  ; Double_t GetXYcurvature () const;  ; void InitDirection (Double_t *dir, Bool_t is_normalized=kTRUE);  Initialize particle direction (tangent on the helix in initial point) ;  ; void InitDirection (Double_t dirx, Double_t diry, Double_t dirz, Bool_t is_normalized=kTRUE);  Initialize particle direction (tangent on the helix in initial point) ;  ; void InitPoint (Double_t *point);  Set initial point on the helix. ;  ; void InitPoint (Double_t x0, Double_t y0, Double_t z0);  Initialize coordinates of a point on the helix. ;  ; TClass * IsA () const override;  ; Bool_t IsRightHanded () const;  ; void ResetStep ();  Reset current point/direction to initial values. ;  ; void SetCharge (Int_t charge);  Po",MatchSource.WIKI,doc/master/classTGeoHelix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHelix.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoHelix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHelix.html
Availability,down,down,". ROOT: TGeoHMatrix Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TGeoHMatrix Class ReferenceThe Geometry Package » Geometry classes. ; Matrix class used for computing global transformations Should NOT be used for node definition. ; An instance of this class is generally used to pile-up local transformations starting from the top level physical node, down to the current node. ; Definition at line 458 of file TGeoMatrix.h. Public Member Functions;  TGeoHMatrix ();  dummy ctor ;  ;  TGeoHMatrix (const char *name);  constructor ;  ;  TGeoHMatrix (const TGeoHMatrix &other);  ;  TGeoHMatrix (const TGeoMatrix &matrix);  assignment ;  ;  ~TGeoHMatrix () override;  destructor ;  ; void Clear (Option_t *option="""") override;  clear the data for this matrix ;  ; void CopyFrom (const TGeoMatrix *other);  Fast copy method. ;  ; Double_t Determinant () const;  computes determinant of the rotation matrix ;  ; void FastRotZ (const Double_t *sincos);  Perform a rotation about Z having the sine/cosine of the rotation angle. ;  ; virtual Double_t * GetRotationMatrix ();  ; const Double_t * GetRotationMatrix () const override;  ; virtual Double_t * GetScale ();  ; const Double_t * GetScale () const override;  ; virtual Double_t * GetTranslation ();  ; const Double_t * GetTranslation () const override;  ; TGeoHMatrix Inverse () const override;  Return a temporary inverse of this. ;  ; TClass * IsA () const override;  ; TGeoMatrix * MakeClone () const override;  Make a clone of this matrix. ;  ; void Multiply (const TGeoMatrix &right);  ; void Multiply (const TGeoMatrix *right);  multiply to the right with an other transformation if right is identity matrix, just return ;  ; void MultiplyLeft (const TGeoMatrix &left);  ; void MultiplyLeft (const TGeoMatrix *left);  multiply to the left with an other transformati",MatchSource.WIKI,doc/master/classTGeoHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHMatrix.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHMatrix.html
Modifiability,inherit,inherited,"flection respect to ZX. ;  ; void ReflectZ (Bool_t leftside, Bool_t rotonly=kFALSE) override;  Multiply by a reflection respect to XY. ;  ; void RotateX (Double_t angle) override;  Rotate about X axis with angle expressed in degrees. ;  ; void RotateY (Double_t angle) override;  Rotate about Y axis with angle expressed in degrees. ;  ; void RotateZ (Double_t angle) override;  Rotate about Z axis with angle expressed in degrees. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetDx (Double_t dx) override;  ; void SetDy (Double_t dy) override;  ; void SetDz (Double_t dz) override;  ; void SetRotation (const Double_t *matrix);  ; void SetScale (const Double_t *scale);  ; void SetTranslation (const Double_t *vect);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoMatrix;  TGeoMatrix ();  dummy constructor ;  ;  TGeoMatrix (const char *name);  Constructor. ;  ;  ~TGeoMatrix () override;  Destructor. ;  ; virtual Int_t GetByteCount () const;  Get total size in bytes of this. ;  ; void GetHomogenousMatrix (Double_t *hmat) const;  The homogenous matrix associated with the transformation is used for piling up's and visualization. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; TClass * IsA () const override;  ; Bool_t IsCombi () const;  ; Bool_t IsGeneral () const;  ; Bool_t IsIdentity () const;  ; Bool_t IsOwned () const;  ; Bool_t IsReflection () const;  ; Bool_t IsRegistered () const;  ; Bool_t IsRotAboutZ () const;  Returns true if no rotation or the rotation is about Z axis. ;  ; Bool_t IsRotation () const;  ; Bool_t IsScale () const;  ; Bool_t IsShared () const;  ; Bool_t IsTranslation () const;  ; virtual void LocalToMaster (const Double_t *local, Double_t *master) const;  convert a point by ",MatchSource.WIKI,doc/master/classTGeoHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHMatrix.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHMatrix.html
Usability,clear,clear,". ROOT: TGeoHMatrix Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TGeoHMatrix Class ReferenceThe Geometry Package » Geometry classes. ; Matrix class used for computing global transformations Should NOT be used for node definition. ; An instance of this class is generally used to pile-up local transformations starting from the top level physical node, down to the current node. ; Definition at line 458 of file TGeoMatrix.h. Public Member Functions;  TGeoHMatrix ();  dummy ctor ;  ;  TGeoHMatrix (const char *name);  constructor ;  ;  TGeoHMatrix (const TGeoHMatrix &other);  ;  TGeoHMatrix (const TGeoMatrix &matrix);  assignment ;  ;  ~TGeoHMatrix () override;  destructor ;  ; void Clear (Option_t *option="""") override;  clear the data for this matrix ;  ; void CopyFrom (const TGeoMatrix *other);  Fast copy method. ;  ; Double_t Determinant () const;  computes determinant of the rotation matrix ;  ; void FastRotZ (const Double_t *sincos);  Perform a rotation about Z having the sine/cosine of the rotation angle. ;  ; virtual Double_t * GetRotationMatrix ();  ; const Double_t * GetRotationMatrix () const override;  ; virtual Double_t * GetScale ();  ; const Double_t * GetScale () const override;  ; virtual Double_t * GetTranslation ();  ; const Double_t * GetTranslation () const override;  ; TGeoHMatrix Inverse () const override;  Return a temporary inverse of this. ;  ; TClass * IsA () const override;  ; TGeoMatrix * MakeClone () const override;  Make a clone of this matrix. ;  ; void Multiply (const TGeoMatrix &right);  ; void Multiply (const TGeoMatrix *right);  multiply to the right with an other transformation if right is identity matrix, just return ;  ; void MultiplyLeft (const TGeoMatrix &left);  ; void MultiplyLeft (const TGeoMatrix *left);  multiply to the left with an other transformati",MatchSource.WIKI,doc/master/classTGeoHMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHMatrix.html
Availability,error,error,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoHype.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHype.html
Integrability,rout,rout,". ROOT: TGeoHype Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TGeoHype Class Reference. . Definition at line 17 of file TGeoHype.h. Public Member Functions;  TGeoHype ();  ;  TGeoHype (const char *name, Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz);  ;  TGeoHype (Double_t *params);  ;  TGeoHype (Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz);  ;  ~TGeoHype () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Int_t DistToHype (const Double_t *point, const Double_t *dir, Double_t *s, Bool_t inner, Bool_t in) const;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t ",MatchSource.WIKI,doc/master/classTGeoHype.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHype.html
Modifiability,inherit,inherited,"td::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetDimensions (Double_t *param) override;  ; void SetHypeDimensions (Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz);  ; void SetPoints (Double_t *points) const override;  ; void SetPoints (Float_t *points) const override;  ; void SetSegsAndPols (TBuffer3D &buff) const override;  ; void Sizeof3D () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Double_t ZHypeSq (Double_t r, Bool_t inner) const;  ;  Public Member Functions inherited from TGeoTube;  TGeoTube ();  ;  TGeoTube (const char *name, Double_t rmin, Double_t rmax, Double_t dz);  ;  TGeoTube (Double_t *params);  ;  TGeoTube (Double_t rmin, Double_t rmax, Double_t dz);  ;  ~TGeoTube () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t ",MatchSource.WIKI,doc/master/classTGeoHype.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHype.html
Safety,safe,safe,"t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Int_t DistToHype (const Double_t *point, const Double_t *dir, Double_t *s, Bool_t inner, Bool_t in) const;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; Int_t GetByteCount () const override;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *mother, TGeoMatrix *mat) const override;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  ; Int_t GetNmeshVertices () const override;  ; Bool_t GetPointsOnSegments (Int_t, Double_t *) const override;  ; Double_t GetStIn () const;  ; Double_t GetStOut () const;  ; Bool_t HasInner () const;  ; void InspectSh",MatchSource.WIKI,doc/master/classTGeoHype.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHype.html
Security,hash,hash," &ClassDef_StreamerNVirtual_b);  ; Bool_t TestShapeBit (UInt_t f) const;  ; Int_t TestShapeBits (UInt_t f) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoHype.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHype.html
Testability,test,testNo,"le_t *dir) const override;  ; virtual Double_t GetDX () const;  ; virtual Double_t GetDY () const;  ; virtual Double_t GetDZ () const;  ; virtual Double_t GetFacetArea (Int_t index=0) const;  ; Int_t GetFittingBox (const TGeoBBox *parambox, TGeoMatrix *mat, Double_t &dx, Double_t &dy, Double_t &dz) const override;  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; virtual Bool_t IsAssembly () const;  ; virtual Bool_t IsComposite () const;  ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; void SetShapeBit (UInt_t f, Bool_t se",MatchSource.WIKI,doc/master/classTGeoHype.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoHype.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoIdentity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoIdentity.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoIdentity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoIdentity.html
Modifiability,inherit,inherited,"rse ;  ; void LocalToMasterVect (const Double_t *local, Double_t *master) const override;  convert a vector by multiplying its column vector (x, y, z, 1) to matrix inverse ;  ; TGeoMatrix * MakeClone () const override;  ; void MasterToLocal (const Double_t *master, Double_t *local) const override;  convert a point by multiplying its column vector (x, y, z, 1) to matrix ;  ; void MasterToLocalBomb (const Double_t *master, Double_t *local) const override;  convert a point by multiplying its column vector (x, y, z, 1) to matrix ;  ; void MasterToLocalVect (const Double_t *master, Double_t *local) const override;  convert a point by multiplying its column vector (x, y, z, 1) to matrix ;  ; void SavePrimitive (std::ostream &, Option_t *="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoMatrix;  TGeoMatrix ();  dummy constructor ;  ;  TGeoMatrix (const char *name);  Constructor. ;  ;  ~TGeoMatrix () override;  Destructor. ;  ; virtual Int_t GetByteCount () const;  Get total size in bytes of this. ;  ; void GetHomogenousMatrix (Double_t *hmat) const;  The homogenous matrix associated with the transformation is used for piling up's and visualization. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; TClass * IsA () const override;  ; Bool_t IsCombi () const;  ; Bool_t IsGeneral () const;  ; Bool_t IsIdentity () const;  ; Bool_t IsOwned () const;  ; Bool_t IsReflection () const;  ; Bool_t IsRegistered () const;  ; Bool_t IsRotAboutZ () const;  Returns true if no rotation or the rotation is about Z axis. ;  ; Bool_t IsRotation () const;  ; Bool_t IsScale () const;  ; Bool_t IsShared () const;  ; Bool_t IsTranslation () const;  ; void Print (Option_t *option="""") const override;  print the matrix in 4x4 format ;  ; virtual vo",MatchSource.WIKI,doc/master/classTGeoIdentity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoIdentity.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoIdentity.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoIdentity.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoIntersection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoIntersection.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoIntersection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoIntersection.html
Modifiability,inherit,inherited," Double_t *dir, Int_t iact=1, Double_t step=0, Double_t *safe=nullptr) const override;  Compute distance from a given point outside to the shape. ;  ; EGeoBoolType GetBooleanOperator () const override;  ; Int_t GetNpoints () override;  Returns number of vertices for the composite shape described by this intersection. ;  ; TClass * IsA () const override;  ; TGeoBoolNode * MakeClone () const override;  Make a clone of this. Pointers are preserved. ;  ; void Paint (Option_t *option) override;  Paint method. ;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const override;  Compute safety distance for a union node;. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Sizeof3D () const override;  Register 3D size of this shape. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoBoolNode;  TGeoBoolNode ();  Default constructor. ;  ;  TGeoBoolNode (const char *expr1, const char *expr2);  Constructor called by TGeoCompositeShape providing 2 subexpressions for the 2 branches. ;  ;  TGeoBoolNode (TGeoShape *left, TGeoShape *right, TGeoMatrix *lmat=nullptr, TGeoMatrix *rmat=nullptr);  Constructor providing left and right shapes and matrices (in the Boolean operation). ;  ;  ~TGeoBoolNode () override;  Destructor. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; TGeoMatrix * GetLeftMatrix () const;  ; TGeoShape * GetLeftShape () const;  ; TGeoMatrix * GetRightMatrix () const;  ; TGeoShape * GetRightShape () const;  ; ThreadData_t & GetThreadData () const;  ; void RegisterMatrices ();  Register all matrices of the boolean node and descendents. ;  ; Bool_t ReplaceMatrix (TGeoMatrix *mat, TGeoMatrix *newmat);  Replace one of the matrices. ;  ; virtual void SetPoin",MatchSource.WIKI,doc/master/classTGeoIntersection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoIntersection.html
Safety,safe,safe,"tersection (const char *expr1, const char *expr2);  Constructor. ;  ;  TGeoIntersection (TGeoShape *left, TGeoShape *right, TGeoMatrix *lmat=nullptr, TGeoMatrix *rmat=nullptr);  Constructor providing pointers to components. ;  ;  ~TGeoIntersection () override;  Destructor — deletion of components handled by TGeoManager class. ;  ; void ComputeBBox (Double_t &dx, Double_t &dy, Double_t &dz, Double_t *origin) override;  Compute bounding box corresponding to a intersection of two shapes. ;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  Normal computation in POINT. The orientation is chosen so that DIR.dot.NORM>0. ;  ; Bool_t Contains (const Double_t *point) const override;  Find if a intersection of two shapes contains a given point. ;  ; Int_t DistanceToPrimitive (Int_t px, Int_t py) override;  Compute minimum distance to shape vertices. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=0, Double_t *safe=nullptr) const override;  Compute distance from a given point inside to the shape boundary. ;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=0, Double_t *safe=nullptr) const override;  Compute distance from a given point outside to the shape. ;  ; EGeoBoolType GetBooleanOperator () const override;  ; Int_t GetNpoints () override;  Returns number of vertices for the composite shape described by this intersection. ;  ; TClass * IsA () const override;  ; TGeoBoolNode * MakeClone () const override;  Make a clone of this. Pointers are preserved. ;  ; void Paint (Option_t *option) override;  Paint method. ;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const override;  Compute safety distance for a union node;. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Sizeof3D () const override;  Register 3D size of this",MatchSource.WIKI,doc/master/classTGeoIntersection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoIntersection.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoIntersection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoIntersection.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoIsotope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoIsotope.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoIsotope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoIsotope.html
Modifiability,inherit,inherited,". ROOT: TGeoIsotope Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoIsotope Class Reference. . Definition at line 103 of file TGeoElement.h. Public Member Functions;  TGeoIsotope ();  Dummy I/O constructor. ;  ;  TGeoIsotope (const char *name, Int_t z, Int_t n, Double_t a);  Constructor. ;  ;  ~TGeoIsotope () override;  ; Double_t GetA () const;  ; Int_t GetN () const;  ; Int_t GetZ () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print this isotope. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print ",MatchSource.WIKI,doc/master/classTGeoIsotope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoIsotope.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoIsotope.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoIsotope.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoIteratorPlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoIteratorPlugin.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoIteratorPlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoIteratorPlugin.html
Modifiability,inherit,inherited,". ROOT: TGeoIteratorPlugin Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGeoIteratorPlugin Class ReferenceabstractThe Geometry Package » Geometry classes. . Definition at line 224 of file TGeoNode.h. Public Member Functions;  TGeoIteratorPlugin ();  ;  ~TGeoIteratorPlugin () override;  ; TClass * IsA () const override;  ; virtual void ProcessNode ()=0;  ; void SetIterator (const TGeoIterator *iter);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Comput",MatchSource.WIKI,doc/master/classTGeoIteratorPlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoIteratorPlugin.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoIteratorPlugin.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoIteratorPlugin.html
Availability,down,downwards,"_Name()TGeoManagerstatic; Class_Version()TGeoManagerinlinestatic; ClassName() constTObjectvirtual; CleanGarbage()TGeoManager; Clear(Option_t *option="""") overrideTNamedvirtual; ClearAttributes()TGeoManager; ClearNavigators()TGeoManager; ClearOverlaps()TGeoManager; ClearPhysicalNodes(Bool_t mustdelete=kFALSE)TGeoManager; ClearShape(const TGeoShape *shape)TGeoManager; ClearThreadData() constTGeoManager; ClearThreadsMap()TGeoManagerstatic; ClearTracks()TGeoManagerinline; Clone(const char *newname="""") const overrideTNamedvirtual; CloseGeometry(Option_t *option=""d"")TGeoManager; Compare(const TObject *obj) const overrideTNamedvirtual; ConstPropMap_t typedefTGeoManagerprivate; ConvertReflections()TGeoManager; Copy(TObject &named) const overrideTNamedvirtual; CountLevels()TGeoManager; CountNodes(const TGeoVolume *vol=nullptr, Int_t nlevels=10000, Int_t option=0)TGeoManager; CreateParallelWorld(const char *name)TGeoManager; CreateThreadData() constTGeoManager; CrossBoundaryAndLocate(Bool_t downwards, TGeoNode *skipnode)TGeoManager; DeclFileName()TGeoManagerinlinestatic; DefaultAngles()TGeoManager; DefaultColors()TGeoManager; Delete(Option_t *option="""")TObjectvirtual; DisableInactiveVolumes()TGeoManagerinline; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; Division(const char *name, const char *mother, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step, Int_t numed=0, Option_t *option="""")TGeoManager; DoBackupState()TGeoManager; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoRestoreState()TGeoManager; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawCurrentPoint(Int_t color=2)TGeoManager; DrawPath(const char *path, Option_t *option="""")TGeoManager; DrawTracks(Option_t *option="""")TGeoManager; Dump() constTObjectvirtual; EDefaultUnits enum nameTGeoManager; EDeprecatedStatusBits enum nameTObject; Edit(Option_t *option="""")TGeoManagervirt",MatchSource.WIKI,doc/master/classTGeoManager-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoManager-members.html
Integrability,rout,rout,"TGeoMedium *medium, Double_t dx, Double_t dy, Double_t dz)TGeoManager; MakeCone(const char *name, TGeoMedium *medium, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2)TGeoManager; MakeCons(const char *name, TGeoMedium *medium, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2)TGeoManager; MakeCtub(const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx, Double_t ly, Double_t lz, Double_t tx, Double_t ty, Double_t tz)TGeoManager; MakeEltu(const char *name, TGeoMedium *medium, Double_t a, Double_t b, Double_t dz)TGeoManager; MakeGtra(const char *name, TGeoMedium *medium, Double_t dz, Double_t theta, Double_t phi, Double_t twist, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2)TGeoManager; MakeHype(const char *name, TGeoMedium *medium, Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz)TGeoManager; MakePara(const char *name, TGeoMedium *medium, Double_t dx, Double_t dy, Double_t dz, Double_t alpha, Double_t theta, Double_t phi)TGeoManager; MakeParaboloid(const char *name, TGeoMedium *medium, Double_t rlo, Double_t rhi, Double_t dz)TGeoManager; MakePcon(const char *name, TGeoMedium *medium, Double_t phi, Double_t dphi, Int_t nz)TGeoManager; MakePgon(const char *name, TGeoMedium *medium, Double_t phi, Double_t dphi, Int_t nedges, Int_t nz)TGeoManager; MakePhysicalNode(const char *path=nullptr)TGeoManager; MakeSphere(const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Double_t themin=0, Double_t themax=180, Double_t phimin=0, Double_t phimax=360)TGeoManager; MakeTorus(const char *name, TGeoMedium *medium, Double_t r, Double_t rmin, Double_t rmax, Double_t phi1=0, Double_t dphi=360)TGeoManager; MakeTrack(Int_t id, Int_t pdgcode, TObject *particle)TGeoManager; MakeTrap(const char *name, TGeoMedium *medium, Double_t dz, Double",MatchSource.WIKI,doc/master/classTGeoManager-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoManager-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TGeoManager Member List. This is the complete list of members for TGeoManager, including all inherited members. AbstractMethod(const char *method) constTObject; AddBorderSurface(TGeoBorderSurface *surf)TGeoManager; AddGDMLMatrix(TGDMLMatrix *mat)TGeoManager; AddMaterial(const TGeoMaterial *material)TGeoManager; AddNavigator()TGeoManager; AddOpticalSurface(TGeoOpticalSurface *optsurf)TGeoManager; AddOverlap(const TNamed *ovlp)TGeoManager; AddProperty(const char *property, Double_t value)TGeoManager; AddRegion(TGeoRegion *region)TGeoManager; AddShape(const TGeoShape *shape)TGeoManager; AddSkinSurface(TGeoSkinSurface *surf)TGeoManager; AddToTObjectTable(TObject *)TObjectprivatestatic; AddTrack(Int_t id, Int_t pdgcode, TObject *particle=nullptr)TGeoManager; AddTrack(TVirtualGeoTrack *track)TGeoManager; AddTransformation(const TGeoMatrix *matrix)TGeoManager; AddVolume(TGeoVolume *volume)TGeoManager; AnimateTracks(Double_t tmin=0, Double_t tmax=5E-8, Int_t nframes=200, Option_t *option=""/*"")TGeoManager; AppendPad(Option_t *option="""")TObjectvirtual; BombTranslation(const Double_t *tr, Double_t *bombtr)TGeoManager; Browse(TBrowser *b) overrideTGeoManagervirtual; BuildDefaultMaterials()TGeoManager; cd(const char *path="""")TGeoManagervirtual; CdDown(Int_t index)TGeoManager; CdNext()TGeoManager; CdNode(Int_t nodeid)TGeoManager; CdTop()TGeoManager; CdUp()TGeoManager; CheckBoundaryErrors(Int_t ntracks=1000000, Double_t radius=-1.)TGeoManager; CheckBoundaryReference(Int_t icheck=-1)TGeoManager; CheckedHash()TObjectinline; CheckGeometry(Option_t *option="""")TGeoManager; CheckGeometryFull(Int_t ntracks=1000000, Double_t vx=0., Double_t vy=0., Double_t vz=0., Option_t *option=""ob"")TGeoManager; CheckOverlaps(Double_t ovlp=0.1, Option_t *option="""")TGeoManager; CheckPath(const char *path) constTGeoManager; CheckPoint(Double_t x=0, Double_t y=0, Double_t z=0, Option_t *option="""", Double_t ",MatchSource.WIKI,doc/master/classTGeoManager-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoManager-members.html
Safety,safe,safety,"mation(const TGeoMatrix *matrix)TGeoManager; AddVolume(TGeoVolume *volume)TGeoManager; AnimateTracks(Double_t tmin=0, Double_t tmax=5E-8, Int_t nframes=200, Option_t *option=""/*"")TGeoManager; AppendPad(Option_t *option="""")TObjectvirtual; BombTranslation(const Double_t *tr, Double_t *bombtr)TGeoManager; Browse(TBrowser *b) overrideTGeoManagervirtual; BuildDefaultMaterials()TGeoManager; cd(const char *path="""")TGeoManagervirtual; CdDown(Int_t index)TGeoManager; CdNext()TGeoManager; CdNode(Int_t nodeid)TGeoManager; CdTop()TGeoManager; CdUp()TGeoManager; CheckBoundaryErrors(Int_t ntracks=1000000, Double_t radius=-1.)TGeoManager; CheckBoundaryReference(Int_t icheck=-1)TGeoManager; CheckedHash()TObjectinline; CheckGeometry(Option_t *option="""")TGeoManager; CheckGeometryFull(Int_t ntracks=1000000, Double_t vx=0., Double_t vy=0., Double_t vz=0., Option_t *option=""ob"")TGeoManager; CheckOverlaps(Double_t ovlp=0.1, Option_t *option="""")TGeoManager; CheckPath(const char *path) constTGeoManager; CheckPoint(Double_t x=0, Double_t y=0, Double_t z=0, Option_t *option="""", Double_t safety=0.)TGeoManager; CheckShape(TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option)TGeoManager; Class()TGeoManagerstatic; Class_Name()TGeoManagerstatic; Class_Version()TGeoManagerinlinestatic; ClassName() constTObjectvirtual; CleanGarbage()TGeoManager; Clear(Option_t *option="""") overrideTNamedvirtual; ClearAttributes()TGeoManager; ClearNavigators()TGeoManager; ClearOverlaps()TGeoManager; ClearPhysicalNodes(Bool_t mustdelete=kFALSE)TGeoManager; ClearShape(const TGeoShape *shape)TGeoManager; ClearThreadData() constTGeoManager; ClearThreadsMap()TGeoManagerstatic; ClearTracks()TGeoManagerinline; Clone(const char *newname="""") const overrideTNamedvirtual; CloseGeometry(Option_t *option=""d"")TGeoManager; Compare(const TObject *obj) const overrideTNamedvirtual; ConstPropMap_t typedefTGeoManagerprivate; ConvertReflections()TGeoManager; Copy(TObject &named) const overrideTNamedvirtual; CountLevels()TGeoM",MatchSource.WIKI,doc/master/classTGeoManager-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoManager-members.html
Testability,test,testNo,,MatchSource.WIKI,doc/master/classTGeoManager-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoManager-members.html
Availability,down,down,"system.rootrc,; //it will appear in the GL viewer; //#Viewer3D.DefaultDrawOption: ogl; ; geom->SetVisLevel(4);; if (vis) top->Draw(""ogle"");; }; ; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; kYellow@ kYellowDefinition Rtypes.h:66; gGeoIdentityR__EXTERN TGeoIdentity * gGeoIdentityDefinition TGeoMatrix.h:537; R; TGeoArb8Definition TGeoArb8.h:17; TGeoArb8::SetVertexvirtual void SetVertex(Int_t vnum, Double_t x, Double_t y); TGeoCombiTransClass describing rotation + translation.Definition TGeoMatrix.h:317; TGeoManagerThe manager class for any TGeo geometry.Definition TGeoManager.h:44; TGeoManager::TGeoManagerTGeoManager()Default constructor.Definition TGeoManager.cxx:311; TGeoManager::MakeArb8TGeoVolume * MakeArb8(const char *name, TGeoMedium *medium, Double_t dz, Double_t *vertices=nullptr)Make an TGeoArb8 volume.Definition TGeoManager.cxx:3161; TGeoManager::SetVisLevelvoid SetVisLevel(Int_t level=3)set default level down to which visualization is performedDefinition TGeoManager.cxx:2459; TGeoManager::CloseGeometryvoid CloseGeometry(Option_t *option=""d"")Closing geometry implies checking the geometry validity, fixing shapes with negative parameters (run-...Definition TGeoManager.cxx:1480; TGeoManager::MakeBoxTGeoVolume * MakeBox(const char *name, TGeoMedium *medium, Double_t dx, Double_t dy, Double_t dz)Make in one step a volume pointing to a box shape with given medium.Definition TGeoManager.cxx:3169; TGeoManager::SetTopVolumevoid SetTopVolume(TGeoVolume *vol)Set the top volume and corresponding node as starting point of the geometry.Definition TGeoManager.cxx:3655; TGeoManager::MakeTubsTGeoVolume * MakeTubs(const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2)Make in one step a volume pointing to a tube segment shape with given medium.Definition TGeoManager.cxx:3213; TGeoMaterialBase class describing materials.Definition TGeoMateri",MatchSource.WIKI,doc/master/classTGeoManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoManager.html
Deployability,update,updates,"xpensive geometries. In future there will be a limitation on the maximum number of nodes to be visualized. opt=2; only the clicked volume is visualized. This is automatically set by TGeoVolume::DrawOnly() method; opt=3 - only a given path is visualized. This is automatically set by; TGeoVolume::DrawPath(const char *path) method; The current view can be exploded in cartesian, cylindrical or spherical coordinates : TGeoManager::SetExplodedView(Int_t opt). Options may be :; 0 - default (no bombing); 1 - cartesian coordinates. The bomb factor on each axis can be set with TGeoManager::SetBombX(Double_t bomb) and corresponding Y and Z.; 2 - bomb in cylindrical coordinates. Only the bomb factors on Z and R are considered . 3 - bomb in radial spherical coordinate : TGeoManager::SetBombR(). Volumes themselves support different visualization settings :; TGeoVolume::SetVisibility() : set volume visibility.; TGeoVolume::VisibleDaughters() : set daughters visibility. All these actions automatically updates the current view if any. Checking the geometry; Several checking methods are accessible from the volume context menu. They generally apply only to the visible parts of the drawn geometry in order to ease geometry checking, and their implementation is in the TGeoChecker class from the painting package.; Checking a given point.; Can be called from TGeoManager::CheckPoint(Double_t x, Double_t y, Double_t z). This method is drawing the daughters of the volume containing the point one level down, printing the path to the deepest physical node holding this point. It also computes the closest distance to any boundary. The point will be drawn in red, as well as a sphere having this closest distance as radius. In case a non-zero distance is given by the user as fifth argument of CheckPoint, this distance will be used as radius of the safety sphere. Shooting random points.; Can be called from TGeoVolume::RandomPoints() (context menu function) and it will draw this volume with current vis",MatchSource.WIKI,doc/master/classTGeoManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoManager.html
Energy Efficiency,energy,energy,"_t ; phi1, . Double_t ; theta2, . Double_t ; phi2, . Double_t ; theta3, . Double_t ; phi3 . ). Create rotation matrix named 'mat<index>'. . index rotation matrix number; theta1 polar angle for axis X; phi1 azimuthal angle for axis X; theta2 polar angle for axis Y; phi2 azimuthal angle for axis Y; theta3 polar angle for axis Z; phi3 azimuthal angle for axis Z . Definition at line 1276 of file TGeoManager.cxx. ◆ Medium(). TGeoMedium * TGeoManager::Medium ; (; const char * ; name, . Int_t ; numed, . Int_t ; nmat, . Int_t ; isvol, . Int_t ; ifield, . Double_t ; fieldm, . Double_t ; tmaxfd, . Double_t ; stemax, . Double_t ; deemax, . Double_t ; epsil, . Double_t ; stmin . ). Create tracking medium. . numed tracking medium number assigned; name tracking medium name; nmat material number; isvol sensitive volume flag; ifield magnetic field; fieldm max. field value (kilogauss); tmaxfd max. angle due to field (deg/step); stemax max. step allowed; deemax max. fraction of energy lost in a step; epsil tracking precision (cm); stmin min. step due to continuous processes (cm); ifield = 0 if no magnetic field; ifield = -1 if user decision in guswim;; ifield = 1 if tracking performed with g3rkuta; ifield = 2 if tracking performed with g3helix; ifield = 3 if tracking performed with g3helx3. . Definition at line 1331 of file TGeoManager.cxx. ◆ Mixture() [1/2]. TGeoMaterial * TGeoManager::Mixture ; (; const char * ; name, . Double_t * ; a, . Double_t * ; z, . Double_t ; dens, . Int_t ; nelem, . Double_t * ; wmat, . Int_t ; uid . ). Create mixture OR COMPOUND IMAT as composed by THE BASIC nelem materials defined by arrays A,Z and WMAT, having an unique id. ; Definition at line 1306 of file TGeoManager.cxx. ◆ Mixture() [2/2]. TGeoMaterial * TGeoManager::Mixture ; (; const char * ; name, . Float_t * ; a, . Float_t * ; z, . Double_t ; dens, . Int_t ; nelem, . Float_t * ; wmat, . Int_t ; uid . ). Create mixture OR COMPOUND IMAT as composed by THE BASIC nelem materials defined by arrays A,Z a",MatchSource.WIKI,doc/master/classTGeoManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoManager.html
Integrability,interface,interface,". ROOT: TGeoManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TGeoManager Class ReferenceThe Geometry Package » Geometry classes. ; The manager class for any TGeo geometry. ; Provides user interface for geometry creation, navigation, state querying, visualization, IO, geometry checking and other utilities. General architecture; The ROOT geometry package is a tool designed for building, browsing, tracking and visualizing a detector geometry. The code is independent from other external MC for simulation, therefore it does not contain any constraints related to physics. However, the package defines a number of hooks for tracking, such as media, materials, magnetic field or track state flags, in order to allow interfacing to tracking MC's. The final goal is to be able to use the same geometry for several purposes, such as tracking, reconstruction or visualization, taking advantage of the ROOT features related to bookkeeping, I/O, histogramming, browsing and GUI's.; The geometrical modeler is the most important component of the package and it provides answers to the basic questions like ""Where am I ?"" or ""How far; from the next boundary ?"", but also to more complex ones like ""How far from; the closest surface ?"" or ""Which is the next crossing along a helix ?"".; The architecture of the modeler is a combination between a GEANT-like containment scheme and a normal CSG binary tree at the level of shapes. An important common feature of all detector geometry descriptions is the mother-daughter concept. This is the most natural approach when tracking is concerned and imposes a set of constraints to the way geometry is defined. Constructive solid geom",MatchSource.WIKI,doc/master/classTGeoManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoManager.html
Modifiability,inherit,inherits,"e daughter node of several other volumes), every volume becoming a branch in this graph. Any volume in the logical graph can become the actual top volume at run time (see TGeoManager::SetTopVolume()). All functionalities of the modeler will behave in this case as if only the corresponding branch starting from this volume is the registered geometry. A given volume can be positioned several times in the geometry. A volume can be divided according default or user-defined patterns, creating automatically the list of division nodes inside. The elementary volumes created during the dividing process follow the same scheme as usual volumes, therefore it is possible to position further geometrical structures inside or to divide them further more (see TGeoVolume::Divide()).; The primitive shapes supported by the package are basically the GEANT3 shapes (see class TGeoShape), arbitrary wedges with eight vertices on two parallel planes. All basic primitives inherits from class TGeoBBox since the bounding box of a solid is essential for the tracking algorithms. They also implement the virtual methods defined in the virtual class TGeoShape (point and segment classification). User-defined primitives can be directly plugged into the modeler provided that they override these methods. Composite shapes will be soon supported by the modeler. In order to build a TGeoCompositeShape, one will have to define first the primitive components. The object that handle boolean operations among components is called TGeoBoolCombinator and it has to be constructed providing a string boolean expression between the components names. Example for building a simple geometry; ; void rootgeom(bool vis = true); {; // gStyle->SetCanvasPreferGL(true);; ; TGeoManager *geom = new TGeoManager(""simple1"", ""Simple geometry"");; ; //--- define some materials; TGeoMaterial *matVacuum = new TGeoMaterial(""Vacuum"", 0,0,0);; TGeoMaterial *matAl = new TGeoMaterial(""Al"", 26.98,13,2.7);; // //--- define some media; TGeoMedium",MatchSource.WIKI,doc/master/classTGeoManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoManager.html
Performance,perform,performedDefinition,"system.rootrc,; //it will appear in the GL viewer; //#Viewer3D.DefaultDrawOption: ogl; ; geom->SetVisLevel(4);; if (vis) top->Draw(""ogle"");; }; ; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; kYellow@ kYellowDefinition Rtypes.h:66; gGeoIdentityR__EXTERN TGeoIdentity * gGeoIdentityDefinition TGeoMatrix.h:537; R; TGeoArb8Definition TGeoArb8.h:17; TGeoArb8::SetVertexvirtual void SetVertex(Int_t vnum, Double_t x, Double_t y); TGeoCombiTransClass describing rotation + translation.Definition TGeoMatrix.h:317; TGeoManagerThe manager class for any TGeo geometry.Definition TGeoManager.h:44; TGeoManager::TGeoManagerTGeoManager()Default constructor.Definition TGeoManager.cxx:311; TGeoManager::MakeArb8TGeoVolume * MakeArb8(const char *name, TGeoMedium *medium, Double_t dz, Double_t *vertices=nullptr)Make an TGeoArb8 volume.Definition TGeoManager.cxx:3161; TGeoManager::SetVisLevelvoid SetVisLevel(Int_t level=3)set default level down to which visualization is performedDefinition TGeoManager.cxx:2459; TGeoManager::CloseGeometryvoid CloseGeometry(Option_t *option=""d"")Closing geometry implies checking the geometry validity, fixing shapes with negative parameters (run-...Definition TGeoManager.cxx:1480; TGeoManager::MakeBoxTGeoVolume * MakeBox(const char *name, TGeoMedium *medium, Double_t dx, Double_t dy, Double_t dz)Make in one step a volume pointing to a box shape with given medium.Definition TGeoManager.cxx:3169; TGeoManager::SetTopVolumevoid SetTopVolume(TGeoVolume *vol)Set the top volume and corresponding node as starting point of the geometry.Definition TGeoManager.cxx:3655; TGeoManager::MakeTubsTGeoVolume * MakeTubs(const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2)Make in one step a volume pointing to a tube segment shape with given medium.Definition TGeoManager.cxx:3213; TGeoMaterialBase class describing materials.Definition TGeoMateri",MatchSource.WIKI,doc/master/classTGeoManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoManager.html
Safety,detect,detector,". ROOT: TGeoManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TGeoManager Class ReferenceThe Geometry Package » Geometry classes. ; The manager class for any TGeo geometry. ; Provides user interface for geometry creation, navigation, state querying, visualization, IO, geometry checking and other utilities. General architecture; The ROOT geometry package is a tool designed for building, browsing, tracking and visualizing a detector geometry. The code is independent from other external MC for simulation, therefore it does not contain any constraints related to physics. However, the package defines a number of hooks for tracking, such as media, materials, magnetic field or track state flags, in order to allow interfacing to tracking MC's. The final goal is to be able to use the same geometry for several purposes, such as tracking, reconstruction or visualization, taking advantage of the ROOT features related to bookkeeping, I/O, histogramming, browsing and GUI's.; The geometrical modeler is the most important component of the package and it provides answers to the basic questions like ""Where am I ?"" or ""How far; from the next boundary ?"", but also to more complex ones like ""How far from; the closest surface ?"" or ""Which is the next crossing along a helix ?"".; The architecture of the modeler is a combination between a GEANT-like containment scheme and a normal CSG binary tree at the level of shapes. An important common feature of all detector geometry descriptions is the mother-daughter concept. This is the most natural approach when tracking is concerned and imposes a set of constraints to the way geometry is defined. Constructive solid geom",MatchSource.WIKI,doc/master/classTGeoManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoManager.html
Security,access,accessible,"me, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TGeoVolume::SetVisibilityvoid SetVisibility(Bool_t vis=kTRUE) overrideset visibility of this volumeDefinition TGeoVolume.cxx:2347; TGeoVolume::AddNodevirtual TGeoNode * AddNode(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""")Add a TGeoNode to the list of nodes.Definition TGeoVolume.cxx:975; TGeoVolume::Drawvoid Draw(Option_t *option="""") overridedraw top volume according to optionDefinition TGeoVolume.cxx:1206; TGeoVolume::SetLineColorvoid SetLineColor(Color_t lcolor) overrideSet the line color.Definition TGeoVolume.cxx:2169; TGeoVolume::GetShapeTGeoShape * GetShape() constDefinition TGeoVolume.h:190; double; rootgeomTGeoNode * rootgeom()Definition eveGeoBrowser.C:47; End_Macro. TGeoManager - the manager class for the geometry package.; TGeoManager class is embedding all the API needed for building and tracking a geometry. It defines a global pointer (gGeoManager) in order to be fully accessible from external code. The mechanism of handling multiple geometries at the same time will be soon implemented.; TGeoManager is the owner of all geometry objects defined in a session, therefore users must not try to control their deletion. It contains lists of media, materials, transformations, shapes and volumes. Logical nodes (positioned volumes) are created and destroyed by the TGeoVolume class. Physical nodes and their global transformations are subjected to a caching mechanism due to the sometimes very large memory requirements of logical graph expansion. The caching mechanism is triggered by the total number of physical instances of volumes and the cache manager is a client of TGeoManager. The manager class also controls the painter client. This is linked with ROOT graphical libraries loaded on demand in order to control visualization actions. Rules for building a valid geometry; A given geometry can be built in various ways, but there are mandatory steps",MatchSource.WIKI,doc/master/classTGeoManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoManager.html
Testability,log,logical,"ckage and it provides answers to the basic questions like ""Where am I ?"" or ""How far; from the next boundary ?"", but also to more complex ones like ""How far from; the closest surface ?"" or ""Which is the next crossing along a helix ?"".; The architecture of the modeler is a combination between a GEANT-like containment scheme and a normal CSG binary tree at the level of shapes. An important common feature of all detector geometry descriptions is the mother-daughter concept. This is the most natural approach when tracking is concerned and imposes a set of constraints to the way geometry is defined. Constructive solid geometry composition is used only in order to create more complex shapes from an existing set of primitives through boolean operations. This feature is not implemented yet but in future full definition of boolean expressions will be supported.; Practically every geometry defined in GEANT style can be mapped by the modeler. The basic components used for building the logical hierarchy of the geometry are called ""volumes"" and ""nodes"". Volumes (sometimes called ""solids"") are fully defined geometrical objects having a given shape and medium and possibly containing a list of nodes. Nodes represent just positioned instances of volumes inside a container volume and they are not directly defined by user. They are automatically created as a result of adding one volume inside other or dividing a volume. The geometrical transformation hold by nodes is always defined with respect to their mother (relative positioning). Reflection matrices are allowed. All volumes have to be fully aware of their containees when the geometry is closed. They will build additional structures (voxels) in order to fasten-up the search algorithms. Finally, nodes can be regarded as bidirectional links between containers and containees objects.; The structure defined in this way is a graph structure since volumes are replicable (same volume can become daughter node of several other volumes), ever",MatchSource.WIKI,doc/master/classTGeoManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoManager.html
Usability,simpl,simple,"ive shapes supported by the package are basically the GEANT3 shapes (see class TGeoShape), arbitrary wedges with eight vertices on two parallel planes. All basic primitives inherits from class TGeoBBox since the bounding box of a solid is essential for the tracking algorithms. They also implement the virtual methods defined in the virtual class TGeoShape (point and segment classification). User-defined primitives can be directly plugged into the modeler provided that they override these methods. Composite shapes will be soon supported by the modeler. In order to build a TGeoCompositeShape, one will have to define first the primitive components. The object that handle boolean operations among components is called TGeoBoolCombinator and it has to be constructed providing a string boolean expression between the components names. Example for building a simple geometry; ; void rootgeom(bool vis = true); {; // gStyle->SetCanvasPreferGL(true);; ; TGeoManager *geom = new TGeoManager(""simple1"", ""Simple geometry"");; ; //--- define some materials; TGeoMaterial *matVacuum = new TGeoMaterial(""Vacuum"", 0,0,0);; TGeoMaterial *matAl = new TGeoMaterial(""Al"", 26.98,13,2.7);; // //--- define some media; TGeoMedium *Vacuum = new TGeoMedium(""Vacuum"",1, matVacuum);; TGeoMedium *Al = new TGeoMedium(""Root Material"",2, matAl);; ; //--- define the transformations; TGeoTranslation *tr1 = new TGeoTranslation(20., 0, 0.);; TGeoTranslation *tr2 = new TGeoTranslation(10., 0., 0.);; TGeoTranslation *tr3 = new TGeoTranslation(10., 20., 0.);; TGeoTranslation *tr4 = new TGeoTranslation(5., 10., 0.);; TGeoTranslation *tr5 = new TGeoTranslation(20., 0., 0.);; TGeoTranslation *tr6 = new TGeoTranslation(-5., 0., 0.);; TGeoTranslation *tr7 = new TGeoTranslation(7.5, 7.5, 0.);; TGeoRotation *rot1 = new TGeoRotation(""rot1"", 90., 0., 90., 270., 0., 0.);; TGeoCombiTrans *combi1 = new TGeoCombiTrans(7.5, -7.5, 0., rot1);; TGeoTranslation *tr8 = new TGeoTranslation(7.5, -5., 0.);; TGeoTranslation *tr9 = new TGe",MatchSource.WIKI,doc/master/classTGeoManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoManager.html
Availability,error,error,"="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetO",MatchSource.WIKI,doc/master/classTGeoManagerEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoManagerEditor.html
Integrability,depend,depending,"enceThe Geometry Package » Geometry builder. ; Editor for TGeoManager class. ; Provides also builder functionality for the main TGeo objects: TGeoVolume, TGeoShape - derived classes, TGeoMaterial, TGeoMatrix - derived transformations and TGeoMedium. The GUI represents the main entry point for editing geometry classes. It can be started either by:. TGeoManager::Edit(). The method must be used when starting from a new geometry.; Left-click on the 40x40 pixels top-right corner of a pad containing a drawn volume. The region is always accesible when drawing geometry elements and allows also restoring the manager editor in the ""Style"" tab of the GED editor anytime. The TGeoManager editor is vertically split by a TGShutter widget into the following categories:. General. This allows changing the name/title of the geometry, setting the top volume, closing the geometry and saving the geometry in a file. The name of the geometry file is formed by geometry_name.C/.root depending if the geometry need to be saved as a C macro or a .root file.; Shapes. The category provide buttons for creation of all supported shapes. The new shape name is chosen by the interface, but can be changed from the shape editor GUI. Existing shapes can be browsed and edited from the same category.; Volumes. The category allows the creation of a new volume having a given name, shape and medium. For creating a volume assembly only the name is relevant. Existing volumes can be browsed or edited from this category.; Materials. Allows creation of new materials/mixtures or editing existing ones.; Media. The same for creation/editing of tracking media (materials having a set of properties related to tracking); Matrices. Allows creation of translations, rotations or combined transformations. Existing matrices can also be browser/edited. . Definition at line 36 of file TGeoManagerEditor.h. Public Member Functions;  TGeoManagerEditor (const TGWindow *p=nullptr, Int_t width=140, Int_t height=30, UInt_t options=kChil",MatchSource.WIKI,doc/master/classTGeoManagerEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoManagerEditor.html
Modifiability,inherit,inherited,"aterial. ;  ; void DoSelectMaterial2 ();  Slot for selecting an existing material and making a medium. ;  ; void DoSelectMatrix ();  Slot for selecting an existing matrix. ;  ; void DoSelectMedium ();  Slot for selecting an existing medium. ;  ; void DoSelectMedium2 ();  Slot for selecting an existing medium for making a volume. ;  ; void DoSelectShape ();  Slot for selecting an existing shape. ;  ; void DoSelectShape2 ();  Slot for selecting a shape for making a volume. ;  ; void DoSelectTopVolume ();  Slot for setting top geometry volume. ;  ; void DoSelectVolume ();  Slot for selecting an existing volume. ;  ; void DoSetTopVolume ();  Set top volume for the geometry. ;  ; virtual void SelectedSlot (TVirtualPad *pad, TObject *obj, Int_t event);  Connected to TCanvas::Selected. ;  ; void SetModel (TObject *obj) override;  Refresh editor according the selected obj. ;  ;  Public Member Functions inherited from TGedFrame;  TGedFrame (const TGWindow *p=nullptr, Int_t width=140, Int_t height=30, UInt_t options=kChildFrame, Pixel_t back=GetDefaultFrameBackground());  Constructor of the base GUI attribute frame. ;  ;  ~TGedFrame () override;  Destructor of the base GUI attribute frame. ;  ; virtual Bool_t AcceptModel (TObject *);  ; virtual void ActivateBaseClassEditors (TClass *cl);  Provide list of editors for base-classes. ;  ; virtual void AddExtraTab (TGedSubFrame *sf);  Adds tab container to list of extra tabs. ;  ;  ClassDefOverride (TGedFrame, 0);  ; virtual TGVerticalFrame * CreateEditorTabSubFrame (const char *name);  Create a vertical frame to be used by 'owner' in extra tab 'name'. ;  ; Option_t * GetDrawOption () const override;  Get draw options of the selected object. ;  ; TList * GetExtraTabs ();  ; TGedEditor * GetGedEditor ();  ; TClass * GetModelClass ();  ; Int_t GetPriority ();  ; virtual void Refresh (TObject *model);  Refresh the GUI info about the object attributes. ;  ; void SetDrawOption (Option_t *option="""") override;  Set drawing option for obj",MatchSource.WIKI,doc/master/classTGeoManagerEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoManagerEditor.html
Performance,load,load,"nal with single parameter. ;  ; template<typename... T> ; void EmitVA (const char *signal_name, Int_t, const T &... params);  Emit a signal with a varying number of arguments. ;  ; TList * GetListOfClassSignals () const;  Returns pointer to list of signals of this class. ;  ; TList * GetListOfConnections () const;  ; TList * GetListOfSignals () const;  ; virtual Bool_t HasConnection (const char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static void LoadLib ();  Dummy static function, used to load plugin. ;  ;  Static Public Member Functions inherited from TGCompositeFrame; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGFrame; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static const TGGC & GetBckgndGC ();  Get background color graphics context. ;  ; static const TGGC & GetBlackGC ();  Get black graphics context. ;  ; static Pixel_t GetBlackPixel ();  Get black pixel value. ;  ; static Pixel_t GetDefaultFrameBackground ();  Get default frame background. ;  ; static Pixel_t GetDefaultSelectedBackground ();  Get default selected frame background. ;  ; static const TGGC & GetHilightGC ();  Get highlight color graphics context. ;  ; static const TGGC & GetShadowGC ();  Get shado",MatchSource.WIKI,doc/master/classTGeoManagerEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoManagerEditor.html
Security,hash,hash,"n response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; TClass * IsA () const override;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGeoManagerEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoManagerEditor.html
Availability,error,error,"nst TObject *obj) const overrideTNamedvirtual; TNamed::Copy(TObject &named) const overrideTNamedvirtual; TAttFill::Copy(TAttFill &attfill) constTAttFill; Coulomb(Double_t z)TGeoMaterialstatic; DecayMaterial(Double_t time, Double_t precision=0.001)TGeoMaterialvirtual; DeclFileName()TGeoMaterialinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EGeoMaterial enum nameTGeoMaterial; EGeoMaterialState enum nameTGeoMaterial; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; fATGeoMaterialprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fCerenkovTGeoMaterialprotected; fConstPropertiesTGeoMaterialprotected; fDensityTGeoMaterialprotected; fElementTGeoMaterialprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFWExtensionTGeoMaterialprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FillBuffer(char *&buffer)TNamedvirtual; FillMaterialEvolution(TObjArray *population, Double_t precision=0.001)TGeoMaterialvirtual; fIndexTGeoMaterialprotected; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fIntLenTGeoMaterialprotected; fNameTNamedprotected; fPressureTGeoMaterialprotected; fPropertiesTGeoMaterialprotected; fRadLenTGeoMaterialprotected; fShaderTGeoMaterialprotected; fStateTGeoMaterialprotected; fTemperatureTGeoMa",MatchSource.WIKI,doc/master/classTGeoMaterial-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMaterial-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TGeoMaterial Member List. This is the complete list of members for TGeoMaterial, including all inherited members. AbstractMethod(const char *method) constTObject; AddConstProperty(const char *property, const char *ref)TGeoMaterial; AddProperty(const char *property, const char *ref)TGeoMaterial; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Class()TGeoMaterialstatic; Class_Name()TGeoMaterialstatic; Class_Version()TGeoMaterialinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; TNamed::Copy(TObject &named) const overrideTNamedvirtual; TAttFill::Copy(TAttFill &attfill) constTAttFill; Coulomb(Double_t z)TGeoMaterialstatic; DecayMaterial(Double_t time, Double_t precision=0.001)TGeoMaterialvirtual; DeclFileName()TGeoMaterialinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EGeoMaterial enum nameTGeoMaterial; EGeoMaterialState enum nameTGeoMaterial; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; fATGeoMaterialprotected; Fatal(const char *method, const char *msgfmt,...) constTObject",MatchSource.WIKI,doc/master/classTGeoMaterial-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMaterial-members.html
Availability,error,error,"essure=STP_pressure);  Constructor with state, temperature and pressure. ;  ;  TGeoMaterial (const char *name, TGeoElement *elem, Double_t rho);  Constructor. ;  ;  ~TGeoMaterial () override;  Destructor. ;  ; bool AddConstProperty (const char *property, const char *ref);  ; bool AddProperty (const char *property, const char *ref);  ; virtual TGeoMaterial * DecayMaterial (Double_t time, Double_t precision=0.001);  Create the material representing the decay product of this material at a given time. ;  ; virtual void FillMaterialEvolution (TObjArray *population, Double_t precision=0.001);  Fills a user array with all the elements deriving from the possible decay of the top element composing the mixture. ;  ; virtual Double_t GetA () const;  ; TGeoElement * GetBaseElement () const;  ; virtual Int_t GetByteCount () const;  ; virtual TObject * GetCerenkovProperties () const;  ; TList const & GetConstProperties () const;  ; Double_t GetConstProperty (const char *property, Bool_t *error=nullptr) const;  ; Double_t GetConstProperty (Int_t i, Bool_t *error=nullptr) const;  ; const char * GetConstPropertyRef (const char *property) const;  ; const char * GetConstPropertyRef (Int_t i) const;  ; virtual Int_t GetDefaultColor () const;  Get some default color related to this material. ;  ; virtual Double_t GetDensity () const;  ; TGeoElement * GetElement () const;  Get a pointer to the element this material is made of. ;  ; virtual TGeoElement * GetElement (Int_t i) const;  Get a pointer to the element this material is made of. ;  ; virtual void GetElementProp (Double_t &a, Double_t &z, Double_t &w, Int_t i=0);  Single interface to get element properties. ;  ; TGeoExtension * GetFWExtension () const;  ; Int_t GetIndex ();  Retrieve material index in the list of materials. ;  ; virtual Double_t GetIntLen () const;  ; Int_t GetNconstProperties () const;  ; virtual Int_t GetNelements () const;  ; Int_t GetNproperties () const;  ; const char * GetPointerName () const;  Provide a point",MatchSource.WIKI,doc/master/classTGeoMaterial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMaterial.html
Deployability,release,released,"inition at line 594 of file TGeoMaterial.cxx. ◆ ScreenFactor(). Double_t TGeoMaterial::ScreenFactor ; (; Double_t ; z). static . static function Compute screening factor for pair production and Bremsstrahlung REFERENCE : EGS MANUAL SLAC 210 - UC32 - JUNE 78 FORMULA 2.7.22 ; Definition at line 1343 of file TGeoMaterial.cxx. ◆ SetA(). virtual void TGeoMaterial::SetA ; (; Double_t ; a). inlinevirtual . Reimplemented in TGeoMixture.; Definition at line 127 of file TGeoMaterial.h. ◆ SetCerenkovProperties(). virtual void TGeoMaterial::SetCerenkovProperties ; (; TObject * ; cerenkov). inlinevirtual . Definition at line 143 of file TGeoMaterial.h. ◆ SetDensity(). virtual void TGeoMaterial::SetDensity ; (; Double_t ; density). inlinevirtual . Reimplemented in TGeoMixture.; Definition at line 137 of file TGeoMaterial.h. ◆ SetFWExtension(). void TGeoMaterial::SetFWExtension ; (; TGeoExtension * ; ext). Connect framework defined extension to the material. ; The material ""grabs"" a copy, so the original object can be released by the producer. Release the previously connected extension if any.; NOTE: This interface is intended for the use by TGeo and the users should NOT connect extensions using this method ; Definition at line 449 of file TGeoMaterial.cxx. ◆ SetIndex(). void TGeoMaterial::SetIndex ; (; Int_t ; index). inline . Definition at line 142 of file TGeoMaterial.h. ◆ SetPressure(). void TGeoMaterial::SetPressure ; (; Double_t ; pressure). inline . Definition at line 148 of file TGeoMaterial.h. ◆ SetRadLen(). void TGeoMaterial::SetRadLen ; (; Double_t ; radlen, . Double_t ; intlen = 0. . ). Set radiation/absorption lengths. ; If the values are negative, their absolute value is taken, otherwise radlen is recomputed using G3 formula. ; Definition at line 496 of file TGeoMaterial.cxx. ◆ SetState(). void TGeoMaterial::SetState ; (; EGeoMaterialState ; state). inline . Definition at line 149 of file TGeoMaterial.h. ◆ SetTemperature(). void TGeoMaterial::SetTemperature ; (; Doubl",MatchSource.WIKI,doc/master/classTGeoMaterial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMaterial.html
Integrability,interface,interface,"ser array with all the elements deriving from the possible decay of the top element composing the mixture. ;  ; virtual Double_t GetA () const;  ; TGeoElement * GetBaseElement () const;  ; virtual Int_t GetByteCount () const;  ; virtual TObject * GetCerenkovProperties () const;  ; TList const & GetConstProperties () const;  ; Double_t GetConstProperty (const char *property, Bool_t *error=nullptr) const;  ; Double_t GetConstProperty (Int_t i, Bool_t *error=nullptr) const;  ; const char * GetConstPropertyRef (const char *property) const;  ; const char * GetConstPropertyRef (Int_t i) const;  ; virtual Int_t GetDefaultColor () const;  Get some default color related to this material. ;  ; virtual Double_t GetDensity () const;  ; TGeoElement * GetElement () const;  Get a pointer to the element this material is made of. ;  ; virtual TGeoElement * GetElement (Int_t i) const;  Get a pointer to the element this material is made of. ;  ; virtual void GetElementProp (Double_t &a, Double_t &z, Double_t &w, Int_t i=0);  Single interface to get element properties. ;  ; TGeoExtension * GetFWExtension () const;  ; Int_t GetIndex ();  Retrieve material index in the list of materials. ;  ; virtual Double_t GetIntLen () const;  ; Int_t GetNconstProperties () const;  ; virtual Int_t GetNelements () const;  ; Int_t GetNproperties () const;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; Double_t GetPressure () const;  ; TList const & GetProperties () const;  ; TGDMLMatrix * GetProperty (const char *name) const;  ; TGDMLMatrix * GetProperty (Int_t i) const;  ; const char * GetPropertyRef (const char *property) const;  ; const char * GetPropertyRef (Int_t i) const;  ; virtual Double_t GetRadLen () const;  ; virtual Double_t GetSpecificActivity (Int_t) const;  ; EGeoMaterialState GetState () const;  ; Double_t GetTemperature () const;  ; Char_t GetTransparency () const;  ; TGeoExtension * GetUserExtension () const;  ; virtual Double_t GetZ () const;  ; ",MatchSource.WIKI,doc/master/classTGeoMaterial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMaterial.html
Modifiability,inherit,inherited,"memory values an order of magnitude lower. This behavior affected versions up to v6-25-01, after which the default units were restored to be the ROOT ones.; For users needing to restore the CGS behavior for material properties, the following sequence needs to be called before creating the TGeoManager instance: From v6-18-02 to v6-22-06: TGeoUnit::setUnitType(TGeoUnit::kTGeoUnits);; From v6-22-08 to v6-25-01: TGeoManager::LockDefaultUnits(false);; TGeoManager::SetDefaultUnits(kRootUnits);; TGeoManager::LockDefaultUnits(true);; TGeoManager::SetDefaultUnitsstatic void SetDefaultUnits(EDefaultUnits new_value)Definition TGeoManager.cxx:4319; TGeoManager::LockDefaultUnitsstatic Bool_t LockDefaultUnits(Bool_t new_value)Definition TGeoManager.cxx:4307. Definition at line 34 of file TGeoMaterial.h. Public Types; enum  EGeoMaterial { kMatUsed = (1ULL << ( 17 )); , kMatSavePrimitive = (1ULL << ( 18 )); };  ; enum  EGeoMaterialState { kMatStateUndefined; , kMatStateSolid; , kMatStateLiquid; , kMatStateGas; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoMaterial ();  Default constructor. ;  ;  TGeoMaterial (const char *name);  Constructor. ;  ;  TGeoMaterial (const char *name, Double_t a, Double_t z, Double_t rho, Double_t radlen=0, Double_t intlen=0);  Constructor. ;  ;  TGeoMaterial (const char *name, Double_t a, Double_t z, Double_t rho, EGeoMaterialState state",MatchSource.WIKI,doc/master/classTGeoMaterial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMaterial.html
Safety,avoid,avoid,"operty() [2/2]. Double_t TGeoMaterial::GetConstProperty ; (; Int_t ; i, . Bool_t * ; error = nullptr . ); const. Definition at line 405 of file TGeoMaterial.cxx. ◆ GetConstPropertyRef() [1/2]. const char * TGeoMaterial::GetConstPropertyRef ; (; const char * ; property); const. Definition at line 384 of file TGeoMaterial.cxx. ◆ GetConstPropertyRef() [2/2]. const char * TGeoMaterial::GetConstPropertyRef ; (; Int_t ; i); const. inline . Definition at line 90 of file TGeoMaterial.h. ◆ GetDefaultColor(). Int_t TGeoMaterial::GetDefaultColor ; (; ); const. virtual . Get some default color related to this material. ; Definition at line 614 of file TGeoMaterial.cxx. ◆ GetDensity(). virtual Double_t TGeoMaterial::GetDensity ; (; ); const. inlinevirtual . Definition at line 102 of file TGeoMaterial.h. ◆ GetElement() [1/2]. TGeoElement * TGeoMaterial::GetElement ; (; ); const. Get a pointer to the element this material is made of. ; This second call is to avoid warnings to not call a virtual method from the constructor ; Definition at line 625 of file TGeoMaterial.cxx. ◆ GetElement() [2/2]. TGeoElement * TGeoMaterial::GetElement ; (; Int_t ; i); const. virtual . Get a pointer to the element this material is made of. ; Reimplemented in TGeoMixture.; Definition at line 636 of file TGeoMaterial.cxx. ◆ GetElementProp(). void TGeoMaterial::GetElementProp ; (; Double_t & ; a, . Double_t & ; z, . Double_t & ; w, . Int_t ; i = 0 . ). virtual . Single interface to get element properties. ; Reimplemented in TGeoMixture.; Definition at line 647 of file TGeoMaterial.cxx. ◆ GetFWExtension(). TGeoExtension * TGeoMaterial::GetFWExtension ; (; ); const. inline . Definition at line 119 of file TGeoMaterial.h. ◆ GetIndex(). Int_t TGeoMaterial::GetIndex ; (; ). Retrieve material index in the list of materials. ; Definition at line 657 of file TGeoMaterial.cxx. ◆ GetIntLen(). virtual Double_t TGeoMaterial::GetIntLen ; (; ); const. inlinevirtual . Definition at line 110 of file TGeoMaterial.h. ◆ Get",MatchSource.WIKI,doc/master/classTGeoMaterial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMaterial.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoMaterial.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMaterial.html
Availability,error,error,"id Subtract(const TGeoTranslation *other)Subtracting a translation from this one.Definition TGeoMatrix.cxx:742; Rotations; Represent a pure rotation. Data members: Double_t fRotationMatrix[3*3]. Rotations can be defined either by Euler angles, either, by GEANT3 angles :; TGeoRotation *r1 = new TGeoRotation();; r1->SetAngles(phi, theta, psi); // all angles in degrees; This represent the composition of : first a rotation about Z axis with angle phi, then a rotation with theta about the rotated X axis, and finally a rotation with psi about the new Z axis.; r1->SetAngles(th1,phi1, th2,phi2, th3,phi3); th3auto * th3Definition textalign.C:22; th2auto * th2Definition textalign.C:18; th1auto * th1Definition textalign.C:14; This is a rotation defined in GEANT3 style. Theta and phi are the spherical angles of each axis of the rotated coordinate system with respect to the initial one. This construction allows definition of malformed rotations, e.g. not orthogonal. A check is performed and an error message is issued in this case.; Specific utilities : determinant, inverse.; Scale transformations; Represent a scale shrinking/enlargement. Data members :Double_t fScale[3]. Not fully implemented yet.; Combined transformations; Represent a rotation followed by a translation. Data members: Double_t fTranslation[3], TGeoRotation *fRotation.; TGeoRotation *rot = new TGeoRotation(""rot"",10,20,30);; TGeoTranslation trans;; ...; TGeoCombiTrans *c1 = new TGeoCombiTrans(trans, rot);; TGeoCombiTrans *c2 = new TGeoCombiTrans(""somename"",10,20,30,rot); TGeoGenTrans; Combined transformations including a scale. Not implemented.; TGeoIdentity; A generic singleton matrix representing a identity transformation NOTE: identified by the global variable gGeoIdentity. ; Definition at line 38 of file TGeoMatrix.h. Public Types; enum  EGeoTransfTypes { ;   kGeoIdentity = 0; , kGeoShared = (1ULL << ( 14 )); , kGeoTranslation = (1ULL << ( 17 )); , kGeoRotation = (1ULL << ( 18 )); , ;   kGeoScale = (1ULL << ( ",MatchSource.WIKI,doc/master/classTGeoMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMatrix.html
Integrability,interface,interface,"0 1/sy 0 0; 0 0 sz 0 0 0 1/sz 0; 0 0 0 1 0 0 0 1; where:; rij are the 3x3 rotation matrix components,; tx, ty, tz are the translation components; sx, sy, sz are arbitrary scale constants on each axis,. The disadvantage in using this approach is that computation for 4x4 matrices is expensive. Even combining two translation would become a multiplication of their corresponding matrices, which is quite an undesired effect. On the other hand, it is not a good idea to store a translation as a block of 16 numbers. We have therefore chosen to implement each basic transformation type as a class deriving from the same basic abstract class and handling its specific data and point/vector transformation algorithms. The base class TGeoMatrix defines abstract metods for:; translation, rotation and scale getters. Every derived class stores only; its specific data, e.g. a translation stores an array of 3 doubles and a rotation an array of 9. However, asking which is the rotation array of a TGeoTranslation through the base TGeoMatrix interface is a legal operation. The answer in this case is a pointer to a global constant array representing an identity rotation.; Double_t *TGeoMatrix::GetTranslation(); Double_t *TGeoMatrix::GetRotation(); Double_t *TGeoMatrix::GetScale(); TGeoMatrixGeometrical transformation package.Definition TGeoMatrix.h:38; TGeoMatrix::GetTranslationvirtual const Double_t * GetTranslation() const =0; TGeoMatrix::GetScalevirtual const Double_t * GetScale() const =0; double; MasterToLocal() and LocalToMaster() point and vector transformations :; void TGeoMatrix::MasterToLocal(const Double_t *master, Double_t *local); void TGeoMatrix::LocalToMaster(const Double_t *local, Double_t *master); void TGeoMatrix::MasterToLocalVect(const Double_t *master, Double_t *local); void TGeoMatrix::LocalToMasterVect(const Double_t *local, Double_t *master); TGeoMatrix::LocalToMasterVectvirtual void LocalToMasterVect(const Double_t *local, Double_t *master) constconvert a vector by mul",MatchSource.WIKI,doc/master/classTGeoMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMatrix.html
Modifiability,variab,variable,"to * th1Definition textalign.C:14; This is a rotation defined in GEANT3 style. Theta and phi are the spherical angles of each axis of the rotated coordinate system with respect to the initial one. This construction allows definition of malformed rotations, e.g. not orthogonal. A check is performed and an error message is issued in this case.; Specific utilities : determinant, inverse.; Scale transformations; Represent a scale shrinking/enlargement. Data members :Double_t fScale[3]. Not fully implemented yet.; Combined transformations; Represent a rotation followed by a translation. Data members: Double_t fTranslation[3], TGeoRotation *fRotation.; TGeoRotation *rot = new TGeoRotation(""rot"",10,20,30);; TGeoTranslation trans;; ...; TGeoCombiTrans *c1 = new TGeoCombiTrans(trans, rot);; TGeoCombiTrans *c2 = new TGeoCombiTrans(""somename"",10,20,30,rot); TGeoGenTrans; Combined transformations including a scale. Not implemented.; TGeoIdentity; A generic singleton matrix representing a identity transformation NOTE: identified by the global variable gGeoIdentity. ; Definition at line 38 of file TGeoMatrix.h. Public Types; enum  EGeoTransfTypes { ;   kGeoIdentity = 0; , kGeoShared = (1ULL << ( 14 )); , kGeoTranslation = (1ULL << ( 17 )); , kGeoRotation = (1ULL << ( 18 )); , ;   kGeoScale = (1ULL << ( 19 )); , kGeoReflection = (1ULL << ( 20 )); , kGeoRegistered = (1ULL << ( 21 )); , kGeoSavePrimitive = (1ULL << ( 22 )); , ;   kGeoMatrixOwned = (1ULL << ( 23 )); , kGeoCombiTrans = kGeoTranslation | kGeoRotation; , kGeoGenTrans = kGeoTranslation | kGeoRotation | kGeoScale; , kGeoMatrixBits = kGeoShared | kGeoGenTrans | kGeoReflection | kGeoRegistered | kGeoSavePrimitive | kGeoMatrixOwned. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )",MatchSource.WIKI,doc/master/classTGeoMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMatrix.html
Performance,optimiz,optimize,". ROOT: TGeoMatrix Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TGeoMatrix Class ReferenceabstractThe Geometry Package » Geometry classes. ; Geometrical transformation package. ; All geometrical transformations handled by the modeller are provided as a built-in package. This was designed to minimize memory requirements and optimize performance of point/vector master-to-local and local-to-master computation. We need to have in mind that a transformation in TGeo has 2 major use-cases. The first one is for defining the placement of a volume with respect to its container reference frame. This frame will be called 'master' and the frame of the positioned volume - 'local'. If T is a transformation used for positioning volume daughters, then:; MASTER = T * LOCAL; Therefore a local-to-master conversion will be performed by using T, while a master-to-local by using its inverse. The second use case is the computation of the global transformation of a given object in the geometry. Since the geometry is built as 'volumes-inside-volumes', this global transformation represent the pile-up of all local transformations in the corresponding branch. The conversion from the global reference frame and the given object is also called master-to-local, but it is handled by the manager class. A general homogenous transformation is defined as a 4x4 matrix embedding a rotation, a translation and a scale. The advantage of this description is that each basic transformation can be represented as a homogenous matrix, composition being performed as simple matrix multiplication.; Rotation: Inverse rotation:; r11 r12 r13 0 r11 r21 r31 0; r21 r22 r23 0 r12 r22 r32 0; r31 r32 r33 0 r13 r23 r33 0; 0 0 0 1 0 0 0 1; Translation: Inverse translation:; 1 0 0 tx 1 0 0 -tx; 0 1 0 ty 0 1 0 -ty; 0 0 1 tz 0 0 1",MatchSource.WIKI,doc/master/classTGeoMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMatrix.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMatrix.html
Usability,simpl,simple,". The first one is for defining the placement of a volume with respect to its container reference frame. This frame will be called 'master' and the frame of the positioned volume - 'local'. If T is a transformation used for positioning volume daughters, then:; MASTER = T * LOCAL; Therefore a local-to-master conversion will be performed by using T, while a master-to-local by using its inverse. The second use case is the computation of the global transformation of a given object in the geometry. Since the geometry is built as 'volumes-inside-volumes', this global transformation represent the pile-up of all local transformations in the corresponding branch. The conversion from the global reference frame and the given object is also called master-to-local, but it is handled by the manager class. A general homogenous transformation is defined as a 4x4 matrix embedding a rotation, a translation and a scale. The advantage of this description is that each basic transformation can be represented as a homogenous matrix, composition being performed as simple matrix multiplication.; Rotation: Inverse rotation:; r11 r12 r13 0 r11 r21 r31 0; r21 r22 r23 0 r12 r22 r32 0; r31 r32 r33 0 r13 r23 r33 0; 0 0 0 1 0 0 0 1; Translation: Inverse translation:; 1 0 0 tx 1 0 0 -tx; 0 1 0 ty 0 1 0 -ty; 0 0 1 tz 0 0 1 -tz; 0 0 0 1 0 0 0 1; Scale: Inverse scale:; sx 0 0 0 1/sx 0 0 0; 0 sy 0 0 0 1/sy 0 0; 0 0 sz 0 0 0 1/sz 0; 0 0 0 1 0 0 0 1; where:; rij are the 3x3 rotation matrix components,; tx, ty, tz are the translation components; sx, sy, sz are arbitrary scale constants on each axis,. The disadvantage in using this approach is that computation for 4x4 matrices is expensive. Even combining two translation would become a multiplication of their corresponding matrices, which is quite an undesired effect. On the other hand, it is not a good idea to store a translation as a block of 16 numbers. We have therefore chosen to implement each basic transformation type as a class deriving from the sam",MatchSource.WIKI,doc/master/classTGeoMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMatrix.html
Availability,error,error,"mstatic; Class_Name()TGeoMediumstatic; Class_Version()TGeoMediuminlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TGeoMediuminlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EGeoMedium enum nameTGeoMedium; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fIdTGeoMediumprotected; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fMaterialTGeoMediumprotected; fNameTNamedprotected; fParamsTGeoMediumprotected; fTitleTNamedprotected; fUniqueIDTObjectprivate; GetByteCount() constTGeoMediuminlinevirtual; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetIconName() constTObjectvirtual; GetId() constTGeoMediuminline; GetMaterial() constTGeoMediuminline; GetName() const overrideTNamedinlinevirtual; GetObjectInfo(Int_t px, Int_t py) constTObjectvirtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetParam(Int_t i) constTGeoMediuminline; GetPoint",MatchSource.WIKI,doc/master/classTGeoMedium-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMedium-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TGeoMedium Member List. This is the complete list of members for TGeoMedium, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Class()TGeoMediumstatic; Class_Name()TGeoMediumstatic; Class_Version()TGeoMediuminlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TGeoMediuminlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EGeoMedium enum nameTGeoMedium; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fIdTGeoMediumprotected; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fMaterialTGeoMediumprotected; fNameTNamedprotected; fParamsTGeoMediumprotected; fTitleTNamedprotected; fUniqueIDTObjectpriva",MatchSource.WIKI,doc/master/classTGeoMedium-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMedium-members.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoMedium.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMedium.html
Integrability,interface,interfaces,". ROOT: TGeoMedium Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoMedium Class ReferenceThe Geometry Package » Materials. ; Media are used to store properties related to tracking and which are useful only when using geometry with a particle transport MC package (via VMC). ; One may define several tracking media for a given material. The media ID are user defined values that are not used by the geometry package. In case geometry is used via VMC (in GEANT) these numbers are overwritten, so one can only rely on these values after gMC->FinishGeometry() is called. The media parameters are inspired from GEANT3 and the values defined make sense in context of GEANT (3 but also 4) or FLUKA interfaces. ; Definition at line 23 of file TGeoMedium.h. Public Types; enum  EGeoMedium { kMedSavePrimitive = (1ULL << ( 18 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoMedium ();  Default constructor. ;  ;  TGeoMedium (const char *name, Int_t numed, const TGeoMaterial *mat, Double_t *params=nullptr);  constructor ;  ;  TGeoMedium (const char *name, Int_t numed, Int_t imat, Int_t isvol, Int_t ifield, Double_t fieldm, Double_t tmaxfd, Double_t",MatchSource.WIKI,doc/master/classTGeoMedium.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMedium.html
Modifiability,inherit,inherited,"atches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoMedium Class ReferenceThe Geometry Package » Materials. ; Media are used to store properties related to tracking and which are useful only when using geometry with a particle transport MC package (via VMC). ; One may define several tracking media for a given material. The media ID are user defined values that are not used by the geometry package. In case geometry is used via VMC (in GEANT) these numbers are overwritten, so one can only rely on these values after gMC->FinishGeometry() is called. The media parameters are inspired from GEANT3 and the values defined make sense in context of GEANT (3 but also 4) or FLUKA interfaces. ; Definition at line 23 of file TGeoMedium.h. Public Types; enum  EGeoMedium { kMedSavePrimitive = (1ULL << ( 18 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoMedium ();  Default constructor. ;  ;  TGeoMedium (const char *name, Int_t numed, const TGeoMaterial *mat, Double_t *params=nullptr);  constructor ;  ;  TGeoMedium (const char *name, Int_t numed, Int_t imat, Int_t isvol, Int_t ifield, Double_t fieldm, Double_t tmaxfd, Double_t stemax, Double_t deemax, Double_t epsil, Double_t stmin);  constructor ;  ;  ~TGeoMedium () override;  Dest",MatchSource.WIKI,doc/master/classTGeoMedium.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMedium.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoMedium.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMedium.html
Availability,error,error,"hat you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; ",MatchSource.WIKI,doc/master/classTGeometry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeometry.html
Integrability,message,message,"hat you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; ",MatchSource.WIKI,doc/master/classTGeometry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeometry.html
Modifiability,inherit,inherited,"al void SetMatrix (TRotMatrix *matrix=nullptr);  ; virtual void SetPosition (Double_t x, Double_t y, Double_t z);  ; virtual void SetPosition (Float_t x, Float_t y, Float_t z);  ; virtual void SetPosition (TRotMatrix *matrix, Double_t x=0, Double_t y=0, Double_t z=0);  ; virtual void SetPosition (TRotMatrix *matrix, Float_t x, Float_t y, Float_t z);  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UpdateMatrix (TNode *node);  Update global rotation matrix/translation vector for this node this function must be called before invoking Local2Master. ;  ; virtual void UpdateTempMatrix (Double_t x, Double_t y, Double_t z, Double_t *matrix, Bool_t isReflection=kFALSE);  Update temp matrix. ;  ; virtual void UpdateTempMatrix (Double_t x=0, Double_t y=0, Double_t z=0, TRotMatrix *matrix=nullptr);  Update temp matrix. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,doc/master/classTGeometry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeometry.html
Safety,detect,detector,". ROOT: TGeometry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TGeometry Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; TGeometry description. ; The Geometry class describes the geometry of a detector. The current implementation supports the GEANT3 style description. A special program provided in the ROOT utilities (toroot) can be used to automatically translate a GEANT detector geometry into a ROOT geometry.; a Geometry object is entered into the list of geometries into the ROOT main object (see TROOT description) when the TGeometry constructor is invoked. Several geometries may coexist in memory. / A Geometry object consist of the following linked lists:. the TMaterial list (material definition only).; the TRotmatrix list (Rotation matrices definition only).; the TShape list (volume definition only).; the TNode list assembling all detector elements. Only the Build and Draw functions for a geometry are currently supported.; The conversion program from Geant to Root has been added in the list of utilities in utils directory.(see g2root) The executable module of g2root can be found in $ROOTSYS/bin/g2root.; To use this conversion program, type the shell command:; g2root geant_rzfile macro_name; for example; g2root na49.geom na49.C; will convert the GEANT RZ file na49.geom into a ROOT macro na49.C; To generate the Geometry structure within Root, do:; Root > .x na49.C; Root > na49.Draw(); Root > wh.x3d() (this invokes the 3-d Root viewer); Root > TFile gna49(""na49.root"",""NEW"") //open a new root file; Root > na49.Write() //Write the na49 geometry structure; Root > gna49.Write() //Write all keys (in this case only one); d#define d(i)Definition RSha256.hxx:102; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a f",MatchSource.WIKI,doc/master/classTGeometry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeometry.html
Security,hash,hash,"d UpdateTempMatrix (Double_t x=0, Double_t y=0, Double_t z=0, TRotMatrix *matrix=nullptr);  Update temp matrix. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeometry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeometry.html
Usability,simpl,simply," in the list of utilities in utils directory.(see g2root) The executable module of g2root can be found in $ROOTSYS/bin/g2root.; To use this conversion program, type the shell command:; g2root geant_rzfile macro_name; for example; g2root na49.geom na49.C; will convert the GEANT RZ file na49.geom into a ROOT macro na49.C; To generate the Geometry structure within Root, do:; Root > .x na49.C; Root > na49.Draw(); Root > wh.x3d() (this invokes the 3-d Root viewer); Root > TFile gna49(""na49.root"",""NEW"") //open a new root file; Root > na49.Write() //Write the na49 geometry structure; Root > gna49.Write() //Write all keys (in this case only one); d#define d(i)Definition RSha256.hxx:102; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; Note: all keys are also written on closing of the file, gna49.Close or when the program exits, Root closes all open files correctly. Once this file has been written, in a subsequent session, simply do:; Root > TFile gna49(""na49.root""); Root > na49.Draw(); Drawth1 Draw(); The figure below shows the geometry above using the x3d viewer. This x3d viewer is invoked by selecting ""View x3d"" in the View menu of a canvas (See example of this tool bar in TCanvas). Definition at line 39 of file TGeometry.h. Public Member Functions;  TGeometry ();  Geometry default constructor. ;  ;  TGeometry (const char *name, const char *title);  Geometry normal constructor. ;  ;  ~TGeometry () override;  Geometry default destructor. ;  ; void Browse (TBrowser *b) override;  Browse. ;  ; virtual void cd (const char *path=nullptr);  Change Current Geometry to this. ;  ; void Draw (Option_t *option="""") override;  Draw this Geometry. ;  ; TObject * FindObject (const char *name) const override;  Search object identified by name in the geometry tree. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object in a geometry node, material, etc. ;  ; Int_t GeomLevel () const;  ;",MatchSource.WIKI,doc/master/classTGeometry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeometry.html
Availability,error,error,"r &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoMaterial;  TGeoMaterial ();  Default constructor. ;  ;  TGeoMaterial (const char *name);  Constructor. ;  ;  TGeoMaterial (const char *name, Double_t a, Double_t z, Double_t rho, Double_t radlen=0, Double_t intlen=0);  Constructor. ;  ;  TGeoMaterial (const char *name, Double_t a, Double_t z, Double_t rho, EGeoMaterialState state, Double_t temperature=STP_temperature, Double_t pressure=STP_pressure);  Constructor with state, temperature and pressure. ;  ;  TGeoMaterial (const char *name, TGeoElement *elem, Double_t rho);  Constructor. ;  ;  ~TGeoMaterial () override;  Destructor. ;  ; bool AddConstProperty (const char *property, const char *ref);  ; bool AddProperty (const char *property, const char *ref);  ; virtual Double_t GetA () const;  ; TGeoElement * GetBaseElement () const;  ; virtual TObject * GetCerenkovProperties () const;  ; TList const & GetConstProperties () const;  ; Double_t GetConstProperty (const char *property, Bool_t *error=nullptr) const;  ; Double_t GetConstProperty (Int_t i, Bool_t *error=nullptr) const;  ; const char * GetConstPropertyRef (const char *property) const;  ; const char * GetConstPropertyRef (Int_t i) const;  ; virtual Int_t GetDefaultColor () const;  Get some default color related to this material. ;  ; virtual Double_t GetDensity () const;  ; TGeoElement * GetElement () const;  Get a pointer to the element this material is made of. ;  ; TGeoExtension * GetFWExtension () const;  ; Int_t GetIndex ();  Retrieve material index in the list of materials. ;  ; virtual Double_t GetIntLen () const;  ; Int_t GetNconstProperties () const;  ; Int_t GetNproperties () const;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; Double_t GetPressure () const;  ; TList const & GetProperties () const;  ; TGDMLMatrix * GetProperty (const char *name) const;  ; TGDMLMatrix * GetProperty (Int_t i) const;  ; const char * GetPropertyRef (con",MatchSource.WIKI,doc/master/classTGeoMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMixture.html
Integrability,interface,interface,"onLength ();  Compute Radiation Length based on Geant4 formula. ;  ; TGeoMaterial * DecayMaterial (Double_t time, Double_t precision=0.001) override;  Create the mixture representing the decay product of this material at a given time. ;  ; void DefineElement (Int_t iel, Double_t a, Double_t z, Double_t weight);  ; void DefineElement (Int_t iel, Int_t z, Int_t natoms);  Define the mixture element at index iel by number of atoms in the chemical formula. ;  ; void DefineElement (Int_t iel, TGeoElement *elem, Double_t weight);  ; void FillMaterialEvolution (TObjArray *population, Double_t precision=0.001) override;  Fills a user array with all the elements deriving from the possible decay of the top elements composing the mixture. ;  ; Double_t * GetAmixt () const;  ; Int_t GetByteCount () const override;  ; TGeoElement * GetElement (Int_t i=0) const override;  Retrieve the pointer to the element corresponding to component I. ;  ; void GetElementProp (Double_t &a, Double_t &z, Double_t &w, Int_t i=0) override;  Single interface to get element properties. ;  ; Int_t GetNelements () const override;  ; Int_t * GetNmixt () const;  ; Double_t GetSpecificActivity (Int_t i=-1) const override;  Get specific activity (in Bq/gram) for the whole mixture (no argument) or for a given component. ;  ; Double_t * GetWmixt () const;  ; Double_t * GetZmixt () const;  ; TClass * IsA () const override;  ; Bool_t IsEq (const TGeoMaterial *other) const override;  Return true if the other material has the same physical properties. ;  ; Bool_t IsMixture () const override;  ; void Print (const Option_t *option="""") const override;  print characteristics of this material ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetA (Double_t a) override;  ; void SetDensity (Double_t density) override;  ; void SetZ (Double_t z) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObje",MatchSource.WIKI,doc/master/classTGeoMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMixture.html
Modifiability,inherit,inherited,"ents () const override;  ; Int_t * GetNmixt () const;  ; Double_t GetSpecificActivity (Int_t i=-1) const override;  Get specific activity (in Bq/gram) for the whole mixture (no argument) or for a given component. ;  ; Double_t * GetWmixt () const;  ; Double_t * GetZmixt () const;  ; TClass * IsA () const override;  ; Bool_t IsEq (const TGeoMaterial *other) const override;  Return true if the other material has the same physical properties. ;  ; Bool_t IsMixture () const override;  ; void Print (const Option_t *option="""") const override;  print characteristics of this material ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetA (Double_t a) override;  ; void SetDensity (Double_t density) override;  ; void SetZ (Double_t z) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoMaterial;  TGeoMaterial ();  Default constructor. ;  ;  TGeoMaterial (const char *name);  Constructor. ;  ;  TGeoMaterial (const char *name, Double_t a, Double_t z, Double_t rho, Double_t radlen=0, Double_t intlen=0);  Constructor. ;  ;  TGeoMaterial (const char *name, Double_t a, Double_t z, Double_t rho, EGeoMaterialState state, Double_t temperature=STP_temperature, Double_t pressure=STP_pressure);  Constructor with state, temperature and pressure. ;  ;  TGeoMaterial (const char *name, TGeoElement *elem, Double_t rho);  Constructor. ;  ;  ~TGeoMaterial () override;  Destructor. ;  ; bool AddConstProperty (const char *property, const char *ref);  ; bool AddProperty (const char *property, const char *ref);  ; virtual Double_t GetA () const;  ; TGeoElement * GetBaseElement () const;  ; virtual TObject * GetCerenkovProperties () const;  ; TList const & GetConstProperties () const;  ; Double_t GetConstProperty (const char *property, Bool_t *error=nullptr) ",MatchSource.WIKI,doc/master/classTGeoMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMixture.html
Security,hash,hash,"onnect user-defined extension to the material. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoMixture.html
Availability,down,downwards,"orld safety calls ;  ;  TGeoNavigator (TGeoManager *geom);  Constructor. ;  ;  ~TGeoNavigator () override;  Destructor. ;  ; void BuildCache (Bool_t dummy=kFALSE, Bool_t nodeid=kFALSE);  Builds the cache for physical nodes and global matrices. ;  ; Bool_t cd (const char *path="""");  Browse the tree of nodes starting from top node according to pathname. ;  ; void CdDown (Int_t index);  Make a daughter of current node current. ;  ; void CdDown (TGeoNode *node);  Make a daughter of current node current. ;  ; void CdNext ();  Do a cd to the node found next by FindNextBoundary. ;  ; void CdNode (Int_t nodeid);  Change current path to point to the node having this id. ;  ; void CdTop ();  Make top level node the current node. ;  ; void CdUp ();  Go one level up in geometry. ;  ; Bool_t CheckPath (const char *path) const;  Check if a geometry path is valid without changing the state of the navigator. ;  ; TGeoNode * CrossBoundaryAndLocate (Bool_t downwards, TGeoNode *skipnode);  Cross next boundary and locate within current node The current point must be on the boundary of fCurrentNode. ;  ; void DoBackupState ();  Backup the current state without affecting the cache stack. ;  ; void DoRestoreState ();  Restore a backed-up state without affecting the cache stack. ;  ; TGeoNode * FindNextBoundary (Double_t stepmax=TGeoShape::Big(), const char *path="""", Bool_t frombdr=kFALSE);  Find distance to next boundary and store it in fStep. ;  ; TGeoNode * FindNextBoundaryAndStep (Double_t stepmax=TGeoShape::Big(), Bool_t compsafe=kFALSE);  Compute distance to next boundary within STEPMAX. ;  ; TGeoNode * FindNextDaughterBoundary (Double_t *point, Double_t *dir, Int_t &idaughter, Bool_t compmatrix=kFALSE);  Computes as fStep the distance to next daughter of the current volume. ;  ; TGeoNode * FindNode (Bool_t safe_start=kTRUE);  Returns deepest node containing current point. ;  ; TGeoNode * FindNode (Double_t x, Double_t y, Double_t z);  Returns deepest node containing current point. ;",MatchSource.WIKI,doc/master/classTGeoNavigator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoNavigator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html
Modifiability,inherit,inherited,"t Double_t *dir);  ; void SetCurrentDirection (Double_t nx, Double_t ny, Double_t nz);  ; void SetCurrentPoint (const Double_t *point);  ; void SetCurrentPoint (Double_t x, Double_t y, Double_t z);  ; void SetLastPoint (Double_t x, Double_t y, Double_t z);  ; void SetLastSafetyForPoint (Double_t safe, const Double_t *point);  ; void SetLastSafetyForPoint (Double_t safe, Double_t x, Double_t y, Double_t z);  ; void SetOutside (Bool_t flag=kTRUE);  ; void SetStartSafe (Bool_t flag=kTRUE);  ; void SetStep (Double_t step);  ; TGeoNode * Step (Bool_t is_geom=kTRUE, Bool_t cross=kTRUE);  Make a rectiliniar step of length fStep from current point (fPoint) on current direction (fDirection). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TopToMaster (const Double_t *top, Double_t *master) const;  Convert coordinates from top volume frame to master. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classTGeoNavigator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html
Performance,cache,cache,"XTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TGeoManager::AddNavigatorTGeoNavigator * AddNavigator()Add a navigator in the list of navigators.Definition TGeoManager.cxx:789; TGeoManager::SetCurrentNavigatorBool_t SetCurrentNavigator(Int_t index)Switch to another existing navigator for the calling thread.Definition TGeoManager.cxx:849; TGeoNavigatorClass providing navigation API for TGeo geometries.Definition TGeoNavigator.h:32; TGeoNavigator::TGeoNavigatorTGeoNavigator()global mode is caching enabled for parallel world safety callsDefinition TGeoNavigator.cxx:57; int; .... and then switch back to the default navigator:; gGeoManager->SetCurrentNavigator(0);. Definition at line 32 of file TGeoNavigator.h. Public Member Functions;  TGeoNavigator ();  global mode is caching enabled for parallel world safety calls ;  ;  TGeoNavigator (TGeoManager *geom);  Constructor. ;  ;  ~TGeoNavigator () override;  Destructor. ;  ; void BuildCache (Bool_t dummy=kFALSE, Bool_t nodeid=kFALSE);  Builds the cache for physical nodes and global matrices. ;  ; Bool_t cd (const char *path="""");  Browse the tree of nodes starting from top node according to pathname. ;  ; void CdDown (Int_t index);  Make a daughter of current node current. ;  ; void CdDown (TGeoNode *node);  Make a daughter of current node current. ;  ; void CdNext ();  Do a cd to the node found next by FindNextBoundary. ;  ; void CdNode (Int_t nodeid);  Change current path to point to the node having this id. ;  ; void CdTop ();  Make top level node the current node. ;  ; void CdUp ();  Go one level up in geometry. ;  ; Bool_t CheckPath (const char *path) const;  Check if a geometry path is valid without changing the state of the navigator. ;  ; TGeoNode * CrossBoundaryAndLocate (Bool_t downwards, TGeoNode *skipnode);  Cross next boundary and locate within current node The current point must be on the boundary of fCurrentNode. ;  ; void DoBackupState ();  Backup the current state without affecting the cache sta",MatchSource.WIKI,doc/master/classTGeoNavigator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html
Safety,safe,safety," Private Attributes |; List of all members ; TGeoNavigator Class ReferenceThe Geometry Package » Geometry classes. ; Class providing navigation API for TGeo geometries. ; Several instances are allowed for a single geometry. A default navigator is provided for any geometry but one may add several others for parallel navigation:; TGeoNavigator *navig = new TGeoNavigator(gGeoManager);; Int_t inav = gGeoManager->AddNavigator(navig);; gGeoManager->SetCurrentNavigator(inav);; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; TGeoManager::AddNavigatorTGeoNavigator * AddNavigator()Add a navigator in the list of navigators.Definition TGeoManager.cxx:789; TGeoManager::SetCurrentNavigatorBool_t SetCurrentNavigator(Int_t index)Switch to another existing navigator for the calling thread.Definition TGeoManager.cxx:849; TGeoNavigatorClass providing navigation API for TGeo geometries.Definition TGeoNavigator.h:32; TGeoNavigator::TGeoNavigatorTGeoNavigator()global mode is caching enabled for parallel world safety callsDefinition TGeoNavigator.cxx:57; int; .... and then switch back to the default navigator:; gGeoManager->SetCurrentNavigator(0);. Definition at line 32 of file TGeoNavigator.h. Public Member Functions;  TGeoNavigator ();  global mode is caching enabled for parallel world safety calls ;  ;  TGeoNavigator (TGeoManager *geom);  Constructor. ;  ;  ~TGeoNavigator () override;  Destructor. ;  ; void BuildCache (Bool_t dummy=kFALSE, Bool_t nodeid=kFALSE);  Builds the cache for physical nodes and global matrices. ;  ; Bool_t cd (const char *path="""");  Browse the tree of nodes starting from top node according to pathname. ;  ; void CdDown (Int_t index);  Make a daughter of current node current. ;  ; void CdDown (TGeoNode *node);  Make a daughter of current node current. ;  ; void CdNext ();  Do a cd to the node found next by FindNextBoundary. ;  ; void CdNode (Int_t nodeid);  Change current path to point to the node having this id. ;  ; void CdTop ();  ",MatchSource.WIKI,doc/master/classTGeoNavigator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoNavigator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html
Availability,error,error,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTGeoNavigatorArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNavigatorArray.html
Integrability,message,message,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/master/classTGeoNavigatorArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNavigatorArray.html
Modifiability,inherit,inherited,". ROOT: TGeoNavigatorArray Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoNavigatorArray Class Reference. . Definition at line 294 of file TGeoNavigator.h. Public Member Functions;  TGeoNavigatorArray ();  ;  TGeoNavigatorArray (TGeoManager *mgr);  ;  ~TGeoNavigatorArray () override;  ; TGeoNavigator * AddNavigator ();  Add a new navigator to the array. ;  ; TGeoNavigator * GetCurrentNavigator () const;  ; TClass * IsA () const override;  ; TGeoNavigator * SetCurrentNavigator (Int_t inav);  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObjArray;  TObjArray (const TObjArray &a);  Create a copy of TObjArray a. Note, does not copy the kIsOwner flag. ;  ;  TObjArray (Int_t s=TCollection::kInitCapacity, Int_t lowerBound=0);  Create an object array. ;  ; virtual ~TObjArray ();  Delete an array. ;  ; void Add (TObject *obj) override;  ; void AddAfter (const TObject *after, TObject *obj) override;  Add object in the slot after object after. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Add object at position ids. ;  ; virtual void AddAtAndExpand (TObject *obj, Int_t idx);  Add object at position idx. ;  ; virtual Int_t AddAtFree (TObject *obj);  Return the position of the new object. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Add object in the slot before object before. ;  ; void AddFirst (TObject *obj) override;  Add object in the first slot of the array. ;  ; void AddLast (TObject *obj) override;  Add object in the next empty slot in the array. ;  ; TObject * After (const TObject *obj) const override;  Return the object after obj. Returns 0 if obj is last object. ;  ; ",MatchSource.WIKI,doc/master/classTGeoNavigatorArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNavigatorArray.html
Performance,perform,perform,"leanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TCollection; enum  EStatusBits { kIsOwner = (1ULL << ( 14 )); , kUseRWLock = (1ULL << ( 16 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObjArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Int_t GetAbsLast () const;  Return absolute index to last object in array. ;  ; void Init (Int_t s, Int_t lowerBound);  Initialize a TObjArray. ;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  ;  Protected Member Functions inherited from TSeqCollection;  TSeqCollection ();  ; virtual void Changed ();  ;  Protected Member Functions inherited from TCollection;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collection entry. ;  ; virtual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TObjArray; TObject ** fCont;  ; Int_t fLast;  ; Int_t fLowerBound;  Array contents. ;  ;  Protected Attributes inherited from TSeqCollection; Bool_t fSorted;  ;  Protected Attributes inherited from TCollection; TString fName;  ; Int_t fSize;  . #include <TGeoNavigator.h>. Inheritance diagram for TGeoNavigatorArray:. This brow",MatchSource.WIKI,doc/master/classTGeoNavigatorArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNavigatorArray.html
Safety,safe,safe,"d Print (Option_t *option, const char *wildcard, Int_t recurse=1) const;  Print the collection header and its elements that match the wildcard. ;  ; virtual void Print (Option_t *option, Int_t recurse) const;  Print the collection header and its elements. ;  ; virtual void Print (Option_t *option, TPRegexp &regexp, Int_t recurse=1) const;  Print the collection header and its elements that match the regexp. ;  ; void Print (Option_t *option="""") const override;  Default print for collections, calls Print(option, 1). ;  ; void RemoveAll ();  ; virtual void RemoveAll (TCollection *col);  Remove all objects in collection col from this collection. ;  ; void SetCurrentCollection ();  Set this collection to be the globally accessible collection. ;  ; void SetName (const char *name);  ; virtual void SetOwner (Bool_t enable=kTRUE);  Set whether this collection is the owner (enable==true) of its content. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool UseRWLock (Bool_t enable=true);  Set this collection to use a RW lock upon access, making it thread safe. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write all objects in this collection. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write all objects in this collection. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () co",MatchSource.WIKI,doc/master/classTGeoNavigatorArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNavigatorArray.html
Security,hash,hash,"lass *cl) const;  Make sure all objects in this collection inherit from class cl. ;  ; TIter begin () const;  ; void Browse (TBrowser *b) override;  Browse this collection (called by TBrowser). ;  ; Int_t Capacity () const;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an collection using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TCollection objects. ;  ; Bool_t Contains (const char *name) const;  ; Bool_t Contains (const TObject *obj) const;  ; void Draw (Option_t *option="""") override;  Draw all objects in this collection. ;  ; void Dump () const override;  Dump all objects in this collection. ;  ; TIter end () const;  ; const char * GetName () const override;  Return name of this collection. ;  ; virtual Int_t GetSize () const;  Return the capacity of the collection, i.e. ;  ; virtual Int_t GrowBy (Int_t delta) const;  Increase the collection's capacity by delta slots. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsArgNull (const char *where, const TObject *obj) const;  Returns true if object is a null pointer. ;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsOwner () const;  ; Bool_t IsSortable () const override;  ; R__ALWAYS_INLINE Bool_t IsUsingRWLock () const;  ; void ls (Option_t *option="""") const override;  List (ls) all objects in this collection. ;  ; virtual TIterator * MakeReverseIterator () const;  ; Bool_t Notify () override;  'Notify' all objects in this collection. ;  ; TObject * operator() (const char *name) const;  Find an object in this collection by name. ;  ; void Paint (Option_t *option="""") override;  Paint all objects in this collection. ;  ; virtual void Print (Option_t *option, const char *wildcard, Int_t recurse=1) const;  Print the collection header and its elements that match the wildcard. ;  ; virtual void Print (O",MatchSource.WIKI,doc/master/classTGeoNavigatorArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNavigatorArray.html
Availability,error,error,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute",MatchSource.WIKI,doc/master/classTGeoNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNode.html
Deployability,A/B,A/B,"t a copy of the framework extension pointer. ;  ; TGeoExtension * GrabUserExtension () const;  Get a copy of the user extension pointer. ;  ; void InspectNode () const;  Inspect this node. ;  ; TClass * IsA () const override;  ; Bool_t IsCloned () const;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsOffset () const;  ; Bool_t IsOnScreen () const;  check if this node is drawn. Assumes that this node is current ;  ; Bool_t IsOverlapping () const;  ; Bool_t IsVirtual () const;  ; Bool_t IsVisDaughters () const;  ; Bool_t IsVisible () const;  ; virtual void LocalToMaster (const Double_t *local, Double_t *master) const;  Convert the point coordinates from local reference system to mother reference. ;  ; virtual void LocalToMasterVect (const Double_t *local, Double_t *master) const;  Convert a vector from local reference system to mother reference. ;  ; void ls (Option_t *option="""") const override;  Print the path (A/B/C/...) to this node on stdout. ;  ; virtual TGeoNode * MakeCopyNode () const;  ; virtual void MasterToLocal (const Double_t *master, Double_t *local) const;  Convert the point coordinates from mother reference to local reference system. ;  ; virtual void MasterToLocalVect (const Double_t *master, Double_t *local) const;  Convert a vector from mother reference to local reference system. ;  ; Bool_t MayOverlap (Int_t iother) const;  Check the overlab between the bounding box of the node overlaps with the one the brother with index IOTHER. ;  ; void Paint (Option_t *option="""") override;  Paint this node and its content according to visualization settings. ;  ; void PrintCandidates () const;  print daughters candidates for containing current point ;  ; void PrintOverlaps () const;  print possible overlapping nodes ;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const;  computes the closest distance from given point to this shape ;  ; void Sa",MatchSource.WIKI,doc/master/classTGeoNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNode.html
Integrability,message,message,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute",MatchSource.WIKI,doc/master/classTGeoNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNode.html
Modifiability,inherit,inherited," a similar prototype:; TGeoVolume::AddNodeOverlap(same arguments);; TGeoVolume::AddNodeOverlapvirtual void AddNodeOverlap(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""")Add a TGeoNode to the list of nodes.Definition TGeoVolume.cxx:1044; When closing the geometry, overlapping nodes perform a check of possible overlaps with their neighbours. These are stored and checked all the time during navigation, therefore navigation is slower when embedding such nodes into geometry.; Node have visualization attributes as volume have. When undefined by users, painting a node on a pad will take the corresponding volume attributes. Definition at line 39 of file TGeoNode.h. Public Types; enum  { ;   kGeoNodeMatrix = (1ULL << ( 14 )); , kGeoNodeOffset = (1ULL << ( 15 )); , kGeoNodeVC = (1ULL << ( 16 )); , kGeoNodeOverlap = (1ULL << ( 17 )); , ;   kGeoNodeCloned = (1ULL << ( 18 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TGeoAtt; enum  { kBitMask = 0x00ffffff; };  ; enum  EGeoActivityAtt { kActOverride = (1ULL << ( 8 )); , kActNone = (1ULL << ( 9 )); , kActThis = (1ULL << ( 10 )); , kActDaughters = (1ULL << ( 11 )); };  ; enum  EGeoOptimizationAtt { kUseBoundingBox = (1ULL << ( 16 )); , kUseVoxels = (1ULL << ( 17 )); , kUseGsord = (1ULL << ( 18 )); };  ; enum  EGeoSavePrimitiveAtt { kSavePrimitiveAtt = (1ULL << ( 19 )); , kSaveNodesAtt",MatchSource.WIKI,doc/master/classTGeoNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNode.html
Performance,perform,perform,"se.; Nodes can be declared as ""overlapping"" in case they do overlap with other nodes inside the same container or extrude this container. Non-overlapping nodes can be created with:; TGeoVolume::AddNode(TGeoVolume *daughter, Int_t copy_No, TGeoMatrix *matr);; TGeoMatrixGeometrical transformation package.Definition TGeoMatrix.h:38; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TGeoVolume::AddNodevirtual TGeoNode * AddNode(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""")Add a TGeoNode to the list of nodes.Definition TGeoVolume.cxx:975; int; The creation of overlapping nodes can be done with a similar prototype:; TGeoVolume::AddNodeOverlap(same arguments);; TGeoVolume::AddNodeOverlapvirtual void AddNodeOverlap(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""")Add a TGeoNode to the list of nodes.Definition TGeoVolume.cxx:1044; When closing the geometry, overlapping nodes perform a check of possible overlaps with their neighbours. These are stored and checked all the time during navigation, therefore navigation is slower when embedding such nodes into geometry.; Node have visualization attributes as volume have. When undefined by users, painting a node on a pad will take the corresponding volume attributes. Definition at line 39 of file TGeoNode.h. Public Types; enum  { ;   kGeoNodeMatrix = (1ULL << ( 14 )); , kGeoNodeOffset = (1ULL << ( 15 )); , kGeoNodeVC = (1ULL << ( 16 )); , kGeoNodeOverlap = (1ULL << ( 17 )); , ;   kGeoNodeCloned = (1ULL << ( 18 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelet",MatchSource.WIKI,doc/master/classTGeoNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNode.html
Security,hash,hash,"_StreamerNVirtual_b);  ; void VisibleDaughters (Bool_t vis=kTRUE);  Set visibility of the daughters (obsolete). ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNode.html
Testability,log,logical,"Geometry classes. ; A node represent a volume positioned inside another.They store links to both volumes and to the TGeoMatrix representing the relative positioning. ; Node are never instantiated directly by users, but created as a result of volume operations. Adding a volume named A with a given user ID inside a volume B will create a node node named A_ID. This will be added to the list of nodes stored by B. Also, when applying a division operation in N slices to a volume A, a list of nodes B_1, B_2, ..., B_N is also created. A node B_i does not represent a unique object in the geometry because its container A might be at its turn positioned as node inside several other volumes. Only when a complete branch of nodes is fully defined up to the top node in the geometry, a given path like:; /TOP_1/.../A_3/B_7 will represent an unique object.; Its global transformation matrix can be computed as the pile-up of all local transformations in its branch. We will therefore call ""logical graph"" the hierarchy defined by nodes and volumes. The expansion of the logical graph by all possible paths defines a tree structure where all nodes are unique ""touchable"" objects. We will call this the ""physical tree"". Unlike the logical graph, the physical tree can become a huge structure with several milions of nodes in case of complex geometries, therefore it is not always a good idea to keep it transient in memory. Since a the logical and physical structures are correlated, the modeller rather keeps track only of the current branch, updating the current global matrix at each change of the level in geometry. The current physical node is not an object that can be asked for at a given moment, but rather represented by the combination: current node + current global matrix. However, physical nodes have unique ID's that can be retrieved for a given modeler state. These can be fed back to the modeler in order to force a physical node to become current. The advantage of this comes from the fact th",MatchSource.WIKI,doc/master/classTGeoNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNode.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoNodeCache.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNodeCache.html
Integrability,interface,interface,"ass ReferenceThe Geometry Package » Geometry classes. ; Special pool of reusable nodes. ; Definition at line 56 of file TGeoCache.h. Public Member Functions;  TGeoNodeCache ();  Dummy constructor. ;  ;  TGeoNodeCache (TGeoNode *top, Bool_t nodeid=kFALSE, Int_t capacity=30);  Default constructor. ;  ;  ~TGeoNodeCache () override;  Destructor. ;  ; void BuildIdArray ();  Builds node id array. ;  ; void BuildInfoBranch ();  Builds info branch. Navigation is possible only after this step. ;  ; Bool_t CdDown (Int_t index);  Make daughter INDEX of current node the active state. Compute global matrix. ;  ; Bool_t CdDown (TGeoNode *node);  Make daughter INDEX of current node the active state. Compute global matrix. ;  ; void CdNode (Int_t nodeid);  Change current path to point to the node having this id. ;  ; void CdTop ();  ; void CdUp ();  Make mother of current node the active state. ;  ; void FillIdBranch (const Int_t *br, Int_t startlevel=0);  ; void * GetBranch () const;  ; void GetBranchNames (Int_t *names) const;  Fill names with current branch volume names (4 char - used by GEANT3 interface). ;  ; void GetBranchNumbers (Int_t *copyNumbers, Int_t *volumeNumbers) const;  Fill copy numbers of current branch nodes. ;  ; void GetBranchOnlys (Int_t *isonly) const;  Fill copy numbers of current branch nodes. ;  ; TGeoHMatrix * GetCurrentMatrix () const;  ; Int_t GetCurrentNodeId () const;  Returns a fixed ID for current physical node. ;  ; const Int_t * GetIdBranch () const;  ; TGeoStateInfo * GetInfo ();  Get next state info pointer. ;  ; Int_t GetLevel () const;  ; TGeoStateInfo * GetMakePWInfo (Int_t nd);  Get the PW info, if none create one. ;  ; void * GetMatrices () const;  ; TGeoNode * GetMother (Int_t up=1) const;  ; TGeoHMatrix * GetMotherMatrix (Int_t up=1) const;  ; TGeoNode * GetNode () const;  ; Int_t GetNodeId () const;  Get unique node id. ;  ; const char * GetPath ();  Returns the current geometry path. ;  ; Int_t GetStackLevel () const;  ; TGeoNode * GetTo",MatchSource.WIKI,doc/master/classTGeoNodeCache.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNodeCache.html
Modifiability,inherit,inherited,"urrent matrix converted to local one and rescaled with bomb factor. ;  ; void MasterToLocalVect (const Double_t *master, Double_t *local) const;  Vector in master frame defined by current matrix converted to local one. ;  ; void PopDummy (Int_t ipop=9999);  ; Bool_t PopState (Int_t &nmany, Double_t *point=nullptr);  Pop next state/point from heap. ;  ; Bool_t PopState (Int_t &nmany, Int_t level, Double_t *point=nullptr);  Pop next state/point from heap and restore matrices starting from LEVEL. ;  ; Int_t PushState (Bool_t ovlp, Int_t ntmany=0, Int_t startlevel=0, Double_t *point=nullptr);  Push current state into heap. ;  ; void Refresh ();  ; void ReleaseInfo ();  Release last used state info pointer. ;  ; Bool_t RestoreState (Int_t &nmany, TGeoCacheState *state, Double_t *point=nullptr);  Pop next state/point from a backed-up state. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTGeoNodeCache.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNodeCache.html
Performance,perform,performance,"TGeoNodeCache ; (; ). override . Destructor. ; Definition at line 104 of file TGeoCache.cxx. Member Function Documentation. ◆ BuildIdArray(). void TGeoNodeCache::BuildIdArray ; (; ). Builds node id array. ; Definition at line 131 of file TGeoCache.cxx. ◆ BuildInfoBranch(). void TGeoNodeCache::BuildInfoBranch ; (; ). Builds info branch. Navigation is possible only after this step. ; Definition at line 150 of file TGeoCache.cxx. ◆ CdDown() [1/2]. Bool_t TGeoNodeCache::CdDown ; (; Int_t ; index). Make daughter INDEX of current node the active state. Compute global matrix. ; Definition at line 219 of file TGeoCache.cxx. ◆ CdDown() [2/2]. Bool_t TGeoNodeCache::CdDown ; (; TGeoNode * ; node). Make daughter INDEX of current node the active state. Compute global matrix. ; Definition at line 245 of file TGeoCache.cxx. ◆ CdNode(). void TGeoNodeCache::CdNode ; (; Int_t ; nodeid). Change current path to point to the node having this id. ; Node id has to be in range : 0 to fNNodes-1 (no check for performance reasons) ; Definition at line 176 of file TGeoCache.cxx. ◆ CdTop(). void TGeoNodeCache::CdTop ; (; ). inline . Definition at line 92 of file TGeoCache.h. ◆ CdUp(). void TGeoNodeCache::CdUp ; (; ). Make mother of current node the active state. ; Definition at line 271 of file TGeoCache.cxx. ◆ Class(). static TClass * TGeoNodeCache::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoNodeCache::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoNodeCache::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 145 of file TGeoCache.h. ◆ DeclFileName(). static const char * TGeoNodeCache::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 145 of file TGeoCache.h. ◆ FillIdBranch(). void TGeoNodeCache::FillIdBranch ; (; const Int_t * ; br, . Int_t ; startlevel = 0 . ). inline . ",MatchSource.WIKI,doc/master/classTGeoNodeCache.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNodeCache.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoNodeCache.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNodeCache.html
Availability,error,error,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute",MatchSource.WIKI,doc/master/classTGeoNodeMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNodeMatrix.html
Deployability,A/B,A/B,";  ; Int_t * GetOverlaps (Int_t &novlp) const;  ; TGeoExtension * GetUserExtension () const;  ; TGeoVolume * GetVolume () const;  ; TGeoExtension * GrabFWExtension () const;  Get a copy of the framework extension pointer. ;  ; TGeoExtension * GrabUserExtension () const;  Get a copy of the user extension pointer. ;  ; void InspectNode () const;  Inspect this node. ;  ; Bool_t IsCloned () const;  ; Bool_t IsOffset () const;  ; Bool_t IsOnScreen () const;  check if this node is drawn. Assumes that this node is current ;  ; Bool_t IsOverlapping () const;  ; Bool_t IsVirtual () const;  ; Bool_t IsVisDaughters () const;  ; Bool_t IsVisible () const;  ; virtual void LocalToMaster (const Double_t *local, Double_t *master) const;  Convert the point coordinates from local reference system to mother reference. ;  ; virtual void LocalToMasterVect (const Double_t *local, Double_t *master) const;  Convert a vector from local reference system to mother reference. ;  ; void ls (Option_t *option="""") const override;  Print the path (A/B/C/...) to this node on stdout. ;  ; virtual void MasterToLocal (const Double_t *master, Double_t *local) const;  Convert the point coordinates from mother reference to local reference system. ;  ; virtual void MasterToLocalVect (const Double_t *master, Double_t *local) const;  Convert a vector from mother reference to local reference system. ;  ; Bool_t MayOverlap (Int_t iother) const;  Check the overlab between the bounding box of the node overlaps with the one the brother with index IOTHER. ;  ; void Paint (Option_t *option="""") override;  Paint this node and its content according to visualization settings. ;  ; void PrintCandidates () const;  print daughters candidates for containing current point ;  ; void PrintOverlaps () const;  print possible overlapping nodes ;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const;  computes the closest distance from given point to this shape ;  ; void SaveAttributes (std::ostream &out);  save attri",MatchSource.WIKI,doc/master/classTGeoNodeMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNodeMatrix.html
Integrability,message,message,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute",MatchSource.WIKI,doc/master/classTGeoNodeMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNodeMatrix.html
Modifiability,inherit,inherited,"classes. ; A node containing local transformation. ; Definition at line 154 of file TGeoNode.h. Public Member Functions;  TGeoNodeMatrix ();  Default constructor. ;  ;  TGeoNodeMatrix (const TGeoVolume *vol, const TGeoMatrix *matrix);  Constructor. ;  ;  ~TGeoNodeMatrix () override;  Destructor. ;  ; Int_t GetByteCount () const override;  return the total size in bytes of this node ;  ; TGeoMatrix * GetMatrix () const override;  ; Int_t GetOptimalVoxels () const override;  Returns type of optimal voxelization for this node. ;  ; TClass * IsA () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; TGeoNode * MakeCopyNode () const override;  Make a copy of this node. ;  ; void SetMatrix (const TGeoMatrix *matrix);  Matrix setter. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoNode;  TGeoNode ();  Default constructor. ;  ;  TGeoNode (const TGeoVolume *vol);  Constructor. ;  ;  ~TGeoNode () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  How-to-browse for a node. ;  ; virtual void cd () const;  ; void CheckOverlaps (Double_t ovlp=0.1, Option_t *option="""");  Check overlaps bigger than OVLP hierarchically, starting with this node. ;  ; void CheckShapes ();  check for wrong parameters in shapes ;  ; Int_t CountDaughters (Bool_t unique_volumes=kFALSE);  Returns the number of daughters. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  compute the closest distance of approach from point px,py to this node ;  ; void Draw (Option_t *option="""") override;  draw current node according to option ;  ; void DrawOnly (Option_t *option="""");  draw only this node independently of its vis options ;  ; void DrawOverlaps ();  Method drawing the overlap candidates with this node. ;  ; void ExecuteEvent (Int_t even",MatchSource.WIKI,doc/master/classTGeoNodeMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNodeMatrix.html
Performance,optimiz,optimization,"alled when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TGeoAtt;  TGeoAtt ();  Default constructor. ;  ;  TGeoAtt (Option_t *vis_opt, Option_t *activity_opt="""", Option_t *optimization_opt="""");  Constructor. ;  ; virtual ~TGeoAtt ();  Destructor. ;  ; Bool_t IsActive () const;  ; Bool_t IsActiveDaughters () const;  ; Bool_t IsVisBranch () const;  ; Bool_t IsVisContainers () const;  ; Bool_t IsVisDaughters () const;  ; Bool_t IsVisible () const;  ; Bool_t IsVisLeaves () const;  ; Bool_t IsVisOnly () const;  ; Bool_t IsVisRaytrace () const;  ; Bool_t IsVisStreamed () const;  ; Bool_t IsVisTouched () const;  ; void ResetAttBit (UInt_t f);  ; void SetActiveDaughters (Bool_t flag=kTRUE);  ; void SetActivity (Bool_t flag=kTRUE);  ; void SetAttBit (UInt_t f);  ; void SetAttBit (UInt_t f, Bool_t set);  ; void SetOptimization (Option_t *option);  Set optimization flags. ;  ; void SetVisBranch ();  Set branch type visibility. ;  ; virtual void SetVisContainers (Bool_t flag=kTRUE);  Set branch type visibility. ;  ; void SetVisDaughters (Bool_t vis=kTRUE);  Set visibility for the daughters. ;  ; virtual void SetVisLeaves (Bool_t flag=kTRUE);  Set branch type visibility. ;  ; virtual void SetVisOnly (Bool_t flag=kTRUE);  Set branch type visibility. ;  ; void SetVisRaytrace (Bool_t flag=kTRUE);  ; void SetVisStreamed (Bool_t vis=kTRUE);  Mark attributes as ""streamed to file"". ;  ; void SetVisTouched (Bool_t vis=kTRUE);  Mark visualization attributes as ""modified"". ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestAttB",MatchSource.WIKI,doc/master/classTGeoNodeMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNodeMatrix.html
Security,hash,hash,"_StreamerNVirtual_b);  ; void VisibleDaughters (Bool_t vis=kTRUE);  Set visibility of the daughters (obsolete). ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoNodeMatrix.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNodeMatrix.html
Availability,error,error,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute",MatchSource.WIKI,doc/master/classTGeoNodeOffset.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNodeOffset.html
Deployability,A/B,A/B,"ion * GrabFWExtension () const;  Get a copy of the framework extension pointer. ;  ; TGeoExtension * GrabUserExtension () const;  Get a copy of the user extension pointer. ;  ; void InspectNode () const;  Inspect this node. ;  ; Bool_t IsCloned () const;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsOffset () const;  ; Bool_t IsOnScreen () const;  check if this node is drawn. Assumes that this node is current ;  ; Bool_t IsOverlapping () const;  ; Bool_t IsVirtual () const;  ; Bool_t IsVisDaughters () const;  ; Bool_t IsVisible () const;  ; virtual void LocalToMaster (const Double_t *local, Double_t *master) const;  Convert the point coordinates from local reference system to mother reference. ;  ; virtual void LocalToMasterVect (const Double_t *local, Double_t *master) const;  Convert a vector from local reference system to mother reference. ;  ; void ls (Option_t *option="""") const override;  Print the path (A/B/C/...) to this node on stdout. ;  ; virtual void MasterToLocal (const Double_t *master, Double_t *local) const;  Convert the point coordinates from mother reference to local reference system. ;  ; virtual void MasterToLocalVect (const Double_t *master, Double_t *local) const;  Convert a vector from mother reference to local reference system. ;  ; Bool_t MayOverlap (Int_t iother) const;  Check the overlab between the bounding box of the node overlaps with the one the brother with index IOTHER. ;  ; void Paint (Option_t *option="""") override;  Paint this node and its content according to visualization settings. ;  ; void PrintCandidates () const;  print daughters candidates for containing current point ;  ; void PrintOverlaps () const;  print possible overlapping nodes ;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const;  computes the closest distance from given point to this shape ;  ; void SaveAttributes (std::ostream &out);  save attri",MatchSource.WIKI,doc/master/classTGeoNodeOffset.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNodeOffset.html
Integrability,message,message,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute",MatchSource.WIKI,doc/master/classTGeoNodeOffset.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNodeOffset.html
Modifiability,inherit,inherited,"unctions |; Private Attributes |; List of all members ; TGeoNodeOffset Class ReferenceThe Geometry Package » Geometry classes. ; Node containing an offset. ; Definition at line 184 of file TGeoNode.h. Public Member Functions;  TGeoNodeOffset ();  Default constructor. ;  ;  TGeoNodeOffset (const TGeoVolume *vol, Int_t index, Double_t offset);  Constructor. Null pointer to matrix means identity transformation. ;  ;  ~TGeoNodeOffset () override;  Destructor. ;  ; void cd () const override;  ; TGeoPatternFinder * GetFinder () const override;  ; Int_t GetIndex () const override;  Get the index of this offset. ;  ; TGeoMatrix * GetMatrix () const override;  ; Double_t GetOffset () const;  ; TClass * IsA () const override;  ; TGeoNode * MakeCopyNode () const override;  Make a copy of this node. ;  ; void SetFinder (TGeoPatternFinder *finder);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoNode;  TGeoNode ();  Default constructor. ;  ;  TGeoNode (const TGeoVolume *vol);  Constructor. ;  ;  ~TGeoNode () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  How-to-browse for a node. ;  ; void CheckOverlaps (Double_t ovlp=0.1, Option_t *option="""");  Check overlaps bigger than OVLP hierarchically, starting with this node. ;  ; void CheckShapes ();  check for wrong parameters in shapes ;  ; Int_t CountDaughters (Bool_t unique_volumes=kFALSE);  Returns the number of daughters. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  compute the closest distance of approach from point px,py to this node ;  ; void Draw (Option_t *option="""") override;  draw current node according to option ;  ; void DrawOnly (Option_t *option="""");  draw only this node independently of its vis options ;  ; void DrawOverlaps ();  Method drawing the overlap candidates with this node. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) overri",MatchSource.WIKI,doc/master/classTGeoNodeOffset.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNodeOffset.html
Performance,optimiz,optimization,"alled when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TGeoAtt;  TGeoAtt ();  Default constructor. ;  ;  TGeoAtt (Option_t *vis_opt, Option_t *activity_opt="""", Option_t *optimization_opt="""");  Constructor. ;  ; virtual ~TGeoAtt ();  Destructor. ;  ; Bool_t IsActive () const;  ; Bool_t IsActiveDaughters () const;  ; Bool_t IsVisBranch () const;  ; Bool_t IsVisContainers () const;  ; Bool_t IsVisDaughters () const;  ; Bool_t IsVisible () const;  ; Bool_t IsVisLeaves () const;  ; Bool_t IsVisOnly () const;  ; Bool_t IsVisRaytrace () const;  ; Bool_t IsVisStreamed () const;  ; Bool_t IsVisTouched () const;  ; void ResetAttBit (UInt_t f);  ; void SetActiveDaughters (Bool_t flag=kTRUE);  ; void SetActivity (Bool_t flag=kTRUE);  ; void SetAttBit (UInt_t f);  ; void SetAttBit (UInt_t f, Bool_t set);  ; void SetOptimization (Option_t *option);  Set optimization flags. ;  ; void SetVisBranch ();  Set branch type visibility. ;  ; virtual void SetVisContainers (Bool_t flag=kTRUE);  Set branch type visibility. ;  ; void SetVisDaughters (Bool_t vis=kTRUE);  Set visibility for the daughters. ;  ; virtual void SetVisLeaves (Bool_t flag=kTRUE);  Set branch type visibility. ;  ; virtual void SetVisOnly (Bool_t flag=kTRUE);  Set branch type visibility. ;  ; void SetVisRaytrace (Bool_t flag=kTRUE);  ; void SetVisStreamed (Bool_t vis=kTRUE);  Mark attributes as ""streamed to file"". ;  ; void SetVisTouched (Bool_t vis=kTRUE);  Mark visualization attributes as ""modified"". ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestAttB",MatchSource.WIKI,doc/master/classTGeoNodeOffset.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNodeOffset.html
Security,hash,hash,"_StreamerNVirtual_b);  ; void VisibleDaughters (Bool_t vis=kTRUE);  Set visibility of the daughters (obsolete). ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoNodeOffset.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoNodeOffset.html
Availability,error,error,"nup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoOpticalSurface ();  ;  TGeoOpticalSurface (const char *name, ESurfaceModel model=kMglisur, ESurfaceFinish finish=kFpolished, ESurfaceType type=kTdielectric_dielectric, Double_t value=1.0);  ;  ~TGeoOpticalSurface () override;  ; bool AddConstProperty (const char *property, const char *ref);  ; bool AddProperty (const char *property, const char *ref);  ; TList const & GetConstProperties () const;  ; Double_t GetConstProperty (const char *property, Bool_t *error=nullptr) const;  ; Double_t GetConstProperty (Int_t i, Bool_t *error=nullptr) const;  ; const char * GetConstPropertyRef (const char *property) const;  ; const char * GetConstPropertyRef (Int_t i) const;  ; ESurfaceFinish GetFinish () const;  ; ESurfaceModel GetModel () const;  ; Int_t GetNconstProperties () const;  ; Int_t GetNproperties () const;  ; Double_t GetPolish () const;  ; TList const & GetProperties () const;  ; TGDMLMatrix * GetProperty (const char *name) const;  ; TGDMLMatrix * GetProperty (Int_t i) const;  ; const char * GetPropertyRef (const char *property);  ; const char * GetPropertyRef (Int_t i) const;  ; Double_t GetSigmaAlpha () const;  ; ESurfaceType GetType () const;  ; Double_t GetValue () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  This method must be overridden when a class wants to print itself. ;  ; void SetFinish (ESurfaceFinish finish);  ; void SetModel (ESurfaceModel model);  ; void SetPolish (Double_t polish);  ; void SetSigmaAlpha (Double_t sigmaalpha);  ; void SetType (ESurfaceType type);  ; void SetValue (Double_t value);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited",MatchSource.WIKI,doc/master/classTGeoOpticalSurface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoOpticalSurface.html
Integrability,wrap,wrapper,". ROOT: TGeoOpticalSurface Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoOpticalSurface Class ReferenceThe Geometry Package » Geometry classes. ; This is a wrapper class to G4OpticalSurface. ; Definition at line 27 of file TGeoOpticalSurface.h. Public Types; enum  ESurfaceFinish { ;   kFpolished; , kFpolishedfrontpainted; , kFpolishedbackpainted; , kFground; , ;   kFgroundfrontpainted; , kFgroundbackpainted; , kFpolishedlumirrorair; , kFpolishedlumirrorglue; , ;   kFpolishedair; , kFpolishedteflonair; , kFpolishedtioair; , kFpolishedtyvekair; , ;   kFpolishedvm2000air; , kFpolishedvm2000glue; , kFetchedlumirrorair; , kFetchedlumirrorglue; , ;   kFetchedair; , kFetchedteflonair; , kFetchedtioair; , kFetchedtyvekair; , ;   kFetchedvm2000air; , kFetchedvm2000glue; , kFgroundlumirrorair; , kFgroundlumirrorglue; , ;   kFgroundair; , kFgroundteflonair; , kFgroundtioair; , kFgroundtyvekair; , ;   kFgroundvm2000air; , kFgroundvm2000glue; , kFRough_LUT; , kFRoughTeflon_LUT; , ;   kFRoughESR_LUT; , kFRoughESRGrease_LUT; , kFPolished_LUT; , kFPolishedTeflon_LUT; , ;   kFPolishedESR_LUT; , kFPolishedESRGrease_LUT; , kFDetector_LUT. };  ; enum  ESurfaceModel { ;   kMglisur; , kMunified; , kMLUT; , kMDAVIS; , ;   kMdichroic. };  ; enum  ESurfaceType { ;   kTdielectric_metal; , kTdielectric_dielectric; , kTdielectric_LUT; , kTdielectric_LUTDAVIS; , ;   kTdielectric_dichroic; , kTfirsov; , kTx_ray. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 ))",MatchSource.WIKI,doc/master/classTGeoOpticalSurface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoOpticalSurface.html
Modifiability,inherit,inherited,"onair; , kFpolishedtioair; , kFpolishedtyvekair; , ;   kFpolishedvm2000air; , kFpolishedvm2000glue; , kFetchedlumirrorair; , kFetchedlumirrorglue; , ;   kFetchedair; , kFetchedteflonair; , kFetchedtioair; , kFetchedtyvekair; , ;   kFetchedvm2000air; , kFetchedvm2000glue; , kFgroundlumirrorair; , kFgroundlumirrorglue; , ;   kFgroundair; , kFgroundteflonair; , kFgroundtioair; , kFgroundtyvekair; , ;   kFgroundvm2000air; , kFgroundvm2000glue; , kFRough_LUT; , kFRoughTeflon_LUT; , ;   kFRoughESR_LUT; , kFRoughESRGrease_LUT; , kFPolished_LUT; , kFPolishedTeflon_LUT; , ;   kFPolishedESR_LUT; , kFPolishedESRGrease_LUT; , kFDetector_LUT. };  ; enum  ESurfaceModel { ;   kMglisur; , kMunified; , kMLUT; , kMDAVIS; , ;   kMdichroic. };  ; enum  ESurfaceType { ;   kTdielectric_metal; , kTdielectric_dielectric; , kTdielectric_LUT; , kTdielectric_LUTDAVIS; , ;   kTdielectric_dichroic; , kTfirsov; , kTx_ray. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoOpticalSurface ();  ;  TGeoOpticalSurface (const char *name, ESurfaceModel model=kMglisur, ESurfaceFinish finish=kFpolished, ESurfaceType type=kTdielectric_dielectric, Double_t value=1.0);  ;  ~TGeoOpticalSurface () override;  ; bool AddConstProperty (const char *property, const char *ref);  ; bool AddProperty (const char *property, const char *ref);  ; TList const & GetConstProperties () const;  ; Double_t GetConstPr",MatchSource.WIKI,doc/master/classTGeoOpticalSurface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoOpticalSurface.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoOpticalSurface.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoOpticalSurface.html
Availability,error,error,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoOverlap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoOverlap.html
Energy Efficiency,green,green,"atic constexpr Version_t TGeoOverlap::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 97 of file TGeoOverlap.h. ◆ Compare(). Int_t TGeoOverlap::Compare ; (; const TObject * ; obj); const. overridevirtual . Method to compare this overlap with another. ; Returns : -1 - this is smaller than OBJ 0 - equal 1 - greater ; Reimplemented from TObject.; Definition at line 99 of file TGeoOverlap.cxx. ◆ DeclFileName(). static const char * TGeoOverlap::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 97 of file TGeoOverlap.h. ◆ DistancetoPrimitive(). Int_t TGeoOverlap::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Distance to primitive for an overlap. ; Reimplemented from TObject.; Definition at line 121 of file TGeoOverlap.cxx. ◆ Draw(). void TGeoOverlap::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw the overlap. ; One daughter will be blue, the other green, extruding points red. ; Reimplemented from TObject.; Definition at line 130 of file TGeoOverlap.cxx. ◆ ExecuteEvent(). void TGeoOverlap::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Event interception. ; Reimplemented from TObject.; Definition at line 139 of file TGeoOverlap.cxx. ◆ GetFirstMatrix(). TGeoHMatrix * TGeoOverlap::GetFirstMatrix ; (; ); const. inline . Definition at line 67 of file TGeoOverlap.h. ◆ GetFirstVolume(). TGeoVolume * TGeoOverlap::GetFirstVolume ; (; ); const. inline . Definition at line 65 of file TGeoOverlap.h. ◆ GetOverlap(). Double_t TGeoOverlap::GetOverlap ; (; ); const. inline . Definition at line 69 of file TGeoOverlap.h. ◆ GetPolyMarker(). TPolyMarker3D * TGeoOverlap::GetPolyMarker ; (; ); const. inline . Definition at line 64 of file TGeoOverlap.h. ◆ GetSecondMatrix(). TGeoHMatrix * TGeoOverlap::GetSecondMatrix ; (; ); const. inline . Definition at line 68 of file TGeoOverlap.h. ◆ GetSecondVolume(). TGeo",MatchSource.WIKI,doc/master/classTGeoOverlap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoOverlap.html
Integrability,message,message,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoOverlap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoOverlap.html
Modifiability,inherit,inherited,". ROOT: TGeoOverlap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGeoOverlap Class ReferenceThe Geometry Package » Geometry painter. ; Base class describing geometry overlaps. ; Overlaps apply to the nodes contained inside a volume. These should not overlap to each other nor extrude the shape of their mother volume. ; Definition at line 37 of file TGeoOverlap.h. Public Types; enum  EOverlapType { kGeoOverlap = (1ULL << ( 14 )); , kGeoExtrusion = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoOverlap ();  Default ctor. ;  ;  TGeoOverlap (const char *name, TGeoVolume *vol1, TGeoVolume *vol2, const TGeoMatrix *matrix1, const TGeoMatrix *matrix2, Bool_t isovlp=kTRUE, Double_t ovlp=0.01);  Creates a named overlap belonging to volume VOL and having the size OVLP. ;  ;  ~TGeoOverlap () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  Define double-click action. ;  ; Int_t Compare (const TObject *obj) const override;  Method to compare this overlap with another. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Distance to primitive for an overlap. ;  ; void Draw (Option_t *option="""") overri",MatchSource.WIKI,doc/master/classTGeoOverlap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoOverlap.html
Security,hash,hash,"oid StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Validate () const;  Validate this overlap. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoOverlap.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoOverlap.html
Availability,error,error,"l() overrideTGeoPaintervirtual; DrawPath(const char *path, Option_t *option="""") overrideTGeoPaintervirtual; DrawPolygon(const TGeoPolygon *poly) overrideTGeoPaintervirtual; DrawShape(TGeoShape *shape, Option_t *option="""") overrideTGeoPaintervirtual; DrawVolume(TGeoVolume *vol, Option_t *option="""") overrideTGeoPaintervirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EditGeometry(Option_t *option="""") overrideTGeoPaintervirtual; EGeoBombOption enum nameTVirtualGeoPainter; EGeoVisLevel enum nameTVirtualGeoPainter; EGeoVisOption enum nameTVirtualGeoPainter; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; EstimateCameraMove(Double_t tmin, Double_t tmax, Double_t *start, Double_t *end) overrideTGeoPaintervirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; ExecuteManagerEvent(TGeoManager *geom, Int_t event, Int_t px, Int_t py) overrideTGeoPaintervirtual; ExecuteShapeEvent(TGeoShape *shape, Int_t event, Int_t px, Int_t py) overrideTGeoPaintervirtual; ExecuteVolumeEvent(TGeoVolume *volume, Int_t event, Int_t px, Int_t py) overrideTGeoPaintervirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fBombRTGeoPainterprivate; fBombXTGeoPainterprivate; fBombYTGeoPainterprivate; fBombZTGeoPainterprivate; fBufferTGeoPainterprivate; fCheckedBoxTGeoPainterprivate; fCheckedNodeTGeoPainterprivate; fCheckerTGeoPainterprivate; fClippingShapeTGeoPainterprivate; fExplodedViewTGeoPainterprivate; fgDtorOnlyTObjectprivatestatic; fGeoManagerTGeoPainterprivate; fgGeoPainterTVirtualGeoPainterprotectedstatic; fGlobalTGeoPainterprivate; fgObjectStatTObjectprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fIsEditableTGeoPainterpriv",MatchSource.WIKI,doc/master/classTGeoPainter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPainter-members.html
Deployability,update,update,,MatchSource.WIKI,doc/master/classTGeoPainter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPainter-members.html
Modifiability,inherit,inherited,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TGeoPainter Member List. This is the complete list of members for TGeoPainter, including all inherited members. AbstractMethod(const char *method) constTObject; AddSize3D(Int_t numpoints, Int_t numsegs, Int_t numpolys) overrideTGeoPaintervirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AddTrack(Int_t id, Int_t pdgcode, TObject *part) overrideTGeoPaintervirtual; AddTrackPoint(Double_t *point, Double_t *box, Bool_t reset=kFALSE) overrideTGeoPaintervirtual; AppendPad(Option_t *option="""")TObjectvirtual; BombTranslation(const Double_t *tr, Double_t *bombtr) overrideTGeoPaintervirtual; Browse(TBrowser *b)TObjectvirtual; CheckBoundaryErrors(Int_t ntracks=1000000, Double_t radius=-1.) overrideTGeoPaintervirtual; CheckBoundaryReference(Int_t icheck=-1) overrideTGeoPaintervirtual; CheckedHash()TObjectinline; CheckEdit()TGeoPainter; CheckGeometry(Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const overrideTGeoPaintervirtual; CheckGeometryFull(Bool_t checkoverlaps=kTRUE, Bool_t checkcrossings=kTRUE, Int_t nrays=10000, const Double_t *vertex=nullptr) overrideTGeoPaintervirtual; CheckOverlaps(const TGeoVolume *vol, Double_t ovlp=0.1, Option_t *option="""") const overrideTGeoPaintervirtual; CheckPoint(Double_t x=0, Double_t y=0, Double_t z=0, Option_t *option="""", Double_t safety=0.) overrideTGeoPaintervirtual; CheckShape(TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option) overrideTGeoPaintervirtual; Class()TVirtualGeoPainterstatic; Class_Name()TVirtualGeoPainterstatic; Class_Version()TVirtualGeoPainterinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; ClearVisibleVolumes()TGeoPainterprotected; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Copy(TObject &object) constTObjectvirtual; CountNodes(TGeoVolume *vol, Int_t level) constTGeoPainter; CountVisibleN",MatchSource.WIKI,doc/master/classTGeoPainter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPainter-members.html
Safety,safe,safety,"virtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AddTrack(Int_t id, Int_t pdgcode, TObject *part) overrideTGeoPaintervirtual; AddTrackPoint(Double_t *point, Double_t *box, Bool_t reset=kFALSE) overrideTGeoPaintervirtual; AppendPad(Option_t *option="""")TObjectvirtual; BombTranslation(const Double_t *tr, Double_t *bombtr) overrideTGeoPaintervirtual; Browse(TBrowser *b)TObjectvirtual; CheckBoundaryErrors(Int_t ntracks=1000000, Double_t radius=-1.) overrideTGeoPaintervirtual; CheckBoundaryReference(Int_t icheck=-1) overrideTGeoPaintervirtual; CheckedHash()TObjectinline; CheckEdit()TGeoPainter; CheckGeometry(Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const overrideTGeoPaintervirtual; CheckGeometryFull(Bool_t checkoverlaps=kTRUE, Bool_t checkcrossings=kTRUE, Int_t nrays=10000, const Double_t *vertex=nullptr) overrideTGeoPaintervirtual; CheckOverlaps(const TGeoVolume *vol, Double_t ovlp=0.1, Option_t *option="""") const overrideTGeoPaintervirtual; CheckPoint(Double_t x=0, Double_t y=0, Double_t z=0, Option_t *option="""", Double_t safety=0.) overrideTGeoPaintervirtual; CheckShape(TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option) overrideTGeoPaintervirtual; Class()TVirtualGeoPainterstatic; Class_Name()TVirtualGeoPainterstatic; Class_Version()TVirtualGeoPainterinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; ClearVisibleVolumes()TGeoPainterprotected; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Copy(TObject &object) constTObjectvirtual; CountNodes(TGeoVolume *vol, Int_t level) constTGeoPainter; CountVisibleNodes() overrideTGeoPaintervirtual; DeclFileName()TVirtualGeoPainterinlinestatic; DefaultAngles() overrideTGeoPaintervirtual; DefaultColors() overrideTGeoPaintervirtual; DefineColors() constTGeoPainterprivate; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DistanceToPrimitiveVol(TGeoVolum",MatchSource.WIKI,doc/master/classTGeoPainter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPainter-members.html
Testability,test,testNo,") overrideTGeoPaintervirtual; CheckShape(TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option) overrideTGeoPaintervirtual; Class()TVirtualGeoPainterstatic; Class_Name()TVirtualGeoPainterstatic; Class_Version()TVirtualGeoPainterinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; ClearVisibleVolumes()TGeoPainterprotected; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; Copy(TObject &object) constTObjectvirtual; CountNodes(TGeoVolume *vol, Int_t level) constTGeoPainter; CountVisibleN",MatchSource.WIKI,doc/master/classTGeoPainter-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPainter-members.html
Availability,error,errors," line 39 of file TGeoPainter.h. Public Member Functions;  TGeoPainter (TGeoManager *manager);  Default constructor. ;  ;  ~TGeoPainter () override;  Default destructor. ;  ; void AddSize3D (Int_t numpoints, Int_t numsegs, Int_t numpolys) override;  Add numpoints, numsegs, numpolys to the global 3D size. ;  ; TVirtualGeoTrack * AddTrack (Int_t id, Int_t pdgcode, TObject *part) override;  Create a primary TGeoTrack. ;  ; void AddTrackPoint (Double_t *point, Double_t *box, Bool_t reset=kFALSE) override;  Average center of view of all painted tracklets and compute view box. ;  ; void BombTranslation (const Double_t *tr, Double_t *bombtr) override;  Get the new 'bombed' translation vector according current exploded view mode. ;  ; void CheckBoundaryErrors (Int_t ntracks=1000000, Double_t radius=-1.) override;  Check pushes and pulls needed to cross the next boundary with respect to the position given by FindNextBoundary. ;  ; void CheckBoundaryReference (Int_t icheck=-1) override;  Check the boundary errors reference file created by CheckBoundaryErrors method. ;  ; void CheckEdit ();  Check if Ged library is loaded and load geometry editor classe. ;  ; void CheckGeometry (Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const override;  Geometry checking method (see TGeoChecker). ;  ; void CheckGeometryFull (Bool_t checkoverlaps=kTRUE, Bool_t checkcrossings=kTRUE, Int_t nrays=10000, const Double_t *vertex=nullptr) override;  Geometry checking method (see: TGeoManager::CheckGeometry()) ;  ; void CheckOverlaps (const TGeoVolume *vol, Double_t ovlp=0.1, Option_t *option="""") const override;  Check overlaps for the top volume of the geometry, within a limit OVLP. ;  ; void CheckPoint (Double_t x=0, Double_t y=0, Double_t z=0, Option_t *option="""", Double_t safety=0.) override;  Check current point in the geometry. ;  ; void CheckShape (TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option) override;  Test for shape navigation methods. ;  ; Int_t Count",MatchSource.WIKI,doc/master/classTGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html
Deployability,update,update,"de;  ; void GetViewAngles (Double_t &longitude, Double_t &latitude, Double_t &psi) override;  Get the current view angles. ;  ; Double_t * GetViewBox () override;  ; Int_t GetVisLevel () const override;  ; Int_t GetVisOption () const override;  ; const char * GetVolumeInfo (const TGeoVolume *volume, Int_t px, Int_t py) const override;  Get some info about the current selected volume. ;  ; void GrabFocus (Int_t nfr=0, Double_t dlong=0, Double_t dlat=0, Double_t dpsi=0) override;  Move focus to current volume. ;  ; Bool_t IsExplodedView () const override;  ; Bool_t IsPaintingShape () const override;  ; Bool_t IsRaytracing () const override;  ; TH2F * LegoPlot (Int_t ntheta=60, Double_t themin=0., Double_t themax=180., Int_t nphi=90, Double_t phimin=0., Double_t phimax=360., Double_t rmin=0., Double_t rmax=9999999, Option_t *option="""") override;  Generate a lego plot fot the top volume, according to option. ;  ; void Lock (Bool_t flag=kTRUE);  ; void ModifiedPad (Bool_t update=kFALSE) const override;  Check if a pad and view are present and send signal ""Modified"" to pad. ;  ; void OpProgress (const char *opname, Long64_t current, Long64_t size, TStopwatch *watch=nullptr, Bool_t last=kFALSE, Bool_t refresh=kFALSE, const char *msg="""") override;  Text progress bar. ;  ; void Paint (Option_t *option="""") override;  Paint current geometry according to option. ;  ; void PaintNode (TGeoNode *node, Option_t *option="""", TGeoMatrix *global=nullptr) override;  Paint recursively a node and its content according to visualization options. ;  ; void PaintOverlap (void *ovlp, Option_t *option="""") override;  Paint an overlap. ;  ; void PaintPhysicalNode (TGeoPhysicalNode *node, Option_t *option="""");  Paints a physical node associated with a path. ;  ; Bool_t PaintShape (const TGeoShape &shape, Option_t *option) const;  Paint the supplied shape into the current 3D viewer. ;  ; void PaintShape (TGeoShape *shape, Option_t *option="""") override;  Paint an overlap. ;  ; void PaintVolume (TGeoV",MatchSource.WIKI,doc/master/classTGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html
Integrability,interface,interfaces,". ROOT: TGeoPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TGeoPainter Class ReferenceThe Geometry Package » Geometry painter. ; Class implementing all draw interfaces for a generic 3D viewer using TBuffer3D mechanism. ; Definition at line 39 of file TGeoPainter.h. Public Member Functions;  TGeoPainter (TGeoManager *manager);  Default constructor. ;  ;  ~TGeoPainter () override;  Default destructor. ;  ; void AddSize3D (Int_t numpoints, Int_t numsegs, Int_t numpolys) override;  Add numpoints, numsegs, numpolys to the global 3D size. ;  ; TVirtualGeoTrack * AddTrack (Int_t id, Int_t pdgcode, TObject *part) override;  Create a primary TGeoTrack. ;  ; void AddTrackPoint (Double_t *point, Double_t *box, Bool_t reset=kFALSE) override;  Average center of view of all painted tracklets and compute view box. ;  ; void BombTranslation (const Double_t *tr, Double_t *bombtr) override;  Get the new 'bombed' translation vector according current exploded view mode. ;  ; void CheckBoundaryErrors (Int_t ntracks=1000000, Double_t radius=-1.) override;  Check pushes and pulls needed to cross the next boundary with respect to the position given by FindNextBoundary. ;  ; void CheckBoundaryReference (Int_t icheck=-1) override;  Check the boundary errors reference file created by CheckBoundaryErrors method. ;  ; void CheckEdit ();  Check if Ged library is loaded and load geometry editor classe. ;  ; void CheckGeometry (Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const override;  Geometry checking method (see TGeoChecker). ;  ; void CheckGeometryFull (Bool_t checkoverlaps=kTRUE, Bool_t checkcrossings=kTRUE, Int_t nrays=10000, const Double_t *vertex=nullptr) override;  Geometry checking method (see: TGeoManager::CheckGeometry()) ;  ; void CheckOverlaps (const TGeoV",MatchSource.WIKI,doc/master/classTGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html
Modifiability,plugin,plugin,"g box of a volume. ;  ; void RandomRays (Int_t nrays, Double_t startx, Double_t starty, Double_t startz, const char *target_vol=nullptr, Bool_t check_norm=kFALSE) override;  Shoot nrays in the current drawn geometry. ;  ; void Raytrace (Option_t *option="""") override;  Raytrace current drawn geometry. ;  ; TGeoNode * SamplePoints (Int_t npoints, Double_t &dist, Double_t epsil, const char *g3path) override;  Shoot npoints randomly in a box of 1E-5 around current point. ;  ; void SetBombFactors (Double_t bombx=1.3, Double_t bomby=1.3, Double_t bombz=1.3, Double_t bombr=1.3) override;  Set cartesian and radial bomb factors for translations. ;  ; void SetCheckedNode (TGeoNode *node) override;  Select a node to be checked for overlaps. ;  ; void SetClippingShape (TGeoShape *shape) override;  ; void SetExplodedView (Int_t iopt=0) override;  Set type of exploding view. ;  ; void SetGeoManager (TGeoManager *geom) override;  ; void SetIteratorPlugin (TGeoIteratorPlugin *plugin) override;  ; void SetNmeshPoints (Int_t npoints) override;  Set number of points to be generated on the shape outline when checking for overlaps. ;  ; void SetNsegments (Int_t nseg=20) override;  Set number of segments to approximate circles. ;  ; void SetRaytracing (Bool_t flag=kTRUE) override;  ; void SetTopVisible (Bool_t vis=kTRUE) override;  Set top geometry volume as visible. ;  ; void SetTopVolume (TGeoVolume *vol) override;  ; void SetVisLevel (Int_t level=3) override;  Set default level down to which visualization is performed. ;  ; void SetVisOption (Int_t option=0) override;  Set drawing mode : ;  ; Int_t ShapeDistancetoPrimitive (const TGeoShape *shape, Int_t numpoints, Int_t px, Int_t py) const override;  Returns distance between point px,py on the pad an a shape. ;  ; void Test (Int_t npoints, Option_t *option) override;  Check time of finding ""Where am I"" for n points. ;  ; void TestOverlaps (const char *path) override;  Geometry overlap checker based on sampling. ;  ; Bool_t TestVoxels (",MatchSource.WIKI,doc/master/classTGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html
Performance,load,loaded," ;  ;  ~TGeoPainter () override;  Default destructor. ;  ; void AddSize3D (Int_t numpoints, Int_t numsegs, Int_t numpolys) override;  Add numpoints, numsegs, numpolys to the global 3D size. ;  ; TVirtualGeoTrack * AddTrack (Int_t id, Int_t pdgcode, TObject *part) override;  Create a primary TGeoTrack. ;  ; void AddTrackPoint (Double_t *point, Double_t *box, Bool_t reset=kFALSE) override;  Average center of view of all painted tracklets and compute view box. ;  ; void BombTranslation (const Double_t *tr, Double_t *bombtr) override;  Get the new 'bombed' translation vector according current exploded view mode. ;  ; void CheckBoundaryErrors (Int_t ntracks=1000000, Double_t radius=-1.) override;  Check pushes and pulls needed to cross the next boundary with respect to the position given by FindNextBoundary. ;  ; void CheckBoundaryReference (Int_t icheck=-1) override;  Check the boundary errors reference file created by CheckBoundaryErrors method. ;  ; void CheckEdit ();  Check if Ged library is loaded and load geometry editor classe. ;  ; void CheckGeometry (Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const override;  Geometry checking method (see TGeoChecker). ;  ; void CheckGeometryFull (Bool_t checkoverlaps=kTRUE, Bool_t checkcrossings=kTRUE, Int_t nrays=10000, const Double_t *vertex=nullptr) override;  Geometry checking method (see: TGeoManager::CheckGeometry()) ;  ; void CheckOverlaps (const TGeoVolume *vol, Double_t ovlp=0.1, Option_t *option="""") const override;  Check overlaps for the top volume of the geometry, within a limit OVLP. ;  ; void CheckPoint (Double_t x=0, Double_t y=0, Double_t z=0, Option_t *option="""", Double_t safety=0.) override;  Check current point in the geometry. ;  ; void CheckShape (TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option) override;  Test for shape navigation methods. ;  ; Int_t CountNodes (TGeoVolume *vol, Int_t level) const;  Count number of visible nodes down to a given level. ;  ; Int_t CountVi",MatchSource.WIKI,doc/master/classTGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html
Safety,safe,safety,"undaryErrors (Int_t ntracks=1000000, Double_t radius=-1.) override;  Check pushes and pulls needed to cross the next boundary with respect to the position given by FindNextBoundary. ;  ; void CheckBoundaryReference (Int_t icheck=-1) override;  Check the boundary errors reference file created by CheckBoundaryErrors method. ;  ; void CheckEdit ();  Check if Ged library is loaded and load geometry editor classe. ;  ; void CheckGeometry (Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const override;  Geometry checking method (see TGeoChecker). ;  ; void CheckGeometryFull (Bool_t checkoverlaps=kTRUE, Bool_t checkcrossings=kTRUE, Int_t nrays=10000, const Double_t *vertex=nullptr) override;  Geometry checking method (see: TGeoManager::CheckGeometry()) ;  ; void CheckOverlaps (const TGeoVolume *vol, Double_t ovlp=0.1, Option_t *option="""") const override;  Check overlaps for the top volume of the geometry, within a limit OVLP. ;  ; void CheckPoint (Double_t x=0, Double_t y=0, Double_t z=0, Option_t *option="""", Double_t safety=0.) override;  Check current point in the geometry. ;  ; void CheckShape (TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option) override;  Test for shape navigation methods. ;  ; Int_t CountNodes (TGeoVolume *vol, Int_t level) const;  Count number of visible nodes down to a given level. ;  ; Int_t CountVisibleNodes () override;  Count total number of visible nodes. ;  ; void DefaultAngles () override;  Set default angles for the current view. ;  ; void DefaultColors () override;  Set default volume colors according to tracking media. ;  ; Int_t DistanceToPrimitiveVol (TGeoVolume *vol, Int_t px, Int_t py) override;  Compute the closest distance of approach from point px,py to a volume. ;  ; void Draw (Option_t *option="""") override;  Draw method. ;  ; void DrawBatemanSol (TGeoBatemanSol *sol, Option_t *option="""") override;  Draw the time evolution of a radionuclide. ;  ; void DrawCurrentPoint (Int_t color) override;  Draw curr",MatchSource.WIKI,doc/master/classTGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html
Testability,test,testNo,"NextBoundary. ;  ; void CheckBoundaryReference (Int_t icheck=-1) override;  Check the boundary errors reference file created by CheckBoundaryErrors method. ;  ; void CheckEdit ();  Check if Ged library is loaded and load geometry editor classe. ;  ; void CheckGeometry (Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const override;  Geometry checking method (see TGeoChecker). ;  ; void CheckGeometryFull (Bool_t checkoverlaps=kTRUE, Bool_t checkcrossings=kTRUE, Int_t nrays=10000, const Double_t *vertex=nullptr) override;  Geometry checking method (see: TGeoManager::CheckGeometry()) ;  ; void CheckOverlaps (const TGeoVolume *vol, Double_t ovlp=0.1, Option_t *option="""") const override;  Check overlaps for the top volume of the geometry, within a limit OVLP. ;  ; void CheckPoint (Double_t x=0, Double_t y=0, Double_t z=0, Option_t *option="""", Double_t safety=0.) override;  Check current point in the geometry. ;  ; void CheckShape (TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option) override;  Test for shape navigation methods. ;  ; Int_t CountNodes (TGeoVolume *vol, Int_t level) const;  Count number of visible nodes down to a given level. ;  ; Int_t CountVisibleNodes () override;  Count total number of visible nodes. ;  ; void DefaultAngles () override;  Set default angles for the current view. ;  ; void DefaultColors () override;  Set default volume colors according to tracking media. ;  ; Int_t DistanceToPrimitiveVol (TGeoVolume *vol, Int_t px, Int_t py) override;  Compute the closest distance of approach from point px,py to a volume. ;  ; void Draw (Option_t *option="""") override;  Draw method. ;  ; void DrawBatemanSol (TGeoBatemanSol *sol, Option_t *option="""") override;  Draw the time evolution of a radionuclide. ;  ; void DrawCurrentPoint (Int_t color) override;  Draw current point in the same view. ;  ; void DrawOnly (Option_t *option="""") override;  Draw only one volume. ;  ; void DrawOverlap (void *ovlp, Option_t *option="""") override; ",MatchSource.WIKI,doc/master/classTGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html
Usability,progress bar,progress bar,"el () const override;  ; Int_t GetVisOption () const override;  ; const char * GetVolumeInfo (const TGeoVolume *volume, Int_t px, Int_t py) const override;  Get some info about the current selected volume. ;  ; void GrabFocus (Int_t nfr=0, Double_t dlong=0, Double_t dlat=0, Double_t dpsi=0) override;  Move focus to current volume. ;  ; Bool_t IsExplodedView () const override;  ; Bool_t IsPaintingShape () const override;  ; Bool_t IsRaytracing () const override;  ; TH2F * LegoPlot (Int_t ntheta=60, Double_t themin=0., Double_t themax=180., Int_t nphi=90, Double_t phimin=0., Double_t phimax=360., Double_t rmin=0., Double_t rmax=9999999, Option_t *option="""") override;  Generate a lego plot fot the top volume, according to option. ;  ; void Lock (Bool_t flag=kTRUE);  ; void ModifiedPad (Bool_t update=kFALSE) const override;  Check if a pad and view are present and send signal ""Modified"" to pad. ;  ; void OpProgress (const char *opname, Long64_t current, Long64_t size, TStopwatch *watch=nullptr, Bool_t last=kFALSE, Bool_t refresh=kFALSE, const char *msg="""") override;  Text progress bar. ;  ; void Paint (Option_t *option="""") override;  Paint current geometry according to option. ;  ; void PaintNode (TGeoNode *node, Option_t *option="""", TGeoMatrix *global=nullptr) override;  Paint recursively a node and its content according to visualization options. ;  ; void PaintOverlap (void *ovlp, Option_t *option="""") override;  Paint an overlap. ;  ; void PaintPhysicalNode (TGeoPhysicalNode *node, Option_t *option="""");  Paints a physical node associated with a path. ;  ; Bool_t PaintShape (const TGeoShape &shape, Option_t *option) const;  Paint the supplied shape into the current 3D viewer. ;  ; void PaintShape (TGeoShape *shape, Option_t *option="""") override;  Paint an overlap. ;  ; void PaintVolume (TGeoVolume *vol, Option_t *option="""", TGeoMatrix *global=nullptr) override;  Paint recursively a node and its content according to visualization options. ;  ; void PrintOverlaps () const",MatchSource.WIKI,doc/master/classTGeoPainter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html
Availability,error,error,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoPara.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPara.html
Integrability,message,message,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoPara.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPara.html
Modifiability,inherit,inherited,"() const;  ; void InspectShape () const override;  ; TClass * IsA () const override;  ; Bool_t IsCylType () const override;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const override;  ; void Safety_v (const Double_t *points, const Bool_t *inside, Double_t *safe, Int_t vecsize) const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetDimensions (Double_t *param) override;  ; void SetPoints (Double_t *points) const override;  ; void SetPoints (Float_t *points) const override;  ; void Sizeof3D () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoBBox;  TGeoBBox ();  ;  TGeoBBox (const char *name, Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ;  TGeoBBox (Double_t *param);  ;  TGeoBBox (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ;  ~TGeoBBox () override;  ; Bool_t CouldBeCrossed (const Double_t *point, const Double_t *dir) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; const char * GetAxisName (Int_t iaxis) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; virtual Double_t GetDX () const;  ; virtual Double_t GetDY () const;  ; virtual Double_t GetDZ () const;  ; virtual Double_t GetFacetArea (Int_t index=0) const;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; Bool_t GetPointsOnSegments (Int_t npoints, Double_t *array) const override;  ; virtual Bool_t IsNullBox () cons",MatchSource.WIKI,doc/master/classTGeoPara.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPara.html
Safety,safe,safe," Public Member Functions;  TGeoPara ();  ;  TGeoPara (const char *name, Double_t dx, Double_t dy, Double_t dz, Double_t alpha, Double_t theta, Double_t phi);  ;  TGeoPara (Double_t *param);  ;  TGeoPara (Double_t dx, Double_t dy, Double_t dz, Double_t alpha, Double_t theta, Double_t phi);  ;  ~TGeoPara () override;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; Double_t GetAlpha () const;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; Int_t Get",MatchSource.WIKI,doc/master/classTGeoPara.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPara.html
Security,hash,hash," &ClassDef_StreamerNVirtual_b);  ; Bool_t TestShapeBit (UInt_t f) const;  ; Int_t TestShapeBits (UInt_t f) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoPara.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPara.html
Testability,test,testNo,"ual Double_t GetFacetArea (Int_t index=0) const;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; Bool_t GetPointsOnSegments (Int_t npoints, Double_t *array) const override;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; TBuffer3D * MakeBuffer3D () const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void SetSegsAndPols (TBuffer3D &buffer) const override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; TClass * IsA () const override;  ; virtual Bool_t IsAssembly () const;  ; virtual Bool_t IsComposite () const;  ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; vo",MatchSource.WIKI,doc/master/classTGeoPara.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPara.html
Availability,error,error,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoParaboloid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoParaboloid.html
Integrability,message,message,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoParaboloid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoParaboloid.html
Modifiability,inherit,inherited,"e_t dz);  ; void SetPoints (Double_t *points) const override;  ; void SetPoints (Float_t *points) const override;  ; void SetSegsAndPols (TBuffer3D &buff) const override;  ; void Sizeof3D () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoBBox;  TGeoBBox ();  ;  TGeoBBox (const char *name, Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ;  TGeoBBox (Double_t *param);  ;  TGeoBBox (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ;  ~TGeoBBox () override;  ; Bool_t CouldBeCrossed (const Double_t *point, const Double_t *dir) const override;  ; const char * GetAxisName (Int_t iaxis) const override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; Int_t GetByteCount () const override;  ; virtual Double_t GetDX () const;  ; virtual Double_t GetDY () const;  ; virtual Double_t GetDZ () const;  ; virtual Double_t GetFacetArea (Int_t index=0) const;  ; Int_t GetFittingBox (const TGeoBBox *parambox, TGeoMatrix *mat, Double_t &dx, Double_t &dy, Double_t &dz) const override;  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThread",MatchSource.WIKI,doc/master/classTGeoParaboloid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoParaboloid.html
Safety,safe,safe,"ox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistToParaboloid (const Double_t *point, const Double_t *dir, Bool_t in) const;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; Double_t GetDz () const;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *mother, TGeoMatrix *mat) const override;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  ; Int_t GetNmeshVertices () const override;  ; Bool_t GetPointsOnSegments (Int_t, Double_t *) const override;  ; Double_t GetRhi () const;  ; Double_t GetRlo () const;  ; void InspectShape () const override;  ; TClass * IsA () const override;  ; Bool_t IsCylType () const override; ",MatchSource.WIKI,doc/master/classTGeoParaboloid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoParaboloid.html
Security,hash,hash," &ClassDef_StreamerNVirtual_b);  ; Bool_t TestShapeBit (UInt_t f) const;  ; Int_t TestShapeBits (UInt_t f) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoParaboloid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoParaboloid.html
Testability,test,testNo,"teCount () const override;  ; virtual Double_t GetDX () const;  ; virtual Double_t GetDY () const;  ; virtual Double_t GetDZ () const;  ; virtual Double_t GetFacetArea (Int_t index=0) const;  ; Int_t GetFittingBox (const TGeoBBox *parambox, TGeoMatrix *mat, Double_t &dx, Double_t &dy, Double_t &dz) const override;  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; TClass * IsA () const override;  ; virtual Bool_t IsAssembly () const;  ; virtual Bool_t IsComposite () const;  ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; vo",MatchSource.WIKI,doc/master/classTGeoParaboloid.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoParaboloid.html
Availability,toler,tolerance,"textMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoParallelWorld ();  ;  TGeoParallelWorld (const char *name, TGeoManager *mgr);  Default constructor. ;  ;  ~TGeoParallelWorld () override;  Destructor. ;  ; void AddNode (const char *path);  Add a node normally to this world. Overlapping nodes not allowed. ;  ; void AddOverlap (const char *volname, Bool_t activate=kTRUE);  To use this optimization, the user should declare the full list of volumes which may overlap with any of the physical nodes of the parallel world. ;  ; void AddOverlap (TGeoVolume *vol, Bool_t activate=kTRUE);  To use this optimization, the user should declare the full list of volumes which may overlap with any of the physical nodes of the parallel world. ;  ; void BuildBVH ();  Build the BVH acceleration structure. ;  ; bool CheckBVH (void *, size_t) const;  Check/validate the BVH acceleration structure. ;  ; void CheckOverlaps (Double_t ovlp=0.001);  Check overlaps within a tolerance value. ;  ; Bool_t CloseGeometry ();  The main geometry must be closed. ;  ; void Draw (Option_t *option) override;  Draw the parallel world. ;  ; TGeoPhysicalNode * FindNextBoundary (Double_t point[3], Double_t dir[3], Double_t &step, Double_t stepmax=1.E30);  ; TGeoPhysicalNode * FindNode (Double_t point[3]);  ; AccelerationMode const & GetAccelerationMode () const;  ; TGeoManager * GetGeometry () const;  ; TGeoVolume * GetVolume () const;  ; TClass * IsA () const override;  ; Bool_t IsClosed () const;  ; Bool_t IsUsingOverlaps () const;  ; void PrintBVH () const;  Prints the BVH. ;  ; Int_t PrintDetectedOverlaps () const;  Print the overlaps which were detected during real tracking. ;  ; void RefreshPhysicalNodes ();  Refresh the node pointers and re-voxelize. ;  ; void ResetOverlaps () const;  Reset overlapflag for all volumes in geometry. ;  ; Double_t Safety (Double_t point[3], Double_t safmax=1.E30);  ; void SetAccelerationMode (AccelerationMode const &mode);  ;",MatchSource.WIKI,doc/master/classTGeoParallelWorld.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoParallelWorld.html
Integrability,interface,interface,". ROOT: TGeoParallelWorld Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGeoParallelWorld Class ReferenceThe Geometry Package » Geometry classes. ; Base class for a flat parallel geometry. ; The parallel geometry can be composed by both normal volumes added using the AddNode interface (not implemented yet) or by physical nodes which will use as position their actual global matrix with respect to the top volume of the main geometry.; All these nodes are added as daughters to the ""top"" volume of the parallel world which acts as a navigation helper in this parallel world. The parallel world has to be closed before calling any navigation method. ; Definition at line 23 of file TGeoParallelWorld.h. Classes; struct  SafetyVoxelInfo;  . Public Types; enum class  AccelerationMode { kVoxelFinder; , kBVH; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoParallelWorld ();  ;  TGeoParallelWorld (const char *name, TGeoManager *mgr);  Default constructor. ;  ;  ~TGeoParallelWorld () override;  Destructor. ;  ; void AddNode (const char *path);  Add a node normally to this world. Overlapping nodes not allowe",MatchSource.WIKI,doc/master/classTGeoParallelWorld.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoParallelWorld.html
Modifiability,inherit,inherited," members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGeoParallelWorld Class ReferenceThe Geometry Package » Geometry classes. ; Base class for a flat parallel geometry. ; The parallel geometry can be composed by both normal volumes added using the AddNode interface (not implemented yet) or by physical nodes which will use as position their actual global matrix with respect to the top volume of the main geometry.; All these nodes are added as daughters to the ""top"" volume of the parallel world which acts as a navigation helper in this parallel world. The parallel world has to be closed before calling any navigation method. ; Definition at line 23 of file TGeoParallelWorld.h. Classes; struct  SafetyVoxelInfo;  . Public Types; enum class  AccelerationMode { kVoxelFinder; , kBVH; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoParallelWorld ();  ;  TGeoParallelWorld (const char *name, TGeoManager *mgr);  Default constructor. ;  ;  ~TGeoParallelWorld () override;  Destructor. ;  ; void AddNode (const char *path);  Add a node normally to this world. Overlapping nodes not allowed. ;  ; void AddOverlap (const char *volname, Bool_t activate=kTRUE);  To use this optimization, the user should declare the full list",MatchSource.WIKI,doc/master/classTGeoParallelWorld.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoParallelWorld.html
Performance,optimiz,optimization,"Object; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoParallelWorld ();  ;  TGeoParallelWorld (const char *name, TGeoManager *mgr);  Default constructor. ;  ;  ~TGeoParallelWorld () override;  Destructor. ;  ; void AddNode (const char *path);  Add a node normally to this world. Overlapping nodes not allowed. ;  ; void AddOverlap (const char *volname, Bool_t activate=kTRUE);  To use this optimization, the user should declare the full list of volumes which may overlap with any of the physical nodes of the parallel world. ;  ; void AddOverlap (TGeoVolume *vol, Bool_t activate=kTRUE);  To use this optimization, the user should declare the full list of volumes which may overlap with any of the physical nodes of the parallel world. ;  ; void BuildBVH ();  Build the BVH acceleration structure. ;  ; bool CheckBVH (void *, size_t) const;  Check/validate the BVH acceleration structure. ;  ; void CheckOverlaps (Double_t ovlp=0.001);  Check overlaps within a tolerance value. ;  ; Bool_t CloseGeometry ();  The main geometry must be closed. ;  ; void Draw (Option_t *option) override;  Draw the parallel world. ;  ; TGeoPhysicalNode * FindNextBoundary (Double_t point[3], Double_t dir[3], Double_t &step, Double_t stepmax=1.E30);  ; TGeoPhysicalNode * FindNode (Double_t point[3]);  ; AccelerationMode const & GetAccelerationMode () const;  ; TGeoManager * GetGeometry () const;  ; TGeoVolume * GetVolume () const; ",MatchSource.WIKI,doc/master/classTGeoParallelWorld.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoParallelWorld.html
Safety,detect,detected,"n, the user should declare the full list of volumes which may overlap with any of the physical nodes of the parallel world. ;  ; void BuildBVH ();  Build the BVH acceleration structure. ;  ; bool CheckBVH (void *, size_t) const;  Check/validate the BVH acceleration structure. ;  ; void CheckOverlaps (Double_t ovlp=0.001);  Check overlaps within a tolerance value. ;  ; Bool_t CloseGeometry ();  The main geometry must be closed. ;  ; void Draw (Option_t *option) override;  Draw the parallel world. ;  ; TGeoPhysicalNode * FindNextBoundary (Double_t point[3], Double_t dir[3], Double_t &step, Double_t stepmax=1.E30);  ; TGeoPhysicalNode * FindNode (Double_t point[3]);  ; AccelerationMode const & GetAccelerationMode () const;  ; TGeoManager * GetGeometry () const;  ; TGeoVolume * GetVolume () const;  ; TClass * IsA () const override;  ; Bool_t IsClosed () const;  ; Bool_t IsUsingOverlaps () const;  ; void PrintBVH () const;  Prints the BVH. ;  ; Int_t PrintDetectedOverlaps () const;  Print the overlaps which were detected during real tracking. ;  ; void RefreshPhysicalNodes ();  Refresh the node pointers and re-voxelize. ;  ; void ResetOverlaps () const;  Reset overlapflag for all volumes in geometry. ;  ; Double_t Safety (Double_t point[3], Double_t safmax=1.E30);  ; void SetAccelerationMode (AccelerationMode const &mode);  ; void SetUseOverlaps (Bool_t flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; ",MatchSource.WIKI,doc/master/classTGeoParallelWorld.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoParallelWorld.html
Security,validat,validate," , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoParallelWorld ();  ;  TGeoParallelWorld (const char *name, TGeoManager *mgr);  Default constructor. ;  ;  ~TGeoParallelWorld () override;  Destructor. ;  ; void AddNode (const char *path);  Add a node normally to this world. Overlapping nodes not allowed. ;  ; void AddOverlap (const char *volname, Bool_t activate=kTRUE);  To use this optimization, the user should declare the full list of volumes which may overlap with any of the physical nodes of the parallel world. ;  ; void AddOverlap (TGeoVolume *vol, Bool_t activate=kTRUE);  To use this optimization, the user should declare the full list of volumes which may overlap with any of the physical nodes of the parallel world. ;  ; void BuildBVH ();  Build the BVH acceleration structure. ;  ; bool CheckBVH (void *, size_t) const;  Check/validate the BVH acceleration structure. ;  ; void CheckOverlaps (Double_t ovlp=0.001);  Check overlaps within a tolerance value. ;  ; Bool_t CloseGeometry ();  The main geometry must be closed. ;  ; void Draw (Option_t *option) override;  Draw the parallel world. ;  ; TGeoPhysicalNode * FindNextBoundary (Double_t point[3], Double_t dir[3], Double_t &step, Double_t stepmax=1.E30);  ; TGeoPhysicalNode * FindNode (Double_t point[3]);  ; AccelerationMode const & GetAccelerationMode () const;  ; TGeoManager * GetGeometry () const;  ; TGeoVolume * GetVolume () const;  ; TClass * IsA () const override;  ; Bool_t IsClosed () const;  ; Bool_t IsUsingOverlaps () const;  ; void PrintBVH () const;  Prints the BVH. ;  ; Int_t PrintDetectedOverlaps () const;  Print the overlaps which were detected during real tracking. ;  ; void RefreshPhysicalNodes ();  Refresh the node pointers and re-voxelize. ;  ; void ResetOverlaps () const;  Reset overlapflag for all volumes in geometry. ;  ; Double_t Sa",MatchSource.WIKI,doc/master/classTGeoParallelWorld.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoParallelWorld.html
Usability,simpl,simple,"le;  . Private Member Functions; TGeoPhysicalNode * FindNextBoundaryBVH (Double_t point[3], Double_t dir[3], Double_t &step, Double_t stepmax=1.E30);  Same functionality as TGeoNavigator::FindNextDaughterBoundary for the parallel world. ;  ; TGeoPhysicalNode * FindNextBoundaryLoop (Double_t point[3], Double_t dir[3], Double_t &step, Double_t stepmax=1.E30);  Same functionality as TGeoNavigator::FindNextDaughterBoundary for the parallel world in a trivial loop version (for debugging) ;  ; TGeoPhysicalNode * FindNextBoundaryOrig (Double_t point[3], Double_t dir[3], Double_t &step, Double_t stepmax=1.E30);  Same functionality as TGeoNavigator::FindNextDaughterBoundary for the parallel world. ;  ; TGeoPhysicalNode * FindNodeBVH (Double_t point[3]);  Finds physical node containing the point. ;  ; TGeoPhysicalNode * FindNodeLoop (Double_t point[3]);  Finds physical node containing the point using simple algorithm (for debugging) ;  ; TGeoPhysicalNode * FindNodeOrig (Double_t point[3]);  Finds physical node containing the point (original version based on TGeoVoxelFinder) ;  ; std::pair< double, double > GetBVHSafetyCandidates (double point[3], std::vector< int > &candidates, double margin=0.) const;  Method to find potentially relevant candidate bounding boxes for safety calculation given a point. ;  ; std::pair< double, double > GetLoopSafetyCandidates (double point[3], std::vector< int > &candidates, double margin=0.) const;  Method to find potentially relevant candidate bounding boxes for safety calculation given a point. ;  ; void InitSafetyVoxel (TGeoVoxelGridIndex const &);  Method to initialize the safety voxel at a specific 3D voxel (grid) index. ;  ; Double_t SafetyBVH (Double_t point[3], Double_t safmax=1.E30);  Compute safety for the parallel world (using pure BVH traversal, mainly for debugging/fallback since VoxelSafety should be faster) ;  ; Double_t SafetyLoop (Double_t point[3], Double_t safmax=1.E30);  Compute safety for the parallel world (trivial loop ve",MatchSource.WIKI,doc/master/classTGeoParallelWorld.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoParallelWorld.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternCylPhi.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternCylPhi.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternCylPhi.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternCylPhi.html
Modifiability,inherit,inherited,"rix () const override;  Return new matrix of type used by this finder. ;  ; TGeoNode * FindNode (Double_t *point, const Double_t *dir=nullptr) override;  find the node containing the query point ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; Bool_t IsOnBoundary (const Double_t *point) const override;  Checks if the current point is on division boundary. ;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGeoVolume. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Default constructor. ;  ;  ~TGeoPatternFinder () override;  Destructor. ;  ; virtual TGeoNode * CdNext ();  Make next node (if any) current. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t GetByteCount () const;  ; Int_t GetCurrent ();  Return current index. ;  ; Int_t GetDivIndex ();  ; Double_t GetEnd () const;  ; virtual TGeoMatrix * GetMatrix ();  Return current matrix. ;  ; Int_t GetNdiv () const;  ; Int_t GetNext () const;  Get index of next division. ;  ; TGeoNode * GetNodeOffset (Int_t idiv);  ; Double_t GetStart () const;  ; Double_t GetStep () const;  ; ThreadData_t & GetThreadData () const;  ; TGeoVolume * GetVolume () const;  ; TClass * IsA () const override;  ; Bool_t IsReflected () const;  ; Bool_t IsSpacedOut () const;  ; void Reflect (Bool_t flag=kTRUE);  ; void SetDivIndex",MatchSource.WIKI,doc/master/classTGeoPatternCylPhi.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternCylPhi.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoPatternCylPhi.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternCylPhi.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternCylR.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternCylR.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternCylR.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternCylR.html
Modifiability,inherit,inherited,"eoNode * FindNode (Double_t *point, const Double_t *dir=nullptr) override;  find the node containing the query point ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; Bool_t IsOnBoundary (const Double_t *point) const override;  Checks if the current point is on division boundary. ;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternCylR & operator= (const TGeoPatternCylR &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Default constructor. ;  ;  ~TGeoPatternFinder () override;  Destructor. ;  ; virtual TGeoNode * CdNext ();  Make next node (if any) current. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t GetByteCount () const;  ; Int_t GetCurrent ();  Return current index. ;  ; Int_t GetDivIndex ();  ; Double_t GetEnd () const;  ; virtual TGeoMatrix * GetMatrix ();  Return current matrix. ;  ; Int_t GetNdiv () const;  ; Int_t GetNext () const;  Get index of next division. ;  ; TGeoNode * GetNodeOffset (Int_t idiv);  ; Double_t GetStart () const;  ; Double_t GetStep () const;  ; ThreadData_t & GetThreadData () const;  ; TGeoVolume * GetVolume () const;  ; TClass * IsA () const override;  ; Bool_t IsReflected () const;  ; Bool_t IsSpacedOut () const;  ; void Reflect (Bool_t flag=kTRUE);  ; void SetDivIndex",MatchSource.WIKI,doc/master/classTGeoPatternCylR.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternCylR.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoPatternCylR.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternCylR.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternFinder.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternFinder.html
Modifiability,inherit,inherited,"v () const;  ; Int_t GetNext () const;  Get index of next division. ;  ; TGeoNode * GetNodeOffset (Int_t idiv);  ; Double_t GetStart () const;  ; Double_t GetStep () const;  ; ThreadData_t & GetThreadData () const;  ; TGeoVolume * GetVolume () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsOnBoundary (const Double_t *) const;  ; Bool_t IsReflected () const;  ; Bool_t IsSpacedOut () const;  ; virtual TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE)=0;  ; void Reflect (Bool_t flag=kTRUE);  ; void SetDivIndex (Int_t index);  ; void SetNext (Int_t index);  Set index of next division. ;  ; void SetRange (Double_t start, Double_t step, Int_t ndivisions);  Set division range. Use this method only when dividing an assembly. ;  ; void SetSpacedOut (Bool_t flag);  ; void SetVolume (TGeoVolume *vol);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UpdateMatrix (Int_t, TGeoHMatrix &) const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t C",MatchSource.WIKI,doc/master/classTGeoPatternFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternFinder.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoPatternFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternFinder.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternHoneycomb.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternHoneycomb.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternHoneycomb.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternHoneycomb.html
Modifiability,inherit,inherited,"GeoPatternFinder.h. Public Member Functions;  TGeoPatternHoneycomb ();  Default constructor. ;  ;  TGeoPatternHoneycomb (TGeoVolume *vol, Int_t nrows);  Default constructor. ;  ;  ~TGeoPatternHoneycomb () override;  destructor ;  ; void cd (Int_t idiv) override;  Update current division index and global matrix to point to a given slice. ;  ; TGeoMatrix * CreateMatrix () const override;  Return new matrix of type used by this finder. ;  ; TGeoNode * FindNode (Double_t *point, const Double_t *dir=nullptr) override;  find the node containing the query point ;  ; TClass * IsA () const override;  ; TGeoPatternFinder * MakeCopy (Bool_t) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Default constructor. ;  ;  ~TGeoPatternFinder () override;  Destructor. ;  ; virtual TGeoNode * CdNext ();  Make next node (if any) current. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t GetByteCount () const;  ; Int_t GetCurrent ();  Return current index. ;  ; virtual Int_t GetDivAxis ();  ; Int_t GetDivIndex ();  ; Double_t GetEnd () const;  ; virtual TGeoMatrix * GetMatrix ();  Return current matrix. ;  ; Int_t GetNdiv () const;  ; Int_t GetNext () const;  Get index of next division. ;  ; TGeoNode * GetNodeOffset (Int_t idiv);  ; Double_t GetStart () const;  ; Double_t GetStep () const;  ; ThreadData_t & GetThreadData () const;  ; TGeoVolume * GetVolume () const;  ; virtual Bool_t IsOnBoundary (const Double_t *) const;  ; Bool_t IsReflected () const;  ; Bool_t IsSpacedOut () const;  ;",MatchSource.WIKI,doc/master/classTGeoPatternHoneycomb.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternHoneycomb.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoPatternHoneycomb.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternHoneycomb.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternParaX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternParaX.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternParaX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternParaX.html
Modifiability,inherit,inherited,"indNode (Double_t *point, const Double_t *dir=nullptr) override;  get the node division containing the query point ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; Bool_t IsOnBoundary (const Double_t *point) const override;  Checks if the current point is on division boundary. ;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternParaX & operator= (const TGeoPatternParaX &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Default constructor. ;  ;  ~TGeoPatternFinder () override;  Destructor. ;  ; virtual TGeoNode * CdNext ();  Make next node (if any) current. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t GetByteCount () const;  ; Int_t GetCurrent ();  Return current index. ;  ; Int_t GetDivIndex ();  ; Double_t GetEnd () const;  ; virtual TGeoMatrix * GetMatrix ();  Return current matrix. ;  ; Int_t GetNdiv () const;  ; Int_t GetNext () const;  Get index of next division. ;  ; TGeoNode * GetNodeOffset (Int_t idiv);  ; Double_t GetStart () const;  ; Double_t GetStep () const;  ; ThreadData_t & GetThreadData () const;  ; TGeoVolume * GetVolume () const;  ; Bool_t IsReflected () const;  ; Bool_t IsSpacedOut () const;  ; void Reflect (Bool_t flag=kTRUE);  ; void SetDivIndex (Int_t index);  ; void SetNext (In",MatchSource.WIKI,doc/master/classTGeoPatternParaX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternParaX.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoPatternParaX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternParaX.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternParaY.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternParaY.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternParaY.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternParaY.html
Modifiability,inherit,inherited,"indNode (Double_t *point, const Double_t *dir=nullptr) override;  get the node division containing the query point ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; Bool_t IsOnBoundary (const Double_t *point) const override;  Checks if the current point is on division boundary. ;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternParaY & operator= (const TGeoPatternParaY &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Default constructor. ;  ;  ~TGeoPatternFinder () override;  Destructor. ;  ; virtual TGeoNode * CdNext ();  Make next node (if any) current. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t GetByteCount () const;  ; Int_t GetCurrent ();  Return current index. ;  ; Int_t GetDivIndex ();  ; Double_t GetEnd () const;  ; virtual TGeoMatrix * GetMatrix ();  Return current matrix. ;  ; Int_t GetNdiv () const;  ; Int_t GetNext () const;  Get index of next division. ;  ; TGeoNode * GetNodeOffset (Int_t idiv);  ; Double_t GetStart () const;  ; Double_t GetStep () const;  ; ThreadData_t & GetThreadData () const;  ; TGeoVolume * GetVolume () const;  ; Bool_t IsReflected () const;  ; Bool_t IsSpacedOut () const;  ; void Reflect (Bool_t flag=kTRUE);  ; void SetDivIndex (Int_t index);  ; void SetNext (In",MatchSource.WIKI,doc/master/classTGeoPatternParaY.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternParaY.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoPatternParaY.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternParaY.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternParaZ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternParaZ.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternParaZ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternParaZ.html
Modifiability,inherit,inherited,"indNode (Double_t *point, const Double_t *dir=nullptr) override;  get the node division containing the query point ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; Bool_t IsOnBoundary (const Double_t *point) const override;  Checks if the current point is on division boundary. ;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternParaZ & operator= (const TGeoPatternParaZ &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Default constructor. ;  ;  ~TGeoPatternFinder () override;  Destructor. ;  ; virtual TGeoNode * CdNext ();  Make next node (if any) current. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t GetByteCount () const;  ; Int_t GetCurrent ();  Return current index. ;  ; Int_t GetDivIndex ();  ; Double_t GetEnd () const;  ; virtual TGeoMatrix * GetMatrix ();  Return current matrix. ;  ; Int_t GetNdiv () const;  ; Int_t GetNext () const;  Get index of next division. ;  ; TGeoNode * GetNodeOffset (Int_t idiv);  ; Double_t GetStart () const;  ; Double_t GetStep () const;  ; ThreadData_t & GetThreadData () const;  ; TGeoVolume * GetVolume () const;  ; Bool_t IsReflected () const;  ; Bool_t IsSpacedOut () const;  ; void Reflect (Bool_t flag=kTRUE);  ; void SetDivIndex (Int_t index);  ; void SetNext (In",MatchSource.WIKI,doc/master/classTGeoPatternParaZ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternParaZ.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoPatternParaZ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternParaZ.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternSphPhi.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternSphPhi.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternSphPhi.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternSphPhi.html
Modifiability,inherit,inherited,"Matrix () const override;  Return new matrix of type used by this finder. ;  ; TGeoNode * FindNode (Double_t *point, const Double_t *dir=nullptr) override;  find the node containing the query point ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; Bool_t IsOnBoundary (const Double_t *point) const override;  Checks if the current point is on division boundary. ;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Default constructor. ;  ;  ~TGeoPatternFinder () override;  Destructor. ;  ; virtual TGeoNode * CdNext ();  Make next node (if any) current. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t GetByteCount () const;  ; Int_t GetCurrent ();  Return current index. ;  ; Int_t GetDivIndex ();  ; Double_t GetEnd () const;  ; virtual TGeoMatrix * GetMatrix ();  Return current matrix. ;  ; Int_t GetNdiv () const;  ; Int_t GetNext () const;  Get index of next division. ;  ; TGeoNode * GetNodeOffset (Int_t idiv);  ; Double_t GetStart () const;  ; Double_t GetStep () const;  ; ThreadData_t & GetThreadData () const;  ; TGeoVolume * GetVolume () const;  ; Bool_t IsReflected () const;  ; Bool_t IsSpacedOut () const;  ; void Reflect (Bool_t flag=kTRUE);  ; void SetDivIndex (Int_t index);  ; void SetNext (In",MatchSource.WIKI,doc/master/classTGeoPatternSphPhi.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternSphPhi.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoPatternSphPhi.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternSphPhi.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternSphR.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternSphR.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternSphR.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternSphR.html
Modifiability,inherit,inherited," given slice. ;  ; TGeoMatrix * CreateMatrix () const override;  Return new matrix of type used by this finder. ;  ; TGeoNode * FindNode (Double_t *point, const Double_t *dir=nullptr) override;  find the node containing the query point ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternSphR & operator= (const TGeoPatternSphR &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Default constructor. ;  ;  ~TGeoPatternFinder () override;  Destructor. ;  ; virtual TGeoNode * CdNext ();  Make next node (if any) current. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t GetByteCount () const;  ; Int_t GetCurrent ();  Return current index. ;  ; Int_t GetDivIndex ();  ; Double_t GetEnd () const;  ; virtual TGeoMatrix * GetMatrix ();  Return current matrix. ;  ; Int_t GetNdiv () const;  ; Int_t GetNext () const;  Get index of next division. ;  ; TGeoNode * GetNodeOffset (Int_t idiv);  ; Double_t GetStart () const;  ; Double_t GetStep () const;  ; ThreadData_t & GetThreadData () const;  ; TGeoVolume * GetVolume () const;  ; virtual Bool_t IsOnBoundary (const Double_t *) const;  ; Bool_t IsReflected () const;  ; Bool_t IsSpacedOut () const;  ; void Reflect (Bool_t flag=kTRUE",MatchSource.WIKI,doc/master/classTGeoPatternSphR.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternSphR.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoPatternSphR.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternSphR.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternSphTheta.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternSphTheta.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternSphTheta.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternSphTheta.html
Modifiability,inherit,inherited,"lice. ;  ; TGeoMatrix * CreateMatrix () const override;  Return new matrix of type used by this finder. ;  ; TGeoNode * FindNode (Double_t *point, const Double_t *dir=nullptr) override;  find the node containing the query point ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternSphTheta & operator= (const TGeoPatternSphTheta &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Default constructor. ;  ;  ~TGeoPatternFinder () override;  Destructor. ;  ; virtual TGeoNode * CdNext ();  Make next node (if any) current. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t GetByteCount () const;  ; Int_t GetCurrent ();  Return current index. ;  ; Int_t GetDivIndex ();  ; Double_t GetEnd () const;  ; virtual TGeoMatrix * GetMatrix ();  Return current matrix. ;  ; Int_t GetNdiv () const;  ; Int_t GetNext () const;  Get index of next division. ;  ; TGeoNode * GetNodeOffset (Int_t idiv);  ; Double_t GetStart () const;  ; Double_t GetStep () const;  ; ThreadData_t & GetThreadData () const;  ; TGeoVolume * GetVolume () const;  ; virtual Bool_t IsOnBoundary (const Double_t *) const;  ; Bool_t IsReflected () const;  ; Bool_t IsSpacedOut () const;  ; void Reflect (Bool_t flag=kTRUE",MatchSource.WIKI,doc/master/classTGeoPatternSphTheta.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternSphTheta.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoPatternSphTheta.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternSphTheta.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternTrapZ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternTrapZ.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternTrapZ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternTrapZ.html
Modifiability,inherit,inherited,"rride;  get the node division containing the query point ;  ; Int_t GetDivAxis () override;  ; Double_t GetTxz () const;  ; Double_t GetTyz () const;  ; TClass * IsA () const override;  ; Bool_t IsOnBoundary (const Double_t *point) const override;  Checks if the current point is on division boundary. ;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternTrapZ & operator= (const TGeoPatternTrapZ &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Default constructor. ;  ;  ~TGeoPatternFinder () override;  Destructor. ;  ; virtual TGeoNode * CdNext ();  Make next node (if any) current. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t GetByteCount () const;  ; Int_t GetCurrent ();  Return current index. ;  ; Int_t GetDivIndex ();  ; Double_t GetEnd () const;  ; virtual TGeoMatrix * GetMatrix ();  Return current matrix. ;  ; Int_t GetNdiv () const;  ; Int_t GetNext () const;  Get index of next division. ;  ; TGeoNode * GetNodeOffset (Int_t idiv);  ; Double_t GetStart () const;  ; Double_t GetStep () const;  ; ThreadData_t & GetThreadData () const;  ; TGeoVolume * GetVolume () const;  ; Bool_t IsReflected () const;  ; Bool_t IsSpacedOut () const;  ; void Reflect (Bool_t flag=kTRUE);  ; void SetDivIndex (Int_t index);  ; void SetNext (In",MatchSource.WIKI,doc/master/classTGeoPatternTrapZ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternTrapZ.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoPatternTrapZ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternTrapZ.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternX.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternX.html
Modifiability,inherit,inherited,"_t *point, const Double_t *dir=nullptr) override;  Find the cell corresponding to point and next cell along dir (if asked) ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; Bool_t IsOnBoundary (const Double_t *point) const override;  Checks if the current point is on division boundary. ;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternX & operator= (const TGeoPatternX &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Default constructor. ;  ;  ~TGeoPatternFinder () override;  Destructor. ;  ; virtual TGeoNode * CdNext ();  Make next node (if any) current. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t GetByteCount () const;  ; Int_t GetCurrent ();  Return current index. ;  ; Int_t GetDivIndex ();  ; Double_t GetEnd () const;  ; virtual TGeoMatrix * GetMatrix ();  Return current matrix. ;  ; Int_t GetNdiv () const;  ; Int_t GetNext () const;  Get index of next division. ;  ; TGeoNode * GetNodeOffset (Int_t idiv);  ; Double_t GetStart () const;  ; Double_t GetStep () const;  ; ThreadData_t & GetThreadData () const;  ; TGeoVolume * GetVolume () const;  ; Bool_t IsReflected () const;  ; Bool_t IsSpacedOut () const;  ; void Reflect (Bool_t flag=kTRUE);  ; void SetDivIndex (Int_t index);  ; void SetNext (In",MatchSource.WIKI,doc/master/classTGeoPatternX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternX.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoPatternX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternX.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternY.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternY.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternY.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternY.html
Modifiability,inherit,inherited,"_t *point, const Double_t *dir=nullptr) override;  Find the cell corresponding to point and next cell along dir (if asked) ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; Bool_t IsOnBoundary (const Double_t *point) const override;  Checks if the current point is on division boundary. ;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternY & operator= (const TGeoPatternY &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Default constructor. ;  ;  ~TGeoPatternFinder () override;  Destructor. ;  ; virtual TGeoNode * CdNext ();  Make next node (if any) current. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t GetByteCount () const;  ; Int_t GetCurrent ();  Return current index. ;  ; Int_t GetDivIndex ();  ; Double_t GetEnd () const;  ; virtual TGeoMatrix * GetMatrix ();  Return current matrix. ;  ; Int_t GetNdiv () const;  ; Int_t GetNext () const;  Get index of next division. ;  ; TGeoNode * GetNodeOffset (Int_t idiv);  ; Double_t GetStart () const;  ; Double_t GetStep () const;  ; ThreadData_t & GetThreadData () const;  ; TGeoVolume * GetVolume () const;  ; Bool_t IsReflected () const;  ; Bool_t IsSpacedOut () const;  ; void Reflect (Bool_t flag=kTRUE);  ; void SetDivIndex (Int_t index);  ; void SetNext (In",MatchSource.WIKI,doc/master/classTGeoPatternY.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternY.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoPatternY.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternY.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternZ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternZ.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPatternZ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternZ.html
Modifiability,inherit,inherited,"_t *point, const Double_t *dir=nullptr) override;  Find the cell corresponding to point and next cell along dir (if asked) ;  ; Int_t GetDivAxis () override;  ; TClass * IsA () const override;  ; Bool_t IsOnBoundary (const Double_t *point) const override;  Checks if the current point is on division boundary. ;  ; TGeoPatternFinder * MakeCopy (Bool_t reflect=kFALSE) override;  Make a copy of this finder. Reflect by Z if required. ;  ; TGeoPatternZ & operator= (const TGeoPatternZ &);  assignment operator ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateMatrix (Int_t idiv, TGeoHMatrix &matrix) const override;  Fills external matrix with the local one corresponding to the given division index. ;  ;  Public Member Functions inherited from TGeoPatternFinder;  TGeoPatternFinder ();  Default constructor. ;  ;  TGeoPatternFinder (TGeoVolume *vol, Int_t ndiv);  Default constructor. ;  ;  ~TGeoPatternFinder () override;  Destructor. ;  ; virtual TGeoNode * CdNext ();  Make next node (if any) current. ;  ; void ClearThreadData () const;  ; void CreateThreadData (Int_t nthreads);  Create thread data for n threads max. ;  ; virtual Int_t GetByteCount () const;  ; Int_t GetCurrent ();  Return current index. ;  ; Int_t GetDivIndex ();  ; Double_t GetEnd () const;  ; virtual TGeoMatrix * GetMatrix ();  Return current matrix. ;  ; Int_t GetNdiv () const;  ; Int_t GetNext () const;  Get index of next division. ;  ; TGeoNode * GetNodeOffset (Int_t idiv);  ; Double_t GetStart () const;  ; Double_t GetStep () const;  ; ThreadData_t & GetThreadData () const;  ; TGeoVolume * GetVolume () const;  ; Bool_t IsReflected () const;  ; Bool_t IsSpacedOut () const;  ; void Reflect (Bool_t flag=kTRUE);  ; void SetDivIndex (Int_t index);  ; void SetNext (In",MatchSource.WIKI,doc/master/classTGeoPatternZ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternZ.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoPatternZ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPatternZ.html
Availability,error,error,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoPcon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPcon.html
Integrability,message,message,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoPcon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPcon.html
Modifiability,inherit,inherited,"tement(s) on output stream ""out"". ;  ; void SetDimensions (Double_t *param) override;  ; void SetPoints (Double_t *points) const override;  ; void SetPoints (Float_t *points) const override;  ; void SetSegsAndPols (TBuffer3D &buff) const override;  ; void Sizeof3D () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Double_t & Z (Int_t ipl);  ;  Public Member Functions inherited from TGeoBBox;  TGeoBBox ();  ;  TGeoBBox (const char *name, Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ;  TGeoBBox (Double_t *param);  ;  TGeoBBox (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ;  ~TGeoBBox () override;  ; Bool_t CouldBeCrossed (const Double_t *point, const Double_t *dir) const override;  ; virtual Double_t GetDX () const;  ; virtual Double_t GetDY () const;  ; virtual Double_t GetDZ () const;  ; virtual Double_t GetFacetArea (Int_t index=0) const;  ; Int_t GetFittingBox (const TGeoBBox *parambox, TGeoMatrix *mat, Double_t &dx, Double_t &dy, Double_t &dz) const override;  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option",MatchSource.WIKI,doc/master/classTGeoPcon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPcon.html
Safety,safe,safe,"uble_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; virtual void DefineSection (Int_t snum, Double_t z, Double_t rmin, Double_t rmax);  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistToSegZ (const Double_t *point, const Double_t *dir, Int_t &iz) const;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; Double_t & Dphi ();  ; const char * GetAxisName (Int_t iaxis) const override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; Int_t GetByteCount () const override;  ; Double_t GetDphi () const;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *, TGeoMatrix *) const override;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  ; Int_t GetNmeshVertices () const override;  ; virtual Int_t GetNsegments () const;  ; Int_t GetNz () const;  ; Double_t GetPhi1 () const;  ; Bool_t GetPointsOnSegments",MatchSource.WIKI,doc/master/classTGeoPcon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPcon.html
Security,hash,hash," &ClassDef_StreamerNVirtual_b);  ; Bool_t TestShapeBit (UInt_t f) const;  ; Int_t TestShapeBits (UInt_t f) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoPcon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPcon.html
Testability,test,testNo,"le_t *dir) const override;  ; virtual Double_t GetDX () const;  ; virtual Double_t GetDY () const;  ; virtual Double_t GetDZ () const;  ; virtual Double_t GetFacetArea (Int_t index=0) const;  ; Int_t GetFittingBox (const TGeoBBox *parambox, TGeoMatrix *mat, Double_t &dx, Double_t &dy, Double_t &dz) const override;  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; TClass * IsA () const override;  ; virtual Bool_t IsAssembly () const;  ; virtual Bool_t IsComposite () const;  ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; vo",MatchSource.WIKI,doc/master/classTGeoPcon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPcon.html
Availability,error,error,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoPgon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPgon.html
Integrability,message,message,"ct"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,doc/master/classTGeoPgon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPgon.html
Modifiability,inherit,inherited,,MatchSource.WIKI,doc/master/classTGeoPgon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPgon.html
Safety,safe,safe,"override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; void CreateThreadData (Int_t nthreads) override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; Int_t GetByteCount () const override;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *, TGeoMatrix *) const override;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  ; Int_t GetNedges () const;  ; Int_t GetNmeshVertices () const override;  ; Int_t GetNsegments () const override;  ; Bool_t GetPointsOnSegments (Int_t npoints, Double_t *array) const override;  ; ThreadData_t & GetThreadData () const;  ; void InspectShape () const override;  ; TClass * IsA () const override;  ; TBuffer3D *",MatchSource.WIKI,doc/master/classTGeoPgon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPgon.html
Security,hash,hash," &ClassDef_StreamerNVirtual_b);  ; Bool_t TestShapeBit (UInt_t f) const;  ; Int_t TestShapeBits (UInt_t f) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoPgon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPgon.html
Testability,test,testNo,"le_t *dir) const override;  ; virtual Double_t GetDX () const;  ; virtual Double_t GetDY () const;  ; virtual Double_t GetDZ () const;  ; virtual Double_t GetFacetArea (Int_t index=0) const;  ; Int_t GetFittingBox (const TGeoBBox *parambox, TGeoMatrix *mat, Double_t &dx, Double_t &dy, Double_t &dz) const override;  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; TClass * IsA () const override;  ; virtual Bool_t IsAssembly () const;  ; virtual Bool_t IsComposite () const;  ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; void SetShapeBit (UInt_t f, Bool_t set);  Equivalent of TObject::SetBit. ;  ; Int_t Sh",MatchSource.WIKI,doc/master/classTGeoPgon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPgon.html
Availability,error,error,"d graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoPhysicalNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPhysicalNode.html
Integrability,message,message,"d graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoPhysicalNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPhysicalNode.html
Modifiability,inherit,inherited,"f positioned ...Definition TGeoPhysicalNode.h:35; TGeoPhysicalNode::TGeoPhysicalNodeTGeoPhysicalNode()Default constructor.Definition TGeoPhysicalNode.cxx:77; Once created, a physical node can be misaligned, meaning that its position or even shape can be changed:; pn->Align(TGeoMatrix* newmat, TGeoShape* newshape, Bool_t check=kFALSE); kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; TGeoMatrixGeometrical transformation package.Definition TGeoMatrix.h:38; TGeoPhysicalNode::AlignBool_t Align(TGeoMatrix *newmat=nullptr, TGeoShape *newshape=nullptr, Bool_t check=kFALSE, Double_t ovlp=0.001)Align a physical node with a new relative matrix/shape.Definition TGeoPhysicalNode.cxx:135; TGeoShapeBase abstract class for all shapes.Definition TGeoShape.h:25; bool. Definition at line 35 of file TGeoPhysicalNode.h. Public Types; enum  { kGeoPNodeFull = (1ULL << ( 10 )); , kGeoPNodeVisible = (1ULL << ( 11 )); , kGeoPNodeVolAtt = (1ULL << ( 12 )); , kGeoPNodeAligned = (1ULL << ( 13 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoPhysicalNode ();  Default constructor. ;  ;  TGeoPhysicalNode (const char *path);  Constructor. ;  ;  ~TGeoPhysicalNode () override;  Destructor. ;  ; Bool_t Align (TGeoMatrix *newmat=nullptr, TGeoShape *newshape=nullptr, Bool_t check=kFALSE, Double_t ovlp=0.001);  Align a physical node with a new relative matrix/shape. ;  ; void cd ",MatchSource.WIKI,doc/master/classTGeoPhysicalNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPhysicalNode.html
Performance,perform,perform,".h. Constructor & Destructor Documentation. ◆ TGeoPhysicalNode() [1/3]. TGeoPhysicalNode::TGeoPhysicalNode ; (; const TGeoPhysicalNode & ; ). protecteddelete . ◆ TGeoPhysicalNode() [2/3]. TGeoPhysicalNode::TGeoPhysicalNode ; (; ). Default constructor. ; Definition at line 77 of file TGeoPhysicalNode.cxx. ◆ TGeoPhysicalNode() [3/3]. TGeoPhysicalNode::TGeoPhysicalNode ; (; const char * ; path). Constructor. ; Definition at line 92 of file TGeoPhysicalNode.cxx. ◆ ~TGeoPhysicalNode(). TGeoPhysicalNode::~TGeoPhysicalNode ; (; ). override . Destructor. ; Definition at line 112 of file TGeoPhysicalNode.cxx. Member Function Documentation. ◆ Align(). Bool_t TGeoPhysicalNode::Align ; (; TGeoMatrix * ; newmat = nullptr, . TGeoShape * ; newshape = nullptr, . Bool_t ; check = kFALSE, . Double_t ; ovlp = 0.001 . ). Align a physical node with a new relative matrix/shape. ; Example: /TOP_1/A_1/B_1/C_1 node->Align(transl_1, box) will perform:; change RELATIVE translation of C_1 node (with respect to its container volume B) to transl_1; change the shape of the C volume NOTE The operations will affect ONLY the LAST node in the branch. All volumes/nodes in the branch represented by this physical node are CLONED so the operation does not affect other possible replicas. . Definition at line 135 of file TGeoPhysicalNode.cxx. ◆ cd(). void TGeoPhysicalNode::cd ; (; ); const. Definition at line 366 of file TGeoPhysicalNode.cxx. ◆ Class(). static TClass * TGeoPhysicalNode::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoPhysicalNode::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoPhysicalNode::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 90 of file TGeoPhysicalNode.h. ◆ DeclFileName(). static const char * TGeoPhysicalNode::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at lin",MatchSource.WIKI,doc/master/classTGeoPhysicalNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPhysicalNode.html
Safety,detect,detector,". ROOT: TGeoPhysicalNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TGeoPhysicalNode Class ReferenceThe Geometry Package » Geometry classes. ; Physical nodes are the actual 'touchable' objects in the geometry, representing a path of positioned volumes starting with the top node: path=/TOP/A_1/B_4/C_3 , where A, B, C represent names of volumes. ; The number of physical nodes is given by the total number of possible of branches in the geometry hierarchy. In case of detector geometries and specially for calorimeters this number can be of the order 1e6-1e9, therefore it is impossible to create all physical nodes as objects in memory. In TGeo, physical nodes are represented by the class TGeoPhysicalNode and can be created on demand for alignment purposes:; TGeoPhysicalNode *pn = new TGeoPhysicalNode(""path_to_object""); TGeoPhysicalNodePhysical nodes are the actual 'touchable' objects in the geometry, representing a path of positioned ...Definition TGeoPhysicalNode.h:35; TGeoPhysicalNode::TGeoPhysicalNodeTGeoPhysicalNode()Default constructor.Definition TGeoPhysicalNode.cxx:77; Once created, a physical node can be misaligned, meaning that its position or even shape can be changed:; pn->Align(TGeoMatrix* newmat, TGeoShape* newshape, Bool_t check=kFALSE); kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; TGeoMatrixGeometrical transformation package.Definition TGeoMatrix.h:38; TGeoPhysicalNode::AlignBool_t Align(TGeoMatrix *newmat=nullptr, TGeoShape *newshape=nullptr, Bool_t check=kFALSE, Double_t ovlp=0.001)Align a physical node with a new relative matrix/shape.Definition TGeoPhysicalNode.cxx:135; TGeoShapeBase abstract class for all shapes.Definition TGeoShape.h:25; bool. Definition at line 35 of file TGeoPhysicalNode.h. Public Types; enum  {",MatchSource.WIKI,doc/master/classTGeoPhysicalNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPhysicalNode.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoPhysicalNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPhysicalNode.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoPNEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPNEntry.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoPNEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPNEntry.html
Modifiability,inherit,inherited,"rch by name and they may optionally store an additional user matrix.; For more details please read the misalignment section. ; Definition at line 100 of file TGeoPhysicalNode.h. Public Member Functions;  TGeoPNEntry ();  Default constructor. ;  ;  TGeoPNEntry (const char *unique_name, const char *path);  Default constructor. ;  ;  ~TGeoPNEntry () override;  Destructor. ;  ; TGeoHMatrix * GetGlobalOrig () const;  ; const TGeoHMatrix * GetMatrix () const;  ; TGeoHMatrix * GetMatrixOrig () const;  ; const char * GetPath () const;  ; TGeoPhysicalNode * GetPhysicalNode () const;  ; TClass * IsA () const override;  ; void SetMatrix (const TGeoHMatrix *matrix);  Set the additional matrix for this node entry. ;  ; void SetPhysicalNode (TGeoPhysicalNode *node);  Setter for the corresponding physical node. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTGeoPNEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPNEntry.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoPNEntry.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPNEntry.html
Availability,error,error,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPolygon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPolygon.html
Integrability,message,message,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoPolygon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPolygon.html
Modifiability,inherit,inherited,"tree structure is formed:; P = Pconvex - (Pconvex-P) where (-) means 'subtraction'; Pconvex-P = P1 + P2 + ... where (+) means 'union'; Note that P1, P2, ... do not intersect each other and they are defined by subsets of the list of vertices of P. They can be split in the same way as P*; Therefore, if C(P) represents the Boolean : 'does P contains a given point?', then:; C(P) = C(Pconvex) .and. not(C(P1) | C(P2) | ...); For creating a polygon without TGeoXtru class, one has to call the constructor TGeoPolygon(nvert) and then SetXY(Double_t *x, Double_t *y) providing the arrays of X and Y vertex positions (defined clockwise) that have to 'live' longer than the polygon they will describe. This complication is due to efficiency reasons. At the end one has to call the FinishPolygon() method. ; Definition at line 19 of file TGeoPolygon.h. Public Types; enum  { kGeoConvex = (1ULL << ( 9 )); , kGeoFinishPolygon = (1ULL << ( 10 )); , kGeoACW = (1ULL << ( 11 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGeoPolygon ();  Dummy constructor. ;  ;  TGeoPolygon (Int_t nvert);  Default constructor. ;  ;  ~TGeoPolygon () override;  Destructor. ;  ; Double_t Area () const;  Computes area of the polygon in [length^2]. ;  ; Bool_t Contains (const Double_t *point) const;  Check if a point given by X = point[0], Y = point[1] is inside the polygon. ;  ; void Draw (Option_t ",MatchSource.WIKI,doc/master/classTGeoPolygon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPolygon.html
Performance,perform,performed,". ROOT: TGeoPolygon Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGeoPolygon Class ReferenceThe Geometry Package » Shapes. ; An arbitrary polygon defined by vertices. ; The vertices have to be defined CLOCKWISE in the XY plane, making either a convex or concave polygon. No test for malformed polygons is performed.; A polygon is a 2D shape defined by vertices in the XY plane. It is used by TGeoXtru class for computing Contains() and Safety(). Only the pointers to the actual lists of XY values are used - these are not owned by the class.; To check if a point in XY plane is contained by a polygon, this is split into an outscribed convex polygon and the remaining polygons of its subtraction from the outscribed one. A point is INSIDE if it is contained by the outscribed polygon but NOT by the remaining ones. Since these can also be arbitrary polygons at their turn, a tree structure is formed:; P = Pconvex - (Pconvex-P) where (-) means 'subtraction'; Pconvex-P = P1 + P2 + ... where (+) means 'union'; Note that P1, P2, ... do not intersect each other and they are defined by subsets of the list of vertices of P. They can be split in the same way as P*; Therefore, if C(P) represents the Boolean : 'does P contains a given point?', then:; C(P) = C(Pconvex) .and. not(C(P1) | C(P2) | ...); For creating a polygon without TGeoXtru class, one has to call the constructor TGeoPolygon(nvert) and then SetXY(Double_t *x, Double_t *y) providing the arrays of X and Y vertex positions (defined clockwise) that have to 'live' longer than the polygon they will describe. This complication is due to efficiency reasons. At the end one has to call the FinishPolygon() method. ; Definition at line 19 of file TGeoPolygon.h. Public Types; enum  { kGeoConvex = (1ULL << ( 9 )); , ",MatchSource.WIKI,doc/master/classTGeoPolygon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPolygon.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoPolygon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPolygon.html
Testability,test,test,". ROOT: TGeoPolygon Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TGeoPolygon Class ReferenceThe Geometry Package » Shapes. ; An arbitrary polygon defined by vertices. ; The vertices have to be defined CLOCKWISE in the XY plane, making either a convex or concave polygon. No test for malformed polygons is performed.; A polygon is a 2D shape defined by vertices in the XY plane. It is used by TGeoXtru class for computing Contains() and Safety(). Only the pointers to the actual lists of XY values are used - these are not owned by the class.; To check if a point in XY plane is contained by a polygon, this is split into an outscribed convex polygon and the remaining polygons of its subtraction from the outscribed one. A point is INSIDE if it is contained by the outscribed polygon but NOT by the remaining ones. Since these can also be arbitrary polygons at their turn, a tree structure is formed:; P = Pconvex - (Pconvex-P) where (-) means 'subtraction'; Pconvex-P = P1 + P2 + ... where (+) means 'union'; Note that P1, P2, ... do not intersect each other and they are defined by subsets of the list of vertices of P. They can be split in the same way as P*; Therefore, if C(P) represents the Boolean : 'does P contains a given point?', then:; C(P) = C(Pconvex) .and. not(C(P1) | C(P2) | ...); For creating a polygon without TGeoXtru class, one has to call the constructor TGeoPolygon(nvert) and then SetXY(Double_t *x, Double_t *y) providing the arrays of X and Y vertex positions (defined clockwise) that have to 'live' longer than the polygon they will describe. This complication is due to efficiency reasons. At the end one has to call the FinishPolygon() method. ; Definition at line 19 of file TGeoPolygon.h. Public Types; enum  { kGeoConvex = (1ULL << ( 9 )); , ",MatchSource.WIKI,doc/master/classTGeoPolygon.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoPolygon.html
Availability,error,error,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoRCExtension.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoRCExtension.html
Deployability,release,released," Geometry Package » Geometry classes. ; Reference counted extension which has a pointer to and owns a user defined TObject. ; This class can be used as model for a reference counted derivation from TGeoExtension.; Note: Creating a TGeoRCExtension with new() automatically grabs it, but the creator has to Release it before the pointer gets out of scope. The following sequence is valid:; // producer:; TGeoRCExtension *ext = new TGeoRCExtension();; some_TGeoVolume->SetUserExtension(ext);; ext->Release();; // user:; TGeoRCExtension *ext = dynamic_cast<TGeoRCExtension*>(some_TGeoVolume->GrabUserExtension());; // ... use extension; ext->Release();; TGeoRCExtensionReference counted extension which has a pointer to and owns a user defined TObject.Definition TGeoExtension.h:33; TGeoRCExtension::TGeoRCExtensionTGeoRCExtension()Definition TGeoExtension.h:38; TGeoRCExtension::Releasevoid Release() const overrideDefinition TGeoExtension.cxx:68; The extension is going to be released by the TGeoVolume holder at the destruction or when calling SetUserExtension(0).; The following usage is not correct:; some_TGeoVolume->SetUserExtension(new TGeoRCExtension()); since the producer code does not release the extension. One cannot call directly ""delete ext"" nor allocate an extension on the stack, since the destructor is protected. Use Release instead. ; Definition at line 33 of file TGeoExtension.h. Public Member Functions;  TGeoRCExtension ();  ;  TGeoRCExtension (TObject *obj);  ; TObject * GetUserObject () const;  ; TGeoExtension * Grab () override;  ; TClass * IsA () const override;  ; void Release () const override;  ; void SetUserObject (TObject *obj);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoExtension; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject c",MatchSource.WIKI,doc/master/classTGeoRCExtension.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoRCExtension.html
Energy Efficiency,allocate,allocate," grabs it, but the creator has to Release it before the pointer gets out of scope. The following sequence is valid:; // producer:; TGeoRCExtension *ext = new TGeoRCExtension();; some_TGeoVolume->SetUserExtension(ext);; ext->Release();; // user:; TGeoRCExtension *ext = dynamic_cast<TGeoRCExtension*>(some_TGeoVolume->GrabUserExtension());; // ... use extension; ext->Release();; TGeoRCExtensionReference counted extension which has a pointer to and owns a user defined TObject.Definition TGeoExtension.h:33; TGeoRCExtension::TGeoRCExtensionTGeoRCExtension()Definition TGeoExtension.h:38; TGeoRCExtension::Releasevoid Release() const overrideDefinition TGeoExtension.cxx:68; The extension is going to be released by the TGeoVolume holder at the destruction or when calling SetUserExtension(0).; The following usage is not correct:; some_TGeoVolume->SetUserExtension(new TGeoRCExtension()); since the producer code does not release the extension. One cannot call directly ""delete ext"" nor allocate an extension on the stack, since the destructor is protected. Use Release instead. ; Definition at line 33 of file TGeoExtension.h. Public Member Functions;  TGeoRCExtension ();  ;  TGeoRCExtension (TObject *obj);  ; TObject * GetUserObject () const;  ; TGeoExtension * Grab () override;  ; TClass * IsA () const override;  ; void Release () const override;  ; void SetUserObject (TObject *obj);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoExtension; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ;",MatchSource.WIKI,doc/master/classTGeoRCExtension.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoRCExtension.html
Integrability,message,message,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGeoRCExtension.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoRCExtension.html
Modifiability,inherit,inherited,"::Releasevoid Release() const overrideDefinition TGeoExtension.cxx:68; The extension is going to be released by the TGeoVolume holder at the destruction or when calling SetUserExtension(0).; The following usage is not correct:; some_TGeoVolume->SetUserExtension(new TGeoRCExtension()); since the producer code does not release the extension. One cannot call directly ""delete ext"" nor allocate an extension on the stack, since the destructor is protected. Use Release instead. ; Definition at line 33 of file TGeoExtension.h. Public Member Functions;  TGeoRCExtension ();  ;  TGeoRCExtension (TObject *obj);  ; TObject * GetUserObject () const;  ; TGeoExtension * Grab () override;  ; TClass * IsA () const override;  ; void Release () const override;  ; void SetUserObject (TObject *obj);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoExtension; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer",MatchSource.WIKI,doc/master/classTGeoRCExtension.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoRCExtension.html
Security,hash,hash," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGeoRCExtension.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoRCExtension.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoRegion.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoRegion.html
Integrability,wrap,wrapper,". ROOT: TGeoRegion Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoRegion Class ReferenceThe Geometry Package » Geometry classes. ; Regions are groups of volumes having a common set of user tracking cuts. ; Class wrapper for regions used by Monte Carlo packages A region is composed by a list of logical volumes and defines a set of cuts. Used mainly to transport region information stored in GDML format to the clients requiring it from the transient geometry. ; Definition at line 36 of file TGeoRegion.h. Public Member Functions;  TGeoRegion ();  ;  TGeoRegion (const char *name, const char *title="""");  ;  TGeoRegion (const TGeoRegion &other);  Region copy constructor. ;  ;  ~TGeoRegion () override;  Region destructor. ;  ; void AddCut (const char *name, Double_t cut);  Add cut to the region. ;  ; void AddCut (const TGeoRegionCut &regioncut);  Add an identical cut to the region. ;  ; bool AddVolume (const char *name);  Add an existing volume to the region. ;  ; void AddVolume (TGeoVolume *vol);  ; TGeoRegionCut * GetCut (int i) const;  ; int GetNcuts () const;  ; int GetNvolumes () const;  ; TGeoVolume * GetVolume (int i) const;  ; TClass * IsA () const override;  ; TGeoRegion & operator= (const TGeoRegion &other);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print region info. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty st",MatchSource.WIKI,doc/master/classTGeoRegion.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoRegion.html
Modifiability,inherit,inherited,"er Functions;  TGeoRegion ();  ;  TGeoRegion (const char *name, const char *title="""");  ;  TGeoRegion (const TGeoRegion &other);  Region copy constructor. ;  ;  ~TGeoRegion () override;  Region destructor. ;  ; void AddCut (const char *name, Double_t cut);  Add cut to the region. ;  ; void AddCut (const TGeoRegionCut &regioncut);  Add an identical cut to the region. ;  ; bool AddVolume (const char *name);  Add an existing volume to the region. ;  ; void AddVolume (TGeoVolume *vol);  ; TGeoRegionCut * GetCut (int i) const;  ; int GetNcuts () const;  ; int GetNvolumes () const;  ; TGeoVolume * GetVolume (int i) const;  ; TClass * IsA () const override;  ; TGeoRegion & operator= (const TGeoRegion &other);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print region info. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTGeoRegion.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoRegion.html
Security,hash,hash," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGeoRegion.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoRegion.html
Testability,log,logical,". ROOT: TGeoRegion Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoRegion Class ReferenceThe Geometry Package » Geometry classes. ; Regions are groups of volumes having a common set of user tracking cuts. ; Class wrapper for regions used by Monte Carlo packages A region is composed by a list of logical volumes and defines a set of cuts. Used mainly to transport region information stored in GDML format to the clients requiring it from the transient geometry. ; Definition at line 36 of file TGeoRegion.h. Public Member Functions;  TGeoRegion ();  ;  TGeoRegion (const char *name, const char *title="""");  ;  TGeoRegion (const TGeoRegion &other);  Region copy constructor. ;  ;  ~TGeoRegion () override;  Region destructor. ;  ; void AddCut (const char *name, Double_t cut);  Add cut to the region. ;  ; void AddCut (const TGeoRegionCut &regioncut);  Add an identical cut to the region. ;  ; bool AddVolume (const char *name);  Add an existing volume to the region. ;  ; void AddVolume (TGeoVolume *vol);  ; TGeoRegionCut * GetCut (int i) const;  ; int GetNcuts () const;  ; int GetNvolumes () const;  ; TGeoVolume * GetVolume (int i) const;  ; TClass * IsA () const override;  ; TGeoRegion & operator= (const TGeoRegion &other);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print region info. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty st",MatchSource.WIKI,doc/master/classTGeoRegion.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoRegion.html
Availability,error,error,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoRegionCut.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoRegionCut.html
Integrability,message,message,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGeoRegionCut.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoRegionCut.html
Modifiability,inherit,inherited,". ROOT: TGeoRegionCut Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TGeoRegionCut Class Reference. . Definition at line 20 of file TGeoRegion.h. Public Member Functions;  TGeoRegionCut ();  ;  TGeoRegionCut (const char *name, Double_t cut);  ;  ~TGeoRegionCut () override;  ; Double_t GetCut () const;  ; TClass * IsA () const override;  ; void SetCut (Double_t cut);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TName",MatchSource.WIKI,doc/master/classTGeoRegionCut.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGeoRegionCut.html
